node {
  name: "conv1d_1_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 200
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "conv1d_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\t\000\000\000\003\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.09975093603134155
      }
    }
  }
}
node {
  name: "conv1d_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09975093603134155
      }
    }
  }
}
node {
  name: "conv1d_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv1d_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 7105021
    }
  }
}
node {
  name: "conv1d_1/random_uniform/sub"
  op: "Sub"
  input: "conv1d_1/random_uniform/max"
  input: "conv1d_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_1/random_uniform/mul"
  op: "Mul"
  input: "conv1d_1/random_uniform/RandomUniform"
  input: "conv1d_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_1/random_uniform"
  op: "Add"
  input: "conv1d_1/random_uniform/mul"
  input: "conv1d_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 9
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_1/kernel/Assign"
  op: "Assign"
  input: "conv1d_1/kernel"
  input: "conv1d_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_1/kernel/read"
  op: "Identity"
  input: "conv1d_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
}
node {
  name: "conv1d_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_1/bias/Assign"
  op: "Assign"
  input: "conv1d_1/bias"
  input: "conv1d_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_1/bias/read"
  op: "Identity"
  input: "conv1d_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/bias"
      }
    }
  }
}
node {
  name: "conv1d_1/Pad/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_1/Pad"
  op: "Pad"
  input: "conv1d_1_input"
  input: "conv1d_1/Pad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_1/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_1/convolution/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_1/convolution/ExpandDims"
  op: "ExpandDims"
  input: "conv1d_1/Pad"
  input: "conv1d_1/convolution/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_1/convolution/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv1d_1/convolution/ExpandDims_1"
  op: "ExpandDims"
  input: "conv1d_1/kernel/read"
  input: "conv1d_1/convolution/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_1/convolution/Conv2D"
  op: "Conv2D"
  input: "conv1d_1/convolution/ExpandDims"
  input: "conv1d_1/convolution/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_1/convolution/Squeeze"
  op: "Squeeze"
  input: "conv1d_1/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "conv1d_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_1/Reshape"
  op: "Reshape"
  input: "conv1d_1/bias/read"
  input: "conv1d_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_1/add"
  op: "Add"
  input: "conv1d_1/convolution/Squeeze"
  input: "conv1d_1/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_1/Relu"
  op: "Relu"
  input: "conv1d_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "max_pooling1d_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_1/ExpandDims"
  op: "ExpandDims"
  input: "conv1d_1/Relu"
  input: "max_pooling1d_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "max_pooling1d_1/MaxPool"
  op: "MaxPool"
  input: "max_pooling1d_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "max_pooling1d_1/Squeeze"
  op: "Squeeze"
  input: "max_pooling1d_1/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "conv1d_2/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_2/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.09682458639144897
      }
    }
  }
}
node {
  name: "conv1d_2/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09682458639144897
      }
    }
  }
}
node {
  name: "conv1d_2/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv1d_2/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 9724409
    }
  }
}
node {
  name: "conv1d_2/random_uniform/sub"
  op: "Sub"
  input: "conv1d_2/random_uniform/max"
  input: "conv1d_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_2/random_uniform/mul"
  op: "Mul"
  input: "conv1d_2/random_uniform/RandomUniform"
  input: "conv1d_2/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_2/random_uniform"
  op: "Add"
  input: "conv1d_2/random_uniform/mul"
  input: "conv1d_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_2/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_2/kernel/Assign"
  op: "Assign"
  input: "conv1d_2/kernel"
  input: "conv1d_2/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_2/kernel/read"
  op: "Identity"
  input: "conv1d_2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
}
node {
  name: "conv1d_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_2/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_2/bias/Assign"
  op: "Assign"
  input: "conv1d_2/bias"
  input: "conv1d_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_2/bias/read"
  op: "Identity"
  input: "conv1d_2/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/bias"
      }
    }
  }
}
node {
  name: "conv1d_2/Pad/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_2/Pad"
  op: "Pad"
  input: "max_pooling1d_1/Squeeze"
  input: "conv1d_2/Pad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_2/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv1d_2/convolution/required_space_to_batch_paddings/input_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 108
      }
    }
  }
}
node {
  name: "conv1d_2/convolution/required_space_to_batch_paddings/base_paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_2/convolution/required_space_to_batch_paddings/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_2/convolution/required_space_to_batch_paddings/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_2/convolution/SpaceToBatchND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv1d_2/convolution/SpaceToBatchND/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_2/convolution/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "conv1d_2/Pad"
  input: "conv1d_2/convolution/SpaceToBatchND/block_shape"
  input: "conv1d_2/convolution/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_2/convolution/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_2/convolution/ExpandDims"
  op: "ExpandDims"
  input: "conv1d_2/convolution/SpaceToBatchND"
  input: "conv1d_2/convolution/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_2/convolution/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv1d_2/convolution/ExpandDims_1"
  op: "ExpandDims"
  input: "conv1d_2/kernel/read"
  input: "conv1d_2/convolution/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_2/convolution/Conv2D"
  op: "Conv2D"
  input: "conv1d_2/convolution/ExpandDims"
  input: "conv1d_2/convolution/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_2/convolution/Squeeze"
  op: "Squeeze"
  input: "conv1d_2/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "conv1d_2/convolution/BatchToSpaceND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv1d_2/convolution/BatchToSpaceND/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_2/convolution/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "conv1d_2/convolution/Squeeze"
  input: "conv1d_2/convolution/BatchToSpaceND/block_shape"
  input: "conv1d_2/convolution/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_2/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_2/Reshape"
  op: "Reshape"
  input: "conv1d_2/bias/read"
  input: "conv1d_2/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_2/add"
  op: "Add"
  input: "conv1d_2/convolution/BatchToSpaceND"
  input: "conv1d_2/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_2/Relu"
  op: "Relu"
  input: "conv1d_2/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "max_pooling1d_2/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_2/ExpandDims"
  op: "ExpandDims"
  input: "conv1d_2/Relu"
  input: "max_pooling1d_2/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "max_pooling1d_2/MaxPool"
  op: "MaxPool"
  input: "max_pooling1d_2/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "max_pooling1d_2/Squeeze"
  op: "Squeeze"
  input: "max_pooling1d_2/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "conv1d_3/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_3/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.09682458639144897
      }
    }
  }
}
node {
  name: "conv1d_3/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09682458639144897
      }
    }
  }
}
node {
  name: "conv1d_3/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv1d_3/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 4855951
    }
  }
}
node {
  name: "conv1d_3/random_uniform/sub"
  op: "Sub"
  input: "conv1d_3/random_uniform/max"
  input: "conv1d_3/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_3/random_uniform/mul"
  op: "Mul"
  input: "conv1d_3/random_uniform/RandomUniform"
  input: "conv1d_3/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_3/random_uniform"
  op: "Add"
  input: "conv1d_3/random_uniform/mul"
  input: "conv1d_3/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_3/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_3/kernel/Assign"
  op: "Assign"
  input: "conv1d_3/kernel"
  input: "conv1d_3/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_3/kernel/read"
  op: "Identity"
  input: "conv1d_3/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
}
node {
  name: "conv1d_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_3/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_3/bias/Assign"
  op: "Assign"
  input: "conv1d_3/bias"
  input: "conv1d_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_3/bias/read"
  op: "Identity"
  input: "conv1d_3/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/bias"
      }
    }
  }
}
node {
  name: "conv1d_3/Pad/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_3/Pad"
  op: "Pad"
  input: "max_pooling1d_2/Squeeze"
  input: "conv1d_3/Pad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_3/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv1d_3/convolution/required_space_to_batch_paddings/input_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 58
      }
    }
  }
}
node {
  name: "conv1d_3/convolution/required_space_to_batch_paddings/base_paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_3/convolution/required_space_to_batch_paddings/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_3/convolution/required_space_to_batch_paddings/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_3/convolution/SpaceToBatchND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv1d_3/convolution/SpaceToBatchND/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_3/convolution/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "conv1d_3/Pad"
  input: "conv1d_3/convolution/SpaceToBatchND/block_shape"
  input: "conv1d_3/convolution/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_3/convolution/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_3/convolution/ExpandDims"
  op: "ExpandDims"
  input: "conv1d_3/convolution/SpaceToBatchND"
  input: "conv1d_3/convolution/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_3/convolution/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv1d_3/convolution/ExpandDims_1"
  op: "ExpandDims"
  input: "conv1d_3/kernel/read"
  input: "conv1d_3/convolution/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_3/convolution/Conv2D"
  op: "Conv2D"
  input: "conv1d_3/convolution/ExpandDims"
  input: "conv1d_3/convolution/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_3/convolution/Squeeze"
  op: "Squeeze"
  input: "conv1d_3/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "conv1d_3/convolution/BatchToSpaceND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv1d_3/convolution/BatchToSpaceND/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_3/convolution/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "conv1d_3/convolution/Squeeze"
  input: "conv1d_3/convolution/BatchToSpaceND/block_shape"
  input: "conv1d_3/convolution/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_3/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_3/Reshape"
  op: "Reshape"
  input: "conv1d_3/bias/read"
  input: "conv1d_3/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_3/add"
  op: "Add"
  input: "conv1d_3/convolution/BatchToSpaceND"
  input: "conv1d_3/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_3/Relu"
  op: "Relu"
  input: "conv1d_3/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "max_pooling1d_3/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_3/ExpandDims"
  op: "ExpandDims"
  input: "conv1d_3/Relu"
  input: "max_pooling1d_3/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "max_pooling1d_3/MaxPool"
  op: "MaxPool"
  input: "max_pooling1d_3/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "max_pooling1d_3/Squeeze"
  op: "Squeeze"
  input: "max_pooling1d_3/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "conv1d_4/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_4/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.125
      }
    }
  }
}
node {
  name: "conv1d_4/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.125
      }
    }
  }
}
node {
  name: "conv1d_4/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv1d_4/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1905339
    }
  }
}
node {
  name: "conv1d_4/random_uniform/sub"
  op: "Sub"
  input: "conv1d_4/random_uniform/max"
  input: "conv1d_4/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_4/random_uniform/mul"
  op: "Mul"
  input: "conv1d_4/random_uniform/RandomUniform"
  input: "conv1d_4/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_4/random_uniform"
  op: "Add"
  input: "conv1d_4/random_uniform/mul"
  input: "conv1d_4/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_4/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_4/kernel/Assign"
  op: "Assign"
  input: "conv1d_4/kernel"
  input: "conv1d_4/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_4/kernel/read"
  op: "Identity"
  input: "conv1d_4/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/kernel"
      }
    }
  }
}
node {
  name: "conv1d_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_4/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_4/bias/Assign"
  op: "Assign"
  input: "conv1d_4/bias"
  input: "conv1d_4/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_4/bias/read"
  op: "Identity"
  input: "conv1d_4/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/bias"
      }
    }
  }
}
node {
  name: "conv1d_4/Pad/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_4/Pad"
  op: "Pad"
  input: "max_pooling1d_3/Squeeze"
  input: "conv1d_4/Pad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_4/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_4/convolution/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_4/convolution/ExpandDims"
  op: "ExpandDims"
  input: "conv1d_4/Pad"
  input: "conv1d_4/convolution/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_4/convolution/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv1d_4/convolution/ExpandDims_1"
  op: "ExpandDims"
  input: "conv1d_4/kernel/read"
  input: "conv1d_4/convolution/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_4/convolution/Conv2D"
  op: "Conv2D"
  input: "conv1d_4/convolution/ExpandDims"
  input: "conv1d_4/convolution/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_4/convolution/Squeeze"
  op: "Squeeze"
  input: "conv1d_4/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "conv1d_4/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_4/Reshape"
  op: "Reshape"
  input: "conv1d_4/bias/read"
  input: "conv1d_4/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_4/add"
  op: "Add"
  input: "conv1d_4/convolution/Squeeze"
  input: "conv1d_4/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_4/Relu"
  op: "Relu"
  input: "conv1d_4/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.10206207633018494
      }
    }
  }
}
node {
  name: "lstm_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10206207633018494
      }
    }
  }
}
node {
  name: "lstm_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "lstm_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 609671
    }
  }
}
node {
  name: "lstm_1/random_uniform/sub"
  op: "Sub"
  input: "lstm_1/random_uniform/max"
  input: "lstm_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/random_uniform/mul"
  op: "Mul"
  input: "lstm_1/random_uniform/RandomUniform"
  input: "lstm_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/random_uniform"
  op: "Add"
  input: "lstm_1/random_uniform/mul"
  input: "lstm_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_1/kernel/Assign"
  op: "Assign"
  input: "lstm_1/kernel"
  input: "lstm_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1/kernel/read"
  op: "Identity"
  input: "lstm_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 512
          }
        }
        tensor_content: "\366U@<D62\275\275\231:\275\361\250o<\323\216#\275\r=(=\327\316#=\323W\035\275\231_\n<N\212\\\274a\010\236\274=\266u:\003\376\351\274b\223O=\322\004\010<\310\004}=@\017\211\274\227\177H\275o=\260\273d?\306=\254\231T\275l\216\n=\360\0204\275\376M\261<\321T\303=\224\333=<\207\313\305</\".<G\263\371\272\306c`=\300\272\252\274N\332\230\275[\372\341<x\266\365;\034\237\262={\t\016\275\221\322\216\275\307\325\260\275\036r\360<\220\364\331\274c)\262<\305R\031\275\240\202\237\274\003\362q=\020\376\277<O\261\215\274\355y!\275g\276W=z\265D=^\234\003\275w\2568\275^\252/\274za*=\000\332\030\275\360\261\000;\210a\226\275}[\200=\025F\002<\334\240\"<v\356\353\274\020\254\022\275\372,O\275\210\2635\275r\236\026\275\206\264\317\274\"B\337<\256\026\301\274w\271\\<O\226\306<\355\266\022=\203\033O=WS\313<\256z\312=\007%\315\273\177\355\033=H\242\036<\302\334\357\273\177\233\207<#C\204\2745\225\212\274<2\345<\206\3420\275l\276\236;\351\267\311=\027(n<\177s$=\2110\302<\356\033]=AQ\034\275\332\322\n=\230\324\232\275k\230@\275\206\267.\275\025\036\003=T\302\321\274\"\254\226\275\177\207\261\275\271H\324\273\347\323\245\275\305\323@=\361\022n\275\261C\027=B.9=\210e\252<=\0075=\021i\202<\306\233\204\275\336\375\235=n\346\3019\334\002\371\2746\023\246<\022\024\244\275\301\347\352;\033\366S\275b\030q\274]\351Y<3\005\"<\005J\230<\352\3662;\227\246\377\272&M\331=\2172T\275\354/v<V\213\211\272\\?\204\275P^\225<6\rm\275\230is\275\004\007o=\262\315\251\270\260\224s\275\245\272E<\021\r\037\275\270\316\221\275\013\347\350<\032\311\027\275w\357C=\324$S=\331\003\003=\226\216\200=[\266\270\274w]\221<\"\307\3109pF\222=.z2=\316M\r\275\275v\277<\333]\276\2746\004\375<[w\215\274\356\202a\272\333<\\<V\202\373=\000q\003\275\030\230\312=\363\330\001\274\311\313\013\274s?\230\274\315I\333<\177\201\244<\312\216\316=\302\352y\275\356\317\363<\013\244\346\274\342\361\261=\3575+=\256v\321<\221X\232\274\230\325\332\274\214a\355\274\212\377*=~j+\275!\n\n=\212`j\275\026\264-=\"Q\002<\323s\352\275\345\232D<\0233L=\253\3039=\350\372j:\301\333\336\274\301\377\264<\363\025\377:=\217H\275\251\361(\275*3\242=\236$\352\271\001\304\313<\227\250T<))`\275\336\225\261\274\340\266\212=i\376>=D\250M=\362D\020=\tJx=\266rU=\221\333^=\221\224:\274\224z <\203\037U\272\373\235\360\274\177\260\331\273\213\221\336;W\244p=\005j\357<\233\020\343;\301\2244=}[\207=hem=\362\250\024\274\302p\\\275\255E\204=7\377\206;\0319\027\275*3\306;$IQ<_\255\325\274\362\210\206=[\216D==\316!\274\245\016\356<%\225!\275N\0025=@e\352=\363\022v<y3\213\275\234tK=T\206\033\275\266\365\213=\305\033\251:y%9\273\'#\205<r\331\225\275\215\025t\275\343\221-=\322\314\270<\026\005p=\340\027\206=~&\345<\356\022\\<@\377\037=\320G\272=\232\214\020\275a+\255\275\355\177-\273 Z\202\275!\342\270\274\206\300\356\274(^g=l\004\244=\225h\325<\322}\374<\261\223\361<\313tL=%\375\003>R\361\021=\031\264l\274\271\322\203=H\207\017\275\2219!=\024\255c<\220\021)=\314\327\321\274\351HL\274&\254\036\275\367\242\037\271\225\377\270<\302\365\350\274\374B\357<\207\226z<dU\220=\235\2509\275kY\177=Ig\266\275<IB\275\264=3=\263\237\362<\307\365\320\273:\031\272\274Q\226[=\014\"\313\274\316_8=|\004^\274OF\271<\304\252\320<d1\315<\205\273\371<\266Z;\275\245\r\201\275?E\254\274\001\241\253<&\306\013=\024\270\335\2749_m<\255t\302\273\272\000N=\201\363i\275z\347\377\273\252kY\275\214Go=\340\264\345\274\247Xt=pA\240\274\312sL=\351>\231\273\014\334-\275\3250\023\275\361@ \273\010$\215\275w<\302=\263l\"=\221:\235\275\257\306\243\272\031\304\317<\310$\314\275\340)\302=\214\035\255\274\246\027\253\273>\014\025\275\3318\251=\323QD;!\276\035\275{S\241\274\2260\030=\361\237\224\275V\004\313;\317\243\205=\346\030\262:\200\352>;|\377@:=^j=\366\357\336;C\033\267\275\370\027\274<$\367Z=\301\200\365\274L\315\302\273\264\271\277\272\332\210\004\274\374:\030=\rA\306\274\017QX\27412\013=2\235\231=\037\244\330\273\233\014\001={6\002\273\\\343\234\275\266\371\220<\342\227S\274I\235s\275\240\351\300<\362\266-\275\201\360i\275\005~l=\t\274\242<\274L\235\275\265\220\231\274\031-\010\275ke3\275\340\2572\275hl\226=\347\n\022<\253\024\033<\336\006\242<\330-T\275x\224\212\275\014\001k<l\017\352;\013\274B\273\364\377\336<\310\370,\275\303\342Q\274S\342\026\274\255\301\256\275\304\225\312\2733\331A\274\354\366\255\274\207\322\'<\266\005Y\275\267A\307\274\003\254\321\275F1\334<\204\271\220<m~\336\274\356\253\251<F\005Y\275\204\024\307<;\374\324=\341\256\007\273?\354\022<U\234+<-\'L\274iK\211\274!Zo=\210I,\275\306\2701=%N\273\274\335#\244\271\217\261\026\275F\262\000\275\341\177T;i\271$=\034J\022=\212\267P\275\277\0304=\375\024N\275\014)H9\273\n+\275\313#\246\273\034\r\365\275\357\312\272\275W\304\025\274\340\315\2559n\265{\274\\{\004\2752~p\275\034s\036=\354y\033\274\303\035\"\274\255\343\244<\267\314\r\2755\207\330\274\212\215\036=3\344\213\274\306\206\016\275\377\214\224\275\314\0021=\321\027+=9\204k\274\317 \260<\324\000j\274w=c\275 \222\276<\365\265E\275:\216%\275D(\277<3\352\014\275\003=^\275\r\272D\274\235\266\006\27574\250\275r\004,<\010AF<\232N\323\275\342\201}\275\257\253\212<M\224\177\275\377V\261\274@\263\375<Pp\272\274\313\366\206\274\202i\336<\364aH=\230jE\275\311va\274\245\227R\273\352HX=\265\371\010=kK\243\275k\260\256;\004`\323<\256\036*\275d>j=lJj\275?\0077\275O\321\032<1VL;86\007\275eq\231\275\255\320\210=6\366\024:`\321t\275bVB\274\224\000\276<\247*\225\275\225\357\243\274N\3271=X^\262=\006\363\276\274\243\2442\275z\313 <D\202N=\265\373\272\274\364\207\236\275c\031$=\300\257\361\274\336Q\'\275*\277\300\274`\0349\275B@\313\274t\233Q\2756a@\275\314\017U\274\224\250H\275\250\212\014=S\022(\275\232{?9;1v<\241\030,\275\235/<\273\003OG\275\331\n1\274\343.\277\274\300\321y=\322\374\r=\251\345\236;\316\317.:v\"\354:/J\216\275g\311\343\274\351\313/\274\3753*\274\260.Z;V\374i=0\342$\275\250\243\021=\272\221\204<\330\260\005\275+\027\204=s\t\021=\237\005\250=\303J.:>.B\275\201\3374;\206\270\354;n\270\241\273~\250\261=\r\202\310\273\035\356\026\275R]N\275\007\036\257;\"C\236<\001\340\235\275o\2325<\220\234\205=\033\364\310\273YGn<\241T!;\275\233\354\2750;\003=u\364\331<\372\234\002\275L2\307\274\3200\251<X\021\031=\375\355\310\274\341X\266\274m\013\035\275\t\213\"<\0062:=/^o\275o\237\206=t(\351<\213\225\356<2\253\010\2754-\021=\027\321\373\273\255\276\016=\274t\247\274\0327D\275\335qI\275\277\002\225\274\204\203\216\272\246\274_\274\316\037&=V:\036\275\0277\030\275>*\300\274\247\230\034\275q\333\231;\214}I\275h\361\221\273\203L \275\020@i=\037\315~\274\\o\007\275\347\350\031\275.\347-\273)o)<\327?\001\275c\013\000=\213\023`\275\260\030.=\217\014K=\023\264\026=\024\335 \274\370\n\205\275\234\037\306\273\000\264\251\274\2426k=;IH=\2242\001\274\311;\341\274\334\245\341<A\300{\275i\2627<2V\361;RW\274=/5\241\274\014\337V<qpd\274`\257,=\3044l\2758\304\322\272+B[\275?\"==\264\301\031\275P\027\177<\016\270-\275\354Q\272:r\362\003>\367\274\213<\232\354\361\274\217$\237\274\014\'\264\275\315\3060\275\246\242\014>{\312B\2746\330C\274u%P\275\376\037q\275;\370s=\3407\023=}W:=N\033\030\274\0010+\274439<\301i\006=\340K\004\275\3436^<Z\"\231=\320\340\300=\354\325\032=\264\310R;\tj\'\275w\254\343\273\023\320\306\274]O\262\275\371\224I\275\241\2659\275a4\243=\013\tc<\"\313\301<\255\347\263\275\266x*\274\221\224\037<\'\212b=r?/=\225\314\227\275\r3\373\274!\226\025\274\022+\270=\337\245\306=PJ\341<\r|\032\275\346\373[=\330{S\2756\362\236\274\376BN<\277g\256=JY\213<\202\234\221;\023\237f\272\037\353\315\274\271\021\037\275\232\005\333<\331\310V=e\027\017=(\327\350\274\253\001\227<\340\366\014=\222\377\246=\325\330><cj\325\275!\003\\\274\352\371\014=\203\350\026\274v\214\351\272\227\246.\275\277\213\350;\341\235\242<}\224\207\274\342.H\275\022\377\200\274\342f\336\2730\332i<\231\276\003;\215?\254\274?\025\206\274\230<\034<\370\271\026=\251\227\343<i\367\254\274\246N\205<\327\032\240\274\02487<\010\370\375\271\225\353a=\371\003\265\273\315\312O</\314\310\275\201?\025\274]M,\275\3645?\274\030\004W=\364\0105=\312H\007=\022c\203\275\n\2540\275\310\312x<\031Y?\274s\034\020\275\024\207G=\376\275\025\275\277\010\354\275\026:\205\275+9\214\275\315\257\241;\355\005\251<2\357=\275$\025\224<H\263^\274*Y\216=\332\3034=\376\312\246;\324@/\2737\033\023<pm\265\274\243^\211;\007Q\275\273\3650\343<\230\302I;\230\302\016=\005\3179\274\3529L\275\336u\300\274\321\261\253<\273\341<=e\355\324\275\025\2519;\325\272\024\275\024Y\224<\224E\025\275\225J\256=\270\021\322\275*\244X\27438\270\272\320[\037=\207l\037\2747\266\030\273\263\033\273=%yx<\240ag<\333R?\275o\322\214<\302B\232\273\017\014\204\274\n\304\230\273J\244X:F\356\211=\312\325\256\274\203B\312\275\215\310\212;\231\312\024\274\030\347\311=J&\"\274\031p\002=k5C\275\254\224\262;>\325\333<\246Ow\2756S~\275\3525\312<\030x\002=j\264\023\274`\207\305<^\243\202=\275\021\252\274\242v3<(s#=iU+=\326V\035\275\316B\r<\026\254@\273H\037\234<\216\336\357\275\327\252<<\261M\323<_w\020\275}NI=\227\026\333\272\030\323\000=a\254\360:Y\312\315\274\016\203_=\261F\266<$\251&\274\307\347K\274\020\274A=\016\003\320\275\305J\377\273\311\257H<\301ko\275\3212\352<\373\276\307<3\224\366\274o\n\227<\272\021\356<\317\232\212\274\343G9\275RU\344<Em;\274PN\227\275\371\013\334\274\240\303+=\352\322,;\316\254A=;\024\177=\351\2354=)\364>\275.\002\316\275\340\251\306\275\322\317\214\275\024 ?\274\355(\301\274\304\024p\274\177\014\t=[\276\367;\035\270\310\275T\027\260<kV?<\222\354\340\274\356\213\341\272\306\210\\\275\207F\026\274\314\262\314:\221\267\3649\3461\350\275\355\371\231\275\325\013!<\347\33629\232\311%=\364\330\204< \202\n\274Q\365\375\273\253\036\327;8\376\334=`f#\2757\022\323\273\346i\215=\260\207\227<5n\347\273\331z\027=pX\237:T\212\342=R\177\251\274\301\233P=\275\370V=\365\363\r<\375\337\304\273#\370y\275\005\301%=\325~\210\275l\"\214\273\214\354\354\275\266\317\336<\017\254E<\005\\\216<<\"\317\273\252\036\217\274\243\234==E\237\005\275\323\344\253\274\315\376g\275\246\345C=\321[\224=\301{\362;\364\005\232\274LDk<[\306\321=\021e\231< \014>\275,\224\371\2748g\335\274\327+\360\274l\241`=\321\330\355=\363\240.<2\257\263\274k\347\232\275\037\373\340<\260\257\030=O{\005<\026\004\241<\343\333@\274\211\247\024=u\020$=\023X\301\274\'\330\273<\303\215\030=\242\204\231\275\270\330\033\275\277\264\327\274ji\213<\240\231\243=\\\321\244\275U\213\361<\213\234\325<\354\316R\275\246\362\013=IU\016=\303\336\212\275\212\232\246\273h\374\001=\207\304D\274\256\035\315\274\335H&\275>\347\035=z\000\003<\236\031S\275Dh\221\273\343H\266\271OJ\231=y\000\356\2741p\025<]\212S\273\216Y\255\275\222\014\33291=D\274\306\361K<\247\010\027\275\2019\021\275\252\207\266=\361|L\275W:-\275\360\317(\275\325\007t\275\353\325Y=\006\3643\275\354\260\006\275\003\000\377<~M\030\275\322\243]=\235c\213=\377\205]\275\236\004\035\2754\356\205\275\360\251\232=\037P\257\274\210\250\324\273_W\316\273hf\312\273\207\265G<U\353\262\273r\"7\275P4\213:\236\253y;\272t&\275\246\316h\274\266\r\354\274\314Z\266=\036\014,=\2507\204=\211C==+\341Q=U-\035\275\215\264[=\033$\014\276\005\327\034<,\3502=\014\355L\274\340l\207\274\020S\205\275\374)6<\026\000\373<P\034O=\353\263\033\275\372G0\275\375\262L;\316\374\027<tDB\275j\316\031=PG.\274\n\035\177;~V8<\251\267}\273\004Q\343<\2015\217\2748,\234\274\212W\354\273\336\233\263;\210\244Q\2756\321g<\031-\215<f-k=\366\t\211\275\252\255!= \027\036\275!^\\=W\002\222\275\327\273B\274\330\020\001\275\030\361M\275f\001u=\312\006\253\275\314\336S\275\342\364\252\275CY\270<\263\266C\275_\270#=\031\347f\274<\237\037\275J\243P\275\212\270\r\2754*\337\274\013\n^=\244xc=\025q\201=<\3007=\3439<=\035\031S<\214^\205;q[-=\007\351\275\274\317\266h=\003\224\004\276{UW<w;2<\376e\304;\3116e\275\266\343\212=\337\340\231\273\317\254\024=\005\375S;\036\302\027=\204\3055=\251\235l=\374w\253\275\300\240/\274*\014\201\273 \0073=[\312\035\275\357\322\225\275\017[H=\2609\317<c\220x=\371t\242=t\031\243;nj\'<&h\214<\014\330\232\273\334n/\274\272\210\220=\233#\272\2742\362M=\002\325\001\273\223\331\020\275bM\006\274\243\n\253\275\322+,\275\207!\211=Z \025=\211,\216<\036\021\363\274Fhm\274\313%x\273k\311\007</\332\\\275T&,<\034\320\215\275\342~\214\273\274O\205=9\203\231\275\252\320\234\275\3635\010\274\321\n\022\275\t\252.\275\2505B=`-\322\273\354-\036=\246U\330\275\302\315\006=\245s\037\2755\261\327<c\304\003\275\361\313+<<\344\245\275\242\034\273\2732\376\027\274\004\033\020\275\240\030\362\274\335<\007\275\244\304.<u\376\200\275\222&1\275\025\2664<\n\347\t\275##\355\274\361\017.\275\327,\024>x#\202<\221\325}\274A\016\261<\366\224\035<lX3\274=\t\004\276\354\310\177=~\010B=C?\217=\240z\347\274\000\264D\273\'\223\261\2731\201i=|\262%\275\251\322\213\274\r.\225\275\246\377\030\273\341z\005\274\230\240\342;^\r.=\342\301u\274\210lU;?\366\353\274\320`F=\326(\035=\300z\261\274]_\004\274\201\254\230\275\274\314q\275\270\202\316\274r\345\275=\273(G\275\375\356\274\274L\250y<\232S\210<\271\303\242:k\344\017\274\204\322V=`\2110\275\005\"c<\227N\225<\027\"\225<2\366\305\274\034Mb=\310\316\200<\"\332#\275\022\204\202<\325\r\220=\354.\271\273\250s\222\275\004v\t\274\265\014\363=7:\366\275Z?\354\272\211\232%\275~\252T=\034q\033=\034\213\341\273\311\273\273<\013\313\222<\245\353p=\"_/=P\023)\273_KQ\274\351\325\254\274K\224\346<\242n <\177|\217<~\326\204<\0271\201\275\253\344\301\274\023\373$=\377\337\371<\224\314\235\273AW{\274he\233\273~;(\275\243\000#=\311\223\227\274K\220\033=7\321j\272\332[\256\275\310Jl\274!\233\363<D5\350\275\255cw\273\370\206{\274T\211\341\275#U\223:a\231\261\274\332\341\r\2755\246)=x#\205=\2177\215\275\036Eg=s\253R\274\t\376B\275,\346\370\274UT,=\005O\r\2750\311[\275\014\351\233<\033X\323<{\234\370\272\036(,\275?!G=\n\332\234\275\214y\017\275h\207\213=u\227\322<15m<\213\247\324;#\230\372<\214@Z<\322[\024\275\342P\205=\263pq\275=\366\006\275,>\244\274\207b\205=\3546)\275$\014\260<r\365\216\275>\316\361<\377\340u<\226bh=\033\342\262<\344\211\260=RU\347\274\227i\177\275\353s\212\274\345\276\210\275\345\247\220=m\237s\274\022`{<\305\361\261\272\244\034\360<\276G\203\275\272\221\005\274\032\356\001<7u\320\274\027p\005\275\273q_<\321t\005=\352*\013\274|\027\031\275\347\224\322=A\324\302;\016\321\004=\026\226\027=\217t\211<o\222w\274\312Q\312\275h{\\\2734\272\007;\271b\004\275\177\203+\275\301\224\031\274\277\372\365\274\006.\204\274>\272\006==\365\3259\357SG<\\\244\334<%\326\260=\237\177\024=\226i4:\321\350\232\274\332I\023=\024\\\360;\257zg\274jXG=\020\217y\275\007<\266\274X\205\235\274Y\326\344<N\201\346\273:\310\323\272E8F\275\026\334\356=\366\365\024=\\\027\014\274\250L\304<}\301d<\261\314A=\323\266\232\273\2317\222\274GP\013\275\t\313\301:\257Y\245=\020\354\263\275\016xn\275\021\340\202<\255X\375\273\201J\313<\324\225\t<j\024\307<\333\017M\275c\326\374\273\326\275\204<6\204m;\355\354\327:2m\260=}\323D\274\"O\235<d|\271\273\357\334\036\274\356\365}\275\373E\236=\010f\212=L\002\241;^\365\226\275\335\245 \275#\253\310=\025\010\241\275i\255\345<F\243\330<O\346}\275\204\213\315\274\203\245o=\\\036\026\275\335i\214\274\355@\221\275\266~y<:\253\270<\246\021\017\274\266\233;\274\356>s:\365`\014\275\027\371\017\274K$I\275\313\177\035\275\311-\271<\021;&\275\260\3015=\245\2049\275|>\231<?\023\227\275\324#E\273\003\335\354\2737\013(=Y\256\"\275\310\360\035=\212u\032\275\376[\016=+a\205\2741,d=\353om<\242a8\275R\203h\274?n\312<\267S6<\310\236\021\274G@\320\273C\360\217\275\256MY\275\370\245f=uu\207=<\023\200\275\243\363r\274\023k\262<]N\"<\307\242\007\275\201Q-<#].=\335\2318\275\356\241\032\275\374\030.\275\354\n\023<\247IA\275\371!\037\2754+!\274wv\014= y\004=\002\340\246<\334\324\350\274\322\363\243\274\250k\313\274\205\200M\274wQ\031\275\2428\r\275D\245\327\274\376y:\275\022\212\021\275N\277\213\275\341u\177\274\336\025\337\273h\331\332<\226\317&<=\242\270<\350\025\241=QI\200=\255\253\r\275\004\341\376\274\260*\005=\336h\336;\211e\264<\264\001u=I\037 :Z\031O=\340\014\344\274\264\275\247\274PG\026=:n\321\274\357\231\277<\205\002\315<\237Yx\273\\\370<=)JS<\210\310\273=\253\322\007=3\207\006=\212P\307=e\303\255\274#\301\367<P\374Y<\013\330\262<\014\247\333\274\217\032/<\3347\225=\225\254O=@20\275\006\227/\273\374\255\223\273\310\214\312<\234\274\222\274\216R\250<p\021\360\273\021\341\334\271\246\002V\275\251gY\275\346\246(\274x&\350\274\346\3368;Y2\243=$t9=\354\235L<9\314\010\274`\230h=*a\210\275r>\261\275\246\205\245=*\253\242=\344XA={\254G<\356\377\007=T\314a\275{\260+<\352\230\233\275K\225\371=)X\241\275,\037\"=\\\231\352\2747\275Y=\225i\361<\234v\330\272\210P\232\275\360\351\021=pq\n\275\312\250\245\274i\322\036\275\203\033\227\275o\006B=\230`\006\275D\350\327\273\317\345\301\274,\306\036=\342\216\267\274\360\2546\274\316j\270\275\320uI=\211_\333<]\317\001=\206I\036=\273c\212=\243d;=\267W\215\275\207\226\007\275\274\255h\275\023u\261\273lV#\275\275S\033\2758x\262;\2167\007\275\374\275\303\2747\321f<\177\334\020=F6\231=\203\371:=\301\266\030\275\342l\375:\212\013q=*\t\355<\314j\035<!5\303=%\354Z=\304\235\033=\333\327\005<I\207\351\274t\367\205=_\n`<\000\031\330<U\"\327\2747\252\337\274\001\026$\272\231\266\024<T\227\261\274R.\235\275\325\266\363\274\037\356\303=\263\347\212\275\320\312\347;\371\277\007;\013\222-\275\302\245\177<A\200\262\274\253W9=\310\216>;\004)5\273\323\335\322\274\0016\230=(O(;\325\220\263\274\325\303`\273\266\235a\275\340\361\203=\213\216E\275\262wt<T\315\327\275\026c\201\275\275\032\234=J\274\206=\232Y&=\337q\037\275\211{\031= H\206<\361\232\324\275L\271-:t\215t\275H\037\207\273O\353\221\2738\n\033\274\246\215\313==f\223=L\276\330<[\025\305\274W\225\336<\225\311\347<K~T=\270\341\304<C{><\032\352\342\275\205\211\255<r#n\275\220P\242\272\325\276\227\275Au\036\275\316\346\344=$\032~:\215\203G\275\350i\331<\330\033_\274 k\001\275\2528?\274./L\275\353\257\220\273R0\271:y\201\257\273f\001\010=\031\246r\274\204\235\024\275\210f\227;\023\014;=@O\375\272\204\366>=F\016\004=\241\372\355<\204\023\374\274\0023V\275\266\250K<\347\260\241\274=9B=\246]e\272\252\323\225\275\211L\250=\361z\210=\325\310\251\275\025S\333\273v-~\273\225\265\037\275\357\203\246\274\001c\002\275v\270\230\275\270\326v=L\222E=\354\262\372=\337L\035\275:\370X\274PCT\275d\\>=\261\331)\274aHB\2749}P:v\242.\275\0339k=\002f#=\360*I\274u\361\2239c\313\206\274\364\333\376\274q\377\201<*p\352;\334<\234=\336\256\037\273S\"\326\274a/X\275\337\263b\272v\370\200=\360\253~=\327\021\301<\001\306\367\273\377\302\036\274\254\226\017\275Q\372\344\274$\205\003\275C\300\300;=d\204\274\361\202\262=\346\030-<\013\"\201={\033\337=X\255\326;v\266\237\274\317\343`\274\270-\021=\221\024\023\274z#\317\274f\360M=w\306\256=m\333\271\2746\3133\275\035l]<\241\205~=\357\3163=\253B@\275\246\021\020\2752.^=\320e-\274Ft\254;y\275\207<\205x\376\273\373\264\367<j\344\203\274}\202P\273\031\323\254=\322\352\302<cx\300=\022W\364\271]\r\251\275\323\231X\275K_e=j\3438<\316\356\211\275\332F\335;\255[\247<\\\316\302\273\337\356\n\275\235\n4=\\>3=j\230\200\272\0017\354;\353\325<<\230z\033\275T\375\343\274\307-\003>\274\010C=\031@Z\274\200E\031=\010\004\227;\311*\201=c\244\'\273\313\316\354<\271\360y\275\200\322C;\177\270>\275Ik\007=mA\001=F(\200\273\267\371\224\274\327\346\350<\327`E\275\325\361{\274\326\017\331\274d7F\275\240\331\310;\355q[\274\262\010K=\002o1\275\216\235\275=\016\357\001<\023\334\031\275O\222P<\024O\220<.\022y=\256\230_\274\3631?\275V]B9mfV=_\t\352\275\202^d\274\307\340K=z\200n=\026\034\323\273\300V\023=\312\004_\274yR\334\274\266t\254\273\336\234\230=3\306\025=\r\030)=\260\206p\274\223a\226\275\276\201\335<\010\323\206\275\\D\260\275#\341\235\274\3358S=U\003Q<\217\354:;\027\344\266:D \340\274\r\331\307=Kz\202:\0337F\275\257C\301=\r\246\213=\3457I<<\342\215=\213<\323\274\332\350\026<\023\200\350<\316Fg\275\214zC\275s\204\003==\036|=\343b\367\274\262U\004<|\314\357<\247\316\247\274\341Z\271;\205\222\327\274{\026\264<\233\356\333=\221\3153\275\271\302b<N>\316\272\221\200;\274\345\353\303<$A\312\273\362\261\241=\307\303V=3\246\325<\362\372\177\274n0\025\274\374\250d<qy\265<\t\\\025=\313)\000<;0D=N\003\326<\250\231U<\322\300\224;\326nZ=\2165\236\273\352|z\275\025\3170<t!|<<\210\207\274\256P\222<\005\222\232<\213\\\243\274\350\367\314\274\222X\r=|}\033\275\002\r\275\273\317\311<=,N\021=\215\353\330\275\255q?;|\372D\275\311(3=_\030\256\274\n\321\230=\220\0271\275g\025\023\275#N\214=\306\331\256\275\302I\265=ca\203<P\tQ\275\317\214^=Lc\235=\224IE\275\231\325\337\273\2034V\275x\340f\275\032\266:\274)\033u\275p\260\021\275\254?K\273\253\324\004<\250\254\316\275\\\231\235\274\225*\026=X!\002=\352\241\302<6\374\204=w\317\252\274\361\333\306\275\3075H\274Y\0222\272\231FJ\275\247\207H\275t\200\226<>\237-=\265\177\020\2757\017`<r^R=\026OD\2746\317\020\2744pO\275vWb=h3:=+\345V\275j!\213\2739\210\276<j\257|\275\246\300z=\316\030:=I\333L<M\301\246=\000r/\275I\331p=\300\235\305\274\320\006k\275\271\336i=\233\004R=z\2201\275\262\204\360<\364D$=\243\317E\275h\217z=?\336}=\312=\002\275VrX\274\376kt<\021g\031=\220/\002\275\274\\\344<\'\271\223\275|\364\031=\203 H<1\035\214=\247m\231:i\242\037=\036;f\275R\352s\275\177\273\007\274\321\330\223<?r\237\273m#\t\274Q\3431\275\330y\362\274\307\352\t\274\363\234_<\263b\242\275\037\333\322;t\\\366\274\354r =\372[\331\275\314S!\275\222?\025\273\244\206W<x\314b=\024\014\'=\2118\272\275\332$\007=b\307\244\274\306\351\n<\326(\235=y\350\370<\217\361\035<<R\326\274\037I\233\275\251\373M<A\225\010\275\355\272\230<\242\177\305<@\003\362\273\270j\317\273\300)\345=\214`\235=V\326\r\27570\253<\\\272\253<\t\323\340\273qX\'\272\035\233A=E\241\034\275F\373\315\274\267\322\023=;~\333\274\276\'\237\272,\331M=\230\247A\274\024\326\227\275\321\207\251<\355P_\272m\350)\275\276\266\202<5\203,\275WNB\275\356\030I\274/ \361\274\362\317\246=\266\235\321=\236{[=T\342\341\274\031Q\r=\331\264\002=xlz=\027\024L\272\307C\367<\337\020%\275]\261%\275R\332N\274\343\377\267\273P\230\334\274l\220\261<\006W\364;5\253@\275\225Z\327<\331\250\020\275\023\330|=/z\315;\352[z=\233j\262\2741KP\274f\2755=L:9\275\273\256Q;\235\366\232\274\003@\227\2751\006l\275b\262\312\272\014\374)\275\334&\251\275:m\225\2753a\204\275ik\007;\303t\363<\033^2=\r%=\274Q\240\252\274\314\316\256<\000\216\355<\007\356\004\275\372\361\233:pn\314;\254\251\271\275{\221O=\2139\016\274b*+<\372\206\255<h\217\334<\350\022S=fc\221\275a=\005\2752\231\375\274\252sy<\276|I=\325\230\245\274\034\266\200\274\234\002<<r\230m\275uX\206=Z1\227=N)\260;\0038\325\2742\014\325;$:\271=\2408|<i\345a<\2628\007=uS\032\275s=I<.\234m\275b\206;\274Us\000<\261Z?<\253[\354<\325\221E=\03677\274\201\315h\275Q\370\267\274X\210\035\274\217eR=\340[I\275\244\350\2608\235\362\217=@U\360<\346\264S;\254\300\003=u<\312\274\2637\335<k\251\254\274\372\364/\275\254}j\275.\260\243=g\0012\274\216\274D=6\335R\272\036\363U\275\203p\256\273\262\337Y\275r\r\177=\2434\270\275\3512A\275V\333/\275DN\202\273\002\n&\274\224\024Y=y\000\007\275\236\311\013\275\363\237^\275;\231j\274e:\234\274A\213A=V\367^:\304_\271=-\033\241\274hsV=\376\314\304\275@\340\260<g\206D=Y`\025<\030\215\276\275Xm3;\024\010\233;\004\340\254<\003\031\360;\r\3325=5\243\203=\016B\217<\362T\2517\r\024O=\332\005\257=\206o\303<\271\247\272;\317Q\020=\270*\315\274\336`\260\275\217f\374;\256\300\370<1\235N\275P\032\200<\2527m\275T\253x\274\302\244\032\275?F5<\314\231W\275\030TD=\310\370\207\273\2663\003\274e\316\032\275,j\205=\257&\364\274r\374~\275`\204@=>\304\237\275\255\245\240\2744\324\214\275d\341T=\2156b\275\246\003\010\275^\261\r\274\257\351\214\275V\301\354<\364\304p<\231f#<\224\026\304<KUo\275Fg#<\356\316\255\275\360\376\354\274\225\345\030<\223\334\361;B\221\377<\263\364\217=oUD=~\273\037=Q\007\332\273\311\206\025=W~\324\275\354\316\321<\205v\237<G\331\212:\307\006\241\273h\365\347<\214(@\275$\221\255\274P\214\374;\033!\001\276\024\270\330\274.B\006=*\031\004<\013A;\275\340\264\017=\0351y\275\311\330\335;P\027\265\274\303\365f\275`\3648\274\014+8\275q\204u<\255v\343\274G\215\302<\205j\206\275\',u\274\275\205\226=\030\270\322\272\337\013\327<`\363\276\274\340\207\370;\354\250\257:,\302\217\273\377\336\240;\213\300\262\274\335\205Z=\3303\031\275\026\272w=T\177\035\275\031i\300\272~\341\031\275\201C\226\274A\210\313\274\323K\315=\035\207M<\306\265\244\272\343M\236\275\327\3260\275\250~9\275`\367@\275;\365T<\014<\254=\223\343\253<\\\223\241=\273\373;\2759\002\307=\314\361\233<\327\223>;\237\241\373<\226\313\362\274\303\332\226<Y\352\301<\t\363p\275\020\022g<\\\031h<\007\272%\275\3215\205=\240\323\026\274\017\227\003\275\375\331\262\275\003\021\017\275\230^\265\275r\030\350\274\357\202\221\275\224\220\025\274D\2722\275\324F\220\274W\203f\275U\356`<\313\n%\275a\374J=VA\301;\352E\243<\243\215\270<\205\234\310\273\350Z\030\275.\031\225\274\376\262\317;\252e\263\274\302\210\361\273\325\366\202=\036\000\211\275%\205\206\272v\014\203;\031\263T<\204\024J<Z\243\034\275\362\321H\274j_\231\275\016\2336\274e\326O\272\013\362}\275\254El=&\244\365;\200\262u\275]\305U<=\302\242:\332\360\210\275\3376b=\323\232w<\251\022W\275g\227Y<N\244\244\275\026\nB\275\346+\000\276g\3341=\253\367\272\275\025\326\007\275\270q\001\275\226\323\332\274\0173E\274\275s\351<\021\240\222\275\217_A\275?\315\245\275\375\005\206\275|7\'\275\342\213\034<X\307\215\274y\265m\274\010A\003\275\341SZ\274\223K)\275\203_\036=NA\335\273-!\274\274\374\262&\275\3215\356<s\264P\275\026\275J\274\2664\231=\366\357\030=\321\240q= \323\325<\323\373 \274\213U3\274P\225\250\274{\027[\273\021K\002\275\242H\227=I \276\274pA\371<\314\363:\275MZ\222\273.t\241\275\267\235\241;\026\3140\275$i\211\275\0236\014<\034E@=\014z =\367r\335< \002[:\226\203\347\274\233\232\230\275h+\243<T\210\020\275\226i6\274\227\030\027\275\343\3052\275g\356\t=\342]K<\243\207\200;9[\252\274Cs\350;\220 \320\274wc\276;\231\304\245\275\377T\n=\016\370\255<\215\343\020\2732z@\275D8\356=\214Q\216\275\232\300\231\275\341\024v\275v\202\244\274^\375\264\275I\236\273\274\264\200\257=@\272J\275\240\t4\273M:\017=\305$\025<\267IR\275\271\325\366\273^B\227\273\364\265V<0~\234\274;M\221\275T\326=\275\276\177\312=\261\345\351;\020\211Y\274\306\222\025<\274\377%\275J\r\031<\0331\026<\002V\317=\336\205\311<\"4\202=\'\224\370\274\343\326\006=L\265>\275^\002X\275\2737~\2759qD=\252\374\220\2743\353\215\274oU\222\275\317\016\255<w\017V\275\354d.=1^\206\274\022\207/<\246\243\251=\343\025\233=\177\360!<\250\021-=\214\377\274=\276\325\347\2742-N\275\2461\263=h6\317\271\324).;\350\036\273;\201tu\274\013\221\304\273?\277 \267ai(=\276\014\303\274\362\206.=V+\235<\024A\213<\2549\262\274(\207\265<^\023\221=\364\306\n=\351\t\374<\000\2537<>&m\275p\326\275<\350T\000=P\271x;.4\010\275\2416G\275\351\357\030=Na\233\275\241Dv\274\265o\267=F4\002\270\222\022^=F\240\002\273\312\312,\275W69<\371B\002\275WE\222<jl\236=\276AW=\340\371\t\275=\347\010\275\363R*\275I\275\210<\273\326\246;\032\264h\275&\212\035\274\277\001\033=X\010\214=71\"=e\373\t\275\224\231\351\275\233\300\240<\215\262n=\304x\035=`\330\316\275\\1\206\275\212\350\260\275\262\"\301\274\226\237\231<\247\256\314\275*!\273<K\265\224\275\376;\226<P\336\020=\r\251)=f{5\274\014\004\311\275\020\335\206<\260\314\'=#\3549=\267(L\275\273\005\014=\334! \275\237\243\312\275\270\373\306\275\020\3437=F]i\273\373\264k=\335d\r<\335O6\275q\031\225\274F\210\207<\356V\222<_R\262\275\210\363\202<\273 \327<{%3\275=\016.\274d\300\377\273\235\t\324<\225\340\224<6\352\\<\3471\375\274?\350\004\275\230\032\246\273\204u\016\275\320w\013=\234\346k=\n7\270\274pz\212<\177v\037\275\0142\226\274\253\203]\275v\255\000<\003>\227\275,@%\273v\316\343<\013\206U\274Z\223a<\247n\021\274F\305\314<Z\215\014<9\302\260<\030\241\345<~)>=m\311\357<\027-\352\273,\357H\274\332\'\203<\000\037\006=9\371p\275\236>2\274\353\213\035\275\276\373\341;\007\251[<\006\205\272\274\212,\362<,<l=\232\355l\274x]\370:\255$9=<\367\025<\261\270\253\273h3\216=Z\311\263\275\006\246\036\274\017\235\235<\022i\026\2756\252<\275\351T|=\320\024J=W\177\211\274\213J \275\265\225\014\274~\023\305\274\347\301\354\274\016\302\340=\245\3366<\372&\364\274]\230\241<h\027;\275\25555=Wb\314\273$\322\264\275\252\274\177\273\360\204\n=\210g\247;v\000\252;\205\027\312\274\022\351\177\273=\274;=\230H\242<\367Br<)\214\310=\253\210\236=\306\001\304=\243k\340;E/F\275\006\221\030\274\r\237\236<$6p=\332\327\014\275*\037>\275\004[\321\274ovD\273\316\303\302\274 \273\230<pZ\301\273\010,\242\273g_\203\274$9{\274\177}\026=\263\3732=\002\270\004\276\254\0320<\342-\264;R\250J<!\034\270\275\001M\315\274\034W\266\275\347\0244\275k\020=\274\013\336\025=\'\357\257=\213\273\200\272\245s\023<\003\001\322\274\206\233\013\275\0054\220\273\316\277D\275d\374t=\3625\345<P\360\236;\366f\034=\250\236v=`\036\237\274\255\tO\275JA\031\275O\274\335\273{5\212<\352\202\347\274\313H\327\271\\@o<\357\251\246\274\002hd=j\234\362<\317g\205\275\201IP\274\346H\221\274K\314\035\275\277c\237\275\022\232\\=n.U\275\333m(\2751/+=\215\\\r\275\335E\000\274\014\214\264<\004O\332\274\252.8=\310t\341\275\310\204\2049q;\005\275\307\020\231\274\021\3140<R\2173=\255\247\310=\265)\276\274\2075c\274\2729.=\364\315z\275\340KV<\351\274\017\275\207\005_<KR\376;\375d\320\274\266\314\222\275\357&\020\275\\\350\210<&\354i\273yd\307;9\001\320;\361X\003;\255;\t=\202=0\275\341}\235=\276&\202\275e\246\306\2742\246-=J\026\210<z\016\341;D\314\314\274\254\241\002=3\263\360;\203\206\313\274\217\214\243\275\200\014\337<uW\002<\"\224\341\2743\034,=\233\356\031\275N\003\270;\026\341`\275Z\327\343<}3+<:&i\274\3543\275\275\353\203A\274\\B4<\233s\235\273&$Q\275\'\023\247;\342\023S\274\321\324;\274.\2163=\231\016\203<\336h:\274\'~\227\275\272\352v=\014\226\247<\243{S<|Gj\275\351\252\264<9\241i\275\347*\n\275$v9\275\013\014\221=)~o=lh]\274\323G\337<+\200$<\021Z\234<h:7\275\"d\003\275\344\266\265<;\0375\275\2752\251\274\312P\271=\244X?=/\030\007\275\227\352\201<7e=\274hOV\275\275\360|=\316=\230\2747^\215=5\024\203\274pe/\275\243dC\275\213\375\260=o\264.\275>\035w;t\346\315\274\201\216\333\274\256<m\275\220x\242\272.h\n\275\026\t\222\275\261\251\024=[Hk\275^\323\245=\213w\262\275E;\323<T\271\204<\236$\243\274co\326=r%\227\275\205\254p<\207\014\027=\244x\001=\265=\364\274\2177\216\275)+\000=\265\022|=<J2<]\360W\274\313^b<\212u\303=\270Ij=\242\276\206<\022u\241\274\234\357\264\273i\307U\2751\361\265\275~\017\242\275\265\366\363<u\243K<9\254\345;\276P\323=\027\334\t\275\027\324\213<\234\316\206=\340m\375;\036\351\266<K\203%=|\036\016<(\025\233\275\2012,=\250\023\013\274\262E\304<\245\372s;\276\0177\274B\2361\273\037\330&=\231Q =\307\3467=\3137\252=\342z\252\274\313H\204\2730*P\275\362\377!\275\304\356\"\274S9P\275\tLF<[M/=i\275\025\2742\372\014\2751>\277\274\025|H=oh(=\"\321;;A\360\337\2753i\235\275\225\303\367<$4L\275\227\363\206<\322L\207<\304\3040\275\332\017\220\274)j\022\275\271\351q=\363\305\030=P\235\202\273\202\024\002=W\225\221\274\247R\037<pJ\356\274\355\nI=C\340\r<Fm\221<\211\022z=\222ob\275>\332\213\275\323\"\024=\235\024N<\244\201\363\273\370k\031\275]\214\326\272\013+\312=\0177\221\275K,7\275T\2370=V\366Y\275\270\t\243<*$\223\274o\326\325<\250\350\003<O\342\272\275Fl`=\327b\202=\331S$\275.39\274\345\264)\274%i\013=0;T\275\314\320\n\275\225\371V=\262\314\256\274g\300\273\275$~\307\274.T\230\275\035\360\351\274\366\312\"\273\t\330\357<\206\311\231\275\222\327\275\274\261\2339=\344\326\211\275\223\220\217<$=&=o2\343\274\t\323r= \021$=\335\031j\275\227Y::i8\337=\372\235R\275\376\033\254\275\317\373P<k(\306\274\231\023\267\275\226\204\n=\261O\366\274\361\236\332\274\225\222\214\275h{U\275\321**\275jW\023\274\335\245M\275^\264/=H0\353;\002\312?\274`b\033=\0003\n=\216c1=Zi\260\274\240\340\001\275T\311\244\273Q\340\023\275\014Gj<\205\373\320<\231!\274\274\251\023X\275D3\025\275\177\257\303<-5;=\220J\003\275\256\315\"\275c\002\377\274\323q\227<l\352E;\2601W=\023\231A\275\210\251\244<\265\007{<\213\233\316<\304#\033<UN\313<jCk\275\332\304\222:eS\200<a\016\213\273\t\"\034=\037\254\221=\252i[=\177w\350\274\024c9\267\016\214-\275cR\225\275i-\311=\276\020W\275m\000\200=\'\241C=\235\312F=5\245\250\274/\016\242\274\330\375\253\274\017_\247\275\356f4<<=\231=\202:,\275\214\212o\274b\241*<\326\214\363<\337\201\320\273R\304\001\275\213\320\212=\0075\031=\257 \201\274\036h =\332\255L\275\270\013\342<of\020\275\026\373\326\273\357\020\324\275.M#=J\3771=\233\032\2669[\007\302=\265@)=\216\253\262=\3245\260\275\233\374\254\274\336\355L\275\035\322\352=]\267\225<\201\305\206\274\223(\214\2750f\303:ag~\271\033\3064=\235\264\373\273\300\367\221\275\310\276\326=.\312\266<\210\307Z\275\t\373\233;\312&r=f\370\231\274\246@\253<l\206\277\274jf\265\274\353\342a\275\217No=z\221\237<O\373E=\356\007\032\274\355\336>\274l\251\271\273\251\352\006=2A\241<)m\246;\373(\"=\034+\350<\234\226=\275J\330\257\274Hs@\274\351\244\r\275\031^L\274\373>\345;\264\345\004=\250\231\262<\016\267\\\275\331N+\275\326#\344=\023?\237\274L&6=\206\276\341\273\247\211!\273c\345\316=\020\347\035\275T\232t=uRn\274\306\264\230\274\351d =a3\211\274\251{3=,1*<\366\220\202=g\237\223=E\347c;\243\276\243\275\364\251\265<\0213|<\225\313w\274z\036\305\272\340\200~\274\354\364,=\216\263\275<5\203\024<?\253w\274:\235\263<0\354\220<Yf\245\274X\030[=\022cC=\273\367\017=\010\320A<#>\215\275\373\257E\275\274\346\366<5|{;\324\237\024=\020pW\275\317^\304\274C\017\337\2746\372z\275;\213p\275v\201-\2752a(=+\200\241=\265b\264\274\263\253x\275\323L\230\275\026|$\275\tu\256\275N\362\267\275t(\016<a\'J=>\017t\273\025A\247<\030\352!<*P\205;\036\020\014\275? Y\275\314\353\256\274\221u\214<\"\316\216<\223O=;l\"\200\273\025\360\000\275L\017\257\273n\\7=\034\323\353<p\260\311\274`\317\220\275\374^\360<\262m\000=|\007~<[\237s=z\350\021\275\222:\267\272\005\"P<_l\014=!O\034\275\216?a<g\033C\275\310X\203\274\022\032\234<\276\205\275\273|\354O=\237\374\245=\231W\261<\311\334\030\275\210\303\237\275\224\td<\326|\267<\244\372\203=|\014X<\212\206\234<\306\315\266<\034\317\020\275\r\005\005=\031X\251<\223\372\317<\2205?<\203@\230\275\\\303\007>qz\272\273t\372\352;Hdz=L\241T<!\240\232\275\t\221E:\254\3066\275>F\203\275+\250\226<_qD\273\317\nE=\030\2542=\344\271\026=\364q\200=\351&\334\275\302\006\002\274:p+\275Z\021=\275X.\315<qF\360\274\335up=\236\274\242=\265\205\027\273}\250\237\274\236\270\356<I\356\220= s5=\373\343\335\274$~\013=\350p\231\274B\031\006<\016P\373<\230\242\207=\213\035\262\273\244\377\260=\351\035W=O\305\342\274(\004\033\273\261`\240\275\006\306\330\273.\2337<<\217\371<:\312\203=Y\025\316<\316\373(=\300k\316\274|\305\036<\261\333T\273\256\030\252\273\304s\201\274\361(\273<\357j\206\273n\004\366\274\226+\244\275\2278\307=\362=4\275\301\346\235\273\317L&<c\270-<\002\320\216=\213\322\203<$\344y=@\262\220\274Q\236i=\350m\210=\207\372\034\275V\203\\\273YL\261\274y\000\r\275B\030g=\275\345\232=l\010\343<m\'\240=\325\334_\274\0350b<\366{\231\275if\374<\253\225\366;\240\206\256<\216\305r\2729\204\010\275\031\353J\275\256q\007<\032\t\010=\247\r\023=@\212\222<\201\322\033;\233\255+;e\357E<F5}\274\243\352\031\275\'\026\333\274\270=\263\274\211\000\002\273\300\373\025=\261\210\005=\312Hb\274\027\231L=\037\351\354\274\366vS\275>\230q\274n\2202=\023\301\023\275\253\270\254=\t\314\252=c\024\234\274\277\363\240\274:\334\026=\021^\'\274\324\020L=Sh\024=\202t>=\340\221\327<\215\026\224=/\373\202\275\304\022W=\036L\304\274\326i\206<\232\277l\274j\213\241\274\023YK\275\027\323\250;e\243\364\2731!\343\274\263_3=\275\305\247\275\017\215\337\274\017\234\234=\260\266\245=by\306\274\206t\212<|aF\275\236\300O\273H\340E\275\334w\006\275\263\005\266\274s\031v\275f(\327;\353m\310<o\355\206\275v\r\225\274}\316\t;\334@\361\274\337\004\302<\340\024\021\275,\253\273;\202\375m\275Ht_\275)\037\000<\246\234W<+U5=\340c\332<\257\245p<b\316\201=\264{X=0Q\256;\232\271L=}\004\205=\030\237y<\315>\013\273iT\344\274|R\252={:\240\273\355\014\221\274w~\365=[\026\021=\365QF\275P\315\367:`p(=\316\203\276\274\251\351\305;\310\314\254=gR\\\275\260~b\275\004\025c<\001\332\230;\212\234X\274\273\320\205<\002[\243\274C\306w\274\200U^=\226\307\324\274\324l\230\274\341\201`=\323\227\231\274\222\315\261\274S\314\263<eK\204\274\311\224a\275\364\341d<\300\205\277\275\316\311\032<n\362\223\275o\240\301\274\315=\032=h\202\240\2754#\304<\233)\363=a\034\315\273\321\224\200\275\027\304\031=\037\035 <txT\275{\377\200=\310\'\202=\261O\316\274\256\323\221<A\221N\273\240\262\361\274g\366\030\274^tf\274$Q =d\025\024\275F\t4\275\204Q\r=\223\211j\272\270\216\362\274\275\246\251\274r\315\232\275`\373Y<Q\346\220=v\202\204\274\371A\004\275\273\tN\2751:\334\274\263\236\037=D\274\037\274\236\312Z<\024\034z\274\264X\251<\031T\014\275\341\302\2609\2471\010\276\307T\025\275\031\251\312\274`\336*\275\255\335\226\275|\250V\275\347\2714\275y\005\203<\312\234\371;\205I\010=\'s\235<\271\024\202\275\335\024v<?\207\031<\362\017\312<\270\030\370\2748\216\322\275\014\310h\273\204\205\263\273\'\3314=\205W\200\274\200\265R=L\"-;KA\000\275\242\223\232\274\270\211(=\004\263\351\274\257\311\314\2757G\372<GH3\275&\007w=\207;\257<po\261<_;\347\274\256\316\246\275 l\313\274Yb?\275-\223\367\273\273h\220=\322qo<\330\030\311\273\276R\021\274e\306\221\274a\352X=\335\362\021<p\027(=gm\330\271\257\242\207=c\264\357<\233\226]<D\\\034=\035/Q\275\252\336o\275\262\203\325<\310\331\346<\356)\037=r$&\275\232w\343<m\322\304<\006\277\252\274\321\204L=0:\222<+X8\275\322Z\210\274YK\357\274\000E\032\275\321\227Q<\270\r\253<-\353\340\274\363\337\274\274(\276S=o5t\274\322\270\221\275\237C\313\272SrI<\346\337\320<\335\323\260=#(\020\275\333\rS\273\262\277\022\275\360\207x\274\335\336\224=#kE\275\036\0065=_\264K=\363\365\004>M\331C=2\004\320<\310nb=d\032\375\274\213\214#\275\262\205\335\275\375\211<\275\027\332F=\020l\257<\361\341>=\302s%=o\330\222\274\005\233G=\216\265\277=\034 \023\275\250\347\262<\270\256\362\274\2226\202\274\036\376\246\273\340/\'\275z\356U\274\332\335?\274p\014\342;\344\256\300<\240\203-=K\271B\275g\022b=&\017\022=\340\230\300\273\351\357\325<\234q\025=\204\373\311\275\324\215\221<>9\026=\214\001m=\235\320\350<\024{\226\274\3103z\275\036(=<p\236\n\274n\251\212\2730\272\007=i\\\272\275\007\037U\275\'\353\202\275_\243\314\274\314\333\272=\237\213n<\023\342\202<\004\203E\275\272\347T:[<\016\275\234:X:=V\305\275p\274x=\207\365^=\301ny<\335\376\370<\014\027@\274\3674\324;\336\0046\275\217\355\334=\n\274%\275\317\343\255<t\204\017=}\003M=7\237\013=\363\262$=\034[q\275\255Z\247<\\i\227\275\036\202\374<\324\"\204<C\233G\274\003\2573:\337\221\341\275\320\246\257=\024~\211=\321\354\377<2i\247\275\251u\322\274\177\366\244=v\377k<\335\206I=\252\235\210=\023\267\272\273\257k&\275*-M=\326\rv\275\205_X=\226\235\010\274r\376\311\272o\026\271<\242v\332<q#\215<\366\212\216<\373\272j=Sym;2W$:\311\364\026<W\365\034<$\230W\275hm\267\275FoC=/\0339=\341z\013=\016x\t=\374\231\247\275\371m\303=\242\030\256\275\005\317\022=\340P*\275\273,\211\274\247\352\334<w,+\275@\322\251=\370\220V=c\250\247=?\367\317\274\313\235n<T\\\346<n\321\004\275*\266\025=\214{y\274s\032\t=\204\245\363\274E\347\330;\360\"\340\274F9A==y(<\357\347+\274\243\2078\275~\341\241\274\3431\016\2751\245I=\202\0366=I\342m\275\364\016\352\274\332\216\274\274\021C\014\275!\277\207\275\223\311\254;\365K\326<\300G#\275\025\222\311\274|\014\016;5\243\337\274\004.\002=hh\375<\030\024\017=\255p+\274\255\027\031\274x,\223=\205i\274\274A$\203\275\013\237\030<\n\200\013\274j|\350\2725\256\233\275H\\\304\275\313\010W\274\271S\261=\223  \274\347\370m=A\253\"\275\006x~\275\250EH\275\260@\236\274\206\021d:O\212><I\253/\274!!\265=\320\222\216\274\225/\314\272\033\262c\275upX\275Z2\206\275\2274\321<\260~8=,\353\210\2753u+=\2356\347\2732\262\020=\241\332\"=\353,z=|6\227\274\242{\024\274\270D\324=\257b\240\274p\215h\275\025\321\252\274t{\215\272NE\211\274\353\356\260<\332<V;\223\341\220<\270ZS=N9\232\272n5k=\t^\207=\345$\257\275\213\223l=z\230/\275\210\336*<D\337\366<\201\276\271<\225\360X=yt\017=\245\230\355<\321\025\002=\032=\306;\360\241v=8v\345\274\004q^\275\347f}\274\013\034\342\275\352]\003=\365HV\275\303\206X=g\361\035\275\244\377\236\274\373:\276=\376Z1=\314\177K\274W_\002=\215\257c<\337e\303\272\366G\r\275\247\325\241\275\310O\316;\330\036\334;#\206\032<\244\203\367\273\316\020\263\275\321\205(=\364uF=\324g\231\274\005\027\301<|\365\215\274y\177\014\275\244\2530\275\247\360(<\3004\351\274\024!q\274&\365=\275\021\377\003\275\303\036\315\273`\326\214\275\030\315\276<\346\352\223\275\035G&=T\0354\275I3j<#\210\017\275o\307\031\274x\007b=.\237O<P\2225=\025\331\027\275\313\'c<\235\255i=\303M\330;\254\324\307<\373\212\210<2\221\007\275\340k\251\274\217\321x<Qo\214<\207P\241\275x\237m\275\336\216\003\275\247\240V\272\356\324Y=p\n?=\254\020\002=\235\002\200\275\344\227S\275\031\302R<\306\330\373;C~\000;\021\003\211\274\341\331e\275\243>\266<\314D\241;\276\324);7\267W=\312I$\275\336]s=\014\226\005=5\333\277\274\216\267\237\274!\321\022<\330\310\014\275\222!\212\275\205(\370\274\017??=\242\010G=%Dh=*\276\327\274|\241\341<\311\340\236\275\374\021\034\275\241n\364\274<\230\275<o\261X\274\252\366\"\275\307n\330\274\204\342\341<\2472\235=\374\343\241<\376|\002\275m\341\263=\371\251\236;\024cP\275\372\215\020>\000\314\017\274R\372\257<vZU\275\000\223M\275Z-\211=l\344P\275\207%\253:\356\307\257=\326O\240;\036\002\032=A\375\266\273\314\204\212=\236d\005=\216\223D\2759I\242\275X@\272\275t\004\240\275\255\210a=\007;\362\274\364f@=\354\013\004\275w\026\212<\341\014\235\273\232\312[=N\230\330<\016\242\033\275L\214\200;\332\177U\274i\017\330\274\210\032{<\263\2233=j\252N\275\345\333Q\275\334=\005\273\352\314\357\274\270\nt<\264x\007;\354\251\240\274p\362\013\273D\001C=\t\254\025\2747yC\275,\307G\275\n\243V=+\344\340;\001\364m\275\026y\224<\303\337\021=\004\366\266=s\375\265\273\374aS<p9\030\274e\207\244\275\332sU\275h\230{<\347\212\310<\322\377\256\275\212.\324;G\243\300\2745\375&=\327\264\254\275\014,Z\275\313\205\t\275tV\225<F\356z\275\024\016z<\243,\224\275\261C\005\275\221\024B\274w<\204\274hO\207:6Cn\275m\347\215\275\234X\345\274\241\3308\274\312ol\275\302+\032\275~\224\t=\302\233\272=w&\302\273{\305\253\274UU\020=WH\301\275\274N\312\274\226\331C=\322^\007;\200\\\007\273\3024\226<\201\237\316=u\245(\275\0331\014=\253V\n\2747%\256\274@O>;\247_E\273\254\223\"<<EG\275\037\026\351<\343\262\366\272\2615\021;\353\277\033\274s\336\347:qQ\007>\261\'\333;\374\342\325\274j]\337\2736\222\t=35?\273\310\0011\275\331x\034=\005w\236=[+\305\275\213\264}=\324\306Y\275\243\300\r\275HuE<\017\017\226<\273N~\274\027WS=\343\324\207\272\352H\300:v\247\223\272\315\372\321\2749\215\206\275wK\243\274\240h=\273\016\247\226<\327%P=RbA=\262\326\202=\016\230\377\274z\216\352\274\220\rn=@\320\200=@\200\361\274\307\3043\274$\013{\275\352\\\221=\273\253\271\274\263\231\321\274\367\377\235=\247\347\220\275*\005\265\273\377\240\310<r7k<\'\205[<^\345\224\274\214E\277\274\321\256\277<\2306~=\373\007\3639Fu(\274c\013\252\274\331U\377<\226:\017\274dN\344\274\356,\345\274us\225=K\311\003\2755\366\016\275\355\231\232=LC\204\274\320$\222<_3C=\335\206\303<\\tB<\3011^=\"3\277\275\t\265\203\275\006\"\255;\266\274\375\274v\341\236\270\222\t,\275\030?\215\275\245u\376<G\\\004<\2345$\2752$\236=A{\023\275\360Sf<\343%/<\363\211\313<:\002\355\274\353\354T\274\231LI=\026r\027\2746\363\036\275\005\330\234=Nh%=\233\357_\275\306\005\034\2751\236M<\\# \2756\265B\275\001\335\';J\240\215\274\260ju\275NC\037\275\021\324\273=:\007^\274\240!\354<\275\255\253\274I\3639\275y\277\211;\351\257\235=\006\366\231=0\020\225\274\307_\232\274\234\232)=jSw=>@\212<\020\023V\274\321\331\207=)Z\020\275vN\266<\255\007\225<\330\n\302;\264a\200\275\315\272A\274K\253\245=\'$\000\2748.M=G\206\372<=\033\356\274$7r\274\265.\301\274Wx\201\275\273\243\215=\212\316K<\246\270\007>0\221\327=\022Ht=MW\006=\363\265:=M\225|\275\222\265\312<\377\216D\275\177\036\000\275Ii\260\273>gp<\240\334\354\273\023Q\037\274\354T\024=\304/\\\275r,a=\216\032\2759k2A=\320#Y:\354\274Z;\241\340\307<0\246\026=\371\320\347\274 \354`\274j8@\274|\205c<D\030\254\273q\336\216=\210op=/\253N=\300\3674=\034\201\023=\005\236)<\332\010\'\275d\340\016=\354\202\017\272\353x\346\274\276\327\322\274\253\205j<\2217\037\275~&7\275r\311\261<g\220\223<\022Ac=;\'\240\274\322\371\363<t\202\353:.\031V=(\227Z\275\247\377\341<$\232$\274\034!^=\330#4\275@B\325;\357\243\265\274\2317\234\275\0360D=\333Ib\275\222f\242<\004f\352\274\214R\357;M\235\243\273%\017J=\326\'\213\275]\252\353;\022\222A\275\n3*<\371\212V=\241W\235\275\003\233\000=d\307!<\305<\212;\251*\345<]\214\025=x%q<9UP=\206$\241=\307,\177<\216\375@\275\267p\372;f\234\363;\234\314J\274\023\n\\\275Fh9\275&\253\237<\024\302\322\275\024EV<+\377\221\274\334\235\266\274\3151\266<\367\205\303\273\225o`\275\262\342\267\273\2226\320=\276\277\366\273\032]\t\275\326.k;!\246`<\003\335\224\275Sq\023\275\345\266\267<v\375\216\275\020\337\347<\267\306\225=\372\021\265\274\223\031\221\272\234\022\241\274OKw;\3056K=\"\374\\=B\014l\275\001\213O\274\3616\263\273\273\324\315<\262\340\004\275/c\320\274\256\323\240\275\264sP=\316\355\037\275\231\357\277=J\216/\275\305\270\245<\273\316+\274\020R\t\275\0101\332<\224\304\232\273\276\327\020=#ax\275\374\221\267\275yH\212\275\213\336z<d\nO<\253b\221<\331s\345\275\236\371\200=\277\205\016\275\275\207\323\274\027!o\274\020 U<\307\023\331\274\245T\024=lq\016=\240!\261\274\334\327\343\274\377~\335=\231\315\352\274\377\270\213\275\3718\233\275\226\277\332\274\031\206\353\274\336q>=\356\203\231;\334oi\274@\211[=||\034\272l\314\317=\032q==\356bj<R\206\306\274\006M\r\275\351,\037=Zl];\020\"(\275\223\310\002\275{\026\201\275@\006\333=$\213\036\275\221\211\365\275\321\355\234=1\336\325\274\255\241d\275\035f\016\275\300C\311=\035E\305\274T\232\251<\333e$=3\t\211\274\202\214\223;\261XN\275\223\242\244\274\177<\337;E\346\300\273f\034\324\274\022\243q=\354\265\303=\333\310\020=\264\256\314\274\351\\\023=\236\323u=]\375\341<e9\r\274\273\354\021=y}G=9\241\220\275\202(\304\274c\325\005\275\323\032\247\275\267\316\333<\265\305\300=%{\203\275\342P\337;\314f\007\275\312c\305<\365n\340\2748\361\303\274\031\263\344\274~9\250\273Z{b\274]m\262<\363<\035\274\010\336o\274 /6;\274Y\241<\322\365I=/\363\226=\222c\2049\\\327\277;>I\245\274\213\213\221<\030\327\375;\233]\026\275\261\273Y\274\237\t\215;0\326w<\004\205:=\n\351\316\274f\276s=Q\325-\274\277\311\004\275\251\317/=\031&\212\271t\372(=_#R<\313\351\214\274k\212C\273]\362%<O\215\3779T\265\365\274\247\010;\275K\244c\274q\256y<\371$\214<\t\2101\275[|\241<I\340T\274S\027\257=1\320\321\274b\007\345\275\362R\223=\"\230\037=\370\177\352\272l\3012<\253\027\201\275\362C\250\275?\321\325\275\356;m\275\243R\337<\327<#\273^w\263\274\366\301\332<\276\016\255;S\363}\275\216E\030\275\273\2278\275\200zK9L\004\222=\204\033}\275m\302\301;\267`\314\273]\331\023=\030\'\325\274\206^\333<\344\273\006\275\252c\004\275\356\006_=\265\306\337<\224\215.=\335a\360\274\311x,<3O\314<pk\362\274\235\244F\275\306\235\212\274\234\266\217=hY6=\311\366\205\272\275Q\302<\360\021\211\274\210p~=\272\"\245\275Q\0038\2744k\303\272k\332\241\274\335\t\205<\366\022?<1m\272\273\024A7=\007%\210\275\2326\206<i\362\304<\'Y\227\274\204<\310\274E\rI=|\371\302\274\345p06\222?.=g\341\215<\355\361\t\275\316\214\243\274\214@\261\272\225MF\275#!<<\006bP=\235\365\346\275di\317\273\021O\245\274c\374\241\274\3441\254\274\303\013[\275\177\023/\2749\335\247\274)0\"\274\300s\021=QQ\306\273\266/O\275dfh<\031\034m\271B\250\243=\372\334\224<AI\241\274kU\010=>\3771<w\013\232\274\000r&\275i\205\247=\\`\3659\265\005P\275\353\313Y\274\223)i\274\265\025\207\274\227My=Wt)\275|@\232\274\nr*=\377z!=\245\265\"\275\342\342<\275\215\t\223\274J\333A\274U\245\020\274\3645b=\372`<=\257>\253<\335g\027\275\013\230\351\270vu\010\275\327T\325\274\2750\266:\2413\366\273,\264\264<\222Z\301\273\313K\221\275\177\2626\274_L\301=\265\315\177;O\370\216=+!E\275\327\307\246\275\356\251\010=\022\275\324\274\356s\021\275\363\3358=\016Xo=\006\253t\274\'\242b\275\306\225\246<9\357\317<}\212\t=u\245^\274\303\321\333\274\304\316Z\275\003y\226=v\375k=\203i\262<4\211\203:\376\264\016<}(p:\036\277*\275\202\314\003\275VT)\274\263\327\366\274\\5U\275P\247\321=_-\373\274E*\265=\240\004\245\272q\256\215=\366\270\205\274-\353;\275W\210\314<\234\240&=\367\254*\274\351\344\214=\261\337\n\273x\314\'\2758\354G=\337O7=l\265i\274\347\343]\274\361\360\224\274\177\014\373<W8\265=\362\004\325<\004\\\203=~\266Z\275R.\342<\351\025\311=\027\343\355\274\315\014R=\016\030\206\273\r\032\2149\226\304\215<\005>P\275\000\356\':\317\267\207\273/\223\235=\255\377\033=\223\250\251<\'E\352\274\276\266\244\275\000\0245={\244?=<\325?=r1\277\274\321Mz<X\032d\275V\272\313=\032\345\230\275\271\373K\275#\317w=v\232N\275\370\354\033\274\346\027\213\275\327\032\236\275\226f\253\275\226w\276\274koW\274\020p\271\275\216\032v\275\357+B=\224\322o=\371V;=\035\345V=\376\2646=\261\347V=\343\250\301\275\242\207\016<g\255\034=\351\273\037=\035X\366<\330]9=\024\227I\273Oe\020=\373\347g\273.\376\250<>\235\207<\002]\201=3\207\004=\323\316w\275\323\302\364\274\224\302O=\253\374M<\325\214n\273\023\275>=\366!\363\274\376\365\271\275v\237\251<\022r\341<\371\010\033;\262\002\275\275\246k\353\273\353\327\312<\315\242\226\275\201\3315=\216\030\317<08\330\273@\310\310<Y\3453=\365t\343\274\364kh=\363\327F=\265>\001=\323\334\300;W*w\273{\023\262\274\014M\325;W\246\235\273-m\311\2750\320\"\275\014\rW\275\034\364\n\274tUS\275l\367\244\275\022\214Y\274\2511\001=<}\367<\016\200\314<\373 &=\221\'\031\276\030\375\326\273\0237\373<}K8\275^d7\275\316O\275\274\333\023B\275 ]\002=\021y\363\2740sn\274=\333%\275>\306\212\275&ut\272H\025\205;_Z\311<\362\337\032<j\013\214\272\337\247\257<\\&q<\2037\370;\372\034\004\274\377yB\272U\010\244<\325\205\315\274\013A\312\272$\330z\275\305\237\260<\335\377?\274\002\026\317<\307\310\217\274&k\025=i\370\221=a2O=\352_\231<\234]\017\273\256\310\224\274T\215\033=\255M\225<^E\235<E\365Y\275\037Rj<\t\254\244\274\323i\021\275\236\324,\275\2755\217\274\177\205&\275?\"\025\275\204T\261=\035w\025=\031U\257<P\007\010=A\206\355\274\302\304\330\2749L\341<d\036\016=\351E\337\274=\007K\275\226PT\275\205(p;\247\362\320\274\303\327w=\270YR=8\306\t\272D\341J\2753v\035\275\305\302\016\275\250d\"\275H~\024\274e\271\315\275\371{\351<NV\334<\236m\021\275\003\"\215\275\024\264\211\274E\247\221\274P\001\273\274>\036\267\272/\037\275=D\213U<\272\321\355<\327h\303<\367\312\223\275\002^\201\275\333\360\034\275\362h\027\275\326\255\233\274\370Q\237<\315\311\212<\254\216\310=6\037\223\275x\262\213<\220\323\016=\230\014\313\273V<c=\373\271A=\234\236\233=C\262w\275F\326\211\274=E\325;f\324\215<\031\345\337=\214_]\274\003\333t\273\226E\022\275\202C\243\275/B;\275^\254\310<3\325\322\274\373\362I=h\2675\274\2374\017;\202\272\313\270=)\303\274<\272\334\275(\365\210\273\007\n\324\274\330-\200=x\006\216=*\272\031\275&\354\217<Pm\322;\025\301z\274&lS<\360\240\207<\263~\204<\351\036\013\275\242OP<\371k\221;@\312N\274_\035\213\275\271\354\324<\210\2226\2759\333\234\274\337\007\334\274aR+\274T\177@;P&\305\275.zm;N~\217<\244\020\263;\252\345[\275\212t3;.\023\217<q_\203=U\300\274\274\337\271\032\275\262\266\276\275\246\311T<N\276\227\274\200\177\370\272\214gS\275\303\234(=\223#\214\274N\370\016=\315\356[=o5\332;,\342\242\274\227\222q\275@=;\275\300\026\373<\305;\250<R\251G<#\342 =|UY=\214\346\010\275\271Y\005=\355(\374=$;\005={\305\020\275\017\2229\274\322\374\365\274\271\026k\274\202\330\303<\266\003\207\275\374:\277\275\232-\303\273\204.1\276#\332\003\276-\377\327;\005\005,<n\021\252\2748\263\317\274\275\256\217<L\034\276=M\274E\273\336\260\252;\356\360\220\274\321\220h\275Zm\222<G\263*=vYO=\365\372W=F!\030\276\311\t\230=\322\225\216<Ll4\275\036\0131\274\031\332\024\275+{w=\236\222\306\274\204\307\200<C\014V\274\366;\367:C\317\310=\315\301\212;\316\363,=&P\306\275\342\223R=k0\004\275\375&\272;\221\327\255<\213Ax\275\213\265\211\275\234\370<<\360\3215=\306\010`<0M\221=\261\002j=\336\325\202=K\306\017<-\006;\275\365#\001\274\360\"3<#\306F\275\277\357\245\272\220\355\363\274\\\363\300;\274*\311<\346\212\262=d(V=r\246T\275\333\347Z\275e\236\244<\005\033A\274=\215\321\272\'\010\204\275\312L\335;\355v]=\032}Q\2751\316u\274\252\340\r=\2644\242<b\026Z\275%\010\355;(\255\361\274c\022\321<\024\352\323\274\363\032\245=\005.\200\274w\257\310:\264A\340<\017h\272\275\253\265L\275\237\306\340=\3236\256<iT\325\275\245{\247\274\352\2243<\"\032\200<\350\350\3579\033\240\232=\227\233)\274\0139\262<L\252n\271\230i\327\274\265Z\277\2740G\207\274w\266\250<\024\234\355<\030\005c=\233\210\224=].\017<D\216&\274-JM=pF\356\274F\344.=\016\375\300\275\336\301\373;\223$\330\273\320\257\234\275\240\032\274\274}*\021>y\276\307;k}*\275\305\321\305;\376\314\033=\263\362`\274\340\202\020\275\3545T=\010\226\001\275\0229d=V\2451\275\316\357\212<\337\2536\274\030O\235=6z\354\274@\270\376;\221\316{\275\324\364\320<\373\227\374<\325\037\274\274\214L\230\275\000\351x=r\224\261:\222sM\275h\363\223\275\004\357Q=\216\236\006=\200\371\241\274W\021\205<\003+\330;+(\324\274\357i)\275\356\016\232\275\273O\214=K4\243<45\204\275rN\240\275\2438\221<{O\002\275me\233\2746\005\022\274v~\001=\362\303\323</\223E=l\300\3509\2744\r\274\263\234\357<mC\005\275\032\255\t\275$\301\314\275\214\252\2419\341\332\323<#\263\224\274\023\370\363\274\241\320!=\022\322\227<Y\332\220\2757s6=mp\227\274\300$L\275\261\334\372\274g\316W=\242\013\215\275x\366n\275\231\206\200\275<8\001<\244\357x<\206a,\275pFW=\213\354Q;\366ts<M\327\275<\245\224\232\271\330\022\252<\'\205\332\274\2769\331\275\010\025\267<\223\322\231\274P}\245;\305\013$\274\016-$\275\3169\267;\330MM\275\202s\306\274\206\025\227;\317E\224\274\312\2535=[\326\377\274\010\241q\273Dq\234\274;\217|\275\006\010\026=\034\177\200=o\245\353\274S?|<\234\020\200<\372\362\255\275\033\205y:P\006,\275\332\036n=\234\020\230\273He\243;idW\275\272s\354\275\206\255s\2759\315\320=\242\017\'=\n\320I=6\017|=|\n\023\275\021m\223\275\203\306\210\274P\305\212<\224sL=Q\201<=\033\031\025=\207\201\014=t\326,<\276\306\026\275\340\367X<\322\333\252=\'\013\273<\264\207\270\274\303\204?\275\302\330&=^X\320<\236\177\251\273a\322\007\275?!\377<\240\030<<v\313r=\215\002==\024\031\025\275\247\022\273\274\304e\236<\260)\247<\027\037\242<p\374\210=|Y\316<\351\225\317<\224\232l=\2440\205\274,_\026<\344\353\016\275k9\272\275\224 @=hM%\275T\235;;\346\227\271\274V8\257\275\233\367$<F}h=\331#H<Y3\257\272J\243\245\274\253]\n\274w\026\223=\204\327\216=\t\314\021<6\020\370;\325\375w=^~6\274I/\023<`\306%\274\263V\324\274\335\257k<\214\017\202\274\234p\022\274\204\004\260=Bq\020=\203Z\217<\312\365\330<\013\255B\275\252D\333<\032c\237<\340\252\016=\261\215\210=\327#\036\275b\315Q=\3572M\275\266\213\354<K\235B\275\373\300\225\2756f7\274*K\275\274\t\220%=\344\241\\\275\272\375\024<\333\034\236\273q\277L\273\200\214\267<MR\223=\026\340\227=4 \000=\301\217\r<\315\255,\275_i \274{I\211=w\'+\275\306U\265\273\372|C=f\267\246\274\322\241\307;Uj\210\2755/\r\274\236#\267\274S0\264;\033Y\030\273\327\016\031\274\"\001C;\\fH\274X\217\361<\234QM\274\301sI\274\374\313\232\275}\217\023>3\271_=\243f \275\204\301!=WC\\;\364\022\\=,\210\362\274\2260\260\274\275\225\213\275v\244\r=\257\221.\275\352\241\244<G[-\274~\343\250=\000k+\275\355\013\335\274\305\270\207=d\235\347<\375\374\214\274\354\207f\275\335\331\266=z\2553<U\240\030\275Ht4\274%2\234=\035\001Y<WF\217\274\211\243\207\275\320@\356=\'e\027=\237E\022\275\230\247\202\274g\003\332=\341<P=\217\244R=\036\251\243<\025?i=\010\352\026\275\026\237\260\2751\2462\275 \037\n\274\201g\254=\304[3=E\313\241=5\363\216\274\3747\275<\266W\312<\234B\r=\214\365\370\274\361\006\316\274i\277f==\361)\275\206\314p\275fX&\275\200\031v\274\273\314\351;\347\344\037\275\016{\035=\370\036b\275\217M\214=R1\312\275\230\"\324<(\031\365:\245\010l=\321\334\306<\240\337`<\272\242\216<\024\266\270\274\275\353\006>\352b\210\273\332)\025<`\240\354\273|:\360\2741?\372\2742\225\240\274q\005\272\275\266\3518=\031\225T=\272\355%=6{N=\"\361\244<;!\006\274\372c&<\010\360\365\274\335vA\275\337L\\=[>\237\273c@D=2\363S=E\327\023=\242\276\224=@\264\255=\nWm\275\223,\356\274\\v\270<e10<\231\177\177\273\342\371\223=\'\030|\274\323f\347<5\\\344\275W\255\215;\030\377\370\273\366\276^=4\257\273\275\004\312\303\273\303H\3358\006Wy\275\007\002^=j\251\212=G\010\242\274\021 \355\274\301S\\\274{nN\275}r]=$\205\223<q=\004\2747JS\275\001\255\371\274i\371\344<aQ\203\275\267\326\212=\"k\007\275\000\024\276<\303\224\302\274\316\td=\360\3077\273\013[\375<fJ\256\274l\020\236\2759\026\270;\2512\267\273E\216\203\274\320C\310\274#\001,=\310\251\333\274\010\365\r<\364;\226\2752\276\232\274/\276\256:\035\373e\273\216\332\320\274\367@\336\273Ip\372;X\213\023=a\376\300<\273\227\363\274p\311\204;\331\253s=\203\303\351\274\027l\254;\256(\233;\233\032\224\274\010N5;\236\377\267<\354\302\020\275\000r\032=\340\254\311\273}xx\275d\2709\275tm\350\273\n\235\235\274c,\001\275\335\246T\2750\246W=\2048D={\357_<\236\031\216=4Te=\210\250\"\274\177!\214\2755\205\335<\310cR=>o\204=N\213\003\275\230=?\274?*\224<F\352\261=n\307G\275Dp\033\275\325\023\303\273f\245M\275\373|+\275\013X.=\274\244S\275\312Y\352\274\267<\032=&[7\274c\231\206<7\367;=\202\205o\275\332\037I\274\017\267\271;\201\241\356\273\200\010\002\275\323\027\\<P\270\202=\257Q\215\275\365\307\007<Y\224\300<\241\2037\275\014vA\275\345\311\373\274\240\307\035=BcI\275#\233\215\274HkR=\347q\"=\n\213\213:\260\002*\275\014y,=\265*T=\332\016\270\274`\207\237\273\002F\250\274#\377\204\275ip\334<\323\233\t\276\231\0145=\216\'D\273\260\351\334\274\375\217\002<\361\365\250<^\330\360\273\223AE=\372\301\212=\346\2301<\024p\255\274\036Q\225\274\251\236\372<\265b\037\275\276;\244<w\253=\274\371\313Q=\202\013\225\273\007\366\325\274\256\022\310\274\317NC=;\326\311<`-\036<\275I\241<\366\n^\274\367sm\275\275\177\211=\351\023\245;\222>\341\274<\360 \275@\377\245=\275@O\275]we=\210,\027<X?\014<\245\316#\275\220bH\275\260\274\024\275\303\177B<Z\321\307;\317\265\350<\324\337\346=\324ow\274\374\242\271\274>\2403=\370)\333<J\357\035=\010\213\377\274v\370.<\2202\374;XD\374\274Y\213\226:E\037S<\247\274\345<X\367\244=\233{\220\274\360O\357\274\335\255N\275x\022\022\275\357d\313\274\025c\370;\212\003\001=S\356\237<^U.\275g\241~=\331kx=P9\201:\027\335\217\275\263\r\260<\210\306{\270\333\352\367:\315\304\300<!\330}\274\335\243z\275n\244\023\275\026>j\275\371\",\275|\317\352<\252\327\224\274\3462\225\274B\365\224\274\2335\303\274i\010*\275}]\341<\025\211\\<=sM<J\2117\274\323vX=k\336\216=^\002\212=\271\300y\275\306\3027\275\327\360\233\275*x\216=c\327\240\274{\313\253\275\320e\001\275\025\010\027\274\024b\003=\252\317\227<e\240\037=\331\356\275\275\214l\311\274\r\375t=\370\253\002=i\353\200<\340\237`\274\253\354\031\274\001n\230<\013\252\241<IX\272\274l\352\205\274\004\215\365=\350\021\337<K\225\211\275\034)\031\274\013]\311\274h#d\274\364\353\013=\\\357\335<\345\277\006=\201T \275(Q6\274\315\316E\275\365\037\\\275e\023\273\273\356\240z\273$\222\027=s\210\305<\353\356\213:\322\227{\275\326\202f<0\235.\275\026\325\204\274+\210\272= \226k<\341R\002\2751\232\014=\010?\206\275\270\200\334<\261\007\2008\360\030\275\274\306WP<\303R\215\270\332\3709=\222\213\273<\264\257\347\274\2269\200\274E\322\024\276\333\214\3079\316Gh=e\331\001\275i\340]=\317*,\275\231\347\314\274R\252\016=!0\016\275\220S_<#%l\275M\227r<l\033\276<\333\216\343\274\327\270#\275;\314j\275\247\356\344\2745\366\331<\265\316\316\2745\373\300=G\r\212\275f\260J\275\010\026q=\241r\240\275\nU\351\274\342\321\275\274\364\r\226\275\326\252Y<\216rg\275I\001\200\273f\034\r=v\306\220=w\230\277\274{\n\200=\260\247\007=\3754H<\323\311\207=\207k\236=\345\000\303=\374\021\313\273\243y\254=\332\377\t\275\301\t\254=\365W\000<\264;\302<j\303\323<\3117n=G\250\311\274\355\007\352<\037\343\330<\200\314\355=\352\372\336:\006B;\275\204Ew\275U\376\304\272I\330\221\272\302@\346<\223#\n=\017\262\263;\277\003L\273M\315\n\275hJ\203=F\016\323\274\345N\371\273\213\205\025=\034\036\322<\326\267S<\3367b\274\262\322E=\270e\034\275\2232I=e\377\252;\326\355\030=8k,\275^g\302\275\204>\313\273i\177\334=\232\261\310<\"\254\023\275\243\266\342\273\316:\332<_\222K;\210\271\375;\272*d\275\352\271\361<\031\017\200\275\337\034&=\n\225\343=\3543\236<\220\307\254\2759b9=\366\334\234=\001y4\274M\257\337\274\264&\014\275\274\026\362\274}!\017\275\354\253\363<\216\202\227<\006b\221=\253^e\275\234\3558<\027hL=\n\257\271\274\342\227\307;\370\200n=\330\213\022\275\265\325\265<\323#\222\275\033\354v\275\224\331\025\275%\223#\275\251\024\274\274\263\017y=\315\273\335<\343\t\t\274.\222\002<s\"\025\275 5\365<\213I;=\357\017\201<\322\201\316\274B\300\"\275\261\321\261\275+\201\351\274\334\271\323\275\373\273\250=\004\032\245\275\"v-=st\241\274z\202\226\275\267\300R\274+6\231\274\327uR=\277\225\220=\200\030\300\273;P\372<\216,\025=\221Q\233<\306\315\216<N\261\001\275\236=\333<F\324I<?\002\007=\317\001\372;(\224\243<\301\273\177=\274\325\241<$V\354=\246o\022<\353W\234=\361\366\231\275*\315\200\274c\033\200<\"\332{\275\272y\301\273t\t\376\274\251\307}=\024k\207=]\270\343\274u\322N\274\030U>\275\346\252\370:\365\254\253\274\320f\354;\212c\r\275\010B\254=NC\025\275}\360i\273\346K\327<\350\272d\275\272\351\251\274\325\305\313;U\3476\275\367(\244<\034\370x=C\016\341\274a\201\r\275\211Jg\275}8~=\364\206\222\275\313\003\264</\241\256\275\212\205\300:\254\354\200=cG\243\274\262\201\237\275\375\365\2229\371\221\037\275G\231?\275\201c\317:<\'\265<\250\235\244=\224\356\007\275q+\355\273\303\004M\273\312\346\327;\367\304\273\275\342\005\227<\230\226%\275\241q\261\273\330\201\253:0\251\261\275\237\1778;\366|\304=\263\330D\275\362\300\216=m\206\006\275\203k+=\230\215\225<<k\354;d@X\274\336r\342\274\276\304\316;\2120\236\2752\264\206=V\344D=\033\022D\275\301\267J=\273\232\254:F\262\241\274\202;&\275c\033\375\273\355\006\252;\247\240t<\330v\256=\262D\374<c\201\r\2751D^\275h\346\365:\354\031\234=Q\370\230=wY\211\275\322\246\221\274\253\261\365<\324\264\220=w\324\362\272\266\221\206=]\023\003\275hV\002\275\246\343\2239nWF=;\205\224;\344x8\275\237\005y\275\315\270%=\204-\010=]\317o\275P\233\236\275B\205^=\375\302\"=\'\340\256\272\340\274\002<\361\360\244\274\210\316\236\275l\356<\273\331\036e\273\202%\314<\320O\272\274\365\006\270<\323\304\205\274\251\227\365<\030\205\225=Z\271\217\275\262n\240\272\035vX\275Z\322\357\274s\374o<\315\000\234;\241&w<\242{\372;h\251\234<}qX\275\370X9:\302\314\275<\233m=\275\263ta\275\007K\005=\013\214\007>\344\024\320;\376 \200;\244Lg\275O\035\211\273\217\277:={\206F<\006u\034;\346\301\316<\233\233B<w\300\322\273\212\221\215\275\323\263\\\267\357\034\273<\325\034\323<\010H\313\275!\034\031\274yB-\275\346\361\245\274\323\362#\275\370\336\206=\337\326 <\360\034\211\273\0027\314\274<\267u\275b;\327\275\224`\310\272\220\2245=g\356\301\275\016\323\212;\253\336\"=j\020\223=\303\212S=I\307\005\274h\341\353<M\350\353<\241<\247<5\037\221<\331}\265\274k\226t\274-\304\351\273\350\036\372<[Vd=mk/=\216=\271<\t\202\370\274\336]b\272\224\346V\272Q\360\375\274\030E\346\274\363}\2369\311\214\301\274\331d\374<ky\001=\032zK=h\315_=\001\200M<))x=w\235\267=p+m\275HZ\345\274V\300\212\275\371g\377<\373 9\275\375\263\255\274\325(\024\275\r\005p\275\345\343R<#Kx\272\r(g\275.\024;=Z\240\351\273H\025\r\274\310Z]=\2460\245\273\0056\361=Msu;=\341\032\273\225\273\022<N\315?\274I\225/=\257\310\030<oY\371<\3562;;9U-\274]\307\247\274j\367\256<\014\032U\275\033\321\345<\252\360\027\275\r\211\266;\330\\\261<\031~\232=\333\025\256\273\016\227\322<\0023\251\274\235\274H=(\353\325\274\323\262\244=2\001\361\274\035\250\233=Z\341\245\2747\240\031\273:\214#=\342\337\214;\006c\271\274B9\241\272\034;\213\274H\036\222\274\"\300\212:\315%9=g\354N\2755)R=\035\334\274\274\240-\236=2\324\250\273\033\221\021=\305\013S=\333&\250\273\tXu\274\313\347>\275\2731\276\2741\035d<\214\224+=\363\242W=aE\340<\370\024\010>\230F\321\274\305\211b\275\313<\016=\363\267\265<4W\324<\r\320\"\2753\252\244\274\362\211\315<W\363\354\273\377\016E<;\213J\275B\240o\275\026\202\014\275\017\356P<+\3267\275B\324\354\275\243\037*\275\242\3661\275\020\312Y\275\255\331\376<#\243\334<>l\037=\302\363\245<\227\336\313\275\212\031C=\366$\017=\246\237/=\323u\020;_\334\200;y1\332\274A*\276=%M\216<\203\3371\275mO\253=<\263\257\275\314\240\201=GvZ=\220\301\211<6\340K\275b0\031\275\221\246!\275;\352\367<\306\256\r=\010\322Y=\030\"\'=\247\312Q=\300\310\035\275\370\312\245<\261<\302<\271\027a\275\253\336\031\275\014\010{=\007\316\306=\352\203~=B|d\2753\025\200\2725E\210<\262\333{<9)\367\274X\030\272<\020\337T\275\365\234\204;\311\204(=\350\367F=q\343\200=\357H\224<\267<\2308\357\022\203\275\365\022@<#\266T\275\242\323f=\361\001\301<]\r\210\274!\202\373\274\370\350\023\274k\256\313\274\335m\302\274\271\273\247\274\314 \035=\023\2054<\233\334\226=Y\256\014=eT\270\274\323\344\001\2746\355\000\275\336Y\221\2744\245=\275\333d\240<\273\203\341<\251\224\237<\177\300\264\274}s\213=\224=\017;\271T\344<\322A2<V\023*\274\362\331?\274\355l\243\274\270\224\315;\210v\300\274\217^\257\275\220\335\226\274\001\263\270\275\354n\204=_4z:\34099\275\251-\316<\315\246%=\365Yw\274b\003\t=\234\340\r=\231\252\335\274\232<k<\357\333)\275\362\376Z\274_\235M\274\352P\241\275\271\263N\275\341\274+<\0006\217<\224\340\350;n;\213\275\257\216\r\275\315\317\361<\251\024\323\274+]\"\275\375\205<\275<\000g\274H\005E\274]\223\267\275 B\327=J`\263<\020\025\277<\232\334\021=ik}<\235\230\267:f0\352\274\251\3263=\007\255\321<;Z\010>\027\314\370\274\331\357\327\273\'\340\230\275\t\204\332<\273I\257;|\355\333<SJY\275\002F%<\"3\263=G^\261<A\363-=\273T\236<b\355\357\274Q\032K\272\363U\256\275\343}\271\274\001\373\003\274\213\326\303<Jq%<X\367\277\275E\302?=\210\357\t<\317\021\"\275\014\247k\275\314\210\013\275\35346=[\024p<\306\320\207\274n\336\215=w\207\370\274L\344\343\272\336\301\277=W1\240\275\206G\225\275\033\004\t=:\021\\\275Fx\034=\276\344\020\274\003\232R\274w\345\033<\253\250T<\3613\216=\260\001\227=ZJ\002=:KS\275F\027Y\275\211\357\345=\327\272\253=\352\336A=P\'X=\311P\303=\241\030\205=\304\3766\275\202\010\003=\030\217P\275\275n\374<\035\361\324=/W\206<\212L\231\273t\210\037<q\276O=)\241\202\275\024P\216=\323H\260;\3308\251\274\356\001\351<Q\314\233\275\311\305\256\273\017\007Z\274\022|a;\354\263B<=\022\206\274\370R\205\274z\211\'\274\001\2448\275\371C0=\272\275_\275\274v[\275L\254\343\275Y\201#=IU|\274\2757\241<\352\"f\274\315\021\262\274[B\217=\326;\272\273\371%\276\274_\321.<\207\357`<\344<6=\210\"\261=m\341\033=3kp\275\035\244\211=_?\275<\255\364x\275\226:\235\274(\r\022\275[\217a\274$N\261\273n\344#\275\003\0047\275\224YQ\275\352\370\'\275c\300\300\274v\315\031<\350\267\343;|\316T<\\\312\304\272e\362\262\274\275R=\275\240\016a;X\333m\273\345\013\226\275\007]\010=\327j\034\275\236(W=n\255\207\275\215I\266\274\235%P\274\006\207<\275\004\3314\275\343N\375;\rG!\275r<\237\274+{\2049F\263U\275k\371V=\177_\254=\244u\322<\303*\214=\264\272\355\273\342L\217\275\3735\373\273\037\3329=\244\201\374\274\265\364\370:\260\260\352\275B\216h\272\360\333\227\274\306\310\006=\3670\245=\300R\356\274\207\337\226\274G\255\200\274\020\351\212;O\2164\274]R\340\273\022\".=\016\005\017<G\237\035=\257}E<c\314\230<\355\320\370<\026\237\005=\376v\244\275\271\315>\274D\017\203<\373\372(=\\\327\014\275\033\260@=\200\350*\275v\343\277<\247\003#;\336\211J=H\233\240\275\016\302T\275\354m\344\273\230\214w\274b\203\037<\311\222\336\274\205\317\030\274\367&\344<\031\221B\275\222\345\330\274\226:\244=\354\204\221<25\211\2747I\256;H+\240=\364W\344\274\007:\215\274\020D\030\274\325~D\275\231\000$=\0147-=\301\323<=\361\002\340\274\344*\222\275\274.\001\275\344\242\220\274\307}\036\275e\251\013\27519,\274\271\236\210\275\256\303\014<\027\341H\275wK7<G0\257\274\346\364\345\274$\224R<\367|S;\237\271\255;`\232\353\273\202\314\366\274{\"\023\275\030\342\014=\20119=\323N\010\273J\310\333\274\332m0\275\267\225\t\275\002W\254<\362\323w\274\035yh\275\212\262\007=;Y\023<\020I\216\275\237\021J=\260\257\205\275O\024\344<\217\266\314=\"P\223\275\'/=\274\216ce\272\234\260\335\273MD.\275\364|\371<\'A\330;\211D\311\274YB#\274\253\017[\275\230\261G=z\2652=\241j!\274\351a\207<\301\275\360<r%\314=\260\356U;\366\2710=x\027\t\275p\017r\275o\226\234\275@H\230\2751\035s\274J|D=\343f\301<\266Y-<\177\304\261=%n\275=\337\215\006=\370\226\276<%\270\270<R\336\327\274\374\344\200\275\333p\315;e\003z=\033;\367<\034\222\270\274\342\251G=\030\0015\274\363\023\210<uA\207\273\024u2\275p\036A\275\031F7\275\303A/\275\327^H:\322\205U\275\223\353\033\276j!Y\275\206\240\315\274\035\021!=t>\r=\227,\221\274\334\006$\275\026\330\210<\353\307\257<=>\343<\264\023\352\272\223]\307;\017\n\247\274\321\366\016\275\266N=\275[\030\033<1\362\021=\372&\217\275\270t\225=\327\013n\274\362\333|\274<\346\204<\031\005\305\274\331z\225=\333n\030\275j\330\013\275\276q\330\273\344\n\017=\345\305I\275\0263\325<\323\215U=\010\361p\275\264\035\001;\027\017\341\273\217-\324=\230L\003=\212Ck\274]\2525\275]\202\370\274>\333\302\275\351\200\330<\221\014p9\250\366\202;\3730\236< ,\307\274S\217\312;\303\277\320\2742\261\274\274\263\004\344<\217\360\355\274\275\377\350\274\354fC\275\366\031a\2757\362\207<7\377,=\341\302+=Q\260\220\274\002\210^\275[,.=*+\370<1\3053\275\310\360\\\275E\347\316=\253\034I;\227\302\007<;\371\304<\373\021\351=\324\201\231;\377\025e\275r\3636=\360\364\"\274\266\036\314;\247\346\370<m\037\344\275\227-I;\032$\265=8\213\372\270P\324\000=\301\002\033=\255\352\265\274M\016\034<\203.\250\275P\334\031=\315\331\212\273\227\201\273\274\222\027j\274\243\271\023\275o\345K\275e\210\210\275\3459\031\274v\207\226<\336\032\247<\347\264@=f\374\211\273>\323\264\274R\335\027\275\033\005\333\275!\035\265\275>e\303\274O)&\274\010\025\r\275\023QP=\365\000\003\275\374R\333\273\265\364\316<\204\306\300\274\356H\355=X\211W\273,\\1\275L\025\245<\352\327n=\354\263\217\273\313\277\004=2\3350\275\240\3668\275\216\230\234\274\352X~\275\033\311\"<\027\347\201\273\331JO=~\352\254\273\273~J\2744\216\004<JU\362\273\377\200\276</\340,\273\376\037\200=@C\025=\270\275,\274J\300|=\033\235;\274z\020\021=j\321P\274Ta\225\273\271\232\025=~B\n\275\016I\244<7Y\033\273QQX=\007\375\024\275^\326U\274Ou\005\275\253A-\275\234\246\262::j\017\275\200o\352\2733-/\275,\356K=\017w\021\274X\003$<\346\225\177\274]<\005\275\222\004^<\272~\000=cva\275Dj4=\021\"\271=/\335&<h\240\234<}#>=\025\346\036\275\223b0\275>^\217\274J\000\345=]z\223=$\353\375;x\347a=\226uD\274\266\223p=@\227\204\275\335\344H=c.z=\315\351\360<\222\353\315;\367\006\244\274>\350\240\274\334\037\251\275\277\337\254=\205\266\226<\013\253\324\271\'L\021\273\270/\205=\014q\333\273|\325R\274\271\257\003\275~\270\"=\245\360\216\275\301\204\230=(\004\244\271\354N\231=+\2320\274\315\325#\275NC\020=\374G\265\274\001\347*\275t3\301\275\376\005\327\274h<\234\272\\P\025=\250@\226\275\016z\333<\367\323\237=\233.\334\274\231}k\275\273L\t=\374-\244\273\375\237\350:m\177!=\303\326\037<\265g=\275\362W\265=\245c\213\274;\354O=\243\\\253;c\233\r=*\272\252\274kj\260\274\225\033)=Ieo;o\354 <\001\336\370\274\345\226\335\274\211,G=\321y\225\275\364\327\200\275\253\327\370=\360\213\232\275\240\026\311<C\347\223\2757/\315<sa2\275E\334\372;\321\225\253<\3713\262<U\307\232\275\233\002\210;u\227\007=\241\025W\275\341Aq\275\304KG\273j\242\224=\256K4<r\247\235\275\220\350\242\275\306\227\250\275Q\037\206\2749\200j=\020\036|\274\343\256p\275\247F\377\274u*\377<x\007f\2750\311\221<\213\346M\274\034Hy<:\361\003=k\256W=\373\300\350\272,x\005=d`\345<\273\"<\274#2*\275\306\357\313;\377E\252\274$h\200=\366M\203\274O\230\227\275rdy=9\323\r\275\255a\000<cn\303\274\301<\245=\373xZ\275\030,\005=\317\223\360\273\370\340\211\274\323\232\326\275>\0303=\251\002\224;\345\231];\264V\241=%\321\025\275\236\222\030\273\300\025\177<\276<T<\222\202\024=\262\321\r\275\322\356\000\275\351\2413\275}r\330\273\001\234n\274,\240l=\274\200O\273\323\002\r<n\224\355\267`%\013\275RN\331<\375@w\274\215\\+=\247\307\034=\360\027f=\205~l=\320O~<\321\371\345:\326\367\276<\20327<\206\207\n=\321k\002;y\005\010=K\241,\275\236\024\037<e\271\t=\322q\224\273=`\331;\314y\250\274\373\253\276\27377\352\274\377\313\240\275X%==\177\351\033=\026O*\275\010\214\260\273\232p\023=\r\004S=>\245\232;\306\3500\274\330\201\036=\232\222\322<\326*_\273\350%\357<\270\207\237<\257\216^\275\340\266\350\274\313c\032:J\361\010\274\375\247\262=f|\300\274\365\016Q\275A\333\266\273\320A\032=p\217R\275m\266\324\274\247\212A\273\274yf=U\260\030=A\016\357<$\340\200=\263\303\016\274\0364\201\275\313\"\262\275;\336l;\200>\030=Z\364,\275\255\211a\275\023\2178\275o\031\277<9%\221\275\222\177\177\274\245\354\271<\264\331\022\2753\035t<\376\353V;\304\224+\275SLb\275W\326:<\307;K\2747-\t\275\370\326\037\274\215cB\275vm{;\346a \273$\010w<8\0254=*(\375\274\305\236r\272\235\357\261<-\2240\275t\227\275\273\352\032\033\275\024v\206;#O\002=Z\"\031\272-\267\256\274\020\271@\275\031\236\030=\3603(\274\205\027\013=\311\310\007\274\"\271\376<\211+J\275/\244\034\275\304[\\\275\261\207I=\0351\036\275\312_\204\274\267\016\265\275Y\263W\275\374\214==\017\232\237=\304P\216<\257N\205\274\222\004z\275?*\210\274\007:\226\274\225\252\033\275X3\215=\275^\203\275\264\227\372\274\353\034\243\275\\K\200\275W?\234\275\255\3341\274\003\273\204\274\024\240\340\274\305\356\021=3rX\273s\314\014\273\341\312q\275\267\345\266<\313\372\240\271\013\205\207\271}s\006\275\246_\266<K\237p\275\006\251Y\273\376\306\023\274\3747\222\274\201\033\250=\2770\321<\023\304\272<b\260m\274\034\202\326\275\017\3662==\247j\275\366R\212=\301K\352<Z\223\255\275\343M\000<z\365\273\273e\034f=AB8\275\3672 \274\3575g\274(\035\337\274Y\272 \275= \330<\313N!\275\214\363\'\274\374p\304\275\207\302\270=\324\235.<~f\014\273b?\367<\021\'\023=\324\245\317;\253\261\226<7+\032<0\"?\275\3208\002\275K\033\257\275\366\352!\275hbL\275\\\336\356<M\212\333\2755\360\036=p#^\275\326IM=\003\221K\275\225\341#\275\030\256\261=S\006\252\274\335\245!<\007 \271<\230\212&\275\r\005\333=\221\204\306<\302\375\245\275\316\303\245\275\034\366\277\275n\"\373\274\342\225\327;X\331J\275\336\260O\274&t\337\274\237W\177\2750\216\372<\223\364e\272\243\316\323\272\255\017\223\274\305.\264\275~oS\275\301\202+\275rFA\2759+,\275\3730(=\255\354\232=v\231\261\275n\350;=\201\345\212\2757\322t=\246\377\022\275\020\2429\275n\216\303\274\025\362\211<.\3229\275\235c\225;!\304D=v\352\265\275Y\362\355<=\\%\275c\325N=E\367B=\306\201\345\272\376\367E96o\343=\314}\200\275\257\334,\274C\335d\274\305g\024\275\274\237\343;Y\035\305<\336\005\'<\266\016\233\274\246\014\245\273\227\245\n\274\367\003\261\275Y\306\213\274\247\342d\275c\361\205<yJV=i\003\375\275>\211\351\274\036\207\250\274\366\355r\2745a\264<51>\275\001^\262=\212\303\230\273\224\334 \275X\364\022\275l\313\334:\223\241\261\275{\272\277=\270t\226=\213+\033\275-fJ<C\300\236\275*\313\'=\320+\"<X\007\204\275E>\213=\005\237)=\330\366\216;\271\334V\275/\366\014<w\301!\275\037\272\346\270Z$\345\272\235?\377<\363\300\203\275\0008-=\004\303\202=\000\212\244=\263TN=\177.7=\034\213\001\274\323S\343<\177\226\203<\212\217R\275\213\210l=\005\251Q\275\233\311F=pD\021=\010C\016\272\224\313S\275\307<t\275\242)\361<\221\332\r\274\354\225-<\330\032\003<\010\343\"\274\366\036\264\273QU|=v\246\366\273:M\361;\363s\226\275\007\031&=\277\257\255\272\250\032X\275Y%\022\273\345w\232;\333\002\353=\313\337\363\275\335~\270\274n\367\010\275\333\r\355\274a`p<\232\3322\275\251\026.=#@\201\274\032\346\371<\213\261+\273i5/\275\305@\003\275-\005d;\351W\246=\321\352\230\274\023w_=\302[n\274E\0242\275\352\246\007\274\350!0=\010S[\274\033\304\014=\303T\210\275)\002d\275\230\377-=\362\346z\275\024T_<d\022*=\333\267\323\274\317oZ=q\306\305\2746\363=\274\320\361\224<\006/\214\274\006K\361\274\027\242\220<D\253\244<\261\030\202\275]\024\313:\006\221L\275\252\202c\275\010\372\253\275C\2263\275\377\345\013\275\233\350\210=\205^\031\275\365\327\303\274\273\t\362<|R.=\353W)\275\"5n\274\204\237 \275\020N\226;\257\260v=\"\325\222\272\253GE\275V\261\330<\277k\001\275v\226\227\274>\033{\274\010\260\271=\024B\257\275s\262\246\275\321\033\231\274\027\t\331\275f7\"\2755\304C<Z\014\365<`\310\212\272\272u\r<\324}\256\2756S\231\274L\177\236\275\306\037\022\275\252)\266<\241\230\234<\2130l\275\254:\256\274\251\365\340\273\233\223\325;\344\220\304\272\322\305\024\275.JW;\'{\322\273\330\240\222\275\304\245\014=\031\373\311<k+\r\275c\324\252\273\003\273F=\207_\265<M\224\261<\031\303#<\022\027\270\275\037\202\003\275\311\257\312;\342\016\3319\367\354\021\275\033\\W;\217z\332<g7\372\274\024\214\203\275\342z\262;Ku\333<l\330\333\272EOO;|l|\274\007\353\305=49x<E@\225<\363\356p=8u\025=\312\021\302\274\020\315\214\274X\223\022\274U\327:=\232\360:=\362\322\261\275\342\t\224\275WX\014\275iLY<\343\222\222;rAC\275\303\244K\274\314^g\274J\220p;F\350S\275j\263!=\211\'\361\274$\235J\275T}U\274\212\272S=\366\333j\273*K\016<\303\241 =\016\027\266=\336\204\014=Xp\272<\373\322k=\216\202y\272\247O\246\273~q\202=\021s1\275\302x\206\275\255*\304;k [\272\204Z\003=D\323d=4r}\275$\301,=\326g\263<\332\300\363\273%\303\373\274\25187=Y\207\274;\305\362\'\275Fi&=\366:\307\274R(\205\275\n\035p=,\"&=\366+H\275\334\267\243\271\333\274\233<\'\r1=t\267\035=OBP\275!+a\274\326\311\334\274\272\310\201<\276\310\370;\322\177f\275q=M\275\327:w\274\0173\037;M\333l=_\026\033=N\260\203=t1\004<]\301Y=\226\260\006\275IJ\235\275\306F\344<e\263\016<\213S*\275\202~0\275Md\305\275\355\235\333\273\305L>=f\252C\275\016uS<\260X>\275\276\336\326\275\n\213c=\371\237\337\275\330\023\000>)\244\331\274\001\"\016\275\366\300\201\274n\276}=\000{\207<\230Ja;3Z\202;JAH\275\'\267\352\274\276&m=\223\035G\274j2t<\254<$=\031y4=\032g\203\2758r%=N\332\353:\374\n\222\275f\336\"\275\354E}<bB\306=:\r\236=\353\013P=\"X)\273^\204K\275`<\254<a\240\027=\003\322F;\216I\212<c\254\335:Yt\261=\361\000\305\274\2638\223\275\031\032Z\272@\321W\2742K\006\275\246j\234;\314\265\023=>\021\240\275\256\342\306\2745~\251=@v\210\273\2708\334<\007\'\273\275C9\001\275\204\361\240\274f\345\346;\2610o=\2275\322\274\302\315\267\275DiK=i\313\312<\336\026\344<\347\336\313<\342G\254\274!z\342<X3\016\274\201\316\020\273,\264\212\275\335\210\232\275\245\036f\275&\277\277;\214\355-<[\t[=\255\233i\275\342,I==u8=\0142\331<i\355\226<\211\245\311\273)i)\275P$\n=@q2=@\304p\275u\246A\274-9\231\275\234c\236<u\263\203\275\204\312\372<\357Y\347<\371s.=\311\316\366\275\224g\r<\235L\010\274F\263o<K&!\275\261\266\002=\343\357l\275\'OV=\204\306\206=\3740g<8\267)\274&\"2<\245vQ\275\035\251\227<R$\250\274\321\'Y;}\t\267=\322F\032\275\300\337\254<\034U\221\275\362\346+=\367\263\214\275\373\212\226\275\341\352c\273u*\240\275EZ\271<\276\270\276<5\262\027<\222C\014\275;B\272\275\261\305|;@\207\001=\264E\035=}\214\317\274\301V\260;\307xW\274Y\254\022\274\377p\344;\315\016-\275\025\356\325<\204\254\202\275\316\177\223;\240\313\037\275\223&g\274\'kj\274\224\207?=\272U\306<\347\320_=\260\026\253\274S\007y\272\002\231I=7\324X\274\t\253D=%\262g\274\240\376\230\275\036\254\355\274\210\262L\275\316\030&\275\374\022\000;w\t\300<\355\217\017\275\371y\217;\3473\332\274pu\026\275+\300\303=O\300\255\273i\344\000;nq\021=\n\2763\275\314k =[\033\021;?\255!=\243n\262\274\227\233\360<[w\251=pfo\275g~\014\275\231\221\210\273\325\034\254<a\023\203\275P9y=\2527\247\274W\255(\274\025H\201=\276\251\247=\306\002\266\274\217\313\031<\007V\006\275\0173\352<\321\363W=\241[{<\225\305V=\001\rj\275\'-\333\274!\305\236=\306i\014=4\311\347\274\025n\353<`\354\315;\022u(\275\037+ =\2470\352<\202\301\373\274:\347\225\275\360\210U\275\317\023\013=)\332F\275i\313[=\037\361k\275\327\346\004\273\313\352i<o\017\010=\322c\001=\265`\241<q\314\025\275f\177/;t\201<=\227\373\376;\234\256\206=C\r\202\275\261U\237;\307\266\221\275\344\001\242\273\307\361\226<\327\025@<\226\275u\274\213\237\177\275\372\216\311<\021\240\233\275\350O\211\274<\362p=\256\002\253\274\231\024\007=\343\035$<\nL\262<\312\243\233=\3155W\275\305\246\320\274\375/\030=\275`\206=t\304\246\274\347\033\201<\311=\374\272l\213\222<\343>x\274$\000\356<\244c\250\275/-\243:\360a\243=\022\274k\274\2652|<\333\256\020\275\351\231\322\274\344\325L\275Y\253\267<\034\206Z=\037\'#8\352\234\027=?#j\275\037\330\201\274\346*\212=\232\203\375\274\211\254\333\274=iA=d\3245\275X\350I=\212\327R=\365\275X\275\365XE\274+v\004;\034\234\214=1\277>\275\032]\222<9\206\210=\300\\\030=\340Y\253<\303N\275=\014\257b\274\337\3373\275\207=h<\231o\000\275\223d%\275\370}4<%T\322=\315xH<S\360\201<1\271><\354#\234<9\277\215=\201\313\300\274\017\205\"=\014\214\013<7\217%=7\256U\274\222\225\244\275\337n\230=\354O\225<\254g\365\274\201;j\274nN\214=nU\204=e\252o=o\317w=7\003\225\275\310Y\252\274Fb\257\275\300\356t\275\344\203C<>\261s\273\267w\352\275\313%\007=\255FH<\207/\311\274\263{>\274\007\246\240=\271\216\n=\327\261F<\352\000B\275=\237\020=\317\213\014=\370)\250\274=\333\354<(\220\234<M\201E\275\001:\255\275\333%\330\274\014\013\202=\331\234\257\274\224\2417\275\322\211J\275\343R8\275`\272\363\274\007p#\273\302\345\013\275n\026\250=z\350E\275\353\275\264\2753u\265\274 p\014=\242\313\276=)\263:\275L\250\242;e\264\226\272\033\272I=\321-\037=\340(\241\274U%\200=\225\352\226<\334U\266<!a\251=\336 d=\310\346M\275h\325[=#\1778\275\206c\002\275^\376\002<\"\r\343\274\217P4=\307=\245\274\232\216\213=\354\220,<\210\362Y=,ST\275\372\225\321\274\300\026\250\2750\271\211\275\356\037\233;\322\246\230<\313j\323\274A\244\321\272\030A\034\275\035:\325<\232y\271<\024\222\274\274\216c\036\275~)v=\202\257B\274}|\334\274\314\353\277\273\343\243a\274\326\200\033\274\354\376P\275)d\333<\202N\355<\021(Z\274\247+\267\274\024\033&<]P\241\275\243\034x<\2567\366<$\032\005\275,*A\275\365\216\375<\237y\020=\262.{\273\353\2620=\223\261\341\274\2371\225= {\205\275\263C\224=\264Q?=Z>\033\275\201\246\221<\372\276\201:?\016\212<7)\031=X\354+;\311\340s=c\245\014\2758\003\362\273\315\326\016\274.\217\323<q\022\233<\213&\261\2740Jk\274\221[H=Q\"\202\274\261\340\020=\212\270\354\273%\247\236\275~\357o=\\\252\232=Z8\356<,\002\205\275pRa\275\262\005\211\274\026\346:\275\300!}\275\213#\001\275\007)*\273\322*\240;k\335V=:N9=\010\307\033\275]\254q=+\022%\274\214aL\275\213\200\215\272\247\033\320\273\023\270)\274\313\200\212=J\267\022<\365\263^\274p?k\274\272\233\231=`\3608\275y}\231=\302\253\377<\342\350\222:T\033\204\275\225 ?=\352\207\006\275e\363\253\275\343G\225=\322A\215;\035\004)=\352$\250<EiC=g\202\255\274\251\004\350\274\2301&\274\347\000\230<\313\250X;\337\303D=\360J\"\2748\177\340<\244W\217\2751?%=Y\206b=b\376\223\275\\\305\236\274SC!=\005\360\331\2745b\010\275\354\256\212\275\216\036/=b\307\313\273\n\327\232=\010\246e=n\372u\274\222B\006\275\275q\206\2751o\000\2758\0146\275\243E%\273\270\246\200\275\246\255M\275\027\307\341:\001\323\"\274/\226\202\275\016-];W\211\252\274)0Y;\230\262\216=\225\340H\274\277\026\353\274\303\314\352\2734y%\274\007\241\313<\374D+\274DL\013\275\017\373\005;\342\217\334\273\321\017\200\271\262V\001=\255\357\026<G.!=\267-2\274\250._=\365;3=\334\337\213\274;\201\207=\237\213\024=\312\341\336;{?\244<\333\242\200\275\001mI<rsY=/\350\234\2736);\275\025\\h=\231c\226\2757\244\037=\314\006\344\274p\317\207;\207\345\211<\262u\032\275T\266\036\274/\321\025\274y\207\355<K|\034\274\227\r:\275\314\030\311=X\354\036\274\0269\234<\374\372#=\362\343\346<S<\350;A\254H<z\243\206=\311\316\004\274\243\240j<\262\'\360\273D:\210<\033\231\177=\344\204\034\275U||=\rR\324\274E\317\005=$\254y=\032\010\354:\325\242-\275Xj\237<\373\357E;T\235K\273\243 \002:\315\334n<\244\034\240<HK\254=\252\357\020\274\246z$=t\370\244\273\262_\272\275\211>==\rd0\273\351\306\330<\362\'e\275s\247\236<c\336\365<eLh\275I\357\265;>s\250=$)\001\275\003SV=^3\222\275m\004I=\211\360\232\274\200*8;y\354\021\275\235}T\274]\320\000=\037<\022=8\315\217<$\274\006\275\017\020+<W\243Z\267\013\363$=\023\254\350;\000\235[=X\005\033\275\240\0232<n\336/=\206\210r=~>\020\275\'=q=\316\242\254=\316\330\217=\010\310I=\004r\240=\027\350L\274\r8\272<\373\307\247<\253\353\247\275\276X\257<\234\325\225\273\272^V\275S\203\000\275v\007n\274k\210\3109C\032a\275j\320\251\275\267:\243<\nn\023\275B\032\327\274Rr\201<\223\310\"=3\006\033\274W\253\334\274\001\2240\275\345\355\201<v\036~<\275\364\247=SV\034<\367\227\002=`<L;i=\217\275K\332?=0\376K\274f\0321<\342\215\222\274\322\256M;\255\357\302=f\211\212\275\304\314\026=T\010\200\2757\010\214\274e\326?\275\303\351\330\2747\261\022=Eu\014\275\326\307\002=\343\375\024\274\353\333c=\310\327F<}\252\r<\224%\324<\261\005\240\274\372\215\245:V1m=\270:\206=q\032\300\274\261e\323=\263\266\257\275\212\332\205<\232\026\200\275\026\"9\275\257\252\251=\230\001\\=]\310\013\2750\311\231<\013N\t=O\254\327\274\242\212e\2754|\306:\3135\233;\253\375\244=\267\227?=\232\1776\275\202:\214=GB\243=HT\031=\035f2<8\206\351\273 \2500\275\322\'\264<4\263\\\274\366\320\210;V\313\336\2753`#\275\363\260\261=\357\234\307\274D\331\220=\261\211}\274RT\020=8G\232\272\330\336y=\251\324\021\275\367\014\275=\364\324\264\275\221(2\272\210g==\212<\023=\367\270\321\274\344\n_\274\200\201\003<DA\223\275\351\201>\275g\r\315<\353\220D\2752\301\231=\250\215-=\2171r=+\263==\222\317\317\273\221\022V\275\035\255\006\275%\317\323=\332\331\222<I\275+\274\342\322\235<\347M#\275\302\004\010\275\016\234\037=\335\343\343\273\336ag\274L\234\302\274\312a0=\250)p\275-;\035=\034\250\333<\312\177%=b\246\232=\244\225\210\274v\355\227=<\236\t=\344\334\027\275Jf\030=Rx\r\275mj\223<=\3416\274\007\204\210=\324\\u\274\303\177\213\275\272!\033=\252\201\226\274\3279\024\275KK\212=\241\2738=y\357Z\274\033\017M<t8\010=\241\203c\274f/5\275/\034\350\274\0025\177=DT^\274q\315\020=\352K3\275s\330\031=\024\225\234;\246\235\310\274!\365\n\274E\261\200=]<F\275\225H\006\276\242sM=\310\1776\275g!\304\274\351\374\222\273\317+{\275G\327\373<\235\325\310:\314\304\"\275\320wf=/\030\230=$\320\250<`v\333<\273@K\275d\3409\275\330=\"=\272\\\030=\277b?\275\017\264\334\275\357!\334;<+,\275\230/\340\275\201\346\214\274\270^\002\2753Eo\275^\013\202<h\374{\275\021\017+\275\022\212\347\274\017\233\233\274\214\343\220=\311\3716=V\022\003\275\301\031/<H\204\014=\214\230\271<\234\\\221=f\337r<|\265\227\274Z\357[\275#\374C;\324o\314;\267\344\026\275\204\375N\275+\205\304=\324B\216<B)\330<\266\3739\275\205S\261<\303\257\210<\201\r\306=\341mJ<\315r\372\2749\253~<$\240<\274\304\224e\274\265m+:6\2066\275\016\311\207<z\212\213\274R\n\000\273_J\r\2740\205w=G}\252<\211\237\327=\372\014\013\274\204\352$\275\231-j=\202u\005>\030\361\267\275\261\215Y\274Ce\322<\310\377\313\275w\306\372\274m\205\032\275\205\234k\274\251\223\223\274ou\221=[B\013\276D\343\316\272\277\314*\272l\266\020=\333\337`\275\236Z\212<\204+\256<[\3200<\036U|=\036I\321;\237\nM<\262H\203\274\3341\367;\223\233N=\n\217s\275\244I7\275S\276\301<\300;b\274\374\267z\274bY\254<zJ\177=\300\301\247=\217\340\246=\242\315\210\274\235\223\023=\231ZZ\275\352\225j=\005XD=\261\212\2135\372\260\205</\240\r\275\221\n\336<\374\223\221\273t\346\234\274\336Pt\274\034\252\204=\237\375\273\274\014,\237\273\273\210C=\336\003>\2740yf<\246\357\201=\344\025\002\275\240o\261:p\253\212\275\224(f\274\354\320h=;\026\323\275\n\2342=$\217\262=\244!\215=C\302\027;\234\224#\275I.\007\274x\013\023=\210E\002\275B\234]\275k\313\037\275E-U\274C5\020\274\206D\222\275.\332\023\274\342\035\024\275\000h\016\275\320\245\206=@\304V\275\341b$<\337\311\246=r\274\354<\214G\343\273\365n\262\273\371\ni\274\366\t\376<+\010w=\016\325\273\274\275uQ\274\232\223B=\366@t\275\260\261\020<\025L\367\274\373\330\014=\277\003\341=P\031j\274\312s\367;Wq\007=\277?Z=\260;\223\275\254|b=\210|3=\373\237\344\275\241\214i\274\207\262\212\275\253\236\336<\347\341|\275\236\256\341\273c\327\026;-\026\234;\007\277S\274\0210\235=\304X\361<\376@`\2745h\352\274#\253y\273\036 \263=\025)P\273\2732n<\024\264\220=|=\374<\301\306\327<\205E\364<\332\366\233<r\227\323<v\345\362<\357\201\004=\371{y\275\352\226\267=\r\303\261\274\213\363R\275\237.\206\275\211\345\341<6O\201\275\3341\363<\223\340\'\275\020\005Q\275\327\026\021\274{\356U=4Z\303<\2173M\275\325\377\262\272\252O/=\374v\222<%\353\236\274>\311\236\274\305c\304\273l\020J\275n\212==\237\226]=\314\220>\275\204yp<\016=I\275\275N\372\274\024\374\255\275]x\274<\212\215u=\034\3548=\356\355?<Q\242D<h\362\212=\314\367\017\275\300\242\300\275\345\377\330\275^\223\010\275<\250\002\274\362\022;\273D\'\210=b\372*\274\254\027\274\2743V`\275\303\261\022\274\357I\t\275R\360\216<\036\363\267<\014\343\320=\370\305S\274\266\257\252\273\"\207B\275\321ty<0}\252\274\300\300\211<\343p+\2758\026\344\274T?\217\275\222x!\275*=\"<2#\227<\324\026J\275f\313}<\037\223\362:\332[\267<\260?\254\2748YJ=\037F\'\275\217u\224=\006\256R\275\202\002\253\273\006\343\356=I,\361\274\355\245h\274?^w=\342\036\250\275l\315\214\275\265[\250\274\031\211\202\275\035aA\275W\321\027\275\337l\262;\235\215\265;\321\216\371;\210)H=\226\257\320\274\205(\254<\\BM\275\017\223\031\275\224\323\232=\367\373\004\275\376y\211<\035+==\001Dn\274\314\'\263<\340\257\277;[\310H\275\223[@\273{\203u\274\351`\033=\263K\253\272\t\247\016\274/\275C\275\204\262\026\275&-\030;U#!<\014\217\020<\303\323\212\274\364\313\203<v\0051\273\tB\206<\361\340~\274\204UE<\344~\005\275\362\236<\275\334\235\t>C2\031\274\222r\320=x\2423<\3337\214=LE\n=\253\300w\274\315`\351<\2227\224\275\334\265\000\275\343P\311\274\032\252<\275fpf<Y!R\275u\357C=7\235`\274Tw\336\274q\003\002=\212\007Q<\236\261I=\344w\314\274\355\226U\274\237\240\243;\257n\001=\217{\010=9\2434=\257\321\206=\023\346\007\274\221\234#;\030\026\270\275\326\220\247<\203if\275?Op;\345\267\317<;\\\014=\363\3050\274t\206 \275\312\233=<?\211\033=\377\363\377\274q\322\272<\236\262\242=\004T\205=\263Z\341\273j@G\275\373\231\033\275_\360{;\354\341\352;\302a!=\036\260j\275\325\260\017\275\236\350Q=]\214(\273i\013\307<\227n\276\273/\242/=,\346\2328\337\305\370:\237\030*=\033\231\252\274\306US=\221C#=\\\241\354\273JA\010\275\3727\217=\221\\\260\274\270\356\313<\332i[\275U\231y\274\210\234\251<j\260\301=\203\301b<\332\037G\275\217\207\000\2756\263\261<\210%\005\274\320n3=\351\346\232<\201\021E\275|\324\361\274b\213\304<_\327\357;\254\030%\275\234\266\212\275\035\273\317\274\257\022d=V\225\247\275\247\316\236\275\232\202Y=\030\200F=iDR\275\363\264\242\275\027\2239=(\241\253<\017>\017\274\371-\004=\031\350\263\274a\200_=&\357\220<\265\202\n=\024\342\004\274d\356\242=K\020,=\032F\277\274\334\317\032;\302\343\363\272\rR\261\275\230\214\213=@\313\257\275\036}\257\2750 \242\275WY\260=\017\242\332;\363Si\275\000\233T=\336\316\340\275(\371q\274\316\331\t<#\013]\275V\310I\275!N\005=\256\353\214\274TK#<by\315\274k\275\354\273\206Y\343\274\234\226\020\275\370\372b=\230\036\217\274\362\241W\275\320Q\021\275,\237\036<11\026=\235\326\262=\222g\366\274\303\257t\275\202g\370\273\321\223\370\273\244OG\275B\264\303\274ds!\275\270\021=\275\315\317p=\217\307\356\274\352P\027\275;=/\275\330\350%\275r\377\326\273\226\032\255\271k\273U=?\316\316\275R\217@\273;5W=\316:\334\274\272\335\377\274\322\215\331\273\351\027T\275y\030\331=\365\256;=C\354\204=a\374\n;\222\335\\\275m\021f<\034U\365\274\257\3060;\301\005I\275\244^t\274\034l\207=C\314\026\275\337\033T=\'\310\340<\346\251\265\274\021\302\375<\250\271#\275\330\302Y\275\2708\253\274:\250%\274\271X\201=\337\255;\275\326\273{<x\001\227\273\331\361\302<\223\016p\274\273\343\366\2746N\016=P\214\354<\037\022\313\272v\361\341;\234_\210\275\005\272$\275\010\205\327=\273\227*\275\317\264!<\t\316\231\272n\247\223\275?Y\244<\201\301\245\273(g\215<qs\030\275\005\333\003\275\006\026\203=\177q^\275KF-<\210U\363\273\216\254X=\334\363\321<\377dc=\275\013\317\274\177\227\027=\344\367r<\366\240\370<\214TG\274\220\246\005=g\335;\275\323f\000\275\353~\324<\331X\322<3\357\330<c\366+;\232F\230<\306+`=S\342\314<\215\322\205\275\007\337\363=\022\211\331\275\024\024F=C\334\'\274\235\205@=\225\311f\271JzA=\224\376\001>\3176z\274\227\371f\275*\210\354\273\334\370J\275]\201\320<2\257s\275\022\221\t=\375=\276<\236s\177=\311\226y=\341\273\022=9R\340\273\276\371M;\360.\205<r1\235<\270\346\236\272\224Z<\275l\265\304\274\210\223\356\274\3637\002=\277\336\014\274\323HE=\311Z\260\274o\201\014<\326X-<\'\n\225\274\222\256\327\2736\230\253<&e\204=\037\017+<u\001O=\n\231r=\036S\231=\227Se\274\244\017\002\275\331\337>\275|NO=A\022\265\273p#\370;\253\223Q<Y\n\002>,\360u\274\256\303q\274U$b\274\010jw<\367\270y=\216D#\275\021\2668\275\202&\260<\227\033{\274|\272\013=W2\256\275s9\353\274c\372\034\275\211\352\272=\217\'\317<4-\010\275\036\253_\275m\025\300\271nx\351\274}Y\277\274\0040\223\275\220 \217=dyT=\334\326\014=vlA=\227a\253;g\367\321=\321\375G\275Y\365\236<\246]\205;\006\010m\275s8\017>\337M\277=>\2454\275\353F\343<\311z\326<\001\345\340\274\005\222_=i\373\210\274\261:1\275\272\0106\274a$j=H9\232\275\031\260p\275\300\342\202=\026\273\032;\014\250\237\274\254\237\020\274\305\342\223\275\351\254\337\274\002\2033\275\261@\r=\223l\250=\234\2223\275p$\231\274V\216\364<\360\223T\274S\222V\275s\377\250\274G\315(=m\206%=9\260K<\333\366\367;\241cp<\273t\272\274\331\263y\275\211\263k\274\255J\264\274\245|\004\275\302>\300\274`k\204=\353\366\235\275\245M\334\273\263wc\275A\264\252\274Q\312T=}k\256\274K_\372\274S\361\025\273\t\323\220<3\333\245\274\275\315\374\273\356\211\005\275\'\211\221<\370Xm=i\263L;\374\277]=Ni\330\274!`\206\274\311\232\031=`^\327<\237\222Y\275\301\367u=]\000\374\273\232r\333<\221\033l\274h\006\340;7\231\201\273\216g\202=\231w_:\225v\220\274\206\222\302<\'\325\307<c\tS\2755f\r=\200\304\000::\020@=\351\210\333;\024.\261\273\3060\250<\0039\220\274\364,o\274\310k\036=\307\256\334;\213b\346\274d\013\320:\310\262#\275\010-{=\362\363\243\274\000\252)=\260w\373<G9\017\275\260Ph=W\212\366\274J\3243=\261\304\002=.\004\243\274(T\212<\311\335\246\272\031\3304=\315\257\226=9F{\274\353\r\304;i\311\'=\224\321\342<\302\t\350=?\202 \275E\206%\275\307\335[\272%\3642<\'[\010\276jB\335\274\003a\031<n\234\271;\013\313\n\275woU\274\260\342\025=3\2207;\346\002\210\274C\313\214\274\344\250\226\274\242kp<Oc-<\320k\217\275/~\004\273 \313R\274<\352O=\\\031\306\274Cv\337<\351\320\217=\036\212\315;&\244\357<\031iR\275\004\233{=1q\014\273\304\373~<\255\306\\=\332\313\300=\211\003d<r\000Y\2731/\353<\'\224\353<eX_<`O\277\274\341\260\363\274\037V\021\274\371\301\260=\000\205D\275\314\275\333\272\377\342\245\272\256\233.;\320L\245=\311+\203\273\306E\313\275l\256\273:6\266\003\275Y\t\325;A\234r=\021\320\001<\026Qg\273\366\244\313<C\237\007\272\243\001^\274\236Ai\274\305[3<\24559<\035\\u\275\216\373\232\275\221\253\223;m3\200=\261\"\000\275W\003\273<}u\333<\'\332\207\275\343\351\325<\303\315\262\275\0050\024\274A\370#=f\034\010=\314\214-=\212\000\353<\276\226\004\274M\337\354<\351\260\327\275\321\320\232=\265\316Y<\035\316/=\'\307J\2756\367\372\274\"\336\220\275sz\312=\260\312\227=x\250P<\250k\035\275\314\014\310=$Q6=\252\344\356<\360\217p<\202\233\002=\317\2476=\r8\332\274e\335\366=\222\366T<\201\216\323\274\203>\027;(K\036=Q\027\265=\325T*\275\345[~<\316\037s\274-\231\357\274j}\320=\335\200)\275x]\255<V\373T<\214S\225\275\257.\255\274\276t\r\274\340f\200\275\206\330\022=\031\2550<j\020\242<lO?<h3G=,\2769\274\026\351\332<Z\210\325\273\212L\323<\276\223\226\275\261\022\205=g;.\275\366:\224\275\277\327\245\274F\nS=6\003\027=\033r0=;}i<\345\017J=\217\216\001\273\370\016k\274\373B\257<\014\370\243=v\260\262\275\t\007\014\275\321\310\234<\372\320&\275\242\367\377<c\204\223\274\345;\004;\363X\200\275\020\\\021=]pE=\224\372c\274\333\031\031<\220\025\203\271|u\231;\r^\212\274l\223\"\2754jl\274^\220o\275\033\034\'=\357\307\211\275S\251n=\350\300\336\274\255\304m;\034\376\316<\250t\377\274<\255\001<\2627\251<=4\014=\0105\347\274p\234\343<\002\307>=/\n#\275x,\250=\020\263\354\274\227\221%\275\005\033\006<\322\353\354;\323\346\242=\333\340&=\272\342D<\201\332p=G\306\000\275\210\2057\275#\214\306\274L\270I<\240\371C=\345\346\250\274\0131\347=\260\264\304\274it\t<\226I\031=\353\325\215\275\003:\255=\033\203\333\274\301Y\207=\022c\022=aM\211\273\262\342:<O\226\004\272r\351T=\236\003\313\274\013\304x\275\002\372\344\274xMO;\321\256\310=\354Wq=B\361\201\2752,\331\273\303\334\335=\345\324M\274\200M\326\272\246\270\177\273\314\356;=X\343\024\275^\247[<\n[\263:bd\224:\221t\022=\260N/\275\0044\313\274&\235p=\264\213q;\255]\234<\\\333\351\273\216-\024=E\251\316<\366\323\001\275T\252<=\306\303<=;\235<\275\267\331\006\274\336x\321\274\241\261\007=\261\311v=t_\021={\377\374<\014\327_=\374\304\212<\355\014]=\233\306\251\274w\364\227=\265E\246\275\342\203\006=\213\2749=Ajy;\006;\217<>\303\255\274\247\263\206\273\374\337\231\273\232\217\'\275\365\236\201<\323\222*\2753\353^=\227\257\345\274uC\312=~\0146=\372\314\215\274\311\351\240\275\225\355}=\242P\236\274.\005y<N\030p\275)O\350=\237\201\032=43\332<\227\362\267=\035\237\370<\340\210\344\274\316\361/\274\237\301K=\244\367A\275u}m\274\212\"\031\275k\273\035\274~\251V;\025%7<\204\275I=\226\232\\=\035%\216<oW\211\274\026\315\366<gn\360<\274\244\204\273\347\251\370\275\245\311\345\274&+\340\2749h\t=\020J\276:\375\232\\\274\3348\033=pI<\275\203\232\241\2742X\360\274>z\342\273W~7<\"\016J<\303\3538\275\325`\004<\206\244E\275D\347\332\274Ql\215=\252\233\213\275\007m\206\274\177\311\352<\014rB<\007\220\030<&|\354\273R\344\376<]\002\202\274\303\002)\275V\252d=\351}5</\2228\275L^\376<|\366\241<\024N\216\274\004\202Z=\361\243\251\275\304\374F\275\2715\200=X\216l=2\035\347\273r~\303\274\016\357\256\275\274`<=\003\\j:b\272\307\275\207E\227=\307\214~;}\022s\275\303j\214\275I~\311\275h\211L\273\013\030N\275\223\214\267\274ps\365\272\3048\350\274>\t\212;\r\377B<\263]\204;\375\001\023=\220\367\035\275v\367\200\275G\331\232\274[\343\220\275\202\320\274=1R\275\274\254|\322\273\274\250\037=\230\227\005\275w\332>=\242l\360\272\274\346\331\275A\031\212=\235\266.\274\2737\336\274\277\247\300=\355\003\237\275m\260\302\2757\326\035\275\353\0179=\321\355\232\274\375\350\340<\264\007?<]\320\267<\332F\007=\201\233~\275\364\t\227\271\215\243\003\275@\207\'\275\315\256\206<\351\010A=\031\272\177<c\346\200\275tN\016=K\231\241=\251|\031\275\310\371\227\273b8\033=\230\326X;\021\255,<\202\204-=D\016 =lM\257<\344>\034=j\036\245\274\346\336e=\215y\211=\316#\301<\027G\221<H\366^=\272\326\311=\216\316!\274\2349b\275_\271\252<\361<?\274\010\277<:\240\275\200\275U\031\013\274.\242\251<\272\365f\275\374Np<\302\355\257<x\334\211\275\363\203\235\274{\231p\275d\361\342<Pj_=\337\301&\2748\234q\274\256D3\275b\334R=3\263\233\274\373\362u\274nt\360:\2009\373<\265\204\207\274v8\227\273/\000F\275\201\274 =\334\021\201=x\323\005>-U@\274\304\225\372;P\3453\275\336\256X\274\350\336_=\354\315\'\275\032\025j=1\026\222=\031\277\034<\245\235\230\275\306\264\014\275w\211\025=\245\227\306\272\303\326\004<;$b=\007\202\211\275[\263%=\3073\276=\344\266\262\274C\337p<\240w\377\275\262\311\3038%\017\024\274\000$[\2742@\351\274\373TA\275k\014*\275i\3741\275\312\343X=\374g\304<\252@\'<x\227=\275\017\241\031=\022\335_=`%\030=\320\210\326<fp\324\275K\'T\274H\217\270=\362\215F\274\230S\\\274&}\210\274\345\330\204=\316\267^\275(:2=QX\226\274\2579\213\275\224\266+\275\034\302\224<\355\266\364\273YQ\373\274\224\026\310<\252\305\340\274\007\300\325\274\305\026\276\274\223\305\014\275o\276$\275\333C\206<\216pY<\335s\310\275g\363g=\320\201V\275G\302\211<>%\347\274\213\324\311<\3745m=M&\210<G:\026\275\207\205\316\273\026\213\004\274\0332n\274\377\006\004=\"^\206=w\332m\275\362\267\342<b L=\356\207\326\274\001\340Y\273\t\341\354;\216\t\246=\225\033\216\275\377\237\202\274^\002\267\274w\006\031\275\374\334H\275[(\215=[\242\314\275\341\313\210\275p\300\274\274\333\306\312<^\375\261\274\276\202\016>W\316\232\274\313bn9$\345S==\'\203=r\236n\273\001^-\274\206\0105\275^K$\275[\262\330<\214\220\240\2746\320\211=\344\376\264<\3313^\274\261\013j\275\nq\324\274V\344\227=RhB=\205>O<x\374\217\273\237\201z\275\273e\212\275j`\277<G\317\"\275<\326\370\273\025\226\317\275\244\2400\275o\314\301\275\n\033\232\275\244\315|\274\330j\264\274t\206\227<M\341\314\275\252Q\010\274\212>\335\274 \250\304< \207\337<\002*?=\217k\r=\310\270\263<\206\002n=|\266\274\274\372\221H=\246\010w=\344\016\222\275\337\243\345\2744\3118<\025\273E\275\234l\336<i\235S\274l\202$=;\252\242\273\001\2112\274&F%=(\307\214\275y?7\274a\2016=\005\3049\275ZT]\275\253\342\367:\246D\337\274\366\356@;]\025\t\274\347@\017=YlB\275\316\0362=\177\337\350<@\200=\275I\235\330<\226\006\371<\261\303U\275<@D=P\005\350=\002\362\026=\005i\246\275k\360Y<:\310\317\273\177g/=\225\034\361\273\033\235n\275\r+`=uS\004;\302u\361:\352[\334\272\256`\273\274\230j\020=d\365\n\275\320\212\217\275\341Nv\275I\215\217<&\210\351<\273g\316<\363\270\322=\214GW\273\234PH=&N\024=\332]\314\273_\217&:\211\215\311\274\257\201@\275-\327\260<\317T\337;\220\255:\27487L\275\346G\025=O\367\020\275\362<\330;\303OH;{*\314;n\356j=\340\\\232;N\374\027<\027A+\274~X\223=\362\303;\275P4\010\275\343\340\276;\371\010\341\274 -\017\275\240\001\026=\241\234\241\2749\372]=E\t\016=\327<\242<Mi\014\275\317Zq\273\364{\366\274~d)=\276{\177\275\254\226\010=\345\332\007<`\241\035=\033\201/=Z#\020\274\311\002\037\274V~\006\275!\027\220=@\224l<\031\212,\274>\311\t\276X\263\257\275CT7=\3500\236<\274\313\307<N\304m\275\260\022\025=Mw|\275\370\267y=\274\261\377<A\355\201\274R\334T=\331\257\034\274\262{\222\275\014>\361<\233\223R=\266c\262\275O\204\004<\000\035 =\315\317-\273i\262/\275+b\223\274\003\006\354<\203\252P\275Hh\360\274\222\333\024<<+\244<\002\014\022= ]b\275\256\270\'\275\022.N\275\250\003\325\273\203qG\275J\224\376\274\026\261\303\274\314\266\247\275\371\374\007=q\277\273=\023j\341\274\227s\264\275v`\017=\006\257\177\275\207\254\233=J\236\265=\337\022\306=\211cm\275\355\017>\273p\343@:\014\346\317=\357v\332\275\205\005\344<J\355t\273\0272P<\241\327\t=\306\343\003\275+\233N=\255J\377\273z\254\216=\261\335<<kb\204;\203\225\212\274\236\244x\275\365c\036\275\214\212!=(xR<\326.\324<\211\340\372<@}\217\275\027\374\020\274LS\312\274\242\225#\275\345-\332\273v\252\207\274\340\367%\275\240+S=RF\336;f\365L<=\275\006=\201\343,\275\304 Q\274\314\207\217=FD\005\275\264\320\245<\2545\220\274|\331\344<_\305\343<\344\025\263<D\256\\<\362\"2;\013[z\275\313\236\372<\213 \032<Z\177\327\274\365,o\274\316\034\r=\314\340\022\275=1\220;\235\016\301<\3049\000\274+`\234;\021@\360\273x\n\004=\006@\032\2758\025\013\275*\353\273:\313\340\274=\212\257\237\274\347\364\302\274O\037H\273A\222x;\004\340m=EF\001;I\253D;\260\n\\\275{\021\346\273\327\313\377;\016\210\255=__T\275\341n\273;>\254\n;,\232\252;Pe\"=xG\222\274\317\330g=!\006\215\2750z\265<\352%\246\274_\360\246\274<\r2\275BO\030\275\265\024\266=A\370\002\275\2668\215;\220\r\354\274\2344\\\275fB\n=]q\342\274\200\265\202=>)-=\014\3703\275d\315\223\274\336\314a\272b\200\375\273,`3<\303\313P=&u\3378+a>=\250\341\266\273\355\367\232\274\212\276\261<R\300\331\274\333E\304\274I\026+=6l\360<E\032E=\206KC\274e\033\245<\352\037\004=\247\246\237=A\000N\274\231\034\017\275i\357\n=j\n\206\275\270=\036\272k\237x\275\032\353\217<(\\z<\201U4\273R\227m\274\220\277\036\275\345R\333\275\212\226\037\274YC\237\275iJ\371<_\201\221=\345\007\275<\332y_\274\014)J\275\300a\247<\254\265\215\274S\201\000;\305Q!=w\241\275<\215r@\274\327Qq\275\'\301\202<\244\201\177=\257\251b\274\226\030B;ypN;|\362\016\276\364\361,<!e\003\275\220I\035\275\005#h=oT3\275..\232\274\365\346V=\315\242u=I\355\033\275z\372\023=\246\362H<\376\023\241=[\366\010=i\347\251<\264\3702\275\001\035\037\275\351\244\324;a\340\265\274J\266\002<\263\265\014=\335\223\322\274\254\251a\273)Z\274<~\303U\275O\220\300<}\016\225\274\035\202\027=\300\254\223;sq\034;\376\205\214\274L\257\237<\220\031\324={\257\017=6-\020=\0051\315\275\032\220J<\344\244\204<\370\222\350\272\3064\321\275,\340\201\275=\357\333<M\262\243\275\275\360\n\273\351\254R\274\0277\277\274c\306\023\274}]\030\275\363\321\321\273\377\377\230\275\216G\224\274\036z\344\274\235\205L\275\371\313,\275\364\377\232\275r\321\r\275@\320D=\002\201[\275\267\272\301<\357\030\330;\242\252q\2745>\217=\021 e\274XN\370\275\353\001\017<\264\376H\275\255\355_\275\360e\207=\376n\367\274\022\342\004<\'\247P<)\036\215\275\244\226\203\275\217\310\271\272\374\007\325=\244\020~;\252\022\247<U4\246\273\242\204b=\250]\300\274\264\234)\275\260,j\275?\037\314=\213,c\275\305\342\215\275\312xJ=,\312\017<?f\227=\362TE\275X7\250=u\303W\274\354+ \276Gv\257;\316<\327\274\250\301\317;\342=\226\274\347\342\247\274\345\252\236\275\030\010y\275\352u\271\274`\221\004\275\2153\267\275O\342\213<\227Lz\275\2554\361\274i\245~=\225\276@=\205\271F\274j\347\276=b2\214;\347Fe\275&\017x\274B|\347\275Y4X=p\035\027\276\327\r\347<\205\365\207=\340\300\271=\334sH\273\351pv=K\313=\275\343\264~\275\\\374\371<\231\221\222=\271\225\374;X\221\034=\201:\022=\353\327C<\310_n\275\253\271\300\274A.f\274\"\345\034\275\264\245o\275\033\261f;\273\ts<\365\n\311;\023\267\212\274\031\325<\275_3(\275\026Y\322\273\233<P<Z\351\212\274\201\"\021\275L\3347\274\335\342\315;\242\244w\274\333J-=\220\2776;\236\370%\275\230\246n=\373\240\203=\337N\340<\356D\270\275Y\004\006=pc\"\275M\377\252\275\021\365\302\272G\001\207=\262\020\241\275?\247\341\274\022\357\'\275X\027>=\214\031\276\275\347\026S\2746\234L\274\216\356\t=\007G\020\275\336\220 \275,\022\361\274OW\324\274\317\033\312\274]5*=f\272\205\274\217\361\273\274\321\340\365;w\014\243\274\370#\001=\317\002\211\275\\\236\221\274\272\275E\274\356\231\225=,\246\032\275M$\233=2]\211<\007{\001\274%@\021\274%c\245\274wWw\275\212\340\336<2I\n\275\314v\'\275f\262O<\033S\001\274\037\363\257;\270\224><\254\3409\275\245\036\246=J\212Q\275iB\247\274\030*\200=Z\352\206\274\321\005\377\274\336\305\305<\364\361?=?\266\204\272\021\205\201<\223S\023\275\241\345\005=\264\345\021\275o\223\037=\263C\304;\027\340\215\274d\253h=\017\363\200=\276J\302<^\3712\275\034\032\305<B\231e\275&\201\327<yy\200=2>\'\273\222\006\266\272\311\323\2449\272^0\274\314\014\301\275\014y@;\261\354\206\275\306\372\242\275F\177Y=\213\006\221\274\226\327Z\275:\0270;\236\2546\275\257\304k\274]\337\277=\342\333\272=[\017S\274\215(\037\275D\336\263\274\267\006\206;\260:\214=\311\002\243<\352\375\343<`\230\274\272\311\364\223\274\2650\t\274\274\202:\2750\377&\275\264\225\005=Z\223\224<\366\304\024=\266\357\203\274\317\255n\275\341O2\274\345Gh<\324a\246<\334\010\035\275\000_\003<\305v;\275\225\007\001=\357\312\336\274)*\031\271\366E\036<\265o\325<\356\323(\274\264\311*<\220\267\033=|\007L\274\361v7=\246\272\030=XLY\274\351\260\200\275\236)\377\274\021\230\332\274\273P\303\274\225Fl\274R\203f\275x+:<\017\275\361<\226\331z\274\205P\314\2746\223\275\273\303\276\021=|\320O=\3545\363\273\005|D=\352*|<\026\253\004=\024p\230<\251\024_\275[\214[=\301\320\035\275\237\025`\273h\024i<X\331\002\275mp\017\274\345\007\253<\226\006\221;\0328\020=\316\272\023=\270#\215<-X\214=\016\200\312\272\335x=\274)o@\275\333\0221\275\033\316$=\023\216\031\273\212\346\252:\274H\024<J?\263\274G\"\206<\341\177\260;\323\314e=E9*=\355\025\035=U\361\225=\344\0357<\203\370\037=\322\313s<\267\016 \275`\345\203<-\016;=\3401m\273\017\370H=v\\m\273l-\265=\242\2705<\324\364E\275O\220\n=\347~\211\275Nb\217:\304[F\271\224z\251<\245\366c\275\320e\310=\201r\270=sB\303\273\023\204\201\275t\2026;8\265d\274\243\\\321\275\254-\203=)4\311\275#b\300<\316-\022\275\320y~<}$\'=\270\244\314=l\034\345\272\205\240\360<\224\207\231\273B\254\376\274G\374\217<A\230B;\344\300\340<\377\006\002\275\332\246&<`\272N<\245fq;\331\231w\275\007\241$\275\276<\2629O\303L=\376|\003=s!\264\273;I\226\274\270\005\226\275\301{E\275\034)\267\274\352\220\016\275R\034\266<U\246\354\274\270\274\237\274C>\037<\351a\031=)g^;\3137R\274\014ii=5\022W\273\266\366\206<i\331\016=\277Y\220<\327P\203\275@#\036<k8\366\273\320\2065;\201Wf;\212\245x\275\340\'\206\274\302\240\375\272\356}\022=\211\315\237=]\247x;\353ve;\370\331g\2756\326\001\274\327\310J\275\177)\234\275\02727=\251\303\230\274&\207\252;\022fM\275R\031\227\274\263\333]\275\364\275\303<\002\241\254\274d9;=\377\r\270;d\207\221\274 \205`=Cp\231\273s\334\330<\376\002\236=\177e\325\273\205Jh9\363\231\331\2747\334\262;\260\215\235\273B\262\215=\026\265\"\274\206\372\222<=\345\245;\226\263\006\275{\203G\275\350\251\360\274\221\t\275=\335f\007\275\212\317D\275\026\313\\\275j;\356<\027\301W=\337$\222;7\333\367\274\212\344\367<\332\301.\275\td\002=\275k\032=\271\310&<\205\306F\274\034\311\251\275\204\371\216=\356\362\034=\212qG=h\341\302\274\317Bb\273q \247\274<\275Z\274o\321);\324\230S=\323\315D<\337m\355\274k\271\255;A:\340\274k\325\264<\014\337\345=\215v\301<`H7\275,k\013\276\033\250\234\274v\223\031\275\006GI=K\216==#5\302<>\247\301\275\010\241p\275\326i[= \374\016\274\266I\350<\371\025\204<\205\320\307\274b\331\317=\262\351\302\274\270=\313;\3239\351\267Je\003\274\320\331\005=\225\025\353\274_5\010=\247\031\250;\226\307q\274\003\267\300\274\200\265\231\274\216\007\235<\027\305\305<\177I?\275\2200\\\273R\210F=k\363@=\035#\017\275\003\344\t=\2063\351\273\267\t0\275\007OS<\351\357\233\274\357\037\332<1\221\024\275\371\330N=k\373R\275K=0;D\216E\273\273:\340\2747\026\214\275\257lM\275\002\027\226<\000ZU\275\213\207\350;\214kN;\363~H=c|P\2752\322O\275\270\352D\275\236>\374<S\362\r=\343z}\274\262\254\"\274H\363\240=\370\205\250<o{\312<-\2647=X\241\374\273\204\253\232\274n-\270=\036:\233\2732j\322;\315\214\037<J\233!=\322\227\213=\314 \266\273;\256\225\274n \010\275\244\267)<\324!\020\274i\206\374\273:\331\347\275\034\304\226=\276Z^\275=\352\372\274\223\311\335\274R\027h\275\200=x\275\307%_=\243\031\276\274m\310\253\274\347\364o\275\002K\r\276\271\230%<\030\'\273=\324OC<\334\340\311=\276L\031\274\231\023\315\275\001iV<\316@V=.\313\245=f\260/\275\252pt\275\306\234\372<a\350\276<\347_\255=1\366\237=\255\361\024\272l\301Y=\330^\305;q#\300<\303\023b;\224A/=\376\351\224=\363\200A9_l\271\274Kok=\313\350\032<\360\365B\275\000\332-=\224\002[<2\255\331=\246\375\202;\350\314B\275\266\3248\275\225\3057=\201?}<\231\036\304<\022\017c\275/\347\373<2\316\201=\021\313\210<\004\030\364\274amh<E\371/\274\033\301\226\275\032^-\274\014\036:<\277\303\240\274\357u{\275x\027\023;4\365\221=F\226%=\244t}\273\316 \026=\376s\014\275\330\232Q\275\242\336w\275\272\204\222\274\325\273\013<\217K\205=G\274\364\274-X\251<\3116A<\351\252\271=4\271\241\275\262~\362\274\250\247\003\274\304M\257<\220m\315\273%\230\243<\202]\034=\3548l\275Y\377\027\274\232\255\263<Ya\211\274\317\034\270<q\276S=y\206\016;E\'V:fmM\275\262w#\275]\217F=K\033\225\275\022\267\215\274\335\354\253<\237Q\315=\324\001\026\2753g0\275\272@O\275\033\223\353;@\301\344\273\275Q\221\275\001\301K=\003\351\240\274\276m\302\2733\212\205=\nB\272<\355\376\033\275Xxr\2738\341B\274q\335]\274ki_\275m\227\227=]\335\306\274\362S\251=\3661\212;&\"\254;Ac\304\274\345\016\342<\013\366>=\325\323\300=\353\236\271\274]\031\006==\335C\274\366\304\257\274\374\304M\274\006\257\230\275x]U=\312\315\245<\207%g\275U\313#\274\344\2209\275\355W\360\274$\351,<\216\312\354;\220\274\222;y\021\200\273}MQ\275S;\320<\207\274>\275\0272\216\2756\232-\274\017\266?=\234\207&\274\220Q(=_n\242=\\gn=\201\372K\273q\034\325\272\002\'p\2757\247\023;\210\330\026<\236,\014\275I\006\203<\334=\\=\005\265\310\274Y\265\223=zK\025\273_)^=\270\327\"=\267<\246\274H:!<6\274\233\275>~\331\273\331\335]=\344\322\030\274\033)\274\274\270\343\027<OU\344\273~=8=\r\263\307=Ul\230\274\010\226\212=&\2123=B\201\n=\"A.\275Do\326\273\334\246I=?(\335\274=\317\270\275$\006\273\274\273\213h\274\032\307\255: \357\337<\263\217r\274\010\201\r\274}\334\256\272\203\203^\275o\t\031=\262\000\232\274\314 \330\274P~~\273\353y\221\273B\342\231<\253\345\344\275S\223\220=8\265\021\274\334\330!=8\343\211<o\212\255\274\236\230C\275\301e\n\275E\n<\275\362\336\255<\276\035%\275\332\026\2249\376>\347;\320\030\341;+,C=\313?\376\273\017\007\206=g\365 \275\335\275\232\273\021\367\033=\371\3302<\013I\007=\032L+<\032p\r\274\345\014\033\275\231!\274<%t\260\274\235\331\231=\351\037b\275\352\251\370<\351\017Z=\361\026\201\274\034\253$=\311TK=\027\311 \275\005\033\002\275nq\037<\376\210g=o\305\r<\236e\252\274\010\203U=\301UC>\010\352q<.C\340<Y\006\352\274\031\377\216\275\035\246\026=l\352B=WB\300\274\352\"\273=|\345\324<mM\367<\243\005c=\234\016\371<\037c\216;\340#\032\275\332%\203\274\365\013\356\275f%\013=\331\232)\275{\2522=\371\257\200<h\302\266\274Pf0=\241\"|=\324@\230;\200\352s\275\005+\005\273k>v\274\\#k;\322\360(\275\216>\303\275\347\366@=d\201\342\274\tX8\275S\360\333\274\251YV=z3e\273D\272?=\034PF=Z\313\366<\216\324q\275\016\344\\=G\365`<\360\326\324\274p\275h\275\224\002\177\273\023\250\315=\253J\261\275\347\026d=\342\264*\275\247\2628=\253#\346\274k\351\237\275`5\203\275\220\241F=a\351\207<}\345\244\273\010\017\000=\020!\353<\347\300Y=\306\273\237\273^\202$\275\367\2313=1\332\340<\237\2450<\352^\025\274\322\202\307\272\020l\307;\rw\226<\277E\377\272vP\034=\204|\016=K&K=]\265\n\274\276\335\303\275\203\245\235\274\n\372&=\362\375\364<\232\0134=\214k\257=Z\245\256\274\261\021\250\275\366\242P=\366\260\313\2708I+=\234\310c\275\'\347\031=x\246#=\322T\221=\t\205\210\273{\365\305<\n\320\226<\001\355\235:Jlh\275\370GF=\347NN<\326\334\030=\216\330\207\273\365t&=\254v\023\275\213\377\353<5\033\030\2759\254\322;\270\004\202=\001;\026>E\324\005=\237\346\000\275\032Um\274N\225^<\345S\215\275\314\216L=\260J\361\274\355\025p=/\324/=\206u\035=\253\177\330\274\307\361\313\274m<\r\275\303\016\324\273y\305\270\274Z-+=\340\272i\275\007\357\006\275\3221\'=fs\035=&P\342\273\375\355\205<x\215o=\3442\243\275uz-\274\000\341Z\275\231i!\275\247y.=\244\366\032\275=\202\002=M\213\360\274`\3751=\030\204\302\274\206(\210=\203X\202=-\361j<\353Mm\275\005\266\276\274\310\215\006=\213w\247\274\376\035\034\275\257Z\222\274\035\021\365\273\003A\234\275\256\223*<R\247\252<\010\376\345\274\2513\351<\347\016\357;\357\266S=G\022\030\274+\271\000=pV\211\274?\317\200\2739\307+\275\275=\236<\030\020^\275J\3729\275\022L\215<P5y\2725t-\274\226\360\206\274\223i\023=+C\006\274\250p\364<\354\340\264\274\335`\371;\302\323\212;\376\232\231<\346n.\275\013\0142<\020\373g\274a\323\245<4T\200<\267\267\276\275\014\244\315\273\374\260\036\275\010\256\207\275\007\262\271\273\'\372\225<\226\201\371\274w\3061\275\035w\207\274\024K\250<~% =y\003\241=\200\374\"<\0202\250\273\347+\244\273l\201\212\275pv\030=gx\211\274\030\302\025=B\237d<\315!\226=\305\r\230=\030N/\2758\330\235\275@\376h:\177\355\026\2751\005\221\273\255n\236\274\031\330\342=\'\252\310<@\033\330\274DF<\274a``\275X\224M=1\037\365\274<\006g\275@\304\223=\330an\275q\2043=\023\002g<\257\362\260\273\324\341M\275\370\215\236\274\272\014\371\272D\316\036\275)\204\242=Y[\226=\037\255\006\274\014\203\342<u!\005\275\210=\323\273YQ\212<\315,g=)\332V<1\344\224;\353\207\326\274e/\023\275\230\234\016<\203\262\244\274\207\366\323<h\353\210\275\325q\247;F)M\275\361\223)\276Y\201\221\272\r;\n=+\345\374<\0362#=\202b4\267\022\232\220<@\201\351\273]\245D\273\237;\334=\2448\227\275\rN\014\275\244\224\363;\310mk=F\314f=\315\361\332\275\264p\025=\274\355>\275\337\\S<r^\023=\342w\310;D/\325<\006g\275<I\207\327\274\315\240\001\275p\310\251<\035\223\325\274kh\314=\003\3335;\204\223\326\274\237\033\311\274\321u\223\274?\'\234<\263\241\275\275?y\n=\272}\030=,\204;<y\230\315=\373\270f\274\010\233\367<\3616\034\275\201=\240\275l\330\322:\211~\221=\340\246G\275\344\236\323\275\340k\220\275\257\'L\275ie\254<-m\337\275/>e=\251\003\300\274ZX}\274\247\241\372<\231\373\t\275W\226\314;\330^\202\273r\022\212\275=Y\237<\023\235M\273\276\270\201\2740\246\370\274\016]\030=EMP\275\252\037\225\273l\251d=\263\273\370\273U\353\036\275k\021\202\275vHC\275\352\314\306=\221B\200\274\234\226\330;kF\251\273\276\361\002<&Cv=\373\2172<\300\322\230\274\200\235/=M\3569=a\246\375<\264\032E<\220\013\322\275v\273\037=\372c\315\274&^\031=\354j\242\275\255\027\230<\210\353\230<\\\337\275<\023\266h:u]\212\275u\362N\274r9\373<Y\030M\275\351?\253<\304$\322\274n<\221:\003\235\016=m0h\275\021u\003\275\357,\177=\360\367\226=\323O$<kVx\274\216\245\355\274UE\330=\272\t\321\273I\236\203<)\264\210\275%\002\345<\t\250\374<6!\022\274\244_5\275\217.k\275\362\221\301\274\267H\'\274E\364\323\274G\316!<35]<#\263\034\275\307r\324\2736\025?=\034\372\027\274\330nU;\245w,=%\224\204\274[\265\330<B;\201\275\355Oz\274[ J<e;\034=R\376\236\275\341\266\202\274M;#<\333\221!=\224\201C=rL\330<\342\235\227\275\275`\207=!\242y\274\301\237\260<\376\310\240=\010<J=\323\305\252\274R\362\371\273@*\257<F\355\300\271\272\222[=\245\271\376\273Q\233\212\275\262*0=I\203@\275Af\010\273\203\n\177\273\\5\225\274\"\314\032=\312\002\217<\244\214\037=\"\375\351\274!\211\235\275\024\'\002\276?;E\275w/\334<s\274r\275l{\214\275 E\214\275\010\254\000\275\367\262\274=\365\372\215<}\240\221\275=\243\201\275\372\212\351<\263k\362\274us\022=b\376\010\2750\275\275\274\257m\352<\027D\037\275\241!\325:\374\023\002\2742$\256\274Z\031\253\275\236\274d<\021\330)\274\326\211a=8p%\274\253\000\330<\007\277Z;\034\035\317\273\333#\306:v\244G=\014\353\366<\215\270\321;v8r\275s\331\243\275d\021\203\275\364+.=\252\rC\275\234\n\026\274\234h\300;O\2534=\366\350g\2750\033l\274\200\022\010\273\277=6\275\201\306\362<\326\226\007\275\267\017R\275w\311\377:WF\272:\313\246\031=\373V8\275O\230\366\274\\\250.=\210$a=\310[\257<4\3546\274\320-\240\275\031\367W\275\205\254\036\275\320=\225=\334\337r\274\220\035\323;3\036\375\274\364\227\364\274\361\\\035\274\022+\337\274Fi\030<@\257U\275?\237\007\273!=\301\273\036V\352:-F?\273\362\277\315=\250!\025\275\276\303~\275\231\310~=\244\367\203\275e\303\360<\262\000\342=\001\013+=\370Z\335\274\235\021\036\275\243\235/\275\362i\013<\330\027o=~gH\275\313K\026\271\026\353\000<U\261\246=\204\253[=\014\014[\275\013}\002\275\351\233\203=\312\353\317<\256\246;=\242\257\213;\274tH\274\014\277n<(G\265<\010\234\271\274\241\245\201=6\200,\274E\3177=\016\216\207=\316\234[\275G\303\361\274\035@\353<\331H\360=\223\302W<\346\345\276=`\305\231=-\232\021\275-e\323<JeX\275\341\036F\273g5\t\275\003\256.<|\215S\275\241\231\230\274\343\n(<\377\331\255\274\245l\023=\0309\264\274\312\014\031=L\300\026< \230\217=\nn\334;\203\nX\274\375K\365\274/:\210\274c\260>=\r\262q;j\340\227\272\022\0000=2\300\315=\205/\225;\273\007\000\2759@C\273\325\216Y:\1775\200=\213\226\223=i,\257<ueM\274\352\277\032\274\226\311\364<\025:\270\274\013\206\230\274Kia\273\221F)\275&D\256\275m\360\241=d\235\\\275(\225\273=\242\256\235\275\347\377$<\233\253\253\274b\205\364<\017\023V=I\035\025\275DM\364\274\322\240U<\260c\346\275\273Y\326\274\035Fc\275%\334\210\275\300.\n=u\312>\275\220\321\036<\223{i=\014\035\335\275]\0375=\377|\n\275Q\010p=\200\025\227\274\307|\035<{\260\025=\312\330\336<\336\361\242<\260\020\230\275\014J\262<\317v\225\275\374u\005=\254@\031\274\372\211\030<\336\n\317<\332$P\275\226\312\204\275\017\225O\275K#\020;\016h\240\273\003\315\232<*[\"\273\205_\365\274\357\300\252\274\004\263;\273\254\320<<\277\2209\275\006v\371\274p\223i=-\367\255;\351\316C=S\002;=\020\327c\274\372\350\274<\326s8=>\230\226\274Es,\275IS\233=?R%=\324\273\246=EL$=\347h\225\275\352-d\274\003\316\202;c\244X\274W\0314<.\t\251\275\240#\206\275\253(\267\274\274G\025\275a\210\266\272\203\266I\275C\205\365;%\227\326\274s\000n\275{:L=\236\301\231=?|\253<\355|\274<2x\331\273\244\367\262=0\004R=\276\226\373\273<\345\212<\225\311\262;\375\323$:Z\007\212=h^\273\274\232\271\014\274\237\225\334\273\021.$\275(\020j\275`\006r=\337\332\035\275f\005\2739I\026\226<7\000\306\274\316\207\211\274\230\211\031\275\227\010\305<\2421\220\273\\\030;9\353x\355;\263R\001=\033h\020\275\327`\017=\002!\230<\233Y\304\275\003\360\261\274BH\222;6\240\243<\026\037P={\210\265\274m&\003\274\220\331\014\275\365\272\275<I\205\325<\2313\327\274\302\261n=]v\002\275\263\346K=n<\350;\250\336\352=\277o2=\274d\031\2754\311\233\275\341\002Z\275C\233E;\235\374\034=\201\303E\274\327q\304=\264CS\275\245\024}=\237\366\255<K\253#:\310EN\274\237;\017=\312\357v\273=\332\376\274\201\335\233:\346\023u\272\251\320\322<\241\351\277<t\335\265\274\022\232\257\274JG\023=\254D\273\274\241\002\023\275*n\211\275^!\"=3H\307=\304*\007=\362\303\227<\374\310\336;6\351\205\275\315\021\023\275\001\n`\273\256\245\211\273\312\237\331=Za\230\273<\327\332\274us1\274\347\035\032\275rl+=\226\030\203\274\023\306\022<\267\t\345<-o\361;\033:\264\274X\220\334\273\343\271\'<\372@\216\274X\343l=8\310\017\275\n\033\001\273\200\374\240=u\264\200\274\002\362\314=\304\321s<JA\206<4\243\"=\254o\260\275\232\236l\275m\365\241=\r\030\270=\370\027\343\274\364\244\336<\022\272\252\274/\027\200<\'\006\334;\233\311Y=\217\214\261=\234\204\230\273gm\032=\0034&\275\251\rl<\327\242\216\275\034Tf=+\341)=\213mI=\313F\001\275\025@\031\274\272\276\211\275i\233l=\232\3225=\024\344><L\361\203=\257;\301=\237\314\021<!\3009=D\227\363\271\314\331\360<\210f\215<\335\016\326\274\210W\027=;\356\354\274\355\0014\273/\005O=y*%;\335\002\203\274l\227 =\031\020\233\275B\032\273\274\337\235\216\273N\204\360;\030^\236\275\355\365`\275\327\033\207\274\231\355\327<&D\250=\371\207\231\275{\254[\275X\376\036=\020\246\331\275\017`\322<Uf\236\272\261U&=\241\352\253:b_j;\001\347\020\274T\360\353<\324\206+9\246\237 =\010H\261<\324y\356<nf]\275\317c\227=\275\024\252\275EGK\273<\312\251\274w\n\024=\021\020\354<\nx\237=.\226\205<Z\007\233\275\361\254\t=u\021\212\275S\267b=D\\>=\331\317\351:\007z\340\274\005\007\247\275\250\036\201\274\312\025\230=\210\350\034\275\307\306\375<<\343p\274\244\273\n=\356iR\274\271}\210<\r\"\247=/;o<\036\'%\275\206\265\273\273t\274\210\274s\275\315\274\026\200\226\275F\266\377;\233\314\013;#n\233\275\036 \254\275)c\303=\034\365\225\274V\266\022=\205\220\225:&/D\275\204\331\223<\362\025z=^\253\007\275\366*\214<\270\211\231\274j\222\265<\314u)\274A\366\231=T\205\344<\006\205\263\275<\273\260\274\335\234)\274e*\020=\231\310\226\274\022b\342\274\"\344D\274~\274\272=\274\013\266\274\233\213z;<k\271\274\307\346\341\275\246\210\261<I\373\207\274LB\207\275\032g\322=\321\3727<\206\367\273=l\323\201=\316\302+<\246{\256\275\311\321\222\271#\tX\275\314\331\275<\3018\325\274\376\000\232<\344\026f=\006\276\031=?\245\000\274\254:8=`d\206;\327\220\034\274$\320\202<\334\017j=l~\204=7\363\215\275\001\303@\275\310\001\226<\325\352<=\325!\273\274^e\371\274\304\301\222<< \253<D(\014=\363\0221\275\272,\370\274m\261\300=nS\234\275\325\032\254<\3107\227\274\023\305\220\2743\275j\275\240\376&\271W?\017\275I\324l\275\252\356\233\275o>\203<(\255d\275I\246\254=!\360\014<\022F\227\274x\260\361\274\017\331<\274CWl\275\331\2274<\372!&>\347\312\327\274\257dw\274\275A\202<[\263I<k\233k=\310\0134\274\325\256\262<C4\331\274\307\332\202<C\341\210\275H\305\330<\326\007\216=\342\177\006=\310l\364\274O\344&\275\271\305\247\274R\003\275<\360\230\215;*\325\275=\3757r:q\177`\275F2}:)!\203;P\231\031<\034\226\022\275\241\362\007<\336\273\224<\301\236S=\353_>=;\277 \274\004u\273<l*\213\274\034f\005\275+\250g\274U\'\010\275\361\365\203\275\203\226\330\275\265\207F=NK\241\275\262\222\301=0\225\256\275Q\217?<\340\204%\2729\375\243<[D\226=\007\316`=[n9=(\334b=_#I:\264\302\236=>M\277\273\030<A=\324\324\027\275\377\254\213=\307\334K\275\352Et\275G\271|\274i\323\364\274v\272E\275D\014\r\275\371\212\243\274\224\372M\275\271\226\365<)\266t\274\217\033\270\274\335}\005>\232\274\206=\303l\205;i\020\307=\007\246\036<\2002\363<g\376W<\355\346\274<\"~\217=\223\241\2279L\322\213=\223#\257=\310\373;<\236\247)\275p\322\227=ph\002>B%\345\274\352TC=\312J#\274\216\t\274;\247\320\243<\362h\251<]\256\217\274a\021\206\273\350H\017\274\013\213\301:\275\217\177=z\342R<\311\306*\275a2\320\273\242n\001=\253\035\211\274\023\255\206\273{E^=t\350B\275\365\227\300\272\252\334\256\274\331\305\177\275\341Qd\275\351\277\322\274W?\226;\243e\013\272\266/\201=\037F\274\273\027b\000<V\353G=\306J\216=1\003\202=\2426\000\275\035c\007\275\025\343\032=\340\273\225=(\253\346=f\226\345<Lhm\274\270\242\366\273\215\251\264<{\351\216\275\004Z\261\274m\212\323\274^\252v;8g\"=\033\223K\273\236am\272\0008\210=r`\021=&\233\267<\343\250\";i\367\326\274v\323\332<\266\020j<\335\312U=\340\207\214\275$\032\210=\314q\312\274\302\032\213\274(\310\214<\211{\033:\212\0342=\212{]<\371\212\001=\342c:\274\010|\275<\321\241\306<rd\211=\235\3032\275\215\357\t\275\274p\354;\254o\274\275\"\364\002=\375\'\303<\260\261\025\274S\216\226\275\332HC=\214F\023=\360\212\\\275o\001F\274#\036\326\274\026\014I<d\347\241\275\335\301\240<\335\336\037=`]\305<\273\200\321\275\354B\236\274\340\324\324\275\200\370\001\275\003\326\240\274\022\r\214\272\253t\336\275\221\226T=g\307\201=N\277S\275>\'\316\273\024\366\303\275a\202\027=\206u\n\275\254\356\331<Bh(\274\241\'\010\275*\246\304=\374\242w=~\2630\274\353Za\275\327\037\017\275k\377\377<\305\027y=0>\215\275\310\311\331\275\033\346\205<R\210\201\275\351\355\271\274LXs<|\200E\274\322L\310\274\222EF\274Tva\275iQ\033\275\244\376\324\273B\226\325=\357\223\"\274\265\312\006:\317\350\014\275\312\250\377\274\017u|=\260#y=\301@f;\257\211\201=_\021_\275\340\220\271\274\343\271\365<\2422\265\275X#\253<\263\3378\275\3626\373\274\354*\037\274\225z\021\275\364\353\010<\272\203\031\275R\302\264<\267L\024\275\322\\L=6w\010<@\213\207\275\331\356\223<\220@Q\2748\364}\273X\377\304\272`\025\005\275\201\274`=\335\327\320<]\354\024=\276k0\275\225pW=\000\277\215<\253<\250<\372\311&=JT\212\275\246f\317<\r\257[\274\002\tH\275\363\236\341\274\3609\214\274\354\004@:\303\340\212;\275o\304<1\016[\274x\315y\274\211\347\225=\230E\006=\315n\230;\234K\251<\336nK<\212\302\034\275|\201\n\275\231\312\260<\322\203\221\2741DT\274\331x\213<x\024\030\275ClF\273\243A\272<\332\375\330\274p\3342=\216\004\253;L\234\305\274\016B\204=\323ia\275\336\264\265;\243\206c\275\240\200\000=\241\"\230;E\221\201\274t\360B=A\030\273;\232em;\213\216\032<\006N\037\272i\303B\274;Z\374\274\033\331\233\275\313\003\277:\016\221\231\275\271\206\230\2725\260\357<\314\255\233</m\367\274\0253\363<=\033I\2754\330\314<\\x\356;\022\032\231\274\013/\216=\337s\207\275\301\261Z\275\204\200\026<kl\221\275\264\026\n\275\007\370\036<g$\274\273\254\241n\275\333\003\200=\366\360\245=\206vn\275x\334\211<\203\303\251<R\001+8U\013V=\242\3119\274:\313\344\274\263\357\247<\030\321\226<\301\262\265\274\374!L\275\310\342\216=\340\231^\275\364\031?\274\\\177R\274\010\002\264\275$\356d<\247\311\234\274\360\363[\275^\033\277\275\007iI\275\341\032\230\274\317\332\311<\213B\201\275\021+(=U9\237\274\263Hj;\324\222\223<\231~\035\275\032\220\014=\304\271\n=\2403\270<U\021\005=;\016\210<[\214\205=\376Jr=-\314\214=\212N\"=\203z\227\274\366}\301;-\342/<iR\254\275\010Q\276\273\335\022@\274\363\031\201=Vt\234=|@^\274\274\034$<\316\034u<o\324S\275Y-\017=\036\271Q=\346\330P<gn\363;6%r\275\246\273\247=\305eN\275\275c\204\275D\361C\275\221\010 \274\025\357\275;\303\322\014=\002\327\002\275\335x\023=\217\027\340\274\031%\367\272\303\003r\274L\363`\275c\230g\274\363\272\223\275\352\"\316\274L8\246\274\267\3169=\302\373\177\275\376\212\201=\365{\027\275\2122\340\273\220\212\027=\2715\360<\243v\257;\007M\355<\007{F\274\373H\233\273Khj\275\032\3116=^\005\026<5\321\001=\265j>=\342\340F<\2241\006\275\025\262J\273N\r\225;\032\274\020\273E\017\361;k\242{<\276\253U=\206\371x<\356\254\004\275v\230\002\275\304\031\245<\210\301)<\251\310g\275\212\231\324=\216\n\001=\271\231\377<\314\312\r<\2206W=kM,=\361\205.\275\376\304`\275\005\222\356\274z\016\227\272\027q0\274~Z\246\274\315K\005=QA\362\274\225\031\246\274\217\377\036\275\313\313\273\275\027ph\273e\266\000\275\266\226\305=\203\231\276<\354\301V=N\261+\275u4+\275\332K\244=\244\2045=\345\023\210\275\033b\201\273\205iK\275\242\t\021\275|<\356<\305!@\273\240\275\357<\314C\000<\r\352\227<x<E\274\020\372\212=L\251\222;\240t\200=C\214/=JJ\203\274\244a$\273\336\033\035=\367o\n\2754&\030\274\235|\203=\330\355\217;\317\250%=$\327\217=\331\375\225\275\036\305\230=\262(t=\027\221\331\273\021\325R<\243\217\240\275yti\275\371W!\274(d\021=`;\250\273\242>\345\274\370IK\274\022J3=\202\353.\274\270D\\<^\304\320;\376\212\300\274\344x]\275\"\243O<`a\326<bv\263=8M\r=\t%\211\273h&\202\274^\274\344<x\034/\275\361\345\002\274X\372\235\274T!.<\370r8\275q\304\220;D\317\331\275\333^c<\246Y\353\274J\342\314=`2\344\274\351\221\025=oU\231\275\275\335i\275\016wp<\226\346\267;o\022\010<B\n\000\275\0209T<\234?h\275\301dd\273\340\004B<\275g\274\273\037\374\026\2751\006$=\233\305B\275q\320\325\274\233i\261;%\320!=\254z\350={/\370;I\354\005=\207\236\262\274w\303!=\272\335\373\273\305BK<\236>\033=\273\245\256<|y`\274\3209\r<8[%\275\243\226@=\r\301\240\275\250p0\275A\001\246\274J\313b=\326$[=\300\036b=-\225\221\274d}\242=v\252\335\274\221\363j\275\350\'#=\3159\033\275*\177\340<\322dW\275pT`\274\241\347y=.>\017\275+\215\3709\032\001!\274\027\317\253\274\026Z\232\275\310S\260<\302j\325\274?X\"\275r\212h=o\253N<\020\022}\275\333\317\212\275b\260\371\274\363\"\205<\316\231\236<\265\247X\274\336e\315<d\006\207\274\242><\275l\025\307\274\020\376\005<e@\204\275\357\3503\275\230\3069=,\240*\275\006V/;oyF=\326xH\275\324\314\304\275\356-(\275\250\240\346<\351w\024<\303\340\014=\302 \207=\332d\312;\017\202\t\274\273\2616\275f@\"\274\373#\007\276;\027\\\275\022\276F<\005\014(\275\325R_=d_\214\274g\207\362=\033\372\201<\313R\206\275wJJ\274eE\014\274R\233\007=\211\'\264\273\226\362x\275\177\366D\274\311\016\317\274Q\3505\275\364k5\275D\273*\274Z\013\017\275\230a.\274>[\200=j\357\030\275\356\306\002=Q)b\275\335`\226:\353S==\242\245\225=\205a\331<\277F|=\233\301\250\274\251\360z;Hbm\274\357d\026<\020g\262=.W\r\275_\014)=]\205\370<\020\301\020\275?\364l\275\'%G=\374p\213\274\024\236\004=1\253]\275\300\374\314:9w\304\275\203\037\255\275\326\316\312=\026\351u=\nE\215=\033\013T\275_\302:={\263K\275\227\016\204\274\320\033Z\274\204\233\315\275\32013<\233_\031<\346IO\275\325\315\036\275\266\252,<\303\275\202=H\325\212<\335\260\004=@\262t7\346I\367<\t\021\205=\255H&\275\035\262\335<\334\t\323<]\301\315<\252\225\300<\007s\325\274\327\341\365<\024\200\224\274\236\255O=\211\315\013=\246Mk\275\275\276\215:L\217\215\275\275\320:\274\307W\024\275}\350+\275\357q)=\202e4=w\310\026\275\344\n[<\347hm=\032,\373<\365\360\272\274\004\230\362<h\234\324<\312\024x=\001\255;<%n\n\275\237\242\215<\327\205\247\275\307\372\375<\267\241\340\274Y\001\022=\321\267 =\177\2244\275\261i\241;\271\220\216;\256\037L\275H$\222\275[\t\216\274Ms%\275\\Xv\273us\213:\330\312\216<pn}\272\0313\013\275^\326\240=j\250M=\007\244\207=\264\007\003\275\244A\302\275\225\323\206\275\023?\001\276\332t}\275Y\347\024=\247\347T=[\037\200\274\211\022\010\275\357G\302\274\237a4=\340\035%<x\344`<Y\222Y<LX!<?3L<z\305\222<m9#\275\377\2737\275\204\234\250=\341c\322<\007\004u\275\017\270N\275\272[\226=\005\220\370<|\0267\275\324T\210\275\006JF=\217\256a\274\003\273\t\2758l!=O\212\263\2750H\322;\232\201\263\274\247T\302\274\007\272K\2752\300N\274\006\246\213=0\234\311<9\236\262\274\247\251T\275\243\253\033=P\215&<\333\217\027\273\205xU=\370\031\001=\341\301\204\275\230~\200=\033e\216\274\361\210\030\275!\345\251;V\342?=\325o\211<\242T\021=K\227\225<\207Qu\2742\243\214=#25;!\201\255<\353\031.\275A`]\275\221E\360\273\207\377\276\274C\254\002;V\0331\275E4\343\274\031L\014=\364\326,= \235m=c\371\262\274h\206B\275\243$0\274\336Q\377\274\3307-\275\036\245N\275\301.\341;\004\336S=\340\2373=\220W\035\274\361\371%\275}N\232=6\337\353\274P\277\306\273KY\250\275\371A\373\273\225g&\275t\370\352\273\217B4=6CG\275\230\030\032\275\225\344\220=DO\240<\246\233)\273n\356\257\274\323\310d\275\017\371\325\274Zm\267=\002\356!\274Hb\234\274\240\326.\275\010)z\275\024d(=:K9;\272\271\350;\\\034N;\271\203\320\274\232y\244\273H\367\205<\003\301\025\275_\020\000=\332\361W=\006\205\376<\367\017\r=\213\330V\275\3509\231\275\273`\251=\001\334\316;\022\374\277;\343\226e<\002\2672<1\256\217\274r\3358<B\261\032=b$@\275-\273\035=\257\366b\274a\301\214\274\344\270b<\000\304\356\274\226k\247:\220\335\256\275\315\017\266=^\331\031\275d\375\025\275\300\n\264\274W\305\030<\333h5\275[\233\210=m\232\215=\360O\341\273\214`\255\274\331h\211:\256\343q=\210\235\336<3E\213\274\246e\r\275K\3604=\321\274\210<\240\374U\274^\267\204=8\200\r\275D6J=E\274k\275\270X\255;:Gp=\216<\305<neS\274\315\021`\274 \370d<\301`\004=\314VH=*\353s\275\007~\252\275\255\033\241<\203\347\002\273\222#\027<\266q\033=|\361R=vW\306;5\276\002\273Y\314P=\372\023p\275y\202\034<\\\377f\275FZ\315<n[\213=\334\223\312;,\'\325<\365\211\013>\004D\010=ag\214<\203A\225<\267\021c\274\312\002l\2742\273^;\\cL\275~/\310=\275\203\344\273\273\304o;\363G\225=\314\223\373\274\3670\\=\342\333\305=\306\330\271;\326\304\311=\246\366\220\273d\256\237\275\202\027\273\275\212Ye\2758\334\351;\311_\257<\021R\317\2738\036h=\324\204\223=\t\276\215\274c~\237\274\335\212\256\275\215\003\010\275\216\314\034\275\232\233\266;\254\311\201=e\317>\274\254\267\246\273\365<\023\2701\037\272\273v1\243\274\201\266\235=\370t\212;\310\250\022\275y\214\\\275\257I\003<\303\3039\274n\375\344\274y\317\331\275t\326\320;\240\007A=\257\213r=W\267\231\275YK\222;\345=S\274[\325(=niV=~\234%=\\\362\205=\255a\\\274L\375D<i+.<\271d\234\275\325\370\255\274;G\240=\244\367\222\275\244\3251\275|\021m\275\222\023\217\274\013\277~=\372\265\220=\352\315\320<\350iB=\232\342\0379\025>\363\274\361\235Q=\345;\214=7\257\002<\230W\250<U\332+=\213\333\267</\313T=;\311?\274a\226\021=\302%s=\027\333\321<\223\360C=\251\360;=\\,t<{\243\235=\024x\201\275\232%\027=\n\322\243\275\021U\365<F\374\352\274\265\270@\275\022\322\325\272\014\020\225<}\350\005\275&@E\275dT\345<\362~\014<@\376H\275\032\000\221\274\003;p\275\376&f=.35\275W\320\210<@\277\247=Et\226=A#H=\032\326\004\275`\2648\274\232\320^=\224\216\345<\334\022\331;\3468\\=\216\017w=~\006(\274~U\227=\311\257\260\275\277\227r=\335\010\027\275\342d\312=\350\372\227\274\274\277\256\275\006G2=l\243\272=\324\315\204;Z\177\t\274\252z\251\274f\253\320;\006\223O\275\247\202\300<X\024G=\351.\034<\266|\211\275 e}\274|\305#=!\037\346<\2631\316\2747A\'\274\306\340\374<\373`\315;\nI\320\274RH<\275\307\252\232;\230B\220=\272\032\360\274\345\002\230\274\227\001z\2756{\n\274|)W=v\346Z<\247D\320<W_\261;D\022\016\275\2229\026;w\014E\275%\177\335\274\373\250\004<\317\326s\274\315\177`\275\326-\010=dL.\275\010\377\342<\375\236\'=\372l\373\274\274\233g\275g`\r\274\014\304\214\274F\024a\274c` ;(1\341\274\323\345\247<\311q\220\275\322\243J<\001\022\213\275\351E\276=\022\267Y\273FCi=\301U\325\274|\273\005\273\315L\254\275\351=\206\274\\\377/\275\203G\256\274&\300\001\274GHV=|\243\221<\356\351\010=k\262\036<0\022\204\274F>\222\275\213mw\275T\272J\274\031\216\356\273\257\026\255\273W\366\321<q2\006=Z\246\225=A\353\020=\010c\377<\314\256I\274\006\233\346\273=^\341;\330\027\347=\364\244\017\275\017K[<\t\r^\274g\375$;\237@>\275\305\333+\275\256\010\203=\014\000\263\274s\364\177\275\323J\302\274e\310b\275\020\265.\275\256!?\275\373\300\257\275\316\233c<\217\322_=\035\305*\275\242\265\263;\201\026\254<\242h\217\274\265\241a\275M~N\275\233\360@\2736\333\366\274Y\220\256\273\253\273\364\274\213\230\322\274a7\237\274E\352Y=\022\317L:\347\376s\274\377\345`<\250\252\206\275\177j\007;1\342<\275\374\356\340\274\241\027\033\274\021\205\"<=:\367\273\350\365\023<\001\264\003=\245~B\274\025\3474=Q(;=U|\313\274D\030|\275\375=\312<;\211\"=\221\177\000<\200\323$=\223\350\016\275 \335M\275\3217\177=\306\326\220\275\313\n\361\274\262\'\226<\360\177\211\275s\020\220\273\350\200\315<\214\333\032=\325\327@\274\353@\177=T\241\204\275\231,\022\275T[\n\276Jk\3709\325\205\213\273H9\317=\242$\311\274;x\356;L\330\242\275o\262\207\274o0\310\274\370m\300<\1778\016\273\013Yi\275\371\017\031\274\241I\204=]\351\213\275\213O\204:\370\033p=\356qu\275\213{y=\342\226\021\275\236},\2757\256\273=\371`\221<\246\360\247:)=\003\274\302\315\327\274d\265\247=Q\356\005=L\001A=.\211\000\2757\021W=\346\276\250<\017\321\327\274<F\004=\ro\355;\361\004\007<\255\023\216\274\346a\347\274\177\027\206=\227\263\344\274,\211\235\275\233\026\353\274\t\203\335<\250\267\262\273\357\214\210\275\345\332\300\275\262\2477\275+w\222\275\371\246\021\274;g\317;\t\343t\275\006\222\260\274>a\022=x\031\222<~S\002\2755\017\023=9\211\003\273\242\t\345\274\265\313\367;\247\305?=\317)\'=\224\2351\275\257<\331=\\\232\312<\2710\034\274\r\205\034=QX\336;K&\274=k\274A\275\325\346\365\275\330a\366:\0145\247\275\335|Q<X\033e=\261\262N\275m\366(=J?\036=q\375\014\274\032\212\372;T\364<=\304[\212<\351\314\253\274\201@\273\274m\300-=\201\002\210\274G\354\304\272\036\263\001\275j\371)\275\030\'\207\275\362\371\"=pq\307\274zy\022=\034\013C=\225/\013=\246\332{<\260\2619\275|j\3379\221\2209=\263L\315<L\026\203=0*\026=FSf=EOS\275\243\326\225=X\275\356\274^\237\235\275\020\306\353<\025\232\372:\033\203X\275\005\374\210\275b\351\245<\235\375\007=\353\301\241\275\203\005\374<\352\327+\275\334W\376\274\007_\021\275\205\366<=!\265\331\271\253\327S=b\331\224=\274\253k=\247\353\215\275\233;\017=V\225\205;\306\037U<\020\307\264<\014\317A=m}\270\274\360\203R\275M?H=\355V\340<m\004\266\274r\334;=\014\336\306;\333\315\342\273fm\214<W\315P=\274\246\214<\255\247\343<\265\014\203=Yc\302\274\022J\265\273\223xJ=-?\220=t\014\235<\331\"j\275\263\277z=B\227\202\274\232*S\275p\016;=\007\374\001<\204\353n\273\021^\215;\274\256&=b6\007\275\377\201\033\275\200\324\210=E\244\364\273\221\242C\274\016\317\200<\342\372q;\273i\264\274\347A(=\240\343_\275\315\003*\275YJ\\\275g\236\327<[\036\265\274Y\264\311<\257\315\244\274\n\362\323\274\254\"F<\300%C=\211M\200\273\006\264%\274\260:\224=\332@\247\273\242\217(\273=\276\024\275Fy\316;\032\013\324\271%zv=\374\007g\275\244\352\367\2750\252\214\275*\326p\2747\262Y\2731\010\263\274\0172\260<\317\216\'=\317\233\243<\272\326\275\274d\346\346\273\242\210\031=E\203\273\274\233\236!\275\225\247\210=\rR\250\2730i\266\273\201\373\237\274{.\260\2745\252\361\273\373\367\"<&\343J\2754\365\006\275\321\236\025\272\257N!\275\315\342\244<\351J\027\274\371\276\276;\025wz=6\345\221\275\033\234\215<\307\202\237=\303\376\224=\025,\210\275^\326g<\307c\232<\324\331\323:A\212\220\275]\353\303=(\326\034=\242\\\235<@\026\\\273q\272\326\275C\312\210\275\324w\233\275\\\223\253=Ldp=;\3218\275\034l\014\275\204\227\353<\025\325T;\017MT\275\177.^\274\347\217\306\274a\267=\274\205\203o=\"\000\302\274\316.G\274~\277s=\001\234\220\273z\350\201\275\355\317<=\322\014\323;\337\333K=}>\210\274\263\203\213\275\210\257f\275m3g\274\236\2730\275\256\310\267<\030\263\310<\340\007\337;Q\274l;_\2338\275\314\247m\275\254\330\266\273\257g\020\275t\275\301\275p\371\024\275u\225\271\274\2218\251\271\224:R\274\376(\370\274\356\305\226\275\305c;\275\361\313\017<\010cX\275\230\034\213=y\374\005=C\217\215=\034\347p\275{\231P=t\332]\275\373Y\005=)f\016\275\206ZO\273mx\214\275\322B^=\306\320\362\274 \"\016\274D\\P\275\217\302\224;[R\225=\233\013\300\275tL\023\275\354\324\354=\262\277Z=\334a\230\274\244\214\002\275\225\222l\275\342\360\020\275o\307\215\274\363\316<\275\2460\330\274\231\365\246<\344\345o<\207\271\324;\250\352\315;\013\367\025<\370\313G=zv5=tW*=\006\270\221\275\006\253\017\275k[\215<C\364c=\234-\310\275\342\364y=\310\243<\275\336\035\023=\343,\266\275\307J\217\274\322\326\215=\226\0149\272\241\367\344\274\020\2225\275K&[=\232\372\251<z\004\000\276\266Z\025=\000z\347\274A\2156\275\331\220h\274zs&<\371>\210\275\222\3370\275\327>6=\025P\336\274{\006:<\263\'H=\234\276I\274\206\201\354<+w\224\275[\026N\275\331\233&\275A\252\260:\345-\320\274\231U3\275\271\327\214\2744\210\016=\303\273\325\274x .<\224\035\350\273~1\001\274y\366\201<\265\027\201=\336\214R<\037w\037=\035P\032=\2513\315;\346\342q\275\217\374\t=6\270\314;q\204\005=\223GU=J\250\277\273\223\322F\275\255\350\310;\2148\346\273\304qS\275\314\022\032\275\362F\215\275\312\234\334\274O\035?<e\202\275<E\032\337\274qwD=\3401\356<7\343\221=\346\352\013\275:|\235<\332\271.\275\324\341\207\2751\203\330=e\213\007\275\037\313W=VYI\275\361h}\275\204h#=\377WW\273=q\013\271\346\016l\275\36111\274x\0242\275\035\337\200<O\010-\274\317\2576\275\tr\203=\034J\321;\376\313\305=A\025\222\274\223\323H=-\276\257=\2375G=\3041t=(\001\223\275g\226 =\322\266\002\274\303p+\275\3334\217<`Q\340<)\374d\275\3540=;\t%x=\234r%\275\362r\277<*\230\236\274\216\224\257<f@)\275\357\225&=\030\031\300<\365\244\227;G\301\023=\032\346\025=sm\277\274\254\377\204\274\377\374~\275H\004J=\215^\034\275\261\2670\274\330K\304\274>\335m\274\355\022\346=\3349\030=\365=E\275o+@<\371\036\027=Q3R\275\315V5\274OLJ\275\213a\360\274\'\277\202\275J\214S\274\217\214\312=\335\005\355<\212\032\226< \000\302\274\022im=-W2=2\341L\273l9[=\273 \254<\316\301\264=\361\036\233\274\356\006\234<\245T\177\274\340\204\321=\231\304$\275\313{\330<!\020\260\273\330d4\275\005\177_\274\310\332\253;\275w\304<#\360\300<\2762\237\274S\002\272=\256\177#\275\r>\n=\004\203\004;\376LE\275:Pd=s\0338\275\331\306\277=\266i\217\274\231\301\237\274n\030\334\273\343\236\026;\263\371|<\024\212\362;>\301\250\274r\\\\=\270\363\271\275\215\247W\274Jc/\275\276\261\251\274@\266\244<\027\246\275:\330@\031<\343\314@\275h6\230\274\307\255I\274C\3103=\"\227\305\273\274\2328=\324\322\231<\206\0142\275\314\367\020\275L\324@=\025\215n\275B\356j\275\302b~=1\2411<Q\205\367\273v\331K=\212\006K\271HXW\275\203\201r=\253\222\335<k\226\355\274\356(F\275n\262\267\274\332\"\364\274\2204\005\275O\321-<@\375\007\275`o\217\274\235\331H\275er\222<~\273\014\275\265|g=\241Z\314\271\334\017{\274\332s`\274`\232\300\275\333\227\320<\252\no=\004\200b\275\275\250\313\274J~Y8\372\017\206\274\343\376:=NI\207\275\022}\217\274A\027\307\274\303PO\275\375V\222\275]\244\200\273jU\326<\230\262\r=\270\261\213\274J\3421=\023\250J=tJd\275\257i\232\275m\237\333\275\255.\020\275\273a\221\274\001\331|=\217\023@<\377\276\037\274jZ\037;ebV\275\023\332_\273\210\357;<\003\312\271\274\365\"f\275[0\376\274N\035\312\274Q\246\266\274P\377\217<\236\272L\2759\326U\273\3756\004\274k#\241\275\323K\221=6\364\027\274\3479B\273\361\215\270=\"\375\364=K\0173\273\217\311\231<\364\006\222=\204\303\035\274\225\210\000\274T\204\211\274(\371j;\026\030\244\274\026r\016<\365\236*<\331\240\007:D\035\001=\213\332H\273\370\320\347\274YH\210=\010\262\226\275\276\222\025<\035\333\335\274\275\206\217=#\360\226\274\323\333\200=\335\266\233=\314\'\005\274\212+e=c&\251\273\2603\202<{\321F=}\373O=\304~+<\276\333\315<,#\313<w\225\373<\321\366X\274o=1=\204*\355;,\364R<\324pu\273\302S\002=j\'\276=\243h\320<\220S9=\036\023\373<a\355\002\273\354\001\030=\003,a<<\243I=\263\377\236\273\351(,\275\022R\207<\235\322x\275h\t\022=\347\352\364<\300\255<\275\2112\034;\177H\205=\265fV=X\004\203\275 \304\231\275p\004\014\275\263\031z\275\314\277\026\275\272Ow<\234I\311<\334\303\374<\033\361]=\005\233]=\t>\312<\\(C\274\3547\227=\256/`\274\267|\\=\026\2107<\026P\235\271\366\204\227<\3206p\274\266Y\204\275\364\2753=\346e#<\367\031\013\275Y\016l\275f\205V=\304\005\020<_Ox\275\006?^<[\005\301<\221L\310\275\017\3567=\346\353\035\275~\017\306\273$3\266\275\252\270\263<\211C\013=\007\277\336<\320\250\370\273\254\312\\\273iC}\273\006\275\376\274=\307J=r2\330\274.{=\275\201S\272\274\315L\211\2745\314\360<\245\242\n=g\357q=<\272@=\233\353\014\2756S\025\275\320\235\255<\036\215\t>-5&\275v\217\303\271\rx3<\376\222s=\300\373\224;\316\020\271\275J\2617\275uS\244<(\031\242\274\317\242C\275\361\270\002\275\035\245\022\272N\323\216\274\334\310\252\275\'^\210=\306-\253\273\210\\@\274kG\337<\263\004;\275\366z =~\237E\275\221\r\310\272T\333\301<\241\251\243\274\2567V=\361\336d\274\301\337\371\274\014\033\305<\335 \304<+\217\221\275f\353c=\204b\275:V}\216\275\333x\311\274\337?\320\275\266\211\245\274l\223\030\275\000N2=\026h\374;x\263;=\377\320T\275\375\032t==\357\322=y\322~=(\270\004=\207\002\261\273\357\206\023\275_K\307\272wp\341=\252\344G=\303\"C\275\321>\t\275I\000T\275S\"J\275\'\021\220=\207(\244\273\017\335W\275\013\253\355\272\351\211C;\260\361\211=0\231\307<d.-=Gf#=O\251\220=\260\332\000=1\267\206<\006X\250\275\340\200s=Yy\322=\310\203\313\275\354\256;\275\267\215#\274\327n3<\215)\241\274\331^\244<a\324\016=j\262\230=\374x\031\275\242\262\327\274\371\026\254=\351\350\240\275B?\245<\351/\230\2740\3247\275WL3=\304\2607\275\322\220\345\274#\332\320\274D+\337\273\214\244\021=+#\"\275\231\262\240\274O@\007<x\243\201=\000K\264\275rD\203<\203\212\264=\033\321.\276\345\302\261<b\346\017\274\r\336\267\274\024\\ \275\261B\205=\361k\013=xV!=\310B*=\310\226\235\272]\371 \275\233E\236<L\010\016\2741\032\311\274Td\231\274 \263\231<>\206e<\246R\232\274l\314\010=\320\364\275\274\243\373\365<\365W\221\275\365\360D=\300%\235\274\023\344\204\275\210\212\315\274\273v\312\274\0048s=\305Bj\275\233!\327\274{\342\347\274\231{\004\275-8\021=a9\370\274\203\020)\274a>\221\274*qD\275oC*\275\215\376\226<\243u\252\274\'\222\037;\010\265%=\321\221\247<\237\363\t\275\322Z\220<0\224\353<\230L\375<\215\310p\275Q2\303<\326w\326\273_v\"\275\2615\000;C\256\327=\237)Y<Q\266\233\275\225q\226\275\347\223\032\275SV+\274\277\324\225\2747\005\016=P\372\240;O\212\001=\265\267\006=\210\305a\275\366.A<\334\212\200=v\305\021=\001\275\032\275\266B\324<{\252{\274Yk\347\274\301\202\024\275\243\324\242<\351r\'\274\016\036*<\266m\270\274gP*;\036+\356\274\216W\301<\255)E\275\224\342\005<\204\0162=z\355\210\275\331\244\343\273K\034\216\275\226(1=\374\360H<\030R\307<\025J8\275\300\2243\275\207\010\337<L\227n\2747c\260=\324CI<\352x\310\274\\YA=\304&\004=\342\221\237\2756oA\275\271\232\013<\215\312\344<>U\227=3]d\275\223\004\350<.\255\210\274A<\220\274\332\265\213<\324\027\246<\243X2\275x\235u<\003\306\222\274\022\277y\273\002\263A<$\323g=l\374\'=\335U\335=\002+\260\275\230#\231\275m\221\264<\267\037\017\2757\3610={\245r=\307\223\213<\037~[=\325+`=\027\212/\274k\330u\275`Xj9\315\337\226\275n\3060\274\245\034h\275\0226I\273\314\024\247\275\361\222-=e\303\212\275T\232\000\273\026\250o<\255\030L\274Lv\027=G$\305<\355\344.\274M-\322:O\030H\274\317\rx\275/p\222\274\253g>\275F`m=_\265\250<s\343\373\275z1K=\032\226\235=k\210y\275\335y9;(\036v\27509\317\273D\252\227<\276%\356\274\007 \210\274S\343\343\273n\246c<.\375\017\274A\322\233;\005\317\303\274\347\314\004<\217\203\\=\017\310\021=]q\356\274E\367\275<\216%\220=*\231\027\275\221\013\006\275\266\035)\275m\235\237=\353uF\275s\336_\275J\242\030=\037Mw<\220e\364\273\357\220\232\274\244\216\273\273{=Z=\262\010\262\274\017\227\252\275e4\026\275M\200l=\037\263\306\273\331\371\212\275\0072k<\310]<\275\312\312\031=\236\006T<\257\217\242<\201\262\371<\371\263\256\274\370B\217\274>4u=h\304\203\275g]\010\275\312\207\211<\326:X\274T\235\241\275U\341\264\274\263\272\n\275,\260.=m\314\220\275\001\263\343<\014\201_=gJ\373\273\033Oy\274\373\204\022<u\006\235\274\241x.=K\300\244=\020ta\274\377kO=\312\206\233<y\250\036\274r`\020<~Y\360\273\223\212\346\274t\360o=L\312\257\274\201\347H;\361\263)=R\276\021=\201\367/<\317vf\275y;\200<\325\311\006;\361\375\222\274\351b\230=nJ\327=1\231\231<\344I\202<3\361K;t{?=g\331\246<I\302A\275\343P\272<~\342\272\275h\247\220\273\032C\226<\264\300\202=r\031\244\274\263\233\210\275\271(h\275\271|\234\275\205\315\260<\245OO=U\344\022=\204*\214\275\332QS\275\3237[\275\375\311\215\273\203\330\333<\270i\017\275\204K\303<\266\221\036\273e\330%\275\242\302\030=&\241\031\274B\251Y=\221\302E\275>\033\001<\34738=\203gT\275b\356\250<e\"C\275|e\314\274LZX={\262 \274i\314\306\2743K\261\275\367h\272\273{\252M\274\262/\200\275\t\020\277\274\235.S\274\356o\264\275LU\367<\221\370%\274\303\353\205<\257\002\356<{\234\202;\213|\261\271tk\211\275\014\257D=\361%\001=\346Hr\274\235|\017\2753`\213\273\352|\007\275mk\206=\223\230\221\275\275\301-<]y\261\274\035\254\032==V-<i\177\333<q\327w=Y\335d\274\236\341\200\274\337\330\214\274\032\234\030\274\023M\205\275\375\022\200<\367\271J\275s\ru\274H\362\211\272\236\300\354\2743Z[=\331\312\374<\004=\020>\277\322k=}\2732=\354\340#\275\024\'(\275i\246[=G\027\003\274\211x\031<\273I\336\274}\367\357\274\265x\003=n\317k=y\317R\273\337\345\005=\213\307J\275\202\225\202\274\357\0216\2744\"\342<\312\234\353<\322%\030=\331\302\252\274MX\257\274\353~\374<x\323\322=\315\020\241<\3632c<M\262\374\274\340\261H=\222\255\034=\243\035Q\275\266\024\236<\312w\234\274\223\372\373=\007_\034\275C\337~=;\276\367\273\200I\272<&6z\274\336\035\367\274\035\000\266\274z>\204\275-2\005\275Kk<=\22347=\027\261\321=\314\033\230=\277\226/;\324\350\202\275;=\022=\345\323D<\222\311\262<\334\377m\275\016=7\272\327j#\275t\' =\036H$\275-\"K<\245\3114=\365\254N=\026\267R\274U\212S\275B\277\326\274n\224\350<\247\236\225=\020k\227\274\272\0365=\223\226\235\274\027\363s\274\236)\332;(\022\035\275\005\001U\275->\216<\330\010_<W\307\021\273(\231$\274\025\236\240\271,\255\312\274y\207\207\275\244vl\273c#\002=\313\226g\275a\371\342<\270\233\245\275\245\261\307\274\321n\342\274h\226E\275a\300\336=Lb\010\274\266~\220<\002\233\224=\235\"\326<\035\212\377<V\231\301\274\373i\251;\245\360,=\326\2209<b\272\034\275M@\007=\312\204\260\275V}\352\273\312\375E\275a~\266\275\333\347\233=\265\027\265<\000\360\313\274T~&\275\272\364\252=>\273\271\2754Q9=\023\014\217\275|\027d=rY3\275W7i\274\rK\253<a\257\001\274\277\263\233<\027\310\252=m\236\343<\200RL=f<\200=\034\304\232\274\256\t\344<\330\207\251\274\253D\242<#\177\r\276\200W\255\275\020\311\315\274\033)\344\275}\205p\275\244\216\031\275vS\247\275*c\243<A\206\246=\262\271\273\272\207\352\236\275\314&R<Q\237\341\273\204s\241<[\"\307;\276\364f=\351\000&=(G\226\274F\300H\274\026P==W\205\337\273\272\340x=\313NU=\366G\330\273\314\303\232\274\351vE=\302I\303=\026\230H\275Ic\333;Mr`\275\301\311\245\275\302\312{<\274\232\232\275\266\206\321<P\207a=\302C{<\372\001Q\275\314\312~\275\246\275%=;g[\2743 [<\306\261#=\342^\265\275@\246\024\274\005h\025:\310\003\262\27555\343<\366I\034\275\023d&\275\317u\305\273E\256z<6\213\311\274D\264R=VB\030\274f\001\277\274\002O\236\275\245\365\n;\211\034\312\274u\214U\273A-B=\2701{\274(\034\261\274;\271B\274\034\371\235=l\322b<\033\270\340<\010\001\234\275\215\252}\273\312k\250=\337\356\262;0m\201\274\322\027\317\273/\243\000\274\337\2636=\275\330v\275\231\330 =R#\267\274\004\226\277<\370\316\247=\306\'G\275\2769\275=\023rA\274\254\314\257\274b\2728=U\262\033\275$#\303<H\321\213\274<d(<\2410\255\275\216\271g\273\275.\310<\300d\324\2734*\315;S\204M\275\317\303m\274\036\321\n\274H\r\330<\212\254\025=\223\353F;w\2570=\035\351\230=\274P\302:v\227\007\275\221q\007;\010\'\177<]\277S\275)\007\014=JJ\361\274\335\270T\275\265AI\274\200\177\221\274M\240\321<\014\252X<3\'\357\274\355\025,=n\373\356\2728p\210\275\017\233\322=\277t\222\275^?\241\275v\370\226\274hg)=\307\232\177<\253\312\226\274|D^=\223\335\214\275\356\"M\273y\214\273\275B\226\242\274\366-\257\275\305\233\343<\212h0=u\262\276<\331\206\\<Z\246\022\275)>&;o/\025;\355\363\217<\252\350Z=\001\317\036:\027k\247\273M\227D=\023\302\036\275\201q\033\275 ~0\275-y4<\255z\372\273\370\001\327\274G\003\310;1Z6=X\250\234\275=c\013<n\n.\2751\272n;\355\000\017;a\026\r\274\374}H\274\210\333\034\275\230:\t\275Bs\306<t\271\037\275x.\256=P\300\205\274\305\343\021=\360\371\313\272?\305\210<\315\221\017\275@\276y\275\t\351\216<\337\263\034\275\263\370\203\275\366\362\273=\220n\333;t\021\215<\212,#<\212xH=\034}\220\274i\312\014\275\234\262A<\247\357\277=\300\374\226\274\233\342\031=\034d\244<\231_\343\274\331\335<\275\014e\255<O\312\263<\266)7\275~>\177=\336\257\361<w\026\270<\372\234\026=\023\241\222\275\274W\266<^\246q\275\032w\362\275ar&<\304@\362\274{\037\232\275\367\277\000=\255\310\243\274\307\rd=$\2369\275\004\036\177\274-\335\255\271\254\034\325;w+\363<\363t\322=\352\205l=:i^\274\350\345\367<\021s\201<\264b\277;\227f\216<\342\221\001=\357\236\033=\210\205\030\2751\";=F~v\275D\331\377\274\275*\314;{\335\002<\266\2650\275\324\223\351\274\301&\006\2735\3739\274\n\242\264<A6\020\274&5\206\274\264A\014\275F\230\201\273^\202\276\275\225\332\035\275\016\252B\275\006t\177<Dx\354\273;\3075\275\245\253\246<\340\314\227=\3322D\275\025\225\303=\357lf=\274\301\'\275\010\r\013=\237(\000=\301\240\246\275\321\307\222\275\222+\001\274\341\022<=3\247\022\274\331\247\254;\331\327\230<4\006#\273-lH\2746\311\021\275\261I\277\274\337t\220<\255\222\205\274%\021\223\275\200\272\273\274\353\260\304\274\254{\261\271u\352`\275\323\013+=)\371\\=\226v\032=o\034\241\275/~\022=\227\035\267<\207\247\251=\2741\326;o\033\001\274Q\270\247\275\363\271q\275\350}Z\273\204&\214\275[q\025=\213\263\212\275\260]\206\274\235\317M\275\261\363H\275\352\020&\273\022\226n\2721\007\206<x\252\026=\366\274\300<\266\335#;\000\365\215<\220N\204\275\304v\005=)\223\230=\213\311V\275;\370\241<J\304\316<Q\301\001=h$\216\275GU\264\275\017\207\375\274P7\201<k\365r\275\262b\017;\307Q\t=\tOu\274U\201\033\274\264\010\241;q)u=*N\237=\372\252\004;b9/<\225\342\017=\367,\242<\316c\010=)\327\246=\301J\030\275\321)\021\273\363$\374<\036<l=\316a\013;\241\263$\275\264\314E=j\267e=\307V\346\274\312eE\2752,K\275\266\234#\275\001\203a<\354\316\267;`\2404=\347\275;\275\314\245o<e0/\275\362r\257\275\257\352z=\032\374\246<\253j\313=\373){<\'}t;.\3403\275ngd=\032\362\263\275o\375\330\271\263\240\255\273\256J[\275\001\362~=\346\004\201\273\312\251a=[`h=XZ \274\333\251>=W\023(;\306]Y\274q$\225\274V\035-\275\330\324\235\274,8N\275\035\025\240\273w\312\034\274\376\371\215<e\014d=^\2533\275V\345\323\275=\307\276\275\300\303\\;\341\227\203=i\177\353;z\201\265<o\241\203\273\273<\032=\030\331\234\274\235\244\270<\025@P=\340\354\222\274\275\262C\274\372\010\270;O\0322\275\030\002\306\274\241.\001\273\337N\257\275\ts\n\274x\364a<p\247\006\275\037\262\253\274`\036>\275\261o\002\2735\231\305\274\215\214d\273\376\233B=\035\232\225\275\216\327\343<\242\331\332<8 \310\274#\347\220=\r\234\255<N\222\221\274\255\3740=$b\"=\001\273\325\274\207\324\225=\257\331\316\270\177*\334<\211|{;\343\241\307<\225\353.\273\001G\244\273\356\341\240<ha\327=\355!\207\275\246\260_=\324\227x<x\332\023\2755\235\373\273\313\"\263\275\035:\270<\251X\030=&\312C=\313\035\233=\262\250\224<ha\200\275 \244\253=\014#y\275c*\212\275($\307\267\230\366A=\0341\267\275\333\255[\273@u\010<\241]\326<\206\220/;0\000\332<-\321\t=\211\333\261\275\034\344\010\275\232\033^<\337\242[\275R\245\257\274`\272\302<\361H7<x&\000\275Z&\346\274\232s\224\274\317:\313\275\014\213\303=\253\010\323<*\307\224=v\374\027<\021AJ\274\341\223\207\275\276\234o=\215\200\350\273\004d\240\274]S\302\273\351\371\273\273\254h\322\272Z\375\335<\006\355C\274\237\364\257\273\223y\261\272\363X\224:2\336:=\310\272\216=\254\265)\271\3352P\275\347\217\231;\177PP:o\225\350\274\357\021_\275{<\342\274\377D\233=\0266D\275\266\\a\274\362v&=\177\356\037=>\2744= \031\246\274\263r\257;\347\204\007\275i\225\270\275\030Xt\275\344\362C\2758i\343=\034Q\025=\030\305h\274~!J=c\213N\275\343\352\260\275\272J\307<\230+\264<8\275\340\274\202\332\335\274x\002\311<X\001\323\273\027\344\271\272\377)\263<\031n[\274q\025\322\272/\251\005=j%3<\002U@\275C\177\203;\023\010\206=\234\364\025=\353\331e=\214<\204\274\351F\341\274\236\341k\275\236L\215\275p\"\242=C \375\274\"\271\263\275Zx\005<)\270\264\275w\013\n=G\352\205=R\276\344\273\274NX<\301d <\371x\020\274U\007@:<:\306=Y0\261<!\345&\275\360\247\303=\367\376\006<\311\272\363=s\343\206\275\221=)=\326N\336;d_\267<\001I\263=K$\203\273)`3\273\274_;<]\202\210=\010*M\275\200{1\274\245\244\272\275\322\303\263\273S\322\025=_\010\320\273\'\221W=\017\211\217\275/\314\333\275\235\222H\274}.$\275\236P\002>\277\031\225\275\022nz\274\313\022\252\274\221s\272\275\241\214\257\275\016\224\030\275<*D7Ws\303\2747\362\036\274\2011\337;\256\026\226<\276z\007\275b\023\313\274\350\254\3439\003\253\031\273\356(\221=\265\330A\275e\325\270\272\346O/\274|W\203\275\367\006\341\274(\016\036>/\336c\275h\211\017=\203\035a=\303#3\275\3036\205\275ik!\2741\020\r\267\334a\214<\\zQ<D\225e\272\342\305\302\274\037\221~\2748;\300:Te\200\274\217\2635=\337\312\245<\371\342[=\274D\244\273\321G]\273f\365\010;\360iN\2750\257\017\274(>\301\275\000J\327\273\\\021\023=o\227\217<\003~6=\352\360\257<Xi\335<\334K\307=\'\253\013\274\351_\311\2744\314\314\274\2673\367<\n\235F\274\334\267[<\236V\302:\003\313\317\274\324\213G\275t\030;=X$\245\271u[\274=\344\334\241\272^\211\n\273\032m\322\274\233XI=.\021\024\275\354hs=\033\316\357<\242\241\363<e\200\213<T9%\272].8\275\t\323x<\311\356E\275\221\244\212<Xo\002=\314T\363\274\203\326\3729c\226\326;\376\243\264<\266\273\315\274\306T\224\274,R\230=\005\367\221=\206\000\023<\311\032 \275\034\210M=!\230B\275a\224\273\275a\n\362\274xE\021<\304\3408=n\013\337\273zy\346\274n\211<=\214\270\331\273\241;\177\275.\305\227\2737J\020\274\203\337\017\275\263\261\300=\223UM\275\022\301!\275\260\206$=QD\007;\246\276\r\275\362\030h\270\300<D<w\250\025=\222EX\273\351\220\363\273G&6\275\337dG\275\224\225\264=\243ua=\001&\327<\253/\013\272\341dS\275\244qH\275T5\354<\276W<\2751\003I\275B**<\2266\227\275v\272\307\274@\324\275<\301%l<Nz\250<\332\2161\275\362\251\270\275\316\232\322\274\331tK\275`\003\246\275\343\317|=\220^D\273oy\234<\237=\021\274\350\312\212:\377^E\275c\004[;\256\246j<\004\002_=\367\014\205=*\375\364\273\023\032\006\275j\321\256\274OO\250;\241\252\022;`\242\355<\377R\266<\361\204\270=@s\353\273\326A>\275\242\340,=2\236\273\275-\311s<\233:==\355\316\256<\230\354\373\274mCI\275\353#\037\275%2\222=\342\341\'\274&\336s\274w\276T=)\273\330\274v\353\202\275gh\'\275|~\200=\016\023K\275\301\305\037<\223@k\275\013\240\334\273\035\2208\275\220\341R<\377\206H\275\302S\212\274Yy\211<\331z\310<\226\311\361<\324F\203\275\221n\230\275\317\347C<K\234\325\2742\024\2219&\250c</\204\267;\272\021\024\275\235\206.\275\222\001\215<iUR=Z\023X\274^\317\r\275\210\205\270;\252\347\274<\266\\+\275=\256\344<\024*1\275\201`~<\237\265\000\275\252\270\020\275U\213\"\274\3612{=.r\257\274\242\307\263\275\224\347&=\201m\307<O>\306\274\361\017J\275\n4\376<\264\225}\275\330\2757=\244A&=fjh\275\241\232\315\275\366\301\330\271\234N~<\352\010\363\274\021M:\275\037\036\330<c\375\371\273\252\343\345<\307\017\004\275$\373W\275-7\263\271\357\277\240=\303\014\032=2W\213=\021\251Q=(\233\226<\220\341\221=\213\354\207\2751\317o\275V\314\303;\350\024\260=\023\260\306;\331/x\275\212F)\275\021\270\221=\307\277\200<\226S\003<]\335(\275;\261\347<\336\240\001\275\\\237\005\274/\270\262=\370\364\211<`9\032<c\235r=P\231a<\231q\344<\"\013\017\275\275\342\246\274\233{c\275|\321\217=\243\355\005\276\245N\3238\315t\351;\362T\350\274\344\020\242<\232\324\254=*\257\025\274\026\277\253:_\343\345=\355*\263\274#V\301<\031\256\262\275\031\242\006\275+ \337;4\254\344\274L\301-<\350K\303\273\317\263R\275\374\222K\274\177\260Z\275\310\312#\275\021\220\222\272\345^ \275\224V\211<K\234&=\364\234\035=\245\312I\273\235]\021\2758w,\273\354\215 =\327[\357\274\251\3375\274\264\177\000\273\244\346\r\275\355\013\202<RBF\275\307\342\246:E\233\362:4K\341<[X\364<W\001\213\273\263E\361\274A\005f=r=\331=\317m\272\275\027\215\230=m\220\215;\342\017\270\274i\265\371<\257p<=g\243\275<;\3030<\302\007\026\275\215\007\261<t&\017\275\323\320`<X\"\2418 \301\255\275\0138\t;\331&<=\237ff\275U\226\263\274\363\332\321\274}f>=\027\r\242;;\310\036=\245\353B\271\202D\"\274`\274\177\275\306A\025=\340\200\037\275\344\321\241=\325el\275\364j*=\035F\267\275\205\2127\275\373C&\274\re\353<+\035\177\275\260<\353;\227JG=F\241A<V/\363\274\276\327\271=\303\353\234\275\331\342M<\226\002\034;\024\3036=\032I\211<\271j]\275`\323\250\275(G\270\275~\001\211\275f\304,=|9\004=\227\370\204<\345\3002=?}<\275\367\223\024\274\373\021\222\274h\037s=\376\'Z\274\210c\024=\336\233\020=\033\2719\275\226\030\354\274gc\023\275\317j\204<\365\326\234;k\252\202<f\210\256\2731\322\t=+\227\213\275\214g\206\275\341t\007\275x\1776=\210\232\275\274\257\317\014=R\017E<\256\n\374\274\236}\242;\320\316\252<\346\237\253\275I\373\227=\371\375\2648\300j]=6\256\030<\241\t\016\275\235\345\275<\371\010\"\275\0313|\274\331\013\014\271\354\014)=\2542\014=I9\255=\237\256o=\344&k:\005\027\200=\266\372F=\360EW\274w1\236\273+\r\336\273\375$\221<\262#\202\274\225\375\375\274\212M):\305\177\354\274\347\214\232\272j\352\035\275P\371\266\273\366[\276\275\004u\021=O\374\205\275\2023_\275\313\250\250<\264\004u=\363\317!\275\362\376\000=}\305\272=\321\361\272\274\201\251\006\275}c\251\275\342\240R\275\275;0\274\367\325e\274\300\370\225=p\341\016=\366r\307<\267h\245<\030\2425\275\037C\013=\313\200P\275\006\314`\275\322\000\000<\271\366\n\275\032\335\201=\273\230\322<\215\205\033=GV4={XP=?%\031\275\365\002U={\372\030=`\262\'\274\377g\"=\253\337\n<\001\201H\275\223xc\275\001i\255\275\234\215y9R+\357\274\244kb=\013w\355\274\201K\303\274\241\244\035=\306\240d\275\373\212w\275\r\024\021\272\216\356r=\230\246\231\274\307\246O=T\356R=\033RA=\306\240\331\274$\215g\274\264l\233\274!R\266\274Bl\343<\233\320\247=DM\222<.U\261=\3757\216=\035*\017\275\332\032\364\273I\371\235=\232\331S\275#\313\377\274\213gO\275g\367\017\275\273T\200<\220\307\323\273f\311I=\3244\207\275\237\003e\274p\035\326\275\220o\206\274\005\352\30798\365Y<\374\304\241=\030\216g\275\206\3451\275\326?\336=\272\004\037\275(J\206\274g\333\341<\240\371\333\274.\001\243<\026\207K\275I\337!\275d\r\036\274\270E1\275\351\337\343\275H\"\342<\223\244\035\274\314[X\275\330\276\030\275\315 \221<\335Yh<\022i/=\240\t(=\300\001\003\275\001\256\363;]\367-=_\0274\275x\251\255\275\233\201\020\275bW\263\275}\252\340\273\274~\303\274\262\213\"\272#y\023=<Z^=\315\213\313<\024\027\315=\3012\301\274\200\302\336\274J\000\251<\300\307\202=l#\225\271\035z\313=\353\263\037<\253\255\306\2740 \332<\006G1=\322\327\361\274\242\205N\274=c\247;9\215\226;H\226\010=\310_>\273\303\245==\365c\241=\372b\275<\004{\221<-p\375\274\321i$=Of\210=A\325\342\274\260\010J=\216mG\272sF\234\275\244\334.\273\353s\354:\3261\230\275\177\036\371\273\326v\225\272\262c\246\275N\325\231<\026\262\204\2736\345W\275\2325\212\275\212\207;\2750Z\271\273fC\303<\352\001\222=\314\267a:O\362\024=\200\3543;\345\327\005=)\"I=\223\216*=\2320\246\275\217\362\232<\247\0032\274\234\205\211=\371\374\362;\356\217\030<]\265\\\272\326\365\010=\303\343\324<^\025A=r\211\272\274\207\261\177<-7\366<\363\021O;{e\201\275\177\327,\274\t \027\273\242w+\275\331\245<<\256\n\214\275\336=\276\273Ky\002\274\361\337(\275\270\212J\271\242\'\245<Rx\032\275\322%\302\274\271\366\231==k\010\275\235\000\202\274\n\206\020\275p]\327=O\315\000>$\336\n=K\253p\275\212\016\021\273\356\031\254\274\260v\275<\256\t\271\273\237O\227\275\213\245\256=\207p\307\274\200A\252<\325}\237\270ka\275=G\206\234\275\017\215\213\275\324\271\361\274\252[*\275\2020\226=\236)H\275\035W\201=Ov\202<\377S3=\237\273\n\275\232be;\017\234\236<\013!\201\275\233v\013>=\024y=\322\327\233<o\253n\274\235\000\007\275\336\332);\244\206\256=\t(_<\370\243\354\273\273\016\207\2756<q\274HH\272=\016\325\266<r\345\335<\'\317\035\2757;\302<\243\027\035;\343\213\245\274U#\213=%\223\254<\032\232H\273>\247\312\274O\213_;\217\005K=\302\\\337\274\313\027\200<Kl_\275\024\222\226\273s\0334=\326Q\336<=\226\216\275C\017\000=A\017\327<}0\217\275\377-\347:\270\337\177<\211w\271=\263\311\n\275\006\264Q\275\006\363\245=~\223\027=!\034\n\274\311c\357<g\257\271<\264\355\007\275\2059\221\273\323B\214<\177L,=\265 \314\274\227\247\362\273\215]7;M\371\354<\252\337\007\275\255P\362;\261dY\274\327j\203\274\250\224\212=`\365t=0\346,\275\3679\213\275c\336\355<xf\244\275\233\036\221\274\017\275\316;\206\246\353=\261\335\210<\266\361\244\275\032}!\275\260\026\033<\335\0356=\253\0335\274Rk\001\275\2671\017=^\233\204\274\245\010\301<\245\210\376<\265\023B\275\350\026p<z\3477=\207G\322\275A\335\247\275\240\316\002\275\310\026R\275x\240-\272P-D\274c\242/\274b%7\275_\351\274\275\225\245\227\275\241\374\366<\\p\263\275\263\3710\2750w\013\272\025hK\275U\243\3419\034\237\230\275\ne\240<\331\347\200\275J\'M\274\227\004\225;EJ\312=\036\245\323\274\325\200\277=\237C6\275Z\216\246<\363\336Z=\315\352\215=\217\210\2079\177\003\017=\252J[=62\003\275\007\346t\275\333Z[=\367GL\275\037`\275\274\330\204\263\274\200P\243\273\r\340\272=\014\260\266\274\260nC=\371\204S7-\025/=\314\327y\2743\266\236\275\317\033\010\275)O\321\275\245\'`\274\263b\325<\243\023Y:\265o)=ir\t=\304\2605=\217t\252< \256\353<\315\377\262<<BH\275+o\323;=\237(\275x\266\005=\347%\373\274\207\1777=\332\236\017\273\335\261\312\274m\350Z\273\2132z\275\225\203\234=\0334?<\301J\254\275h\033\353;\001?\370\274\033\3337\274|r\374<\324\372\003\275!\315\224=E\225\261\275\244\322\377;\216\242\256<\203c\221<\346Y:\275\215\360\010\275`\265\217\273+\022\212\275\367\016M<Q\214\323<\230\002\254=|\213%\275\314S\006\275\376\233%=\021L-=%\246\341<\243{l\274,5o=\004\306\246;\3210\224<\304\342W=;\312\n=rS\334:\322\214Z<\034\243\021>\263\341_<\342P\376\274\351\323\212<\030\024\027:\316\207\316=\201 J\275=\243\245=\001\023z\274\353\233.\275\244g\025\275V\270\341<\360\351-\274~C\226=\310\005\361<Wup=\211X\267=l\300\214\275H^)=\373E:\274\344R\027\275\210WZ\274pD\t\275\036\372\220\274\325^\327;&<\361<\340\370\253\273,L\\\275\214\342h\275x\0269\275X\003u\275 <h<E*\245\275v\007\202\275\021\256\n=\367y\252=\315\202M\275\024iS\275z\027\362<UVl\271\302U6\275i\025\031\273\001\245\232;\313\367Q\274o\265\324<\303\344\215\273\315S\020=y]\212\274\323\277(=*\021w\275\352wJ=\216<\014\275#\025\371\274<<\230<\377MS\275\305\236\233<\014Ue\275\243\243\276<\021\276/\274\210\352\214=\307\3719\272E\324\037=ks\037;\301\267\013\275\3406\344\274\274\214\231<Z\257\035\275\350\033\030\275H\267:=\240\274\027=\330\225\322<\342\230\016\271\003\274\033=\024F\363\274\370X\327\273\372\357{=\001\177X=\3634\204=a\2151:?\032\277\274y\005\355\274C\336Z\273c\227h=\271\373 \274\375\224\221<\032\006\'=;\366\003\275\225D\254=\000\3100=\236\322\202\273\272\0352\274$S\335\274\271\001\202\27540\216<\212\300m<\264Xs\274o}\030\275,\254\027<t/\325\274\247\211\250=\350\000\377;$\336\036<g\027\032\275\343\236O\275x\214\324:\200,\310\275\271I\272;\241@1\274l\273X=\264\004\202\2758~\244\275P\027\017\274\374r\323\275\361\345\235\274\217)k<\037\375H\274[y\235=\327\227\204\275=73<\337\261\033\275\035\363\202\274\n\304==B\224h\2753=?<3\256\365<\330\256\252=3X\020\275\333AI\267\205|\207\275\367\302\t\274\306\366\330\274\\\320\205;[\037\243\274?Aa;f\251\263\274Wy\200<\213\261J=V*Y<3\203\002\275Z\215\344<\336\241\313;Dm\312\274\344\3721=\311XQ\274C\334\336\273\323\337\026=\237\301\316\273zDL=\023\374)=6\332\211<\000~I\275 :h=\347O\253;\031O,<.\000><\247\214\003=\267b\350<\341\353\243\272|\004\177<\3602\016\273;9\372\271\024=\316=\270\243\261;\371~\320<q\310I\274\203+\200<1\301\337<\374G\206=\032\373\341\274;z\266<:mf<\331s\251\275.\312-\275\236M\221<\322\221\253<\264\021&\275@36\273\027\001\343\274\005\322\022\275\362\365\223:\274?\203\275(\350=;;\270\300\275\264\360{<\022DW\273\010t\210=\2775\004=\n\356\370\274\364\366\355\274\366o\227\274p\363\221\275\242cq;I\213\221=\337\363@<\323\321\033<\3235\177=\262\002\243\275&B\261;\300#\225\275\357\343\227\275\001\203\222=C\004e=\247\263g\274\264/#<\013\303\005=8\340\214\274\221\005\374<<\2416\275\224Um\275\316\013\315\274\223\261\026=\327\016\327<\336$\237\272\212(#=s\024\217=\260\365\351<\225`\003=\273\371\036=\036\354\231;=\244\363\274\317^\274<\220a\\\273\302L\201<\002rF\273\n6\2338)\253\225<\315,\335\2753\013\232=R\353\263\274\003\"4\275C\356I\275\303A\252=X \336;\242\264\231\275}a+\275\246\017\025=E\347\267<\266]#\275Hc9\274\322\314\240\275\035d\007>T.T=\206\253\257\275\352\346\362<6\r\016\275HD\362;y2\230\273\201i\254=\010\320.<\002\365\314\274\312\331==k\233p\275c\326\275<\367\2318\275wC5=B\345 =6\nY=\330^\377<\024\350\257<x\342\010<\030\254\231\273a)b=`Gf\274T\306(=\323W\021\273\253;!<\244L0<S\331\213\274\233\366\351<l\347\313\2740+\230\274A\361y\274y\204\216<\211\213\"\273Bk\344\274r\236\305:\253\333A<\177\204V=\232dl=\033\023\032=\014\313U=\274\226\025=_\013\311\275?f\256\273\267l\254=*$l\275\014\252\224\274\273\205\267<.S\221\275\365\010\236;W\350\277<oh\271;$\354\';\177F\211\275\217\031\377\273\352\376\022\275B3\321\274\035j\031;\224\224\237=\224\307X<\024X1<9\202m=x\265\031=A5\024\274\363\262=\275/\353\212\274\034\014\307\273%\360_=J>\372<g\223\000\275P\315\313;\300\023#=\237k =\343`Q=\223\315\023=$&\273=\363\254\301\274G\372$=\314\335\002<)]\233\274 \230\030\275T\212\323;\360\025h\273\312\310v=\206WV;\t\211r=,\213\365<\241\334\227\274\373\340\275\275\237\260U=9\021\322\275l\3529<\333\373&\274c\320\237<p\353\260<\342\2725\275B\341\277\275\220\226\213\274\263\324\215\275\331BU\275\351\037S\275\250\3533=p\315\016\275bj\"=\016\303\r\275\203\'b\2743\371\267=\242\256\263\272\016\037e=\200\316S\273Q\227\211<\031#\317\274\324i\311<\372\025[\275\017\261\356\274\224p}\275l\374\330<\035\335\364;\366\017R:*=\010=L\3124=n\3401=K\375\210<\013\327\356\274\204mq\274\376\277?\273\301y\000\275\275\376\276\274\272\276j\275\216\332\203\275\206\215\265<hW\227\274*\2307\274\347\305L<\232\316\375<\256\272\021\272$\226\034=\022\303\020=\352js=\225C\006\275\2761\277\275\037\277\t\275\225\321\274<R[9=\260\022v\275q\343\"\275\345\340\305<S\010\020=\367\323\354=\370j\330<\356T\203\275O\360\242=5C\322<k\033\203;-\262O\275\372\2572<\']\001\275\270\003\267\274x^\324\275\240\344\227=\027\322u<\027w\007=\314\tw\274\222\"\004\275\360 \223<\334\226\333<\356\326\235\2753m2;!\234\213\273\325\344?\272\250\' =\202\221\241<CK\335<\177\034\311<\034o\032\274!E1=\254\026\263<\253FJ\274\020\023\021<\017q\317<\237\323G<V\021x<\254\013\212\274\031\024\322\274\241.\252\273=$;\275\263\334\363\273\343f\360\274\346\214V\274\222m\037\275\330\275\032<;\252\253<\344\331\320\274\215\217\233;.\212\315\274}\213\022>T\343D\275]\315\230=\331\304}=i\254]<;\205S<\310\253p<\0023\347\275\351sx=\257\367\241\275\2657\240=1E\206=\206S\005<\253\204\300\275\216+\321\274\223n\370\275\"\363!<ZI\235=\3351\313\274\344Q\r=_\250\244<\330\037\247:\217\260\216\275\370\263\'\274\230\264\214<\302%\022=\272\306\211\275\356\251\241;2\037\342=\303f\247<\326o\033\274\007b-\275|\343\256\274\357\'\377\274a\201\016\275.\035^<m+\330=\224\3072<\005\337o<\274\221\032\274\001m\240=Y\363(\274F`v=5`\326\274\261\336\033=,\247\"=\235\356\031\273\t\262\006\275\313\303\243;y\310z\275\326\027\377:;e\232=\2212*\275i\275<\275o=\265=\377\210\202;L\275\200<n\344\340\274\222j\213<\027\276U:\371b3\275\244{\037=n\354\242<\240\337\310<+\216\237\274 5 \275S\342\270=\356H\215=K\233\206\274\225\177\271=R}6;\253^\220<iL\353<Ow\267\272\334lq\274\302\256L=k\241}<\2270\245<\245{\231\2746\236\212=k\017\010:\232\333\272<j\273\332=\200p\330\275\276\210b=D!g<bI\257\274\365\325\336<@\300?\275/_\344\274*\025\243<\247\306L;\252\375`\275\022\254\256\2746s\255\275\013\276\200\274\3258\251\274\025\200\237\274\376Y;=%\t\221\274\313\027\364;]\246\016\275:\007\016<\277\304\313=\336p&\274[\277\201=K0\206\275\032cm<\325\304Z</\007$<\356\023\246<\214P\305;L\033\005\275%(\315\274\210\025x=\357\300\215=U\221V\275\363\ru\275\314\001\027\275\273V\203=\273\375\244\274\323\271\205=\247\240\033=\022\224\273<\250\221\377\274\334vi=l)\235<\033\326?\274[\"\347<\234\246\254=\257\014\266=\337\032\\\275\215nY\2739\3110<\337}i=/\222\240\275n\260\007\275\017$\240<cm\240\275\265\375\371\274\334\232\266<0\365_<_\006\205=q\307\013=\364\2140<\276\336\202\275&\244#\275L\001\231\275\372\323\233<\362\352\304<\242>-=\000\234S\275\202\373\244<c\234\006;\031\376\207<\206\356q= \010\006=q\243\253=u\177\237\274c\270)=\221\267\234\274k\007\251\274\346A\255=T\001\250<\226\003\342;\375\316N\274\013\313\311=\223\303\374\274W\236\211\273\"\007a\275\345\2408\275wD\233\275\212C&\275\244q;=\204\024\277\27444\351\274\303\251\232<\234\327\233:\225\250]\274\213T\267\275\366\277k=s\'\000\275#\220\267<(\225\035=u\202\245<\310/\271=\220\362\244\274S\220h\275\037\274`=)\200!\274\311\242$\274Cm\037=q\305\321\272\t\003\226<\214JC=\361\365\217\275\237\335\214<q\2527\275h\301\033\275\024\363\321<\235\253\373<\345\372\216\275\025\264\243=MY\n\275\313K)=\221/\030\276\352>\205\275F\360 \272}\332j=\365\032\233=a\377\227<\224\322Z\274|\'\014=G9r\274S\201\300\274d\255\031\275\301&\177=\375[\035=K\325\356\274P\354\307<=`m;\367L\335\274\202\236\312\274sL\357\274!#\221<\343J\215\275\300\273\014\274U\327O=\332t\232\273\345\360.\275}\264M;\267\342G<\246\241\027<3\223\225<\307XY\274\264\021\001\2756\026\\=\202wT\274k\340\255<au@\275\343\374\355<\230\261\220\275L\341\276;Q\216\250;\036)\327\272\030\242g<@\337(=\215\017\374\274\347\327\007\275\307\037\212<\244\334\377\2747@\223\274^\304\345;\'\203\231\274\2115\027\275|\347h<^\317\307<\223*\004\2755\304\347<\226\374\243=KF\217<K\235\207<\322\371\253\273\014\330\316\274\001\310\020=n\317\370\274\251\330\270<.\220\244<\327\260\001=WH\201<[\251]\275\221\271\0309\312\253\372\271\027\243\246\275\236\034\021\275n\301\255\273\235\252\231=\334m\010=%B9<\2554\310\275\311\034/=p\305\364\274\373\353\241;\031\350\207<\215\032\n=+8\025<\242hy<\341\\\215\274\2546\031=\364f\312<\333-\002\274\345\221\355\274\376\276\230\274\242\333\321<hw)=>\300\314<|`\306;,\307\034;|[y=vi\213\274\307\302\001=\177\274\330<\255\335\310=\303B\203=\213rV\274\"[\204\274\006\023[\274\033\273]\275\301\214\025\275\265\237F\275y\222\026=*e\357:{\331\023\275N\360\263\2748Pl<cK\201\275\310\262{\275\245*\311\274r,\306;\342a\025\275\233\215\336\274\210\277\301\275\247\331w=\220Z\031\275\202\311i;\375\331\240=/_\370\2747\200\266=\"\245\017<H\344G\275\216\031\010=D\205-\275_\220\362<k@@\275h\313\013\274\375\276\345\274\254\207\267<\257\0143\275\215\372\360;\266\000\022=\002vo\274\212\036\017\275\225\336\311:\317u\033=w\331]\275\214\244\216=x\363X=a\201\317\274\221y\307<\323L)\2753>\004\275\034\2022=\372\324x\2752\253\252\274\007\032\031<d[\244\272}\250\371\275L.b=\350\267\017\275B\016\"=\240`F\273\237\272\335<\211\031\001=\017\017\005=\243\327\272<\001\021\231<\257\223V=\251\032P<\225\344\217=\361\236\244\275\311/\010\275\330\243\017=\2773/=1Z\004=\253\357\325<<\303\255:\010M\343<\212f\240=\347\201\314\274\271>Z\275\335`^\274>2E\275.\250\031\275\'\036G\275\266\3621\275\010\372\362\274(\312\360\274\223.$=8S\350\274\'\221\025\275$\215T=\034\343\002;\371W\001\275e\177\263:KG\347\275\256}_\275\'\351\210<2\261\035=z\225\332\274$\177\246\274\300\266\213;\257\325\343<O\370\225=\256\001\333\274q\017v=\335Z\361:\273_:<\343\317\'\275\3074\222\274\216\016#\275\237kg\275\377\300\034=\210\245y\275\330\002\010=5\201\260=\027\205\366<\337\362\357<\250\365\245\274\353Q\231\274\252\357\273<\2155\276<\355\rS\274\374\205\n=\210A\026\275HA\310\274\252\303\347<I\272\2349d\302`=\031^\242;x\013c=\241q\226;ep\022<\362M\334\273\301\331\036\274B\003\274\274\212\343z=\375\n\222\274\340\375c<\217\350\016<K\343p=\010\247\000\275D)_=m\236\177=f\203\034=\265\'\207<\371U\215\275\324+\234\272\254xX=\346\353\376<\302\227\024</5\'\275\220\342\326\274rA\024<\026\230@\275\"t\246\273>\220\360\273Jpe<\372UD<&\260!=\026\2067=\033\3250=\005\n\256\274\252\364\373\275\320\372\354=7\315\205;-\356\223\273XTy\274\023\315P\274dZ\217=2\311$>?0H:{\234\357<\367\244);\244\232&\274K\034\027=i!\230\273\255P\263\274\302\034B\275K\300\260\275\223\274_\275)\230\326<\230\260\\=cI\363;\373\314\221<\373t\357\274\000;D=\366\213g\274\236r\356;\034Wq=\020\361\260<T\265\313<\352\335x\275Z\340\216<\005\324\204\275\021\344\360\274Y3Y=\254\372\005\2758\t\250;\270&{<\2064\026\275P?s=uj\241\273`\244_\273yl6<voK\275\271\034\324\274\025\213\351\274s\257\222\273\323\377\364:W\260\004\275\202\254{=\304Lb\275\350\301\242\275\235W&\274\263\335\r=\tBw;\303^{\275x\234,<\306.\331;\037\237H=\363\310\202\274\234\360\033=\264m\307;[T\371\274 \240Y=}?n\274co\016=\306\n\374\272s\202\257\274\200iK<nt\022=H7\224:\224\344!;\236r\006\275\362:|=\013\232\253\275c &<\322v\267\273\220\336\223=p\374#\274\243s\303\273B\035f\275\376\205r;]\372\350<_\204b\2750\253H<\303\306i<\243\351?<L\210\037=\242-U=Oc\037\276\342q\327<\266\013\006\275\306\247\311\273\355e\255=\351\t\n=\000\257\r\274g4\376\274\004O\200=\010T8\275\307\227\021\275Q\014\260=\3533\272\275:\364\006=#\007\n\275\001\325\003<(]0\275f \223<\353\030\342;\357NS\273(J\345=\207\364\222=\207\337M\275w\334\356\273F\321A=\2057\302<I%\217\275\246\310\325<tk\371\274(d\355\2747\304\200=X\277\027=\217\210\246\275t\002\253\2751\221\365:^k\217\273\254p\203=\2343\206\275\034$7<\rM/=\322\237A\275\th\373<g\302c\274\215T\r=\240\240.=\352!R;9y/\275am\214<2_\206\275gBn\274\005^8=^\307\340\273\216N\201\275\251\253\205\274\256\226\250\275\222\034\316<\342\t\227\274g8\265=\246\361\220\2755U\224\274J\361\354<\n]L<8\353\007\275@\\};c\026h<\351\r\350\273\254z8\275\017\210|=\204-\002=\322%1=\371\351\250\274\036G\237\274\215\271\251\275[\226W\275t\265\311\274\317 \250<\235G4\275\262\325\222=\246\337\034<[\236|\275\304\333\370<\225\002\312\274\363\3710<\023\031{=\356\3537\275\025\024\203<\337\372\274=i\023\303\274\235N\215=\023B\017\2759\211\220\274\256\274\213\2758\246\234\274\272\247K\274\314\356\263\274\346\212\025\274.\323\030\275\334\330\354\2759\026#=\023\312*;j>%=\363\n0\2753p\217\275\310}1=\244\2058=@/\021;5\021a\274\244$\374\274\244\026X\275\355t\006=\243\237\007=\244\212\263\2754\243\247<\314\'\263\274\303\256\305\274\352\337%=8\221\034<p\006\331\2740\360\300;\347_{\274g\272\341<\014B\313;\270\371\330;\203\360\323;39S\274\016\034\n<b:Y\275\020mH\275\375S\245\274\332G\222;\244\201\250=&k\007\275\351\021?=\355Q#=\311\344\234=\2636\026\275\022X3\274$\r\270<\tQ\332\274\2139k\275\002\333A\274K\240\374\274\'\004\363;8ME\275\255\247\255=U3\016\274u\261]=\3043.\274\267(T\272\301\206\322<2o?\275\350\004\002=\312d<=\330\251\304<\263\253\350\274:\275h\273\002\261B;e\027\376<ur+=0\270\212\275\337\013w=\345a\206\275\360\340\244<1\332\033=\206\255z\275\374\212\241\274\206\253\335;\256tM\272\345\2562=n@o<P5\274\275R\252\n\275\273\0326=V\307g\274\2577\221=\3053\224\275\212L\264\275\225\034A=\310v\360\2741\267\330\275S#Q=4p\237\273R\002C\275\323\313[<\251\224\237\273\2272\212<\344A\221\275C\202\023=^\376O\273\2426y\275\214\020\027\274H\263o=\326\275\277\274\200\006\027=\205\272\177=\355\333\000\275?^>\275\021T\032=@\242\246=V\321\201;\354sQ=\246\320\230=J\207\220\275\215\310\254\275\226I\"=~\256\373\273\354\003\205\274\'\252&=\224q\005\2755\332p<\212\371\333;u5\223<RP\202:\334\001\274<x\225?=\017c\303\273\341l\265<#\277?\275r\253g<B-&\275\335\332\276<M\223\251\273(\035q=+D\212\275x4\'=\226\240$\275@\354\027\2753b\\\275D~o<\241(-=\347\324+=\025\221$\274\"\273\340<\200K\016\274\363\372\014<\215\305\206<\245)3\274\350\021\227\275Vt\301\274\027&G=\032\226\220\274\207B^\275%.\360<MK:\274\034\335-=\347\330\327=iy\305<\335!\277\273\272\031/=\010(\027<\272\010\351<\240\204`<\025\273\006\273\3269\255=\257\274\243\275]..\274\271\235\"\275k\2779\273\311\322\216\275\036\265)=\204\'C\275\233\202\264=v\316 \275\375\364\006=\002\203\243=\367\016\345<T\246\235\274\0172}<\316\003;<v\227\354\274\246\353\352<\213\322\300\275\245\361/=\276\rs=,v \274\033\225\247<\357Ok<a\221R<\365\344\273\274\356u\362\274\033\332\322\275#K?\275\250\263\242<\321\265j\273\241\305M\273\314`\370\274y\276\267\275\254b^\275\240|A=?\351\221=~J\200=O\201\265\273/\271\026\275;N\035\275\276\243\203\275\3509+<\260-{=\237;I\273\021Y\347\274\013\242\272\274Z\377\257=1\021%=\206/\246=\004\331\203\275\222\026\260\275\346\023~<\022\243$;\301\263\213<nJ\210\275\224b\323\273!\376\036\275\224K\216\274\314\376\217\274L\250\252=l(\006<\034\323\017\275f\203\366\274\224\275\220;\265\2115=\303\271P=\270!K\275\032\347\033=\326B\233<8\263\323<\326\215\302\274\332Q\373<x\320.\275y\251Y=\237\021\203<\211N\354<\245\245\373\274\3747k\273\332\010\222\275\177\227\263=\000@\307\271bt\243\274\333\255U=\337\010^\275\335v\003=A~l=\022\277r\275i\342\017<[\325\005=\374\340\256=KD\227\274\256[/<\321\0327\275\025_\024=#\301\256\275\303%#\275GX\371\272\355\360\321\274f\217\230<S\330\351;*F\350=\367\036g\275v\350^\274\267\325J<\0266\333<\352z\214=\220\360\330;\375\236t\275\364\020\t=\241\327\316\273`1\210=\0169\372\274\\n\204<\001\273\022=\356\n\010\275\224\231m<\322\224c\275\345\255V\274\001\337,=\006\320k\275\331Q:;\3139\037\274\371\233\315<[\3364\274\235\337j=D9\203<\030\303e<\226{\027<Mt\206\275\375j\242\275\026Z%\271\353\3232\275\330Z <\021&\367\274\260\301F\275(4\217=C\237\306;\320\250\263\274\002\212\231\275\245%j:X\303\216<\211\016\311\275\275\372 ;C1\014\270\204\023\022<<3\001=\327\243\233\274\022\212\201<Ir\017\273g\345b=\200^\337\274\375F\257\273B\364F\274\037\261\235\275f\245\343\274\372k[<g\275\252=\376\224X=]\273\246\274d;\213\273fz\366<\002\362I<\2168\314\275/\245^<\205H\314<C\224\213=\307Z\301::\201\"=\272#\315;4|\215\275\266Z\002\274\006s3\274q\377V\274\227\0143<\300\203\321\274\231B\227<\242\223\024=\360\354\216\275\251\201N=\255\371\327\273\237\347w\274W\303q<\312\347Y\275f\007k\275\240\023&\274\257\301K\274\253\230\233;\371\276\010\273\206V\217<\374X\027=Y\020\003\274\305^i<\322\230j\274M\\w<WR\306\274\367p\205=)\275\276;\315\253\322\274\023I\366<\351\300z<\231)\226<@\274\200\274\375\205{\274e8\2129\005\357J\275z<Y<\034\2619\275\232t}=\327;\324\274G\034\342<\375\200\312=)\360\004\275GY\026;\220\201\320<\332\317\240\275\371\222[=\376\037\r\275\020\321U\273_\t\223=\n\037\217<LT><\206\234,\275\r\007\211\273\365\2441=\350\251\247\274\376\305\243=(\025\271\274\006t\271=\373\340e\275\024\022\235\275\250ME:\003An\275;\200A\274\tK\351:\244;\304\275iKf\274\236\305\360<3V\203<qO\270\275\3029\'\275\276\327\203=\025(\032\275W\005e=\331\362o=\226\010X\275\261\335\016=\211\300+=s\211m;\016\355\364\274\214\234`<\255!d<\253C\245\274\274\264\215<\325H3\274\240\331\\\275Te\200<\t\251\220\274\234\032\210<\020\242a=\3004\204\275\230\321\013=\033\312&=\374gL<\246\2007\273\3437z\274O7\300<\205\321\315;\032\271\344\273P\217\036=\323\265=\274()\310\274\316$i\275%\221S=\234\370\250=\267-\026<{\\\332\274\032\310\237\275M2\322\273gC3\275z\241\210\274J\030\271=\374Fg=\323wn=\323\r\230\274\272z\023\275\372\037P=\324\355q\273\265W\235=\325P-;\362{\"<Nl\272\275GLO\275\n\013\235\274\360\021P\2755\2303\275\334m\231\274\324_\355<K\271==\252\3431=7U:<\017\263\231=\304G\177\270w<\032\27470\225\274 E\372\274\004j\216=\220:\035=\304\326<\275W\013-<\234c\034<hE\\\274\366\241\241\275t\256A=2\235\253=\302D[=>b\304<!\2344=hA\027\274\371-\204;\251r\201\275u\373\316\274e\246\020=LX\226=20\331;\032\r\310\274g\300\263\274\035X9\274\241\373\027\2732J\241\274\307\357Q\274\002\'1=\355M\234<\ni\234\275\224q\001=\244\325E=\337p3\275\002\211\313\275\244\321\220<\\\003\256=\341\206M;\350\301\002<\024\356$=PT\t\275X\373\207\273\251m;=\331\013=\275\250\267\304<x/T<\334\265\025<\223\025\201<\227\324\234=\210\2063\275?\274\223=\327\303!<\306\222U\274(\022\255\274\333\220~;\304\272\031=\202!\351<\234t5=~\304^=\016\305`=F6\'\274\201\013L=\347`\265\274S\033/=3\237\177\275\223e\232\275\234P\244=\237\177\214\272_\375\361<\r\340\364\274F\023 =\006q\t\274\330\032k=\2046\345\274\276I\034;\030\227\241; ]b\274\003+.\275|6\232<?\230D=N\212_\275\003\214\244\274+s;=\207\341\222<!\365\244\274\200\304\351\274*\216A=\021V\n\274/\374b=\322\014\272;p=);\357Q\021\274\243\266\256<\326z\211\274y\'7\275\016\002\330\274\342\212X\274\347\247\247;\327\207R=F\305\354\273\177[$\275\024\263\202=\303\241\021\274Mp\t<\314\302\035<7\263\343\274\240I\020>%-_\273\342\226T\275\t\303\270\274m}\356<\235rm=>\362\211\275\221I\272=\030\022,<\001\277\226=q\347\240\273\257\253\013\274\307.Y\273\264N\372<%=\210=I\214~\275\005\235\017\2749\241+=#\022*\275\013\265\212<Ax\n\275\321\233\212\274r\372\353\2748\3075<\333\202\355\274\334\3128<\332^\244<O\206\245\275Eb\242;\017\'\250\275\031M\203\275\362\224\255\274\223\221\225=\243\206\240\274\342\236\247<7u\'<%V\335\273\3744\260\275\335\266\266\274\372\315\266\274\\j\231\275lW\361=\236:`\275EG\227\275P*\016<\035\'\021\273\266\354D=@*\022\275\232\\{<\324\252\363\273 \005N\274\211\3146\2755\260\224=\314\333\031=Ic;=\301\r\032\274\265\357\252=\206\004\321={&\004<\353QP=\204\232b=\373\016\\\274\267\375\225=\010\214\330<\315\330\225\275Hh\';\363\325\235\275j3_\275\350V\364;w\311\033;S\327\253=c|\223\274\243z.\274\2136\314=\351}k=x\374~\274~\225x\275e\333\311<\354\253R\275T\325U<\362G,=\245\232\222;\322<\010\275s\n\222\275rM\350\275\243\301\217\274\376\205\016=\002\232\233\275\216\200J;\230\214\206\275\320\245\302\274\010\016\320\275\005\010\237\274\"\251\223\274\004\014q=\"\371\246\275\210s\005\274\\\226j\272\350\217\266<\362\320b\275\004\363\376\274o\205\243\274\020\020\233\274\007\235\037\275l2\034\275\244\321b\275\035\373\311<x@N=x\247r\275!M\376\273\024\3337=\267\322+\274\020O\274<.8c\274\260\246\357\271k\331x<\237)%\275\366\352\004=$\"h\275&\024$\275\023>\255<\274\036X\275\371\345;\275{j\306\274H\017>\275\260\220\243=Gx4\272<\013#=\322\323\224<1\216\357<\233K\211;ljS\275_\273\376\274\226\177\334\275\014\362>\275\031\036\342\274B\024,=,\314\256\274\\g\300<)3\205<\204\346\036\275\363\226};\216*\244;\223|\347\274\326\313\223\273\031\270\225=\271\307\000<\257\273;=3\255\320\275\366>\207=:&\255=\275\342\027\275h\013P=\024+O;\356\255\214\273\262\025\246<dn\362\274\336\346S\275\305%\215\274\211Q\274\275\026\006$>\360\227m<\020\361\016={\2745=\267@\207\274h\272y\275\340\337\376\273\214j\215\273s\330\216\274\226\205\016<s5:\274\266)\2209|\204\027\275\000\252\252\273\307\"\343\273fk\332:4\003y\275\214?\201=V&\216\275e\211\355\274\222j0=K\231\262=Cx\277<t \324\274\363\323\311=\022\236\271<\032;\337\275 \343\211<\031\370\334<\350I\200\274,T\327\274\016\"1=\237q\330\272\323m\243\274\"/\022\275\211m\020\275\300\351\220=\240\200S<\305bP\275\307\np\273\302\305\232\274\262\370\200=\263{\355\274\341w\251\274\004;B\275\260\003\220\275&\230\242\275\262%a<%\264\016\274\005]\037=W\270\310\274|&\n\275/l9\272%\302\221=jt\"=\1773\207<\271\003\220\273-\210\215\275\332Tt=\332;\226\275\321U\262<\317\316\2228@\334\346<\374,\240\275\\\013\257;v\350\350<\241\363\207\272\341\275x<l\362(\274\370R\370<t`\306<a\001\273\274\304\245n;\331\3171\275k\244\265\275\300\362\215\275aUS\275\004\231\310;5\252e\275\2734\2729 \2056\275j\204n\275Ca/\275&\036\217<\362\010\202\275\206}\361=\000\253#<>\342\223<\306=\357=\021\356\273=E\326\217=\304,\352\273\017v\326\274\202[\224\274\317{/\275\374\226\n<\006}#\275\263Kl<>q\004<\276\3667\275)\316\235\274\216\353\274\275\013\256\023\274\355b1<\371\252\006\273\374/\205=\232\346\211:\217\243\273\273|Is=p\305G\275\200v\253;\336\243\367<\2237!\274\301\351\263\275\221g\t\274\223V\252;\033A\017\275\273o\257=\274\222\010\275\365\345w<l\207\302\274\031\3652=}\003\257<\tzG\275\363\002\201;\360i\237=\220\255\353\274\327/\373<\3529\'\275{=\353\2723I&<H~b\275\307\0332=\216\354B\275\0310;=\311I\002\275Ae\213<\205\025\347;\254\340%\275{\340^\275g\3353\275\241]1<X\367\244\275\351\023\252<u\035\223\275\333W\262\274\354\226\360<\232\020\224<I\267\264\274#\003\n=\212\342\244\274\027\0237\275\334h_\273\226\220@<RN\222\275j4\031:\227\343&\275gL\330\274\335\207\373\274K\232Z<\251\273+\275\306\037\007=\020\343\006\275\275>\306=;\210\016\275<,\300\275\330\330\t\275?\325\373\274L\376\242=\214T\211\275\363u\367<\340\247;=\"M6=x\3003\275\0048!\275c\031&\273\036\340p=\256,\202\273\234>.=\017+\267\274M\335\t\275\014\300\264\275\274W6\275/k\275=vd\210\275\342\302P=\225\226I\274\342\201\333:\225\344\026=\nnm\275$\220\000\275O\203d\275\010\236\000\275X\016#\271\302yl=\342\004g=\333\031z<\203P\212\275\022\354\264\274\321M\352\274\373\265\326<\301\366C\274W*\005\275\016\2279=pv\3119\317\227\240\274\306aM\274\253\325\035=!\037\374\273\237\231\n\275\013\253\021\271\226\367D<\360\340+:\252\215\361<\301d\253\274n\220\276<\360p*\270\201\271\177\273\256\341\216<\255\231\230\275\365\367\365<\250\3378\274\225\001\272\273\036M\021\276I\214\255<Kd\337<\374(\363\272|I\250;\316\343%=\324pt=\344&Z\275o\224\003\275\031\374U\274\254\255T<S\215u\2739\204\333\274\372\207\211;\223x\036=\211\305\014:\261\303R=\214:\315<b\033{\274\307)\316<\351(\361;\311]\346\274\r.,<\327\244e\2753\205$<\030\314\021=\202\310}=?6\222\275\036\301\241\275P\354.\274\324\315`:\231\364\201\275\263\241\010\274/\314\341\274\245\256r\275}g\332\274LC\265<\216\360\032<\245\270\354\275\230\376\016\274\016\360D=]:@\274{\255\316<\315\030\276\275\316\344m\275/1\272\273\223u\241\274\227f\372<B\005\362\272\002\313\214;\321\232e\275\3509\364\273@\340\032\275Z\302\201\275]\004d\275G\230\304<\233\343 =!\337\250\274\017\211Z=\223\204\'\275\345\311\215\274\207\037\037\274\244&\255;\243P\006\274\277\374\225\275\365\201\013\275\217\325$:\374\364\206<\200\306\271;\225\307/\275)\361<<Q\202`\275\267\3421=\217`\376\273\330*\236\275\335\215R\274\371\336\235\274\327RA\275\2625\024\273p\246\177<y\212\005=`\217<\274\244\236\264\274L\255K\273\247\233\225=\326s\\\274\253\257\246=\375\243\016=Dd\331\275A8 \275\271\327B=c-\300\274\320:\327<\323\373\270<\272\205\034<\331C\211\275\026\016\t=a$+\275\2502\t\274e\320\027\275R\014\350<\205\217u\2754lS\275\005L:\275\221\017\037=&SL\275\245+\230\275\344\022\t\273\347\325\020=\214\247\217\275\242\221\327<&\311Z=\356P\373\274zM\322<\254\303\177;\200(1\275Mb\022\275\376\343,<\266\317\260\275\332\276\230\274\302f\222\274zr\320<\274=\016=~\332B\274Q\231\305\274\357\354\034=pg\225=\265\372;<?\220\000\274\326\202\033\275\030D\003\275\372t\303\274\203H\340<\324GT\274\244\004i=X\033\014\273\212\375d<\231\336=\274\352M\007=],\224=\267\367.=\325\236\317\272[U\265\274@Vg<\"\217\215\274\010\245\212;\201\322\255=\230\207\017\274\177?\257;\3414\320<\312F8\275K2\256\274t\262\0009c\323\254=\262\212R\275\377\203\027=\026\201\007\276\003\202\010=~\244\312<\316\013\337\273T\351\351\274f\261\235=\341\324)\275\323\337\313\274\263]q\275\336\266l\275\254\203\016\275:\377j\275\355\3703;u?\325\274\374\006\307<U\004e\274\316\234\240\275.8\030=\374\210\233\274\343\321V<A7\n\274\313X|\275ib\205<\236\320\022=w\361\316<}kr=[\230,\275\306\327\332\273\237P\r\275\344\277p=\225\215\353;u\316\205\275\240q\315\274o i=\277\007\350;\237\200\031=w\024\243<\211d\003:(GN=HO\243\275S\026[=\313\266\016\275\240#\035\275Fv\343<NL\221\2750\315H\275\225^|=\021\240\210=\220\327\231\274\271r&\2741\371P\274\207\361\026\274\211R\342\274\204\tz\273\021\276k\275\313[\036=[\261\205;\177Y\362\275\372T\222\274\300h0\275\255\343\261=4F\332\274P5C<\213/?<\315L)\275\324\344 =\327F\303<}\355\237\274\230\331[=\204\363\242\2730M\004\274\\+\256\275\"(Y\274L\021c={:\253\274\376Y\264=\357\203;<\313\2641=\214k\007=w\311\235\275RDk\275H\025\354<8z\370;\014\320\255\270\021\253\037\275\327\315w\274\205%.\275}\260\230=\331\364\025\2759\235\241\274)o\224;\315\204\255<\371~G=\t/#\275\332\247\227\275K\037<=\345]f\274\354\3576=\267!`\273\205\034\206=:u\223\274\022\260\327;B\n\347<i\375y\275\307\262u;\333\303\300\274\363\003\221=;\314Q=!\362|\275\242/\305<s>\301\272>\'U\275w2p=\213\376\217<my\245\273*\325\251\275\352K\274\274\322\344\215\275\304=\006\274\260)\'\2755\003\326\273\004\360\3239pQ\370\274(\'\232=\030\306\024<\255\263\225\275\3578_\2741s\010\275SN\304\275\323=\317;\0273z<\262v\003\275Y\234H\275\317/\237\275\234\300W={\236\261\275\032\276\t\2759\032\010\275\204\2067\274e\356==\202o\265\275\273\221K\275\376+u\275\313\006\314\274s\337\244\275\350\014w=)\243\355<\026;\351\273\231*\277\275\331]\340<\325A\223=\261_R\2750\0333=\320S\331\275.m\311=~\247\335<\213\334\017\274\004\256o=\340kB\274\2160\007\275\203\302\3238x\370T=\377<\203=\274\233\322<Y\\\212\274\314\305\267\275\337q\371<\373\237(<\311H\030<Z\310\013:A9\354\273\267\277\263\274\332Z>\275\345\2758\275!-\354=1\375\022<\307\337A\273\210\320|=\t\312\247;\376\264\032=\220\227\034\275\010\2176\274$@\222=*H.\275\254se=\215\002T=<\037\213\274\020j\261\274\025\244\226\274\213\333\020\271\007\226\203\275\033N\272<\364\214Q\275\301\351\252\274\343\362\223<(o\220\275(z\246\273{v.\275\313\013 \274^\303\023\275\016\t\301<\252UE\273R\316\252<p\031\\\2748Z\035;\211?0\275{!,<j\331\000=\3453b\274%\265>\274aZa<\205\202\023=\271U\217=\224*\206\273h\307\330\272\222\367\"=\315\"\374\273R$\213;\027;\314\274\300w\204\274\013+)=\245\310)\274\215k\212\275\325d*=!4\253\274\356f\000>0|n\275\327\375\266\274\240\206\017\2745\231h=\351\335\000<=].=\241\352\220;\002E\247=\370\376\332=\221*;=\3513B=*\247\214\273\205\213-=bRX<M\017r<\376~\223\274\372\332\214\275\215\304\326;U\331\234\274\210qI;\201\016C=\222Q\001\274\211<\347\274\326\231\246\274\261\335\216=>\032\000\274:\377.<\317;\311;7\021t\275\277q\327<\017\262\243;\250\362\326<\224\267\331\274\213\343\355=\324\037R\275\367x\204\274B\362\031\275\3125Y=7\216\247\275\231\355v<7\300=\275\255W\271\273\327.\242=\327\262d=i\177l\275U`p\275\266P\031<?\375\214\274\345hc\275P\tN\275+\325\214\274\311\017\253<\315\247\254;\271\277H\274\227f\327<\302=K=\306Tj=d(\357<\343K.\274\304\234\340\275y\204\005:;\3034\273?\333\007\275\264\310&=\241\264\305<\267\376\205=-\236\331\273\n\021\'\274\364\324\025\275\350\364\346<\313\276\237\274`\362*=\030\350\245\275L\325q\275\004#M\275\244\367_<\201#\211=\256\360\020=\320\211\004=\212\026\301<Ei\013\275x\277\n<m(<\275\303\304\355\273\337Qi\275\235vB=%KF\274b\031\274\274B\207\352\2726[X\275\353\251\304=@\031\030\273\216M\306<\316\313\327\274\225\211;<\376+\243\274O\222&\275\333I\215<m\244\003\274h\246J<\201\314\313\274\372\324\354\273]\273\331<\240ej=I\226\342<6\025S=W\211\214\274\305\240\253=U\035\200\274i\007C\272cd\346\274.G\227<\220`@\275\2353\341\275\363\373\321\275y\202@=\026I\013<\260p\335;%w\n\273\253\371\002\275\003\263\027<C5\306\275\270\316\001>\022\034\177=\246\202\216\274\333\212\r\275\370U\356<\177\260\337;\203lI<\330\224\026= \365e\275J\035\220=\341\233\016\275fo\232;u\251e\275\346U\034\275F\356]\275\300\3736\274%j\250\272e\364\327\274\312\373\264\272\003S*<\344\362|\275\342\200\032<\363\r\210=\247P\254<hR^=\324T\212<\221\203\323\271CuY=w\224\203\275\233\315O<\332\334\177\275\224%\243<7_\340;\205\265\336\275\010/\203=\273\371^\274\314\313\360\273\236ni=\254\356e\275\022Q}\275\222\257x<\340\316\212=\270NA\275\343\310\024\274\276\212\222<\367y\204=\216\007!=\237j\036\275\243\376\274\275O\221\202<\276d\031=\n\302\203<X$\010\275\271\255C\274[\243\017=[D\204=b\226D\275\020\230\236=\370\330]=\205\365\001\275\022|\222\274w\036\215=\201\311\205=\217l\367<AV\356<\200\031\002\275X\265\021<\000\254\003<\341\361\212=\345\332\205=\216\'\213\275g\354\260<\235\342U<\257\221\223=\223\225\346<\235\267\004=]\314]\275\330\307\264\2744\022I=\375\366$\275\254b&=_\260\301\275\236|O\274e\315e=\211\223=\275\364P\266<\377@P\275U\247\240\275\013O\006<\035\364\342\275\n\254\363\274\265K\227\272q#\035=\006\360\262<\333p7\275\240\303\312\273\224P\036\275\246\023\254\274\343\235\226;\013\273\210\275\332\024\345\275\257\252\n<\036_\234=\037.\232\274\356/4<\214\033\000\275\300\310\013\276S\214\227=%\3057\274\263\205\216<(\255\035>\347\273\027;{PB\274\t\267D=\201\311\320\274\255\273\200=\224\314\202\274\311cY= \221\363\274\nh\001\275\247\314\220\274\317)\321\273)\215\032=\226\000\250=\373!L\275#\235d=\352\322\233\275g\234\213=\301\036&\275\347\334\242=\361=M=\'\220W\275\3015\'\274\203\323\353\270\\\346\214<\266\372\257;+\030\333<\241\244o<\307ND\274\214\265\035=|:K<\273\245\017=\201\300\014\2724v:<QV\205\274(\325\013\274\354\354\335\273\361o\242;\032\032~\275\316\207T=\022\262\242\274un\227;bM\224=/\221\376\274\216\230(\273\372\227f=\372\352\246<FA\230\274\341F\005\275\230\013\205=\251mc=\355\227\245<\226\333\337\274\003\211\313<T\317\335<\231+G=\327\267O\274\351\021\224=\014K\312<_\334)\275\331\\\360\274By\236\275L\242\306<T\353A=\3353\020\275\244\347\234\274\005\375\262<&\256\177=\342q\246<c\327\271\274\254\006\'\275\237\247\331;C}\371<\303\312\307\274\035UD=I\203\360\273\032\200\373:xu\262\275\271h\355\2740T$=\260r\364\273g\255\027=*86\275M^\252\273V\271\222=%\263L\275\211\277\344<v \037=\347\322\355\274B\333\226\275\265\251\361;M\010\310<\231\331\224;\360\225\257<\357Ow=\032\243\216=\302*w\275e\2074<\375ma;&\251\230\274\363\337R\275\262\256Y\274\"\274\317<\r\377\325;g\270J<\312\300\241\274a\360\020\275]\261\371\2745A(\275\323\254\212\275\273\023\211\275\001\007\000=\263(+\274o#\016=i\352B\274\207\263\216\274!\253M\274\030.(\2752\345\024=\213\207@\275\357\203\027=\243\362\221;q:\245\274;\267?\274\363Z\010=\354:\322<\333\367D\274-k\005=\022\363\305:p3B\274\346\327\021\275v\306\233=\001\231\266=\327\215A\273\212\220)\274or\214\274z\2457\275A\264\021<\370\366\240\273,\006&\275\024\276\214\274\262#\207<\367\3629\274\357\023V=1\244(=Y\311\221\275\n\225\006\275\374\273\376<\005\203\035\274& \373\273doU\275\235tc<\363\361x=E\227.\276\035u\034:H\377Z<\374\312\366\2741\342\302<\241\024\351\274\352\177\372\274\217<\262;d\271P\275c\350\266=\t\tF\274\360\262\026<\335w>=\232\224\204\275\324\234D\275\272V\023=V\337\"\275\330\353\254<\373+a\2750h\226<\n\n\217\275C\275\266\274C5g\274\265Dk<\312\300\024=C\304j=/\325\242=We\363\274H\210%\275\351\271\241<)\3538\275lU<=\257Q\207\274A!|=\306\275\241<PCF<\312\r\021=\n\025\332\274b6c=\340\024\266;\204]\030=a3\240\275\351\017\260\275gf\025\275\346\262\342<\023\366\303\274\364Z\272<P\224\261=~\230\231=\013td<\023\230J\275\3244Y=J\210_=\017\'\024=+\343\344< \202\r<\252n\325<\326U\262<\233\312\036\274Ju)\275\322\200v=R\206(\274\367\250L=\'\267\217;d<\372\274\227H[=/\013\210\274\016Z\315=/\261s=\340jm\275\203\020\375<;\264\022\275:M8\275\025\306\376\271\022W\374\272Y\311Q<pus\275\007\262\202<8\343\013\275\221cH\274a\227\263<\237\2716\2746\306}\274\366\256\000=\347\2022;\377\316-<NI\020<\264?\\\275gj\237\274\2017\177=\203\021\010\275D\345\267\274\243\305\372;\000VS=\200\276\t\276\301Q\257\275Z\344\026=\001\317+\275\237}b\275\242\270Z={\207\247=?hD=T\273\276<fp+<\221@\205\275\204\355\177\275kd0\274\327\276q\274\215\215!\275\020?\346<\365\366\257=$\322\205\275:\'\304\274\013\235\357<\327\220\014<\316b\021=\370\351Z\275\341\213\035\273R\212*\2751\001!=\031\323O=T1,:\231E\356\274\272\265\037=\245P\022=\033\035^\275\375\323\305<O`!=P\364\007=\250\273\310<IO\230;&\214\377<\250\353[\275\313\246\314<(\275$=1\r\002<\016\223\312=\031H\332\274$[b\275_\215e<ImQ=\271P\231=T5\241\275\316\\\200\275i\313J=Y\241\251\275\360LA<\025\310\036\275\273\026s\275\227\310\027<\304D\245;+\311R\275H6\2319\241\207C=\270\327\255;\2175\237\275\357t\221=\002[\245\274\023f\345\273\231\3222\275p8\"=\325\226q=\333\203)\275_\010\254<\350v\022\275\277\223\023\275\206=\021=\"0\025\274Y\300w\275\264\313\177=\377\365\022=w\3615=\334\3569\273\224\374\r\274\002\213\t\275\373d\225\271G\307u=\365\365/\274\226\247p=:\247*\275\340\303\334\275[\363\344;\247Rs\275l\330\r\275\335<\207=C\232\013\275jxO\275Qx\024=7D\031=\354-\177\275V\\\231\273!(\247\273\315s\006<\010\372\217\275\274\335h=\227|\255;%\207B<\253\231\036=\034Rn\275\354\364X\273\321F\311\275:\242\315\274\\\272/=\035\374\227=\220V\037<\017\362_\273\035\016\215=V/\034\275D\334\337\275=\024\343\273k\030\313\274\005\035t=D\364;\275\264\267\245<\223n\234\275T\032\366;B\311\334<\016\241\026<\276\026W\2751\233\301;o\370i\273@\345+=\357\264\361<|)x\275\310\032E\275\263\006\376\274m\212\307=a\004\250\274\215+#\275D\022q\275\255\341\251<\250\237\266\274\357\321v<\315T\253<\005\310\305<Z$\370\274\2200\266;\260\031)\273\335C\020\274\034sP\2750\r\375\274i\234S=E\313-<\313\037\357\274O\227R=\254\177F=\tX\207==:u<\342\242\225<\304\307\226\274\340\256\033<\220\372V\274\0247\336<f\346M=k/c\274\204\375\037=\215\375\212\275\344r\374<ery\275\231\347p;\315\017f\275\177/l\274\301R\035<<R\205\273\034f\202:a4\207<\337x\257;6\240\022\275\341\300\222\275\315\345\271\273\270 3\275^\337\266\275,\225\230\273c;y=\033t\225:*[\356\273;\010\336<\303\364\222<\001\211\232\274)>T\2735\307\001=\211;\004\275\323ro=9q\232=lN`=J?\371:\331Z\311\274\325}\250=C]W\274c\362\352;\007\335%\275C\2255=\220t\037=\247\243\300=\263\332\237<@\006\204\274\334\003I=1\247\317=\246\330o=k\203$=n3~\274a\020\217=\246\252\303\274%\244\376\272v]\027\274T\356\263:\246\300/\275A\013\017\275\014||<\331T\252\274H\2109\275\244G\271\275\372\272\037=\327<\307;\025\253\207\275\331\247\300\2728\301[\275\010k\274;\014~l<9\230n<0\363\375\2737\253\347\274\355B\304\274xX\214=#\240\206=\327j;;\022\253]\275\266\223=\275\034\312\235\274\375k3<\277\0202=\361\212l=\272\260\200=\311\013\350\275\255\301\314\275\216\216\217=\367\344\016\272\251\3528<[\215c=\336\355\372\274\220[\262\273\332\356N\274\r\225S<\000\343_<T\375<\274\215*\367<\302\022n\275\240t5=\251S&\275\316\243\013<\r\022\014\275\271\3360=\324$d=\322\354P\275$\2651=\n\022\243\274\206\032\"=<7\306\275z\"$=\255\357\370<aj\035\275M|\203\274\202\021\032\275K,\202\274\236\266\306=\350#d<\003_v\275\310\235B\275\371}\310\274\267\331\374;)m@\274)\220E\275\266\030\345<\202#\246\273\3727\216<\253!\007=\323o\010=\027\343\002=\226;/\275\266\260\010\275\316\211\276=\346_\252\274e\370?=L\237\257;\372\331[\274\225\017\376\273RB\002\275\262\324\005=[\020M;\035nK=8\023\272\274K\257\\=\037D\210=O=F9<\0256=tD\346;\260\0173=\020\350\r\275o\340Z\275\236\024\324<IR\234<\'\177[=\251\367\232<af}\275\241R;=x\335J<R\332\325;!\372\'\275\213IL=\375\231\345<\330\341\375<*\356n\275c\3244=\254\232V\274\000\235\331=\334iV<>.b=,|\262\274\2720\t=\033\306@\274n)\220=\361\225\236\275\326\250Z<\332A1\275]\2420=\361\230\027=\0043\213\274h\177\021\275\320\252\274\273\232\255\001<\234\202\220=\330\026\221\275V\353\211\274\0225\373=\264V\343=\273\332\214\273\316\362/=i\257\251\273\010[X\275u\222\347<\265\311\n\275\212\247F\273\323\221H=\247\333.=X%\206=\273\200\316\274\034\031\340<\310\375\231=\277o\336<d\225]\275\014\241\253\273\201\033\034\275k\001m=-yv\275h<\374;\376\263\311<\013\022\205=\305\301\316\274f\000\202\274n2\335\274\330\013\036\273\226\340\224\274kQ&\273\002?\2719u\270\272\273\264\005^=\240\334\324\275)\241\025=t!\234=pw\260<\373I\233<\372\243\261=\344\\s9}\354 \274\276\026:<7\276\272\274\005Qr\274\227\210\220\274\3675\226\274\2620\376\274,Q\027=\234v\253\274W\264\351\274a\344e<\273\315\304<\270\272\030;Q}_\275-BX;qq\223=\016\217\314<.\335\225\274\334!\250\272\274\236\000=\237\324\305\273~\037\364<dj\311<\351q\266\275L)\203=s\272\213\2719\230j\275Z~\210\274\275\247\222<=0\243<\345\351J=1\225Y\275:\026~=\361r\355\274~mb=\3533D\275\306\312H\274n(\216\275\2371\230<\372\256\215\2742@:\275M\361E\275\374\277\347<\325\376e=\340\260\225=>u\215;\315Qb\275\344\010\027\275\01309=[\303\312<\006|\250\274E\rO<&6\030= \265\335\275h\230\252<\024\304{=\271r\355<\300\265y;\237\202\251<\024\265\021=\364\270\236\275V\372\005=E\204\216<\246\207\031=\202\234\246\274\026\334k\275\230\372\260=\232\370c\2750\355K=\226X\256\275\345!\034<)h==\271w\332;5\250\030\274}~$\274\300\375\315<\'\200\255<1>K:\203@\\=pW<9NQ\212\275I\020\357\274\342l\264;\245\227\245\275d\207\211<7\271\233\274R\345z<\205\340C\275\223\372s\273\350a\013<\333-n\275\2335\224<\024\222\265=\272J\341\273a\235\245=m\000g=}\345\330\2743;\243<\304\2767=\374r\003=\027\267g=I,A=\356\217A\275\304k\010;z\231\234<\334K]=\206\307\000\274\306Q\314\274\003\231\331<\301\277\350\274\264\tg\273\334b\276<)\363\002<\033\225.\275\312\016(=\355\032\010=4\025\226=z\245\006=\275p\303=\2775z=\3363*\2751?\';/r\017\275\227\220\303\2741\"H=\3312Z=\322n\2339Jt\216=\263\374+\275fX \274\354\013\262<go\225=F`1;U\307\023<~\234{\274\'\033\025=\322\351W=\237\237\213<h\220L<\337f\272=\214\326\217\275\010u\310;\2430\025\274]\202\305;\205\240\242<\007N\244<O\317\273\274\216|\331\273\3138\\\275\256\262)=5j\220\274\001g/;~\006\326\274if\344\2746\275\241\275\350\273\204=\341\027]=r\002\030\275GVM\275\257\256\232=\364!k\275\337\3713;\326\263,\275\262S\377;\253\007\204<.q[=\361\024\226\275\037\356\230\274*\206\363<}\316\364<k\341\007\275\000\241\227\274P\316\204\273\316qC=3P\030\2757$~=\363\324 :1\370Z\275\272\327\234\275%\231\034\2741l\310<\t\215\327<\311\304}\275\244\247\006=\273Q}\274\276\206\037\275\\\241i=\275\344\325\274\031\226\251;$\220\037\274\262\315\252\274\030\266\340\274\\)H\2757\356\222<\352\034\375<\206=\253\275\275\253/\275U\021N\275H\355\254=\303\321\014\274\304\004\027< \3546\275*\001g\275\323g\364\274K\250\316<7\224?\275g&\317<\350\374\305=\t\214\305<<0\333\275\030\376\036<\376m\307<h:.=\335%\340\274\204\3737\2751OL\275\2023\307\273t\376\211\275t\261\237<\225\010\332<\245]\225=\363\t\302\274c\253\324<K\277!\275\346+\301<W<\356\274\236^\303\275\002;X\275U7\252;\265\257\023=%\205\005\275\254ar=`k\237=\324F\014=\270\204\237\274\244\3577\274\231\364g=~G\235=\326\263J<g\020\267=\224)\034\275\032\307\014\275~\300\204=\274\327h\275t\025\230;J\372\303<5\310\227<\327`\343<@\326\253\274#\351\002=\310\350\020=h%\265\274\206\300|=j\343X\275\3615[<6\323\222=\365\366B\275\250\256\343<t\270\330<\003\032f=u#\354;\207^\217=\367g\\\274S\013}\2757\273m<\200v\230:\010\375b:\234$\351\274\243\240\026\273\250\277V\275a\366\217<\266\'\022=5w5=\310U8=\266\223\005\274\227\337~\275\212\241\230\274\251\314\246\274NS\365<\367\302$<\241|d\273\204\260\211;\200-\232<J\360\031=6\201\333\274\\\206\021\275\306\\\301;\017Y\033=\242,\236\275[\264b=\036\301A\274\207\216\000=^\217\013=\202\200 \275\305\253:<^\315R\274\343\273\357\273\nk`\274\";9;vl\031\275\310\2353<\017@3<\303+\235\275\030\307\312<v}\306<\033\330\311\271\221\212\014<.^\374\274\325\371\215\2749\217\023\2750,v<\303\024\356<qk}<\017\363\237\275k/\254;\205\340\003<\326\212^\275\021\376\241=\347\217\227\274\301\230E\275H\2225\275i\265N=\277M\226\273zWW=\'qD=W\'\362\274\365>F\275\332[e<\315\244\234\275\346}\367<Z*\214\275\312\'\304=\001\210)=\004\326\360\274\304P\273\272ba\254;\205\013\215\275,\230/=\367\340\374<\371\227\367;_\350\311\275\037[w<\374\214\345<\333\010\331<\"W\332\274\331\375\033\275o\357\324\274\340\333g\274\230Y\266<)^\027;\361x\275\274\204\002\352\274#\353\265<\006\344\346\274\n9\241\2757\016\260<nE\354<2N\325\274\226h\302<l#J;\340\003\250=}\244\026\275\177~\'=$\247\230=#\240q\273\n\022u\274\031)\265\275\254\201\223\273\n\333\262\273:\242o\275|\021\341\273\370\345\306\2738\177\260<\324\277\035\275\371\266\230<\351\250Y=z\006\037=\323\020\220=\362\351\247\275Du\301<\347\n\2249\"\025\346\273\366\264K;\366EL<@\367E\274\346\303A<\303\177\004=(\344\265<\250\230\203\275\235\3262\275\273\350\234\275\020Q^<\037\370?\275Q4l=\263\3623=_\334\273\274\320R\200\273\242\342\'=\330\327?=\253z\027=\322\310\207=\177\014\235=\264\211O<\'\325\377<\265*r\274\037\274\234\274\245R3\274\211k\357\274\260G\355<\220\273\247=\305\312\351<\364\2401\274a\354\013=\204RN=\270_\363<v\0334=\371\225%\275Mj\271;)\351\254=\357\010Y=\364\206C\274\224W{\274\272\201\230\274\374\237\005\275\372QZ\274\347\275w\275\001`\223\274h\270#\275L:\002\275(\0010=/\226\210=\256\013\216\275\220\310*\275\301\237\034=9\325\033\275\346\213\224=D\366,\274&\'\265\273\234\213\223\275\216.\221\273C\342\222=\027\260\363\274\017)i=\302A\256\275#\326\235=\204|\201\274vp\256<ku\237<\353D\031=\203\214\210<\3356\2659H\240,=:\221\005<4\233)=e\313z\275.s\263\275\252e\255\273\346\333\020<r\013\300\2740&\356\264\005\202\250\274]\355.\273+\321\025\276\235\237\363\274}]\362\274\\0}\275\306\377b\274\021\333(\2741\313|\274%o\201<\343\353\205\274\335Js\275a\372\335;=!2=\257\312\237\273\207\336\213<U\352\216;\300\256\373\274#\345.\275o\242\004\275\002\257\247=\233\334?\274\306\366\324\274;\"Q\274\344\034w\274\3535\200\274\240 s<4\232\207\2755\357 <\275\305\260\275\377H\231\274\326\216\353<<\345\005<m\240R<\342\372\371\274B\250\277\275p\231\211=\267\231\275\275\351w1\274\330L\236\275\021\324\331\273_\010\221\275\325u\363=\006\252@\275\305Z\021;c$&=D$\016=\376&\257</\265\002\275\321\222.=\206.\256;\214\313D\275zJ\302=\351\260\237\275z\251\275=\276\010\021=\314\2323<C\311\224=1k[<\234\362\027\275$\304\305;\211\017c;7\211><\000\307\373<\204\317\322\274t\263;=\206cz=\303B\374<\313\203\027\275\364\366\244<\261\366R\2750\320)<^\001\207<{C\310<\360\336%\275&\032\034=\302,\253<\367z\345\275\257\313\306\274\333\313F;[.2=^j>\275\365\240&<\016s\255\275,\355h\2757L\227\275H\347p;\r.h\274\300{\277\274\257/\013=\3108\200=\032>\262=\354\242\013=\001wI=\365Q]=n\215\302\275\274\302\001=\221\347Y\275\351\242\340<\332$\032<\312\021\355<\326X\361\274\204&\006\275\262B\234\274\n-\025\27493\365\272f\310\027=\316\306\214=\206\372K\274{T\202<l+,\274\337\363\275\2743\202\215\274\036.\177<\251\027\"<\340\226a=\236\276{\275\325\316\032\275\274\234\360<\241\270+=\217\"x=\212\203\264<\321\370\260<\234\303\371\274m-\240\274\017\336\004={\326\200=\365\356\266\273\244\001\347\266q\034[\275\307p\376<\001\032\261<\365b =W:\370\273\nk\345\275W\271\221=3\205{=O\347\n=\224uz\274T\273\032=\013;\215\275\341y\214\275\370.\303\275W*\024\274 \336B<\330\307K\275E0!=\345\352\027=r\244\255<9\027\016=3\262\305=\207Q\030=\375{l\274\032L\201\274\311\343\320<\034I\233\275\013\270f;\271n]\275\362Q\030=a|#=\017\323\300\275\201\005\245\275\225\030\235=\354\237\262;\210\023\247\275\030\327\343<?\334\272\274\252\356[\274\361m\257=:\311\357\274\371\242\363\2754\304[<:[C<[\334\002\275\221`B\275K\322N=\235\366\014=E\316\207\275\372\'#\275\220$9=\221Sa:\005\327\030<p\240&\275\244\3410\274js\233\274\035\351\266\274\345\362\237;a<w=\2367\241<\333\275\274<\330\021\026\274\035\003+=B\254\307\273H|P=\036\022\362<<\004\037\275\037\037V=y\2273\275\013\314\225=\0353\271\275\r\007\302\274\236F\202<\247c\305=\331\253d=*A\214<\006\322\205= R\201\275{\346+\275\371\332\370\274\311Z\005=\211\246\002=aZ\321<\336\035\233=#_L\275\324\241%>\260\n\345\274B\023a\275+>\003=\025[\353<{/#\275\211\005|\274\221<\030\275\211\206\225=f~|\275\334\365\247<\234\224\366\274$\202\210\275\224V\220\274\204\021\230\275\021\372*\275\247\031\354<\2369\036=\233\332+=\247\356 =$\272\214= \227\034\275\347\223\007\274\246{\234\275\300\366\232\275x\342\201=\211P\275<m5\334\274\231\3768;\246H\322<\365\002\304\275\223\004\303\274n,\364\274c0\021\275v@\335<\217\266s\274&Ym\275\277\3769<\360U99\211\016\021\275\316\3743:\3730\036=e\014n\275+\3342=X\325`\275\255\303a\275\273\267$:\272}\206\275\006\224\356<B\017\022\274\225?\271=PeQ;\351\022\007\275^\2057<7u\343\274\263\302+<\215:\231=\005<0\275$\331{=\307\354!\274\037]\007=\365\235[\275(\304\025;\241P\305:\177\323\302<R\206\031>)\016\374\274\242F\201<\272\243\016:\347\310v\275\320Be=,b\217;\177\2539=\372\270?=\355{W<\257\206\t\274\004\277\360\2720\351Z<U\326\'\275\252\236\260\273\263b\2318T\355\234\275\025\013\242=\376\345\251;\237;!\275}*\243<Sa\266\275\345w\314\273\275\016\300\273\317/C\273\355\220Z\275_\316s\273=\rS=\322\372\250<\206\314?:f\002=\274\014\376\'\275\263\3733\275;\004\273\275&\003\222\275\372\0266\274\377\034\305\274\2560c\275\370ZX<j\3418=\312[/\275\222\2639\274\324K\325\273\315\241.=\341k+\275\271)0\273\323L&\275\005\244\034<pC\251\275\333|\t\276,~\353<\357\325\250=\322\265\025\275n\311\250=\326\245\252\275\362C\3079\214\025y\275\236\273\027\2747\251\311\274\245ts=\336\347\212<)\266x\274\313[M;\334\211+=\233\034\006=\322\022\214\274+\006\022\274\376\0033\275K<G=\222D~\275\230\315Q<\317/\235\274\242\nd\274\330\360\327\275\030\3656=\234\251\'\275=Y2=j\036\364\273\221N\342<\344A\244<\341\177\202;\\\007\351<\363\t\212;\327\230I\274\213\366\216\274\006\210\320<\361\235,=N\023\313=\232JA\272\227\361\207<\003\035\373\274\337\t\304\275\332\312\007<I\270\017=6\013\224=\310a\327\273x\3469\275\237\333&\275\354\244\222<\025Cs\275\014\311\304\274BE\341\274a\356\250\274\017\202y\275\237<9\275\273X\035=R\215A\272\345W\307=2\275\342\274m/\342\274\212\255\215;\337ro\274\1777\005\275\347\306\255\274\003\032\n;\276zJ=u\313\254\272r\217\347\274R\3045=\240\257I\274\211u+\275\r\333\036\275\206\372\217=\227.\264=\253n\351<\030\343`=\013\264h=\317u!=\005\374|\274\302*\036=.0\222;*->=\025iY<\253x\247\274\0053M=)\235\242<\226\327\224\275\244c3=\312\346==\334\263\302\275L\003\202<\0138M\275!\222\014=\225\nG\275\242\221\262=\361\200B\274\220\310\337<\003\325k\274\321\313m\275\267m\245<\345P@=\234\227\246:0\013j<\005\225\274\274\204YC<\303\243\356\274%\235t<\310\204\325=y\0275\273\236\336Q=e\266\304<\333\251\353:\336\357\277<\010\251(=wBS\275\277\322M\273Y\335j=H\002]=\327\256W=\225m)\275\n2B=\326\377E<V\312p=3\030\203=\225\014H=8a(<\014\334\275\275\220\272$\275\247\330V\275\345$\226\274\206\364\022<\346.\000=\307Q\035\2754\351\034\274\030\330@=\2562W\274\340z\200\274AU(<\025@\202=jl*\275\275\322\320\272\263\036P;\264\320\227\274V\202\032=5\350\363<f\301q\275~ga=\273;\016\275O\026\235<\365\000\177<\375A\220<\373^\217=j\302\002<\2129\271\272X\243E\275\373[\344<\210\013\214\275\262\2046=\363]\027\271\332\215 =\020\237\230<\204\036\016\275\n\246W\274\r\r\330<\302g\260\273:\336\223\274J\017\030\275y6\220=\310\010n\274\016\014<;O\266n=\270\3064:\360\037\036\273X\231\016\274z\n\216\275\013Q?=^\033\247=\322\226\343=\232\207E\274\301/v\275\273\031\002\275\024\3618<\017\314\332<\352\'\347<5\351U\275Q\017\235\273\331G\242\2755:7\275\272\254\266<\251\307\374\273 \344\253<\200`\213=x\256\327<c\031\307\274I\223!=\202 =<\177\\\200=\256\223\342\2722s\366<=y\377;\333\260\022\275\376\373I=[\034E\275T\006\342\272\354\250\003<Y\223?=\212\335\354\2755\010\344\274\2408\327\275\"\341\352\274s`^\275\230\256\253<Y\320\277<\355\267+\275N\225\333\2746\225\304;\004\230/:\341o\353;\214\337g<\220\213\317\275\275\322\024=\306>u\275\023\232\255\275m\024-</\325\252;\004\364\021\275\277\236\214\275\212X\257\274\007\311\200<C\344s<\326\226\216\275M{\014\275\336d\271\273\344\3269<\223}v=\r\'\020\275\r<\320<\345(\240=+J\177\275Et\026\275I\271\367<?\310\336;V1\267<\230AU\274n|\315<\316Bo\275\207^\022<\267>5\274\342\331\255\274\265aI\275\246\264\356\272\3716z\2754q\016=\237w-=;YJ=\367\003\231\275oN\315=\031~\243\274\325\202\030=G\202\177=\017\264Y=\336\246\237\275+\366\335\273\302\3111\275\017\'\267\274\352\244$\275\212}\216\272\013)\261;d\306A\275\203u#\2747 [\275\314e\275<\271w(\274\231C\027\275|\335\241\274\\\205S<V\2457\275\225\233\000\275\331\034k\275l\237z<\223\302\361<\016l\335<\214\231(<Ekc\274\254\244]\274\014\014H<\222\270\233\274\215D\013\275\023&\273=\247\224\344\274\241\032\245\274\314p\336\273\214\255b<\350w\254\273\361\3344\275J[9\274:\227\352\274V\273\302<;|\205<\202\027J=d\265\034\275\254bN=\335U\261<mp\010\275\362\313:<Z\277/=\315\211t9#\253\032\275lJc;\224\016\213=Jw\374\274\371.+\275\256\014\235\275\272\351h\275\3642\031<8\345\350\274\014\360*\275\237+\264\274l\021\370\273\205\324\253\274(\224\020\2751\302\207\275\265H\235\274\234\253\312\275\350_$=\267\203m=2\'D<\236\321\266\274\n,\366<\3257E=D\034\223\2741\345\325<\261`\245\275ZtE=\354\2536<\004\376\311\274>g\225;2~\226\274\010}C\275>\032\232=\323B\235=\356o%\274\0101R\274\216\356\205=PKf\275\003\310\247\273\234%\215\274X\250\005=\326\017\257=\226\321#=\244\327\371\273\270\217\203=\002\253h=\212\232\005=>^\336<\263\007\317<\203\303\211:\314\317\341\272l\230X<<\233\235<\204H\250=\323\\\001<)\3066=\321\254&\274\300%\321<\003Dy\274\320\007==\224\233z\274F\256\272=\342^\224=\ta\314\272\370\230;\275\344<\230\275BW\2029\354\316\022=\036\243\230\275\252\330l;\374\203\315\275\002\t\\\275\222F\\<\247%\r\273\0237\224= K9=&u\262<M\2404\275 z\271\275N\304K;\276\216\307<\220\366\350< c\224=\332c\037\274\304\016\203\274\266\320>=\236\301\206\2752\310\254<\327\340\357=\320\356\024\2747\317g\274P\204\226\275\337FN\275\265\010f\275\253fd:\314\233\311<@\036\357\272\374u\236\275gb\222=9\313\303\274\344\335\347\275\217\312\002;%c\352\274\336\374\316<\213\340:\273\353m\273=\247\360\024\2749W|\273\3208<\274\255\363\n\276O\275S\275\331\000.=\374\r\347\274\373\005Y=DRu\273\276\232\"\275>4\310\274\306\263`\275\317\211\242\275\220\261O<\373n\215\273l\241\317\274\217&\210\275\366\360R\275\021D\367<*,\024\274f\334\320;;\260\335\274\357\031N\275\215K\342\275|\261[\274G\244<\274g\365x=\342\325\036\274q\320\031<\375Y)=Y\376\003=#\316\251;#\204\246<\304mn\274\354x\375\274e-\220<2\027\271=U\312\325;k\241\033=\324\354\260\275\2723^;\274\'E<^\271\231\274\275\341/\275~\013\231;\224JS\275n\201\037=\316\223\032;\215D\036=\230`G:\307\277p<\026\232\005;,3\201=\275y\242\274\212\214\212\275\205\301\212\275\317\217\273<T\337\010\273\000K5;\322\3038\2756\017\266\274N\204\000=\022\247\233=\276\377q=`\330\353<+\322\243=\324a\223\274\0140\351\273%\201A\275\232o\217\275C\003\020=\005\005\013<i\021\336\274<\023d<.\213\\=\253X\351<\325/\204\275\022\033\351;&\322\212<o\016a\275aM\033<\004\"B<I\202\237\274\222r/=g)3=\346\032\245=\274\331j\274B;l\274d\215\250=\\\002\001\274-\003\322\274\004op\274\232\314Z\275V%\340\2747B\250<\322+j<O\r\262=,\3076\274\276[\270\274?\276\013\275\254u\263;Jt\316:6\317>\274\035_\320\273\033\362\213<r\214:=\250\226\242<\236\207\364<\2725\200\2759Qp=\372\rV\275$\240>\275\340\2678\273\2220!=A\362\006\275)\037K\275\021G|\275\254\377\2479b[\030\275\242\337\021\275J\221\210\274\363\317\266\273\306Q\202\273\r$)\275Ls\320;\357#\354\274f\334\357\273O\276\204<m\236\223\274\264\024\240;\347\320:=\316\207S=\327\362B\275\336+]\275\342f\312<\004\327\311\274_%\333<\344\033\266=S\004\264<\316V\206=\223\335\265\273\\/.<\324\006\014=\307a\'=~G\236\275\001o\262<eC\024\275:G)\274 .j=>\3409\275\346e\225\274\251\371\246<\203\362\253\273(\306\262\273\272t\245<\302P\200\274\246\262C=N\255\315\274\322\335\n\275\315\376\367\274\026\262\036:f\264\221\275\030\371\017>\367||\275\310\214c\274\037m\364<9\357\317\273,J\326<\246\010u\275b=W\275.\266&\275Q>\341\273@ [;&\207\236=\thB=\323\334\234<Y&|\275eQl<Ax{<\020\316\377;\346|\207\275\212\314\202;\216Lj\275\346\307\004\274\312\341\312=-\342S\275\372f\227\274\272)v\275\322\311\270\274\337\276V\275\016\265\003=\275i\323\275\206\317\214\275kJb\2759)\335\275\371\024\007<\312\237\320<\277\315\364\274k&\210\274r<\t\275\253}\256\274\203\2271\275\310\233A\271\332\031l\275D\344!=m\025\317=N\323d\275(\177\276\275k\330\247;u\032\356;\364\255\300\274\007\325\252<\361.\222\273\332,\247<\0259\263=l\260k=Sg/\274\237kM=\037\332I\275\205\035\376<n\354\311\274\352\021:\275\3601\303=*I\210\274\2753%\2751{\312\275\266\373\035<y\251\240\2739\256\000=#Q]\275R\220\270\273\320)\246<\004Q\344<\216\344\256=\021\344\227;\254\026%=!\377\337<rQy<.|\342\272\252\211\212\275\027T =*:\260\274)\300p\274V\202\004=\260A(=\251S#<fO\367\274\352`\245<\021\2541\275.\334\261\2743l\203\275\333\002\301\2734:\242\275\377\377\325=\357\261D\275\220\241O=\r\214\013\275\304rR\274\2729.=\\\221\037\274\236ja\275p\260\207=\001@\211;\027\027\366\272p{Z;\331\373\010\275\3034\336<m\320\212=rO\357\272V\r\307;W\233\231=\252\273\313\272W\324\026=!)u\274\250\242f\274:=\025;\375_\276\275\354\353A\275\245\303\215;\014g\025\275qq\364\274\177\177e\274b\177\224=]\234\020<\303H5\275\270\322<=\221%\217\274\\\326?=\330\336\310<\013\321\031=7\361u\274\363uJ=\203\256d<\261\020?<\245*W\275\322\303\025\275\\\032i=\346y\003\274+\265\211;\322\230S=1X\037=I\305\024\275R\021\246\275\254\010\312\274\032T/=\231\021\034<\345\263\245\272\371n\212\270\020\315\235\273\361n\020\275\242=\036;\256^\002\275p\026\271;\032`q<]\363\311\275\305:\260<v\345\254\274\230\304\257=\371I\231\273\336\256\310=X\343F\275\232{\224\275\37618\275\207\313\270=\245\2047\275\203\325\320\272M\305\322\274\226y\200<O\347\362\274m\253\032\275?\000:<\263\t\252=\351,\321\273\313K\314\275\310Q1<\"\\#\274\326\017\013\273\231\215|\275\332\370\002\275r\356\203\274=\256\353<\032;!\274W\324\360=Y\342\207\274\350\366<\275D\210~=\207\321%\274\000_\025\275\025\\\247\274\006>\231\274S\327\211\274\270{\272;\360I_=\375+\266=Xx\014=\277\251\235<A8\217\275U\313\224\274$2D\275\344\017\356\274\376\220\007=\256^\243;\327`\327\272\323\204#=\244\341D\274&Fk<\036d\177\275\300F\240\275\030t\016\275B-\010\275\254\310\202=\316V\242<SH\360\273\007r \275\366\202P=\017\302\237<\236\205\235\274AN\256;\025S\247;.\221\024\274\355\302\000\275\205\230\256\272l\'\225\275\216z\354\273\243\324\223\275{\007\321\274]W5\275\324w\010=\251\035\005\275)%\037<P\261\340\275r\317L\275\332<a\275\216\036\332<\201\203d\275.\205\330;\025\275\325<ZU\261\272L \"\2751\206\374<\364\271L\274\231\303=\274b\314\224\274\262\000\313\275\352\"\"<W\333\212\275\374\n\240;\303y\010=,\013\236=\252&V\273\252\210u\274\350\207*=Y,\"\274S\007\203\274\354F\370<|c\251=\246=A\275r=\360<.\221+=He\005; \220\376\274\275\264\r\275\026y6=\347\235\023\275\214I\356\273\250\004e<\2250]\275\204Y\177\275\r\245l=,\353\026\275\3341>\274;\014\225=\305\322\017=\364\272\260\275O\204\322\274\223\014D\274{&\223\275\304\215\375\273\'\017r<U\234\361<\275j\327;p\014\004\272:\036\301\274?\017\366\274\335j\250<B0\321\273,)d\275\327X\243<H<\017\275\2346U\275\250\355\023\275\303\212\233\273\250\'i=\201E\214\273I\210\226<x\023\230\273\026\253\266<\315.\333<\177\264\353<\224R\255=5xl\275\326\023\370<\327\212\274\274c\270\257<\367C\267\274\037\223\321;\327\017\007\275\021\030\251\273\314H\253\274\255=<<<\001\230<\356d\263\274rF\212\274\303\2430\274M^\304<\261\027\312\274l\020\035=:\033\310\274e\200s<a\202\273:\353N\224\273\222\010K=G\354\331<$\320\226\275\210\354\217<1\277\212\274\365N\270\273\205\214\343\275C\'z\272a\023\013<A\306m=\211\236+\275\301c\010=A\240\301\274\014\313W\275p>\233:\325\357:\275\324\261\t\275:4\010=\275/\021=\235\032\033=\030n\030=\314z$\274\272\246\246<\023(\030\275X\206\002<\354\253L=X\3232=E\005\024\275\303Ro\274VD\223\271\341\344W\274\303C\264=w]1\275X\252\017=o\364\316\274\352\310\324<\034\363\005<\265\300j\274\324c\307<\235\230\260<\016\027\361\275\234\372\341\274\262`\037=\016.\212\2747(\220=\013T\021\274\365\305\373\274\257I\301:\237\240\344=\224ky=\351I = \300\t=\3737G=\363\033\241<\300\220\316<\337b\001\275\312\332\250<-\216\240<\354}b\275\220\324\006<j\343=\275\334(\210=T,\247<\261\305\337=\365~\000=\215 `\275\342u\320\274\327\254><\270*\220\272\254v\266=\265&\202=\203\020v=\307\370\331<\203!\355<>e\013\275\202\362\247<\351\244\234\275\212\356\302\274\004\3072\275;?\212\273\036\3218\274a\020\016=\210a\276<;+\274\272$?\275\274\360\340R\275\335\247\033=\272\347\2679\265\231\000\275Z\256\303\274\315\317\313<\230\305\027\275\244\215\207:\324)\234<\250\017T\274\370\376\345\274\265V\236<\323\343\344<\253\013#\275\330\263\204<;4\323<\036p\242\274\257\033\216\275w\220\247\275\327\354\t=e\026M<O\013\253\274\2078\000\2754\335\341<\211\200\205\274(?N:\0227\310<?\204\303\275\254\347\343\274 <m\275JmQ\274\312\332\302<\267\t\246<\241^H\274\322i\337<\335\206{=f\360\036;l\237\303<w^6\2745U\2219\020\247\361<U\325\223\275\r=\335<\247\272Y=%W\263<WY\246\2757\246\210\273\305I\017=\301\013\033=tD\243=a\020D=\367\347\331<\357\322\202=Y+\362\274\262rW\275\344\347\330\274[)b\274B\343;<I\315\210=\234\225\021=n\335\n\275\203\354\301\274\014J\031=\031\317\024=s\206\r\275\237w\004<j}F\274\225\320\030\274\310\344E=0\271\016<b`\253\274\311BT\275>dd<\246\346\220\274\337\334V\275\267>\230:\3055\364;\237\201\004\275\302V\200\275>=\014<o\361\375<\023[\246\274\033Ro<\242\020\230=DWG=\340\356\330\274\356\220\206\274\241,\335\275\352U\216<~\317\002=Ea\351;\n]q\274\362\0334<T=^\274\203\347\013\275\205\013\255=\333\343t\274ua\223\274<\223\331\275\032YT<\013@\216\2742\026><\007\n\273;\362\004\253<3\201\270=\267\233\212<QWR\275\336\362\212;\020\330\205\275\240{u=aN\026\275O\272L\273R\230q=u\236\231\274{\223T=;\014\214\272m3N:\222\375%=\271)\221=\273;\006=l\017&=\205\0333\275\261\242\220\275\370\334-\274\313\266\306\273B\347\336\274\347q\266=a\350\251\273\350A*\2757\330\206;\007A\000\276\211}\362<\322\226G=\311it\275>\236v\275\021\313y<\321\266\250\275\237\277+;8\341w<\006G1=\\\322\231<\027\263\262\274\334B7=\245\353\207=\323Q@<|\234\277<\034\273k\275\261\263\273\273R\177\302<\037\257V\275\320\203i\275\354M\325<\344\035K=3\221\275\275\344\2066\275\234\271\277<\313S\216\275I`\243\274S\247\307;\000\307\251\271!\001\351<\351^\200<\202t\236=9+\264<\005X\375\274\223\326k<|\271\322\275\"\327}<\310J,\275\364T}<>\235\317=3v\010=\245\227\002;\001\303h<\025\361\321\274lie;\200\300\010=5\237\271\275\257\016-=\360\001\351;\352\025\016<\030\235\267\273\307\037\330\274\371\017\345<\324\335\271=\223>\317\275\327\035\r=\244\027\240\274\376J]\275Xb7=xz\311=h\024\344<N \234=gk\311\274{\211v\275\200\376A<=p\364;$\320\031\275M\004!=\335oH=\224r{\274\245cH\272\240.6\273\'\353\304\275j-\r\275\t4z=9]p\275j|*=D,\202=SN\216<\300\016\360\2716\ri\274\177\345\217<Q\352\304\274!yE\275\274o\357\273\334\020\374;\203\202\262\275\037/\000;\n\244\005\275\210\352x\275\304\373[\274\000p\304<\216\343.;\020\332p=\354\305\374;\032\213&=\255\"\320\274u\302\237=\322\037\370\274\037\206\303\274\"\357\222=\241XH\274\231\233@=\360w\r=26c=!{\374\272\353\341\331\275\026\030\026\276\311\030L\275\037\002\207\274\326\356\375\274\374\021\211\275\027K\217\274\203=t\273\271\341\006\275\273\337\014\273l\r\345\274\353t\271;fZR\27319d\275Rs\024<J;$=[\221\352\274;W\214<\207\267\211=\376Kp\275yR\304<\227\320\250\275\225\257w\273\350\272\252\274\000\333\360<\370\334G\274\020\005Q=\324\033\310\274\266\222\002\275\312\021\200<0\320`<\370\262v=\025\021\276\275\276\267\243\274J\346\010=\363d\220\274\346Z\243\275\313\271G\275e\004\225\275\360\237\016\2769\200\242\273\034\022\013\274\003\372\210\274\201\027L\275Y//\275)b+;\344\314\311\275\177\315\207\275\000t:\275\r\003\374=\202\244\301\2752\016!<$\001\273=\231\0320<\312dU<\236\033\223\272\257|\301<\311\311{\273\306J\202=/\274P\274H\230\254<\036\377\363<j,\223\275`\211l=1\340\201\274)\261\332\273U\375\257\274\355+\206\274\220\303\'=\302)*=\322\227F=\342oC\274Y\031\375\274\245\260c<B>\351;\356\024e=\222\365J=\262\250\000\275Z\222\035=A\275y=u\023\265\274\333\273\313\274\177w\212\275\207}\202=\210Nm<\250\333::O\035\n\274\003\253\244=)\300\364<\350\242\030=\300\030\222</\241\177\275\227\tT\275\211\253\351\274\253\314Y\275\377Q\004=>\341\354<\235\332Z<\257\313\214\275$\360\371\273\036\034/=W\303\203=\213/p\275\221\273s;\266+\305<s[Z=\324\007\027=\020\323\353\274\233\354\323<\026\214\236=\211*$\275\363\205s\274`\360\327\275-3\007\275\202\306\"<\352\316X\275$m3\273\247*\314<\377\332a\273\356\277\006=\252;<\275\326\035(;\253u:=s.\026=M\226\254\273\023VP=\262\216\225=8n\231\274\225\306\r\276\334][;4k\346\272\335\207\235\275~\204\303\274t\362\n<\212\264\242\274\215M\354<`4R\274\307\251\215:H\374\270<7Rw=4<\350<\232Ju\273TT\264=\t~\365\274W\005\221\275\307\237\363=\013/K\275\3423\370<\315\322\356;2\021\250\274\006j~;\005\362G;\201\210\005\274\013\224\207<\032[\271;\300;\006\274\346u\356;\315]P\275\200\247\277\274=\016\027\273yWn\275\232\"\321\272X\353\215<\n4\304\274Kh$<\312\312\236=\367\037K<\242\337-=\257#y:\016\320\014\275\306\017\274:\232L@=\304\225\210\275\343\333\231=\326y!\275\357F\271<\301}7\273\nC\031\273\360\306\311;m\030.=\220\337k=\322\202@\275\203N\3508j\253C;$Z0\275\354\3232=r\316\357<p72=\340\234&\275\365\216A\275jm\333<\336\343e\274\n\315\016\275I\374d=L\027L=\326h-=\013\350\314\274{\020\311=D\022b<\261\177\036\275,]\024\273\371\\\272\275\365\203\001\275T\321\252\273\250\025\323\273[>\\<r5\343\274\247N\244\274oD9\274rkl\274\323\241\035\275\202e=\275q\202\313\274E\205\201\274\242Mt\275\302l\355<\253\264~=\002\037\035=\030\261\021\275;\360i=\224y\271<\252\345<\275\273o\372\274\336\007\016=f\220\310\273M\217\247=\374,\r\272\211\030\225=\306M\021=\202@\326<X6\234=2\322Z\275#\236V\275?\344\002=vl\275\275y\230\226\274\275\312\033<D\3565\275\362\253\236=\262!\345=\351\'\200\275@\204.=\365~\206=\\\334e;d\253\231\275\310\215\336<\231\255\370<4\344\304\274s\026\211\271\220\244]=e\344\204\274l\035m\274(F\014\275\330\336}\275\350Ht\273\001sN\275\027l9\275\266\252F=\353-\027\275\322\271\254<\207,\'\274\230\2155=\3305E=\240\307=\274\277\275\217\2751f?\275\354\267\262<\242\215\206=\2056X=#!V=\377\210\222<\\\247\336<\326\311%<\212R[\274y\025D<3\301\232\274be\r<%\031h\2754v\213\275yp\026\274vGv\274\302\004\302<$\206\001\274\341\3351=\013\n\001=\336\274\254\275\252\231\n=\\\345\004\275Ke\361;\007b\323\275D\275o=9$\315<kB\246\274\255R\220\275\017X\276<\250\330e=v|\026<\213\312\030\274\31459=\027\033d=$\242?\274\014W\003=\332*7\275p\373\205<\270\325\032=\363\313\306\275{\327\232\275A5-\275\210\324\234<a\n[\275\331\035q\274pC\026=\312C\022\274\035\356+=mS\352\274\367$\230\275E\344\242<\212R\261\275\004\222\312<\306\324\017=\200&\277\273\224\270\016=\3608\030\275\261\220\024;\345\266\300;B\025\225\274\346\317\256;-\300\201=\343\347L<[,\261\275I\373H=\343\201\026;s\350\010\275@\356\034\274e\331\021=\361\020e\274\036\273\221=W\263\"\274SL\274<\264\022\364<\241$\324<\342\037s\274\242\223\215<\232\032\001=\275r\266;\000\371\014=\236\366p\275\336\002\264\274\2716\027\274\306\217\021\274+_\020=\2105\003\275\322n\236;X]\216=31\035\275p\336K\274\342!\035=\334\303\"=>\213\005\275\231\240\314\275\352T\222=>\213\026=\303@G\275\237\225\024\275\'4G<\271<\333<O\365\375<\371b\016=\244~\345=Q\222P=E6\223=y\376\023=\t[\010=\301\260g=8B\027=\232@;\274\022\027\004=\243\271\233::%\311\274\000\355\205\274\310a\204\274\200\257\211\275A-b<k0\t=$F\224:\3678\025<\277\013o\274D&\300<=\371\n=\366\222\364\274\003\366\223\274\215)9\275\233\3257=ot\206\273\252\242\026\275\002\231\245=JR\213\275+\313X=]\276\017<\030w\"\274)\374\225\275\265_Z\274\330\364\204\273\274~R=\037\377\005\275\225vo<\3053\007<\211A\014==E\\\274UZ,\275Qwd=\254a\026=\263\300\301<<\223\"=\271\366\321=\352\032\353;\'\305&\275\0354i=\253\204=\274\344\355\001\275\373\035A<\231\262\004\275,\232\320<\322e\204\274\036+\377\274\004\262\234\273L\314\300\275\027^\244\274\000\253\336\274A\266)=.\3361\274\t\227v=)\321\205;\325\247-\275\2377\342\273\302\266\021\275\004\336-=\022_]\274\255\250\232\274\372\234\017\275\316\"\024=\305\003K\275\327\203\223=\007\\\032=\317c\272\2758\234\375<\357\264\235\275\356\365\300\2753v\203\274\270v\013\275a\317P\274r\270a;\223\r\311=Q\031r=\026\335$=\343\036k<\'5\323\274\244\305\267<\240\022e=.\247\007<\004&\n<8T:\2756]\364<}\366\221\273M\003>;3q\336<\270\354\210<+e\206<z\346\374<\271W\010=|I\"\274r\007P=\243\331\251\275\205\023\252\274\304(<;\344\340d\275^\361\257<\336A\202=Ky9\273-|\227\274\004\272\244\274\024\250>\272=\032\253\275l_\236=-\213\351\275|\333\255\274K[\324<\351\341\257<\215\202j\275\322\256\371;=E\204\274\345\036\246\2757L\210\274\350\271R=*\236\372<\326\255\257<\326\002\361<\267\222B\275=\301\250<i\253\301<\256Is\274\360$\022=@\013~\274\273b\330\273?/\250=\347\205\352<\037f\274\274\243R`<\023\021\373\272v\333\245<;\036\021\275\262\333:\275\301\037\271\275\357\332n;\036\345\206;\332\271\007>3d*\275\2360\200==v\325<\234]s<\024\205J=]Vz\275E\000\332\273\241I\017;\373\205\005=\266\264\247\274\367\331E\275\310n\254=#\207\001<\025\336b\275:7{=\317\022 \275\247;\017\275\216*\217<\376~q\275j\256\017\275@\370\027<\345\016\253=+uP<\261\253\010=k\243\013=T\330X\275\245\301\224<\2306E=\313y7=\003|\343\273\212\373\212\273>\021\257=a\300\246\274(\364\237=(;\'\275l\235(\275\241\211o\275uz\n\274M\001I\275\252\264\317=&\302\246<\345v\365<U\350\352;\026\257\232<\337\027\037\274\366dl=\230\361l9\001\204d=&\\\242\275\270\007\321\274\2722\357\273\232\354\220\275\264\260m\273@w\032\274\341z5=\367\245\323\275\262\371\232\275\321\025L\275zjs\275!9\357\274\345\355W\274(#O=\370>\245<\316\034\241<\333\343\270\275\032\027;<6\362\204<\324\253\355\272\322\373\036=\372,t\274\274\354\223<v\261\362\274\255-\000=\013\364\320\273\243\223\014\275\3546J\275]\361\027\275M \000=p7\356<\361\003\016=\224M\253\274\234\220\234<\222\360\226\275\016\355\306;\317\035S\275\033=\361\274\233\247\004=0\'\'\275\206\340\224\275\266\252K;\237\332\020=n\330d<\257\2238\275$j}\275mac=vyx\275\210<\263\274\334\346i\2756\236o=\201\207 \275qx\252<\325>^<m\355\034\274K\261\344=\225-\255=x\366\216=qi\247:\351\237%\275\376\334^\275\201\357}=#\343\356<O\013R\273\312\347\327\274kf\322;\007\316m\275\214z\303\274\267\263\023\274\000\370a<W\265\363<\317z\215\275\272sU\275\305\036\310\272\024\323\013\275p\017\325=\274\246|\273K\216\261\274{\217\204\274\026@\r\275\346\371\244<\037\365\265<\206a\340<\310Ig=\335\303\007\2742\201\017\275&\216\223\275\215A?=G\007j;\002?\007\274\235\215\356\275bi\354\273}\225Q;\235z8=p\250^\275\204\214=;3\336\234<\237\365\272\273\211<l<xz\"=3\274Q\275\245\002#=\374\212o=\325\362\242;0\013\272=\001(g=.\326<\2758x\000\275\233E\333=\321rv\275z\036o=\017\350\317:A\352G=\265`0\275\314 \034\275\0108*\275\375\006\206=\3550\262\273);\276\275\347+6\275Y\022$:\341\236\244\275\343\2161;\362\235\350<U\305\240=\340\201\000\275\307Ul=\372~\234=!2*\275t\201=\275\212\323y\274\024\254H<\302\374\000<K|\033\275K\026\336<>1D\274:f\376\274;\2611\274\345&e\274Z\'\026=\277\354>\274S*\265<E_]\275\306\270\246\275\010\332\331\274*\037\204\271\301\305\003=\273\203s<I\202\256\275\177\303\021<\037\3053=\362WD\275\3069\034=\010\013\307:\216\300\2239\032:\200=\304\324\005=#i\225=9N\257\275\344\013\024\275(\227\006=\205\216\177=\325\273\237<\220\353\004\274\230\263\026\276n=\000;@!\322;\372\nt<p\266\244\274\317z\256\2755xI=V\336\007;w\264\322<Q\213\211;\340\274\236\274\'\277\022=\252@E=dBd\275\326;\212=E\311\237\274IX:\275%(,=X\246V\275\301_p=\025\320\202=]\311\371\274v\004\030=4\2161<\317\246\331\274\200U@\275\025\311S<]\361\026\274\225\233\243\274B\027\212<\222\372t\274\367W\365=\337\367\337<\337\376\222<\271\000\261\275\263\253L<\241\304\304<\376Y\220\274\020;\200\273~K$\275\272\310\226;\305\361\250\274\261\224I\275\035$\243\274\030\226\n<\242\252O\274\263c\016\273\025\343\303\274\224\310\201=v\333\000<\303\322\016\274\033\034\260;J\270\021\275\013\334\032=\257\260q<\264\225\207\274m\2737\274k\244\237\275O\252\200\275\374\3159=\313AZ\275\306X\r\274U\254G=\340et=X\240U<\326\261\223\274\303H\215\273\217s\207<|1\236;\035\316\256\275\023\021\274\274JA\266\274t0\014=\344\263\267<\323+\203;\024\303\374\273\310\273`\273\267\231\345<\347K\245\273\354\257\002=\350\365.\273 \310\253<\207\216\345\274\236\313>\275\271\335\306\274\263\202Z=\007\330\236\273I\340\210\275\243\216b\273\274\355N<>g?=\363\246,=\006\270A=\035\221=\275\267[\345<L\307\211<\r+\002<n\277P=\025\013\010=\244\347@<\275\2724;\336\3126=S\017\324<\253\205\257;{\221\302<\035T\214<I\205E\273}\205+=\346\263\312\2740\222\247;\242\370\320<\230\"\023\275\246\0354=\237\003\010\275G$\201<\305Z\024=\202\016\261=C\354\227;\3510\001=\346\216h\273\331\177p=\205\243\030\275R\307a\274-H\277=<\266\027=\246\344~\275\271X\346;\014\n\211\275\010 \272<`\233\234=\322\336\336=\n7;\275\336>\312\272e\252\204\275\004\033\303<\005A\324<SH\200\2745\302\023\275#-1\275\275\026\266\275\222\322\037=\n\\(=`\364U\274\232\\\333;\375J\375\273\036\371\207=5\261\004=<H\214\275\373\027\020<\364\272z\275R)\034<\220\3454\275E\274g\274\232Q\266=\221\232\341\274\021\263\332<o\226\n\275Ka\364\274\302\224\037=\220\331\236=\0211\023=\034\2178\275\231\321\375;`\343j\275T?a<\337jq\275\343\255\035=\205\013\377\274\311\003W\275\216:$\275^\311\302=\363s\221\274\252\305\016=|(2=\024\370\006\275\252\270\r=\223~\262<\233\376\321\275\233f\236<\315E\236\275\251Nv\274s\310\271\272\203H\274\274\301&8<\231\363\'\275]\326\240;\206\374\250\275\237\202V\275e\233\205\273\301e\215\273_NE\275\315\000\025<*.\023=\327\205L\275\036y\213\273\016\027\035\275\033\307\273\274\311\2266=\257\376\333\275\021\312\211=\021\002\364\274\202/\010\274\205\021\342\274\220h2\275\232\260\014\275\350\n0=\014T\241\274\331\377\035=I\245\257;\202\003E\274O\316e\275\262\320\230<\017o\026\273\325\326\237<\351z\304=\347\231\204\273\355h\220\275g6?\275\317\274\234\275\234\032\255\274\237\372\025:[u\266\275\227#E<\214#\274\273U\321\300<]\224\\=H\346t\275A\371Q\275\313\207*\274\017\300\322<\376\002\204\275\350\367\033\2751\336/=\357:\216\2751+\207=\340\254D\275\007\310\275\273\320I\247\274\216\372\314\273\356B><\371\353t=\254\223\255=\032%5=x\004\376;\312L\210\275^f\\\275\300\277\206<\244\371(\275=\255\n</\227\007\274\243\023\016\274\347k\010;Z\210\201=\276\033\200\274\016a~=N\362\023\2741:\344;B\025\202<\210-d\274\2574\t=\376\005\001\274v\256\202\273\345\2749\275\r\253\212\275V\357W\275W\223t\274\327nK<1d\274\274\341\034\200=*\205w\275#\022R<\206R\032\274N\310\235\274t\016q\275V#\\<\207\033C=F+f\275f\237#\275\263`B\275\256+E\275\330X\027\275\344\023\303\272\226\303\021\2757\245/=|n%\275\"q\342\274x\226\211<]\ne=\362\216><\035\343\215<\003\311\331\274e\376\202\275A\310\232\274\302r\207=\320\330\303\274\376\264s\274\204(=;v)\366\274\256|-\275\302\007\255<B\r\254\274\3304$=\341\365\217=q\246V=\022\203\261=\235\314\000<\330\022\374\273x\010\232:b)\002\275\031L\032<\206\021\177\275\036KK=\341\025\n\275f\031\307=\nT\347\274\254\035!\275b\236\243=\220\020m=%t \275\314\003Y\275\257\324\2469\332\272E\274\235\265\231<\231\323\353=\030\025:\274d\343\321;Q\220\021\275\343T\320\274[\\l\274aD\276\2742\220\033\275(Q&\275\327\372:\275\215)\221\275\360\223\265\274\004y-<\213t\312\274\250\324\230=\263\302\211\275\014\345A=\232\370\226<\255Qi;\353\036\324\274N\232Z=l\037\270\275\360\233r=$\343I=\002\240\356\275\035\256\216\275\236;\270=\235h\332=\316\342X=\267\313d=\244q\360=\310\321\243=\334\350h\274\230\216\333\274\262N\326=\355+\214<\335\210i<\357\234\362<g\371\214\275\037\005\206=\263*\027\274\330 \025<\230\2268=\303\271\037=V`\216<*\356>=o\202\237\274<:\026=\003)\202\2730{[\2754\235\303\273=\025\026=\343\221\014\275\341\217\025=\214OP=+Q\225\275\255A\t=\025\225k\275\236\274\t=\031\323g<\317\361\352\273\224\310|<\n\'[<\226/\237\274\303.\204\275\276\214\320\275E\341.\275\214\\\033=\362\3250=\335\375\033\274]\247\220\2757)3<#\316\262=$!\003=\033\020\246\275\321\312\375\274\216Tj\273\250\210\216;\371\367C=\201q\001\275r\307\204\274\326m\223\275wK\205\273\255t\202\273\330\252\350;\202\021+=\361\362@:r%\261\273\321\223M\274\364\n<=\220*\367=.\263\010\275\224\210\251=&\3541\275\241\317\224<,\376\031=\261Yj\273\264\363\250\275tO\035\275\302PT\273H\324\n<\031\035i=3#O\275\307\013\357\274Phs\274{\351\272\274\330U\200=\324\246\301:\001\244\203<\257\205\267\274Z\305h=\007\3209<W!\211\274\3077\246<a\000\227\274\360.g=\375\262\310<\361\326\241\273x\2127<\324\'1\272N\301\016=Y\021I=\216\203\016\274y\006<=F\313\353\274\366\237\004\275=9\036< \0039\27574:\275s\327\016\275,\3606\275\245h\260<\014\342\241=@\256\216=\242\350\356\274m\226@\271\007\014\034\275)\305;\275\354\246\351<\302\016\205\274\350\216\241\274F\207\235=E\312W\275\\(\264\275\301\010\025=\016\035\256\272Y\207\010\275\023\316,=\325\332\2519V\321\215\274\243\361\363<&u\242\274\017g\322<v\327(\275\366\343\215\2755\203\230\275y\010\226\274\251(\261<\327\362\247<\020\324\256\274\372\341H\275\025Db<\307\221\201\275\004\303\205=\016\014\323<\026+\240=\003z\202<bI\034\275\017\357K=*\327\237\275\246\265H\275\334\262\020=\3707\210=\023\010\016=ku\322;w\260)\275\373\344\232\275\223\3026\275\274Uq=x\020c=\031X)\275\340W\343<1\255\211\273\365z\014\275\004\206\014\275\367zW;\240\275K\274u\003e=\222|^=\324KJ\275y\300\247<\374u\213\275\246g\310=+o3=\312c\334\273T\302\242;2\221M\274s\016\240<\314\312\256\273\037d\247<\364:\020\275\223\240$\275c\245W\275\254\265\263<Ld\364<\366\033y\275p\376\346\275\252\343.=\232\250H<V\014\037\275\215\213\027=\200\216M\275\203\245\212=\202&.<\220\344\013\275\367\001\262<\270\333\251\275\315\332[<\376\006\036\275b\225\360<Y\313\t\275\005\240\230\274H\343>\275\336\356\334<\016\254[<\317X\206\274w\250\221<\277\266v=u\246\005=b\272\r\275u\373\3779\3111\261=\236\312\340\275\363N\331;QB5\275\305\316$\275?\333M=i\205i<&%\317\275\306\224~<\251D\364\273\232\200J=\034\341\026=C\000l=\020\277h\274z<\360<{H\023= \241\335<\027\207p=g\276\010\275\300\213p\275\305\373\007\274\272 \223\274\336\266\021=Y-\362<\305\254X=\001\223\000\275\360ij\275H\230n\275\301\031\334<`\340\n=\274-\355;-9\224=\t\212\215\274+\321\323<X!\241\275\340\222\222<\3024\237=\341\337\252=_$\223\273\031\240e\274w\353 =\205H\337<\212^\032\275+\250e=mN\262\274\270nx=(\013r=\230Q\373\274\244\320\206=l\270/=\223H\005:%\2626\275\250_^\274\374y\252<)\222\340<p\311 =\007(\250<}Z\267\275K\266\356\2747\305o\272z\244\032= \007n\275\364i,\275\\\001\006\275\323P\376<\354\016\207\274\334_w<\303>K\274\221\373a=\324\000\307\274\361\341\240\274\324Q\310\275h\240\200=\0101M<\033R\276;\032\023.;;\031\227=N9T\275Z!H\274\237\243r\274\2173#\275\206\302j\275\204\321D<\017>\240:\362\260\212\274\234\275\024=B\233\325\275\005\365\333<\302\330\307;\314\276\374:\204\031\216=\025S\307\274\327f\"=\320\023\343<\202\267{;\214\314\202\275\371m\223\275\344\211\023\274\201\341\255\274x2 \275\035\311\025=\001\345g\273\025\320\016=\304q\260<i\201\226=z\005\321\274\356\300\206=\304\367~=\242\022\215<$-\005=7vB\275\353\375V\271\362\244\223\275\350@?\275b1\222\275\034\217\302\273%s\314\273eM\374;\374}\257\272\356\3505\274~\266\212\275\233\317\024=\016h9\273\254\202\n=\3440\204\275ZC\274<7\247\006<\367\221\t>\014\334\250<\206\370\242=\327\255X\275]V\334\274\317W\210\275{N\020\275\233\0330=B\362\214=O\3342\274\003\021\036\275V C\275\263\271\220=\243\2433\275\354\252\314\275\36458=8\001\212\275\313\220#\275\372\302\303=\027\000\001\275I\346\244\274\204F\231<nf2\2748\330\031=\347\273\330\273p\003\214<x\005z\275\032\232|\275z)\017\275\344;$\275=\n\343<\237fN=z\347\220=aF\230\275\223\010\231<\247\255V\275\350\302\272<|\\\252<\371!\311<\320Vo\272z\2028=q\215\024\275i\354\320\274\302\0221=+\342\024=\320/\231=\020\2602\275\"\273\026\275w\264I\274\344;$=\354yb<\377+]\275a4\350<s\334\241\275\247\215\3509\\\013\r\275jM\215=\037\020\306<\033\307\312\275\376S\032\271\002G\202\275*\272M\275\305\030\201<dU\242\274\300\3744=\001\270\325<6\244\016<aq\205\275=\207\352<\205(\343\274\316 \260\273\330 9<\353&)\275\352\037\267\274\356b\027\275\361\303\026\274_\275\3679\225\033\266\274v\300\223<\252\240\246=\321\367\244:#\370G<GH\256\274\357\200\027=\n\205_\275\263%=<\217>\251\273\222\360\267:\325!\217=\000\350?;YE\300;\300\347\035\274\343q\213<\243\265\261<\223\354\210=i\241\321\274T\214\201\275\272)\253\275\030\231\206=\201\260\240\275\314\331\270\273u\276P=k\212;;N\250\234=\202\242\247\2731\340\210\275\313y~\274|i\311\274\243\270a<\363\343f=\201\242\202\275\312.B=\301r\350;\377\326\014:[R\201\275\255j\202\275\332\375\262\274K\224\006\275\250\346\213\273B\316\017\275`\347\271;\362{\252\273\237\372\203\272\375\253i<\000\177.\273]Cf=\317\323\225<\007\337%;\206\257\370;h\317\347<\263\027)<M\371\020=\242\275\363<\220\310\234\275/\215!\275A\234\331<\237\320\203\275\247\257\227<\325Ij=\024\357\327\273\233\275\031\274\033#3\275\3375\351\272\216?E\275\270J\021\275\323L\367<\303\342\033=\257w\340;Z\002\001;]\017\312;\344\'\200\275\0354\243;B5P\273\376\352\031;\036;s<d\331\006=\365\302\313<\310TD\275=\235\005\273\224\337\231;\227F\003\276\314\331(\274]<\213\274\270\307\304\274\335\024\201\2751\020\360<\213\205 \274s\230\246\274*\332\"<\302\275\303\273\r\311\204<\307\204\301\273 \372m<\211\337\016\274ar\301<&1\265=\2340\257\274/!\272<\242\007\262\274r\374\372\274\335:\006\275\r\213\255<|\255\240\274\365\255\n\275\251i#\274\204yp=\304\226A< {\216\275\244Y\300\275}\251\214=o\230\'\275\246f\352<\0373b\272i\246\227\274\177\2560\275\203vS:\247I\033\275\323\'\364\273\206_%\275W[\356<\263-_\274\005\354v=^\033\307=$\333q\275^;.\274V\205K\275\204\236&=+N\243\275`\255\211\274d\254#<\373\242{\275\215O\037<s\300<\274\310Jb\275\337^A\275\350\271V\275\013\325t<\307\241u=6\2116\275\013\372\234\275\217l\343\274\'\354\253\275\253\201\231\275Z\244\346<\222\025\207=J\260^\274[1\300<\001\005\221<{b\253=\255p`\275\010\017\317<b\365\033<@\377/=\017\204\022=\245\000\t\275\232;\336\272\332\254\200\275\310lh<M>\235<\361\243\356\274\021O <\333\321\273<\017\370\334\274\213\017\037\274\377\\G\275\321\276@<\004,-=\315\212C=*\253J=#N\310=L\272\010<\350\303*=\t\274\210=\254\223\217<\255N\274\274\337\370\242=,$o=\333%\202;\026\302\210<2\236\240\274|*\265\275m~\036=U\313\370<\177\256\317=\375\212\210=\203t\035<\300\3453\275\201\343\037=\276Y\205=\350b\203=YQ\203=\370~l<Y\224%=\213c\t\275m\307h<\334\033\t<\356y\312<\257#\\\275\347\313\323=WQF=P\341\375;\317M\033\275\252\357\251<\313\372\343;+\361\313\273lE\"\275\300\030\026<h\261\274<V)\230\275c,\005=\212\313\263=\346m\362<uV\006\273\014\304\253\274\266#\007\275\361\321\332<\273\235m=\'0a\274\261v\332<k\001$\275u\312\362<\310\253\212\275*|\267\274\374B\272\275\375\332\230=\262\241\013=\253R\031\275H\227\205\275\332D\273=/\016\025;9\304\315\273\325\033/<\t\033J\274T\026>\275\233\001b\275\376\247\304\273\022\002\242\2743\270t\274\2022\021\275U\264\344\274\027\007\230<W\316\352\273G\004r=\323($=\305i)\275\023 \344:\207\366\270\275\250(B\273\000\037\216\275\350\330U:\177N\013<\271\255~\273\350k>\275\345\007.<t\200K=\267-\010=\036\351\314<S\034\256\275j\217\007\275\325\374;\274w\343\004=\255\226G=\236\211^\275s\253\213\274\000\245\333;K\352\206\275\362\"\t<[z\277\274\017\336,\275\214D\331\273:\020\341<.-\004\275\242\270#\275\353<\252<}\231$=\33562=\026V:\275\244S\017\275\2768C\275$1\372<\241]1\275\301g\033<\226\216\230\275g\227\342\274\024\231\232<\024~c\275,\227\r=d\313j=7\3651=\335\276l=\307\253\307<\016\000\365<\321\2659\274\256l8;\305xW\274\375\365Q=\267\376\321\274O\200\222<\334\331\037<N\004E<b\0351=^\0171=\350\225\204=O\321-=W*\374\274s-c<\326\013\335=\340U\203;\273u\261\274X\224\315<\032;\212=\211h\204\274\2024\224\274\317xs<g\261l\271\315\260\203;\001\\\235=aZ\336\275/Im\275|\025u=\003\236\300=\352_{\274\276X\345\274\035_\335\274\250\233\227<b\231\001=S\313\005=\305{#=\307ei=%%N=\341\311\276\275\272AO\274\0015]\275\372\335w=\351&$=v%A\275\232\266!<\244q$\2751W\034\274\007-|\273#}\326<\030\235\351\273\324\270u\274\007\301\253<v\375\241=W\024\235=\252\3732<\001B\362=\230W\250=8o\000<\270\351\310<\321\226\273\274\203\272\224<N~\244=\310\301\231\274\276\005\253\275\277\200\247\272\030\3709=\366\241\364\274\375Eh=\310*\225=\250\211\215\274\344\253\305:+\236u<\365\351\244<\213\003\334=<\235\205=\221\367^=!\025\223<\245\320]=\007\020;;s\322\265<w\370\252\272\220\347.\275\000F\344<\252\022\320<{(\252\275\3103@=\336\005U<X\263T=\255n\346\273Y\025\362\273\177\364\200=a\2203>\200\021\234\274\364p\025<*\235\t<-\346$\274\002\226N<\017\026\220<\341\274%=\275\013\234=t>[=\336\212\017\274\240@\343;@_\027=\314\030\221\274\273d\364<\316\036\373\274\005)\025\273glk=\314\340\340\273\016a\215\274\307\271\335<\362\352\273\272\307\325\002>Z\"\031=\245\337H=\316&\223\275\010P-=\343\216\364:\244\311\000\275\353\002\264<z\"\336<\240X\327:\0348\300\274\301\333D<\"\252\3407\202X\'=\263\360\364=\242K\\\274\006\331\022\275\304\314y\274\206\364!\275\257\202\016=\353\350\271=\025\nm\275d\367\234=\242\030\025\275\250\327b=\322\325\007;*F\"=r\316\372\272\372\377\262\273\220\352\254<\342\006\t\274 \235Y\275\034-\017=\245\001\363\274$\274\253=/\2119\275\225%g9\r\324,=\206\311\220\275\242\234\367\274\036z|\275\355\260\233\274\2226?\275\210\223\242\274\206\213\270;\205\221B=\225*\324\275T:\017<\r>\250\274\272b\003=$\223\010=\262\363\371<U\0031;\010\017\t\275=\017\357=\'\376\207\274\006$t\275B\003\026=\035\244\266<\260\303\036\275\223\241\205<\001\272\\\275*\313\212<;\023\227<V\r3;\340\236I\274\306\203\223<&\005\331\274\2439\"\275\260V\223\274s~\365;\024cQ\275\366\006\037\275\275\224\016\275?\371o<;g\007\275M\311\030\2755\2556=\251\367\r=\032Ti\273\033\300\354<\342%\024\273Y\306\241<C\017\272=Pc\251\274V6\251\274\204c1=\241\327G\2749\250e\2751s\207\275\273Y?\275\010/\235\275f\343&\275\363yS<~\270y=Fa\234\275\343* \275\221\005\302\272\243p\272<\302\224C\275\331\253\027\275\346f\204\274\310\361\303\274\334\376\t\275\266\262\352<\204\330\223\275\031e\332:\203\240Q\275\3478\217\275\303w\003\275\013\347\311\275\300\203\331=d;\252\275\016\000\231\274.\024c\275\241\241\247\274\217e)\275\023\246\214\274:+\220\273\225K\201\275\251\331-\274\256\031\003=\215,\261\2743\306c<\254\202%\274k\003M\275\233\242\002<\256\244,\275\004p\317\274\255\003\223<\300\211\304\273.Y\323\274\341\241^\274`\237\205<\016X\034=\305\336\304\274^,\242\275\306\202\002\2758\375:\274\255\314\204\274\020\035]=\020}\300\275\315\025\030\275\363\014?<\322\255\266<l\347S\274\272l\237\273#\316\264<\224\177f<=\331\220=\226\014\245\274\3367h<\272\237)\275z\273W\2757Z\267=\311\252!\275\273\226\332\275\350\0375\275M\0264=\264\002\346\274\016x.\275\204\341\"=\317R\024\275\257\336D\274 \322\247<\365\024j\275\222\267\225< [\207<\202\301&=:\326\223<\237\275\233\275bC\307\274%+D\275\301P[\274\271\231n\275\\\214\340<R:\225=\267\376\021\275H\030J\275T\265\351<-6\202\273t\353\362\274[U\r\275R\326 \274\225)C\275p\254<<\235\325\211<\007\277-<\"\261\374<y\212\026=@g\032\275\362w\366\274(\'C\275\005\005\022\275\336\226?=\177\211\323;\234i\311<\276\355\261\275\020\277\246=\222\227\306\273U$\234\275\342\'\r=r\344\357\274QT\205;JL\301<Ev\274=\337\342B<\222\266\337\274O\256\355\274Y:\002\275*\003A=:\340_\275\024q\314\274(\234\350<\202\340{=\374\315\036=m\364p\275+xi\275t/;=\210\350g\275\202\260\013\274\0206\203\274\270\017\265<9\336\377\273\224\212\004=\320\357/\273\253\003K=\337\230\337\273T\3027=\014\356\254=\262\230`<6\245I<b\016\023=zWi=\345\000\255\273\324I\203\273\031\314\224=u\207\203\275\026M\256<\352\327\313=\364\213\324\274\366\017\013=\330\346\254\274\230?l\274\332?z<\313o\217\2705w\200;\213;\020=\000\234\362\274\317\377\367<\300&U\274\207p\220<\316* =]\223\335\274\317]\324=\311\363O=\022\n\236\275\270!\274=Vi\020=1\324\230\274\211\246$=\215~\212=\317\264{=\017\323U\274\231\376\273\274\221\373I=\025\257j\274S\032\345<\270\231[\271\006\370e\274\3566\347<\320g\246=&\346\033\275G\256\221\275\002\202x\274\025\231\256;[\257\311\274\275\201\214:\334\355\236\275\377\231M\274G\226x<u_\251<\300\235\261;M\230.\275D\221\237=+\3460=\354\246_<\035\274G=\226:\036\275\nb\177\275xY\265\275\356\260\225=x\030w<\"\322\275\274kL\301:\336\305\346<\375\035\336<\357\023>=\201v2=\3437\215<rU[\275$)\240\274E\262\217<\357\335\217\274\216!\273\274\023\356\203=)\202\306<\037X\224=\205hS<n\214\215\274\036\260{\275\n\350\'==\036Q;\023[u\275\212?\032= \202\377\273\360U\241\267fMH\2735\274\260;x\005\r\274;\000==}\'5=}\242\274\274\333;\245;6\277\242:5\323\234=\\\357\320\275Pdx=\252Nq\274\tqq<\273\341n\2745\2230=\031 \350;\2077\323:\274\215\334;\272\024\301<)\213`\274{u-\275\010`\254=\315v\235\274\257\201t\272\006D\345\274%\224\314<\020n\272\272\322l\r=\357\351\001=\216Y\204< \334\221\275\037\331\341\274\213\231\213\275\216\213\270\274\352w\313\275\233\307F\274>B\031\274\214\254\200=\323}\310=\236\244\010\275\014\225t\275\371\001\371\273T\255\014\275\227\034\r\275\261E\010\2764q\034=\250\361\270=J\273\017=\251?\222\275\306W\1779PD*\274\230\'Q\275^\215\213=N\037[<ka^\274l\255*\275!6\002\274(=x;\334Y\211\274\241\361t\274\'[\205\275\223\305O\274_\304\272<\372\264\216\274\210\361\211\275\030\271\242=\014:\3579j\352\013\275\236\345\242\274\355\306\227\275\312\031\253\274\343\245\203<\337\014\333\2715z\206\274zx\003\275\237d\215=)\2403=\223\253A\275\233\254\276\274\217\232\233<\307Hf\2754\010D\275\371B\261\274u\031\216=\206#\343\274\211\350\372\273\277\252\320\273Z\355\305<\3011^\275XKc;\343\345\233\274\004 \237=\277\224\037=\344JD\275%\237\255<\365\225\307\275\337\375q\274\311WZ\272\002K\024\275\271\\7\275^G\'=\270%\206=&\354\022\272\232\311\003\275K\365\231\275`Z\207\274\250\304\334<\031\355H=\255Fk=\302\267\207\273\226=\001\274gv\030\275\304\221\313\275\257\250\312<\3777\214;\336T\n=\0173\n\274\351\341!\275\022\3038\273\nb\031\273\266L\013\275\361\205,=\252\223\207\273\227\3071=H\\\250=\276\245@8\024p\232<\333\325)\274\035e\323\274\306\034\003\275\373\264+=h&F=T\005\316<\260\177t\275M\302\300\2743\211\260=\033i\272\273\226\213\274<\243\372\304\275W\377]\274\376\356\272\2741\232\253\274Njz=\005\204~\274\322\275\365\274\001n\260<\253\r\r=\233]\002=\216e\371;\230\177y\275 \312\263=_.\266\275\321\206R<=\037\346\274\273\270-=_\031X\275=\004b\274(\3622\275\372\326J\275\245\037\276<\326 \245<_\317\325<e\203\217=\r\356\033;\375\241\316\274\304\337\350;\224\2478=\357\334p=\213$\006=\243\007Y=4\362c\274wA\253\275\300fU<>\033\333\274\363k\205\274pp\202\274\037\225\275\274\031k\341<\353\022\236\275\342\310\220=\3136\267=\270rS=\233\323\253<c\276\303=\360M`:0\302\202\274\035\270\262=jq\331:\335\240\201<\001B\371\274\036\233\017\275\275\336\277<VT)\275\302\367B\274An\326\274\323\325\014\273E\354U\273\024y5;\227h\210<\321\360>\275E\226=\275\262[$<?\263\014=\275\255s<\242\213f\274o\302\007\275\323\267\311=G(\022=\242\267\032=\350b>\275\262t\027\274\357\016\201=\244\037\026\275\220*X=\230J\024=\373\337\202<4Z\005=(\305\276\275\352\274\310<\367/\036\275\245\017:<\353\241:\274\3554m\275\366\2129=\301\357N\274\275\022\327=\'\354P\275\023\027\225\275\257F#\275>\023\033<\214\027\342\274\356}\310<\217\310\303<\267\000 <\216\\^\274\030\263\326\274/\242o=\250\253S\273;\306\260\274\\\371\314\275 \267\335\275\353\256\201\273_\311U=\350\307\t<\211\207\\=h\036\247\274\254\370 \275g\017\023=\3015\370\273\2435\374<\260\370A\2757I\202\275J\216B\275\220\035\232<\353\326k\275\225\000V\274\350\376\204=\375J\3179\335C\250=\231\250\352\274\222\307\277=\025\020J=\266!\244\275\207&\347\275\253e\352<\032c\035\275\316\022\232<w\226\315\274\245h\"=F\346\340=\357@b<&\027K<\254\324\004=g6.=\330\205\260<T\275\213\274d}\004=\235&`\274S;\225=\215\315!=\004\244\241\275\345ww\272\371\371\"\275bUB=i\220#\275\236\311\201;\215\330\\<\343\255@=\001\317c=\034\037O=\301]\t\273%\242k<\210\201V=\300\0238<\363D\367\274\306\325M\275\351\216M=[\275\274\274\242\037\246=@\302\335\274\2458\005<94\013\275U[\345\273x\373\231\274\030\010\336\272y\210^<\316\346\376\274/\235\344<\341\235\025=\000J\234=\215\240\234\274\215B\210;[\343\365\274\256\370\\\274\217`\307\275\322\rZ\275\253z\226<\277\n+\275*h\335\2721|\373\274\242\262\356\273\324\014\001\275j~\201=\201\245\t=\000/z=5%8;\360\014\333<\327w\257\274\265\027\224=G\332\254=\207*\253\273\262\351\236<6\262\t\275\326\215\316\274IN\323<\001([=+\031\310=$Lc\275\323\264\013=\364 \213<\236Rj<\202\257.=\312\337R\275\304\316\216\274\244\235\376<c\337&\275j\320\245=\221\312T=w\354!\275\330\003J\274\227cQ=\243\376\245\275\330 l=\252\257\223\274\222\210\260\275\376\267\216<\177> \275t\335Z=\263\320\330\274zA\362\275X\255\022\275\014\031\n\275\307\251\213\273V\035J=\372\232\267<\2163Y\275m\262\266\274:\354\323\274\367\377\272;\014\327O\275)\t\"\275\375\362\031\275\t6\216<\243A0\274\373\2224<\216\357\315<\202\001I=\322\371!\274\304\3549\275\354\031\247;\302\255Y=\302\020\357\274\367\033\033\275k\370\r=\215\315=<\317_2\275\207\273\227\273\250Vj=N\342\247=\320\030\037\275=j\224\275\370B4\274\263\254R\275\356.\262\273<\"<=:\202\226\273\302\345\007\274\323\246\303<r\\\210<#\367\227\275\010\006\267\273yF\200=^\343\205\274*\0019\275\341\032\350\274X\277\212<\331\037\377\274/\304\024\275\016\263&;\270\303\030<`L\212=\361m\237\274\351\340\332;\"\222w=qV\025\275\207\342.=\013\305\205=\0339\225<\371\253\007=\366\266\003=q\277\211<\002\331\204\275\002\224-=\r\314\021<qap\274\326\206\000\275\242\2534=\036\243<\275\007\340\347\274\326\322\344\274\3344\312<K\302\250<\246\240\375\274\006B\341\274\t\341\215\275D\351a\273\361\"\257\275\374\266\357\274\033\010\224=\030o\007=\304\365\031<\263[\251=\222\200\010=\356\001\312=J\277\211\274_\370@;Gy\025\275\263<G=WD\322\274\263\205}:\005\224\000\274#\271$\274o\3575=\206i\205<\355o\032\275\220\375\035<\356\002R<\320\230\327\273\026]\321<H\256\205=\0211\250:\016\215\270<\330\344\025=\315\236\017\275\306~A=\263M2\274\327\177\241\275\234\017\324\273\350:\317;\253Vu<\353\263\226\274\036\211t\275\253\017\\\275\362\371U;^u!=\"\346\001\275A9]<\201a\303=\224\'}\274\263\221?;\362{/<n\241\200\275d\003\207\274\274p\226\275R\216S=\300\254-=6f\360\274\375)R=\321\221\257;\257\260\213<\036D\370\274[{I\275A\314\207\274\332\326r\274\"\215(9\325K\261\275\032\000-\275\222yy\273\375\215y\275\310e\014= \312W\275\200`9<\031\177\252=xyo\274$4T<\360\247z\275=\"\307;\220\221.=\356?h\275KB\034\275,\350\005\276\361\337\240<\253\3760\275j\016E\274xD\214\274\374q\201\275\260P\207=\2730Z<-\2771=\'\033\257;|\237\205\275y=\225=4&\177\275\270\250\320\274\320v\370=t\377\224=K\253\245\274Y\237\277\275$\303\260<I\242\211<\347\214\214\275s\3751\275\\\341R;\243\301\016\275\323[\253<=\373\241\273|\317/=\030Z\315<\214)\237<\330)I\274\004V]=\010\214<<\025e&=\t\314\303\274\374\232g:\017_r=;\\E=]\240\221\274\316Z\272\273\213\304\303\274\027\0065\274\177\315\232\275\370C\026\275\250\374\r\275\214m\253<H\335\332<\'\231\347<\200T\023\274;V!=2\364\016=;\"\270\274\304\204\347;\273\367\014\275j\257g\275\000[\005<\233\235Q\275\337;\273\275\n\236?\274\314\2005=(\307\372\272/\r\236;\232k/\275\211\214\257\273\302e\037=n\226\245:\333\240b\275\317\031\207\275\374\274a=\0130\227=\024\352\007\274\023e;\275\227o\270<\273>\204=\250\247\"=\352\375\031\275%I\353\272}Q<\275\016\210j\274\251\310R=\202\351\010\275\354`\323\274iu\022<\231\214I=\033\375\001<\231\267\203\275\244\325^;\n\031\271\274\n\270\210=\220\225$9\363\204 =\307\351\n\275@\351\234<\223\344@\275\010o\005\275\210\221\244\274A\"\302\271\220\213K;\373!\227=-&\254=\305\345\341<\254\365g\273{sl\274\002\234\264<\264\226&\274\301,\216\275\010\212\020=\363C4\274(8\273\275\343\230\222\274\251t\351\274\361\352\301;\235\350\027\275\316*F<\177\343\355\274\341\326\200<X\3011=\260\206\274<A%\005=\363\242\240=}\353\365\2728\206\327<\035T\274\274\201\\S\275\311*c\274\213\336\003<\254\240\244<\206\030\251<5y\333\273V\267\254\275\305\222\360\274\230\301\242=\017O\000\274\333~*=\316\2449\275\010R\235=\014$\025\275\375\222#<\220\013d\275-6\232\275\325\022\241<\334\217H<\037^\340<\354k\035=i\256\037\274\312\307\205\275\022\246\037<\245\322\022=\216\0132\274\3341\010=\025\323\312<p\340!\274p \324\274y\216\206<`\0332<\243\023\265=\314\016E\275\236\354\333<\374aA\2758\270\365\273\274\206\262<\330\303\004\275\377\255#=D\245X<\274\265\\=\017\"e=\275\007\316\274\231\241L<\371Kf\275g\301\325\274\331\321\177=\233C:\275\313\236\024\2757\036H<(+\324<\313z\004<+Mw:\312X\233<i\273\036\275\000+d=0eG=\243\220K\275\2403\317\274\313\371c<\206]\007=\253~\337<p\375:\275\305\245\322<<\223\372\274\240\347`=\314\314k=#@.=\'\333@=\224.\372<\001\211\365=y\233\316;f|F;n\025\312<K\322\211\274\240^Z\275\364\370A<\2271\325\273L\213\014\275e\276\364<\331xZ\275\222Wr<\347\233\256<\313F\271\275\215N\277\274\017\320\325<\'\007\177<\363d\223\273\034\301>\274\363\371\007\275\256\315\017\275\325\323\'\272e(\236<{@\016=+\375\271=Uj\364\273e\271\376;flT\275%\217\236\275SP1\275\312\304\017\274\'I8\275[\233D\275/\007\365\274\372\371\010\275\003\3772<\353\333B\275\330\002\001=\177=g9O\373\007=\201\237\217<\214\240\241=\301\322\272\275\026\003~\275\222\330\230\275\314\201\036\275\366\003\337=\300P\233\270\304\274\330;\007\315\356<\217\221\365<A9y<|\001x\275@\316\300\275\367\022\225\274\007\257\t\275\367\223\221\272H\230\324<\030\222\256\273pED={m|\274V{1\275$S\202=(\213\314=J\314\250=EuU\275bJ\224\2754\311@\275\1773Z;\312;\002\274\261\216\210<\t@w=\204yP=\257\213q\275\373\252C\274+\225\030\274\3632\310=n{\224=\364\214\356\273\016\017\212\273)\217?\275\342cy<\323\315w\274q#\202=\245\345\037=\034\354\341\274-T\332<W5G\275\215O\014>@\203x\275\235L\031\275\355\342\201\275{\333\350<\234\215\210<\274@\201\275D\021J<\234\007\030=3X1=\360\352\220\274\267\033\254\275\340\263,\275\241\220\021\275\367\213\205\273\010W\n\274d\000\372=\211\204\232\273:\325)=\275\253\007\275\365\360\344;\000<#\275E\034\222\273\334R}\275\376\365b;\213\326\t\275\307k2\275\31330=\002\342\271=\374\031\025=\321b\314<-\346\376\275\235\225\302\275\271\'\025=6\323\343\274\035u\351\273\366,\335;\270\223)<\234\023\t\274\210y_=\2548\304\273\032\3238=\377\275\317\274:ju<\216\243s\274R\026\013=\376\014,\275\t\005.\275=\244+=\362A#=\374i-\275\2204\210=,k \275*\202\013\274\010t\272=\362\341\333\274\305.r=\204\252\225\274o\362d=\242\214\017\275\202Bx\274\377f5<u\363\223\273\313\300\271\275k/\215\275\203\020\300\274\020\235\035\275\302#[\274c\203Q=\324\033i=R\216\201=\224E\r=W\337\336<E)\306\274\300\237\327\275N\361\t\274\236\273R;E\271\332<\033\257\001\275D\334I\275\361\002\330\273>\'\335<\255\"\311\273\273\371\201=\353\3551<\240\3719\275\320\024\350\275\266\313\351<4\005\202\274v3\261\274\224\305\251;fE\200=\035:H\275\200\321C=\013mZ\275q\260t\274Z/\262=\017T\367\273;\226\014\274\245\264\202<\273\001\267\2756+\366<m\216C\275\350\215\307<<\027\273\274\004PZ=R\230r\275\365\311\277<\033\252\033<\333:\004\274\236\207\261<i;\357<+)\250<,JG<\305?G\275v\352\253\275\276\306\000>D0W=\025\232@=\275[\317<*r\214<\202\351\270\275\362D\225<(\367\342<\361\354G=_\002\231=\353\373%\275\215\320-<\226\333\244\274\033\274\243<f4\345<\330\262\010<\360\2511<\344JD\2746\257\266<d\006\020;\314V\036=\2734\236\275\373\254\272\274\217\213\266=#\026\212<\254\322k=o\333\356<\016+$\275Su\362<\2224{<b\353a\275\377C\333;4\373B\274SR\023=\026V\003\275\002\002\037\275\017\212\021=H\204N\275\231\3451=&\221?\274\200G<\274\315V\265:r\302\366\274\302J\024=u\257\n\275\365\216\202<M\250>:\350k\306<\n\311l<\222f\217\274\273\007\230:\312Ta\274\005xA\274\232\247\220\274\343\317n=,\256m=\246\264w=\354\2049\275\t\320\024\275S\346\315<C\013\221\274\227\311\367\274\271\026\254<\010\300h\275\354\006:<\017\365\257\274.\3607\275=\234\'=\036\212\245\275\331\207\267\274r\327\023\275B\255C\275k\240\274\274\367\311\006=\251 \272=\337\021\304;r\364\216\273\004\205B\275\327\371\2069s\254\365<]\234\346\274`\010t=\360\273?\275y8\231=\t\344\223=E(\234\273\331\3045\275\210n\251=\331-\331\273\242\251\003\275\232\257V=\362\346h=_Fz<\353\007?=\257U\204=k\027\322\274\017\007\330\275\277W\330\273\367E\325=\3045\246=\207?)\275m\314\344:O\243r=\302\214\316\273\342c\273\274\270\004\301\274<q\213=\020\3308\275:\254\335<\227\361[\273\346\216\017\275K]%=:\222\005\275\031En\273\246\222\320\274(\223-\274\3352F\274\326\310\310\274\230W\n\2741\212\n<\360\313\202<)\026i\2738`\250\274\006\243\206=\250\001\206<\275\254\001\273\251\033V\274~Zl<\037]d\274\350eZ9\3210\234=\036/\345:\237jg=\"[\212<\334\207O\275\255\332\032=\213\277\232=\234e\205\274;\2245\275u\031[<\242A\220\275\375x\257\274$\255\247=)\303\301;V|\222=\010\202\252\274\354=\204\275\351\311Z\275\362\376\037<\336\340j\275\351M@\275)\306[=\267\035\336;N;5<b\315\351;Z\322\214<\030\304*\2750\010e\274COc\275\214RM=\243\353\321;3\300\202=\314\377\263=\335Xz<\255\374\204\275\3638.<\\\233\211<\366*|\275\210\272]=\3309\322:&\000\250;\320\020\356;F\207B<\323\302h<\2543x=h\267X;\251\0247\274\321>K\275\253\013^\275S\"\035\274B\314\007=_&\236\274\374\360\013\2764\264\002<\251\204\021\275\322\326\363\274\014!6=\271\263\373=O~\275<\202#\344=\335\214\220<\266\264\207\274\356\034x<W\330\232\275\253\2547\275R\274\213\272\270\321\302\274\266I\202<\345\345\036=,AT<\243=\230\274\206\203\206=\300\247\233\275C\344\241\275\222v\214;\325t\211\275\225\260!=*\005\232;;)T=\271\000v\274#\321\313;\254p\355\274\211\013\204:T@\221=L\002y\274\262Z\t=\255,\253\274\231\240\374<t4\211=w\223\244<k\245`:\364\311\216<f\314\255\274\340\357\037\274\335\215\336\274\340.#=\266\322\216\275/\"]=`m\231:\243x\202\275\025\002\362\274%s\246\273\'\014>\274l\231e\274\020^h\274hWj;\214\255\272\275\261\213B\274n<\023\274v\027\204\274\354$M\274\227M\010\274;\365\372;\361\204~\273\3461\341\274\311\267\013\275\272\037u\275&\234K:\317\013\001=X\256\207\274\362E\250\273*\032\235=\026\020C<w\2311= \0236=g\305\310:\333\324\255\274)i\351\274\336\032\315\275\201\347\206=\267\020\203;\\\237p=\274\300\212;f\305\221\275\310\254\332\273Z\317\267\273\030\307D;\003\220V\273\r|^=\330\216!\275Q\277)=\017Y\224<\0024\213\2756hk\275 \333\232<\330\027\317\274\374\200h\275\225\314\027=G\367d\273\340\231z\275\0177\246\274\316\326\204\274\225\344\022=$\002\200\274?\323\237=\003\272\313<)\316\215=q$q\274\353\002?\274;\202\214=\311\\\311;\245\326\177=\277\226\025\275\242\257d\274\222\271m\275Y\315\316=\346\331\032<\271\237\006\275|\370\234\273\324\177p<\301\234\203<=\365r\274\244\257Y\274\372%\301=\312\273\t\274b\314\006>5\223\236\275\343\202\344\274\t\005\242=\\^\252<\314\345\242\275T!\270<\014\366\236\275\177\347\273<\003;N\275V\273_\275+\360#=\367b\214<P\211\017=f\240 =-\340\264\274\205.\361<\333\001\255=_\344\210<\312\2335\275\237\235\016\275hC\266\274(\336\211=\325\366\355<Ml^\275]vc\274\254^\337<\364\245\252\275\000\027\224\273\266\020\342\274\375\254\2029k)\177=I\361\026=&\267\370\274\304-/<\2507U\274\201\"\226<j\264j=~\3639<=#\327\2744\n\307\274\245\355\366<kp\361\274\210]\013=\327\371\325=\210(8\275S\227\363<\200\n\020\275X\263\373<\371\362\\\275\335hi=\362YZ\275\277\004x=\007\\\206\273\006or\274\202^\034=\232\305\330;B\366Q<m\202\364\274Q\3467\275\322y\033=Q\270\223\274\353%\363\274\022K\'\2756\231\205\274}\027m<\177U\361\274\035\374\275\275\363\262\217\273\270-\357\272y\364\262\274\332K,\275\224\035R\274\030\032\214=\247\240\330=\321\257\276\275\332\304\n\274a\312\022=\336k\224<\221{\313=\243UK\275\3022\020=\357\032i<\325I\250<+\003\332<\334\035\352<>u\243=\'\262z\272\243r\375\2743>\"\275\375\340\305\274\353\375\244:\010Wc=\030M.=\215\301\206\273\227j\244\274\3231\217\275\216\343&=\376\325\224=\343{ \274\302\201\242\275\332Yy=\335\253\252\274Bru\275j\321v=\316<\204\275\347m\227=+\367\327<\002b\205\275\374\245\255<\275.\245<\035^5\275\205\270\013\275Nk&\275\302n\265<\\kW=\230\010\036>b\222\323<\264\022\264=q\314\236=\313\024\274<\266F\037\273\025\331\301\274\273\017k\275\227\203E\274b\327\275\273G\227\024\27411\327:\213\201\027\274\356N\223\275\251\361v<P9\340<%?\300\272\367\3115<\021\003\377=\272,\307<\225\363|<\354\\\220=\366\251\240\275\211\007\023\275>K\372;\256\315\204\275\301w\262<Q~X<\234\243\273\273\243\036\030;\346\377I\275\217_\353\273\034,\222\275b\r\236\275:\256-=\302#\003\276T\304\234<\320\332,\275\343@\031=\2308D\274m\2577=\314\212\026\275\230-\266=\225\t\200<=nh\275Q\217\254<Y\002\3679\036\310\264<\251\202\233;\2406:<C\023\205\273\201\023\001=\213>:<U\210\272\273\356\326L= M,=\216\016\003=\3144R=\351\303B\2754\341\t<y\013\246\274\262\036\301\274q\'t;\231\325v\2756U\345\274\303\243z=B\023d\275\005I\324;1\031W\275n\013F<\033\366\025=\0202\222<\373\2350\275\367\333\207\275K\341[<\'\376\277\274\253\277h;\351\t\270<\357\216R\274\224Y>=\273\254\036<\\U\243\2754\037G=\014b\334\274\324^\004\275\362\227D<`\017\017\273\362.\013\2755e\r=\222\001\004=,i\230\274\214\242\324=\030r\225\274J\212X=\217\347?=\226!$\275\200\'\220<\200;+\275\237~\213\272s\222\241\275\326\222\267\274\335\253\265\2741-S=U\366\203\275\220\252\317\272\007\025]\275\265\344\230<\340\373\344\274\224\337\357<&\3063\275b\372\205=`\214l\275E}\254\273\366\2509\275Qre<z\364c<\230A9=\320\234S=hw\003=b&?\2759\311h\273\257\214-\275#\247\231\275\361\244\227\275\3717\357;\232\251\217\275\337o\221\2757.\274;\321\343\217\274\356!-\273\216H\321\272D4p<m\242\266<q\344\023<B\210s=\207n\013\275\232:\356<\005K\226=)\030\347</\302\223\275\317y\377<\262)y=\036xq<vX\023=\363\t\000=\237\021\373\274\251&i<9\336\221=\326\tt\274\243\366P<\353\010X<\257\214\020=\001\321==\016Ua=\253\344\347\274\355\357\n\275^?\277\272\277\225U\274\307\000#\275\027\207\351<\007\336\213\275\220\365\276\273\001\222\255=\3306\0327\354`5\275y7\314;\027.\031\273\274\016x=}S\037\275\325\213\237;\376\013\244\274\336\342\037;\3609\310\274\372\005*\275\375\343\276\273\347\020P\275\366\327c<@-)=\t\000\333<\3138\243\274\351\346\203\275\267\300\005=7O\341=\241\310<=/i\334<\005\034r\274\004\340\022=\317\332A=\'g\221=4B\017\275}\360\025\275\260\024\263<[\244%\275HE\230=\214\233\023\274\025z\220=J\3051\275\356\341\266<\017#@\274\375\315\334<\030\024\370:@\372}=l-\026\275\342\210\007\275\036,\242\274$;\025\273.\262\256\2742\347\216\274\330]\201\2759\372\333<\372}\244;\366\211^<9\005\272:\225A\033<\316\033\344=\025\177==\352,\331\274\205\362\243\273\200&\277;\332R\000=wZV\272@T\337\274\326\036\243=6.W\275mA\"\275\276\363f<\207\320e;\037\261E:\263\301r<@\263\202=\022\376;\272\037\014\n\275(A\324\275M3\"\275\344\343\202\275^f\3759\204\303<=<\346\001=8\256C=\316\037\271\274IL\021\274M\226\213\274wr\266;c\216\316<\321F8=SCa<\267Nn=\375\363\367\274\271hL=\264{\004\275\013\354\212\275G\312\216<\245\021\024=[d\323\275N\357*={B\346<9L\177=\255\341\026<S\351+=BU%\273zYw\275o%\230\274\330\360f\275\261%\006=<\000\227\275\201\325\212<\020\3262={,\352<\251G\'\275\t;Z\273\201R\330=\250\310\210<4\225\342<Jy7=\367\337\306\273y\272y<q\247\210\274d\364\375\274?\316\025=\326\215\254\275T\024\316\274\256#d=\016\306e\275\n\354\334\274\302\236\261;?\203W\275l\264\201\273\323\346\224\274\371\301\322<R\374\342\274Uy\333\274\017Z\262\274\315d\'\273\202vu\274\022:\212;\321\242\200=\334x\301\275\256\373\232<w\231\254=\014\014\367<\373N\234<\224\356\265<\016h\377\274\341\377\301<\"\227Q=\336\342E=\365\247^<\264k\204=\371D\244<\267?H=B\007>\274\217\363\322<A\3614<\016rD\275|\217\021\275\210\352\233\275\177]\230\275\262\257!=\213zk;\350\237\263\273\355\362\025=M\037J<y\3076\273\236P\2539\232\306j\275\304\3073=\264\371\230=\343\006\343;\355\232\025\275g\006\204\275Ja\\=\244)\353<f\026\\<\302:M;\275j\030\275\233\032\263\274 \025t\274c\213\251<\304\177y\275x\\\236=\365\244C\275\'A\213\275\374\254K\274/6\211\275\362\007\212;\034\300\366;\214\337\020;6\035y\275#n\272\274\262\314\243\274\217\257$=~\241\250\275\322\214\216\274)\254\202\275\236\271\016\275\255\003\215=\257kX=\344\034\361<j]4\274\337\320\215<\323\307\325=wu\262\273i\345\230<\013\324A=\311\020\315:\365@8\274\267\335\261\274\235\210\006\275|\337\305<\036\367A\274\331\203O=\2505\247\275\373D\263\274\347\333\202<\347\351a=\224\306J=\202\225\030\275\005d\247\274\341\342\347\274Q\210h\273\212\231\261<h\013y;\221/\233<|\030\335\274B\300\206\274\021\333\223:\313\254\373<N\321\377\274\363sg;\272\203\275=\217\210\226=\322(\316<\251)\335\273y\000\003\275\240?\300\274Or\016=pr\002\275\212\273\365\274\205\r\022\275\014\212\022<\246\002\315<\345]\316<\331\030G\275m \\<p\361\036\274\364V\004<\275\014l;\253\265\341;\324\254\024<\014\222\002=\213:\201\274\361\327\307\274\"m\201<|\227\247\273\013%9=Q\266\224<P\021e=>\034\227\274\353,\021\275U@u<\t\345\236\275D\271\014\274k\305\243<\022\3351\2741E\222<\177\226\243<\355\347\202\275\201,V=1\303X\274\224/\021\275\003\341m=\3226\241<\277@\220\274$7\301\275\036\254\217\275\255}\377\274\030\200\320\275{\313)=\371\333\262\273D\203h<\237\327\234\274F\326\313\274\264\320\306<>*y=\002\267j\275\001t\033\275\271\335\324<\336\306>=\254\024\007\275\332q\213<\207\200\270\275]\354Z=X\370\363<\373A\242\274+\274)\274\337\314\254\275\0036\301\274\017vM\274P\312\005=\354L\353=6\\v<\311p\206=\245I.=\005y\314<\003\"!=\270\357\263\274\030v9=\253R\003\275x\377\226=\216a\003<\373\235N\275\342\204{\275#\371\312=\002\352\272\274\225M\317\274\\~7\275>\226\353\273\214j\351;M\325\220<\007\243\217<\\\3754=vqy=\347\322\306\275\252\316:<\026B\376<5\326\267<\357\363\276\275\353\236\246\274\027x\371;\251\333-\273G>\217\275\362_\345\274#\331\246;\031<\232\271\372!l\274\246\033\215\275\371BW=Fj\'=\022V\033\275\206\374O=\357\370O<\037\355\317\274S\263\224\275\035\325\256<\354\311O=D\322\215=\276\327\265;\332\000G=Qm:\275\317\360\257=9]Y\274\267(\241=\354\275c\275P\217&;\304\034\377\274\367\231\364\272\352\366\004= D\201\275X\037i=,\026\360<\3332\361\274\315}\243=\"\001\274=EcN:z\3730\275\364\303\251\275\300\n\322\274\332Q\274;\224\000\274<+\2346;\330\221J<\241\035\223;\242tp=\255\363\203=\231~G\2759\312\222=\244\261\037\274R\226\340<@S\013;\307\\\017=M\306_\275\323\003]\275\010\361\325<\303\037\016\276\276\323\353\274\372\030k;\217b\251\273jy\365<\353(\215<\345W\211=6\274\333\274\230\222\275\274ec\321\275E\005\251<g\221[\275GS\030<\221\261\030=F\231!\275\332\243\204=@\342><F\214\n\275\211\325\234\275\037\332\341<\261t\250<\332>\023<1\320\267\274\316 \001<\265\234\010=\332\010\243<\355]^\273\005\200\337<J1\242=J\240\342\274\372\337&\274V\254\002\275F\253\200<x\277\243=\322\220\227=w\013\200<\213\374\002\275\377KU\274\2520\202=P/3=\370\377\021;\302\006\232\2736\205\367\274*\335\007=\230\017N;\033N(=\2035[=\n\026\306\272|\214E\273M\031\233\274\323\257/\275K\342\217\274\303\212e<X\217\036=\336\332\225\273q\004\t\272\226<\237\275@\010\203<\002\347\022<\3524\026\274]<h=\244 \220\2745Wy:\004\027U\275b+e\273\005O-\275\315\377\335\274\334\303^=\263v\"=\345\312A=_\002\177=f\241\016=\251o\034=\344\362\026\273Q\332\217\275l\000.<\367i\210=:$\223\274\2759\275\274\366\230\351<\020{D\275\\\371\035=\262p\335\274\200x\314\273!\274\303<JH\027\275\205\234\234=\214k\022=\034\272\341<M=\036\275y\003\256\274\372)\263\275\351[\247\274w\240\330<d\216\304\275\221\201O\274\234l\204\2740\342\207<,\"\262;\300\231P\275\001;C\274\263:\274\275\243}\315\275\331\330\022\275\311\200\367\2756\013\217<\316,\223<\273RJ\275z$\321\274\237\2270\274\371\006_=\217\334R=\317\341\007;_\324\213=qo\233\274>|\221=\344\227\017\275\341R&<\002[\222<O\n2<QVQ\275\310\243(:{\031\234\274V\003t=\316\033\277=$r/=w\0266\274\312g\263<\332\200\255\275\3163\250=\272\241\025>s+\221\274\216\251[\275DU\333\273\024ql<\300x>\275ewa\275\226F_\274\232\274E\275\336,6\275\017\334^\2757k\275<`\313\000=\236\006\213=\220S\240<\245\237_=@\367\230=\036#>\273\232\335\203=\337\206i\275_\025\002\275g\212\017\275\335\027\342\274\310`\206=\026\315j\275Yk\256=gB\317=\2615!=\343\345]\275\370\004:\275\3736r\275h?)=;E\260\273\2666C<,\302\231;\203\023\314;\200\252@=\362%*;\t\035$=\371\030\014<\316*\262\272\276\177D<=yJ=\266q`\274\025\323\314\2743\305V\275r\010\304<\227V\324<\316m\250=\312\0161=\020Q\226=3nF\275o\234.\274\236x\350<\312\037\267\274\350H\353<\347\217\222\275!*\033=\302l\020\275\366\t\t\275\'\002N\275D\223\251\275\336\274\304\274\206\230\270<\271\365\322;\r\313N=\311e\204\275\207\350\217<\331=\273<\262Dc\274\256\324I\275\360a\343\274\275,4;\3557\014\274\357\323\177\274\303\374\021\274`\201x\275\266\301\303=\346\275^=a\376\037\275\026\203\353\274\225\323(<&\361\374;\001\366\215\274d\373|\274\177E\211\274\032su\274\240\031\005=\261\367\t=\235S\272\275\036\263\'\274jH,<.<c<j\317==^\217\267=\343Y\377\274M\331O=\210\204\205\275\020\312\212\274-\347\335\274\270\3444\272\025J\022<\317p\211<\035\262\010>\377\274\252=\330.\351\272\230\215\016\275Oj\220=o\277\264;\237\315\234=mI\360<\301;\322\275KZS\275\376\271^\274\370y\237=?\034\262\274\014\317\014\274\306\r\207\275\364p\037\275R\027-<\257c\360\274\220z@\274\221P7=oY\327;\217\236\003=\210j\002;\213OC\272\227\324B;\247\266\036;9&\031=\354\2765\273\003\033\234\274NUP\275y\314\026\275\204\372\013\275]\300\316\273\037:\342\274\246 \251\274\232L\216\275\275a?=\325&\224;0QB\275\235U\030=>\373d<\343u\336\274\225X)\275\276\3262\275\245\205\257\275s\223\347;\373\013.\275\030h^=\367\376#=\275W\255<*\343y\275\036@\324\274t\264\332\275\207\361\027;\3648\317\274\235\201<\275v\326\330\274X1\006\274\214\027D\275\340i\223\275\357\202\213=\337\303w\275\016_\314<<Ec<\013\373\365<I\230\224\275\027\033H\275j\347\353\275\004\017E;2\301\250\274\210t\352;K\\\210\273vw\341\274)`\336\274\227|p\274\271\342\315\274\260\021\341\274\'\301K\274\026\204\304<A\305\365\274-\272\217=S\373\226\275@\201\036\274[A\237;\036}\001\276!\204\010\275(\273\005\275f\310\252<\257\263O=\033\326\241:\rC\267\274B\2609=\355\203\223=\250Ar= \027\311\274\376\351\331\274\364u\214=\215\344?\275D\034&\275qB\315\274\323\336[=Z\010\211<bI\207\275\240\323{;T\270\337\274q)\221\273\300\267A=\245\021\223=9\022V\275\224\250\317<\\\206\330\274\253k\037=dfb=\330\227\255<!\230\313<\0331\242:\245\305&;\032J\332\275F,\031\275\251\337n\275\354\327\226;\032\306\353\274\246\003\243=j\0355\275\263xV\275\327g>=E+1<\202S\037;\243\322=\274S\3323;\004\014v\275Z\001\206=\023\306\"<&\000X=\234\201\277\274\3768\336\274S\323\030\275\376B\231\270\334J\014=U\372i;\2117\n=\242\355\301:::M\274\036\022s=\"\203\251\273\201\013q<Y\312\025<^]P<\364\216\250\274/o\365<A\027\340<DD)\275.TI\275\263t<\274 \037\025\276\230Q\241\275QC=<\267\257\351\275\2112R\275\2765c=X#:\275]\2177=;y*=\247\271A<\361\326\244<\232~\016\274\242\2305\275,Tz\275sFK={\335\232<\213%\207\274\205\371\247<N\213~=\nIu\274f\316\226\275\324\366\037\275\340\254h\273}A:\275\346>\034\273\000\007\222\274\240b\361\274n\326\317<\376\222#\275\262GH\275\242\002\227\275y\352\366<f\211\321;+\202\355\274m\271\313<\345\000\201<6%\306\274\035\005\364\273\\^\226=\2705\320\274\344\352\202\275\313k\255\272|\000\027\275q\217\271\273\322T\325\274\336gd\275\333*o\274/\266\210<\357\005C\275?\363\031=G\235\002\275l\325\\=+_e\2755\227]9[\213\342<n7\305\273\316\211\030=\2716`;\001\343\001=\005\274\256\274\036]\004=\217\206U\275p\373/<Q/\324<{*F=\256\356_=!!1<?e\312\274)\024\020\275r\202z=\245\254\220\275\335\237\274=\364\t\'\273\345f\031\275R0/=\307\276\217<y\2677\275\037q4<\206_T;\026E\370\274\316\374\233<\205\310\013=\3557\002<X\241\314\274f\310~\274\004&\236<\353<m;\020\203a\275k\353-\275\"\264\000=\\v\256<\303\276\370\273\267\2554=A\324\277\275<\004\377\274\025XG\275\005\0263=\013\021\303\275\274$#\275\001\377B=\3458<=\265R\001<\213\322\367\274@\364\346<\036\256$\275\262\035\216=\364I\255;f|\'\274\222\'\344\274\243\010\214\275\205*=<\355\033\313\274yUS=\373:.\275\231\215\247\274\206\007\207<\306\345@\271\310\377 \274\270\365p<^\310,\275qO\267\275\034\215\256\273\335J\242=b\265\334\273\240\320\357\274J\313\003\275\250\033\013\275\277\243\004=uK\276\273\001C\232\275\301\314\266;\361\247c\275\024\2429<P\307v\275\374f\201=\2153c<\026\236T\275\003Mg=\266\365`\275\263\342\205\275\0228\273<\027\025=\273\304\331E\275L\354\200\275\214\340\247<63\202=i\340\031\275\022\300\023\274\033\000\265\274\"\020\347<,@\'\275\377w8\274\216\237P=\320,\274;@\233\334\274\373*\216\275\220=C\275\221-V\275^\332\262\273.&\357\273\240\2117=\374\240\235=E\276y\2756pA\275d\235t=\002(\206=\206\241J\275M\306d\274\027n\210=J\230l\2750\245C=\277,\351\273\260F\263\273(=\313<\025(\302<d\030k\2741\000\304\275k\303.\275Z\267\023=b\023\374<\351\332G\275ti\267\274\321\2045;kd;\275o,\027=\t\325\000\275\010\254\211\275K\363\314\274g\244\323=\311\200\211=\367> \275\302=W<\r\274\346<f \222\275\341}\243\274Y\231\200=\376\026\003\275\277\273\313;s\266S\275\\\355\210=\3556w\275\3159 \274~\306\346<\233\374^=\311\336h=\177\016\274=\006I\244=1E\276\275q\363+\275~\035\357\274\340(\253=\223\337\336\275\322\244\303<\300g\016\275u&l\275\342_,=\2139\221<\354>u\275\022\223\234\273D\230\344\274\371L\377\2745\236J=,\353?=Rm\222\273\374\030\027\273\023\247\256\275`\010\223\275^w\205=\301\375\301\275\242\250,\275N\262%=\254\260y<\336h\260\274\207\265\320\274\343\306\341\274\200=\032\275xp~\274*\246Z\275Kn\371\273\020+\016\275\263\215\303\274s\"Z\274\030\013\312\274\235\271F=\333do\274\310l\357\273Mp%\275l\030@\272\213\243\275\274\276Z#=B-\241\274E\331\020\27492I\275\001]\350<\270e\306=V\333q<\216\366\325;\017xB=\212q\271=\307\213\320<L\361\034\275=\372\221<\033`\260\275\260\301 =e\244\312=\013I\030\275x\3210;jH\274\274\227\014L=bf+=,3\305=_m\277<\261^\272<\237C\200\274\352&\363\274\273\001\\\275\030o6;v\277\303;,i\261\273\307\213\235;b\343\230<\273\230\255\272N\363\203\275{~\322\274/\026:\273<\336T=\022\214\256;\300+\300\274h\361\360\273C\202\220<\326\336\243\275\277\200\020\274\034\2103=\216l\232<\302\031\261<%\377U\274\266\323\213<\332\007C\275\213\240^=\243\006\023=\233\2257\275\033\334\252<\362e#\275\247\223\201\271hQ&\275\205\244\302\2758\343\021<\n\ry\275\\\201\207\275!;\2149\013\034\314<\206G\231\275:\251M\275\031\353@=\324u~=E [<)\302~;[\362\263\274R\002u\2739~\035=@\263\236<s\304J=J\204\252=\315\226i=\336\327\023\275\035&\\\2756\216;<\310\210\261\273\300\204\034=Y\375q<\031w/\274\013\305C\275\357={;\177-\237=\261\316\252<\215\315\221\273\261\013\201=\243\376\244<d\tM\275\326LQ\275\251\002\307;D*@\275\230\372\266\275\365?\3549\351\216N\275\326\225\261<\357\345&<4\340\256<\215\\\345<\374?\010=\214\225\014\275\234\'M\274\022\207\322\274I\321\217=l\177\037\275\232;\037\275\377\355\225;\311\232o=R^o=#\t\005\274\335\373\314<\240\377%\274n\177\212=E\367\007\2754@\357\274l/\256=\323`\276=J\260\267=\211q\025\274<\207\007=\221~i\274xg\000\276\271n,\275\333\367\253=\245\371\'<\202\215\034\275\335\220\177\275\004\0005= M\326\274Ks(=\n\323{<gR\263;J\372`:\032LA\275\222\370,\275\0032\020=\340[\025=\303\250\317;\254\270\223\275M(\002<\n\006\217\275\3307\035<\t\023\305\274\325\236A< \211\244<\214\304\256;\334\221\024\275\007\343\032\275\351z\017\275b\257x\275\355\222\027\273\302\345\352\274i~\216=\004\247A=\021\225\001=/o*=\277\226@<\326\257v\271(\234s\272\362\"\021=#\256\023\275\271<B<\312\253\262\272\0036\200\275Yns<\232.b=d\360\234\275\007\217\213=\0023B\275\035Q\217=7\365\214\275\305p\217\275\333\217\273<\300\'\330<\234\321\271<\352@\275\274\265\211\333\274\326\311\177\275%\210\263<\310*b\275-z\366<\030\247\361\274\253\360\203=\355W\226\275\014\271\227\274\322\332\321\273\033`\235<o\310\217\273\0358\315<\350& \275\236\325\000\275.\273\025\276+\2676=\237)\306<\231[\342=u\230\221\275\241\365)9\267s\245\273\253\375y\2733\266\000\275/\274\347\273\211\245\236=}\227\276\275\261\215b=uW\031=\324i\345;\226\324\216<>S\361\274\2448\010\276tI\264< \034\210=\211\016*=\271\234\361\274\252\255\'\275p\377\326\272\226\027#\275\260S{\275h\323[=u\302\005\275;\362\260=\017Z\374\274y\236\034\275lp\036\275\244A?=\272o\213\274\345\272\201\274\237\273@\274\256\301\234=\242\317 \275\331QI=\013\023\026\275\315c5\275\301\343\222<h\205\014=\356\212\240\275WG\002\275\225\371\371<\017\250\"=\352%\223=[\374\235\275\036\240\206\275\035a\313=\306\005I\275\3709\005<\366M&=Ij\244\275\021$\336\273q\323\271<\362&\264\275S\'\354<d\321\321<y\244\320\274\033fP<T\301\302<\307\201\n<#_\360:\004\243\226<\220[\317\273\266\014\207\274C~\257;\344\237\366\274/\266\364<\'\317N<\'\351\372\274\244\271\205\275\340\005L;r\033\340;J8t\2742\235;=&A\020<\\\275\200\275\342\312\t<\333\030A=\035v\031\275\230\033R<\013o9\275\213\3748=\345\275e=\177A\217\273\020{*\273;1\342=\341\302\376<S4\202\274\252\324\266\275\232\375\332<\216t\324\2752\340\362<\356\266\352\274\334\255y\272\177\245M<.\2372=\222\202\273=j\213\373\273\017\225o\275\005\246\014\275\022\305!=\003@\273\273\\$T\274\353}_=\227\337d\275M\346\202\274\224E\\=sW+=\305o\220<7R\226=\372\335\025\275!\361;<o\372\r\275\036\347O\275;\010\002<\375\324U=\305\217\331=\016\374c\275_\2412\274\333\343[=>\326I<+&D=b80\275d\323\004\275_?^\275\305T\222\275\356:\331;\334\0250\275F\026\001=\314FL<R~\332<\232\r\204\273\341\376\020\274\316o\205\275\375\222!;_\370\n\275\300Wz<\370<\255<BT\220\274\035\375\023=\342\203\304\274MEu=\004X\374<3E\203=\207\354\004=\035\3436>T|\n\275@L\360<9\312\006\275Q\355E\273=\320\234<\003\365s\275l,Q;\215\263>\275m\311\336\272\016\362\230\275\032\263\307;\250\273\362\274F\343\n\275\243\361b\275\353\377a<\\Q\207;R\217v<\2416s<\3602\343<\356\016\335\274a\353\215\274]\301\355\274\241\2631<\351\314R=^\036\333\272\246\n\027\275\276\316\217<\220\260\313;qe(=\320vk\275j0\021;\326\233\240\274\232\250\036\275\334\224\236\274\214\211F<\216\253\241<DW\327\275\206+\220<\205\230\260\272\221\343\225\273h\\H=\321\004!;\356\365\274\274|\037\216\275&\201\226\275\027\025C\275\032\257)\275*{X\275\261\020C\274\030~\342\274TU\007\275\215\234\211=\361u\372\274\366\252\230=\247\362x\275@\033$=^\341.=\333\214x=\314\363\222=\231\2310=\337\250*=\347\2777=&A\211\274\347\3640=\006\277}\272\253d%\275\274?\266:\021\224\234\275\325\000\021\273\360\347D=\355\307\331\275i/\244\275LJ\007=\262\272o=\372E\224\274\256\376D=\270\351\237<x8\302\274}\221\245\273\341\303}=\001\374x=\316o*=k\254\201\274t\350$\274l\320r=\255\n\327<d\023\337\272\316{\035=\250T\000\275\023d\205\273\001\345\005=`\244\252\274i$\350\274!m.=N1\021=\274n\367;\356\210v=O6z\274\304\240\036=j\310\223=n\200\034<\322z[\275\036\263\301<\330\263\346;\244G9;!%=\273d\335\014=U\t\2558,\225\351<;!}=I+\3009\002\334\270\273\013\034Z<\357\n\033\273<\341\246\275o\3442<\342\035\202<\366E\031=\004u>=F\016q<\343\363\217\275y\r=\275,h}\275\3731\241=\013\314\035\275\032\304\241<za\355;\301\221\206\275\3518\313\272\343\266\212\275\216\347\221=\002\006h<\001XR\273\374w\220<\354\351\013\2758\240\034\275\363)\214\274\352\272*=\335\002\253<\376\375\217<^\313\357<\240\200\\\275\306\0336\272\'cG\275\0236T\274\252fJ;^\370\343;\274\030\253\273\325\243\200\273|\222\265\273o\260\253=eK\307\274\300-\t\275Ah\002\274r\367\211=\001\\m\275\256\331\271\274i\\P=G\017a\2757\246<<d\311\010=\004 \357<+GF=y*\246;z0T\274\313\2741<\264\343\r\275M\211T<\335\330\277\273\374\252\300\274\t\325\321\274h_\247<M1R=\002e\030\275a\257r\275\353d\215=\201\320>\274+\247Z=\313\2519\275\311\367\207={\013\331\274yS\373<\343D\035\274@\244\031\274AJ]<\305S\241;\245\300=<\002\276\273\273D\312\337\274>6\255<\230p\277\274\311\344\"\273\201\320&\2753 \033=\336\266\243\275\255\214`\2742_\214\275K1\003=!\271\027\274\254\337\336\274\003\237C\275!\223\203\273\215m\3449\207X\000= 0\255\274\201\020\343\272b\234=\274\315\210\243=Or|<\020th;\247//=\246D\264\272&\036l\275\334>\002\2753\220\332\273\232\323\010\275\030/2\275;\276|:K_\n>\014h\311;\321\002\217=\177\263\301:\322&\371<\355\204\371<9\025Z\275V\207\302\274\356\341]\275n\033\226\275\212\343*\275\321n\0307\370S\234\275\301\3602\275,f\272=\250L\217\275\203\004\271\275=b\254\275\265\354\353\274\326\n\334<\220l\355:\300\211h\2750V-=~\313\216\275\277\377\313<_\270p\275\002s&\275\213\327\r=\242\025\202<\216m\002\275\006\255>\275\033\370\007=\357\204\321<\301.\272;N\"\031\275\'\343O\275F;\301\273T\355\032<\323\022u\275\222\255\222\272\271\206d:\265\273\177\274\215\314\335\275\2220\273\274\325\370\342<?\025s\274\"\342\363\272\360\243D=\r\272\241:\260\020\225\275\314\273\001<?\024\036\274\026\224Z=nD\003\273\226\323\325;t\377\t\275\2102\026\275\325e\235=ll\010\274\214\307\213\273\031\327\036<\202M\355\275a\373\340\272u\266\303<\305\372\014\274\236\232\177<\373\341\235\275\275\253\377<\250\"\345<E\277\226\275Z\312\3179\301\340\325<B\005\214<\010\333>\275dq\216\274RU\213=\014-\014<\"\367\231\272\374\376\341;\225\031\"\275\330\002\247\273F\265\t\275\271\373U=\244\355\202\275\242\357\227\2741\370H=\325\2745=Q\024r;\257n\372\274\342\330\226<D>\215=\313*\224<\223$\233\275i\261\023\275\3123\202\275=\304u\275\321 ^=C\003\000\272\341d\303\275\347\300i\274F?\007<\013\260\236\273}B\374<\027K\263<\002M\004\274\177\'\252=\020^}\275Fe\314\275s\251\n\2740\324\334<g8\206<\r\353\203<\360.\260<v\221\224\275\203\210\204\273\351\006\334<p\266\303\274\363\233\300\274%\263-=\355\036^=\\\000\025=O\325\232<\332\224>;f\3123=_\321\302\273\217Y#\274\344\002\267\275WV/\275\246\367\230\274\232\342\231\274\341\032\212\275$Q\025\275\342\347-\274b\367b<\376\201\244=\3003\212\274F\032\325<h\353\031\274\222\374\345\274%\267\321:\216]\201\274\330\372\317<\224\177#\275\224\334\326<r\002\247;+\']\275L\n\207\275O\034\314<A\002-=\006\354\277<\3067o\275\033\'\271=\337/\211\275\">\217\275l\210\255=\0002\\;I@\300\275\214u\002\275E\200\340\273\002\216&=\314\314\201\2749\003\336;\344\325@\274\270f\370<C\001\031=\36782:)\226m\275|P\"\274\351\0139\275\250\276\321\274\230#\234\274\200\371\310;\337\261\273\274\177\3327<\344Ku<\257\300\213\274=\214\315<{W\035\274*@\262\274\006|\210<$3\021\275O\030\201=\346\002\340<\n<\260\273-g\256;\204\225\212=~\270\t>\005\377\261\275\276\274\032\275\230[\236<+n\362<\025\356V\275\214;\023<\237k\2069\245\350\267;H\245\326\274\230\315\242<\212\361\235<\314\021\004=\375\231\026\275\306\006R\274\223\337\302<\022\275\313<\305\177\005=PNY;\257*\332\275n\271\312\274\004\322V\275\356\303\241<\257\031E<w\033N=\230\274\305<z\213\027\274\365\366\203=\305`F\275\026\014\273<=\r\237\273gQ\201=\306\220\213<\344\006z<w\005\357\274c\230\014\275h\341i<\201o\003\275\323\3502\274\266o\\<\\\220\373<\333\346\016=\205\tV\275\214\272\224=S&\006=?X\242\274\315S#;\213\332\023;\315M\240\273\314\0307=\353\327/\275f\020\273\275\365\252\200=\356\271=:\207\204L\274\337\323\214=\213\213\210\275`\350\205;}7w\275\250\'M\274g\312\220\274\207\234\331\274\223@\334<[\261r\275E\261W\275\311k\227=\372\204\252\275[\377x\273\001\327:\275r\324\227\274-\320\006\274\206\\\325<\235\002\177=\221M\227<7\263\245<CO\222\274\373\216\325;6x\016\275\254\021\343\275B\010\211=\022WV\274\355\333\233<\260%\004\275\034Y\222\275a\016\233\2743p\317<\304\320\334\274\253\003\262\274\232t4<\257\\?=\317\305\031\273\024x\'=\336q7:\0209\361\274\233\031\'\274\327\203c;\232\235\026=\240V\032<\007\246\307=\203A\201\275\240m\316\274\217\003\004<\035\341\024=1\314\340<\026\305(<D\356\024=\212\307\375\2746B\313<\256\271|\274\'\263&\274Y\256\221\2756\211\177=F\020\324\274\277\276\260\275\272P\350<\246\357\243\273\243W\001=\3551h<\232%><\350\351\021\275K\214\t=\351\242\177<\371\250\267\275H!6<F\303\251<\317\214\"<5d\222=1\035\207\274\272\373\234=u\264\343<>mz\275\236\222\200=\336\227#=<2\t\275Ts\303:J\224&;e\231f=\273m\254\275,\250\360\274\332\326j\2751/\202;\350\2604\274\302\025\025\275\305\220~\274i\"\276=\276\215]\275\204Z\344\274\224\241\203=@\234\000=\265i\263<\024\240K\274\324a\253<u\314\024\275\364E\225\274\255\257\231:\233\304\273\275\037<\230<\305\001O=\256v\206<\243$H=G\257\177<l(\232;\362\310\333=n\246\025\273g\360\267\274E\031\360=3\2654\273\006\366><iHh<1\204U\275\313\\\\<K\213p=\257\3352\275/\255\256\273\257(\233\275w\241\002<l\311\223=K\"|<\362\314\277;\201\344\371\274\260\303\205\273\277\266\203\2747\273C\275\266\326X\275\000x\323:>\337\177<\2725c=t \016\273{\301\242<QG\300\274\276\220\245\274a\236\315:.\ny=O\351\317\274<\371.<\311\253\350;\036\337\353\275\327\021\202\275Y]\272\275\301\037y<|\346\005\274\3524\'<F\010\331\274\320b\252<\3038\341=\377~%=Uz\330\2726\307\242<\316R\003=\024\343\013=c^\n=\023\256\271;\310\022\336\273\240\002\252<\242\371\022\275\206\021\023\275\r@\373<(\306D<z%\335\273\372nI\275\257\356W\275BzG<\260\350g<\r\306\320\275da\233\274:b\357;SS\213<\334\265*\275.\322s\275A\220\350\274Y\025\332<yW\030\274mf\003\275\336!4<\210\336\361;\312\344\351=\206\331a\274\0069|9\344\034n=\214U\030\275W\003\252\275lYz\274\322+!\274\002\300\255\274\357\252\303<^\203\035\275\214\342i=M\177^\275\231\252\201=\225\337W<\207\273\232\272t\253\320\2754\274\013<\376\335b<!L\257;\270\203U\274\272\251\376\275;\360\211\2739\324\236\275S\317t=\344!\313\274\324\013N<M\225\346<\270\r\035\275\245\222\235\274\201 Y=\272\027\314\275\265\317\013\275\333G_;\234\323\010\274\\\241n=\013\245\254;\261e\244=\325\202l\275\233\235\021\274\200\377}\275_#\220;jO\247\275\235\322\214\274\345\n\215<\264\325#<\345\267z\274\254F\212=\373\327a<\260\342\022\275f\343\220=\234a\357\275.Us\275\221\377\215=o\203M=\002\254\372<b\275\240\273\337A\310<Q4\216<^&s\274G\376}=\312i\322\274\304U\265\275\371w\221<\310\252\304<\304\376\030\274= \020\275\235\332\241<\020\364\022=s\003\235\275\273D\021\275\276M\222\274D\257X=_H\223<\204\273\t=\021\001\001\275\000\025\251\274.\320\247\275\312\275*\275K2\214<\235\270\245\275\027F\246\275O\327\016\274\265\327\212\274\003}T<\006\356\005\275\241A}<\354\344+<\326\0336\272*|\003<Vq\030=\345A\246\275 2\033=\247\207\005=b\021\202=\017O1=\301\254\026\275\231\001\306=\322\273\004=Md\r\274\321\007\274\273\211RN<ss$=\324\257\010\275Lh\352\274\313G\222<}\331\375\274\325d\023\275\0209\n=\255W7=\006\235*<t\021\235<\352#\303<m\200Z=\335\215\317\274\346X\215=iPd;\307g@<\265/\255<\335X\243\274;>\307<3\357m<\241\226\321\273D\353\254\274\377\352{=TL3=\017]\275=\376\247\247=8^=\275gq\306<R\360\342<\\\'R=\225sr\275\223\307V\275\3373\020\275I`\247\274\340\344\006\275\354-\372\274\255v\005\275:k\374<\323z\347\275o/\251:\362.r=\032\321\221\273\271\302\244<\004\341\\\275\270\217\323<\241D*=\246_\277=\266p\347;\030?k<\376\244D\275\364}\023=b\2717<\240\255\321=\261\037L<@\205\003=\313;\211=\242\350\365\274XH@\275\242\323\377<\023\377\036;\t\273O\274z\224\210\274\177\251\210<\367\037 \275\306-\223\274&\210&=\022\256\216=\354\276\313\273\007\344\206\274\377M\206=\242|]\275;\305\003\275\010\351>;\3612\243\275\330\013D\274\263\310\212=U\310\220=\341\341L\275[\021@<W5q\274\303\244w=[\273Y\273?\\\023;\323\r\347<Y\350\027\275\261\375\027<\257\037\262\275HY\252\274`<\262\275\300r\307\275\314z\355<\375\313i=\375n9<\017\007\n=M\340\257\274\212\030\263=\026)\024\274\230\236J\274\241\220P=\375\324\355\274gS\001\275L\027\177\2749\305<\274\010\224/\274\267\016G\275R+Z\275\323}\305\274\020\311\235<\3073\237=\177\316\357\274s\n\235=\276\261#=\007N\234\27574\"<\216\203\274=\242\025\267\273\276\307\013\273\207\006\322=M\272P\273E\216,\273 U\363<12\321=\367G\031<\301 \321\274\251\321\332<\200\261\235=j\221J<P\037c=S\373\253=\236+\023\274\237\327!\275B\211F=\335*\300<g\312@\2754#\002\275\201em<\027J\006\275|\205\267=\257\316H\274\306`\215\275\033\256\300\274\337\364\215\274\017\033\246\273.\344V=\212l\026=\206Y\311=#5\222\275fp\307<\201\355\220\275kG,=\311mA\275,\364\311<\224>g\275\202\360\270=\250K\022= \372y\275\333\005I=}\375\206<\240?n=\257\361L\274\330X\241=\277\210\322\274\005:\353<\375\231\004=\277\\\206<0L?\274\211\233\201\275\214\240l\275\036h\007\275\361\023\311<e.\265<\264\201\"\275:\025\217\273\220u\264\271\277\337P;\221TX\275#\270\251\273\202a\003\275\216A\266\274\3637\203<`ZR9\256\267#<~\240\206<F#\034=\3168\222\274\245\253\302<\216\371I=( k=9YH=V\243\247<\234\323\220\2754@\204<\007F\200\274&\2004\275\311*\024\274,\303\016=\003\210\355<\323\016b\274\245f\352\274\344\307\334\274\234W\3678\360\273\312\274B/W\275  B=\325\206\342\274\376\035\245\275A\253\322<\317\214\026\275e\311\243\275\352\267L\275XV-=\002A\206=A!\217\274\2520P=\037.\216=\'\031\000<8\'\334<\t0\274;\025+M\274\214\300P={\r\301;\303ux=\333sA\275&\244\240\275*\'\256\274\213@\235\274\025\\6=|\037%:\343sd\274rY\023\274u\356l=+E\341<\213R:\275b#\307<\324Qk\273(Q\024=\346\032\003<OC\324\2743\177\324<w\307\257<\377/#=\240\316\217=\353\207\n=\313TM=`\006\257\275\026$\342\273el\253\275\000\321\353:\302\235\n\275U\006]=\315#\340<\367\005!=\223\030\375\275a\233\217\274\236\353S\275\345\236\213;\"\\]=\261\264x=\212\346\356=Nt\370<\305\347\340<\301\217\214\274\261v\323\274\035\213:=\314\347L\275P\306\357;\327\274\021\274\013\2239>\370\000\236==5|\2758\211\260\275.\241\265=\306\270\255<\3044\314\273n\\\205<3\'?\275\253;*\274CK\"=\006{$;S\030t<w4<\274\304\215\350\274\255.\251\273m\225U=M\031\233</\206n\273S?J\275}\025N\275\375MX=\330Y\316\273Y4\266\273\315\022-=W\217$\2750\267\370;\0007D\274/\244\n=\2609N\275G\324j\275\207p\251\274(\203\032\275x\007>\275\324}f\275\356\306a;OD\004\275;\'e\275\032\002\000=\000\232\177\275c:\360\274km-\275q8U=X\026\254\275\023\205?\275\300\315\254\274\025O8\275\370f\207\274\222=\214\272S3\001=\256\331\237=\230\203>\275\233q\002=\364\025\204\275~\251o\274\022ax<\346\302&<\3460\232\274\006u\t=\360\307\261;\361N\223\275\275\342F=^@\026\275\331\375\330<\2056\353<\2213\345\274\35470\274\034\374v\275|\314A<W\243\222=\\Ra\274D\332\222;\254\240\214\275@\347\310<\330A\327;\370\227\241<\215$Q<\241]y\275Se\377<\231\013\266<\346\345 \275y\215]\275\250_\242\275(\036\323:\335^Q=\361\177f\274Sb\017\275\355\361\t\271|\020\312\274\211\330\357\274>;\014\275M\256=\274xp\247\273\211\3063:^\333`;\001\024\213=+li\274\340\267\214;\314\250*\275\303\230#\275].\024\275\340W\237\275\314\322\365\273\262_\001\274o\025\266=\021\356\r\275\2339b\275\025\373\353<\220\374d\274laM\273\007\221\247\274\2560~;\232\357r\275\267~\300<C\034\022=\247\325.=\223f\035\275[\327\005\2751\335\024;\r\017\307\275c\362\240<\360\211D=\267\370\035<\013\006\210\275%\317X\275\366a\n<\261T\231\275\321>\235<2\260x<\342\341\263\273\253\204\242=/\316\247\274\360=o=\245\323q\274\r\260\204\273\332\344\033=@@&<\007\355{\273:v\304\274\227\367\273\275\374\021\236\274\2721\272<\242\250\273\275\237t\217\274\364\367k<k\310\n<\030\273I\275\346\304\213\275u\361\300<\302V\370\274\205C\213=\003wO;\365\307\236\275\211q\311\275\237\317\272<\225+{\275\207\346\227\274E\266\216;P]\234\273?\353\005;l\256\037\275DM\214=\014!h\274\240UL<\335\016W\275W\326\343;\374\005\016\275\'w\347=\237Y\230;n\3279\272\222\251\306<\355\266\237<\257/\245\274\200\023?=?~\"\275\3078\031\274f\001l\273\340VD=\003y\022\275,ax\272\325B\320\275\225n\273<\374\273\215<$\335\214\273G>\216\273U\035!\275s\025\200=\257e_\275$Q\212=\233\2458;ZY\240\273\340$\332\274\253\223F=\355\277\244;}\014\315:\201\177\021=m\236\241=R\276F=f\377\341\274l\031\323<){\224<\224\350l\275\327\274\267\275J=`=1\364\000\275\n\260S=\374\315\214=6}f=\022r\\\275\215\010E\275\304\302\033=\224\303\345\274\356R]<\002\210h<o\352\335<\221\321\243\275\221\205\036=?)\204=\343r\026<\334d\033\275sI\025\275ei=\275r\356\244\275\r\304\234<+\221\366\274\221iU\275\345x%=\037\376\n<\2271C\275\217\320O;,ub<M\231a\275\276b\231\274\020+J\275\311\013\367:=\331$9\230\301\023\274O[V\272\035\232\003\274F\343\030=\240\300[\274\324\361;<-\310\335=V~\004\274N\277\214=Oj{\275T\242G\274\256\033\227\2744p\222\275\301\001\372\274Q\035\213=\332\017D<\370\017\255\274K\201v<\327\335.=\323\2514;\033\271\315\275K-\272\274\"_c<\177X\231\275\305\263\024;d\341\240=\301P\211\274\210\013B\275\333\217\344\273>i\315\274\346\326\327=\356?^\274\246\227\341=\344\242:=\242\253%\274\220 \353\274\354@\203\275\'b\353<N\210\241;M< \274d\210\206\266\265\035\327\274#\036\331\275\375Q\207\275\273]G:&\265\317;!\301o\273&\237\037=\"Q.\275\354\335I\274\334hE\275\316\016\332\274\034\375d\274W\\\n\275\303{\331\274\234d\206\275\254z\256\274Q\014\237\273P@\376<>-\306\275\232\002C=\250\207\\\275\350`f=\337\327\244\274\033\nG\275\326<<\275\3068\230;\363r\344;\222\210\244:4[\020\275\t~\211=ygW=\362\366\334=\343\250*\274\034u.\275M\326\036;%\203\341\274\356t\364<\344\215\277\274\004\210G\275\314\320\234\2747\257\266\2756\212\017=#o`<l~f=\3304`\274\020gB<\237 \002\273.\343l\275\336\352_=90\370\274\371\036\255<\273L\265\275\356\373\227\275\263\331\235\275n\255\367:\232\362\252<UXj;\017\373\206\275\276\253\031=Z\300\206\273x8g<\332\215\262<.\200\010\275\243\353X\273\261-)\274\345\007.=/zK\275K\361\236=\000ad\274\\x\202\274\372M\242\274Y\200\226=\027\357\017<\273>\000\275\235]\242<\354\n\234<L\300\035\274b+\271<\376\362\337\274\272[\267=O\305\002\275\302\304\336<N\203\215=\2615i=\334h \275R#\201=D\212?=f\276o;\2771\325\272\256\250\030\275\252\230\215\274\327\251\241=\330\334O;\006ct\274\353o\n\275\361\234\222\273\260K\316=\021\343\013=\364\247\207<U\317\007\275\231^\007=\214nT\273!\355\005<\305G:=\236\255\303\274,\001\243\275K\032\233=\203\240v\274\251\010\345<\257-\004=\nS1;\251.\205<mn\220=\274\236`;\202\273\253\274\\\244\236\274!\344O\274\254\265\203\275\374\033\'=\346\377\n=\313\256\032\275I\035k=M\207\341=\210%\007\275\254k-=\320\326>\275\036\014m=\003\2129\275z\253\237=f\177\314\275\re\230;\0329(\275\257\360\303\274\3731\002=\'Tn\274eB0\275!\205\217\275\356\320\336;\313\277\261<k\006\333\272\0164\314\275\025\203\212;\371\2302=\256U\035\274\'d\n<\207\321\230<\373g\257;i\215Y\275\214\336\001\274/\221\010\275#\201\314<5\034\377:q\221~<9b\r\274\304\254M<\322\004\013\274o0\261<\014\356\377<\205\211\243=mr{=x\217\310;\315\322\337\2740:\010<L\370~<\370\211\336\272t$\330;Z\006)\274!\361\251<\231\304t=7\223\013\275\2128:<\232\222\261\273\253\303\352\274c\324\035=\322\367#<\237\240\245<\324\352\246= \010)<z\301\264\274\204\335\332\275\263 \365\274\307\021u\274.\225;=\034\nN=\374\330_<Yy@;\355\337\013\275\014k\232=\"t\370;W<\324=\205 *\275s\265\305=\010\234\272\275\373\3324<C\362\271\274\266T\005=\'w.\275\214.\200\275\014\375J<l\243\300<\272\211\367\274wk\275\275\014\306e\275}\275\345\274\333\343j\275f\234\201\274\221\312\342\2743\353o<\'\333\243<\\\237\211\275,I\024\275u[\266=h\301T=G@J\275\202i\330\274\312\306/\275(\322o=\241:\226\273c\211:\2735;\230\275opp\275\n&\222=\207\213;\275j\321\002\275\211\225\206<s\375l=\362\356\240<\017\256\326\274C\312\377<\035\331\267<\344=x\2744\"\340\274D\027E\275m\232\022\275\347\365\000=\244S\253;\210_d\275#p\t=\177}\352=\r\346\"<\225\301\247\274\235\331\266\274@%I<\352\354\341<\364]\315;t\014*\275\375.\227=&T\225\275\272\301.=\234\014\245<\002\274\276=\031sW\275Z,\250\272\004;(=\023\267\261=\353\303\016\275\352&\356<1~m\274\333\032P=\"\277\250\273Q4\335\274\020\212.=h\335\267<G\200T\274\304b\223<\3763\366<h/)\2749f\346\273\275\263\013\275\r:\232=\320\"\266\275\207f2\274\004\"\234\274-\224z\275}I\243<\220u\301\274\307\020\366;\231\r\222=?=\320\274\366\222\334\273\010\302g\275U\375\016<\331\201H\275<I\232\275\312\030#=!\326W\275\340|}=f\025\274\275\236{S=\002N\205=\271?-=\3010\252\273\367\364\224\274\0260\304<p\223\337<18\203;\360\213\274\274\307\313\344;\216e\225;p\352\371<\214\0306\274x\365\315;\003\266\336\274\210\240\003=\227\350Z\274\254X\345\273\331R\023<\216\225\320<t\220\351<\202\213k\275\004\n\220\275\0018}\2746m\230\274\201d\326<\337\262)\275\333\346.=TB\265\274\006|\277\274\336\376\205<Ts\203\274\236\317\321<~\273\036=\336\032\002\273\251\253\371;Z\001\204\275\000\317)\275\006_K=\303\007\303<\330\346\221\274+$\362\274L\205H=q\275\303\274\307\310\\\274<\223\212\2745\017\355\274\342\352u;\263S&=5{\333\274\r\365\311\274\272\366%\275D\024\265<\271Q_=t\300J=\337\213\325\274&\023}\275U\021\313\274\315$\022\275\224q\264\273\202(\242=\372\347<\275&Sy\275\332\022\276<\300\026\226=e\326V=%\355==\327AY;\325\233\036=\320\205Q=`\032\027\275x\200\":\324\237\206\274\254\323\336<\300>`<\342\272y\274\314\003\030<9\177\'\272:\253\363\274H\375\342;\260\341F=\2666\205\275\245\\\210<\337!e=\201E\205\275x\'\211\275\002\240\222;\377\333\201\274W\322\241\274=\025\230\275\337\001\211\275\260+\353\274\360\\\020=\331J\256<\326\005\224\274\215\327H=(\200\303;\335\332\273\275Zz\205:6+I\273\204Tc\274\301\355\366\274\350yr=\tU\"=\210\265R\275\361\325G:\377\271\332;#0`\275\226\rQ\275\256;Z=>v\230<\nxU\2756\024M=J7\017\275\266\007\311<6S\037=\'\254\374\274\031\001\255\272r\n<\275-\211\000\275\303\226\360\271\321\033\265\273\023\367#\2757O\233\275p\232\252=F*P\275l\2148=H\016\220\275\"\031\235<\345Q2<W\213v=B\"\355\274\316,&\274\232\326\255<\305\342\014\275\310\243\224\275\300T\271\275\246X\352==\326\232=\366\305\017\274q\215\000\275tR\'\275\344\256d<\035\331\304=2\371k\275t\275\252<S\314\231\275\252u\001=_\277S<wd\260\274\037\'\201\275\020E^\274\277;\236<mb\311<n\346\337<\333R\236\275\'\234e\275\370\301\302\274\222\276B\275.n\226<\020+\354<T\345\366\274\273l <~r\007=\251\372\301\273rEI=\346\007>\275\025\3140=\334\272\360\274\357cG<\265\207>:\241\325 =\010/\226\275a\365\214\275\0079\373\273\002\3426\275\351\317\275\275\354)\337;\037\350\220=\324n\231;$\364\251=\212\322\217=\007^\033\273Fw4=\317yW\275\236\242p\274rmP\275(\217e<;h\007\275K\356\361;G\336\225<\375\232\'=\343\323\250<\322\370\233=n\266\207\2753\233%\273\351\032w\275\274\324\237=\371\2613=\320\300>=\374&\245<xd\354=-.=\274\355Uc\275\305\335\241;\252\356\312<`\320\356<+t\017\275\262\345u=\332x*\275U\323\243=9|\260<\254_\321\274\265\260\255=a\331\236<(\360B\275\344\354\347\274U\004E\275\347\002\255<N\023C\273Y\\\\\275Y<h\274\234b\224\266r~d=\2730\016<Y\237\223\275b\374\020\274z\274\212<\3507\214\275\232\315\260\275y\202\241\274Uq\\<\335\033\235<\371g\216=\247\260\023\275\261Q\026=r\324s=\371\272\232<H\032\222\275a\254`=\317&\220=\344\256\304<\307\225H\275\214<\022=\207\2563\274?\025\274<\243YK=\354\316\215\273`$\302< \320M<\244\003\030\274\024\014\026\275\316\000t<\027m\273=\344\221\366;L\021==\277\242\257<\306\031\374\275\216\275y=\214\234\265\274\'\200\266;yH\245\274YQy\2747\334l\275\007\233\342\273I\032\203=\311l\335\274\316|\313<\310\007H:\205\3431\275U\024k\275\211n\250;M\247<\275l\353\035\275\227sY<\330\374\\\272\232[\352\274\331\010\355\274F\217%;\325\245\345\274\301\362c\275kZ\321<\333PF\272\340\340\017\275\376\325\213=4\314\324<\3339\024>0\317\204\274{_9\274\032{v\274\354g\351<\333\223\231;0\312\302<\323=\276\275\306g\225\274+\030F\274\270Z\177<\316\212\377<\330\220\355\274\240;\212\273+:)\275\240\301\242\274\344\304\232\274\243\375E=J;0\274d\t\236\273\214\301\321;kF\327\275\313lv\274Dp\201=\360\r#\275%\252\335<\244#I<eJo=\252\337\256<\223\261\355;%t4\273 \251\227:\362\201J\275\2378\345\274P\313\331\274\263\345_\273\344\223\001\275\273\356\234\272\253\316\375<,\220\221<y\202B\271l\317\272\274\373\r0=o\375\206\275\2516\026=jl\344\273\307o\013=\264m \275Er\034=\225\311\374<[\233\362<\017\316k=\205\341\326\272\215\224H=S\267\205\274\265-\023<\034\305j<\355\357=<k\036]=}9\310\274\312\024\227\275\257\207\205=\207#Z;\255\337Z<\210U\327=)XL\273]xL=i)K\275\217\342\302<e\314P;\310HL=\357\036]<\263\346\201\275\356\020\216\275D6\326\274\022\303\375<\270~k\275\275pY=5\305\177\274\307\353\223=\302\302\231=\356/|<=\006\014=MN\325\275\376\353\204\275\350E\324;\033\304\234;\215\254O\274\246\t\334\274QO>\274_\373\317\275\246\243\227<?\344i\275_\307\230\274\357\301N=\273N5\274\352\356\200\275\333\273\210;\023\317\016\275_\240\310=\201\356+=\t\025!=I\250?<[\360\272<\003\344\244\274\243B\252=\211\213Z<\031>\321=\336\0235=/\013\201\275\032\275\034=\232w\262\275\027t/=\277\325\201\275\270<\224<I\263\222\275\3432\234=\020\204\312<\324\224\341<\330y\177;s\330c\274\232\345\023\275\257\346H\275\nA\023<1\311\277\274K\205\276\274f\225`\275\232\336\202\275\354Mw\274\'\205e\275PV\253\275\377\'\201<e\027/\275\320\030\r<\222[\200;\203\251\014=\035\272\205;t\267c\274\220#\227=\n\3729=\335M\316\275\304\275\217<\210\020-<V\177j\275\334\367\205\274\027Jl\274\250\017\014\275\036$\305=\227\264\310<\243/-<i\230\365=\315T_\2741\311\311\274\352t\023=#N!\275B\350\273<\236\342\3069_\363-<\210\371\026<\323\335t<\370i\331\272\367\265\010=kr{=\362\240\335\274\334\210\230\274O\225\006=C\003\030\273@Z\034=Gy\347=#6\336\272\363>E=\360%1\275:\214\'<\326\357\035\275\213\326\'=\344\264\254<nm\273\274\340$\021=\013D/=\370V\326\274\321\243\312\274t1_\275\324\304\000=\2704\003=f+s=j\306\205\275\341:z<\014\270A\275\010y\233\274\2232q\275\033\260\010\274\302%=\275\0172S\275\034\305\244\274f\003\001\274\261;\231\2755a\256<0\211\225\275\251\375\263\275\320t\255\275\231~Z\275\372\223\332\274\274[\221\2744\323O\273\332\240I=\245X+\275\375-\237=\306\373\226<\211p(\275Y\n\032\275\t\260\031=L<\003=\222|\255\274\000\257\231<\213\020d=\253\035s\274Y@R=]Yw\274\304\225l\274@g1=?\\_=\035\251[;\345\220t\275\325\225d<\364h\354\274\026P?\274\357J\007<\010\377o=\347\261-\275\263N}\275\225\373\252\274\343\007$\275\007(\211<\231\205\002=\345\224\373=v\356M\274\373\354\217\275\311\024&\275\272W\214\275\246\230\201=}\252,=\346\252\233<\"Nd\274\031xF\275\237\317 =\0035\272\274\363\372\245=4f\020\275G\277p=`\340\303;\026V\';\244fc\275\314Z\265\274gU(=/\320\006<{\202:=:\266\201\275_+\312<\025\207\n\274\201S\033=\236\242x\275:\272d\275\247\'\215\275sG\200\275\n\257\020\272\252\334\033\274\354\235C\275\256\002\222\275P$?\2730\204\207\274\355s!=\234\027*=A\013\254=\334~\002<\265\362+<\217\305J<HD\332<\227(K\275{9\215<\341\033\202\274V\230q\275\324m!=\357\030Z;\341\323\320\275\027L\204\273\027\016\223\275\t\200R\272\0018\242==m\201=/s\212=O\004?\274\217o\336<\326D8\274\300\024\000;;\335_=Xr/\274S\2071\275\325\217\213\273|\363\030=\263\222\234\274G\317\343\273n\302\n=/\351\220=72I<\363`\365\274\336/>\275^\205o\275\327\224\264\274\024\206\031\274Px3\275\260\322\237<r\004\026\275N\303\205:\203p\241\275\265\275\255\275,\247\200\273\004\260\245=g\306;\275s7\025=\260\276\242\275\035\001\007\275n\324\t\275\2627:=\\\236|<\3274\224\275\370Xv\274\016\031\224\273\034\337\021\275\242AI\275\361\212t\275\"\342\240=\305\365\335<\326\004i\275\314e\003\274\023\303\221:\032\313\366\274e\263\300\274{\r;\273 \201\260:\3702u<xa\373\275\366\003\324</\273\223;\322\247m<\252\266\245\275\0069i=^[\210=~\325Y\274\036\257\200\275.wF=:\213\235<\257`(\275\0366\307<;\220/\274\312:0\275\235q\232\274\005\305C=\275_E\275\203\264\t\2759.\022;\227A\001=\333\214\t\275\302\227\224\274\233\206\210\275\321\312\032\275L\334\007\275EY%<(\3711\275\261\221\277\273\2051\037\275\265`F=\305~\226:Q\317\333<\321\324\322<\250\206\336< D\330\274\005Jy<\347\255\301;\277`/<\304[\201=\t\315+=f\227\377<\316*D\275\330\304/\275x\242\016=\323\013\376<8\235k=\203\336\024\2744n\262\271\355\272]=H5\221\275Vr\371:\r+:=\n\347M=(\004\303\273D\266\265<\342\227\367<\373\347\265\275\370\014\353\274I6\312\274\214xe\273\225#\215\272k\303\361<\371\274/<\312\264\002\275&em=O[\217<|\351n<\222%%=x\303f\274\000$Z\274\215\230q\275\322\277U=\257\326Q\275\357\264\036<\017\234\223\275\ns\032=B\207\023\275\032\243\250;s;\233\274\034\365\007<M\350\265\275\276\0248<\373\322\037\275\233\247\216<k\033\022\275\rW\262=ld\215<*w\217\275y\346 <_\357g<+\325\252<[\322\312\275.\302\300=\241(S<B\312\375\274\221(\'\275\303\257\366\274\\\251m\274\016P\300\274x\353\262<\357<\342\274\255\243\t;\001\374\022;\211*\304;ct\001=\271p\r:nr\355<\3151\035=\315\265\237;!\\6\275\370Y\242=B\'s=4\201i\273\372\312\025=\344<\002\273\013\320\014=\303d{\275\310\304\304\273?h\221\275F\246\227;\306&\025<\335\203\336\274\027\271s\275%\350\257=\203\275\343\272P\2262=\2354<=i|3\275\226w\347\274G\364o<\304\305\025=\205\253\342\274\020\016f\275P\211\357=\033\366#\275B\263\023\275\255\255/\275.\267\254=\211^8\275\217bQ\274\367\265\340\273\375}\025\2749\033\002=6\311]\273L\332;<\355\253N\274\230{F=\340LP\275-\023\202\274:\217\006=\222\367\260\275\265\2740\275\224Qg<\0248!<2\364p\274@:\216;\311>\367<\304\362z\273\331\355\236\275\322\277\210=\321\312\016=I\207\375<\234H\246<\021G\024<l\333S=\2225%=\004E\306;\347i\031\274x\005c\275\310\224><\212\211\207<S\207\257\275\343\341\256=A\363\246\274O\237\322<9\375\311=0\276c\274n\212\036=\234\3455\275+_\002;\376\301\235\275\230~\234\275\024\212\232<\335\3423<@\200<\274\347F@\274x\245\264=\002d\276\274*,\n\273\353\330K\275\255\003+\275\177\1773=\354\360\232=\264Y\214\275gvQ=h\\A\275\252\';<\251\351\211=u\374\351\274H\345\341\274\006\350\236=E\361@\275T.\357\273\234{\315=\356\352\371\274\346,\034=HV\203<,\214\214\275Bj4\275\254\002f<\226m\205=\020\304%=\340\206\233;\216\332\311<\344f\006\275:o\343\274\244r0\275y\327\343<{\332d<R-\224\274i\356s<\320*1=6\225@\275\2751%\275\236\261\215\274\374\264\264\273\377\2473\274Vb\203\275)et=P\377\225;V\007\362<\313\322A\275\203\325Q<\231b\325=\200\233\303\274\013\026>\275D\220\254\275?\270\021\275\265\"\205\274V\t\002=|\2703\275\336\034\217\274R\212\347<\351\377\226\272/\367\031<ykE<\021\010\277=\311\350\200\273\016\003}\275\342\271\223=k\177\353\275\300\036\257=\020\023\307<\245/\204=\177\217\017=\227o\317\274\224TY=\006p\245\273\326\004t\274\215=)\275 \366\372\273eZ`<3^\250\275\326fg<\372m\314\274a\200\272=\"A\250=\317\2003<\\\254J\275d\003\r\275\216\354\201\274\tNd=\243-\301<,\031\245\273=V\210\275\327\236x\275\313`\003=\226\355\037\275\233\355R=\235f\277\275M1\t\275\231a8\271\331\221\235\274eUQ=5\241\335\274\226\220\224=\333zG=#\3672=\206\263/<Li\"=\203\347\354<\205\200v\275\266\036\013\274\324\244\244\273\227\367\306\274\245\026m=\365\323\024=d_D=\202\321\325;\010\363\302\273C!\245\275\326\341n<\010\371q\274\'\232\034\275\322\322\035\275f\326\035\274\020\013\340\272>,\222<\2113\030< \203i=\354\3477<\026{\230\273\260\224\235\275\006\265\226\275?\311\314;\033\203\033\274>\002\227<1\266m=\226\217\004\274u~\221\275\224\330\256<2\265\217\275\254\327t\275\235P\020\275\265\023\271\275\036\357\375\273\030\344\210;^\311\026\275\374\363V\2750\304\200\274\252\362\023\275\341\203:<\006+U\275\340\332\300\274\311=|\275\213\333\024\274P\246\003\275\262O\242\274\361\372\342\273\205\316O\275\304\266\373<\340\205\307<\260i\247;\007a\010=\273\365\325<9z\n\275\003\003\272\275\251\343\240\274\354\334\276\274s-F=i\263\311=\032\203w\274rz\262\275\"\000\036\274;j\274\274\021R\252\274\300\254\214\275\274O\024\275`~\210=\355\254\220\275\370\321\366\273\010wR\272\356\345\n>\246\007\034\275\203@X\274\324\255\272\275E\230\247=\347\205\254<H\310\217\274\035\317F;]eT<\264yv<4%X\275\035\225Y\273\2076%\275\351]\360;\n\345\243<h\002\310=v\227\n<?\321\251;\356\rA=o\277\020\275\027\0146\275\231\272\272=\010\2175<\223\352\007<\307Y\316\271P\244\025=*\037U\275\024W\343<we\220<.\235\236\273\260\205\203<N]\217\2732-\037=\025MG<b.\005\274mg\002\275\t\365\313<\347\241C\275\221\2639\275\332Lu=\247\371\r=\220\202\335\274\253-^<\020H2<\275\262\003=\274C];r\013\205\273\316\3647\273\2467\034<;\202k=\374\222\024\275\203\004U=\377\326W<\255P\233=\374V]=\211/l\275\3431-<\013\025A\274\013\010\304=\276O\n\275\025\251\214\275\n\2776;\020\210\311\274\300\3545\275\250:\005=\233K\013\275\321\217*=4\017 \275\377\374l<\234f\343<\230\346\263\275\020\365.\274{-\303=\3218\272<z6\375<B\237\031\274\026T\334\274<\365\255<[\316\216\275\223\301`=:\t/\273W\355\025=L\177\'\275@\247i<\272\356\265:\326yO\275~d\206\275\3713N\274\017}\256<\315]\225<%\014Q<\226\361b\274\375K\001=\020;^\275H\351=\275\256\212W<\034\016d\273\342\210\306\272\275\262\006<\224\225J=\204\377r<M#\000=\376\377(\275&\241\361<4\304><\373\307)=\246\202\263=\334L\204<A\251@\275O\217\366\273\220vc<\247\355\014\274X\036\217\274\277\'G=\254R+\275dE\236<\271\357\235<~jy\274\022ld\275I\351\222\275\253 \013=\177\376\253<48{<\317\022R;t\252I\275\363\224a=\005\241\275\274\252\225\267=F\361g\274\022\207\210\273\214\2477=\324\306\207\274\227T/\275\t\rl\275\337\020\316\274\301\006\023=\327\320;\2758>\003\274q\214\234\275\276\241k=|\013w\275\363\t\266<z\357\032\275\\\344\034\275\345\020\222\275\2577\202\275RU\333<5\266\232=\336[G\275\201G<;\254\226\236\274V\314\255<\013\241T\275V0F\275\236t\230<>\335\364<\002\235\326<\263\306&\275\323\2619\275\226e\002\275\200\365\263\274v\242\270\274C\237\372\274}\256\211=\214\3206\274\177\204\302\273\177\334\001\275,!i<\t_\256\274b\207W\274\242f\330<\005\221\177\274\035\375R=\006\263^<\317\373L\272\221\261\207\274\375\356\271\273\241\210\301\274|\027\264\275\340\213\361\274\262\006m=3\2678=bUh\275\250\274R\275a\001^;P\276\026\275\331\254\033<\377\333e=W!\004=\250H\002>\341\275.=\267\360\000\275L|\211\271\251X|\2753\265[\275^\201\"\275\255\356\003\275+%N\275\364\234\t=\261c\034\275\326t|\274\2772$\275\316\305\212\274r\005\365=\374\270\303;C\273\203\275\266\332:\275-+R=w`(\274\003\227\n\275\036\356\236;\374lc\275\252}\277<a\006\254\274\315\255\204=\217\372t9\221\234\220=(\001\323=\272\256\036<\235y\277<V\235%=\202tL=X?\243\275\t0O:\223!~=\356\262\007\275Si`=v\336M\275\362\225\320<y\214\244:\266\\\335;Q\246\373<\241\262\013=Hr\315;\024\352U\275\020\322%=e\330p\275\225\243-\2750ka\273pxB<\304\023\024<\250\035\214\274\261\315\231\273\304/l\275\005\202\222=\036\202i\275\354!Y=\334\253\205\274\017\317\301<\326V\231=/\003P;}\346*=\340C\r\275\300V\363<\353c\370;IX\013\275\206\311:\275\264K\327\275Uw\213;!\271e=J\274\016=\215\000\035\274\302K\216=\242\\\243\274\027\234\r=\234\277\016=O\nT:\007\274\243\275\224\237L=g\353T=$3\356\275\341\373E\275\t\327\213\274\353\337T=\236\374\023=\010\326\352;\247~\212\275\254Z\263\273\376\r\034\274\375\220\262\275;\323\326<\267e\264=P\277D\273^\314\023=\005\254\037\275z4\177\275\2531\264\272\030\241@\275^H]=\3226]<hT\215\274\005\372}=\177RZ=(W\t>\2054_=\367\313>\275\246\205\221\275k\025\'<\036\372\352\275\273H\006\275\3538\030\275I\376\027\275\230UM9f\0164=\262R\377\274\241)\306<\364W\246<xV\301;\315\361%;\224`(=\261/\262\273\021q=<\265\006*=8!\"=\2221O=Qm\002=\210\341\000\275\246\317\026\275\326\267|\274\350\373\177=Wv<=\316\325F=S\251\232\275\030\336u=\311\000\264;C\330\346\274\254\256\200\275y\3322\275;\301\013=L\305\003=|\nG\274t\351\330\274\177V\263=\225Y\350<\305w\262\275\017\233\235<-\036\361<\3617\264\275\020G\002=\203\364\017= v9\275H\271\247=yjw\273d\024\240\274\221Q\300<L/\345\274\213>\240\273\022@\231\275\002n\010\275\337M\006=\206\332\017=\230\2111=\017!s\275\n\373\256<b\373k</\320\215\275W3\200\275\344W\262\275\270\207\245<\036\322l<w\366\236=\220\0107\274j46=\001\2568\275\010\223\332\274\346\255\n\275\375-3\275\334\355\203\275\r\252\n<\017\035\212=\310Z\035=]G\003\274\314\324\346;5z\036\275\353Y \275\234\324\t\275\224Sg\274q\205\322\274\322C\240\274Z\3102=\227\207a\275\312\344\311=\333a\036<\264\334T\274\350\214\224\274!\321\230\275\220\202\003\275Ui9=]A\036\275[\325\201\275Bl\312\274\251^:=\032\254a<\256\346#\275I\006\327<\324>\247=\267\3548\275\2054V\275\210\004\222<\251\207\357\274\r\334\027=J\202\022\275)\310\253=\336}\262\275}M\013\274~G\035\274\366aD=\266\315-\275\371\315\036\275\301y\351\275y\2370=\231\007\345\274\373\274T<1\262\204\274\027+g\275\262J\352\274\255\230\206=\376\334\367\273\2665\017=\030\362\221\2755\221\006=\031\030%\274\201\341\213\275b\323\211=\020x\376;/\021O=\255\213\377;\262\247\377<\267\262\335\273\033\2251\275\034u\230<\224Q\247<\337\310a\275\333<\260<`\030\243\273\235\275\"=\027$\002\275\275f\322\274\312\013p<&\263\027=u\200|<\023\001\032\275\344\001_=\354\032\036\274Fk\322\274\246\030\243<\327\376\204<\367\313\376\273\332\224E;vQ!<\363\254\002=\246\336\203=\t\317C=\352~}=\r\317\315\274\266\030R\275\027\021J\275R\227\234;\027Pw\274\310\303Z=Ez\204\275=\352.;E\203\032=n\333v=d\215\332;mJ4=3\256\226\274\203\226\254<<I\343\274\253=\212\275\003\227-\275K\372\374\274\027\211\252\274\220\316\371;\036\317C=}\030\262\275J\002Y=,i\361<\374y\270<o_E<\306\003\277<Z\314\001\275\311\003\346\274;\340\321\274i\275R\274\000\002\027<\353\243\332\274\007\367\312<\"\205\251<a\220\006\274\003\325j\275\014\r2\275\324\2732\274(\321a=x\220\216=\370\247\234=\221\253\036\274\205\020\227<\024\233t\275\224;u\273\207\036\343\274\342\010\020\275$C\"\275Yr\332<\267k\032\275\027\327\236<-\t-=\304S\000\275\261\232\275\274F9S\274\035\371\362;\252\331\024\275\312\324\224\275O\034\267\275\254K\206\275\350wd\274\034\t?\275\024\353\364</{l=\261p\277<\323\2157=6\033\337\274\254\346\3229\336\366\351<\320^\027\274\242\206\310\274\361\211\254<\372\335};\t\315\313\274\277\222\n\275~\216\317=J\244\211\275\277\343\207=3\365\\\274\211W6\274\362\"\343;\311A\221<v\365\226\275\3142K\275\224\355x<\367p\233\275,\204\014\275\177\337\006<d\n\341<\3600\266=X4\344;\237Q\204<\266\355\243\275\311$\005=\317\263\367\2747d,\274S\224\017\275.\265\240=\372\327\341\273\375\331\210<\332R\233<x\327\303\271\005\274\266=Y\227\037\274a\261\241\274]o\237=\273\250o=\'\205\363\274\257-9\274=;\255;%G\317<\007<2<\020\320E=\000.)=\250r\237\274\006\314\237\275j9\257\273\241\010\350<+~-\274V\307;\2750\224\247= \227\244=S\330i\275\2426\223<\010qo\274\343\303\231\275\030\375\351\274\274\202\027=m\023\355<u?\246\274\267k/\275\236\343\272\275\275\320]\274\324\302\030\275n\234\344\273\343\274k\275\376\023\224\275!\241z:\271L\201\274\271\210\027=\311b\335\274z\037\026\275\357j\333\273\024\352\272\273\214\002\036\275\332\277\340\273\r\006\025\274\026\237b=?\352\212=(\013\327;8\007\206=\213\t7\275|\361D\275\027\213c=(\3266=\225\017\275=r\020\221\274\3168\213\274\361\247i=\343\314\243<\311\265\244\275[\252\242=g6\227\273\354\314\273\273Z\022\260<\264&\255=\353\241D=\337\014e\275\021;\271<\340\tH\272\0233\023\275\\pk=\371\373\305;\236I*=\261\006\213<\363\277\000=\000\313\200\2748e#\275\241\340\007=\230\304\246<y\001\030\275[\366\205\274t\355\372:\214\260\316;.\312\377<k\377m\273j\247t<k\320\031=\30681<\342\331~\274\373\355\'\275m\255\005\274\374D\263\274\226>\r\273\251S<\275\267]\031=\222\032\301\274\030\231+\2753\211\'\275/r\204\275>qA=\330\277o<@\024S=\363\354\234=\356,:<eu\320=\220\215\020:\343\210q\275\025\274M\275?3\010\275\311\232\375\274^]q=\306_\003\275\232\212q\274P\023\262\273\356V\227<\2638\223;y.\306\274\204\037\023;,\335\034=\366\004x=\036L\024\275\033*\210\274Z\033\255=L\220!\275k\313\025\275\0314*=N\022\231=2bZ\275@\216\n=U\036\252<\351\375\036\272\266V\013\275\224\270`\275\346\033\232\274/V\242\274\225\005\021<LMY=\355/\340\274\232)\030\275\027\317\262\273oC\275\273O\203x\275\201\036\033\275}\246\241<\211\204\233=\341qe=5F6=[\317k\273}\365\214\275\323\206,=\264\263R\275\260\311\271\272\t\233\244<[\017\"\274G\272\250\273\372\240&\275.\366\207<\013|\201\275\375yb<S>%\274\004\344\211\274\257G\225\274r5\363=\336\021 \275P\327\256\275\023\324\361=A\356\000=\256\204P\275R\330\214<.\263\316=l\265m\274X~>\275\361#\237\273\023\220\224:\202\240\203\275\017J%\275\352aO=\255\030c\275*07=\n\003B\275@jo\275^\tk=\253i\306\274X\251\301<`]\225;hu\276\274\352%\210\274\035l\316\273\031Q\231:\345$C<\214\021\221\2738\335\322\273)\010\013\275E\026\245=Z\026\013=\034\2006\275q\263\\=_:\231\275J\1770<\202\267\006<\322h)\275h\274\221=\244T \2751\304*\275 \363J<\237\302A\275fR\267<\334L7\274\234\325\362\275\026\327\225<\037\204j\274w\251\255\273\352\272\n\274\227\216`=\202\357\264\274\320I\206=5\210G<\374\\\022\275\341\235h\275<\257\347<\347\0241\275;\014\334<yn#\275\324$!=\323-\037\275O*\346\274\336\334\241\274$\366\037\274\3155\210\275u\300\262=\276\222\001=eX\001<t(R=\346vv=\346m\235==E\037<\215\227|=\247\n\020\275\266\350|\274z\034Q\274K9[\275M\316D<\227I\301<\271;w<!|\254;\265\303\002\273&9Q\274*\032E<]\027\\\275&A\367\274)S\202\274\317\2631=\277G\271<R\207:\274}\316\376\272<\3576=s\020\214= \365U<\302\007\317\275\227\205\014\274A\323%<\222\221o\275\361\267s\275\370\262[\272x\202K\275z\t\251<\305\357F=\315\333\017\275j\245\274;\261\266\250\274\022\037v=\357\324\226=\262t#\275\2710\235\274KX\243;6*\002\275qI\242=\321d\270=\325W\r=[\1779\2746p_=\307\203\225\275\370\003w\274=^Q8\206\327E<\327\372S\275~\311\254<\025\031F=!\324\341\273i6\023\275\233\243W<\341\327\236\275\241\365\376<\313\340\000<\\\304f=x\020\205=CL\r=J\314e\274MDq=`#l\275\222)\312<m\211E\275\261r\304=\232\007\024\275yB\227\275\264\320\206<\2339r\275\256\206n=6\014z=Th\307<\316\365\t\275\225\037\266\275\264\366\247\275&Z\217=\0262\256<0\267\n\274\254\254\307\274\355\365+=}\343S=Fm~;v\261\r>\022\345\367;\025_\233\274\270\032\023\275\372iX\275\000OP\275\002:Q=\033\000*\275\036\324\346\273\211\264\212\275\\W<\275\350\"\210<a\232q<h\350u=\2324\347\274\332D\t<8\030\021=g\374`\274Z\307\000\274\354\261\371;k\202\355\273\344\346\357\275\032\211\266\274\010c\307\274\372l\006=\300\345\034\273\342\223\240\275\024\036\354;\336q}\275\001&\214\275\354\204\266<\232\327$\275\334ev<\364\267\337<\222\241\347\274l\365\245<\001c&\275Q,\350\275,\025x<\331\273\032\275\n\213\324:)K\337\275\326\323c=\335S{\274f\205A\275\332\221s<\n\217\033=\325d\271=\277\016\002=\340\205p=\006\246s=&Ju\274\342\317\234=f\020\024\2752\337\312\274\302\265\314\273t\243\006<\321\204#\275\367\303\272\273^6\201\274\037\316==\351:\030\275]\253(\275\000\231H;\332[\204<\222t\316\274\355\312\242\274\302\363\330\275\345d@\272\002\261i=\220\034\326<U\rN\273Y\000\026\275e\225\223\274U\362\362\275`X\277\274wd\220=UT\301<\377\224\037\275\034_\022\275|t\201=\352\247\307<l\363$=\303\261\324\274v\021\010=\0349<=\367\320}\273v\334\n\275\215\350\003\274\317\244\223;\225\226*\275\206\'1\274F\321j=l\305\217\272Zz\342\274>;\213=\221p\270\272\2241\234<py<<O\256\021=B\202\234=T8\344<\033\006\221=\226\004$\275q\251\037=Z\254\256<\251\336\334<\272\311u<\371\233\212\274e5\303\273O\2463<\220\210r\274M\325A\275\231\307A\274\225\314\224;j\235\223<\264\026S\274\203;\030<\364(\246\275\223i\270\275\214\310L\274\247J\033\275aW\2018\352\242\264<\030t\353\274A\251j=\227\314\016=i\256\0209S\304\207\274,\366(\275\226\362\301\274j(\324=v\026+=e\202h=\307t\021=\013$\224\275\332\263\177\274f\237\257\274\"\366L\275\222\332D=\373\n4=\035CQ\275\205\341\203;\177h\244\274\256\214J\275\375\331\"\275\216hw\275 \024\367<vb{\275\3603\204\275s\035\205\275itU=}\177\026\275\356c\032=AI\t<\276%&=\036\365q<\226\002\003\274\006\016i\275\265\210\006\274\266\3649\275qJ:=!\230v\2745\277\n\275\230\350\213\275)\332\211;\3358\024=^\345`\275\317\032\177=\216\356\013=W\246C\272\277\377\017=\230W\200\275& \347\274y\3723=\364\373\277<{S\207<\031\340\266<\320U:=\330\034\265=\327\357P\275\340\023\310<V\203j<\377\036?<\204\375\211=\363\364\302\274\'BC\273_\204|=\035\030\214\275o\356}\274\237&\254\274s\001\212<\271n\206<\317\005\300\275E\363J\275\235%\231\275\020\336\301=\274M\021=*5\016\274\354\212\232<%\271\322\273\351\357\261<u\211\356\274(\374\217=G\241U\275M[\235<b\327\304<\273\274\021<a\313H=\305b7\275\313\3448=\371r\253;J\205\302\273\257\177M<cW\035=Tj\207=\241\014R=\304\236\321<\004\201\244<x\"\371<\371\003\350\271\031\375\367<\366\257\356<,\n\021\274\222fz\275\212^^\275\024\034\207<Nu\034\275\263\010\227=\246\310%\275\024\377\341\274S\nc=Gz\220\274\242\003\261;\241y\037=\313\377\262<\2224\014\275\335\037\372<\324\371 =X\303\234=\\\341\036=\\\n\177<e=\206<\325\025\274\274\320\376\230=\202\356\000\2757\2177;\324\332\214;\002\221\267;\303\013\006<\213\303\324\274\036\006\216=\212\007\274;\370~\343\273\272\r{=vW\216=\267p\325\273\246\211\377\274\006Ow\274\211$\235=\205\034.\275|\366\270\274\"\030\256\274\020\377\001=\021P|\275!e\004=\357\220\002=\035\n\033\275X\273\233<Sz\317=i\035\204<\3347\233=\225~\227\275\210t\254\273\251\320U=\235\313I\273\235\332\214\275\024\313\315\275o5[=\363O\227<\247\302\270\275\361\356\\=D\007\r\275\223\242\206\275:\365\276=;\277\252\274x\273\360;_\021\n=\260:\331;\302\225\317<\037\225\007=\025ix;\0209O\274\266\030\311\275\377\276[\2755\020\310\274\227\326\335\274\264y\253=s\024_\274\240w\213=P(i\275\262\260X\275\307\233\372\274O\362\233\275I\334\030=\355\177J:r\036\243;\216;3=\026[\356<\314\275\314<\026\214\342\272\022F\336\273\317\220\374;O\237X\275\261\354\035\274Z\255\021\275\247Q\007;\363\251\305\274wW\300<\305<}\275\201g\032\275\341-\021\274\266\271\266\273\3665\350<\'\204P:\2616\246\274\247\210\035<6\245\276\275\342\004\224\2741Y\221\275\004\205\360<\331@\264<\n\037O\274G\311\002\274\362\227\263\274\203\377<<\330\241@=\265.`\2750V\205;\215\360\211<\260\214R=\250\003\255<\006\317==\217\214\2248\370@Y\275\334\367\314\274A%\351\27515\243=*\0332=\317u[\275\250p\021\273\277\213g<\032\327\000\275SQf=m\332\221\274\025\205\001\274&\030\367\275P\270\003\275\"\211x\274\013\330y=\240\314\264<\3043\363;~\033\036\275\0036U=\275\004C<\336k\026\274\335\242\323\274\253V\201=\264V\032=\312\355\023:N\377P\275\302\325\360=\335\2524<6A\017=\237\300C\275e\225\274\274\2252\317=\323\261\003<\0001\246\274\312\262P=I\333%=i\n7<\334\342\323=R\037\261<\026!\267<\206FT\2750\\%=\221\202*\275\027Nl\2756\226\374\272\025\037P\274:\346\317\273hH\303<8\374\207=\312\3738\274\305o\240<\273[\353\272l\221/<{\022\257\274\t\260u\275\031c==]\t\301=\252*<<\335\354\203=?\331\342<\244w\232\274y=\306<\"\356\036=b\275\001\275\315,X\275\304\270u\275\340\260\317;\235\301\r\273\301\215\366<sZ\001\275\266\355\231\275\n\033\032=fFC;\246+\246<\272&\366<\231\023M<\320p}<\2417\311\2741\3110\273\257\222C=\263H\r\274\026\252\207=\3415r\274\237\324/\274m\212\004\274\322\007Y=M|\365\2743\353\213=g\325\322;\2360W;c_\247<\266O\223<\235\234R\273\360R$=\371\205v=Bm\340\274\021\312\213\275\350\244\255=N \234\274\214|:\272\314\207p=f\223\n=\320e\222\275\3163\247=\206\n\023=\373\361\177\272\033\262\330\274\325\274c<\242L\262\275\262\225\010<\002\010c\274 \217\220=\320Q\212\275\237$\206\274\327\366\302\274E\305\241\273o\272\251\275\233d\207\275\250\202\262\274*\221\332<]5\270\274-\352\262\274\272\\\330<\350R\277\275\333\251\021\274\306\236\024\275\305\376\327<x\220\200\275\032:\326\273)*)\2759-\205\275q\333\247=8\304W;\267\206\027=\277\265\222\275\314\273%\2732\320\323\274\310)\254<\335\366\356:j\221\210\274\3636i\275\302\336\325<>=\374\273\346Q\014<\272%\243\274,\242\343<\234\024\006\275\203K\027=\013\216\353\274\262\236\205\275\365G\006\274\212\006\256<\220\267\205\275\3276x<\372\256\273<\233p\311\274\310{)\274\005\200,=\246\254\231<\330:w=,mk\275\236k\031\275\372\231^<djF=\213\251\020=&&\321\275U\3346=X\\\t=\342k\237=\326\250\021\275\230w\001=\022\315\356\274\265\355\214=ROW\275o\200\t\275?T\206\275\253E\211\274_\013\026\273\337\307\222;\010\270\215\275\n\252e\274\342\363\334=\342!3=SY\202<\310\350g=\377\027w\275o\301\240\274\343|I\275\215r\205<+e\260\275V\230\234<\026:\021={\237\327;\003\326\256\274$\203\316\273F\022\"\2743\331\234=Cz\370<\373\224\327\274\036\252\251\274\010w(<49\027\2749\207\307=\225\270\360<-b\003\2751I\000=]\360\355\272[\366t=eS_=\245T1<\366\355\266\275?\366[\274%/O\274\302,m\273t\\\243=g\037S\274\310MK\275\231\372V\274\317mc\273\244\007k\274N\356#\275\226\\\225<\3672\357<\023~y=\366oP=\356\347\037=\220\231\312=1}\314<o\273\202=\274K\257\2752gZ\274\220\370\312<\t\216\022<\213\030\314;~\351\345\273\302\013\220\275\322\345\223\274v\227X=\220&\326:c\313w=\311g\003\273,;\033\275T3\n\275[\005\305<\200\273*<\000\322\244\275\205$b<\001=\'=!\321\212\273~\247:;d7l=\203\377\312\273z\016\014<5\210\000\275\333\310\034\274\337\311a\274\004\200\220\273-\316 \274\017\275\351\272Fr\320\274\224J\014=\344.\240\274\276\231;<6\362\024\2752\375\026\275/\223t\275n\326\024=E%A=~\323R=\346\262\263<d8\326\275\303\026\265=\250\2415\275g\313\025\2754\3525\275\255ti\275\242\222\242\274A\344)\272u\337\206\275\323q\322\275\254\000\347;\207.\370\274\221\214\240\275\206F\376\273K\234h\275\331\"\r<\034\317\027\274vJ\235<\371b\030\275\377\335\t<\354\365R\275;\367g\275\261c\000<\366\013<\275\215/,\274\037\310\315<\033|q<\216\022m=\"y\023:\371s\232\273\313$\233\274\262\262\345\274\254N\321<\006\371F\274kPy\275N\263R\272b\341D=\316\257\301\274\355n\331\274j\276H\275,\306\234\275f\314\265<\3304Y\275<\227<\274JSp<\307\270\210\275\271\033\320<(\022\205=\226\024\341<4!\253<C\267\004\274n\\\035\275F\276\177\275\222\037\275=m\365\355\274\211g\215\274\322\373\264\273O\354\000=\320\341\270=\345\036j\275\034\033\214=e\017F\275\031\233\242\273\214\355\032\273\234\262\270<#\357\347<\230\030>\275\252d\207=\211\253\263= ~\332\273\334b\335;\253\312\233=\342\221\265<\325k\273\274\"E?=8\252\253=\000\241Y=\000&\322=)E\222;v\200\347<O\306D=/\213o\275\313\350\013=\026J\250\275\253\347\023;)\nv=\014\361\024\275(\333\326\275i.\210\274\230Bf\272|\004\327;/{;=1\377B\275 \340\006=\345\332F\275\243V\236\274\272\252\205\274i\204-\275\221\265\353\274i\324\212=\241\r\r\274\310\275\256<\022\2324<\213\343\245\275\nM\344\273\341\225T\275\212:F\275\244\t<\275+\376\356\274\355%\337\274\304\225<\275\337b\006<\360\237\200<\210:\200=\2357T\275#\314\346<J\221\230=\274f\032=g\302\016\275\202c\004\274\006x\235<\360\220\036\275t\205l=(\325\271\274\314o\326\273\225\3604=-\350R\274O\n\206\275K\362\303<$k{<O\350\252<\242\034\224<\330!)\2745\250\022\275\226\315\"\275\337\243\031\275J\0173=\201\304^=\014\000\301\274t\301]=\316\343i\272fPA<\300R\3508\277.?\275\324)\252=\267I\303<N\222q<\231\270\273\274\265Z\'\275b3f<U\005\316\274VfB\275a\016\217<\002\221\330\274\t\034\231\275\233\317\217=\334j\361\273\010\305\020=\027\230E=R\330u8\241\346\331;\037\'\300\274S9X=\021\200\271\274\351\3702\2755\347\357;\3368\252\275\007\200\273\274\023 \270<\375\2103\2741\223*<\207\017\314\273\372\337\344\273\260\200#\272\217\266\021\274-\355\214\274\020\373\273;6\342v\275W\023W=\242q\333\275\n\037X;\223\232l=\351\360\003=\312\016\020=\322\2335=\302:}\274p\022:\275\345\362\206=+x\357\274FEU=\371\331\372\272\323<W\275\251Ki;\361\272\244;\017V\010=M\377\016=\270\323\362\2757o\320<d\342\030\275n\351Y<`\337\262\272?\023\241\275\214*\224\275\247q\324\274\003\022\273<Q\221\335\274\006\007\237=;\373\033\274\034\205\231=\360\217\3519\006\220\316\27495\313;\332Y\236==\270\n<?\031\224\275pk\236\275\242\225\322<=\253\353<o`(\275\302[\275\274&eY=\306\307\313\275;3\216\275\035f\020<?Q\250=\027U\270\273%\r\260\273%\223\217\275\362\005\022=.\303\212\275\216Y\204\274\245\262\342=\207\313\025=\352\275w\275E\264F=\312[D=\372(\367\274\025\r\036=\364\221F=\255\000K\275&$\353;\220l2\274]\034\245\273\256\215\226=m\274\256<\016\007y;\014\361\021\275\005\037\202\275\323\230\031<\003yx\2741\364\224\273d\341\027<\2520\t\274\322\370\017\2745\333\'\274\315\224\037=\265\204\233<\225\326\373\275\246\"\243=\374^\021\274\310J\017\275L\265\242=\237\232\036\275\264\310\327;J\351s=\237\221\006=;\362\027<_\036\325<?S\212\274\314\355\224\275\365\014%<g\027\010<\2002\357<\032\335\232\273\352\274\236\274~!\305\274\360(\341<\322if\273\333E\206;T\217\240\274\024\273\205<\307m \275\275]\227\275\244\206\316:\225k\216<\366\254\027\275\200Q\277=;T#<\371%\221=4R\351\274\013d\214\274\330i\315<\3436\227;\327\242\266<!j\311\275g\214c=!QV<xD\372<\3234\223=\356\234Q\274\307\002\014;5\247\227<\265\007\341=\"\210\202=^\236\2228\355\337\200\275v1\336<\203H\362\274\017S\323\275\335=\316;\333\327\274\2710\375\225\274x\224\347=q-\360<\371\002!\275\200\332F\275\006\347\242=A\010\310;)9n\273\304s\225\2744\024K\275T\363\252\274\036\327>\275\373\246?\273\256@\335\273I\306\014\275t\275\360\274\350K\206\274\027\304A\275U\342\007=g.\204<`[\302<&A\002\275U\342\311<\222\332\223\275\360}0\274\306u[=\315Y\010=\2256\r=\225\305\016<\364\r\314\274\341Nn\274\244\350\247\274\344\316\177=0\366\202<\022v\n\275\212\304\332=\362#\246\275-\213\210=$v\001\276&w\207\275xI\241<k\335\245\270-\001\274\274\206\337\207;.~V;\213\'\314<\337J\262\274eV\362:\374\245s<\334\362v\275E\224\211<\316F\002:?\0361\275.#\326<\360\020(=\311\022B;\355\334z\274Nt\005\275R\210\344\275\247*\r=\377\274\327:\315I\223;\363\275\247=\334\325R=|!U=\034Up\275~,\357<\007/G<%r;\275\322&\021\275\265H\034<\014rC=\032p\217=\2240\200=*|\370\273\375\364K;\237\003R=t]F=\303\242\215=-f%<j\177\262\275iX\n=\360=\022<,\230R\274Y:_\2759\2377;\336e\002\274\267\373\250\275-\350\216<\207\020\206=\361\276y\275\354\272c\274\016\374k=\345\370N<c\276\262<%N\273;\341\373\203\275<\\\036\276\331\252%\274\224\235\310\274B\267\204=%\320Y\275/\365\200=\013\306\376\2748\036\t=\303<\002\275\231\0326=\342\343W=U\2432=\226W9<@u<\274\215\257{\275\271T\223=\262\264\244<\343\304\002<\353\000/<\205\377,=\244\352\025=>\214\212=x\022I\275B\315\235\273\237YZ=O\321\300\274 \327\265\2746\362\243<,`=\2751?D\2743\034\230\275y\313\025= \356\270\272\300gu\274\243\225\210\275e#\317\275\231e\254\275\206\263\310<y\333i\274\177l\031\275-\335\351<\356\253\251<v\246U\274Q\375\375;>\017\010=\237\016\344;\300\tc\275Y\246\222\273\002\326|:y\017\"\275\356E\314\273\275\021\003\2758WA\275\336\026\001<\370\266\350<\237nA\275B8\327\275-\243W\274\252\372\222\275`\265\244=\260U4<\252\033\262<\rM\210=\367\273\2049\366H\230\273\342\r9\274@\320\007=Eb\254\274\001\013\316:f\332\022=\253{B<.r\034=D\250\313<\205\001\004=\301\336\360<\373\306!<\316\006\244;\004\206\346;]\323\005=\033\004\026\275i\375\003=OL \275\316\n\032\275\330\"O\275\343\355L\275\314\374\t\275\270\nR=iB\036\274s1\361\273\375\276o=\341\021\035\275\344\227\002:\210\354\023\275\357!\335<\343\245j\275\353i\240\274l[\241=\330\0076=\330E\247\272K\331\260\273\321:\314=\031\200\205\274\223\007]=\263\300\235\275\377\004\363\273Jm\307<B\345J=\213\263\205:5\236\346<\254\307\023\275\027\002\313<\242-\201\275\030\226\276\274\230=\201\275\215\242\005<\366\226\n;\211*\247\274\253\303\027<\'\260S\274\365p\345\274\341X\366;9\013\365\271\372\240V\273n\232?\275%@\204=0\304J=0\200\201\275\222\320\356\274\262\'T;\2235\220<\003P\247=\022\021\355\275Izj=z\332\"\273\316;\n<\370@*=\005\3547\275\212<\265<\335\202S\274\363\0073=\246b%=\021\306H=^kR<W\004\221\274Z+[<`\344`=v\235\023\274R\003M\274`\365n\275\313\032*=?\207\030=\3416\305=\241{\237<\335\003\231=\020_v=\302\020\371:\241\037\000\275\215\241\342\274I\370\247\274\361\241\206=\226\255A<0\020\034=\266M`=\005\213\343;\026\005\277<\351v^<\317U\214\275\256@\273=\'e\257\275\354\0170\275\264\271\016=9\244\033=\345$\304<\260\014\337\275TCX\275\330\232+;O\265\317\274\263t}\275!G~\274\364\231\240=\244\207\273;\323\315\257<\256\302\270\273\010\022O\275\350~S=7\366\036=\271E\024\275\343\260 \275om\244\273@aa<\227X\240=r,\217\275+9p=\016\021\215<$C\037\275\274\327$=\310\364\220\275j\250\310\274u`\"=\017\342F<\315y\031=[\221(<\272K\326<\355\305\215<W\252I=\210\2617\272\353\375\020\275\t8\212=\220\340\363\274\362H\251=\367\217\262=\345K\026\275]\351\031\275\254\317@=\265nL\275/\n\260<\365\006N\275\244Dp=\013\320\033=\014\206u\273\'\334H=OF%\274\005L\240\275\244\016\237<w\203\326<B\356\343\274\306]\371\273\351\371\376\274;\226\025=\336j\225\275G\352\007=\304u\035\275! \237\275\207\217n\275\244\016r<\366\016\255:\254\217\206<i\356A=seV=p\037\022=|X\265\275\005\311\210=l|p\275F}p=\376\364s<u<\243<\0261e\275\026T\024<\234\032\266\272P\r\223;\242\236\352\271\004o\020=\341\350\027\275\262\240\013\275\244\216\354;\220}<\274\026!?\275\005\300\341<\321sP=\373x(\275\231[\222\275\371\"A\275}\276\200=\216hD<z\363\265;z\225\260\275\277\'M=\302\247\177\274\305\361\025\2742\366(<\270i\217=@\314\273<\263N\364\274%\322\236;\tTy=\017\031\207\275+^d\274\344\332\177;\036\021u;\273h\003\275e\271\355<|\003\031=\035\003R=\337lP=x;\201;\363\204\001\274\212\363\244<\244\241\274<\347J\235\275!f\267<6\344\344\273Z\326L\275x~\n=\272\325\025\276C\304\304<\337\347\310\275s\216\202\275\271\312\206\274\207\374m\274:\365\223\274\251\220\242<\002e\203\274\312\342+\275B\202\323\274\275\2252\275Mtk\274\246L\341<#\230\232\274\014\230\235\275+4\235<?\232\256<\211R\214=%q\372;C]}\273_\374\031=\014k\'\274\376\033L\275\223\273\212\274t\245\264\275\364\323\202<\346\315S<Z=\340<T}\r\275\035\232\222<-\0347\274y\276\342<\334\236b<D\374\343<\213\006\223=\265\032\004\275\003a\307\274$\237\323\272\214W\010\275L\364\022\275\235\260\204\2740\244\"=8\345\206\275\333\237`=\021\363\301\273\256\235e\2756\253\277\273\026\243~=\266\337\354<\322\261\212<\325\322I\275\341\250\277;q\035\204\275\370\335h<\307F\004=\325\366\024\274\376\237\343\274 \366\305\275%\305\n=pF^\275\t\313\007\275\354\253\202\272\n\237\226\273@\313|\275\313\007M\275\216\350\376\273\0105h<\t\215\221=\330\022[<\252\021\307<\314\305\375\274m7I\275\222\014\n\275\010A*\274,\250\310\275Ez\200<+o\"\275\000`\331\274xm\007\275\031\314\263=\277t$\275\310\311\246=\034\345\002=\222\020\310\274\027\204.\274\256\010g=\321\201J=\240\311\003\275\r\206\276=\315iK<D\236c\274&x\021\272v\262/=o\262\347;L\363\375<\007\220\326<\"\331~=_\010y\275f\347\307;9J\301<\001\310\222=f\014\016\275\264\035\026\275<\301\235\27568\311<p\207\200:eY\201\2755I\030=\274\327\213\275T[\274\274j\357\220<\307\233E=<\302%=\220\230\310<\017i\216\274|e\372\272\003\332\020<#\214\344=\263\227d=\330\217\010=\357\364\017\275\274\210.=|\214\004=\202\272R<;\251\261<\237\227\301\274\207+\227<d)g\275$\366\215=)\334\021<\305q-=\212\256\033=\335\362\005\275\236\302)\2757\253\353\273\347\212\307\274\306\342\250\274x\277i<\244\017\310\275!\325\216\274\247\232\253=\300\323\231<f\273\344=\202\310\243\274\305\254\266\274\274\277\002=\274\370\200\275*N\367;T\013s\275\374\301k<x\217$\275\007\266f=\273x\257<D\220\236;\310\264X\275i5\202\275\200e\257\275\036p\037\275hl\246\275\251Q\310<\003R\217\275\351Y\202\274\237i\364\2729\335\256=\013\234[<\250\2160\275&\326:;\360\354\236<\261\333\230\274n}\355\274\267\027)\275y\035_\275\033\376\\<\273\262\355\274\\\317\001\275\307lM<\262\177x=\350<=\275\027I\220\274\206\356\014\273\333\356\372\274\233\nY=\323\001]=\363)\205\274\305\277\001\274\3530\005:Xs\217<\251\304\355;\233\260\312\274&n\003\275\230\202\222\273]\017-\275T\207\024<\375Ep=\200\006\033:\t\322\256\275:$~<\2367)\275\356w\306=g-\367\273\371\244\355\274b\242\331;nd\373\274K\324F=\255K`\275\026\300:=\351\216+\275\324X\313<\342\007#\274\\\231f\274\301\274\013\272\315\301\260;\201\3704:^x\014= R\267\274\256\236\341\274\333\336\366<\260\026\025\275\264@v=\241N\016\274|\312\233<[\260\001<\350\024N\275\236\247G\273\364nc;\265\334\245<\260\3529\274\307\341\006<\262\344\321=\372:\375\274\364\313\016=\303\356\362:m\002\244\275Y\323\226\274@+\221:dcE<\341\273\201=\326Q:=\251\377/=\0103\330\274U?\031=j\302\250\274]\010l<\024\\\226\273:\234p\274\364\373)\275 \255\034\274\260 \252=v\276\373\274xR\007\2752d\316\275\232\264\361\274ww\005=\265\255\324\274)\324z=\243\372\\\275\200\371\344\274\373\025\250<\2403\361;D\2532=\217\3735=\251\362\211<\247\302\367\272iD\373<u \205\275\305\274;=j\265\204\275\322(/\275\233+\017\274\376\353w=\222V\207\273\033|\013\275Q\233\255=\342k#\275\361j6\272\357\322\312\275\005\314N\274u\016\\\275\214z(;V\267N;\004\356v=\370\264\274=s\267\366<\264\341\332<W\331\343\274\254\333Z\275\205\036\270\275\010\006\230\274\246_\230=P\262/=l\177\222<\276\321V\275Y\342\233\273\315\320\322<\262u\017\275\274M\306\274\023Z\363;Ny\001\275g\257\233\274\262\034%=\272\263\251=\202^5\275%!\211\275\262q6<\305\034\353\274\225\310\020\275\312e\3449\216\301:<\325\300\251<\002\3779\275f)\252\274\177\317:=\333\n\025\273\020\025\030=\033t\251\273\005h3\275E9\354:I\300o\275\031_\035\275.\311p\275\204\344\024\274\036\347\215\275\010\3200\275\274\253\003=\032!Q\275\353\014\000<\017\236a\274jc\326\274\202\347\224<\000\235\215=\203\357\217\274i5\030=Q\301\335:o\300\220\275\267T\315<lb!<\203\204X\275\2476\343=\2618\225\275L\247E;7Q\036\2757\343(\273#\027M\275iA\247=\377\202\236\274\376G\235=>\350\016=\214B\215=t\344\335<\0368\335<<\016L=\330\3646\274k\207t={\242#\275\221w\000=\300\363I\275\340\021a;\307\263\320\274O\254s=\225\347j\2751a\221<V\202\376\274l\261\"=\347\330\203\274\224\036\321\2740@o=\261\331\302;1d\333;\223\317<=;\310V<6iw<y\223U\275m\0014\275\242\330\301=lx&=X\376\306\274W\305t\275\254\002\273=\267\270\267\274\006\357\275\275_\006\303<\355t\002=\375\217\025\273\276K\234< x\324=5\3144\275\025\231\n\275\347\326\263\275\355\023\005=\226\257\261=\367\010\032\275\275\017R=\367\226\220<\226\252\000\2744\315\351\274Y\336\337<\251\357$=\373\350\031=\365\236h\272\371G\262<\272\006F\275\200;I\275\0034H=\271\313r<fj=\275X\251\036\273\367\177\235\275\223\330A=\000\234\t>\266\246\037=I7?<\225n\001\275\373\217;\274\273\013f<\376G\257\274\252\310G\274\314Qc\275\374\375\360<\215fQ<i{\200\274ax\304=7JA\275[\270B\275\0023\210\274\223\000\226\275\035\035g\273D\004\205<\303\240\237<\332<\365\274\036Y\363;C\2120\275\357\347\242\274\304U_\275f\343\306;\363\252!\275\351\017\004=LH\013\275\336 \211\274\334\263\201<X$n=\3642\257\275Q\323\246\274L\202\223<x\2234;\255\263\327\272\036\211\337<9\234\302;C9\264<e\314\323\275\350\014\212;\0259\327<\024\034\'\274\230w\361\274\331N\002=/\220\030\275\273\3326=[\026L\274\2328\007=$\312\233=c\203*=\302\217\203\274\240\303C\274\311\223\276<\241\013\263<\373\016\023=e\005\317\274\204\204l\275k+\301<|B\235=\203\212\177<\\\026\367;\327\214\235\275\224\016Y=\004\357o=\220F\021>eq\310=\231\330\027\274\204\206\302\275\216q\032<\214\321\007\275\362D =\217Z\n\275\207\225\304=\2223u<\017l\334\270\353\236\036<\326\210\246=\362\325\337\274P\200D\273\025Q\273\274(\3245\273\217\261\210=\206\013L\275n\0059=+\222\007<\337\230A\274\333\203\316\274\254\260\000>\\%\331<O\241o<\217\302\246=\223\237\240<Z\371\021\275\263\205&\275\356\201\254<\266c\021\273\nCE=m\010a=\224\007\224\2741\260\202<\337.\271\275\2378X\275\270\273:\274\265\246\006=\362\2102\273\255\250\n\275V\233\304;\337\344\177<T\333p\2749\221\354\274\276\322\205<\337\\\231\275e~\231;g\277\217\275o\216\246\273*t\222\274\002\316x\274\326\271\240\2746\376\277<\206\343?\275\317`\020=\317c\177\275\246\000\245\274|\362\303;t\021\220\274\326\316\244\274\017\315\276<j\237\177=\370\357\264<\036i#=\272Jz\274hF\321\273\217\330;=L\350P\275^OL\275\355\314\343\274w,\272;05\247\273\372\273\031=\nR\362<\317Ld=\351ka=\321L\215\275,f\217\274Z\327\215\275\317\323\303<\20425\274\023\252\320\274\366\2022\2752\253`=\034\253\342<\t*\202\274(OJ;\373S\325\273F56\275J&\235\274\306g\004\276\2525\343<\212\020\331\273\300\224\274<\372\271x\275\177\363o\275\222\023M=\016\342r\275\24263<\317s\363\274W\026\252\272m\353\t=\370Iu\2753{r<\261\364 =\nQ\200\274\372?m\274WTP\274[J]\275\314\326D=\343\310\205=\227\343\230=\241Sf\274/\336l\275p\251\373<q\t\'<E\247`\275\207\355\007<L\025.\275\231![\275\335\240\247\275B\263@;ni\204=\206\036P<\373\001\323\275\372\324\351<\252\2641\274\367#\251=\351a\214\273\254$\035\275!m\234<\211\034b<J\261\013\275v\203_=xrQ=\265\337\033<\201\024\177<\021\277\355<Q\024\315\273\310D\237\274|&\247=@\325\r\275\324|7<N\n\035\275\231\315\212\275\345\277\230\273\rv\312<\366\337\202<\302R\332\274\204#\002=\320\264W<\237\210\204=\330\372k<\355\264\033\275\021\236\306\274f\215\177=k7\245\275\321f\016\274f(\026<\360;\000\275H\346\032<\222g\230=/\255\207=\240eI;\265\235!=\207=\024=?#P\275\355\r\267:\263\035N\273h\256\333;$\024\334\273\207\010\322;w\216\243\274\3748\256<D>\270;\317a\'\273W6\257<\331Z\316\274\306\314.\275_\271\217=\271y\220=\307\332\031<z\370W;\253\336i=w\014\026=\020\216\262<$\016\265\274\323=\327<\241@^=\234\257V\273;D\r={SJ\274$J\357<E6\207<\024&\246<c\372\347<\373\016\220=\265\263>\275\214\207\263=l\333\215=\004\333\240\275Sv;\275Fz-=\336\367^\272\004\231\264<\332Yf<\266\212B<\367+\n\275\322\306$;\370\210\254\2745^E\275@~\033=\030\302\227=\254\316\261\275\251>\'\273\203\320\216\273\212FI=z\362\365<0\320\315\274\303\363\260=\240/\003<\340\032|<\321\316\301\274\023{\n\275\230\345h=5\332\312;\333\332:<K d\274\363\235\202\274\037[q\275\311\007\034\274\367]\232\275H\376>\275m\211\217\275\243r/\274\364\202\033=\231\221T=.al<%\262\232=^l\r\275\n\327@;\016T\000=Rx\007=\306%\n=z\340M\274[\231\017=>\002\211\2755\204H\275\352\036\031\274\027\224\262\274oS\340<\215q\275=\223\222\207<\032pi<\035\366\236=\010\027\005\275\325r\356<.\244k\274\217\372\252\274{\021\227;A\321\254\274\343\032L\275\007\035\301\274\267\263\311\275\355\307\242\2744fw=\310\230\351\274K\302E;\0241+=\364\224\213<\233\216\210\275\356\202\215\275[)O<S\256m=\346k\340=J\332\316\274{\010\356\275\000,\017=3\354\300\274\332\311\006<z\264\203\274q]\344\274\314J\n<\310\242/\275\272\303S=\020\225Q=\360\326\272\274\357\320\246=\254rt\275C\206\203\275\335L\264<\037\324\206<\257$\033=\230!\013\275\300{i\275\307I\202\274\346\307\n\275\244<3<\"\354\003=2\266\261\273\361\2301=\033{r\275[\210\304=*%\264\274\022\212\017\275\335\022\031=\215D\236;\362\313\246\275\220\000\310<n\241+=\350h\236:\231c\250;\240<O\273\307\034w<-\231\315\274\277P7\275\036t2<\211R\023;\211q\217\274>\3606=hl\331\274\241\331i=\265\203:\275\032\236\014<\3169\356\274\r\037?\275w\212\306<z\024\005=\261l\274<\\4\262\273\345\304y=\037aI=\007\250~\275i\337L=\350\375\230=\232X\347<\r1\215\274P\2241=\252\002\317\275|\315\r\275\037~X<\303\267\224<\205F?\275$!\245\274\271\352\332<2.\343\274:X\022\275u\246E\275ud,\275\336\315F=\275\204\246\275\357\033\010=v\317\026=9o\304<\343\227\211<\006z\202=:J\262=\235\036\324<\321\354\205<#~\305;\356{\027\274Qs\231<\032\304\223=b7b\273\212\220\267\275a5<\274L]\221=W\333\031\275\252\375\265\275un\232=\224\356@\275S\'.=\242\300b=\203\322\207=X\321\213\275rY\265<\336\351*;\215r\007<\032`\320<\270\236g=\034\020\250<\211\271\275\274Q\305\256=\032\020\210=%\364\365=\270;\307=\016\232C\275\244\262\300\273\202\276\362\274i\371\367\273J\200\'=v\232\220=?\010\013=\306c\344<\214\230\026\275Q\324 =1\nU\274\260\220\330:\234\320\345<\315S\323<\262\223\363\273N`\3279\322]\233=\215>D=\200\246!\275\013\257@<\361]\373<\022T\252\273A$$\275\344\3359\275N\025\304\2745U\225\275N#\001\275\2123\356\274:Le:\357\314\n\274hx)=v\366\354\274\010CE:\245o\322<\032]*\275\372\337~<\341Z\254\275f\304v<5\337\021\275\251\213_<\353\371x=\241:\231<7\232A=\376S\224=v\375o<\350\232\351<N\334\314\2743\025\256\273>\370\263;\023\002\210\275t\262\330<\310\0307\275\254\273\025=\232\302@=i%`<o\241=\274\226&\220<n4\222;\205\036\317<\260\033\202\275s\016\331=^\215\356=\323#N\275\002P1<q\017\330\274\275\262\216=Kg\024=\3467\232=\241_d=\016\216\205\2753X$\273\255\337\361\274\005\332\313<\357S\020\275a\210\031=\306\273\007\275\276\265\034=\227\361\217\275\275\036\203\275\3158\352;\353U8\274h\316\203\273\327\307\000\276\253\3750\275*\200\273\274\236\345z\275\177\277M\2755\372\271=\014/t\275n\177\270\274]<\367\274\323V+\274}\264\032=\350\333\342=\001r}\275!\010\373<\261\252\331=\337\370\310\272\037\005w=\017x\006=(\273\370<\276t0=*\026\001<\362r\013<\315I1=~\365\030\2750|\247\274\331\177\317\275p\356\262\274\357P(<\200\351\305\274\007\275`=\006\364\312\274HU\'=\323\035!\274R\363w\274\016]\242<\215\235/=w\r\003=9]\362\274\224&\202\275lN\200\275DM\035\275\304\374a=\223W\260\274\227\035\010=T\215\002\275\272\264\242\275\237\2247=\322nA=_\000\006<\231@\314\273\320\373\031\274\022\331\322<@\223\033\274r\035U\275\035!\234=\3215\r\2750\321\252=\373\233\325<\267v\227=z\367\211\273W\357\370\274`\250w\274\357\320I\274\206\014\026\275\233\273\217\274=x\253\273<\007\251\2739\355\024<\245\352\327<\243\271\022<H\303\256\274\322\t\376\274\201Z\217;\361\264\355<\263\277\327<\350\214M\275\215\002/=\231-\376<\321\342\017=\245\023 <\007\375\216<\024\343\201\275\342\246\245\2732_\366<\314\377+=TR\243=\325\273\253\275\331\236\334\274=1\324<\355\205\207\275\377W\002\275\025a\004=\004\335\221<:\307)\275>\311\251<\010\341\2019\262L\352\274\241FW\273*\274\203\274\364(\035\274\326%)=\0232\003\275\305&\222\275\361\032\032\275\277~\033=\362\357\365\274\275\343\357\274\273\366%\275\024\3316\275\324:/=\301\024\032\275\352PK\275U\326N=(\275\254=\263G\030<\276\377\250=\r\356\010=\217\371\277<\267\276/\275\305\323\317\274\345-e\273\214\023\324\275\347_a\275\243\316\227<\343\n\327<\377\027\274<\316$K=\316\214\377<Ml\342\273C@\235\275p\343\272\273\024\263\021\273<<\206\274Lm7=5\244T\275\034\023/=\264r\021=\230\340\277\272\375\233\257<\021\345m\275w\\\235<&m\024=\302\247.<v\025\351<d\347Q=3\221V\273\201\367p\275\026\\\177=7g\025=\331\227\242\275\005\374v\275\020\324\217\275\370\225\226\273m\014\262<W\323\n=h\302\202=.\344\021=g\244\275\274\232\324\304=\253\273\024\273b\330\200\275j\210\207\275\331D5<\344\275\271<\261e\031\275l\320l;ncS=/\355\353\2742T]\274\3249\000=\032\3414=\0067\340;\014H.=F\340\325\274V\274x<\007\371)\272\"\007\000=l\026\264=\202a^\275y6\003=\271\371\260=\214\244\265\274\270}\254;\360\220?\275\251\221\006=\315\303\275\274\230\310m=0N\224;@\303x<\027\301\342\274\037\307a\274K2\254\273\\\350\237<y\007\234;\330\336\351<kU\326<\232\364\334\274\2444\021:\250\300\243\275i\317\256<\350\223S\274\313\031T\275\310\222k=`\264\210\274\240\n\222<\216\362\236\275\016\n[\274\230\031\240<\312\311\365\274\233\273K\2747\017\215\275\312oJ\275\233\373\271\274\033\r\307<\261\261\206=R\325\203<\262+\314<\025J\034=\242z\020=\315e\322\273,\304\016\275\235O\210;-3\'=\347f\246\275\304\0064\273M\233\227<*\311\216\274\003\024\335:\370\206\005\275\271f/\275\022v\037<-\036\274\275\037b\336\274\n&\311\274\372;\204;\340\347}=K&\257\274G\177<\275d\311\272<\312\034\205=\366\275G\275\250\323\036<t\260\206\274_\317,\274H\242\030=\327\272\360\274{\252O\275\274\362\217\275\211[?\275\216\\\275\273\377\004\332<\371\376\202<\r\211\267<\364\001\247=O&#\274\227\360\007\274!\331d\275\267\030\361\274a\351;=<Y\022\275\032\332\312=\271j^=\021\002\236=\235\340\035\275;+e\273\263v5:k\240\251\273\267\337\343<\204\006\227=E\220G<\333N>=\354(\261=\024\216B=W \214\274\345g\250<\344\361\351\273e\177p\274h\352!\275\347\270\002=\211\252\341\274\037\376\261\274\027z\226\274\213 \321<V\234L=\210\272\257=\365\233<\273\354\262\243\273\003\246I\275+\240\211=\034\231\003\275\2207\264=Y\261T=\016|\264<\005]\271=\010r\211\270\315\353_<\206bz\275\336\277W\274\026TB\274\3329I\275\373\\\230=\362\267\367<\375\377K\274\371a(<\246\3510=\352\324\253\273^D\215<\2023\035\274e\336j=_\214M;\356\221Z\274CK\316\274l$\232=~\214\201\275\352P\205=\371&2\275\307\215\263\274E\016\033\273\266\222.\275Uac<\306wI\274-8\300;\032U\204\275\266q$;\350e.;\357\036\200=\316\376F=\005\205I;\224\206\347\274\263\335F=\370\311+=\345\031Z\275\372S\253\274\023\0365\275w\177\305\273\007\247\306<\363\274\017=\226]\310=\3378J\275w\222G\274%\025\235\274\177\351\266<\177F\022<\332&\035<y\236\204<\207\217\005=s\'\025\274\215\226 90D\000>\023\300\t\274\001\250\334\2749\200q<p\025\351\274u\367\231\274N9\222=pXI\274\rP\374\274\322\374}\275\247\n\301<\234\275)\275\253)\016\275\235\210b\275\212dk=K\301\235=p\341`\275\377D\340<\375\236\375<\346X\364\274\314%\351;\372T\002;o\253\232\274\304\234r\274\271xM\274\370\246_<\212\336\374<\260d\315\273\235$\333<\272\014\200\275\005\020\004=\320|v<\245\246\274<0\3105=b\312\376\274\350$\301<v\027%\2745&\303<\036F\362;j\201\t\275 \237>\275\326\364\312\273IE5=\005\345\360\273\024\033~\274\316;_=\257r\230\2732\310\316\274\246\242\032\275\2661\325;\014W\271\274C$\303<\360\357Q\275O\270\344\274]\3473=\010\322i\274\233b\036=\321\325\017\275;1+\275\2112n\275$M ;\340\221\027\275RpY=\305\261\317\275\036\354\256\275\322\245\263\272V\001\331=n\314\216=+x\275\275\367\226\266<\344\245\030=\035\257\022=o\370\245;\212\023\364<3\313y=d\014\002<?T\013\275\362\223\230\274\241A,<\001\2135=\311\226_;\n\305\032=\016\251\235=jo\261;\345?\246<\026\305-\275\324\000\006:h\024\257\274\033Y\n\275\2234\022\274&\021\036=\341f\331\273\312M\n>\036{#\274\345r\273<\024\206\330\275\234\350E\275\251\237\332<;\244*\274\254<\265\273\240\253V=QeW\275\351\277\221:\365q/=\326+`\275\026\236\264\274\214\220\033<\037\212\355\274\220\032\214\274I\3761\274\300\215K\275\375k\212=w\310\r<\305\212\022=\341+.\273\302f\256<\345\234\242\275\337\327\023\274\230\356$>(\352|=\320\363\224\273\265xW\2752\233\215\274\246\260\307\273K\274\035\275Y\205\250\273RK\204=\302n+\275^\327\024=\210\007\005\275jK,<\005>\365\275\267\224P\274v\227]\273\327\242\261<\025\017\246=h\200);\216\372\261\274^>\005\273\276R@=\177\356)\275\353\340\245<\325M\235<\344&\207\274)\274\326\274\334k\331\273\\J\314<\'\340\266\274\211\306[=\006X\210<\306\004\367<\332L\204\273\200\201$=1{w\275n\\0=\212;\007\275bf-=\202Ke=\344\303\325<T\034o\275]\306$=%\260\206\273\017\242F\275[j\363<\032\323\326\275\223K\266\274\317\342\356=\272x\274<\214\330\321=\033?\300\275\316k\364<\323&\025:e\364E:\016\273g\275\"\252X=\243\227\005=~\242\203\275,?\206\275U\341\004\276\256l\002=\361\333\212:\360\302\276\274Wk\272<\245R5\2754!.\275\340^\031=\375\266f=R/\004;h\237f<\333\330\261=\323\344\227\274\236\331\304\275\364\323\363\274n\3603=y\303+=\231\207\n\273\362\225E<\226\315i\275\245\332\205<\327:\034\275S\313B=O>\004=\323:M\274\3773\220\275\253\024\251\2749\215_\274\315\036+\273\253\372\031\275>\330\216<\302_.=\2746\270\274$\223\323=\316&\303=Md\275<\022\320J=\026\202\314\274R\2226=\022\340\013\275\204\214\364\274\037\317\'\275\306\311c<\371\\\232=\335h\317\274S\234\227=\206\003\340<\236\253M=6\330\226=\263\253\232\274\263L\251\275\330\221\224=\215\326\301=*\206\007\275\r\016m\275\206!$\273\261\376\"\275\016_\330;\331\324F\274\240\301G=\235\373\314=#\327h;\263\226\006\275\277\335e\275\250\222\250\275\320\000\016\275\025#\353<z\307\323\275\322\253\037=E\256\222;\232Z4\273i\216\325\274\307\007:\275\325\351G<\010\3037=\025)\346\273iAS\274\240\237>=\343\251\226\274e(\255<\"\223D=\377`8=\007K\237\275\005\257\021\275\314y6<\330\275X<\t\332W=\360y\264=s\352\317<<\326\245\273\013\221X\275\332d\373\273\272/\000\273\275\346\323\273\035\204\022<`\257\317\274\320o\371\274A\020k\273i\001\002<p\274\n=\266\010\325<2\227\345\274\260\300\353\275]\252\t\275\214\3003=$\230\361\273\3177\021\276\200[\320\274\316\r\003\274\245\021\020\274W~\031\274_(\337:Hw\376<\343u\260<\214\240\362;\016]\r\275\"\016d\273Q\344\001\274\212\370I\274\240\234\256\274\255\0342\274\274\253\222<\233\217\373<\3712$\275\305\006\346;\203\252P\275xM\276\275S\020H\275\322\232\275<`\024\230=\364C\'=cec8\345\232\006\275\"Q\031\275\316z\201\274\003\212\224\275\245\330\256\274\236\351\323\274\001\237!\275\312^\033\275\366B<=e\037\334<=#{\2744\2414\275\204\345\250\275\232 \205\275\206\0326=\366\321,<\306ho\274\034\204\303=\024d:=\371\3668<\010\377\265\275\036]:\275\335\357-\275\202\\\002=N*\020=\242\315\251\272\374LW\274[j\217\275x\353\303=\243\037e\274\315\034K\274K\325\203<\240j\266:v\210\311<uq\263<\306\301\017\275\307\371&\275\377T\031=\003\231\344<\245\264\006=\266E0\275\255\212\217= 1\034\274\274;\201\272R\200\330<\024\244\246\274\201\017*\275D)\024=h\220S=A\034\010\2750\216;\273\2203+\274\216Q\010=jf\014=\361\351\221=\003$\026=\326\036\030\276N\t\355<b\252\237\275zX\030;\244t\245;\235\033q=!b\235<\r\204\327<5|\256\273\266\014g\275\257v\252;\214:\001<\n)\206=>\000\362;\260\305\372<\332X\031=6\316:\275t\316i\275&y/=\345\363\344\274\245,\247<\023\214C\275\310\206\236\275\373`\221\274\370\302\335\272e\020;\2751\r\321\274\365Q\371;a\253Z\274\317\231\002\276{\274o=\216\370\375<\010\323\350\273\233\216\234<TU\274\274\217\370M=bA\215=\372\367\261<@6\231<\304i\234<>uh;\323\272V\274/U\232\275\232c\314<7\257[=\300\'\272\275\257b\330<k\347k\275X\"\t<\240/\220;\3356)\274\357\277\213\274\034V\376:\305\037 =\0263\253<\253\364x\275k6\206\275\323`\220\274;\335\241;\224@\t\274{\025R\275\272gN\274\002]\274<LV@<\034X\034\274\217J\207\274\321\036}=\004\tP=$\216)=\303\024\026;2\264\r=\022V\265<%qU\272\331\352N\275G\371\372\273\314\325=\275L\355\020=2|\307\274S=\241\275\343\272\263\275 \006\203=u#$\275\347}\031\275.Md=\007~\252:\221!\242<\361\317W=\254\303|=R\2663=\254\3252\274&lA\275\325\206\243\275\344\317]\275\243\352\017\274+\006z\2751\003\223\275-\2343\275\367(\010\275)\230\303\2740\253=<W\212B=&\335y\275!6\310\274\033\372@<\024@e\275jM\240<\312W\203=k,i\275\255B\207\275)\023\214<F)Q=*\205\2009\002\367?=\260\202\270\275+)l=<k\226\275R\244\036=\273t\226=\014[\236\274\025\305\206\273\241\007\320<\337nZ\274.\262F\274\276?\214\274%\304\305\2748\023:\275\026M\257\275\326\3379\275jF/<R7\212\273R\213\264<\223\245\225<\302*\031=\2118\037<\310Re=\360;\367;\337\340;=\236h_\275\037\016\030\275rX\013\275\337\374\025=6%5=K\321\014\275\021\264\007\274\320\373\253=\273k\372\274p\204c\275\rE\277<\365\234\026\274=\312b\275\317]O=\376y\213\275NR6<\230\273Z;\016%\314<b\023\215=\360\213i<p#\240<\355\212\205\275^5|\275\302\001\\\274][\t=\260_\"\275\352S\254<\326\372j\275\006>#=\222\026t;\233\223\356<8V\272<\340\323S\275\177\341\033=\202r\205\274\272\314+\274,\343\252=`La<#\207\205\274`\014;=\177d\204=\317n\275<\372\334(=\317\350w\275N\211==\022\271\206;\245\247\260\274\237@\325\2752\271\257\2730\344\224\274n\007\264\274\227F\002\273\313\025\210<\376\365\253\275g\0301\275\026`\021=\323\\\315:eV\203=T{W\275\177i\216\273b@\332\274B\034\237\274*NP=D\245\255=5\255\024\274f\352<\275\036ee=\234B\332\2745\324I\275\335\373w\275\016\253\363\2730\373\237\275\373\350\333;\300\216\203;m\200w\275\305\367\250=\302\235\302\275\261\'F<b\021\270\273\001\250\346<\340\357\261\274\364\273~=HyI\275\326\243\274;\3448z=\024\213\001=>\007><\257\223\216<o2\344\2743L\006\273\007y\270<r)\230<s\214\346<\322S><\230\031\355;\013\325T=^{\254\274i]\227<L\214\217\275*\366\233=\214Y:\275B\211f\275\234D\217=\033\257\316\274\022:G=\320\205]\274\304M\276<\212\364<=4\226=\275Y\003)\273\"\203\233=\354\320#\274\351\245\347\274\205\312\277=z2D=\032\251\";zQP\275>o\006=\037\030\226<\021\316\213<\225\337\332\274\240\255\376<.\331\010\273\246n\231\274\220|O:\214|?\271\243\306\223=\327\t\000=\346\237-=\261\026\227;\321 \212\273Q\361\204\275b\000*=$\250\201\274r\317d=(c\245\275\n\234\233\274B\376\335<\362\"i\275\034\240\346\273\007\260:=&+\357<i<$<\234\301\367<\332:+\275\001c+\275fqk=D\003\030=Q\323*=Q`\231\274\240m7=j\345\237\275N\022j\274UG6<\210\211\036<\007\274\006\275\345\371\022<\272h\202\275\245u\022=ke|;\002[e\275N\254\267<!\326\251\273D\2242=\267$\310=w\034\252\275C5\177\274\243h\223\274\272\312x\273d\262l=\020\025\245<.\356b\275V;\262\275@\363\250<\"\022\303\275\004\233\235<\265W\330;\006\265A=\006f\210\274D\376\305<\377%\336\273\225\247\222=\346\226\003;\3540\262=\231`[\274\271\0162\275\234!\246\274V2)=\252\304k\274\0279\357\273\325\260S\275\326H\"\274\340\335O=\254Q4<v\230B<c\214Q\275\246\374\246=\2775B==A\257\271\006\326\327<h\023A\274\244\023\234<\330M\004\274\306u]=\0072\253\275u\211\354\274\023\214,=\207\250k\275 \354o\274\335\0370=\002R\377<\263\232\250=\036FJ=\030\037$\275vv4\275\005\360.\275\320\375\t\2759F\303\274\355{\255\275R\237\233=\n\242z=?\325\215\273\364A\210\275\255\304\235\275lsy\275^\263\326<\244b3\275\332(=<\276\325\277\273\255\337\327\2740P\336=,Vt\273\3568\372<WX\253<\277F_\274\356R\023=\362;\227\274\360L\\\2750{\027=Uf8\274\n0\365<K\2672=\201\211\250<\032n\204=\260p\313<\200\266\323;n\255\025\275\305}\341\274\342L\024=\273\307\242\274dt\343<\314d!;\234\216\213\270\023>0=j{\014=\362*U\275\263\207\355\274\333<\264\275\257\277\344\273\250\347\352<j\353&=\254\224,\275\212\306{\273=\270\034\275a2)\275\305j\331; \370\244\275%\314t=\003\257\365<2\250&\274s\360Q=\324\022\376\274#\322h\273\257F\333\274\001\242\r=T(2\274%\035\220<\014)\271=h\266\224\2745\265W;c\334\221\275 \246z\274\232m\020\274\375]s\275\304\202J=p<\225=0\351\277<\3309w\275\335i\354<\t\364\213\275\014\221\006\274\311\343\200\274\002\023\330<\221\226n\275@\321\346\273^w\245;N%\274<IC\013=\355\324\020=\030\322L<\324\206p\275\007\020\023<T\'\025\275\246\3734=<\203\274\275\234x7=U\274Y;\0042\221=\344\300u;\320\326U=\316\232\301;\257\035\334\274\3367[\275\002\026V=\272HM=\254\334\002<\260\354M\274\360N}\275\014R\212<\343\\\326\274\017@\302<G\355\023\275*~\000\275x\323\211\275>Z\334\273\326:\360=\261\036\256\275\207\344\262=\025\014\232=\n\366\267\274\260\365\347<\346&\247<\034\352\313\274\373\000\232\272\221o\t=\030H\357\274\177\341\302</:\014=\207Y\\=\213\265\302\274[7\347;Q\321\220=\031\231\371;v\355\377<~ }<4[\364\274\311pK<\300}A\275\030\r\376<9\300U=yD\254<\303w\004=O\315\255\274\t\312\267\274\2538!<\'\252\214<\320,\177\275\373}\025;\232\"\267\274 \302\340<\216\225s\273\245N\207\274\321-\240\274\"\007\002=pj\216;\033\263x\274n|\004\275<\327\313\275\312\255\261\272\364nK=C\317\347:R\262\346\274\325\220\371\274F\\\t=w?W<\224\027x\275X\264\263\274/\250\301\275\363?\300={\'\220\274\366z\323;\037\223\352;{\263\215<L\335#=.\220\273<\023\211\215\274\215\372\235;\263!\213\275\301\036\337;)\266\036<\\-\034=\360\224\006\275\031iA\275+\232\233=>\023]=\370\215\251\275:\376\210;\037\230\021<\014s\24092\030W\275z\200R=D\307`\275\317\243\216<\360\332e=\207YD\275X\304\321\274\324\035\021=\030\003\245\274\004\023P=\266\001\270\272\222V{\275i\221Y\275\354\t\323\274WO\247<aN\314\274\032\3759=\026\340\007\275*\023~\272{\314\266\275,^6=\024E\037;\350\317m=Vu^\275\361h\256\275\010\312q\275\233 #=\030\rV=\360\242\003=\360\315\255=\271\\\220\275{5\211=\3171\242\275\336\250l\274z:\276<\227\231\027<\326z\024=\375E\321<\'\314?=\327\027\201\275\337\322\314=?\324\251=\r\315 \275\rp\314\275p\"\201\275\032\317>\275F\001\375\2742\365\200=\351\000i\273D\322\024\273N\347\213\274\206;\333\273\305\323z=2`\267<q\250\312\275\246\354\221<\022\344{\273o\277\336<\347~A\2756\025N=\007\324\263<\310Q\n\273\023\364\201\274\0347N\275\\=\271\275\370\314\211=~]I\274\236\2620\273\201\016\200\275\335\225\300\274\351\214\315\274&\345\377<R\305\223\275#\304\216<\343$u\275\203\317\321\275\335$\035\275^\331\230=9\265i\274\340\376\233\274\226*\220;W\364#<\352_B=H\207P=B\244\376\2733\007\252\275uy\003;\232\226\254=\344\310\317\272w47=\223l\260=\266\362\375\274C\257q\275\344\234\302<\210\220\003<\373(\233\275\223\340f\275\317\323\377\274\352/K=\321\254\221=\366Xm<]\021f\274n\006\261=\350B\335\274Mz\000=\300c\023<!\'\352<\330\327\344<#\256\005<g*\271<\017\276?\275K\005F=\204\344I\275R\323\236<\221\222\007=N\271\241\274\327IW=S3u=\215\030K=\223\337m;\225\263\314\274\247\303o\274\272\340\337<iD\003=@\230h<ZWj;\225\002\246\274\250\350\326\274\360\001\206=\201p)\274\026\326\022\275e\311o\275Q\345s\275\021\370\020=\305\257l\275\351V\005\275\310\2272\274X\\\344;\022\005\027\275\206X\251\275\n9\302=\353N\372\273e\260\001\273\237\026\017\276\203\204A\275\220R\\<\326\273\204\274Cp]<\313\315\004=\264n\274\274W\252\202\275\230,A\274\216\373\205;f\217\252\275\024\233=\275\377\231o=\242\327\033\275\307t\203\275m\336\021<x\241\017\275\026_\211\274\0068\r\273+^\230=\'-\021\275i\255\357<\327\025\301\275\306\241\031=\017\3308=\216J\\\275\003\3421=\243j\234\275\002\272\235\274\326\304z=\371;-\275\302D\313<_\006\340<\236\203(\275\344^M;e8\304;\353.\037\274D0\364\274\272t\007\275\035\271\242;\340)/\274\262Z8=\033@\356:\254\364\220\274@K\r=\351\024y\2751\235y<;\262\215=P\014F\274\336\254\024=\355\366m\274f\007\031\275\300\030\177\275\301\t\246<\342\365\355<N\255\272\274\017\001\204=\003K\034<\213;\370\273\302\340\217\275m\347\275\274\26095\2744\330A\275\031\177\233\275X\211\"\275\241\250\304<\377|\310<w@6=\032XV\275}\261T;\'*\210<~,U\274\205\033\361\274i\314\230<\225(\230\274,\355\2458[\354A=\177\333\220<Q}\264\275\234l\377\274\352X\234\274\343m\243\273\223\001\312\274\205U\364\271\204G\275\275S@\255\274XEH\2751y\345\274\366H-=\332 \215\273dN:=\233\312\023\274\365F\327:\032l\206\275<\311<\275\356\n1\275\360\0376\275M\010\031=o\'M=\314s\210<\376y\233\275\017\017L\275pV\320\274\253\237%=\304\"\351\273\177\203I\274\220\262\024\274#~\000\275{$\'=\231\r7</\254\270=\037qK=g\374\005=r\367K=\356m\220;\313\226L\275^\302\356<f\372)\275\241&N=\303}9<\202\277\356\275a\020\371\274\2218\256\275DE\200\273\247\347\023\274L)\227\275\016\240a<\n\325\301\274\364_\267<\353\'Q<Z\265\331\274\240\236\270\275G\332\203=-\265\252\273\317[\263\275\354MG;K\025f=\263+\207\2751\303\216\275G.\342\2747\260\323<(\034\031\275\3379\260<\323.U<B\260\037\275@\021\267\273\350\031\235\275\234U\253=sE4\275r\367\350;\316\032P=\345/F=\331\r\204\275\217\246 :\016s\203=u\262\'\275 9\036=\366\"\210\275\224\006\020\275TM}=\3572/;\010{\213=%J\257<\203\207R\275f\317\302\274\316I\326\274^\r9\275\rxe;g\357f<\2218G\274\302\020\244\274D\206\250\275\324\237n=g\265\244<6y@\275\005\001`<\217\177~\273\234Rg=\250.Q<c\013;=\305\332&\275)\354\031\276v\265U<\366:+=\'H\240;\235Q\202=\005!\303;\275>=;\257(\244\275\265\003\327;\004H\342\274.M\355\274\003\203\t\275B\236\265\273=\314V\275\033\205\325\274\314\205\213\274\376\333\214\274c6\013=\231ki=\3474O\275`\214A\274\304\340\001<OJj=\323jM=\t+`\2752\035\215\273\347\361y\275\334\023\252\274\315\020e=~\001\305\274\204\217\304=\247\347\250=\237.S=\271R\222\273\265\357X\274\375?\310\274f\"\301\274\265\334X\275\'\376_<\330\025?<|E\227\274i\250\026=\212u8\275\274d\366\274\017R\313\275\026\224[\275m\213\002=\202^B<\201E\245=\334\207\325\2748\276\247;\'\267?=_j\277<\326F\311\274\021K$\275_\325\024\275\243\325\305:\234\331w\273\206z\003=8\372<<\363\014\024=+\273,\274\225\317\231\274R6\021=\366\2669\275a}\031<p\301+\275y\321\300;p\301$\275t\273\036\275{\233\036=\357c\377;k\207\257;fM\356\273^\014\177=V\n\010<*\010\240\275\335\3066\275R\212 \274_\373\315\274}\272\362<A\371\033<:\265o\275\242x9=\332\202\206=.\315\312\274\202r\000=\207\000E=\034\372\027\274\312\n\030\275k%\223=\337\r\267<\224\303Q=\252)\262;$+t\272\343U\250\272\322\361\036\2754\035\270<o\265\331\274\244\316\344\272\352\007\337<\003\362)\275\273\n\363<\373A\':\276\232\326\275\034\327\370\274\006/e<\377(\211\274\017\025\'\275\231X\277=\372\277\232<\354\375|<\312\276\276<\000\205D\275|\013\377<H\261\335\275\007\210.<B9\214=8N\270\274\027\371\004=\354\235N\274\246\241@=\355\036A\275\026\211\204</\005g=\372\230j\273\265*\314\2744z\034\275\344\200\366\273j\204&\275\037t\334;\272:\322<bb\220\274XD\250\273\332U\"=\215\016(\274\262I\024=\000N\265\274C0\214\275\376\377 \275W\227\240=\202=f\274\256nE<d\036\271:n\245\224=\270{B<9\216\227=\007\3154<=HR\275\260i/=\017AP=\262t#=,\204\327\275\274\r\200\274\335w]<\377\r]=\360\215T=\3228\010\274\217Lx=b\245\232<\016<\206\274K\362\240\274\005\346\r=\354@\343\273\263h,;\030\303\034\275\317\366\335<n\\\322\275\227F\'\275\323\207%\275B\370\202\275%\362\376\274%7\000=\202!\243;\340\304[\273\256\"E\275\000V\024\275\220\306\244:\374@I=^\274\231;:\270%\274T\014\232:\230\2702=\311\365\315\274<U\315\274\273\026\264\273\323m\306\275(I\300\2749\247\201\275d\177n\275\351\242\345<c\001\222\273\241-\005\273\363K\032=\304O\200;\214\360\264<8\343\026\275\032-\242\275\313\036\230\273\332<\251<\210\263B\275zk\215<\3424\016\274\377\r\n;(\202\211<K\271\030;\214\247\231\274Fbi=j\377\017\275\027\361\365\271\203\252\006=\003\016\314\272\300W==Z\rO=B\354[=5\274\266<\022\241 \275\360\2162\275\273\352p\275\303;\246<\372}\022=\202\266~\275#\353\344\274\024\247\016\275]\0103<$\224\031\275\212y~=mg]\275*<&\274{\333\210\273\215\363h\274\364\000\332\272\362<\325\274\343\307\242=\266[M=\272\247\220<\352\200P\274\271\231\262\2742g\027\275\275\3019\274>\321)\275\337\216|\275\007\360\333;b\'\253\273\245\315\363<D\376l\275X4\370\275\371\260\031\275\025\367\234\273\332\205\265\274\315\356\326<T6\307\275\030\364\030\271_4\210<\n\215\033=\351\312o<+j\251<z\342E=\254:\001\275\260\210\246\275\325\204v<\261\304h<\036W\350:\220\340\031\275\346\344\321=-\313<=2\231\204:Tt\010>\376\245\251=W\214\233=^\263I\275\214\234\350\275\037\336N\275\r\354\206\274\357\024,\273\375\241\211\274wm\326\274\317:\013=Y\214E\274\227\232\240<)r%\274\207\217&=6\343\361\274\347\263\023=\207\034J\275\025M\t<OT\300\274\212\352 =@\035\201\275UA\257\273D\253j\275>jU\275]\251\257<\210\014\266=\213k\273\273\323\024\205<\257R\364\274\357\270L=\251u\336<\253\347\200\273\014\003\013\275\2376\220\275\3109\233\275\366E\330\274\373G\027\275{[\026\275{#j=\256z <\344\330\340\274#\031{\271\200\360V\2752H\036\273\276\263\346\274q\345\243\274v\243\270\275[c\317\275\024\\x\274\205}\241<\263\225\"=\340\356\317\275\330Y}\275\027\222\207<\304O\002=F\233\217<-y\227\274vxP\275\374:(\275#\300\217\275\330\241\276=\244\345\201\274%\246Y\274\273J\020\275(FQ\273\311\320\231<\261\346q=\242\252\035\275\276}\222\275\221\212\343\274\262\320\004\274?\303\000=\245\215\017=R\217.=\237)D\275\247B\206\275\350o\373\271\373\251\326\274\372[!=\217\277.<\220AU\275Uf@\275\275\224R=\371\261\246\274[\'0;\006>o\274\356l3=\222\364\322\274\204l\205\274Y\364$=\204\024(=\366\341\236<\002X\357\270p\346\311\274,\3138=\000>\376\274\331\006\'=ha\224\275|\327:\275\274-\025=1\026L\275\024T\256<\275\263@\275\321\355\324=\262\033\034\275\223\031\223;&<!\275|\361\212< \306\027=*P\353<\242\233n\273\005y\377\274\350\377\221<\001\365\331;\366Z\211<\034]/<0\313\222<\274\310$\275\364\005O\275\026?\325;\311b\002\275\254\234\227=\340M\004;nwF=v\010\032=\351\0338\275\374\345\r\275\306\271\272=U\r\200\2755H\344;\021G\340\273\230\353g\275\264V\321\273\202Ae=\324/\t\275O[\274\275f\016\332\274\232\302t=\017\344\253\273m+\304<sY\304=0\251\355\274\344\270\253:\373\365\2649\'\350\201=\253\365\222\275u\346\344\275\022\203\036=7#\262\275U\330\234<\215\327\022=\014\276\223<\035\2233=lh\211=\206\025\264\275\243\304<\274\357\214\342<\rY\364<\247\366\262=\031\271\217\274\336\222h<\"\210\353\274i\344-\275\'\204#\273l\n\t>\343eG<o\037\020\275\000\'\232<\270\337\302\275\223\272=\274\253\016F\273\260n\002<rFv\274\247c\356\274}\'\244=\017u\200\273\014}\252=\252\226/\274\360kt=;\204\343<\325\t\313\274\257\372\027\275U\315\365\274\234\362E\275d\331\305;\\]\342<F\274\225;\222d\'=\201\375\356\274\202M\300\273\030\375R\274#\026!\275nL\014\275\314\333\034\274e\202t=A\242\355<y\203\344<{8\336\274\262+\372\273\233\340\322<#=\035\275z\026\266\274\324\023d\275KG*\273\367\364\343\274l\r4=B\244\316\273\2051\206<2\347\220\275\331\215\225\275=\001c<(\215\253;\207\0001=B`G=\260\333\324\274:,\273\275\306\202\341<\303i\010<\305\203\251;e\224\322<\320Z\231\274\333\264\340=\223p7=\205\376\263<L\317\274;_\334\225\2740\'\364<N]\250\274\331\3012\275\206\237F=U\335\251=K\257\030\275Y-\355\272\037\246\017<\241j==U\210K=`\202\342<\303\177$\275\315~\3619\017H\335\274\002\340\002=\227EV:\262f\201=\357\313\310<{\nc:z\222z\274\360\352\243=\270\224\002\275\377\274\234<$/\001=\347\203\022=06A\275\361\rR\275_\250\233=\243@2\275\316\326\024=C\337=<\215x\"\274\256\332\t\275F/\t\275\242\023\260;\205R\031\274\276\313\020\275\316\033\211<!\273\022=hO\211\274cbR\275)\002\210<j\364g\274\010\t\327\275\205\333\216:\373UO\274\305\347\254=\323ml\275G<|\2731\t]\275\353f%\275\346ao=q\372\214\274$h\215=y\250\241<\213\263\020\272\342\273\234=t\300\271<\210\000\346<m*O\274\230\031!\274>\013L\275o\263,\275AU\332\274X\334\217\274.\261\362\274B\341\240\2716-\216\275\027h>\275]\211\003\275x\362\275\275\360>\311<\224\022\322=\000~u\275s\2451<\rC\343\274\307\364m<\264^l\273\305\224\240=}Q\231\275\006\376u<\003\036\263<x\3671\275*u\302\273\203\023\365<\244\265\363\275C\2760\274\303k\223\275\233\275\204<\251\251\376\274~\031\221\275\244.Q<\324\266\037\275\233\010d<\201yU<\ny\366<$\252\222=\240\3128\275\000\374\005=}\3747\275\215Ak\275\017BY\274\231B\205<\031c[\274\032\002\274\274h,7\275a\3046\274\207^\177\274\322w\002>6b\311;\231@\251\275G4#\274I\273\030\273\246`^=\343_\006\274\340\360*\273\346\325\340\272\315\327\225\275\010b\311\275\216\263u=\344\274>\275\3162\003\2758\312\306=ehD\274\366F\331\274(\312I=\201`S<\361\302\253<\260Qy\273\375\241\312\273s\014?=\222\233\364\274(\314(=\207\351r<H\035\335\274\250\n\267\275\245\'<\275\203\372r\274a;\014=\001\342J=\300\236\216\275G\236\010\275\212\335\341<\345\t\205\275}\333\345\275\365dV<\351\317\322\274\235\217\271\275\354|\300\275&\215,\273\324\206\316=\036U.=\367\247\300<Et\005\273.\212.\275\004\2427\275\022\256D=\024Z\370\274\023\321\t\275c\205D:\275J\037\274\004f\356<\300\003\251\273\032\333\036\275\342\272(\275\345\300:=\350a6\275\275X\311\273\326\'z\274\033\250\376\274\365\323\020\275\314\022\\\275\376\361\201=\257\231N<5\300\305\273zl\310<\362\312l\270\252[\205\275T\013\226=\261\306&=$\307\253<\245S2<\\\010\311<\374\330q\274\2620@=\302\n\232\275p\032\216\275\025\007\335<\3118\211\275\025\026\256\274\3145\332=\344\310\006=\036\324\231\274\260V,=\220\272\"\275\032\025\301\273\354\352.=]D_\275/+`\275u,\010>\013aN=\245(\305<fW\223:\354\204\246\275\363U\023\274\007>\220\275\003Z\005:\364\0221\274\322J\210\275\256S\325\274\316\344#=)-K\273\335\315\205<-\223\324=qu*\275@\331\212=\351\326\330\274\032q\037\274.?\337<\211)v=\370d\203;\250\352\201\274\363\\,=\366x\201=\030\326\205<O\277\241<\343<h=\002\240\367;\003B\222\274{\221\235=\211\261\353<\213q?\275\254\236d8\246\\\226\274\210\177\021=Tc\264<\027\367\260;N\r\037\275Mu\3579\333\236\351<\347!\235=\227-\244\274\241\305\245=\230\361\231<\006Y7=a\372\022\275\262\017\316\275\026\336\002\275s\261\276<o\220\202=\263\241\204\274\252\3318\275\026\326\0079\305x\237\274\316\255\010<\316\212\363\273\362\356\360<\356\330\227;\377\246\034=\206\301\317<\016\277\035=N\2036=\022\004E\2751d\035\2754|\302=}.{<\312\371V<n)x:\020p\221=a:\"\275)MI=\344\205K;\264\257\252\275$\251\351\275{\363\240<0:%=\374\002\230\2745\325f\271\034\213\303\274w\\b\275\366\367\246=w\002\206<\377\350\203=q\317\266\274to=;\265\256/\275\200P\262<\307\177H\274\352\261\375\274\215\347\325<\265\230\013\275\373\327\236=a\254\006\275\311[n<k\rD<:\214\n\275Cr\364\2733\304\216\274\316\007X=\372\260\212\275\361\356\221\273\235\027\002<\275\231\300\274\372\023\327<\241L\261\275\350t\270;\257\006L=T\254!<c\203\037\275m$Y\273\027\360\261\274\2721\000;;\206\306<\024K\264:-\375\375\274\334\310\302\274\332;:=\205@\344\274\2707y\275H\321);\271\234\301\274_/T\275\033\267\244=\210\204\237\275\033m\002=\274\273X\273\022\"\303\2748\367\033\272\345\267\214\274\262\215\244=<\267==\r\226\033;\177\2136\275\356!\241\274\206q\334\273\247\276\226\275)\302\033\272{\266\254\274\"\354\267<\000+W=<\336\030<x\213_<\370\357\025\275h\3360=\260\311\227;\235#V=E\010$\274Yh\356\274\\\232\253<FN\254\275r\234^;\337Uv\274@p\203<rm\300\275\014F-\274\233\306\261\274>\333\251\275i8\210<jh\221\273\325r\373\274<\221z\275&)\001\274\254\243\216\275\303~\315\273\255\001\332\274\034\306\244\274\031\312\333\274#/\336</\352\253=\250t\345<cQ`\274\320OR=4Z\273\273\233\"*\274\311\022\\=\010\t\247=4\253#\275\264\355\010=N\007\307\274\342o\223;+\363\240=\303^\337=\212\272v\275\027\242\242\274\206]\244=\261\253\306<\232\216/\275~j4<J\347\222<>_\027\274\313\026\350\2743\006\211\275g\377y\275JI\267=\325\211\364\274K6U<\363e\202\275K\226\2133\347T\371\273\3235i<J\320\225=e\0337<\236\367\\\275\203\270\275<\234\341\242<\364\325~\274\212\027\372<\316\342\230\274Jq\214;\177\266F\275Z\277:\273\023\243X;B\265U=e(\371\273\327\210\027\275\r\351\025<\230\327-=\000\227\345<\336nl\275\235:+=\252w\033=\212]A=\234\367\325\272\345P\202\273\326&&\275\"FY=\021\215!9\203UR<\273\213\005\275S\366\323<\217\254\014<\017|\274<\366\314\031=rv\245\271?k\270<\005\013^<\034\026\201\273\222\304\366=\253Y\263\273\000\326\177<V-@\275\363\001\200=\036\276\214\275.\275\276=v\016u\274\245<\225<\246\346\020\275\037\3676;\224\261\344:\021\006\212\275Bg\315\275-$ \275\302\207h\275\302\342\213\274\004=\336<\250&\300\274\217\000#\274\263\373E\275\345\032:\274\237$\263\273s\342#\274\272{\235=6\330$=\354Ls<4ed\274@R\315\274\002W%<\276\350\246\274\020\316I<`\312Q=2})=;Iz\2759\200\274;]\321\255=%j\212=\024\2062<\2373\330\274\\)Y\275`\010\224;2B8<\300\\\350;\326\345J=\007\244\242<y\220\003<\322\245\370\274\256f\210\274\310\375E\275?-b\2755\301\330<g\263\254\275-V\345<H\000L\275\236\024\376\273\262\t\224;y\332\344:\346\305\315\274^\320o=\312\036\216=\361nh<\222\r\202=\r\253\007=R\353\302<\231\223\340\273^\026\n\276\367\235\252<\336R%\275\304\224\177=\254\313\035=\030\026\254\274\216\333\003\274duu=?\213_\274\237\240E\275l\333\034<\030\205\267<\333\r\245\275`_V\2742 \253\274\234\033\030=\371\242\214=\241\224B\274\305ES<\305\361\205\274G\020\270:\244`\265\274\320\206\016=\375\234\271\274\020\334\014\273W\032K\275\251V\\\274\036\362\207\2751R\301<\246\331\234\275\245\262\231\275H\307\032=2^B\275\204+\222\275ecT\275X\'\r=\263C\214\275\310\243\010\275\005\335\031\275\304\353\220=\340\203\320\274\251-\225<4D\025\275\261u\251<\276\\H=\252.\203\274{\375\267\275\352\260\000\275\225EL=q\336\206<\225\245/=\272u\370\272^)\266<R\320j\273\3315\037\274\375\272\216=\253\0350\274(\300\262<])\275<\262x\244<\316bZ<\025(\247\275K\213\363\274\240+\007\274\350(\220\274\274Z\301\274R\236u=5\017^=\\\363\206\275\001?\277:\355\254%=\215\014\251<\234DE<\375\257Y\275[\242]\275\026\327/=\020\337\320=/\322\207\275\037\300J=\274K\347\274D\201w\274%\2154;\022v+\274\316\350\033=)\210\236\275\240\367\361<E\245\207\275~\256I\274\031\332\027=XI\004=m.\220;\246)\032\275\332\330I\274\024\332~<7\027\232=\207e\213=e\267\366<\r\272G\273\200_ \274\241\335k\272\265\232`:\372\225\251<c<\234=\002r\341\272\323\340\336;1ZU<\276\232W\273\034;\237=\n\233Z\275\317:\230<\025\252m=\334\362\020=\217\332\365;\232F\315<R\247[=\233!\276\275\205\320:=\217po=\244\034\025\275\355\2752=\267\370H<\326\260\237\274T\333\211\273\212\213\245\274V\037\251=\227\0300=C\374\014=\341-\230\274\232\313\357=7\265\234\275SiR=:B`=\301\013\036\275\274\017\276\273U\271\244=:wf=\273\333\214\272Q\204\002\275q\206 <\n\303\202=<\225\220<t\243\351\274\032\230O=\271\210\221\274.e\201=\313\253\265\275\220h\212\274\322\352i=\370I\344\274<Y\235=\343m\273\274\314!\267\273\330\025E=s8*<4=]=\242\363\316\274#M@\275\314\3039=\300I\234\275\205\233\221\274\371\365\222\273\272b\"\275\250\301;\275\030\207\232<\'\241B\275\035\316\353\273~\335\005=\263\253\227<l\216\225\275j\317\252\274g\214\264=\374\017\020=W\014\226= \r+<8m\231=\210\267n=y\323\217\275h\362u\275S\305\272\274S\306\247\274\341\324F\2752\005\306\273\315LZ\274\'!\252\275\207z\275\274PK\036\275\326\265$;1\346\005<\257\255\274\273\3623\034\275\242\211\212\275\244\n\352<\370K\021=0\0301;%\307\364\273\227\223\250;\351 \013\275\034\026\026\275\310\273\001<\203\264\002\276|Z\032\274\307\025c={\247\264<\372\347\366;\360\237f\275\336\360\177:rAA\274fpR=\325 `\274\377)Z=\247fN<\031\363<=\217\010e\275\337\006\312=y\002\000\272\025b.\275 \372A\275\354\327\310\2702\367\005<\324\356\241\274g[\363;\345v&=#\023\333=e>\214\274\222\361\020;\303\245\264<\257u\366;\002\264\337\275K\177X<\375\216C\274\036\374\340=\213Fa=\002\216\025<\305\331\361\273\021\316u\274$+B\275\267\202\001\275+K;=\"\276\020\275\037>\334\275\010\006\206\275W\301\240=l\231\347<\217\350\000=.\010\005=\273\035,\275\325\335\261:\251Ye\275\277\302\246\273\354\202\321\274\364\023U\275F\260S;\321\227\335<?\372W=\205\213%=\375A\026<\006\356\310;v\346\222\273]\222\005\275\345\0300=R&0<}\272\005=\330~\027=s\3756<v\364\345<\325^\323=\360A\010<\321\263\206=],\305\274}\215\216\274O1\344\274\207\247\301\275\323w\021=\021\261\204\275\337\300\300;8\343\332\275J\374\256=6\235\245\273.\306\205=t\0206\275\276\030\200\275\327\210\213\275V\262M\275\367\367\024\275\337 \274<\277\207\261<\237\"\244\274\355xV=\245c\233\272\266M\222<o\026\213\273\033zS\275\017~\305\271\333\031\330<>\026\032=\351\250\215=H:F\275C7\357\274\003K)=\230\000H\274?\254\216=\314\201s=T@\006<M\347|;u\003E\275\3364\304\275\023\266\016\275G\336\230\275\346\225i=\230\271\221<e\216\353<\000\372\212\274=X\372\274\026\0337=\177\204\017\275t9+\274\240\261\235\273\371t\350\274\202Q#=\006f\206=8\247G\275\0148\322\275S\021h<7,\033=h\232\017<7\233\224\274+\302\317\275\313Z1\276\244\233\265\273#)\007\274\032\3036<4W\024\275\214\024\033\272p\223\274<\303\313\331=^\252+;\213v\227\275\321\273\"\275~JL\275\207\254\325;\0320\343<\255\340\320=[\'\220\275\256~\265\275\324KL=\267\333!=VE\231<\334\221\304\274\325\277;;\312 \251<\226<\347<>\305\221;\346\347\326\273\016\247\263\274/\375\345\274D\005\241;\247Du<\353\206\214<\213\220\027\271\"\270\373<aU\261<\263\036\244\274\321\211\320<\362\316\211\275\344\tA=\202\311\030\275\211\334\010=\200\375{\271\274\207\310<=zM=\343\221\305<2u)\271Tr\267<X\274\n<#d\353;\376\0023=}\364\204\274\023\320\353\274&\315\221<\310\224\223<k\3125\275,\n\324\273@\003\221<\"k\355\274\207\000m\274`\001l=\252\204l;\010\352\226=\020L\026=\002\265\365:R\242+;a\213\315\275f\372\014\275\242\220\362<\315%\223<\n\344u\273\032$\201\275\n\242\256\274G\027:\274\367J_=\241\021S<\t\223\312\273\274$\203;Y\304\235\274\310\024\232<\323\223\005=\274c1<#\243F=\217CM:6&X\275\231\2464=\361T\010<\246t\003\275\261\n\230\274\031\312\006= \262\r<\222ST\2750\204\201\275\266u\004\273U\310\214=\274G\034\274\203F\262<m\006\216<\262.6\273|$\267;\327\276\342<\260/\310\274e\0002\2752NV\274F\301\t\275\372\250e\274\001\316\"<\272\361 <!\026\340=\263\034\243=5\226\331\275\t\236\216=\307w\312\274*\032\215\275 \362\017<@\031\320<\310\013\221=\223\265\001\275\021\014=\2756j\226\275!Z\'<\2654j\274A\236\234\275U|J\275\177)\013=\201\342y=\254Gc<\\\310\363;\362\326\332<Fj\343\273\3625\245<\202\007.\275\332\363A<\003\334\"\275\274\007\206\274N\021\216;:\031x\273\030\n\207=/\342\026\275\324\035\304;\243v\000;>\347\002=Dp\007\275u\356\307<\321\337\330<&0\\\273X\036\345<ob.\275\235\245\035\275$J\233=\372\260r\275NL\363\274\345Z4\275;\257<<\301\321\255; _\243\273[WX=O\\Y\275\205!\344<?\317\037;MZ\326\273I\377\234\275F\340\360<\037\361\202\275\265,\021\275sS\374\274\"m\001\275N>\037\273\023\342\016=\206~\n\275\037\0214=\215*\236\275\316\017\202\275\320\207\367<Z\354\203\275\235\340U=\335\023\037\275\227\274\235\273\263*\354\274\266j\276<@B6\275\270\203\027=\024C:\275\235\347b\2744Y\216\274c\267\266\271=\366j\275> d\275e?\265\274\334\364\232\275|x\337\274\0012{\275\200:+\275QmI<:\362\225=\036w\314<B\304\030<\304\007\271\273\036\240\321<C\306\201<\357\310.<\272\371\300\274\333X\220=\374\341X=\266\335\010=(\321D\274g~\237<\351\213\342<\014\266E=Z+\205\273\3754Y<\177J\027\275\372\241\225;\252\340\245<\251|\302<b\307^<\025\255\216\273\000v\346\273u\354\264\274A\237\263\275`\260\355\274\335d9\275\314M]=%:\355;1G*=\037A\360\274w%\227\274\016\020\230<\370\037\013<\324\212\344\274\343VL=\372W\007=f\3074\274\033bO=\203S\177<{\205\245\273/L\317\274w\225\005<\204\202\211=\216\001\206\274\344U:<\022\222\236=\334l\270=\264~\321<\227\205?\275\312\367\236\275\241\242\374;\347ry=\355%u\273\003e)=\323\316\212\274\306]\250\275\017\256x=\305R\213<\327\253\221\275\021s:=&B(=h\317\221\275\223\013\337\2732`\311=\337\246\030\275\034A\031=!L\200\273Q\013\357\274\350\335~</1\020\275\325Z3\275\207gu;\005\330\274=\322Q\036=\346\322e<\345l\017:\357\327\003\274\270\217\253=H;\014\275\220o\276;\324\002\205\274\"\334\331\272\366\214\210\274\023F\'\275I\235\\\275\374\013v=\221\\\026\275\307\014\305=8\255C<\025\301\'=\331\027\202<\333\3270\275\252#;=V\265{<\336\002\374=\236f\n9\304\"\270\273&\r\220=\244\255\031\274A\237\344\274i\227\235;\rl\253<\206\362\"<\013\036\377\273\375\251J\274E\017\234=,\014\245<\277- \274[\311\357<\202x<<x\2000<IM\326:.(8<\260\255\314\274}\0057\274b\274Q=J%\306<\3502\000\275\343+\202\275\255${;8\311\255\275\301\0059\275-5\367=\344\036}\275\262\333\240\275\252^\254;\215\363\004<\237\237\252\274<\024\253\275\004\001\245=\261\343 =\377$\255=\024\254K=m\t\370<\273\222\345<\274*\201<\371\366\202\275\320\032\263<\351b\361<\233\003\014\275\237\275\366<=l\224<\257]#<\035\202\345\274\234\037z\273N\364\262<\220\2754\275\316\336\335\273?\264\000=x\342D\274X!\334\274Pf\260<H\003\252\274\032*\221\275\000\257\007\275\212MG<Rt`\275\240\254\232=R\374o\275\220{\343\274\351\227\353\274\232\242\343<7\233\033\274k\216\347\274)\207\010\274\032\235\t<?=~\275\373Xc=\201\221\234=\227\033\200<\216\th<\315+\026=(4\034\275E\3402\275\017\244\246=2\006Y\275\354\rR\275@\261Q\275\027k;=\025\312\267\275CpZ\274\261v\256\273T\305\036=@\265\347<l\177v\275d\241\036=\3568\250<t\372\036=>H8:\211x\022\275PVm\274m\367\253<\223\205\233\273D)\225=\3646^\275Gh\361<\347\2300\275\010\377\027;\242\006\211=\222}v=\300\235s<\326\340\353<]\333j<\266\371\232;\205k\207=!\003\233\273\266bs<\373\330\206<\365\262\245\274R\035\270;\350\205\217\275\002\234\031:jhg\275f\030\344=f\007\326\274]\343|\275\360\300\236\274L+c<\022\251\337</q:\275\026\304\322=\037\020X\275\"0]\275\272\345\345<\244\313P=\374=\026\2743\003\231\273\345\363\332\274\373\003\322\270\004M*\275\031\014v\274\034\201\312<\036\013\t<\355\256\264<}\317\230\272\315u+\275\23043;\026\356\210\275\006v\316:\3060;\275\231\232$=h\362\373<\304\220\026\275\333\212\n=6\2525\275\250\264\004=S\360\317\274\341)\202\274<-Z=\'\254\223=K\234\207=\270\317\333<\214\025\222\275_\024}=\330\036\031=\211\030/\275\335\014\244;\r\325g=\213\337\'=k\227\204\275\344\302\234\274Z\336\005\275\001\370\311=\230\307s\274\315:g<hE\243=\277(\222\275u\212\357<\204Rj\275\365*#\272\352\220b\275,\353\t\273\357U\245<\237q\321<\342\375\323<\037\373\245\275\302\303\002\275\370=\317=0\377\210\274SUF=~9\373<\337\206+\275\025\320c\275,K\331=;\274\321;\017\203\275<\2472\301<\212\357A\275\3501\275\274\361\201\r\275tzo;\016\001\005<\034\244%\275NJ\006\275\332\253\367\275\231h\026\273\021\224\007\273\204kY=\275\310\226=v\217e:\304\020\260<\374\035\204\275\376\274\310\275\2729\257\274\216]@\274\027\021\347\274\253\032\262\274\254\204g\2752\215\227=\360\235\250<\177\373\347<4\301\236<\241\026W\275q\363@=\231\r\241\275\203W\025\270g\253\334\274\353\222S\274\032\306\240\274\262%\253\274\"\366{=%\n\232=\341x>\274yx\203\275\013\241\301\272\313\235b\274b\005[\275\330\244\020=#\304\251\274L+i\275E4\272\275$\035\007<\034\307\227\274o\255_;\226\300\233<\214\035\r\275\353\031^\275\001\235\365;\334=\207=7W\320:xQ\274<\250\372\031<A\215\352\272\237\373\311\275X\027\276\275\360\251\341\273i\212^=q\326\273=\352\023\026=[&I=\201\377\237<\010\263Y\275\t0.\275\317\330\034\275!;\376\273\035>\230\274CC+=`S%=\250\217\034\275\336\276\241\274\241\031$=\350\211\021=o\216\024\275T:\005\275Tu\252<;XR\273\237\007S\274\326\315-=Fi\230=m\270\253\275\234|o<\271\320\216=\376f\244\273U\343\341\274\304\203\307<L\014N=\277\030\013=\346\360]<\304\240[\274\345\343\277\2753s\311\274\241;\r<\357\277\247\275\367&+\275\305#f=\177K\220=\233\"\354\274\365\264\376\274\0014\224<\213|\341<\223\226y\274\314\3568=\032\221\276<%x\266=\320\301\216\274\006\226\366\274\356\346\211<\273\211\331\274\r\364\203\275=D\t\275\r@\200<\324\255\t\274O\312\312\274\216\256\221\275\342\014\321=\016\223\260\275\3035\265=B\353|<\260\014\351\274\377\231\224<\364\351\223<\030\306F=\242\t(=LZ\275<\324\210\267\2752q0\274\314.\007=\030~\207<|*\220\274\326\374\037\275\311\353x\275\031>\223\275\201\245\210\275\212\001j\275\301\365\302\275\347X\013\274\231vg=0\377\216\274\235\341\223<u\177\357\2744f\324\274w\245\010=\277\365y;\362\032\313=\177\010P\273\302\307\226\275\225\214=<\275\227\004\275rK\036\274dO0<\342md\274=92\2754\n\023=F=~;\306\360\014\275\216\260\325\275\356=[=:\377L\274\242\212\014=\231\247\235\274\214\023\305\2746k\326\274\022\033\001\275G\033\216=\t^\367=p\341\320\274O\337$\274\273\201\036=\367\320\016\275&\n\262<\027z\312\274U\273#\275\001\240\256:\312n\017=\030S\r\275\211\353?=\372\232\246\275\256X\344=\273\026\034=\034\350\312<vN\204\272\305dZ<\230\210\373\274\367\005I=2~%\275\030\206\272\274\374\360\026=\r5G<\346i\t<\010\215\255\274\343\331\342\274uN\206\275i\014Y<\332\250\010=d\372:=\302\357\223=]8q\275\r\001\246\274\035\232\020\2755\230,\273r+\340\274\311\322%=\334g\002=\330\312\263<\000e\375\274\323@\264\274\004\341\361<]\023j\274\324\200[\275&\377\223\274d\3053=\377Y\205\275q\275\335<\0052O=\200P\237\273-\327c\274\320\223\255;\341X\215\274\253\'\330\272\242%s\275B\251\226\275E\223\320<\324\nc<{*\377\274\357\330\025\275i\233N=z\232\265\274\016m\237<\322*\201<]\030A<#\202\225\274\203!u\274\256P(\2759h\270\274\277c\237:\024j4\275\236U;\275\002\223W\273\247;\001;\345{\027\275b\372b=?[\227\274\005\307\237;.\267N\275\233\264\017=:5\257\274|\367\371\274dTo\275\026xB=\243\246d<\326\256\371<\265\267\025;\263\270\n\274\006\220\261\275\301;\247\274\3760\t\275z\307\022=\344\345\304\274\302m\200\275C\217-;23P\275\3725\225=\022\335*\275T\225=\275\025\302\020\274dl\305\275\007\366\245<\211\177.\275\001*\237<\325\342Q\275\000m\340\2745\230B\275\224:m=\245\306\343;UJ\303\272=X|\275\036V\367:\340$I\275\377>\213\275M\341,;\376F\372=z\237\030<\361\333$<\271\032]=$\353\273<Th\014=\030\321\3609~\271\233<\030\374\226\275x\262\334\272Y\376P\274\006\277\241\274\037~\033\275\2645\235<\200\\\257<\033;z\275\252\037\313\274\014m(\275\024x\246\274\246\252\226<\337\301v\274\270d\366\273EK\263:b\031E=\212\001\2027\330L\243;-_\007\275\263\"s=\351~\245=\002\342I;R\373\005=\245i=\274\227\177S\275\303\233\315\275\341F\257\275\014\234\305\274s\374\030\275\276l\004=\225\373\277\274-\317\210=Q\330{=~\023\010=/W\316\274\306\273\363<\270X?=RkM=e\234\007\275n\030`=h\341\222\275X\312\252=\216\234|\275\0303\204<&\224\300;\354\\\n\276\3460\373\273\327\312\241\273\250\256\274<\227B6\274`!\025=~\242|<\373\252p<r\223\010=4\303g\275\206\252\371\274\316\250\216\275up\360<\273~\026\274\356D0\275lj\203\275Kj\t\275a\217\017\275YJ0\275\001\2453<1\3628\275\227\014\231\274\326,1:I%\215<k\316\335\275\256!\002\274*h\227<kG\322\274.\370\227\273\361\304\005\275\371\243\237<\345\331&=\360t\223\275\265\344$<\317H\360\275\352\311\t\276))\340\274\374g\205\274f\2653\275c\274$<\267b\215\274\364\351h;Fv:=Hk]=\3326\232=\266\220\021\275C;\354\274\r\3105\275\021^\275\274ZBX\275\021]\327<\302\272\231\275\305\344Z=\252\276\274<6\272A=~\177\260\274\377X\000\275\375^<\275\010\240!\275S\212\213\275Np\221;\240\354\227\274\201Q\244\274`\005\303;\2516\027\274\213\242\375\274B+\332=\214\366s\2746\327\337\274\204\364{\274\214\304\235:\313Hq\274\216\374s=\231\217\206<V\242\207=\235\320\265=[#\213<\267\246\246\274&\215\026\274\245\255\002\275 ^\334<\311h~<$=\335\271\032\255o\274\217h\244=[~\025=\327\244\253<j\222\034=\0160\230<\355\007\302;p\246h;\000K\n\274N\365g<<&C\275\320\201\232\273,\307\207<\207\375\226=go\002<:\313 <\306\\\235<\272~\035\275`%O<=\272i\274G\020\005\272\350\335\034=l\353\232\274\0336\324<\354CI\274pJI=x\032\266\275\263\346Y\275\2021I=\351\301\006\274\241\204\337=\245\315V\2746*M=\277XH\2751\337\034\275\300\243C=\335=\222\275\326\272\003=\257\254\324=M\374\203=\244\366\326<V%c\274N\")\275\362:#=}\235\254;\256,\220\275>\211\225\274\211B\332\273WL4\274SY\222=h\247\302<\203\206n=*\274\251=o\274\037\274q\344\021\275ek\364<\365\0143\275?\217M\275\313r(\275\342\235q\275\242\214\245\274BB\342\273Jit;Y\r\207\272u\343\016\275/\357~<\275\273\261<\203\212\t=A9\'\275\210Lr\275\200\366\t\274\356\365\n\275Z\336B\275KC\031;CN\245\274gd\256=0#_\275\353\245P=\377gF\275*D\027\275\275\243\223\275\220H\240\275/\237\240\274\344|G<L\365\221=\020k}\273g\032e\274] L\274\344\006#=R\303\345\274A\003\356<?c.=R\320!\274u\265\031=+1G:\'\247<\274>\t\266\273\000\261\253\2747;2=\024\210\317\274\216g6\273n\344\020\274\013\347\017\274b\266\335<,q\333<\026qA<\2714G\275^|w=\344\224K=!\2631\275\037z\326;\353\214\"\275!\005S\275\303\342G\275\245\262J\275\362\356\204<\334\215\211\275:[\316\275\211-\207\273l\203F\275\305\032+;]\305\333\274r\377\271<\336\310\021<\333\367\220\272\370\203\222\275\357\217\312\274U\227c\274\375\033\257<)~3<\027\260\242\275\"9Z=|e%=\002\030I\275;\207^<5\202\356<\302\321\332=9\313\361;\035\260A<\'\227\025\274\366\"!=\"S\263\274\313[==\347J\002;m>(\275I\306\263\275!>c<\004\030\013=\035X\217\274\027\034\331<,\216\250=W\206\202\273\201D#\275\007\334\245=\371\364\255\274\016\3049=\034J!\275\2163\245<\240\362\213\274\323aL\275\315\020\263<\332\0055<\343\272.\275Cv\374\274\232\315e<\000\310\000\274\2057j=\233\345\235\275\362\350\206\2723\256\255\274;\313{\275_)7\275IV\357<\347p$=\352\262}\274V\314\027\275(~\271\275\016\336e\2757\203|;\223I8<uX\261<\262<\243\275\237\031k=\317\372\033<!Q\'\275\336\231\211<u\227\034\274\264\351\262< \177@\274\356\340\201=\254s\327=@\244\024\275\313\305\262\274\\\332k\274\254Sb\274\256\023\257\275\221E\255\274\342.\0229\332L\222\275\257\264\216=o3l\267\217\3519\274\333!\246<1\375E\274s\332\022\275\010\335^=q\357e\274Q@\n=\374\237\356\274\307\230\323<\271\351\366<\265\330\247=\317V\014\275f\304\233=\204rP\274Y\273\261<\264\014\277\274\242\243\303\275\033k\240<\347\261\302\274jB\201\274o\345S\275Y\353\361<\272\312\013;\236,q=\334\352\346\273\273\023\202\274{J]\275\306\310\312\275\360\356]\275\177:.\275\244\275\353;\263d4\275\377t\244\275\267\251\347\273\tQ\377;\"\315\022<\367\235\352=t\251\202\275.]\242<\036>\350\275l\230\312<\027\007x\275\323G\272<\312T\203\275\tw\236\274\246Y+\275</\317<\233\0335=zp\244<\203^\271\275\\2Z\273ubh\274\336\323X\275\303\274S<\234j\037\275Q\272\266\274&4\020<On1<\000<\207\273$N\367<\245^\221\272\355\311;\275\305S\352\275-}\010=Q^%\275\361U-=\251\235\207=\232\037\204\275\374\360\316\272q\364\270;\376jD<\0229M\275\270\352\231=\257\323\222;\002v\373<\232P\350<Q\025\346<\006\017\t\274}\024\246\275+\373\251:\365\215Z\275\017\2349;\030\336\233\274\025|*\274\002k\273<\031\304\306\273\177}8=G\322R<\272Ir\275b\025Z=\021\234\220=+\2305=_\030]\275j\266@=\253\346t\275\266\307K\274\020k\'\274\034`\247\274\374\212\301\275\344\3530=\234\222w\274\017,G\274\214\200\301\273\262\026.=\312q\206\2754\"\305\274\024\340_\274\347\364\010>|5\271\273vz\'=\300\202,\275\002i\374\273\222sF\273@\275\234\273t\016\215=\030\303\362\274\307%;\275\240\260\023=\325\027\004=>\317V\274(\313\332=\371j\277\274C\024\366\274\213\2358=(\3570=x\226\202:\361P\245=\031U\326\274\325\241x\275\203\371A=\303]\303\275\341\3253=_U\"=*\036R\272\332w@\274P\232\303<\220\334\022=\032v\016\273\303\235\267\274r^\371<zm\235<\246\275\014\275\014l\256\273\316\013\376;\001\305\223=\332\021@=l\256\225\274\316k\274;N\223u\274h\210\272\274\227\343\262<\230\274\310\274\221\033\032\275Gfb<\351\310\t\274\304\234\331\273\"\215\200<\344Rw\274\376,\265:\363/\010=\316\317\316\275P\366#=-\317\005\275\217RG=\000\3153=\td6;\315\177\002\275\224\332\036=\027&\237\275\r\362L\274\027_4=fE\202\275\264<%\275\274RT\275\335\340\202<\311U\352<k\217-\275\354~\215\275\352\214\207\274l\221\n\275\327\337\'=\003\311\201;\315=\346\274\313\262d=}KZ\275\313\255\355\275\022{e<\262 \025=\364\260\303\275\n\206^\275\214\362\376\274\247\231\330\275\0317\222=\014-\332<\317\230O\275\004dj=\273\346w=\362\223I\275\315D_<\375o\236\274\n\251J\274\317c\204=u\362N\275\001\027\'\274`\024\217\274\317m\325\275kc3;\245\007%\275`\265)<\206\3149\275\264\344\361\274SF\n<\270\300&=\320\211%=I\317J\2740~V\274\r#u\274\021u\230=\270\3336=\212ax<\030\237\231\275\036\234\203\274\375\020\300<\314\272\242<E\0059<luo;\3724\205<\017\233\212\274/\177e\274\207\246\343<\314\225\201\275\363\030\005<\213\234\347<?\301\254<@\225\352\274\036\250\221\274\017\375\271;\014\341\323\272\274}\210=&ZA\275D\275\215=\241O\006;\217A\356\273\330\327\277<x+P=\256\210u=~%\010=\007\366\306=\242\304\200\273\'\226\257\275\224\341Z\275P\205\227\274\2629q\275\344\233\225<~rl<\214[N\274\257\256\224=\340+$\275\346\270a=\034:C\273!\240p=\275\'\017\275\207\332\200;\371\002\014\275U]\031\275Y\361\357\274\3743\010\275\220\367\233\275\243BF\275\261o\030>?\366\232=\233\274\r\275\310_q\275\334@\n\273G:\003=\311\353\232<\211<\343<\354>\257\274\226\036\301\274\003\034o\274L\355\272;\037#\322\274\261\351]=\204\255x\275VuB\273\'5\225\274\270\374\264;\234\005:=\360\232-\275\177\035\n=\036\0266=\376&\376\274I]\357\274\005U\343\273\252\270S<H\304\270\274\n\376?\275/\246\205\275P\t\237\275@\0006\274g\361\006=c\017\233\274\004\337\302=x\233\303<\210\236\017\275\003\312%\2733\216v\275<u\226<\363\356=<b\224\254\274\311\t\314<\006e\347\274\374\246\234\274Q\376E=\355S\020\275Q\225\347<\2250\265\275\203p\270\274\037\023\332\273>@\004=/9U<\272\246\344\2748\321\202\275 e\347\273>\356\254=u\246\216\274H;\245\275\025h\324\274b\'\337\275\'(\032\275Rn\020\275\024\373\206\274\336\215\346\274\270\242\322<\334\177\214\274\205X\316;E\272o\275\nxv\275\022\334\340\274|\233\366<\223\005\017=+q\340\2746M1=l\313\005\274\375+\t>G\326\230=z\214\335\273(4\217\275\376\035c\274\177\354\'=ksv\275G\033\272=R\363e\271\017^\352<\241\310+<\033\327\021;:-?\275F\000\006\274\361C\251<1F\255=\002\250\032<\264\345\031\274\216\022/=\272h\005=a\375\361\273T\317o\274\204\335P;\024U\373<\023L\375<\2765(=\302\333\262\274\007^\237\275\361\330\021=/G\230<R\317Z<\270\030\256<X\034?\275\262\235]<y\022\302;(|\226<H)\306\2751\326P=\334\271\032\275\035\303\014=^\344\252\273\207T8<z\207\007\275d\005\272<\274\327\255\274\330\014\037=\376\256\364\274)\300\345\274{l\236\274\231\341\216\275{#\2309r\235\237\274\351\355\371<#\223\360\274\370N\262;\357\337\n=gK\350;s\r\037\275\033%&\275\216\222B=\017;\010\275\314\346&\275Q3\220=-\223\021\275\215\237\031=-\206e\275u\201s\275\351\323\220<S\213\205<\313V\205<\310\355K\2752\016\264<Y\010\322<5/\220\274\241\221\031;\n\372\3559\213\256\314\273\206?h\274W,\232=\363\020\027\275\256\"\204\274;/\236<\305\353\n\275\343T\314;\266;\007=\223?P=\243#\254<\r\377\256\275\016}O;\374w\262:\255\311\004\275U<\032<\022m\'=\301\321\3679\027\327q<r\330\204\275\324\035z\274\201\374r=\tg\315\273m\211e=_\274\306\273\376\253\312<\352\333\307\274\027\236\026\275?\216j\275\2141\001<\317\200\322\274\336\373\027<o\337\231:\233\326\231=\2145\304\274O\365Q=E\202[=\312r\264\273\356\034 =F\000\225<\001\262\261=s\371\004=)\301\222\275\267\010\220=\t\351m\275\014H\343<\334\245^;\301\252\002=U\373\003\276\305D\351\274\23537=\354\240`\275\311\327\244=\300\275\325\275\330\3044\275\3309+<J+#\274lUb\274irQ\275\254\372+=\233\344\242<\021\357\343<\300\372\235=\302\207A\275\331\246\017\275}\316\031\275\035\024\354\274\354\'\013\275mj\243\275\274l\250\270*\010\020=\216\316$=H\333\333=\'LF\275\324u\365;3\'L\274!\260o\275\007\013\261\275\354\345{\275\245Hs;\035\375Y<\036\270\323;Q\2450\275P\306\263\274\262\212\226\2758\2769\275\260Q\245\274e`\034\275\331\201T<\246\210\222\275a\3355\274\005\001\221\274\207s\334=3\345\240=\255\364\201=3A\373;\224I\001\275\331]\207\275\246-M=\347\377g=\246\325\223\274\370\237\207=\262\306\260\274\370b\004<&_\\\275\021\277\030=7*\222=\377\215L=\307\366\017\275\361q?=2_4\275\246\257\240\275[^8\274\371\277\030\275_\252\037=\304\203Y\275\302\330\201\275\272\025\347<Q\352]\275Sx\207\272\233\347*=T\345J\275o\267o=\020p}\275\264\265\206\274%)K:i\335R\275N\204>\275\337\365\330\274\335|-\274\034j\033\275\253g\270=\351fc=`Cu\275&\354z<)J\273=\000\211\002=\371\320\367;X\344;=W\250w\275d\215\214\275\007O\014\275\375\243\372\274,\017\341<\034\037\255=*+x<\270\204.\275\357#w<\340.\032\275\242\347\002<\200w\256=\013g\201=\365\302\253\274\306O%=\362\333+<\220\340.\275\342N\004=x\376O=\312\253\342\273*+\210<\316\327\237\274\377\340\207<\373\027\225<\365\300\242<W\305\337;:\211)\275\302|[=\362\304\305\273\221\301\304=\2578^;\356\252\324=\033S\215=\244\351-\275\313\177b\275\3323\363\274\370\205\303=\323\330\363\273^\000W\273\3256a=\204\373\027\275\367Jh;\334\006\202\275\212\214c\275+_\222\275\201\270\030=\302a\035=\27339=\035\240\355<\006\025\322\275\270%\237=[q\223\275n\242d=\264~\034\275+\331x\275\214\345\304<.\316Q:r\032\324<I\270s\275\246\351p=\244x\204<\207;\362\272\222\026\254\273\316\314\310\274\212\233\211\2746S\207\275y\227E=oit\275:\200\320\274\005\277\214\273\326\227\216=\223\257\320\274mLQ=\026<f=QD\227\274r\325\342\272\203\302\350\274\367\335%<\333=\013=\231+*=A\3415\275x(3\275\341m\022\275\231UU=\265_\217<f\016\204;U\207f\275\207\270\306\273\255\323\321<\301\312q\274\010\325\352;i\375\233=k\323\010\274\010\320$=\211c\273<\217\010!\275\227\362\022=\363C\311\274\342+E=)::=^P.=\253W&\275H\006\202<@{*\275\267\323J=\326\022\251<\"\257Q<\245s\257\273\352\223\305=\340\210\203\272\256\213\026=\006\247\272\274\014\036\327<Z\373\n\275\253&\337<\357\0078=qw9\275nk+\273W\035~\275(\374s<\207\351m\275\275\202\256=\347\265o\2742\213\035\275\323\371\217=\372J\030;U2\210\273G\032*<\240\361\262<!\300\245\274\353\201\010=\347\324^=\312`\016\2751\2704=\305\323\306\272L\254\227=\350\347\230<\030\3628\274\346\264*\275C\311F\274 \2014\273\3207\337<Bu\237\275$\332%\275\2201\031\275\343\261\027\275^\315X\272\267\316\243\274\215<\315=\213\244O\274\332m}\273\312\2443=\306\010X=-\313\355\274\371\360n=\023\020\272<w\323_\275\2377\260<\356|,\275\225\266\000=\352B\245<Nj\227\275\2739>\275@\345Q\275!b\236=\022\203\014\275\002Q\030\275V\353N<\022|\223\274\010\265\235\274\325\177\302<\013\361\230<\365\023\202=\374h\341<\377\010\212=+\005\315\274\032\250\005<\237\243\335\273\215\204\303\274\027\347l<\3507\225<\313\263\205<O\024\366;\236d\236\2742\261e=\005\226,=\371G\006=FG\002\275\315A\252\270<\022$\275C\327\364=\275\240\275\274o\265e=\270\000\241=vy\255\274XC\266;\301\037G\2758\2147=v$\010;\017YF\275>\355\353<\372\254\330<\247\245\302\274\244G\020=rr\263\273\266\036\346\271\202p\336<\210K\r\275\337\222\027\275\344\374f=\310\317\236:[R\211\275\235\377t\274\375\036\005<Rx}=\323`&\275\212\021g\274\036\312\227\275N\214\201\274H\255\002\275\275b\206=\200\270\251\274\000\r\021=\006E\350\275\274\245\270\275\005p\304\274k\302z\275\344\226j\274\226\342\334<\264\001;\2759\225\315\274\323\021\201==\"\264<S\204\255;\n\372\225\275\256ti\275\226c\031=\rx\357<\271iR\273\301( \275C\352\327<w\340c\274\252d9=N\016\006\274H\035\355=\226\354c=\352\267\202<!2\321\274\311z\223\275\030\251\223=\341V\236\274_,h<\242V\227=\254\374`=\311\236\306<\000\256)>\254R\001\274\326T\037<r\240u\274OK]<\030\227\362\273\205\302i=Q\020n\273\370&\2709\177P\323\2747\035\363\274@y\325:\374\022\256;a\311\253\273&\207\037\275\035\257h<\201\3238\275P\271_=g\234\231\274\362S\364\274\213\317p<%o\251\274\217m\262<\017\321\000\275\374J\222=V\353O\273A\271\237=K:\005=\300\224@\274pPS=\252}\312=\275\346\200<\357\2537=\256\020\323<h\024\207:\273\020\336< \027\302<>\305\323<\035\271\232=;Cl=Z\210\022\272\227\033\204\275\273\363\340;T\313\205\274g\0251=K\030-=9x\003\275\343}\233<5\027\030\274OPe<\022o\007\275UYp<\214\252\023\273hk\301=\2058)=+\337\335:\247\n\001\274c}o=\275j\316\274\264\247\216=\275j\014=\343\206\256<jWq=\213\314\336<\352bR<iq\001\274t\367A<~ \006>\227\313\207\274\301e#\275,u\371\274\256f\321\274Q\224T=\252\372\002\275 L\344\272\370z\364;T+\221=\334\217W\275gM\234=\267\003n\274\275lh\274+\210\010<\333\n\211\275{\003I<Q\2130\274\2424\337\275Y\336M\275\345Q/=s\377\214<%<\222=e\330\270\274Z\013x\2734@G\275P$\341\274\211_\020=\243\313\244<.\371\002=x\022\360=\257nu=g\026\025\272xA\'\275I\316\221<r];\272\226-\202=B\031y\275\323\010B=\373\212\374<\022\023\201<\3551\001=}60\275\223\245)\274v\376m=\001\215\307\275\300eL\273\260\260a\275\001\253\237=\227\361\272\274\004]\265\275O\277\034\275J\244\227\275\205i\251<\244v\360\274\n\355\222=\322\023\234\274P\334Z=8q\034=\302\276n;\201\222\031\274B=\\=\003\264m\273\365\372\245\275\\g\":\370|:=:\330:\275\022xl\275\037\275\260\274\340\347\220\273\t\010R<De\241\274oO\275\274\221pH\275GU\251\275\236\317\270\274\301U\021<\027\263\321<\353j\214\2752\'\314\274J8\222<O\305\207<\303\200\024;\305{\301=-\2417\275\016e\003\275\332$g;\220\371\353;\271~\304<\036\335\324\273\030\021;<u\026%\274\305\274\212\275 \307;=vb\262;\\$5<\312\037\027\274\236\341,\275\204\247|<\300\326\207<\234\2629\275{v\022\274\330D\320\274\363\037\256\274\tL$=\330\361\352\274\361\014\213\274UQg=( 2<\327\353\230<\273\250M<;>u\275c\222\311\272\'\203\304\274Fz\300<\266\322\340;/\257*\272\355\347\240<o/3\275\014H\247\273\2067\257\274\242+\346=7\347%\273L\215\335\274\213\217\005\275F \222\273\177\354\271<\261\361g=0\213==+*\005<\034\032\220=\242O\323<TA\022\275\355$\322<A\320P;\340\363D<\027J(=\332\205W<\013\343|<\234\021\252<k\276\021\274\022 E\275l\244\323<#\237\217\2749\240h\275\361:\"\275\230\221\221<\301\331S\275@\025\226<W\301]\275a0-<0:[\275\313fQ=\004&3\275\214*\232=\033*\t=9\007b;\2001\021\275\337\350\217\274\217\235\233\275\"\006\275\274[\346I\275\207\240$=\347\2052<\016\263\361<,\235\035=\347\031\256<\362\367\246\274\335\273w<\361\227C<\244&\272\272<NY\274\020#\271\274\303\250\360\274\325h\335\273C\373\311<\216\375\225\275\201o\315\274\013\344\311\274\372\372:=LB\t;\267\363\013=\031I*=\307\243I\275\247\204\257;#\032A\275M\333\352\274\323z[\274\353\346\205\273\337_h\275#v\366\273\355y\226\275\231+\214\275\330\235\314;\3374p\274R\357\007<\266\251\344<_\2707<m\204\260\273I\357\262\275\026\261\314\272\274H[\274b\340\314\274i\277\377\274\201\025k<\317\250e=\226\300\007\275-\007\006=\332\023\251=du\020\275\244\203\272\274R\244\266\274\266\230\304\274\020\220\232=\326\020\266<9P\225\274\253\301>\274\224\265\267\274\234\325\225=$}\000\276,7\354;\032\367r;\332\356h\275\243\207U\275$^\316\274s\213\207\274c\345\212=\250c\245\275Ds6=y\0339\274\207\"\217\275tg)\275\227\275\'\275\275o/\275\233 +\275\332\251\331\273\243 \245=i\000\372<>V\363\271\033\231\305;\\D`\274\350\036\261\275f!\217\275x\'\243\274<\221@\275\334\332<\272\201\006\353\274\360\276\313\275\320\271w\275\'j\235\275\241\224\036=#\342\024=\224B\246=f\334\003\275:\206\375;\030\027\260<\215q\261\274\346\373\344:\242i\177\275#\300g<\320\306\340<\347A\275<\214o\225=K1\210=f\302\215=\376\031Z=GN\205\273\t\004~;\033\027\232\274\034\303\005\274(\342\206\273\236\314\n\274\244\365\342<\231#\014=[?\212\274\317u\237;q$\344\274I\203\026\275\321(E=\305\366\265<`\014.=\322\203\222=X&e\274?\321\266=3\246j\275\273\r\277\275\325\233&<c\347\255=\2633\226\274}\341A\275\227\253\t=\331\246h\274\235b\304\274_\320p\274\023\275\364\274J\n\221\275 \005%;\220\026\356\274\274N\212\275VO\274\275\177\033P=3b\324\274\331+\334\273\304\354\217<\2234\006\2750+l\274\035\002\250\274}4\032\275\021\ne<\004\2519\274\000\252q\274\000\302\331<;U\272\274P\232r</\205l\275:-\302=\250\0063=*\311\330;Y\242\307\273\361\303\022<\313\237\376<{\312\367;=Z\351<S\251\017=@e\216<\t\030\017=\376k\377\274G\374.=\201\027\010=\212\363\341=\220+\257\275\005\332\202\275\034\002\001\276\226\251\024<\352;3\274W.M=\245R4<^5g\275\311V\246;\355o\035=:\263\342\271\266\000n=\315\316*\275\260~a\274S;\230<La\226=u\332\221\275\266[\245<\0242\005\275#\325\230<F=\t\275\373\203\020\272`\315\206<\227\322\027=\327ZJ\275\214\334\227\272(ac=(\334\234\274Z\203$\275\337{D\275&\353\001<\207\237\237\274\244\342K\275\360\364\005\276]3d=\021\320\312\274\n\324\245\274L\2661=\363\247\233\274\014\370\350=\315\354\206\2742\307E<\274\271\246<(\344 =%[t=\177\300;\274Q9\264=I\370\006\2757\337\264\275\351\036\271\274\0376u<\242\031\001\274\016!\277\2742\250\230\273\346\000\220\275\002\351\232={tX=\300r\304\274\334\201d\275W9[=B\313\036\274L\n;=x\343z<9GR=\003zD=W\340\253;\004J\016<\246\376?=\274\021\004\275\010\021\220;\311\177\'=\203\376\320\274\023\r4\274#,\345;\2049\220\274\225%\241<\376\3257\273=\310\225<\213\\\302;O{\341\274\320{\210=\271\237\347<Y\305\014\275W>#<\027\t\005=\001\363\027<\037\204\240=V\277\025=\025N\207\275\363\337\230<gU\356;\004aF=\031\262\327\274M\033[<\310\341\014=\277\200\260<+\037t\273I\314\216\275?\227x=\032\231\026=\225\010}\274\366\336\232<-\006R<(B\022=\265c\033\275\221\306\334\273<K0<[($\275\307\226\243=\211\013\276\274w]D<\373\\\322;\364\023\254=\311\2425=ew\021\27554:\275/\017\345\274N\212~\275\277z\276=\313&O\275h\263\210\271\276;K<u\367\256=5\256\315\274\232\023\202\274I&\r\275-\342\361<\356\371\203;\317Q\002\274M&R\275\036\221\346=\246cA\275\034\343\250<\271\207\035=\270\243\002=\177\014\244\275\250\307\223\275217<t()=n\356\356<\260\014\275;b\357/\274d\225\247\273Ng\236\275)\362\307\274ULF\274\030u\250;\350\324\277=\333\016\022:\245VL\275\272\314\035\275\205\314\231:JU\024\275\360\223\305\275b\023H\275lq\317\274\357\337\242\274]\260\274\275\275\270\177\274\374\275/=w\301\016=YVC<\"\313\326<c\347\264\273P\251\202=\254\260\373\274\265\177\032\274^\313\344<N\305\003<\206;_\275\235\254\'\275Z\006\225=\016\203\002<\326@\230=\304\205A\273\364\241\r\273\230\246\307\273\245\220\243\274\204\205T=\374\242\323=\363\004\013=fW?\275B\253P<\255F$\275\370\203\310\274\034\225\351\2741\225]\275Gf\277\274U\276\r\2739%\350=\231%G=\240sa\275\021|\207\275\027K\014;\0322\320<\340\035-<-O@\275,L\317<\235\274{=B\010\177\275o\300\272\275_\266$=\255R!=D~\367\274\356Yf=\324*\272=\013J\275=\357\370c\275\362?f\274\004\000\236<\377\201\353\274S\r\202\275q>\177<\337\336k\273\3025\302\274`\351~\275\341\206\310\272r\222\245=\034nJ=\246\2327=ZP\007\275\t\360\273;\251\200@=<\010\374\274^\000\252\273\013B\371\274\211\245%\275\226\233\357<\010\211\033\275\246>\221\273c\372\364\275x\360/=\032\237\233=\351;\377<,\276G=_\355\333=\341\317\200\275\342v|\274\344\260\341\274\223`5\275_Hz=\336\332\'=z\330I=\016\3333\275z<\301\274-D:=\253=\006\275;\235m<\000\265\016=\313C\232=\206M\306=\370\027\233;\3157\024;`\244\002\274\313\006\322\274\262\r\222=\3260\'\275\331gp\274\212\260o\274\010\031\200\2754\342\216\274F\343e=-\344\325=V\246\033\275%\356\177<\347z\2159\205:9\275si\261;\365\306\321\273k\322\'\274B[^:%{\315\274b\365V\275\313\215\350\273\\qO<\020\327\017=\235*\323<\360\203\201\274\350\265\355\274\333\366\331\274:\321\242<\221\n\257\274)\362\226\274q8\337\2717\331\202=\310F\313;\265\360~==\365.=1\tJ\275\273\375Q=\371\246\211;\324\272\037=s|\247\275Jg\227<\230\"\035=\272\327%=y\230\024\275\300\214\203=e\226\213\275\231&\312<\313l-\275v\r\375<\343<\204\275\325\3202=w9\352;\361\033\234\273Y\214\343\2743C\236\275\234\336\363<\024\023\246=\023\345\234\274\215s8\275Xb\337<Z\243\232\274!\221\315=\323=\221<\314$\327\274\355\014\326<4\027\004<\272#\020<\233D\234<\233\315K=m\317\232\275\333\350\221\2743k$\273\304,\313<<*\326\274g\237\'<\rxB\275\004\013\253\274\014\"+<\214b\367\273\000b\002=\271\005\255\274\265\330\\\275\306B\204<\330\356\010=\367!\305\275$\036X\275;_A<c\000\t=6\240\220\2750\261l;8\265r=\0229\236\2723\212\010=\232\356\371=\334\254`\275\253\241+=\252\037W\275\327>]\275\030\302\r\275\211`)\275\264\304\253<\201\013&\274\002\374\331;\"\'$=&\206\030\276\315\256X\2752\245\343<2\367\214\275\330\262\233=\215\230\375;/\215~\273\323T\006\275\237k\202=\345y+=\"\334\367\273\0027\377:71a=\250\361J=\307\361\241\273X\255`\275 \274Z;\234\204K\275q\241\341\274\010T\333\274V;\375\274\236W\033\275&\006\314\274)\210\t=I!\255\274\030:C\274$\002\006<rI\"<\225\024\333=\247du=\305 \210<\224c\307\275\242\032\242\274\206\301\216=\276o.\275\025u\267<\341BJ\275\032\330\237\272\2747\334\274\372l\234\275\311\342\256=\273\3437\274\336S\036=\014q\006\275\227\004\031\275\374\003<\273\0325\014=~P\273=\002i\313\273L\233p\274\330\206\266<\036\236\207\274\000\035\212<\215\277m=\3216\300;\035\204\271<I\356Z=\216Od\2748\335\037\275\245\3640=\374\237\203\274.\364n\274\320@\005\275\232\310><\241b\362;\342\226%=\"\3250\273YgV\274Q\024\204\274G\025O;<\r\366<\320\215P\275\010\243\224<*\314\261\273\020\215x<\022+\266\274/\233$\273\214 \260\274(\302\373<\205\211\305\274c\256\331<\301u2=v\\\023\275\363\021\327<\240\364\005\274\270*R\275\360z\037=\n\010\225\274\261 \205\274\214s\216<\331c\231\274{\270\r=\365\371\210\275\311P\010\275\275v(\275\304)*\275\203\334\2578\302m[<h\320\013\275N\027\255\275\265j\253;7X\231\272\037:\341\275\005&l=q\n\206\275Z\200R\274|\325P\275\323eu=JF\241=\313\324b=$\013\007\275C\346\270:y\353\331=\3518\t=\365\325?=\023q^=9xY\275\010\025\244<\311\312\252\273h\377\220\275\016\341\212<\317\330\207=\177\0224\275s#C<\312\031\321\272\244$]\275u\346\274\274\035y\006\275\327\027B\275\366\341\033=\205~7\275Z:\007\275Y+\251<\274,\202:\266\355\237<%\345\222\275\223\201\021=\313\336c\273\242\354\025=\210W\036\274\333\357M<C\307_\275-\202F=\372:\206\275/\367\033=\226\257\303\274\227Rr\275\003\334\026>R\257\222\275D\351\205=f\023\223=\305\031T=q>^=g\007R\274\221r\252\273/`\311;\322\t\223<\2702\252\275\232[\224=k\354\270<\237\\\355\274%\272\005\275\001\337\210=\020\277\203\274\343\031\r\275-P\273<4\355\360\274%Kn\274\356\325\274\273{^\216\274\372\022\277\274\212)\217<y~\373<;v\371<\345\033\322;\010A\034=i\266*<\341\001\033<\"\322\r\275c(n\275=\020\352\273\301&\220<\212\020\324\274\200i\315;\364\"b=4\354\363<\235\226\252<@\370g;\305\253\230<\336\354\020=\\nQ<g\210\252<G\366n<\016\253\014<\350q\214<\346\0047=b\2151<\302Ge\275\245\215\212<\006\307_\273X\336_=\356\201i=\222\224\202\275L\374\321<\247\325\275=t7,=\000\203V;\237\r\227\2745\331\201<K\323{=\374\244\312=\245\202\207\274\226`\334\274\014\2374<=\220\210=y\214\027\275\'\257\215\274q\211\250<\360\252\221=\327\016\345\273)S)\275\324\210I\275\343\354\211=\223\310{\274\260D\307\275\352\325N=}\017\244\274&\037\244=eK\017\275\250/\215<\204\231l<\207\377#<\307\333#=B{\n<\\yL=0\271\001=\347\014\304<\262\203\244=\362\200$=\014B\026\274\275\007m\275*/\210\275\277\333\000<\364\212{=\277\226\355\274\016K\205\274\021\337\250\274\313=\233=\306\275\017\274\013\274\246<?\016\273<\330\342\022\275_\312\217=\000\313\357;\232\233 \274\300\255\301<\261.\035\275\003\236\000\274a\256\207=?\302\013\274M\001\346;\027\211\337\274\222\265V\272S\t\272\274\231G\201=\206}\256\274\017\371\232\274\213i\333\274\031_\014<\003\020l\274\010\323\251\275O\274\033=\0273.\274\t\200\023\274\027\265\327<j\350\302<\351[\t;\004`%=T1\372\274R\'\217=l\314p=[\231\010=\336\260\030=\302\032\247=\251\005\275;y\020\301\275\360\031^=\225\275\223\275\301\306\211\275}\234\263<\356\326\006\275G\007\234\274\007\300\202\275\332\306\236\275\372\217\337\274\3262\262\275\206+\n=\026t\035<%\324q\274y\002!<\014\032B<\260o\206<\002\335_=P\312\337\274\316\330\273:\326\375\035\274\230\211d\275\204Z\272=\222\377U<\233n\213\273YY.\273\t\372\306\273\016yG<{\364\234\274\307\177%\275\317\303\003\276i\004\\\274\347\377\367\273gs\002\275\267\366\260<\033;\202=\326\340\224=\225K\221\274T\254T\273bwb<\330\213u\275\033\350\024\275\345\261_\275\2066\336=\364BD=h\354\255<\345j\245\275\335\254I=tla\274\225O?\274\003\3041=\242\367\344\270\333\n[\274\314#\241<\004\361\204\274]\351\007=\236B\311<\031%\200\274\245\364\026=kq\267=\351\236\220<\300\315\213<\016\374\314=\305\225\211\275\336X\332<\226\017b\275\347\037\255\273\373L\250=\312%O=\223\023\352<\304\214\233<@\001\256\275v\214\033=|\221\227=\'\031\223\274\200\244\003=7\330\262\273\211X\301<\242\026\257=\244\0022\275=\364\253\275\345\262E\275z]\300=d/\264<\304,A=\306\033\273\273\213\005\3209\274\235\025=\301\017\370=\340\243\240<\377\345\376=\022{&\275\245\236\"\275Lxr\275\0139p\273Q\267\036<\351\206B\275\201e_\274\374]e=^\337\260<\252\224\322<\361\3108\274\260\352\\=6A\024\275\277L\221\274K\2161=\002\023=\2754Os=&\246\311\274XE\204=D;\337<%V\373\274\350q\253=\205\252\270;\020\332>=R\307\355<<\341\036\275Z\316\033\275/\\\224\274\222\354\253:\227\'\212\274\222\272G\274\201\021\t<\331\353\266\274\'z\241;o\256c\274\330D\335\274?\303>=\022\302\341<\226\244\'<\255\022\275\275\032\307\251:\355w\214;\2202\347<\336\004A=\205E\357<\025:\207\275\010n\245\275\347\337\373<\317w\232\274\202\2208=\3454%\275\352x\313\274\010\343\234\274wV!<M\222P=|\204\177=\017\033p\274\3428\222=H_h\275\001\363\245;\250\231\231=\231DO\274\374\227\371\272\320o{\274\216\355\236=\265\251\007=\353\322\002<}\027\277;\201\231\275\274\0348\223\274\377\360\306:\302\304B\275\245\204Y=U\235\250\273\300\317\204\275+@\321<P\245\003=\355\n\262=;{\215<\267\271\032\274\005H\306\273\273\333n\274V\331\254=0o_\275\223\222Z<00\206\275\357\207\r\275>H\217\275\'\330\226\274\331\273\013\275h\241\036\275~f\225\2750W);T5\030=rF*=\345\"t;\222\205\213=G\370\227=l\0004\275r\2114<\375\323\205<3Vx<s\242\303\273\321\356{\274\206\r\232\274\334j\226=\034\020\212=m\265C<\231^\006\275L\025\214=\223\355f=\357s\346\274^X\241=\255\213\217\275.u\002\275\211\201\345;ce\315\275,O\207;UJy\2741\360\240\274\264v\177<\364)\205=*L\351\275~9\361\274\265\337D=\334\273\202\275\007\323E\275\020\2133<y|1\275N\312\325\273M?O\275\346UA=\300\372\275\274\213N\245\274\252\304J\275\354\312\017=,\022q\274\302\235\205\275\373\251\313\274\227 \r=\014\237<\275\237\236\033\275\352\270\300\275\0164\252<d\260\374<\314IJ=j\336\200\275\227R\203\275\304\206\254=\255\221y\274<\270\002<\303\327\007\274n-u\275\327\347\351\273\020^\313\274\325\034q=\276&\236;\232zo=Y\221U<t4n\275\346\036\035=\270\3303<\316Ql\275\025h\355<\261\340U\275\'\253o<W\275R<*R\344\273\024`3\275\317\022\006\275\356\317|\275U\217\r\275\337\233\341\274\366Y\320<\253\014\317<Wo\252\274\324\037\\\275R\355\241\273\277\234\266\274\246[p\275`\367\264=\240;\206=\'\276W\275\r\377;9\212\244\365\273<P\340<\2728\214\274\346\031\340\274\275\343\2549Ycx=/\345\221\274o`\257=W\246\037=\010\206\232\273\274A \275/%\224=\347\230\241\274\014\002?=\277\\\201;{\017\272<JQ~=\312\004\013\274\276\034\014=}\345\022\275\002\024\257=\305\330\204;\233\0203\271gc\351<\0001u<A\336V<\367\216\\<\272\212J=\361w\332<\342/\240\275\274\220\243\2759\350\267=\240\003\022\271|I\014;\036:\017<\217.\273\272\314\026\242<\235`\361<\327d\037=.\031\363:bz\255\273-\216k=H(\035\274v\214h\275\323\270\032=Q\360\375\274p\r2<\2146c:\321\233\"\275\231!\266<?g\330\274\353yX\273\253\332\032\274^GE=\311\350==\356\314-=\3738\256\2743\237\261\274\203b\n\273\327&\370\271\346,\033\275\257\3147;\030 (\275xE\n\273\275l\240\274\214\360!=\024\322\213\275#\227\207=C\267\032\273\330\023V<)G\225;b\016\263\275\314g5=\250\357}\275\257\252\265\274\312\341\361;\222\021\000\275\241\256L\275\330\372\277<\341V\247\274\272\341\355\274\262C\337<\234\007/\275\036\314!=\253.,\275\257\352\271<\213*\206=\217\023,:\017\006\"\275\004J\224\273\262F[\274\237;\335\274\227\361L<\311\006\226\273w\037\253<m\375\370<\367\024@\275\0341\355<\3464*<\237\2411<~\242n\2732\336f\275\201\331+\273\251\244G<\236\001^\275M\252\370;\222\256\376;)\224\021<!\332\217<\324\372\201\275_\315\014\275\210)\004\274@?{\275a\372\"\275\007\375 <\367v\212\274\r\333{\275k\025*=\013\206\025=\215$]\275\030\327\021\275\177\"\337\273\007\373\0369{N\233\275\023/\374;\027\351\233\275m\336\236\274\333\307\303<\330\204\203;\2731\243\275l}\226\274\365\214\377\273i\211~=\237\316\327<\016\'\340\275p\321m\274\021\032\036=\346\212;\273\264\031\205\274\021\244\213\273p\022\244\273\207\000$=[T\007=S<y<\010\254P=o\327H;#\335\"\275\2450\310\273C\341\215=?\022\005=\212[\270\274\360\230e<\377_U<\313.\334\274i\270\211<\027\370\320\275\240\241\006>\234\247\303=W{<<~\253\013\275\"\010J\275R\215\216\274}B\017\276\375O5=K\'\004\275\327\266A<X#\337<s3\242=j\212B;\247\243\032=a\362\376\274\340S\225==\246\207<}\3428\275\275\177\213=X=j=\207C><\215R\014=$\356\260\275s?\273\272q4\213;\330L\273\272Ry\201\275\263Z\216\274\353\242\017\275E\241\243<\276_c\275\024\204\222<;\215\177<\352&\207\273\310\031\241\2756\013j=\305M\212=-\225\255<\036k\014\275\336\026\201=\210\003$\275\374\323\222\275\320\276B\2751\212\025>K4\363\274\3744G=\244\221^\275\371\225K\274j\362s=\023O\'=\205(u\275\367\350\222\275+\227\315\274;\024\266\275\350{n=\272\207\340\2740t\204;\305\355\221\275\177f\256<~\256\211\273e\327|\273\004\3432=4\313$\275/c\000\275\024\231\317<K#G=1\301\005=\216\324\016\275\034\271\331\274|XO=\235^\336\274\305Q\254<\025\213\016<\277\000\341\273\227 )\273l\014;=a\232\262=\200\212\265:\007\354\314\274(\"\214=\314}\010\275*Y\337\272\374\340)\275\020c>=i\347\244<[\254U=]\310\211\275\262\227\037\275\241,\216\275d\213\214<\367=\010\275\240[`=\244\231\332:U\220>=\347\233,<\361\266\213\273T\014\335\275+\003\017\275%\214\260\275\226\223\271<\301\202\032\274j\246\210\272q >=\275\177\344\275\\e\272;(L\362\275\215.\250\273`\311\336\274u\331\244:=\210\205:\236\312\233\275tI\213<\344\204b\275SJ\244\274\230\302h\275\201\265\010<\034vs\273{\010=\274\210\215F=\022\243\300=\237\367j\275\213\342\256\274\272l\276\273\316\276\355<_\353\177=t\333\035=G\003\227\274\221\277d=\343v\222\273\310P`<\304je\274\330\355\260\275!\246\203\275\261\350\341\274vg\267=\242\337f\275B\352l=\356`\034=\345\023\003\275\201\027\006\274MB\233<Y*6\274\261\337\241=xM\001\274\254\212\254<\305[A=\010\203\237\274]#\265\274\357\316:\274\3411O\274DsV\275\375l@<c6\256=\270Z$<\023\242\275<u:\020\274t\245\034=\254\335\303\274\270\246\371\274\251;\007\275\227T\222\273\311\030\304=\037\024\207\275\213\007\022==\240\214\274\344S\363=Y\364><\332~D\275XP\002=L\360\253=P\310\276\273M\322\224=l\250[=oB\016=\253\224\032=1\227\306\274\316\246b=\277\034\000\275\224nQ<_\031f=\206%T\274g\273f=\223\215\377<\362u\334<\234\343\036=H\207d=\037tR\274u\276/= \376q\275\261\317\221\274\256~\226=\257\350:=Hc\276\275TT\365<Hkr\274`\311\016\275\213\332\347\274\013(d=]\241\034\275\342Oe=\022\313\243\272\321\233$<\'$\371\274\003g\316<r\330k=\005\253\021<9\022\361<=\300\'\274\352\365\250=\275\3362=l\016\226\273\227`f\275P\231\315\275\237\307%<\255,\241\274||o\274\332\332q\275Q[\"=T\022Y=\361z,\274A\036r=\331Y\207\274\245\3330;\037\205\217\275Cn-\275\024\242\277<\235\206\335<&\307x\275N7\254=\300\376\203=\204kw<9\002\307<\350\245\321</\324\256=E)\014={\344\340<\003\013\212\274\010wF\275\351\242x\275x\030X\275\2144\360<\342B\204\274\275/\326<\213\345\341=\214\010\301\274i\005r\274\344;W\273\030\021\007\274\241G\326\272\252\276\217=\02433;R\272\\=\240\000\310\274\325t\206\271\006\241\215=\204\333\010\274r\000N=\325\353?=Je\236<dN$\273\315\350\364<\\\224,<(0\n\272\007\325.=>\314h=qW\006=FS\022=\372\362F=\205D\207\275|{2\275\221\201j\275\272\361\262<\2456\036\275\013\250\314\275B\333`<hq\342;\231\356\301<\366<d\275\302l\324<\031Z\233\275j7\250<\257\033\236;\204\r\203<\347I\032=\0353o=C\271\237\274\037{\261\275\r*_=\201\214\335\274H\262\201\274a&\002\275\263*{=\240\334\\<,h]=\352Y\201\274D\r\274:\215\260\000\274\226\257\275=r\307y\274\217\372\032<6\270\213=8\302\006\274\353\2338;\300\331\032\275[M\307\273\254\301\003=f;\310=A\327\365;3\354\346\272TN\231=\315q\030\275\307\314\326\274\027H%=\324yT\274\237k7=sdX=\346\330\035\274\257\006\233\273\027\020\313:P\335\226<5\277\227\275\332b\247\275\367\276\361<\317\341\226;\021|^=\3745\264<t\362\n\274Qf$\274\007\214\267;G\304\006=\204\341D=\310\377\301\272a\246\236<\224\236,\275G\305@=\251\276\010\274c\217{=\\\272\204\273\027\2726=N\n\034<v\340\211<4\nf\275Ph{\274H\324\010\275\372LB=T\022\262;.A\216=\237\262\313<:\272\362<\346\336\246\274l=\266\274ra8\274|;\t=\251q\331\273\357\211\024<;\313\206\274_\002\275<\246.^=\247@\232<\\\177\252\274\327=\326<\374\372\273\274J\354\336\274E\3326<\336q\'\275\306\004d=\031\320B;W\353s\274I\3624<\017\205\267==\327\020\275\303\264m=\016%*\27554\212<\261\246\263\274\246\304\234\274 \364\234:\331\234O\275%v\261\273\316\376\277<D\233\257;ee\216\275_\327B\275,\343\212\275\212\005\337<\370\324\334<\001B\211=\356\304\375\274\033\211\364<\364\356C\275\230t\313\2752e\177\2740D.\275H\337>=)~\212\274\251rf=U\352\237=~\377\330\274\214`\375<\003\230\'\275\235\215\031\275\1771\213=\235\317\342=\004\026s<\320P\343\274w\344\240\275\341k\005<P!\351\274r\361\261\273b\223\272\274\240\217\200;.\271r\275\213\337:\275\254U\220\274\274\325\310;Z\341W\274\t\231\344<\340b\r\275\276=h\275\205\337\323<F(\014=\253\010\323\275\027\351\2738\314\323\206<\377Q\022\272\006\261\343;\'\206\264=\353\262O\275-\346\276=\003\350\267<u\206_=\223\222\263<\376Ca\275n\265\006\275\345M\027\273\212\n\210=\0232\245\274\222aS<n\246\257\274\321\202\013\275\272\372l\274\351h\242=\222\224M\275W!\220\274|\030\351:\356\224\201\271w\212\275\274Qw\255={2\213\275-f\t\274R\003\353\275\242e\026=I\n`=4\235\301\274D\256h\273\3151X\273K\010\035=\347\315\300\275\217\321\314<\353+-\272\014\330\301<am#<\315(/=\302d\020=(l\264;\254$]<\324\343\300\273S\222\365;\313W\306\2743;5=R\034\260=\373\2576=\233z\251\274\204\226E\275aHF<\355\031\311<\224T\331<\2006\346\273\017J;\273g\366\240\275+H \275\362\213f\273P\237\266=\030N\250<\033.\247\274\247RW\274+\344e=\224\335l<WH\346;\235e\\=U\335H<]\202K\274\264\370\t\274\301\232\t\274\227\257\220\273\343G\260\273/n\255\274\272\256\231;Uu=<S\000\004\271\374\232\034\275\200\026\230\274\347.X\275\336\277\016<[\2655\275{\313\245\275p\014h\274\353\235\006\274\242\240E\272\020\026\357\273My\203=5\035[=p\261\217=E\346\n=\276]\337;\362\365S\275\237\"\017\275\245\267\324<\"\220\037<\337+\211=\010\246r\275wX.\274\355^\254=\305\306G;\310\000\240\275?\213\003<S_\334\273Q\3542\274cS\216=\247\r\2139\206\224]=\010\336\023=\001\202\273\273[\306\023=~\244\013\275\354\020\000\275\257\363s\273\203\321\304<\245\005\350;\360\212\265\274\3556\240\274\030\247\255;\243!\353\273\\\345N<2\'\243<-\330\374;o\010\241\275\320\210?=\263a*\275\371(!<\336\373\255\274P\376e\275\004\006\013\275d\031S:\236\241!\275\034\231\244\275\207\013\243\274\207\357\035=\"X\377\274$@P=\005\316m\275\223\032\354<\327\002\332\273@l\357<\217J\303;\366\336\306<wUB\274\246C\232\274e\363\251\275;\352I\274$G<=\361\216_<&\\Y\274\0312\247\274\017W\226\275v\375\306\2743\310A=\004\210\313<>\226(=I\351\344\273\247?G\275\2171\310;X\023\236\275\305\305\352=\246\307J=\250A\221\273jt\214\273\017\375q\2752?H\273W\254\334\274\241\240\000\275B\254\023=e\\\222<\245\234}=\345\014\303\274\233[\371<]\333@\275#\013\214\275|\262\303\275\205\256\263\274Y\302x=W\370\310;\311\366\237<\377\253W\275\333\256\275<|RU\274trE\275\227\335\361;3\311\216<\347\205\024\275\326\360\277\273\246\355o=\311\330\301\273s\321h<vR\362<^6\205<&\365\272=3\257\235\275G\022\325\267(\247{=<&V<*\177\236<\033]I=\3613h<9ZZ\275\353\024\340\275\3221\215=U<\r\275\274\351\237=\360\320\016\275i\241^\275\\\024\327=\322\355\035\276\271i\320\274\216\3604\275e\030w\274\225i\264<\226\317\207=\n)\300=\350\032O\275\214x=\275`\337\370<\244\325m;\262\216f<=\253\224=\320\252\001=\355\242\322=\"\346&\275 \354\211=VSL\275\333\331\205=\272\322\"\275\217\275\272<B\000f\275\242\316c=>\203\367\273\330g\333\275UWp<\306&\203=\310\306\337:\310\340&\275\003<\273:\367J6<\023\026\024=\014(\023\275N\300\251\272GQ\030<\025\2266\274\246%\364;&!.\274\261\246\213<Du7\275\230\223\225\273\220M\000=\326\276\035=\2740\300\272!Qf;\332\252\226\274\274RH\275\274\263\224<S\377?=\371\245\'\275\0051\212<\031\325\211\2746\345\232<s\253\253\275Z\377\216\275\3134\211=\305\0274<\345\202\'<K\232K\275+\032\337\274\220:\020\275*\323p\274\343\351j\275er-\275\2772\245=\024\246p<yjw=\275\227\253<Qyw=C;\210<\0265\217=\356\242\332\275\231\304\260;\002\016\261==c.\273*9\234=\225\2227=)m+=W.a=\365A\t=I\267W\275\365\224\256\272\020a\306<\n\334\177\275\300n6<\212C_=\254O\356;\202\335\257\273\017\265#=pL\232\274=g\301=*5\217\273\275+\363<g/\237;\275{=\275\204\344\361\274\036\302\034\274\003\002\321\274\2204\214<\344)\367\274\377\337\250<Cp\243\272vu\"\2759\361\026=\361\214D\275 \266\226<\365\017\330\273\376\306\221<\215PC\2759\031\014=\263\037\350\274V`\254\275\365\343\265=|\233\025<\211J\034\275\325\316\376<\324*\326;\016A0\274}\271\216<56B=\247x\212\275TX#=\330\232\334<\337\201k\274\325La=\200\224\021\274\177<c\275P\236|=\'\236k<R\005v\275/\341\205=}\246\177=\311c\267<\367\2763\275\014@?=\244Q\n\275\002\214r\275]`\242\274\372\256z\274\361\317\26693[\013=\354\022\216\275\321\025 \275\370\246\014;W\363[\275\223|\224=\267T1=CC\225=#w\007\275\300wL\275\256\003\320=,M2\274\305\215\214=\357H\205=\227r\345\274\000\275\267=]\006\335\273X\026L=\330\330\t=\276s\271<\023u\212=\2511T<1\250\304\273\331\201X=H\307\010<{\243m\275\207_\201;\374\332\354<6Y\010=~Q\321\275\376R\251\274\020\310\234\275\311\230\214<\261\346v\275J4\252<\362Y\325\274\277*\300=\213S\010=\202\034E=5\225\035\274\276\027\257\273\200O\362:\335\200c\274\350/\255\275\375\237i<!q\'\275U\346\222\274\321\327\361\274\230\007\256<\370v\315=\235\001\236\273\236\025\273\273\376\2403<\207K\331\274\0240v=d\316\230\275O\253&\275\371\353Q\275\026g\006=k\343\320<\201\311\302;\201:\221=\316\262\000\275\362\024\026\274\277,>\275}\352T9\230\030\235<\2625u\275Gt\313\274\2337\275\274Lu\312\273\257}\306\273\032%\352\274\377\353\341=3\274d<\261r\005\274t\237\205=\360\317\r\275^m\272\272\370T\300\273\310\007#\275^kY\275f\014\263\272t;\273\274@\212\264<\254P\200\275\3066\306<\340)\317\274 j3\275\372\261\331\2740`\201\275u\265\037=fI8=\235\020\205<u\351N<\341u\221<\343\2211\275\207\337\003=_{\\<\273\361\256\274P\314w\275w\336\316<b\007@\2750\361\010\274\360XY=p\266q\274\250\004>\275\372\'0;\003\363\211\273\220%\237\274\230\332c=\311\004\233\273\352\2772<\027@\243\2753\366)\275B\221\217\274&\311\002<\232\357\\\275\305\331\250\274\2518r\275\374\247J\274\364\362:\274\3223\353;$\344I\275\274c\245\275\266u\000\275{\034A\274\271\252\213\275z\274\224<&8\001<.\370\340\274\354\020\003\275l\370\000\275\312L\202\275.\211N<\250\031\324=\310n2=\347\214\\=\263\304\264\275\336\272\027=;|?<\224<\"\275\327~\204\274}\254\014=\355{\355<\347\204C=\016c]=\236`?=r\274;\274\036\220\210=H\336\022=a\032\250\275\233\020\321\272\035q\302\274\275;\022\274zz\317\272U\232*<\267\347K=\214\253\345;\265\273Y<o\260\276\273\317\261\205;fW)<\377{\217<\213$\215\274\220H\225\275\353&\024=\210\224.=9\313\305;\300\314\236:\023M\321\2747\323\256=\207r\211\275\232\007\230:F\310\203\275\310!\027=\320\360q\275P\t\243<\222\3309\275\375\354\334\273\237K\n=\214\304\201\275N\205R<\322gA<<\267a\2734\324\372\273\017\237o\275\256\217C<\305\325\345\274\214\264:=r \311<\20696\274\353L\243\275\334\320\211;o\330\251<\254\202\353\274\256~\007<\036\2334=Z\212[\275=\307\241<\rQ\003<\016\3626\275\326~\333;\204\372\324=Z\206\236;\353\001c=\351\353\336<\350k\341<n\253}\275xv\376<]\026\2609g0\n\2758\252#=-\016\027\275Z\224==xL/=\311<8\275\371c\345\274\205\242\207\274\361\030W=,l\253;\322\260e\274\034\324\177\275\332)\243\274\024R\016<\254\274\222\275zDV=\001\017\353\274\0132\276=\326M\317\275\3233\217=\3021\237\274N\366]\273\032\027!=\251\355\344: \337J=A56\275\026{j\275\375[\302;\240{\010\275\367\354\201\275Y\322\243=\344\260\361<?\364\005=H\t\201\275\326\220o;\320\361]\275\317E\031\275\224\316\330\273\200\213\020\274\025!?<t\215\237\275\310K\003\275\n\020E=CH\256</\275\211\275\200\202k=\201\013\017=\377\316\254\275\315\257X=\324\302\206\274$N\345\274\361\271!=\007]\217\275Pnt:\227@\377\272\213p\204\275\362o\026<\351D|\274FIL\275?Mj\273\234\013B<\357(\021\274\352\252\273<\227bS<\366\354C\2747j\226<\226}{\270\247\3202\275\020Mu=\306su\2752\3200\275R\311\261<\020~\300<5\177\247;DB\306=\360\233U\271)>q\275d\216\247=\260Io=\260o9;\365ha=\002\260`\272\245\300:\275c\250\211\275\275\200\335\274\013>i:\217\233\312;T\252\245\274e\243\261\274y\311\220\274\335\374>=\037\320!\275_\340h\274\263\232\344=|\275\201\274\260*\215\275]\034\366\274\205r\004<w\233\243\274\244\\\'=`\343\363\274\341\211z\274\227\202\244\274N\262\303<\225\301\306<\237\347!=/\254~\274~i\026=\344\035U=\326 v\273jF\032\275\205\0160:\013\374\315=\013\002\312;\354\325\256\2740\213\261<V\265\334\273\373\355\270\273\255BV\273\037\'[\2756\013\207=|L)\275\215y\206<\373p\024\274\264\277\022=\231\373\325=\200\331K=\002\024d<\326\nj<\032|V==\341\225\274m\234\311\273\241\371\370;\377\226\024\275<\030\300=C\255\277<\030\323h;\330}\257<\347\235t\275$\234\217=\222\336\002=@\212R=\217\306\326=2rp=\216\321\344\274\204\353\237;\302\214@\275dcd=\313l\253<o\013,\275\021J\244=\3334\023\274\034\363\003\275\r\320\264<\250!d=\002i2\275A \242=\317\235\204\275\252\226\210\275j\036A\275\255\271\007=\346\355\254:\300\000\266\274e\227F\275]\233\255\275\334\216\323\272\326\n\"\275@ZU\275\n\2672\275/\210[=\375i =\373\344\"=\364\264\354<\304\255\"\275\373O\010\273\354\367\247\274\202\014\034\275C\367\006\275e\016\263=F\332\273\274\257x\255=\004\212\027=bx;\275\234\323\002\275de\301<~\213^\274[\032+<F\\\010\275Y\\\275=\224_\226;\016T\221<5l\207\275\360=\r=\343\327\206=\231\3414=\324\334\352\273\201\253\r\275\311R&=\221\241\216=\311\224\323<\272\372\234\274+d\236<61\201\275\202V\365<@\227S;\3353\307\273^\312v<\252o(;\224,\013\275\022\223\031=\2512\332<\246y\326<E\000\262<.f\362<u<^=\345\364\000\275\267({=\214\220\021\275D<\037=;\010Q\274\255\272\213\275z\212E\275\372 \017=\222.#\275\010T\240\274(\230\316;d\244#\275\303*\262\275\035\352z<\246\261e\273\264\212\355\274n\037F=s\333\257\275{\2237\275\021G\217\275Z\r\267\275B\365\310<\372Y\216\275\210\000s;\330\0310;\332\303\221=C\263\302\274\232\325\240\275\206\035\227\274\361.\001\274v\017\022=f\345\203=<$.=\373\"?\275\203\374\330<\262\013\014\274\036Oh\275i!\265\274\364\355\013=K\217\247\275\233e\254;\315\320\277=\000\240\276;\032\221\223\275\311.:\2752\371|:\274\303{\275\363\275\222\274\250\213\262\2747M\351\273[N-\275\024\017\\=L\0069\275g\256\310\275C\365\200\275\260\220&\275\250\262l\275\367\266\202<8\032\331;~^{=\263\007\222\275\030\331\224\274\341\3032=\r!\275;\322\306\027=i\215\000\276\271\252\346\274,\364%=\201\276\201\274\357{\n=\213\352\300\273<hE\273\371\010f\275\t\321\267<\331U\275\274p\024\025\2752\330\325=\254\r\207=\204\231-=O_#\274\254\344\027\275\336\t\002=\3473/<\372\324\203\274-fG<EuT=Ru\320<\346D\233\274\342\226\203;\373\010\t=\033\302:=\316L5\275Q\024\246\274Cp\265<\214*g\275\302\233\332\273\006\256\013\274\300\031w=\364r\010\275\361R\225;\371i\324;V\354\r\274\201\200\207\275O7?=*\270\254\274=\224\236=\037\316\024\275|\341\232;\t<L\275\303\254\200=zD.<\344\003\350\275)cn\274K\317\035\275\177\2010\275\204\023*\275N\310\021<\375\354\222<}\255C\275(<\247=Yy\316<\301\300\261\275\223\035\223\273\320\025*=\226%&=*\375\326\275\230\314\233<>7\261\275\037o\236\274\213\205\325\274\213\tR;\\\327\242<Z\214\352\272\350\"\207\274\0052\001=\327,\224\275v\311\240\273\304[\204=\306\3323\275\235G\323<\213.\332;\371\336\030<\213?&\275\026\212\003\275B\363{<\351V\345<T\252!=g\001*\275\006\260\254=\3356\022\275q\010\206\275\366\303\321\274\225\033\274<\252&\243<=\330#<\272\316#<T\243\372\274\265u4\274\255\346\271\274\026M\202\275@=1<\276\342\252=\342\211u=\254\320-\275\341F\254\274\314\320\255<Z\r\031\275\315A+<\366\350\274\275\027\'\204=D\371\250=C\312J=\343`\203<#\275`\275\243~E\274\226\251\032=\372\222l\275\322\2607\275\255$`=\340\363\017\275\245\320\377\274J\253\334\274\213\373]\275A\203\327<\221\211|\275\177\207\021\275S\356\036\275!k\267\274\306\333\n\275\377\025\313\272\3117\326\274\2478c\275W\255\245=\252=\2759)\314\215\2738\024+=\306\000\205<\031\025W\275\227\317\215;vJl\274U\270\322<\350s\320\274\235\000\304\272\314wW=\026\307(=\027\301\030\275!\363\230\274\236q\341<\243\026\025;\266\253|=\346\357h=1\312W=`! \275\321\264\007<\347\244G\275\177\010\014\275\2727+=\311\2706=\350\333\241=\000\257,=\362\nD=\350Ne\275\036.\243\274\335\327\237<\230\304\320\275\202\274\'\2741\241\023<\010\031n=.\231\360<\226\341\036<B\177\330<\036\314S=\022 \356<7\315X\274^\254!=Wy\277\275\350l\200=\333r\227=\"\344Z\273x\027\023=\275\035g\275\024\010\240\275\27355=\256N\020\275\267\234\247\274\010^\213\275\344\312\321\273{m\256<\206v\230<=a\273<\334j\006\274n\3008\275\314\210\322<\311\211W=2\020V<*\016\030\274\277\226\006\275w\266\213:\301y&=\200 \022=\353\307\267\274\310|\205;e\260\313<~O8\274\301$\230<\016C_=\006Q\"\275[\345\237=\n\026L\275^Ev\274>\021\024\275\273v4\275\263\003\254<\243\251==-v\035=\241\226\251\274\272`\010=\247\333\233<\033\253>\275\204\025\270<\375g`\274<\214\021=\266\367\204<\327-:=oF\231=\212\022 \2758\023\360\2758\224\256\2740\262\375<\377\336\243<\263of\275\245\227\377\274\246\020h<\202\3174\274t\362e\274i=\222<T\242z\274\334\024y\274B\2171\275\354\307%\275\323\023\005=0\311\347<~\231\221\275)s_=|\345\275\274\236\275\354=\034\215\300\273\327\311A=\227R_\275@\321\322;\304\323\304;\304\252\207\275\343\254\374\274\365\376\007<\230p&\275kj\303:j5.=\324\321p<\336L\013<\377,9\275A<$\275\340\246K=t@\226=\234\357<;6\327G\273dXK=\331\342\327\274Y\014\326;\335\342\222<tD\025=KgE=\372\024\230=Ye\326;\271\230&<l-\312<\020\325\202\274\334\t\346<\351\033\217<\025\341K\275\373\215S\275\027\007\250\274\201\262\035=\260\230g\274$\203\237<\312\235\307=y\002\200\274TF$\274\235\347\000>\303\036\245=\222\374\270\275R\2075<\245\000\035=9\354\222=1k\255<\261Q\364<\314\307\261\273\300\246\377<j\264)=\324\326\2079&\016g\274\026\'K\275\304\231\357\2750B\301<,\215\362\274\360\252\213\275\'\220A=\276Q5\275\005\032\324=\030\241\365<T\367\255=\230\214\313\275O\337\226=X\230\331<]z\237\275\315+\'=\245\353-=HN\016=\\A+\274Rnr=9Q\250\275\020?.<h;\273\275\331\362\230\275r\205&\275;\321;<\r\016@=\257H\203<\345\342\243=\001\317^<M\026\272<\250\333N=}\330\202\2743\251\264\274\311Q[\275\370}\367\2748b>=\025H\252;\320\274;=\001\267Y\275\014\301K\275\347sO\275\006\200\246\275C\361\310\274\000Sf<\311\264l\274\224zc\274I\021W\274y\333\027\275f\277\210<\"\036[\275\014b\037={_\357;o\227:<+\332i\275n\272\315<\350\213\367\274\375\3317=\354\2067;\324\374\233=\002\237\306<\0025Q=x\206\241\275h\370\316<;\233X\274zr\261<\\\204\306=\310\245}\275a\254\003<\303\010\000\274P\252\031\274;4\016\2751})=,d\036\275.\303E<m\324\350<a\331-<\256\312\306;\030\272\030\275t\341\260<\252v@\272:f\025\275M\351\371:\031@\263<j\031\254\272\013X\246\275\177h\364<\374V\323\274\350j8<O4\360<\256\'\305\274\261f\346<-S\316<\244f\266\274b\3716=[oU\275EB\251=f\207<\274\326\234\003\275=\341r<\3223\002\276\301\\\276<#u\037=\356\274\"=\017\346\244\274O\225\005\274\007\2678\274T\357\312<\207\215\310\273\236H\322<\233\352\310\274\r\270\200\275\336\314\232<\2009\216\275+\265\215\275\027^\336\274\t}\035\275\033\365T=+l\301\274\\\353{;\361\255\324<\254y\217<\020\025\364\274\010\'U=\rG\215\274\303\336\372<=\017\0179\n\022\231<<\257\024=\335a\031=\035\245\267\274\370 \225=\346Ls<\004m\321<x?\256=\376\250\222\2738\330\315\274\342\017p\275/\316\273\274\264\266&\275V\023\032>\221B\316=m\027\277\274\226\262P\274\254B\017\275\017a\240\274\022\246\245<\006\035\222<vrm<\022C\204\275*\327\202=}\226x\275G\241Y\275\034M1\275\262\350\235\274)\017\031=\221\252m;-\275U=\231>\030\275j\204\363=\232\215\311\274)\226\266<,|.\275\307f2=\234\367E;WX\215\275\2439\356;_\327\330\273\247B\352\274\202qt\275\273S\260\274 \304\322=\360\275\230\274N\255\231<\372\257E<q\366\354<tIA=\024s\001=x\241Y:-\034P\274C1\242<g(\212\273\311\256\014\274!\226\255\274\325\262m\274\321\347\315\275\303t\317=\374\361\307\275]\321\313<p\204\201\275|J8=l\320\030=\261<\343\2740\000\260\275\203\343Z\2746\231\301\274c\355\312;MP\346\274\351g`\273\307_\006\275\026\017\251\275\337\304\340<a\0342\274\243\014\217\273\270\204e\275B\251\271\273\014\203\201=\214\271\022=\260\370,<n\350F=\2668\220\274\233\212\032\274Zo\3379\221\t =\202\033\245;-\304E=\333\023\251=\325\326\361\273\260X8\274\316\260+\275\272\346<=k\203%\274\327\232\000=a%\307=\013\256\361\274\351\247?=\271{\231<\374`\300\274\211\013J\275\212\275\226<ofN\275\370J \275<\020\035=\316\300\307\272\326\022\262\272\300\'\317<F\364\n\275\027\340\007=\233\001\265\274\037<\235<\356\\\362\273\366\tD<\021FV=\'\003\245\274\356\342\002=\374M\234<\"\346J\274\272\317\020\275\327\215\031=w\226\247=E\363b<\000I3\275\3607\352<\366\214g\273\004\375\002\275\302\245\026=\360v;<u\333\276\274\370`\260\273~|\340\274\364\373\363\273r\366\244=\035K\213\274\277Ci=: \312\274y\201I<\372mX\273\005\360\241;\334,y=0\233;<\320\000\360\274w\237\304\275\210 \034=W\020f\275\261\206\302\274[\366\350;\355\261\271\273\337;\204\274\007*\003\275\251(O\275\373\257\243\275 Cs=\036jT<\322N\016\274\027\350\204\273\234@C\275x\273?=3OY\275\247(\207=u\206D\274\322\341\010=\365\213\327\272\327<\026=\n\343\301\275{\003\003\275M\320\224;\244bc=\210E\022=\257\255\374\273\022\262\246<\035\251\227<np4<\323bW\275\007\006\035=A\205\223\274\372\250\350\274\371\350\003=1\336,<N+;=\312\010v;\334F\220=Q\342\032<\327\243\225;8K\244\274\267\n\206\2740o\026<\002\314\021<T\300,=\377Y\033=\260\026n<*\010\244\275\330\031\252\274\217\255\224\275&\307\002>\263\006o\275\250o\375<[Y\020<\372C\264\273\377C\"=z\325u\275wA\200=\2359\207;\001\260\333\273\217~\216<h\3723\275\367\005\270\275{<n<\367b\270<\373l\250\275\313\273\262<\304\3079<\211\271\024\275)\314\\\275\247\271\210=\365\257\375\273\3003\201\273\214=[<\374\273\251\275\341WE=v\212\'\274*\251\357;\322\327\227\274\000\362\017=\372;\031\274\343\\\364\273\315\255M\274;\371R\275L+d=\323\330\202\273f\250\\=\237\210\003\275M\222\352\274\224]\313\274\001\320\204\274\377\354\264<c\336\025=\014\326^<E\013\274\273\035xa=dA\374:\274\244\275\274\342h{=]\357\271<\2744\260<\233Og<\272be\273Xw\030\274\200\366\375\274\n:\217=\271\251X=\252\267u=\n\3062=\342\000\013\275t\224c=\340\343z=\345U$\274\341\260\347\274XK\301\274LQ\001\275x\275N=\361\356\211;\235\357\335<\246\020?<:\210\327;x\357^<\001?\277<\323}K=\362\030\211=\204\317B\272~\371\224<Q\257q<t\242\245\274\233\340-\275\377ub\275\213\337\032=\007\207\237=\330\327\267=\321\340r\274\033\340\007\275\242m#=\335\004\234\275s\254-<\020\2256=\341\205O=\246\353\273<{\014}\272\317\375x\274\216\365B\275=\302)=\272$\014\275[\347\231<\301\226\205\275\344\004)\275{\343<<.\t\210\275;{\344:\031<H\275\332.y\275\362\354H\273g\355\036\273\366\026\236=r\273\312\275\352\226s=\355\327D\275w\\\251<\340\nq\275k\020v\275C\337G\275\365\r\242=\346\024c=\252\235\252=\327\345N\274\323\311\357<=\220\345<\223\006\217<\253e*<2\026\212\274\270I\211\275\224\361N\275v\337k=\274+\224\274#+\352\274v{\203\275\030~\362;92N\274@/\311<>F\237=\277\201X\274\213\302y\2750\204\215=]\032W=]^\325=\345*v\275\207>t<\220\024\001\275oF\334<\017\337\t=\262U\222<[I5=\016\2449=\257~D\275\315%\341\274Y\230\025\275\364\221;\275\362\367\342:#\003\344\274Y\320\212=\263\211\302\273\3474$\274\"\345\205\274\335FE\275\337]\002=\"9M=\350\n\016<o\275\227\275\233kr\275\322\004\337\273\363,\003;\346\215R\274\274\331\203=o\010\276\273fl\300;\262\246\327<\3465\206\275\302\227@;m\356\375\274J\377K\275]`\356<N\251\227=\200\263\200=\013L\270\275\214\337\236\274\353\273Q<\214\245Q\275#ET=X\273R\275\002\376\001>\363\024\331<\033HJ\275\335\007&=\362v\373<\0334\312\2749\320\026\274\201\205!=\355\300o\275\231j5=\376%+\275;\220U\275S\215\214\274\177\3139<\316&\250<\220\224\212=0\256\364<&q>\275\017b\332<\245\234\t<L\234\313<\375\271S\275\3759-;\303\014\344<\007k\014\275,\346\033=\343\352\242\275U\313<<\\3\235:L y\275\006^\322<\233\236c\275B_I=ju\177\275a\235R=f^t<\314\344]=\264\313\321\274W\002\036\275\"\366\276\274\002\245\013\274\036,\206\2748\322\207\274\261\360\331\275\332\006\312\274\362|n=?\221=\275N\213\336<\2429\251\275\225\255[<R\312?<\346\001%=o\314f:\304\017\233\275\221\362\335\274\035^Y\274@S\243<\334\200\231\274\226\021\023\275[u\273\274CKk=\000us=\323h5=.D\263\274\024\214\357\273\375\376\231\275\326[\337<y\rY\275\245\207F\274\006`R\275\262x\256\274@\305\266=G\321\315\274dvi\274\177\332H\275\365GI\275\343\261y\275\007\344\272=\275\330\251=\253V\005\274\020\323\312<\232ha=*\032j<r\341\'=n\257\341\274\230\273\017\275\324\305\301\274Y,\227\2757!\034\275\014\001\322<d\322;=\351\005o\275s\217\306<\326@\346=\360\036i\272\235\214\271<\303u\263\273{\002<<\332\t\204<u\365\022<\315\357\267;\242\252S\275J\310\007\275\276\261r<\013Y\255\274\201\303\006; +\017=\207\025#=lr\254\274\216\241/=/\315&\273\231\350\360\274\031\351\033\274^O\336\274g\272\213<9\'\016=\263\340q=\204l\235\275\233\366\353\274\000\244\322\273\336V\347\273\333\013\323=$N\227\275A=\245;n\026^<;%?=\272\275\265\274\260\274\003;\n\344~=\217\366\033=\374rs\275\312\330&<\261\201\t\275\245\205M=\373\032\'=#l!;\2723\202=\336U\034<T\210\017\275\217\010\215<=`\032\275\207F\343<\265y.<\207\327\223<\350\233\233<q\350\374\274\027iw=\346\013z=\003\376\233;\3417\r\275g\274\263=\265\375\257<\342\364J\275\306@\243\275R\266\025\273f\010\255\275w\3422=kd:=\367a\207<\220\225A=\203\315\317\274a3=\275\010u\203\275[5\006\275\274\352\200\275 x#\274*\031V\275J\340\244=)\360q=P\367\233:\013\'\252<\326/.\275\351L4\275\003\233\013=\371\024Q\275\004+\017\2753\365a\275z$\364\273\337\004%\275A\374\337<\276\004\241\274\370\242\211<\214H\n=1\370}=\274\232\352\274N\016\305;\tW\203\275l\"\t\274\013\276C\27588O=\232\215 <_\272\227<\365\023T\273\377\224,=\311\220\332\274\264\"\200=\357\234\243<\356\203\267<b\320k\275b@z\274\344\307\246\274\n\003F=\375\204V\274\007\316\254\274\006k\273\274\024\022x\274\204\300f\275n\354\260=K\230\022<\223q$\275\323M*\275f\336A\275\367J,=sd\037\275\3123\365\272\224\342\253\274\273Y\206<-\347\005\275\030\356\272<\335#X\275\372\205+<:v\220;M\n\r\275\225\364\325\273\020u\017\275\250\254\357<\336f\331;\036s\226=8\3668\275\337\243\262\272\351Qu:\272\014\022\275\305=\217=\035\020\241<\321\000y\275\003\347$:w\370\013\275\000\200\233=s\017\257\274\247i\206\275\266\250\371<-;\201=!_\323<-\302K\275n\372.=(\221>=>M6=Z\317\205\275\215\3706\275\353v}\275I\177\256=0{\311=\234N\327\274\352D!\276NL\262=7\331\314\274\023\3766=\306\367\036=\220\355\327\274\206B\323\274\316\2111\275fC\032=]M\333<\240d\342\274In\342\274\253^\213=v\330\246\274\257\263\026\275\330*\253<\245\303\200\272\n2\206\275\321\370\277=\206(\000\275\006q\217\274ge\270\274\317h\266\275\375\334\227:\363\362\372=[k#\275p\201\201\274 \010%\275\031\340\210;x\213`;)\004\016\275\267\343\242<\002\362\236<w\302\214=\376}\n\275\263\371\022\275*\327]\275\237R\266\274\000P\037=\2054\321\274\231\302M\275\213\256\377\274\323\361\353<\023\334/\275\022\033\r\275\344\253\201\273\030\321b=\243\021\312\274D9\r=\335\377q\274\377/\007\273\034\017\337;T@\033\275\013\274\361;`\367\341;\312\376O\2754N\212\275\346\326\271=~\365\024<\r\320\302<\223G~=\003k\033\275\rB\334<\035\032\357\274\372\244<\274\335T\000<\006s\260\274W\273\227\274\261\356\247\2756\302o\275x\206\373<.7\371\2741\213;<H\002\005=\\aZ\275\010\022@;\226\231\231=\375\244\373<I\320j<\203\366\306;\220C\377\274\014\362\"<\021\236\177\275~\305I\275\312$\375<\302\027E\273\352i\n\275\300\314\270\274\377\367\352<%\321\317<\361\357\211\274\231Q\321<\250\226p\275\243\372\326\274\010J\200;\345j\034<\014\331?\275\314TW\274\245p\271\274\350\321\262\274\3217\215=*\262\353<\r\273~<\310C\033=\241sg<d\217\237\274\276\030\244;\223]\260\274K\013\315\275D\023N=\t\272\242\275\334\312\313<\230\022D\273o\247O=\023\177\274=\010\373\"\273\370\332C\275\271E\005=\332\217V<\320\347\207\275\210\312\'\275\211\301\243;0\311\316<q\352\226\275c\341}\274\301\356\353\275\215\036=\275\305r\037=\300\337\256\274\250\272(;\264\004\021\275\263\241\207\275\304\370\312\273\250\357\206\274\211t\376\274j<\343\274B\3050\274\272\035F<\2171\224\274\301\331\270\274\3605z=\033R\242=\036\326\357\274\3015\030<\330\353\236=\347\333\211\271q\245\215\274\312\331:\275\\V-\275H$|\275{r\271:\273\216\215\273\221>^=\213\356\245;1a\007\275t\206-<q>\217=r\311\204=\231\270\307\273\022\270\232=,Iu\275CB\357\273\212\212\3039=\356\337\273BVo\2744\251J\275_\275\253=&\332\345\274\323\177$\274\341L\315=\322\376\255\274\302\250\206\275\346\233\311\275\260\342\312;G)\310\275`\014\216\275\215\021\210\275\362\276u=\310\266\260\275p6\262<\201z\325=3$\216:\276\037\024\275\356\366\232=\005\2778=\235\243\224<\201\341-=\324\257%\275\227\376\205\274\321\224 =\2566\217=E\237H=\312\375\221<\017\355b\274\240\303\000\274\377\":<\330\302\260:y\227\266;l\375\317\274\223M\227\275\003\002\213=\320\262\227;\302\342N=\267m\224=\'\200\311\272F8\202=\3603\005=\004r\343\274\2658\027\274\367\t\222=\311K\"<\037u~\275\275\024\212=\313s\302\274h\354X=\262\211\t\275\016nh\274\236\323C=\324\334\017;d\246\020=\242\230\026\275\035/\323\274{\356\031\275\336\ni=\255Eb=\212=\005=\255\236\354<\315\306\365\275\2235_<`\333\030\275\250\213\037=Al\201\275sU\003=Q\327$\275\345\231\252\274\345\242\271<r$\265\274\344\301\025\275<\375\364<{\242\006\275[\300\373\273\220\341\231=\355\325\023<=\004\211:qB\371<\303\323\250<\217}\375<5/\232=o\300\263<&\241e\274\206\345\036=\027\355\345\274\360j8<\303\355\252\274\270V\034<\315G\315\274\030\010\331\275 \225p\275\373E\271<\363\005\220\275\205\004\023\275\266\320\031<DH\245\273\316Y9<2D\350\274<\311@\275\234\252i\274%\0133=\021@\237<\271@\337\274\336\336\261<\215\365\362\274\213\347\035=\216\325N=\25693\275$K\036<-\177o\274\nG\017\275!\221\023=\362\346V\275\3524\232\274@\350>=\331C+\274\235\376\234\274Z\341\227<\250z:<\306\317\001=Xm\032<g\332\236\271;\253u\275\215\370[\275F\357\204\275\002\030S==\n\224\275d\217\232=.&\247=\275\317\244<\276\002\306\274\330\010\243<s\026\212=3\320\276\275\022\007\215<\333\321C\274%\307\243:\343\3550\274\302\370\312<\207\252\311\275\016\310\025=\tW\t=J\316\240=\036\313H=\206\342@\274\377P\004=+\231\244\274\372\222\227\274\235X\252\274\205\034\362<\006\370\202<\007P\000\276|\202\315<g\237\222<\235\363=<\024\342N=\'g(\272~\021=\275!i\271<-\247\325<RPD=LX\037\274\236\341N\272\302\3034\271<+\237=\203\272\034=}\3067\272\243l\327;\273\372\251\274y\225\032\273\331]]=\010\374\311<[M\033;_\244V=\024I\'=!\212\336:i\302\252\272\367\215c\275\235\225\315\274W<e<a\353\006=\232\2663\275Ud*=\306G\024\275e\325`=\024\327\246\274U\337\322\273\216t\r=,\226\241<H\321I\275\326\235\005=\216\305\274\273\2404\033\274\263~\013\275\003\0029=\n\273:=t\251\257\274\251U\2579\341\r\303\273\214l\311\273\340\335\374\274=\266\366<\323}\002=n\245\034\273;\234\316;6\256\216<\244\353\031=\253\275\205\274W\003\2077\277b\177=\017\253\255<\037\344\264\275Y{$\275K\355o<\2168\317<\332\237O\275f5\000\275[,}<\255&f<f\326B<\210Fm\2745\352R\275\034 P\272_\017\332\275H\214\223\274\034\177\220<0p\237=eh\222<.\312P;\326ap<q\230<\2741\001\200<_\227\020=K\210\312\275H\021\217<T\367\304\274HG\311\274\271S`=b\206\246\273y4\305\273\036N\263=M\2240=!\337\204=\207=\241<>H\212=\016:\343;\277\210.<M\203\004=\377q\000\275c\365\026=\234\362\226\275e\215\274;\373\037E\275\313\310\332<\033\234\341\274\346\002\300<.\020I=\261\205t\272\247\177d\275\022d\202\275\'\362\207\2736\341\317\274\247w\350<\002P\201\275\\\314(=\017\254\332\2728\033]<[\014\222\2753\307+=\277*|=\350`Z=\360\254\013<\002\321\215=Y\331R=#\244\345;\276\201\204\275\277\315\237<B\017\371=\277N\276\274\247\264\265\274\3621\226\275w75<G\010L\275,HO\275\260\225z\273\360>\235\274A\023\237\275\036\3522=\203\0037=K\333l=v\224\363<\264*C<Xs\204=\241\266\352\272\245\"\360\274m\214%=\037<\276\274\242\003\351\274tZ\220=\332\324\002=e`R\275Ti\217\2758\'\010=2Zf\275[p~=\307C@=\004\234\240\275\2062\264\273K\271\215\275\272\022\366=\210\'\226=\315\215\253\273\310\370\214=\"\206\017\275\224f\006=l\360\314\274\237cE<\210r\222\274\025-\306<\356\224\221=\330[\316;dD\"=UC\346<\025\331M\275\'\343N<\373\311u\275y\311C\275\214 ^<\014w\376;\360}\211\274\033\005\366;|\320\346\274\242\007\036\274R\366\210=\222B>;\003\3750\274\333~\035\274\314G#=\365\330\207\275Q\201\025=g\231><\271\016\014\272\273c\357\274\021a\214\274\276-\321\274\006Hj\275\376\276k\273\000\316\027\275$U\373<V\364\303<!\314\230\274\216\246\253\274G+<\274+7\243\275\257\207.\2748\251\024\275\025*\273\275Aps=\013\346z=]\014\213=\205w\342=\2669\360;\250\201\003<Pr\317\274\330\225}\274/\227g\274\243\024\360;\003\204[=\022b\026<m\177M=\201\230\216<2\242!\274\260\231\360;\322\312=\275\000\256H=\344\211\036=\030s\355<\0000&<I\376R=\364\204\341\274\007\261\224<qq\305=o\325s<\3659;\275n\252(\275\030\200\305=\253Yp\275\273!\203\275\276J\200=\0169)\275\025\363U=5\2473\274Q\243 \272\230\352\2359\224\223]\275J\034j=|\315\260\274/?\020=D\270\256=\316\001:\275\202\364X=N\215\244<\321\230\352<g\006\273\274\320\366\006<^0\362<\rE\347\275\315\275\222=\035\273\014\275\tB\203<\266v\266<\237@\037=V;v=\372\255\333<.n\362=%\377\363\272\237\260\215<=\300B\274\245\226\037<\330I9;\251\222\201=\320\013\263<\0257==\022\335e=f\241:<o\212\357<\350a\227\274-\016\224=L8w\275.7\357\275\025\261h\275P\344a\275.\230\247<RG\374\274\242\224\337=\217\306\255<\207.?\275\007\266\025\275\013\265\354<\232\021D\275\001\345\215<\354\3109\275\245\210\221\275\364\347\200\274\017\001\255\273`\213\266\274y\n\037\275\032\016\206\274\036\364\270\275\217\270\310\274p\250Z\275\351\024\036=\023\203D=n\360\212\274W\200v=\356\253s<\251\\\304\274sd\237\275\367\264\033\275Sh\213\275\261\n\351\274\"Y\201=\243\222]\273\271\247\3419\236\3747<\375\200\017\275]N=\275\"\024\307\273\235\002\374\274\255p\230\274:+\014\275\260\323\224\275(\257y\275\231/\376\274\235/\026\275\342\204\202=:\324\037\2759\031\227\275\346\220\200=\333l\225=\177\224\316\273\351\242\036\2756#\362\2746%d=2\265\351<\326,\017\276_\327\000\274\270?\344\273\222d\001\274S\311]=x#\335<?\3134<\3021\205\272\215\310H=\315\007\017=\025S\214<\353\246\357;D\003p\274z,\303\275\215\"3<\251uJ;oL\201<?\314\266\275\r=\020\274\363v\356<S\021\245;\305\3476:B\034\316;\267\354\212=\342\246\215\272s\303\217\274\260\200H=\276Ig\275\362\372\217\273\336\200\356<\001\304\323<|\302r=E\347\216\275Z\215\340\274\035\\#=\225-v;m\346\231=Z\275\215\275\355\206\256<\rb2\274PN@=\205\246\232\275\325\267\035\273\257\310,=T\214\305;\346\203\214\273\215\375D\274\347\345\036\2757}j=\213\241H\275f\371\013=\336f\303\274l\311\307\274zd\216\275\024\"0\275\203^\354\273\205\365+=\0374\037<2\372|<\374\020\201<\256\255\356\2756\215P\274\301c\344\270yB\217\271\321\301\242<76\004=4Y\036\275)\035\261\273u.\313<\350\301\003>t\304\265=\317\303\035;\247\206\326<\224\363I\275\362\221H\275~\017\263\274\301r:=Bg\377;K\315\036=2\233\314\274y;\356\2741\016\256\274\217\214s\275\275\201\031\275V\357M\274M\2635\274\355\232\036=U\3469\275k\315\276<mD\304;\220\026\361\273|\031n\274\\\211C\275\001\360\227<1S&<hr\200=\031!E\275\252Z\363\274\344<\330\275\032[G\275+\220g\275\230)\344<\364\010\217=\344\372\0229\371\217\240\272\277%\226\275\337\2228\273\205\306\014\274\337;\363\274\230;\300\274\tv=<\304\343\035\275\272@c\274\257\230\206=nT\231=\363\030;<N\350\021\275\300\206\355\275F5\360\274\2767\346<\007\275S=\251\270\330\274\330\241\214<`\3314=\365\314D=\300\364\025=\024\240\207<\220\276\202<o\275\030\274P\201)\275\312\255\360<%\350\027=\003\022\242\275\272o\235;x\010\374\274\036VM\275\330\371\'=\305&y\275\202\307\036\275\024\026{\275\t\366\275=k\000\360=\027\330?\275\"\003~\275\rd\210<\346\3018\275-ZF\275\217\024>\275\n\212H\275\242~\005\272%d\374\274\377\217\254\274\374\263\t\274\010\322\304\272-1\210\275\221\377\020\2746\354&\275\'y\237\275J\254\207=\247\264\"=\335\366\260=\014\\_=\333e\266<\317\275\236<\227\306}\275Jt\016<\354\\\273;\354\\\321\273JY\307\275\322TC\271\300\227\023\275\\\202\350;wH\334\274x!\263\275\301%\200<\370zZ=\345)e=\240\321\013\275i<\021\275\2148\317<a$j=\265E\246<{\356W\275<\374,=\272X\253<\240\001\n\275\026\355\r=\256S5=\336\201d\275|\251\216=\257\241\021<\016\312\242=#\256\351<\340\264\334<J\247\350\274\006\330Y\275\351\222T\274\"\233\351<\311\243\300\274\320\007\371:^\305\r=\0171n=\213fg=\337 \312\274\303f\304\274\265\'\220\274\016\372}=\244\366\252\274e \267\275\301\037\321\274Z\003\361\274NX\0319{_\226=\350\031\306<\371\202\310<pF\036=\013\251\033=\352\"8=%zo=\257\253\352\274\327Q\220\274\017\202\333=\233\334\356\273Ov\004=}\233x\275\327_3=s}\260\275\365zE\275\366X7=\322\361\203=.\276\253=\n\310\234<\350\203O<\367\327\363\274=Z\301\274\305\261I=sxU\275\365\314\356;\006\274\013=\340s\332<\363Z\234;\310\017\262=\353`\242<\223?^\273\356\223 \274O\231\233=\370\3017=!\273\341\274\032!\370;i\0322=r\000\353\273fj\000\275\341Z\352\274D\245\"\274t&/<\n\302?=\t\225\201<\206h,\275!\333\300<\261\206%\275\341\r\242\274\022SA=\376\272\345\274\333\277\201\275W\310H\273\022\311%\274\223\375E=\200\021\322;\277\"\365\274\302;\022=\203\216B:\005\365V\275m\r\276=\350\377\036\275\252\032\204=#\0347=$\266M\275=f\260=\021a\261=\01765\274\355\210\032\274kj\370\274*\222\026\275\314\003\275<\316\207c=\014\340Y\275\311\227\374\274\352\265T<x\2553<\271\213#\275\374\036\266\275\2702\024<\221\251\203<|\0358\274|\324\264;\017]\330\274=eb=\376\372S=@\036t=\250\331\267\275\3455\366\273gJ\024\275\"\230\265\274\332\234F=\270T\027=\2542\301\273\016\005>=3\324\300\271K\030\324<\207\3711=\364\375\031=\240\034\270\275]\177\373\274\177t\332;\204\340\264<C[\276\274\\\332f\2752MD\275\205\t\365\274]\307\222<\226\253><!\327\004=\000\312>\275\210\372\324\2736}n\274\243\225\001\274m\253\014\275\364\202\372\274y\\\001=w\266\320\274Ry\'=\214:*\275\330\342\232<Yj\263\275\013\272@<nl+\275\3031\367<E\"P\275\013\214\231=\267\236\312\275D\235\027<\215?\016<5Q\231=\016h\304=\202\002i=\314\251!=\263T\205=%Z\217<Z\"\244\274u\231:<\"V\330<pJ\021\275CE\205;\'\277(<\235BI\275a>\254\275\315j\312\274\260\315\270\275\340\272\346=\300\300\'=\205\276\212=\304\316\246=\357\010\024=CE\360\274\341IR\274=\327P\275\233\230x\275k/\014\275%\202\250<\342\256X\274\334\275(=\300\261\250\275\261\323\007\275\352U\022=^i[\274\245\234\034\275\321.\313\274\301\241\211\274\326\3778=_93=\370\224\'\275u\225a<\200V\034=\336s\332<\354\275\220<\010\n\273\273\242#\020<\216\340@=]]\r\275\306\'\247<emH=\352\014`=\004\372\002=[j\340\275\211\364\246<,t\300\275\201\2675\274M\322\222<y\235\204<\205\251Z=&\213$\275\036\202\324\275<3\274;,\231:\275\364^\330;\227\321\216<m\024\315\2730\337\026=\t[\325\274b\266g\275\'xk\275\311\036\205=\377k/<\031\026\223=t\233\232<\267V!=\221\354\341\274\022\266\263\274\206\210y\275V(\030\275H\371\265\2756&\365;j\336\306<\260\017\022=\021\002\231=i\365\223\274\023\230\243\275\370\033\300\274\352\336\220=rF\213\275\211\\\030=\027J\'=\302\337\353\275\n\010\341\273\214\r\002=\022\366\213\274\214\210\200\275CO\255<\346\320\314\273\245]*=\014n\001=D4\250\275$\203?=\325\236\202=\003I\352\273\0330\002\273\200t\202<\246j\342<jq\205\275l\3371<\233\t\207\274\305\235\266\270\252\212\234\273*\\U\275\200\366\317<\344\261`:W\274\267;\037V\000\275=:\243=\016~b<\320\312\336\274\376\272\342<h}%\275f\222X=\252i\'\272\355\034B<:\333u=\351?\241:z\n]\275\346O\211\275\317k\226<\234V\324=H\240J=2\323\321;X\374\332\273\262Q\214<\366\000\005\274@\337n=<&R=W\213\n\275\030\233s<,e.<\374Y\373< \241x\275d\311h\274\023O\321\273m\351\236\274\014\221\304\275\230o\n:\234`R\274:h_\2752Y4\274\372\222N=t\343\245<\031zY;\2431j=\257|\2319\357)\245<\255~G;\252\270\205\275n\264\207\273\243:\033\275=\365\257:\262\264\001\275\334]\324<\266\005\316\274\360f\355\273\300\230\\;\2455\331\271.\030\253=\375\355\332\274\376\027\007=\006\205v= \241\025=\n\010\034<\223\\\204=\317\035\006<\264\007\n\274\301\177\337<\264&0=ow\250\275\214J\210=\336\002\242<\362$\256<\030$\000=3T\215<\357^\006=\306I\006=\014\264\356=-\323\275<x\3517<\243\365\362\274\212\316\373\274\027i\267\273Vm{=2\375\341\274\304k\003\274\335\0071<\325\310G\274S\332\202\275\013\304\346;Q{m\273\314\241\372;\362\014\365\274Y\\\230=^(_<S\024@\275\222O\212\2752\035\342\274\354\363\035=\362\274/\275u\276\247<oY\340=$\2044\273\3366@=b\3146=\332(\277<Ghi\275y\242\365;\322x\270\272T\214\376\273\0173\035=\023\305\210=\217L\353\274\033\010)=4Py\274\244\031\022\275\031\320s\275%,\320\274LQ\215\275\332\253V\275\341\306\377<\204\311\031\271\247\311\336\274\271\034\300<\200\245h=\230\313\323\274\016\020\210\274\332\213\252=\035\251\201<K\003\025<\333\215q=7l+=\221?\177\275\25577\275\271,\216=A\017\t<\325\273\013\275\325J\277<\234\003\333=\237\022\016\275\337?\363;I\353\005=(\201\275\274\341\222%=k\221\273<\270\233\222<Z\355d=#\330\227<\367\363\002=\220\000\031\274~\3442\275v\270t=\270\335B\274\0362\215\273\346\037.=i\306\265;v\177\300\274\354]\207\275\273M\006\275\211\303\027\274.\037\227\274R\265\034<\255\023\256\275\023/+\274\255\260\337<B\271\332\274p[\227<|\033\201\275\311\347\264\274\013\214\205\275\003\r\352\274N{\026\274l\250\266\274\005\241\t= )\223\274\360TZ=\265\334)\275\201s\320<\331\025\013==\217/\275,\321[\273B\222\211=\336\277\214\275\362G\203<`\245_\275\031\3226<\367\227*=Z\310\224:\376\316\203\274\\*\021\274\310o\374\274\277C\017=Dh\346\275\303\231\234\273\220\274\231<\"e\261=\303\317\225\274Z\330\311\272\361u\013\272Ku\274<\223\372\252<\264q\r\275D\333+<\275\306\344\274X\r\277\274\023 \002=^\245\232=\017\245\211<t\360\213=p8Z\275\361\307\"\275\341\364H\2742\\\201\274\214\212K;v7\217\275A\265?\274\366^\235<i\342\273\274\'LK\274\206\332:\275(\004\256\275\256\202,<\0019\017==\225\005\274\303\303 \275\304ls=Vu\013=<UA=:\013i=\244\033\010\274\357u\253\274\032\236S=\255\374\215\275\026\343\020;\246\2773=\256]\031\273\261\305\275<\355\363J\274\326\326I\274\251wH=\017B7\275y\035\204=\254!\025\274\0314a\2751\371\274<\364\035\016\275\376\265o=\262\'\244\274\330 \302=\200\317h<V\271M=\255\355\031\274%\035\340\274\024\333\016<\335\232\221\275\336\001S\275^O]\274\224\346\224;\317\205\t\275\014\006\306;?\201\261<\260CY\274O\271\314;\200\330\237=/\362\332<\2719\'=\213$\367\274\222\205\t\275\337\326\337<\r\006.=f\231\036<\224/,\274^\026g<\314\245\225<\212x\327=\t*\363<\026\245\225<b\222\377;M\3421\275k\024\356\274\361ju\275\272\274\n=\227\334$<\371\320\244<\227/T\274;\245\316\275\234\342\026<x\237\352\274\007\3679=\221&\267<\251\014\333<\214\020b\275\340\317\260<\0378\354\273\377\204I\274E\201\005=\225\370i\275X\3265<\334\016f\273{M>\274wz\224<\351\215\322;G\217\200=\263\235]\272a\325\003\275I\323\313\274$\037O9%P\266=\306\014\217\271\020\353\312<v\226U=6\307\276< \222S=\314\312\223<3\330\"\275?CR=\230\221\274<\233I\277\274/e\224;\001|\234<\372\345n=\322\321?\274\030\r\013=\2278\212\275\036\311<\273\r\031\t\276vD\017\275\236.\304<\035\275\321=:Q\324<\343T4=\027:!<\024\\\216\274q\205\271\274\306}\344:,(\274\273\351\004.=\317w\303\274\222HY=>\363w\275\004E\315\274}]\220\275\222\014\202=\303\006\275\274&W];\0162\267\272\210jY=*r\034\275f\350\t\275\310\264\303<{\265\230=\206&M<\2356y;\334\315\306\274\372\213t=\252\037=\275If\323=\036ap=\372\214\205\274\370R\020=\t\243\010\274\337\214\324<qG\265\275[X\352<\344\363\275;e\263;<\360\\\253\273`dp\275\222F=\275g\340\314;\241\335\255\273I\026\021\275\370n\271=\262p\352\275I\002*\273\363J\232\275\316q\"=\006\231\311<}\262\246\275\365\027\222\275\221\003\360=!Y\035\275G\345\243=\353\016\257\274\204\035f=\323\311\302\273\363\341E\275\nj)\274\254\262r\275\221\342\005\276Pd\004=_\2675=b\342\307<rDl;\364\210\367<k\360\214\274\236\220\260=\306S$;\334\231z=\237\267g<\212\313\207=&e\036=\212[\313;z\252\236<\233\301\307\274n\362 \274\334{\034=\212\263\231\275\247\312\2359\357\204\210:\324\213w\274\300\200\203<\364\006\020\275?\254e=r\311U<\0014\036\275\024\236\253\273Uo\224=5\334\"\275\342A\331<H\2608\275\245\3445\275>\000\353\274\226\301 \275\311\243\217=@\363;<?\237H<\025\234E\273\306<\316<\261V\251\275M~\325\2742D\263<N\321\204\275\246\263W<\"\202\267<\331\375\310\274\256c\312\2740\266\247=1B\361\274\265\215\375\275\006\203\262\274Z\237\320\274\277\204\243\274\331\271\000\273\200\2475=\025Q\315\274\361g\253<\025q)\274t\244D=\257k\312\2756\"\337<\024\327\325\275m\220\347<;\302\177=@\261\320<\235\303U=\\\013\"=i\231\300;\"\277\304=\262\204\321\274\233\310\336< \327\200\275\233\335\327<XX9=\202\035:\2756W\344\273\300\313T\274\272=\243==\316\371\274\035\364k\274|\221\275=\275KX=\022\2020\275\2265\326;w\235\274\275\306su=\001d6\275\304y\022\275\240\362\230<\342\337d=9\n\232\275\364\030\320<\013\216\333\274s\034\203=\035\316\034\274\033s\221<\321\324X<\332\235\036;v\000\354\275]\366@\275\357\273O=\306\377\022\274\223\367\234<\213\223\230\2752n\203<rw\240<\275\373\224=1kc\275G\2663<\371\242\272<?lo=Y\273\375<\204d\023\275V\253g<F|\256<\311\331^\2755HP;\233X\250=\212\013(\275\262\033\340\2731b\022=\216\214\216\275ZR/=\322\253><K\337\335\274\265\220\222\275_\327a;\010\341W<\326H\r=\265\233\264=\210\356\200\275iS\031=\226Q\204=\304<n\274\376\224\004=\247G\347<\350\233\203<\022#\261;\274\035\307=*\016\245<\364\367\212=B\220\264<\033\214\276=B\205f\275b\013I;HL\226\275i`\365;(\303E=\353\276|\275#\315\363<\363\000R\274\033x\022=\2725\307</\377\261\274\260Z\350\274\351o\345\273L\273-<\211\020\n\275A\220\217=M\225\377\274++H\275\277\256\266:U\013\223\275\317\224a=\236ad\275\310\360M=4\347,=hKS\274R\032\230=\t\004:\275\214k%=\360\226G\275\233Y\010<\374\002.=l\014\267\274bm\263=\255*Y=Z~d\275\301\300\372<\306\013\200=\274\252\265\274;\351\230\274D\270,<m\212u=\334\334.\275 m\226=\021\240)=\2340p\273\315>\272\274\027B\226=\246~\204\274\375\366\326<!?\215=\255\3061=\034~j=\354l\361<\337\206\305<(\346V\275\217&a\275O\027\257\275W`9\275E\306\237<\327\024\250\274\017\r\020\275A\001\341\274\355\231X=\177\022\026=\334\326_<\240\235K<\034\337H=\027\246\340\274\360\317\267\274\250\345\031<t\021\327\272\267\342\270\274\033\333\027=\030\340r=\262.,;r\006\201;&\017A\275\307D=\275;c\352\274k*\001\275\220\236\005=\000U\311\274\216\n\230\275\265U\317;)\310\227\274\330\304\236\274\277K\035\274\000\321\245\275\217\231\002\275K,\257\274\215mq\274)\340\346;\267\327\356\2748aO=\301\260\331\275\230\032\004\274\3468\215\2755\266\315\274h\317\267;\264\016\246\274\363Y\325\273\371\233V\275\301Kl=9\304\271<\321\036\324=\235\2565=_\3624\275\032Es\274\016G\324<\341\252\333\274_\300\006\274Df\271<\"q\014=\226.\225;\307\3068=y\rf\274\261+\022\275\201XI<\006R\241\274(r =\270\002\'\275\342c!\274\342@t=\335.\000<\007\000m9_\363S=\346\362\275:D\237\240\273\003\370N\273&\243\256\274\332\300w\275\031\261\240\275|I\210<!J\207=~\254\376;&\305\267=$\260\266<y\036!=\026p?\274`\264\024\275\nSX9\260g\306\273M\310&\275 \242\257<\2051!<\021p\233<O\325\036<\233\315\024<d\314\214\272\267\2613=\231X\304\275MQU\275\352f\350\274b\253\300\273\005\032\201=o\324\026< \302\355<\217`\354\274A\3262\2748 h\275\325\263\246\273\361f\346<\316\221}\274@3\374<\266*\025=\270c\262\273\313\277\371\274\030\233z<\235\220\227=\023\260\232=,.k\275O\007\356\274gP\274<6\010?\275J\322h\275\000q\016=4\334\363<\366j&\274\357<~<\206\234\313\275\316\200D<\333\351\266<[L_=\364\231P\275\331\300\376\274\251\356\210\275\273\037K\275Fi\330<;\014\270\275\351\r\275<\201$\277\274\303J\364\273\242\355_\274\327\343\005<\316\3100\275v3\273\274t8\315:\273\3259=\367\326\2639\017\204\225\275\302\313\232<3\352\371\274:R\264\275yc\\=~y \275\254o\255=\343+\030=!L\317\272\336\253\255\273\343\023\305<1B\272<\252B/\275m\370&=j`\0307O\343+\275\377\211\201\273\316C\303\274Kf\314\275\t\307U=\366\246\261<\323\212\020\275\224\375\372\273\243\264E\275\2347)\274[\376\016\275\355\337\351<\034\374\277=2\013\325=\252F\023=\306|\316<\260M\313=\026\230\'=\336H@\274\2249\241=O7\365\274\337\200h\275\270(X\275\355\226\374;u3\340\273\225e\377=\361\332r\274\022~\376\273\246\356\030\275XV\177=h?6=\356\002\257\274\210B\353\273C\n\361\274WlH=I\031\034=\303K\332\274\204P\001=\362\250X=\375\224\232=y\255\315\275\357@\272<\351h\333<\254C\355:2\024\317<hWG=\017Q<<\255\362e\274\213\t\341\273\215\333N;h\275\344\274\300b\322\275\272\000\260=\303\352\246<\301@\252\274\005\215\260<D\226\007\274\334\255\021=~\220\355;\031\377\206<\221\022\016\275\266\223\200=\355C\207<x\257\257\274\n&+<\315\373\0019\021\254\242\275\234\306\376\274T1\201\275\375:\376\272\263x\342<soO\274\017_\201\273FF\366\274\364\343\202\275os\224\274Q\026\224\275\205\266\212=\265I\212<\177\326\252<\240\272\306\274\316\200\223\275Y\300\021\275\271\202\217=Z\031.;w\266!\275\343S\266=+\272\312;\371.\227<9p\016\273\335?\220<\345\306B\275\341\306>\274-^\365\273c\235O\275\314\207/;$\325`\274l\030\321\275\\\373\216=\254\216.=|{\204\273\022/m\275+uB\274\351\350\325\274z\004\267<2\312\027\275\204\020\310\2743\\A\275\006\250\366<\250A\017=L6\'\275D\345\206\2746\342\244=\0109\326\274\357\010\276\274^Y\263\275\340\241\0369\032\203i\275\034\325C=;i)<3\010\207<\210\204\341;r\226Z=\332Ff\274d\216<\275\004\243\355<adh\275\271~4\275\0164\224\275\322E_<\030\272\262<\362\234V\275\314\372]=\t\373\324\273Hg-\275C0\230=\245\335k\275\210\300\332<\r\263U=\036\0059=yp\016=\r\250\327<\237\265\353=\251\034\376<\"\235\002=\210\375\240<\277\335\002=\370\353\n\275f\341L\274pw\346\273uN\232\275\356\272T\275Tl\177<-\273\223<\331\022\365\274(\3221<\375\321|\273\376\274\223<\357z\251;\347\245a=\302\320\343<\274\370\207\275\0300\253\274\210\337X\275\261\270\374<\207\223\304\275A\331\266<\303\333\323\274\376\001O=\361[\277\274f\376\335;U\307\210\275\000\244\326<\351\220L=\333\322n=T\030\212:\017\'w\275\027\211\274\274\311\207a;.\367\226=\321\231i=\177\223\204<\010 b=X].<\253\212\032\2750\355\025<Z\200\261\275&\310&<J\315D<\027\207\016=\007\027\205=\231\373\377<\221\230\217;u&\010\274\302\370\023\275l\211\221\274\377\265\240\274\336\355\031=\013\267\346\273\301dl\274\350\320k\274\002hS\274:\225<<\271\'\364\274\344\351\220<\014\030d\275\312L\031;*\376\346\275\203\332L=\306B\202<\320\206~=\266x\203\274\304\242@\272r\211A<\374U6<\376\"\215=\n\246\034=\2779\216<s\356\t\275 7\374<\206.\027\275\316X\030\274\376\003\370<\322\034T<.\032\232=\270wp</\233\214=\0075\213\275o\322\024<[\237G=\344b\300\274x\301\271=@\035\035< \204\034\275w\362*=&/R\275QY5:P\022\217\275\261|\223<\320s\237<\273\007\326=\"\366\370\274R\237\360:\361J\014\275\000\273>=\336\026|\274b\025\036\2732bM=0\"\377\274\014\004\231\275\004L\001=\r\300\315\275\372}W\275gz\020=\215\260S\273\244\335\035\275]\212\222\275\342h\264\274\207f\363\273\355|\322<\253\2503=\007\255~;Ll\020\2754\3261=\360n\221<q8I\274Ba\200=Us-=dC\227<6P\354<\217\335M=\251\326\206\275\326\232N<\220i\213<\374\323\222\275\337\357\357\274%\223\224=\033\215%\275)\247\036\275\262\302\007<\020/\250\273\331/\232<\273\005,\275\237\252\372=^\253\254\275\362\005w\274\233f\247;\273\272C=\036\231s\274~\360\002>\200\230\214\274\021 %\2754N\020\273\255\332\231\274\211\332\323;\332\025\225=\0241\211<\2562+\274\354T\274\274&\221F=v\271\255<\366\242Z\275#\246\312<\336\266\027\275\230\266G=\300|C\275ZW\225\274\2724%\275T>\202=\360U\334<mAF9\355~\023=\332\331/\275R\351\316<VR\360;uGF<\223\013q=\217&\021=\351\353\364\274\320\314\007\274\345\3631\2759N\246=E\004\201\275\357\235\237\274\315\224H\2757\221\'\275f\033\200\275j\005\223=\236`\241<\306t@\275$\210\357\273\034A=<\272\365\350<\234\327\013=\344\202\202\275\251\202\315;\342F;\275f+5<,R\354\274\262\035\'=\311\211\274<\274\267\262=@\244\213=\3425Z\275r\334\262;\320\254z=\022\246!\274(Yo=jc\205=\221U\212\273\024\237>=\225\337\253\274\204\227\222=\212\253\223:\302\305\275\275\034G\022=\350(\230\273Ida\275\321D\3759\0076\343\274\273\"\031\274\306\244\347\274T\020A=R$)\275\353\016\316:\362\021s=\"\"\246\273\270n\016;\037\272\024\275.H\270\273i\375y=\333\332G\274\001\3578=\342F\272<j\245\213<\257\245Q\275\3306\261\275\330\255\177=\377\304=\275\250\225x\274\345\216U=\214\347D\275;^\237\275w\035\264=\302\255\017\275&O\357\274\220\\\023=\022>\226\274D7\323\274\253MS:J\354\216;\271\346\276:R\201$\275\226\216\305<}\230>\275d@\236<T\336V\275\323\217:<\010\263\002\275)\277\t\275\306PJ\275\265\364_<+\303O;\350\214\\\275\022\000h\275\007\241c<\352\255\027>\342\224\201=}\216\200\274*\247\240\275\002\007\234=\241\325$\274#\356\241<0m\030\275\257R\3349\375}n<1\3104\274\2428\254=\356\255\002<\201h;;\'8!=\216\0250=\362\013\004<\202\031\206<kFm;\213d)\275hd\363;\241\253\330<\325\013\321\274\007n^<\335^}\275\223Z\264=\210:\212=yy\231<\254\310\327\273\000\375\246=d~\344<\331\315)\275\312\244\313<\264-\241\273:1O\274\372\206\207\274\223x\343<b\226R=\366\201\274;h\223\252<\237\035%<,\267\200\273|\335\035=\001\362b\275D\207\020:q+\220;u\245\257\275\354\203\207\273\367\272)\275\227\223O\275\310\374\221\274\217\032\"\275\2660\260<\264\222\037\275J~\360<\326p\327\274\357\276\036\275\014?y<m\343\322\274\356\301X;\365\213\256\274\302U\020<\r\243\273\2758X\t;\364Lx<\n4V<P-\355\274\2315\024\275\303\031l\275\276\000\036=\372\272]=Io\312<\260W\350\274?\223l\2736\373\033=\203\n\204\275\007\177\335\275\003\245\361<m\202\234\274k\014\017<\020\023\266\274I\257@\274\006}D\275\301\303\347\273m\372\217<\021 \001=\300\223Q\275\020\354\005\275>\262N\272\330\204\327\273,\202\266<J 49\263\323\242\274\366\265\251<m\341&\275v\216\013\275\023\360\005=\211h\222\275\305\212\231<_g\n\273R\312&\275\365\004\242\274l!\216=\370*\314<HG\030\275yOu=\225-\214<\324\036\274=\244h\225\274\377\333r\275\200 \274\274\336\030\267;\026\221\210<GnS\275\006\365\342\274FZx\2753\235R<\004\202\027\275\271\263\251<\317M\334\275kO\262\274^\355\311\275\260,\202\274\317s\231=1\357J=\211Fm=\024\354\267\274\301U\002\275\354n\311\275\370b\001;\"\245\031\275.\341\017=\372\241\021\274\037iY\274\233S-=\260\025\017\274a\301\375<\010\254Y=q\355`\274\215\263W\274D\222\273<%\247J=Lr@=\240\245C\274\357\037$\275\304^\'\275\335\004;=\"\372I=[\335P<\362\356\177<\242Q7=\374\t\321<TU\301\275\341\203X\274\271_\037\275\217\360\002:\350Y_\275\n~\347\274\007}\310=\266\223\275<#\276\243;d\023T<\300K\n<\310+\013= \2614=\341\334\252\274\302\222&<\273\250\314\274 bl=\312\231\003\275Lc\241\275V\356\270\274\340\347\033=\220\021\310=\333\232\203\274\316\036\237<\266Z\324\274\t\'\350<\370\212\364\274\212\337:\275\250V\000=\216&\236\274)\326\\<d\035_\275\220S\002;y\206\343=>\347\026\275\312\211\345\274\242\340\261<\310\225J=\355\250e<F\262\333<\313pg\275\360x\316\274Z\267/<q=\262\273\'\313\342\275M=\220<\212\'\022=\331\217\301<\035\243W\274\357\272&\275\237\271`\274\207\224\251<j\310\201<U\263R<\341\033\246=n)\214\274\332Cr<_\254\234\275\304\025;=\3016!\275\324\211\375<R\032\215\274!\031\177\275\022I\306<H%\307<\310J\000\275H4\327\274I\342$\272\272\000\027\274\255)\320<CcA<\315\225\304\275\207\317a\275\346U.\2733]\007>T\365\022=1\362\364\274\205\265\203\271\360G\200=)H\004;9 T=\267\230\303<\20710\275\335S\323\275\361\227E;\256\346\205\275J\024o\275\364\373\304;\351\224b=kR\023=8O\351<#\302\203\275L\356\000\275\247\304\032\275\'\\\326\275\355\243<<\204\032\352<\030\032\'\273\227nT\275\\\215K=;(\310\274(\236\300:y=\344\274J\275\'=@\345\331;\023\371\202\275\374!\316\2748\n\200;\237z\233=}A\274=\351~\344\273\243\235\260\273%\270w<\260\216\261\274fs\203<\000\213\255\275I\362\010\274\245\251\201\275 \331]=p\340\206\275u\3728\275\0015B\274Y\373Q=\2429K<\265Ym\271\250\t\034=\232\341f\273\237\370\241\275 +\217\2756\263\003<\'p\311\274\274\372\214<\225\210R\274\317\266\314\274\\\374\300<\255L\264\275\307\321\224\273\302\313S\275#/N\275**\273\274\337\313\331\275\310\243\'=\326\366\203\275\214\033\242\275;\221\303\273\021\216\255\273Q\213\267=\234M%\275\354D\014=5Z\274\272\275\306\007=\247\311\225=\321nG\272.&~\274\3734\211\274\203\216\265\274\\/\372\274*\327\253\274\230\272\300\274\273\320\220\274#\202\022\274\005\257M\274\323\007t<\035\202y<\207\244\013=x@\030\275\000\033,\275\026\223\210\273\326\3421\275\017\224+;\211T>\274\030v\342\271\202\316\005<\237FB=r\"\224\275\333\360k\275\037-\034\275\223\230\232\275\037\372\006=\352\255[\273\355_\006=\310\232\301=O\':=\017\316\371\274]\341\354\274!\210@=R\200\303=\363)\340<\201z\033\275\366\210\273=A\3455=\372\233\217\274o\230%<\274\360\246\272\326j\304\275+3\332<\344\321\225\274\033\212\270\274(\026\276<\206\000M\272J\357\223\274 \270\253;\3475\255\273\265\362\320=\341\371\024=%f\304<\316G\t;7V\t\274\202\263\232\275\355\016`=\203O/=S*\"\275\366f\323< q\013<-\005S\274\351y\036=%\320*;\371\'\026=\376\340\332\2748\334\307\274/\240\230<\217\253\236\273^\244\356=F3\225=\217\006\"=KwF\275\225\315\230;\020r\210<\235\320\364<\331\214\343;`\3429\275%<\250\275p\347\\<\013S\025<.\325\3309\263\320\246\273\315d\022\274d~\337<\362]a=0\233\323\275\n\274\236=\026\006e\275\001\030\255<\317\377\224\275\2433\325\274\001\366$\274!!E\275\310~j;\352\341\266\275!@\002=\230\353\"\275O0\222\273vM\210=:f3=\357\233\247\275\225\364\336\274p,\n\273}\245X=\356\230<\275&\203\345;:+\257=g\233\200=\220\277\205<\334\'\204=\024\234k=\214\362\372\271\264\3030\275\255\321\177\275-\3764\274A\3772<\017(\271\274\036\010\024=^1\027<0\356\365\274\236\311\303\275\272\"\032\275 \037O\275\360(\250\275\260\203\035\275.\036\002\275\323O\212\274\341\320\017\275\017\256M\275\026\317\247\273\225\225(\275e9+;\352%\251\274 \264$\274%B\020\273_\362\265\274\234\243\276<\275\337\244\274<@[<\272 \267<xt\230<Jw\t>.\263\225\2752\346\\\275\025o\031;\337\232g\274\333\333\327<\254\344\235\275\212q;\275\tKb\274gzZ\275M\353\010\274\251\235\264\274\310G}\274\324\306r;\326F\310<\312&\304:z>\201\275\224z\222=\205\3623\275~\355F=3\031\351<\232\027*\274O\220\271<\360\204e=2.\014=\222\242\240\275\317KQ<\003\005%\274\230Wt;}b\214\275\331\030\317\274\354&\256\274h\026\247\275X\364\017<\254\\A;\304:>\274K\215C\274\204\233\004=Q\336\377<\374\241\266\274B\251\374<e\233W<\215\334y\273\360Ep\275Wj\025=[\266\013=\363}I\275\230vr\275w\241\373\274\267o\216\274\246#%<\236\353\226\275u\320S\275x\314\":\0343\237=\341^\215=\217nd=\037m\347\274\277\343~<j\304%\274\334\202\t\275\212>\343<\241\002\265\274\265~\342\273\211\237Z\274\005>\315\274\265\363\251;\227n\371<\003e\214<\347\353\233\2756S\034\275\300\265@\275\317\016\005<\344\222J\275i\030\241<\032\344a9M\354\275\274&\325)\275\310\0236=\2042\303\271\316\261i=%\305\000=\271\034/=\225\370\253;\225\244M=\364}\240<6\364k=\003\007\222=e\240\013=\340\256<\275\335\222Q\275s}\211\274\373\261\304<?\277\340;\257tj=\242\023\203=\336m\025\276\014~\227=b-\310\275\032\2158\275\345\304\343\274\240x\272<(?\342<\220\363==\306q;\275K\030D\274\024\340\352\274\216h6\275\340\376\330\275`\252\327<\216\334@\275\300\215Y;U\032\265\274&\361\n<J\360B\275(`\330<\351\266R=\217\0345\274>__=o\305\362\272C\0052=\276\361\234\275\364\311w=\200R!\2751!\214=\215\366\252\274\213\306\020\275\251\215\363<\346\370\236<\021\226\300<\207\300g\274\301\254R=H.%\274\235k\223=h\204:=\371\310z\275\211\231\005\275\2440J<\306\224\344\2729\206,=\364\032\364\274\306\274\267\274\243s!=\315\214\325<\014\273\023\275Iv\240\275\262\r+=i\317\360;>m@\275\334\345{\275\343\345\332<\226\374\215<\356\310\220=\321\227\357\274\305\006v\274!\375\217<\314\367\215<\344<\217=rT\031\275\246#\247=\340\023F=e\217\316=\362\014\014=\310\022\264<\255\230\202\274\020\366\356</\372}\275v-\241\273\350\271\314\274w\363l\273\353$\200=\025+\230\2757@u<\021\020\230=\333G\003\275H\010\020=\3165<<\374\324/=\037/\326<deV=\004lk\274My\267\274\300\216\203\275\247\223\327\274\320\274\227<\334\315m<\277\344\371\274\2410\345<\024Tl=\330\250\213=\341@%=\374^S=\200\t\251\275A\205\321\275\242\317V\275!\325\266=#}\004\275n\003\231\274\371\'#\275B\253|\275\377|I\274\303\264\346<\0016\317\275\254O=\274\327$\210=\004).\275\224.,\275\372\224w<\222\006;\274O\315\233<\264`\375<\261\331\236<ua\203=\220\325.\275s79=0/\355:5\271z<\236\357\020\275\022\325~\274\273Q|:6\337b\275\245\325l<\025f\250:\216\363\023=\004\353\302<\350\256$\274\276\3650\274\215.\003<\220\225\234\274Qi\251\274\023\\\037\275I;\203\274\265 {;\306F\370\273\260\3601\274\316\367^\273\240\024\370\274\332q\n\274+Iw<r\245\354\274a!\362\274P\226\302\275\215\351\247=\325\377c=\312\254P=\3003\213<rR\201<\364\307\371\274\304\000\226<\005\233\247:h\365\315\273\223y\033=v\036\017\275_y\271<\342j>;\225\007W\274i\204.\2759h\363<01\320\274\'#\204\274-\010\240<q\270\232<\'\317%\2752\314\341\274\324\202]=~X\236=\321\220\013=\367h?=\247)\r<Lv\335\274\245\230X=\233V.=\270l[\275\231H\202=\325\016\200\274\014(\243;n\313\224\275\234~\342<s32\275\236.\212<7x\247\275\256\315\327\274@\007\030\275\371\316(<\316\222\032= \276f\274\210\212\240\275R\255\207\275\260\222\330;\003\000\215\2756\260\341\272G\006\347\274;\332\000\270\207\254?= R\346<V\354\034<\0228B\274\005_@\274\005c>=\222uX\274B\356\316<K\333\215\275\242\225\343<\030\262\356\274\360\200\023\273.A\340=&\027\332<z\035m\274\334 q\274\007\251\252\273OY\006;.2K\276\217\025\222\274OkF<|\276\224<\300,\211\274\322\375\274\275\300\335T=]\003W<\030\003\227\274\\u\004\275\217{\263=I\353\246=\342\2603\273\016\251\013\275\017G\341\274+\232\016\274\234\0239\275A>\227={\020%<C\215\035<\274Lx\275\321\303\033=\367\277\215<\272\342,\275I\267\032\274{\346\213=N\330\326\274(\004Z=g\262\022<\256U\016;F\r\026\275\234f\"=^\246B\275=\235T=\274I\333<\352N\327\275\027\346\252\274b\360\000\275Q\264\207=\261)\177<\016F|=cQ\363<\343i1=\034\\\032=;\222\234\274\231\277@\273\317\276\272<2\375\260<\330\223,=\273|\330\274e\244(<\033\312\370=[n\005=\240\304%\275\006E\246\274\302&`=\326\322n<\024\217Q=\217\013\017\275\r\267i=\372]\317<\244LU\275\251\005,=\312-L\275\234u\275=\232F\006=\326\256\363<Q\"\031\2753\r7=\352C\305:\365y\002\270Q\365k\274\300\022\256;\224\211\266\273T\\c\275B\237u=\206!)=+*\212\274\266\232$=\231\205d\275&\255\035\275T\035\306\2742\\\021\275,@&=\370\007J=\023\024\360\273\361\244\346<sC`:O\326\251\273\317)\234<\225\020\203\275\034z\204<\363\355\200;\031\t\264\273\347U\007\275\2100\214<\004%\223<\2776\332;Z\314^=\201H\034\275\332\310 <\276\216!=M\330\257\274]Yt<\263\276\371<\013\035[\275b\010\013<DS\220\275\021\3350\275\226\034J<eD\316\275#\235m=b\355O=\014\n\225\274\241y\237\275\367\3718\275\327\336`\274\322H\3769-\243\240\274\317Rd<\3764\235=\257Da<\366_\311:\010\265\210\275\365\277\275:\260\004S\274\036\001;=\026^\217=v\353\307<f\037\033\275{q\301\274\207j\t=\327\300\322:B\344\243<\326\002\355<7\325\315<\375t^\275\333\004q=\234B\265\274L\234\310\275G\254\013\275p\240\306\274\240\274\221\274P\334\263<7N&\2741\313}<\264\321\026<\262\340F=\250o4<\330\272r\275\350\027v\275\324r[=\246\303\"=^[G\275K\327\203=\370\362s\275\266\025\014<K\233\321\275O\\\035\275V\001\331=\275h\351<mbX=\365\223a\275c\234\306\274D\014#=\212\215$=%\272\033=\t7\310;\307\316\320\275)\343T\274\221\310`\275\3028t=\323\224>\275\276\210x<\327\335\353;B\274o=\233R\274\274\020tc\274m\023\314\274\000\214\265=\274\346\351<\005\024\035=\347\246\365\273FI\"\275\334=(=_\246G\275\033\023X:\316\026\202=\020\250\216\275\021\033\027\275\177\2166=\034\346\265\274Kz\203<\351\354Q\275\216\037\311\274\357t\334\274*\305\024\275\3567\321\275\3214\362\273\035\324\325\273H#\004=\257\021\211\275\256\360\213\274.\235\340\274^\023\221<\2151\006\273\350\366\004=\321|T\275\243#\312\274\321\344\031\275\212\205{\275\204\275==%\247|\2751-\332<\240p4=\355!b<\264\"\201<\031UK<\036+\210\275XR\337\274\276\007\'=k\035\245\275\010\313v\275\3534}<\331D\241\275}\265\371\273\207\210\241=\'Mh=\251\303\322<\311\023\t\274\017@\206=\250\376L=F\345<\275\362z\221\275\264x\016<\332\032\227=\003\255\233=|T\204:\325\343\317\274\240P\017=\230\330\"\274\206\257\311\274\312\364\204\273\313\237\245=\351\033\336\274J\177\277;}\'X\275\303\305f<\020\336\022\275\022\t\237\273\010G#=R\333\357=\013\321v\275LkZ=\213a\024=\353\220\007\275\316\037\t\275\330\357\267<<|3<\010\225,\275\224\245l\275\314\303@\275\353\247\013\275r\025\"\275\204\025\016\275\354~a\274\337}\352<&w\026=Un\317\274\035\232\236\271\214\031\211\275\330\365\001\275\177\245\356\274@\032{=\303\271\323\2737\"\271=h\211\221=N\350\223<\036t\026=#k}\275\237\"\260\274\266\356\342\273\243\317\361<N\031\313\274\203\216\342<4\\\305<2?\024=d\367\226<5\205;=45A\275I\262j\275\312\030\261<]\230\261=\357\262t\274\374t?\275kQ\205\273p\277\357\275\240H\224\273Q\311\266\273\316$\364\275\276\260\033=B^\356\2747\320g\275\300y\221<\367\226\307\274W8\300<P_\233\273\243\302\204=\331i\252\274}\361\313;D^\264;G\233\364<s\215u<\260\333\232=\034\366\365;~\033\337\274\217(\023\274\300vI\275\274\215+\272>w\257<\004\037\234<ly@;4\002\203=\307\220V=*\301\010\273\323R\267\275\302\214\200\274OM\233\275\t\262T=p\267\002\274%\325\222\274KC\321\274\r\213\275;\035|\337<]\227\233\275\030\316@\275\000\"6\275r\235\";\316\031\275;\036v}\275\256\336\007\273\205\n\350<O\0002=\206\224\214\275\207\354\271; \221\005;!9\207\275\364Dp:\021U\207\275\216\367,\275\3175a\273?\320\274\274\307\237\202==?\270\274\360\266x\274X\325\260\274\003[[\275\213z\220\274\370\036+:\010T=\275\304Q;\273\034l#=\035\213\355\274\372\3711<\005\303/\274\300\266\t\275\317\'+\275*\346\n\275\322\360\204\275\\\312B=\330@e=\3379O=2g\275\275\272\207\312<\360\'S\275p\334\377\273\022\247\020\275\367/V\273\206^\276<\373\273\227\273\177\025Y;\2369I\275\263-\246<Cpa\274~z\371<\263\005\254=\337\337W\275\213\366\031:o]\254\274\321\346\256\273\037\313\323\273@\322f\2742\265\273\275\371\367\266\274\013G\315<\031[z\274\024\262#\275\301\030\225<v\346\014=\003S\036\274\326\326[\275\315l\021\274]?\014<X\317\200< \253\236\274\026?\207\275ct\267\274\365\277\223\274I\206\200=x\002\362\274)\241\311=\251\273\367\274\335\247\224\275\265\366J=\376\334\313\273\262\261\210<L\350\007\275\231{\211<\251f\272=\223!L\275\027\214\363\275\341(\273=\007\273U:N\2151\274] \221\273\273{<\275p\314\362\274\312\242E<\305\377o\2756;L\275\260\016\247\274\324\251 ;\225}\347\273j\'\370\274\225\023\005\275\246\032+\275\2661L=\266\020\327\273\005)\027=2\367y= \273\242\274\211\241\313\274\262\373\007\275?\243\246\274m\232\022;\001\316\212\275El\347\274\263\303\312<\315\317\266\275ap\257\274W\316+\2755\217\'\275g\364\013\274\303\013F\274&\272Z\273m\022\374\274\301\332\246=\2150X\275\221\254\027\273\274y\361<dPi\275S\316\035=\021jP\274\004uz\273\"\356H\275\365\366\235=\026\212\364<\260\321\376<\325\244\251<\260\371\312=\214\357\304=+x*=$\240\343\273\332p\233\273E\001_=\351\360\210=\311\340L=\202j\225\275\350o&\275wj\217\274\352\257\005\272\034S\013=\263\217S\274[\010\262\275\2672P=+\202\t\275D\252\232\275P\303h;q\353\241\271\273\2763\275\353w\274\274\333MK<[_G\275\036\000\025<\217\374<\275\014\200\233<W\324\377<\334\311\255;\013\216N\274\234\302\213\275\255!\276\274d\377\020<\323w\375<s$\341\273\372\331h\272\333\342m=4Y\361\272^\021\021\274\223B\212\274\362[\243\273\250\224\023=\244\366\236\275\024^\225\275\021\364\213\275\200\311\000;\320\344\243<B\223^=\305R(\275F\321\240<>\325\240<j\021\324<\225\367\356<\264c\271\274\310\3565\274\346zx=3\214.\273cx\026\274\205?\305;o`H\275\353\316\311\273\n\251\275\275\303l\261\274\014\266)\275\315\265\211\274\022\231e;.\323\362<\332\025\024\275\207\207\315<LZ\205\275a7\020=\231S\302=\256\216Z=\233\n\256\275\020\264\241<R%\325\275\215\203\333;\304,\232\273\315\324\021\2740\361R<\225\030\035\275\347?\000<\224}\035\274\266\020y\275\360\025e\275\201\334\021=\24216=\t}j<\3531~<\260\010\317\275fM\217\275\334\014\013\275x\016\026=\356\245(<\312\370\001\275\3344K\275\313\r\367\275>d\256\275+\343F\274\027\274\036\275;\016I\275&N4<[\014\324<M\007V<\306\3367\274\253\371y\2759_\206;\321\001h\272\337\365\024<\241]\232<\225\026L=\313{\213<Z\217$\275\327e*\275\300\274\214\274>/:\274\023=l\274\"\256E<m\210\266\273\005\300,\275\'\242\313\274\303\300\004=\305\355\212;\"\236 \274\320\217F=\353\240p<aE\244<8\343\302\273\246\333\217=a\337>\2754\260\357<\342\317\016<\025i\312\274\3618\243\274\035\001H\274\327D\336;\204\017\344<K9\204=ql\377<\341\311\206\275,\320\"=U.\350\273 \276\263\275\35785\275J\317\022\274E\021\032>\305\t\242=?\250}\274Q\244\010\276\356\270\266<\257Pt\275A\273\016=]\3008=C\272B<\220\215\035<U\250\342<L\t\262\272\334\317+\275i\037\301\275\372\345|\275\362\236\220;eA\243=i?\034\274\211m(\275M\200\373\273i\004\323\273B\256\227\274!\304\215<\322\333\n;`\020\020\275A\346\200\274z\035p\275\361\2648:>\203^=\363\364\314;\275\263\260\274\307\021\350\274\337\256\220\274\3349k\275\201\3008=\221\017z\275\352\343\237\274(\375\367=\343|F\275\317\325\262<\251\356\340<\205\365 \275:\261\222\273K\313\267=\245,[\274\263\r\273\274\227#\031>\357\301&=\232\026\223\275\324\037\202\275z\301*<\222\262\364<+\201\232\275\230\367\227<U\027\005\275\255@\201\274\250\'\357\271\r\242\210\274\375p\314=\315\266\000\275\241\370\373\273FFR<\032\035\277<\206\367y=\263\007\214\274\216\007\365;\235FX\273\226U\200\274X\2665\274\250\314\357<\3739[=+\212\025\272\227l8\275\202\000t=\303hN\275\373\r4=\3711\t=\310\261\263<V\347%\273\277*\354\275v9\233\273\374\020\356:\232P\240<\007\350\r=#\256\002\275\271\n\201<R\257&<\326\027\274<\217!s\275\364\356\031<\316e\264=\354!\305=\215}4=\3067\223\275\036%\200\275\317\305\000\275\003\237\211=\277R\316<6%\031\274r\302H=\331\266\233<7\252\000=\246\032B=J\271\005=\254\267\177\272wC\023\2751\362T<\360\307Y\275\357\037<=H\241#=~\360Q\272_\341\374<\2715B=\256\2732=\327\272\005\275\304\035`\275\321\237\227<\333\326E<g2\246=I\300\210=\274\222\276<Q|Y<SQ\217<\322[[<Kk\220=^\225\031\275\2563\244\273\003\370\360;\277\230\020=\353\242\372<\202\206\324\274X\310?\274kU{\272\005h*<=u\252\275F\202\'\275\r\035\215\273\354\361\376;\227\203I=\263\000\206:@\031O\275\013\202,\275\244\326R\275\314\273\377\274\240\256\345\274\265\036\310\274\252\023c<!\204\211<\037\331\313\271\376t}<H\231l\274\201\213\035\275\310\363\263:\327\272\305=4X\010=\332(\245:\032Y\244;\315\2638=\335K\007\275.\311\305\275\2463\373=\n\364\246\274[\347&=}\007\305=\323\221`\273Q\331;=\211\302\355\274\0169X<\253\225\327\274\033\221\221<\000\017\366\274\365[R\275\211\034\207<\300\351\003\2756\033f<\347\300\357\274$\206\363;\226\317\314<\001\220\020\2747\231\225\274\240\342R\275\313\004V\274a\255\373;@b\216\275\323Uq\275Z/\201=QVb<\300\250,<\312\235V\274:\014\266\275\250\027\216<\372\310W=\312\240\223=\013\237\t\275iS\371\272\201k\n\274\032\366\221\275\0255\302\275\240\302\212=\370Q\021\275\375u\337<\364\206Z\273\246\030\244\275cV\266<w\275{=\202\265\010=j3\207\273\2434\2079+\371>=\237\227\325\274:\234\254<A \031\275nc\024\273\360C\200={$\270\273\367\247\253=qp0=d\210\265\2743\317m\275\360\320\256<\312Ci\273\305\0325=\357l\306\275\\\332_;\244\374\265;=^\244=0\310\237=\000\375X\275\364\032^\275\033\034\023\273\204N\240\273\371{\221\274>pn=\001\226\276\2745\372A; \332\374;\271^\353<Gv\253<\243<\233\275\026\350V=\017\361\031=\257s\330\273\334\211z\275u\346^\274\355\377S<\351\210\376\273\362:\232<\223\2319\274\372\3121=&*q\275rw;<\007\330\013\275\242Q\211<`u\343;\016\351i<\373\"\026=\307\215\021;4\245\\\274\037T\t\275\264\343 \275\310\363\257\274t\266\303<\341[\222<Z\200s\275\301X\241\274OB\354\274\304d\231<g\204W\274\333\341#\275\226q\251<0\362\342\274\361\351\205\275Q\305\006\275\244\3047=\352>6;\3762\302\274>\276i=\250#\335\273[\261\031\273J\004\036\274i>\322\274\013\227X\275\305\350\037<\000\t0\2756\021\230\274\375\233k<\342\315\014=\257\360\254\272\225\305\217\275\332\313\023=U\025\351\275\250\233\314<#\t\"=\177\207J=\374\212\000;\037Q*=\177\241k\274i\177\264<\364\224\230:\246F\007\275Q\3765\274<\222\236\273/\365\263;\257\354J\275\270\215\r=\036\253\304<@\2504\274\226TF\275\327\327\274\274\263\211k={\276\005\275\332\352\267<\177\006\034\275\232\260\037=\251\177\224;\364\360\310<\351I\250\274\343\001\033\275\313\235\260\275\003]\220\275\t\254\266\273\nv\024\274\311X\254<E\322\247\274\346\250N=\316(D\274\307\222\010=6*#\274vM\312\273\311\312\206\273v(\252=\334\351=<z\236*=\262~\341<\347\013-\275\302\364;\2757\300\"\274\352]\342\273\323\256\023=\237\375\027=@\347\233=\034m\222\274\325\325\006\2757\247\305;\024\270m\275\025\267\007=Tb\232\2758-\025\272d\365\203<\373r\021=P\215-\275\327\211\251\273\340\337\323<\356\316X\275i\307\272\274A\005Y\275\214\334O\274m\022\262;n\375\022=\251\031\353\274\320@\252=\177\250\310<l\336B=*\211\206\275\314\207)=\301\327\314<\345\313\343=\2140\354\275\032&m\273mg9=\301\214\226=\r\332\032\274\361\254\021=[Xh\274\352iU\275\260[\025\275uj\360<K[\376=S23\274(|\002\275\"&o\273L\370\212\274\305\216\232\274d\214t\275X&>\275l\240r\275z\225V\274\277\360\261\273\306\221\305\273\311\340}=u\270\266<\375\275C<\244\241,=p>]\275^\037\346\274\357\232\177\274#\367|\275tT\327;`3t<S\242\210;\374\334\317\274\2029p\275\204\346?\275\261\235\n\275)\376(=\376\324p\274m\r\036\275u\r\233\274\226\203\332:+v\242\275\255`(\275a\014\310<T\322\371\274dg\241=q\217\311;\004\231\031<\337J\236\275\255\273q=\370Ya=\337\213[=\232>\243<\014\004\025\275\'fd=\274Fu\275\027?q=\021G\216\2756\247\036=\316\361\233=\261\301\200\275g\362E:\026T\202<\027\302R\274\227QZ<g\025\306\275\036\256\004=~\243\301;\013\n\223<&&b\275ds[=k\322\006>!\347\307=7\375\374\275\362A}\275aa\272=\233\340\264\274\251u\003\275#|\021<\246\204`=Y\365L=\321\020\326\274\025\036\341\274\356\006\230<\2310X=\306\025Y=\0013\236=\000\366\177\275p\356\227\274bXM\275\356:9=\230\032r\275?s\245=\366g4<\004\002\340<I\342\001\275\253>H=:\031\224<\240J\235=\334\021==1I\241\274\223\206\235\274d\033\204=V\327\231=\363\332\'=\264\226\002<\371\331.\275R\351\026<\\\256\346\274\237b\002=\276\213\361<\221\020\270\274j\246O<\311\305 \274)t\372\274\221\005c\275\361\256`\274)\321\315\274\316\204\225:\333j\001\275v\r\240=}^\242\273\272y\367\27425\363<\322oU\275]\357\341\274\234\207W\275\205\342\314\274\342\361_\275\376\277\267<\277e\244\274\007\265\217;;!\264\275\321\222\317\272\206)\201\275:k\214\274~WS<\232QE<\205$k=\231\331\241=c+\331<\344>5\274\315j\224\272k\225z= \201s\274\325\363\260\274\275\301\037\27517\236\2750`~<\020[g\273\r\031\256<\221\236s\274\221+\031\274\313\206\222\274d~8<\0324(\275\016\340\375\273\267\322\021\275\006U\316;L\276)\274[\031y\275\274\226~\275\261\006\002=\000\214T\273\23544\275\'\332[=2\304\215\275:9\346<>\266h\275\341\020\000\275\232H\317=Yt\216=T#\273\274\365\276\371<\000\311\233=\332\334b=\222\342>=! D\275\030\324\366<2j\276=\203&\375\274\247v\341;\206\\U=#6h=d\323S\275\332J`<\317k\227\275\032\330\341\273\252\253\362<\276\253c<\304g\246=8-z\273D\212\306=\233E\252=_[@\274\314A4<\nlq=f\317\204\275\306\023\303<en\276<:(\033=6\313T<y_\323<P`!;\376P\324=\333+\000\275v\226\345\273\355n\272\274\256`b\274\250C\277\274\002\216\007\275\327K*\275\023\000\005\2742\252[<\000\334\301<\025\"\331\274\222!(\275O\346P\275\351Zo=\225e1\274^\227\023<\311\206[=z*\200<\337Ak\275u\246\021\275{\037\325<\377\345\373;I\264\026=\203x\001\275\244E8\274\200\006\201\275\254tJ\275\024\335=\274?\333\221<\273<\014=\337\004;\274\221W#<\272Z\236=wt\007=jO\001\276\266\006|=\274\022M=\"\216\233;\312\013?\273\340\307\010\275j\261\003\275\377\311!=\2411\321\272\303k\001;\320\207\312\274\366),=\302\'`=\210Y\353;\351\266]\275:\272n=\305\275\001\274\276\237\250\275\2045\004\275\315\217L\275\003W\3538%\300\263=q\207k\274\'\231\330\274\247\203\002\2758)\035;d\235V\274i\213\027\275u\\\003\275\227\210k=\264\035\225\275\370\2139=\251\252\n=x\330/\275\001Q\244\275\265\227\000\274y\006\236\275_-\313=tc\036\275\315A\350<@\237\274=\006N\232\274\207\346\337\275;\231\023\2743\302%\274\341r\277\274L.\254\274n\003\255=\215u\231\275\226E\201\274\214\"\225</\275\201\274b\372\215=\226\3754;\331\335\035\275\017\003F\275\254\345\302<\262\376\010\276\231\206\034:\334\333\216=\357\254\022\275\374\367n<*?>=\253\231\206<\037W\372<+<\232\275\326\372\224\2737\270\005=\262F\357<\261\274u\275\313\350\032\275L\313\236\274\204\377a=\257\354\247<y}B=\330*&\275z\030\227<\225~\214=\227\362K=\272\221\006<]Vz;\350\244\326\274\036\351\007\275\023 N\275=2\2129\n\375\220<HA\222;\\\376\021;\206\000\202\274\245\226\232\274\346e\205=m?Y\274\337V\002=\007\021\246<\017\305\251\275\223\366p\275)>\200=\235\275\246;\206\013\357<Z$9<\372\235\201=\255\326\276<\320\342\203\274\207\021\300<\030\371C<L\346X=\031\324\331\275\027w\245=H7\320\2743)H=\247/\016\274\343\001\251\274Y\021 \275\253\032\202\274\355\201\311;&7\210\273\276z\252<\363\205_=\017d\322\273h\204\326<\314\256\024\275.rV\275\005\255\341\273,W\n\273(y\213=\242 M=\316\3318<ia?8}7v\275p\034[=\276AT\275;\332S\275\004#\210;\222\344A=:\322\306;k\310\237<\274\340U=\300.\n=V\250\257\275\322\345\210\275X\002\220=\t\005\234<\274t\007=*\034\217;\346\262\363<\276\315\357;\215\353\231;\007V%\275|\377.\275Hf\307\273\023\000+\275\"\340\245\273\023~\203=\026wG\275\211Q\242\273\322\r\177\274\3235\211=\224\237\\<\225K\243\274\005F\241\275+\177\261=\226\334\021>1\\\304\275\345\343a=\363\005@\274\201\223\000>\205Ya=\351\250\260\2724\333\363\274\305\250\242=\346pt\274C?\004=\243:\257=\313}\303\273N\346\222\275\016l\217\274\215\326\032\275Jih\275\305\262X\274\222d`\272\310&\221<\366\025\371\274?\240\037\275{\271\314\275I1\364<\263\023\007\275\362\241-=b\346L\274Q\005\272<\373#h\275\347\313f<;\363\273<<\274\353<{\226\026\275\216N\006=#\332[<\000\n\t<\373;\033=\223\t\263<d\253\202\275\353\025\266<\302\336\213\275\327}H=\245\013\026\275\231\345E<Ds\303=3\366;\2744\262\264\274b\226@=&^h<\263\031\004\276\026\250\270\272\317\356(\274{\005l;\002Dl=l-\032\2741\361]\275\211:#\274\350]\3038_\'\033\273\247\3639\275,\273^\274\320\307\364:\324\357q=p\233\223\275\007\227\203=]%L=*\203\354:!1\237=/r\207<\327\023\336<\252\276\215;S`\206<9xP=\226\300L;K\315\004\274\177q\003=\006\231\351:\224\037\201\2725\246q\275\245\347x\274\310+t=\203\375\324\273\340ne=\245N\377\274EJ]\275\242\264\305;\260\3670\275\030|\356\274t\025\305<fF\353\274^\rO\275\031\024 \273&\213\212\275hN\325\274\213\232\r\275\272\264\263\275\243\255\264<9X\252\273\035TW<B\210\334<\020]\232\2758f\000\275\316\217f=\225f\325<\214\305m=\374#\202<\235N\005\275\335\353\327<\3302\357\275 9j\275\224\352\232\275\304i\347\274\004\021\361=M\201-<\025x\016\275\300_/=\010\255 \275|\341A\275\327\316\244\275\022Fn\275\303\347\027\275\325\323p<\017\374J;\310\323\304<\250\230B=\341\234\264\2743\265y\275b\"\200<\265\245]=\355t\222;\231\027\356\274\032\353x\275\032\256+\275\322\220I=;6\204=1<9<8\352\013>\234\013\264\275=\332\273<}3\252<Qd\316;\2721,=\302\2763\273\207H\351\273Wl\357:?\207\232;X\347\261\273\372|\036\275\212}<;\301\031\014=\211\310\007=\266\271\343<C\324\\\27474?\275\037*\031\274\351D\010<\341\332\212<79s\274\3715\335\273\353\313\300\274\326;\264=\206\313/=\216\351\235\275\n\310\001\275\007\277A=\234\002&\274\257U\211\275\264\371@=\'T\234\274S\271\341=`\364l\274N.\251<\007\374\024\275\2467\216=\354\220v<*p\017\275`b\345<K5=\275\335\014\007<\\\326\000\275\256\207\207\273\204\231\025\274Wi\267\275\005cM\273P\216\235<\365\363\337<\324U\030\275\322\214\014\275\334}=<\034p7\275\323\253\252<u,\245\275\265\312\205\274\017\235\325\273\344\320S\274\227m\221\275\352.\211\274LF\330=\217?\225<\320~\035\274xJ\330\274\310\223\221\274\204\016\316\274\202\026\220\275\245y~\275H\016\213;\232Q\272<\343\"\005=\0335\235<A\206g<\324\005\225<B\024\004\275+\0302=+\001\223=\317\025\332\274\262mH=\240vk=\324\027\206:\204~^=D\270V\274\313\226\332<\036\'\033=\350\377V\275)q\240<wf4\275\2024*=\n\017\226=\336J\230=\2641\254\274\256h\226<C-\237\274I\300O=\353\017\264<\206g\204\275n\255\251\275\230T\312\274\2270\211\274\226\260\322<S\301 =\373W\204\275\330\276\272<7\305\003=($\024\275\213\241\326=\210c\032\2750A\322\274yAH\274=\021U=\212\235\224=\022\237\357:\031\300\312\274\216,\333=\305\246\225;\347+%=J\202\316\275\3019\315<\264q\002=\324\207\033\274\\{D=M;\246\274\327\361\200\275\202\232\270<0\233\234=jI\027\2757\315\241\274M\204\211\274\344\206\337\272\213=\000\274\326\010\206\275\"\003\255\274\027\240\277\273\3575i\275n\360\203\272\321&\201\2749\305K=\222\322\203\275\\\267\322\273nW\210\275\004&\311\274cs\272<\250\235\021\275\305r\313\274\323\267\212<\346\275\311\274\213rB<\270gi\275U\271\306\274\375\325\362\274u\227u\275t\244\007=d\005\347\274\022\013\327\273?\313\024\274.\0252<_\271\372<I\235&\275\233F\322<\"\357\027<^\301\222=\342\345\002<\235\t>=~\007\204\272\243\247\326\274\322\204f\274Ib\213=\300\327\230;%\300/\275\2711\243=f\313\346<\224\216Y=u\311E\275\034\217\026\275\342\236k=\026F\375;\300\000\214<,N\021\275}\376\205\274{*g85\033\352\274\036\3145=\271\215\001\275\342@\314<\322\031\322;=u\210\273\347,?\2754\357\231\275\313\350\201=A0*<\247t\"\2765\213s\275o\024\255;R\036\326;\215\317\350\274i\273B\274?\241\206=\006\303\031=\311\027\033=[l-\275\237\004\220;\221\371\204;\331\306\365\274\271\033\031\275\357\366L=\254_\003:&\023\220\274\035\260\024\275E\275%\274\223rO=\2600\261<\375\247Q\275\367\022o\274\270H!\2751\337\215=\353\311\033\275\335\236\t\275\271m\225\274\007\250\002:y\320O\275yv\325<\351-\354<F\200\261<;\373\001=a\026\205\274\342?\010\275\375;\251=\204\317x\274-h\024<\376|x<{\234\275\274\313hM\275\305e3=#\327 \274\234\324\010>K\223\254\275\341\202+\274\357\356~\275]\301\017\275\361z%\275e\332W\274\312X\022=\006;!\275\033\206]=\235\371~=\335\323m=\237\370\252\275\216\343\352<\335\027N=\213!\312=\210\240]\275\356\356\006<B\210\277;/6\200\274#HD<\245\262\'\275\037\356\263<o\036\267\274:\342\274\274\202\2170\275\342\206?\274t=d\275\273\0213<\022\357\205\274\275\032\304=\332\253i\274\244Z\314\274\031\035p\274\014\374i=\322\360L=\202\345\233\274s\215<=\031\272\030=\265\270F\274\\\200\204\275\343QB<\245w8\275t\341\330<%\021\260<\271\224\227=\374\001Y<~^!<\007H\201<\022\304];u{\'=\272\241\007=\037m\346\274{\324-<\033\270\302\273\0107i\2742\355\274<`e\004=\210\265\247\274\237R{=\237ep=P\257]\274\347\342\270:\261-A=&\022\202<N\005\206\275\r\033\361<\024\223\230:\027<u=h\373\023=k\310\354\273V\325\300\273t\2200<a\3504=M\210\'\274\0053[\275|\023<=q\216\315;\020\177\2059\026s7={w\013\275\n\241\033\275\341\240\263\274\345\276\321=\271\302\260\274W\277\373\274Bz\221\274\273\346\226=:\273y<\361\304\361\274/\312n:\230S\014\274\342\275\234<\242\250\027=\347R\241\2743\300\206\275C\013\221\275,\000\335\274_\245\335<\371\030\350;\366\242\'<P\016\211\274\205\252(<\217\262\017\274?\223\251=q\213+=\332\177{;\236:\240;\334u{\273T$\216\275w\377\221\274\313\031\026=\244\374\000=\354\271M\275\325s\216\275\226\303\327\274\230\210\006\275{i=\275\300\264Q\274\363l\377;\033|\226\275P\233O\275\0373\247=a%\277<\024nA\274\341\000\327<\226H\003\275\017\247\336<\2461\237\273\355\357\204=qA\231\274\327\317\t\274\002\226\221\2754\303o\275\331&\205<\036\314\231\275\255P\201\274\266\\8<\241\345\227\274\003x\310;\202\343\212=h\341\234<D\351\354\274 \321\260\274\0164\246\275\331\327\t=\234\255\272\274\241z_\273\334Qv\275<\030\020<\351\264;=\326\275\275:\370\263L\274\342w\262=\020b\356\271\275\205T<Sy@\275\314&3=V\330&=Kn!<\033\342\237=\361\016\324\274\235\'\277:\327G\247\274\326\306&\275\374\251j=\230\235j<9\205&=ns\232\275\340\006\032<roH\275@\370&\275s\215\215\275:\337\255= \003\365<\236{s\273n\331\336\272\204;\245\275/$$=\022\t\330<t\307 ;\354l:\273U\024\017\275Y\321\207\274\3020\007=J\352\'=\002\\\256\272\022\260\307\274\324\3434:\340\332~<\306\2069\275\250\326V\275\257/7\275\314\245=\275>\335U;\275F\237;[3\203\274\230\371\333\274.c\177=\253P\202=\022\205\201\275\224\333t<\324\022\370\273\344b\021\275_\346/<\275\212\005\275\267T)\271\342\017=\275\2173/\275\343\226{\274&\215\275=\0239^\275Bo\337<<\324\022\273\2557\333\274\274\'\271<\0325;\274\255\372\230\274Z\373\216\275\341\301\334\273\001\035&\275\313j)=\027;\240\272\377\265\217\274\360\\\371<\243\244Y\274\206#C\274\235\205\351\274\267\310\247<]=\362\274\232\256!\274E\247\201=\220\372\3419D\233\200=\353\037\242\274\213Bx<\277\025\205<\214\177Y=^\251\004\275s\032s<\356cw<\276\300%=a\264\004=j\362(\275AR\324\274\000\t\311\274\003w\312\274\ne7\275\232v\234\275\232v\371=\341\355\036=\357\0244=K*-=\375\361[=C\342\326<\033]\024=\327\302];\342\251f\2746\236l\274\032\347\244\274~\\(\275\356\274\n<=s\225\275bw\032\275Pcs\274\270\225\200\275\022+`\275{@\016=\326\224m\274\220\220J<\360n\035\275?$\324<\346\250z=\276Q\226\275\354\215\334\274@\345\363\274\030S\003<\331+\225=\366\225\004<\257\274\314;\037GW=R\342\227\274\265\207:=\330\311\256\275n\002\353<\010\275\020=\016\255\006\274\366o\031\2758\274C\275\250\326\031\2757{f\274\265/\264\274\262\226a\274]\363\373<\341\342\347<\345m^\275\235\343x\275\3723\360\273\217\230\010\275\231&\331<\266\2370\274X\230\226<\350):=y\r\220\273\300\251\271\274{%\022=\374\032\304\275\350\361\261;_Q\322\275\302\251\311<l\314p\275\271\276l=\0177\250<\203\326\027\274C\0010=\3405W9\224G-=\250\035\367<#\025\300\2721\321\277<\271\357\231\275\251\016#=\3034U\275\002t;\275@\350a<\'\244n\275\010\214\214\275\2273\260\275Q\265\343<\306c\302<OF\026<\032^J<\371\307\217\275Q,\002\275\207Uz=~f[<\300\265;:|\024\322<\366\333\204<?\214_=\230\343\022=\334\022\237=\357|\211<\226\266\367\273\227\034\035\275P\266\303\274\323[\026=\211:\211;c\327\336;\331\3048\273\342\021Q;\205\205g\275b\375\032=\226\341*\275\3763\266=\013\227\333<\313K\246\275\250U\271\274\325\372h=\320\340\212<\347\340\243=z\343\030\275\234\207a=l\227l=h\374\007<\311\021)=\233\264\246<\260\3268=\260\010\004\275\023\354X=g\337\344=\217\316C\275\307wG\274\216\037m<E\007\202\275\351(J\274\2728`\275\365\234\177=3G\270\274\262H\033=\320<\245<-\ti=\314UN\275\033\300\024\275\316tL\275CM\204\275U\203w\274\244\257\0149\377\352M\274\241Jj\275AM\213\274\376\376\350:nO\007\274\177\002o\274R\261\317={%\251<6\275\346\274\227\224*=\262\022\331;R\345\331<VnD\275J\330\177\275\212\263\326<J\376\235\274\272\360u\275\337s\350;\025\017\250\274\270\360B={\275\213\275\205\357\276<\210\214\003\275\310\037,\2752%j\275 \212\237\274\356\262\r<\353dl;\335fj\275\344W\302;\331f\223\274\213n\004=\344J,=N)\215\274*3\221=l8x\275B)l\274J\"\016=P\345\"\275\316\233\345\275[\262\364\273?\322\202\275s\377\000\275t\177s=5 \261\274(\3547\275E;F\274]i\213\275\200,1=w\270\301<\360\372\212<eS\330\274%NO\275\313\032\222\275\352\314)<\026\236S\274\3068\333\275\211oo\275\221\t\335=\rH\023=\177\325\277=\024\300\014=Hr`=9a%<\013\210\205=\224\262\231<\273)\272\274x\242A\275\005l\344<d{%<\323\026I\275\331\217\211;\245g\004=\'8\250;t:&\275^\223\233\275f\244\236=o\232;\274>C\240\274\377\005?\275\335K\235=\367\255W\271\242n\264\275B\237\211\2742\206\336;l,\203;E\260\215=\273^\267\274L\356\375<\014\314\250\274ou\242\275ql\177<\r\302\200\275\005a\277<4\004\247<\221\2032\275\230\302Q=\347\371I=\307\2150<N|-=nv\225\275\033\350\243\274X\322\321=j+\321\274\333\346\017=\336\371E=\033\2371\274\363\366\033\275\375l\033\275\375?\021\273`\372\214\274/s6=;\225\371\273\017{\236\275\'\340\341=\334\205\020=\032U\206\275B&\230\274\346Q\301\274\021\347\312;\020\334\363<[xB<,\262m<|F\267<9U\240\273y1I=\265\233\206;\272\0064\271\345\\\343<#\312\252:\033\314\220;\027\275`<\233\265Y=\262\343\204\275m\204v\274\272\201H=\323\355\254<\323\000\275=\320G6=0:\262<\261\247\243\274\377\356\022\275X\335\367\273\240d-\275\376I\000<\264(\216\275%G+=\352\243g=\251\375\203<)\217 \275qd\265\274@\027\206\273\014T\273=\203z\241\275;%\255\274LWw\275\225\315\222=\2204\303<\301\314\230\274\331\252M=T\307\r\275qf8\275}\363\227\2747@\241\275f\270,\2737\313\244=\333\000\'\275#8\231=Q\245\003<\024\021\002=/\002~=R\301\207=H0\305\274\270\267\265<\026\211\206\275\367\217O\275\205\3468=\377U\231\274\215Wx=\224\252\024=\322gn\274\230\007\247<Yk\201\274\345\311\344\274]\327\256<\301#y\274J\256\363<\312\\\002\275\237D\001\276\365\243\241:,\214\257\275,9\201;\032t\212=k-8<\210]\315\2757\3575=\204\r\320<\037i`\275\311\177\213\275,6\277\274\016&\213<\243\032Z=\006KK\274 E\211<-*\235=!\034O=\316\246\"=\325\340;\275\364\242+\274\016\251]\275\316\364\2768b\231~\274{\214\340<\226\030\\\275\023\365\240\275\244\1777\274\241+n=\241\227\273\274\030a\265;LP\271\274\243\225\330\275A\r\364\274\323J\335<\311\327\262\274\300\033\345\275Z\203\024=\247\305\031\275C\201\244=-Zr\274\215\307\257=\321\333K=\005\326F=\210\375\007\275\313`\256\274 V\010\275#q\031=\202\266\320\2732:\243\2722D5\275\264\3358;\324\267\310\274&jD<\252\360\003=~+\003\275Q\"\035=\005\027\005=)1\260\274\250fa\275\244d\201<\0347\\=\336\204\320<\353\222D\2750k<\274\331\335\017\275c\250\014=\3005;\275J\326:\275\263\335\233\275\324\351\013=\207\001\327<\177\366\373\275\273;q<s!\274\274\277OD<-\232\311<\026\372\205<[9\212\273\366,K\2758\010\374<\374]#=\274\000\346;e\205/\275\t*\217\275\212cs=\331\351\267\273\3450\333=\232\026\234\274\362\035\201=F\325\205=\025\321I\274\327\000I\274?\277m<*\366x\275\214\035h\275=T]=\235\322\016\275\251\355\022=o\331\210\275\266n\237=M\2269;D\000\360\274\354\013\265\275\026f5\275z\312_\275\200\375\315;{,`<iN:\275\325U\244<\366R\242\273\026\200\222\274\276\354+=Hk3=\022S\313<\267\250L<\247Y\245\2746i\245\273\177)}<\007\231\304\274\257\354[\275z\376\211=\234\3715\274\272\356\322\274\225\315\263\275\216 \000=\225/-\275\307\3520<\311\006\311\274d\217\264\273\370\361\257<\254\321\n<@6\026\275\355\211\276\274p_\200=\354u\250<\211\2305\275Y\005\367\274\232b\263=\335\037\374:\003\261_\275\000p==``==[&\316\274E`@=k\361m<\320\244)\275\245\311u\275\305\273\241<\352\232u=.bY<\t\021@<\336\263\200\274\007\344\240=\205/3\273\313\273W\275\247\310\\\275\217:A=l\230\250\2750\311\201\275\375?(\274\210)\363\273\021\002\030=\3139\257<q\271<=\rZ\351:\230q\307\273\321\017S\274\325]\013=\240T(\273y\000\306\274\2675\224\275\266E\240:\355\032\307<;1\337<\327\001#\275\306\317-=e\214e\275*\346\310\274\264BA\271\320\226G<\031?\004\275o\200s\274\355\210\335<\240\010\273\274\324\242Q\274\214\021\315\274\201\000\321=\234\'`=2:#=,\253\362\274/k@\274V\277U\273\234l\201\274\207\347\215\275\250\036\223=f\006S;e*a=NW\017\274Y\"k=\r\010\223\273\271Kn\2744aA=\335\032\326<\371X\221=S\332A=\301\2221\275\2307\032\275\324\364\207<\372$\357<A\347H=\233\324\245\274\373a\223\275\027\273Z\275\216\376\204\274\277\244\204=m\271k\274\324\2648\275\006\300\215=:\266D\275\234\354\215\274oM\331\272s\'{<P\301\014=>W\215<Z\"\301\274R\321\240=\246\274\317\274\213\222\204<\341\2172=\311\235$=\371s\225;\260\350X=\317\271\231\275|\342\263:\267\034\'<\271\004\214<D\242\037\275W\365\365\274\037\370\353=\036\035\210=\314RA\272\315\312\021< 8\213\274\375t2=\326f\240=\334_\241\275\022>Q\273\363\230<=\217\216K:F\375\265<J}\002=5\206\276=]\256Q=x=f\273\017\356\375<\021n\274=\312\266\035=\247B\211=\323u\021=\211\301B=\370h\t=-T>;\222L\352=\002\000W\275p\374\257\275\010\331\033>D\367\304\274\224w\270<\036D\227=\315\355/\274\367\366\202=\372\2534=D,3;:\245\236:[,\214\275z\230\255\274\200T\220\275\246\252*<5\373\n=5\230\363<\315DL=x\023\354<v\003\231\274\025\310x\275\233\327\254=\221\335m\274P\213\220<\254\031\226\275\003\300#\275\364\243\204\275\2746\271\2744Q\232=G\271\224< 4^\274\207\027\271\274\247&\314\274\256\366\235\275\030/;=\352l\"\274\026\206o<H\212[\274/O/\275\020\243.\275^<Z=I\275\037<6a\214\275V\240j=\004\345\203\275&aA\272^\326\221<\223\353\375<\220=\215<u\016e\274\033\240\225\274\341\207\251\275\265g\'\275\270\313\006\275U_\333<s5\003\274)\314=\272+m}=\263\316\235\274u\337A\275\010e\316\274\332\221H;\257\307\004\273\220\013\256<\312]<\275\333\306$\275s\323\231\274T0\225<\322\000\034\275\375\242\035\275|;\206;\020t\251< \024\331\275\324\177\024=\354\344\236\274\3577\363<\t\3659=[\234E=D\016\266=\\\242\336<\014\256\210<\360\372\361<\000\022\017\276\032 \224\274E_(:}\245\022<\037\000\273\274i\357\205\273T\334\006=\312i\247=\034E\305<L&\215\274~\332\277<\007\271\270\273\360]s=\225\354\215\27434\345<Y\222\332\274\322$\365\274rV\236<@\336\332\274\016O\032<\333\237\220=1~\344=\357u!\272\3608\206\275&\036\226\274j\250\333\274OH0\274\223e\030\275e\311\243=e\030\033<w\202\367<\0261(\274B.\221;;\"d\275\367vr=)3T\275x7\303=m\210\032=\336\024\006<\347\262H\274\264\255E=8~!\275\003\356\034\275!\240{\275Ei,=\361\256\257<\017\340p\275akS\275\244\314M\275\204 \031\275\244\021\275<\242d\225\274!A\276\274q\0254<\310m\003=1\320y\275\310H\312=6\027\216\275u\372\021\275\016S\034=n\222\020\274\004\216w=\240\227o\275L\350:\274$\373\335<\363\200\005\275\256)\325<\213\021\313<R\307\235\2759#r<>5\3469\320\027\300\273\230\216\024\274\334\226l\275\372+R\274v\0238=S\337\030<L\232\360\274\22609=\030;\225;\333Ng=\332\2562=\226\"\301<fZ>=x\264\177=\227\0028\274\314\220\033<\302x\267=\017\314\t=\216\245\255<\304\033\001=gD\236\271d}N=o[\314\275G\230\020=\235\256\263<\357R\020=\r\333;\275Q2V\275\273\264\016<G\033R\275\375\017\221\275G\220\210;\252\271\322\274\231k\016=\013B=\275\324W\274=\276jP\274\354\226\327;\272+\325=\233T\233=0\312\025\273\177\276\356\274\'\3219\2754\326K=^\305\255\275\350\212\362<\3130m=5_\025\275\245\222\274\274Y\212\\=\356\345\263\274P\213\317<\237\"\246\274\263\333F=\350\242\356\273\356\252\202\274x\343\320<+\363\341\273\323\223#\275\375dm<\236D\005=$\322M<N\340O=\370\035\274<aW\377\274,\261\372\274\326\256\021=X\274\024<;^\245\274\332\240\227\275\355\n\203\274Oy\302:\376\277\317<ZI_;\255U\374\274\211\213\243=\036\004\263\274(\230\335<\006S\002<\277]/=l\300&=\307YQ=\333m\271\274\355_^<\216at=\350\206$\274\221\222\244\272\267\003\264<A\232\022=\322\240(=8\0103\275b:\217=\320\346\330<S+\016=\364\224\276=_\376\203;\263\313\201\274\'\020\322\275\303N\210\274\251U\231=\222\222\016\275\250\233\206<\030\306_<9m\335<\204{\027\274\304\233\217;\250t\226\274 \333\254\275\246\016\211\2747P\266<G\373\273=\014\"k<\261\t\241<a\034\035\2759PA\275P\201g\275=\334s=Af\017\275\314k\"\274\033j&\274Z\007\230\274vf\240=\231Ed;N\242b\272\322\207\327<S\2337=\n\236\204\274\225D\221=<H+\274\220\242_=\241\273u<q\236\034\275\347\354$<tf\030\275kP\226\274f\230 =\225[\326\2749\016\331;<\221s=@\327\367<\240\200\266=\201R\257\275\276SK<(t\032\2749\347\215<\205\342\016=\177\221o<\003\331\323;\213,\223\275^\013\031\275\332h\227;\266\030\"\274\374:\244=\236\225\214<\204N\331\275O\360\261\273\316H\345\274\242\014\002=\020\373\017=\234\327\275;\001\333B=R\000\220<\266@\205<\007V\010=\211\326\256=\211Fd=9\356\351\272\343Z\035\274BF\327\2746-\231<.\207u=a\034%\2747\233D<\212\357~\275\017\215\033\276O\024\340<\237\340.\275Dg\211<\364\227\031\275\326\2764\275\271\335\035=\212o\212;\022\352\376<\022\241K\275#\212&=\343q\266=\300\204.\274\033\243\033=\343:f\274g\035\231=7\260\347\274\337=\323\273kFX=H;\255\275\345\355\256;\362AB\274|\031\217\274B\367A=\263\310\014=\205c\254=\276\316\356\273X.}\273|\331\352<\341\261 \274\255\263\256<l~;\274\r\377\304\274\"Z\320;\271\037K=\324\302O=\321\035N:\027K\211\274B\002,=\0352\324=\362iV\275Kv\213<*(\000=\n\253\260=\264\366\313\274\2214\236\274v\255\004=x\034\241\274\240T\207\274Z9N<6f\372\274,\371\326=:\274\246<3\031\220=\314\276\232\275\206\225\317\274\354\326\256\274\265^ =\301\361f=\260\356%\273\0360\357<\375\247n<\334\361\027=<\0065=\206(\213=\3403I\275{\227.;\010\353\223\275\'\007\202\275\361\032\260\275N\033>=\014!\332<\322\270d\274\005\024L\275r\312~;\352\010\256\273\212\226_=MIR=\247\"\365<z\036\026\274\260\211Y=\263\262\356\2741\361\177\274\260\216\340\274K\211\032=MG\262\275\255\237\324<d\346\240\2751&W<\315\265\002>\205\316\224<\336^W\275\265\002\304\275\255\033\271<\023\036X\274A:\001<\210~\243\273\3432\223\2743\261/=\002G\301=\027\260\204=x`x=\031\"(\275&\005\323=q\326#<\207\367M\274\217LH<`\3257<rzY\275\312\021H\273\271\303w<\300\006\302<F\016\207=sx\203<\274u<\275\342\352\235\274\221[\226;\330\303E\274\345]\206=\376\234\316<\010|Q\274\360\337\333<\036\0360=\346\324\347\274\337\211\205<(P\217\275\363\335\217=\340\351S\267\004\036\001<P*\\;D\351%\275\235\"c;I\276\021\274|\316\033\275\202\216\327=\224\273\311<\367\2073=q9*\275\273\030.;\252\351\271<\\0\303<v+\255<\256\273\377\274\"\177-=\244\310$=\373\360|\274m\251&=\233I\220=\032\203\245<\324\'n\275\250~\"=#\203\344<\203+N\275\217\0146\275\263H\244<\255\022?\273\264\307\031\275\333\250\311\274\330q\214=\332\377\215;\223\262\266<0\021(=J\"\315=\215\336M=w\037@\274\315D\014=\250\207/\275\010\334\254\274\376\276\r=K8_\274Ad\271<\265$\304\274`\204`<\205Fv=\224\372\022\275)\023\005\275\207\251\334<\307\227\207\275\005wN\275_\021\352=l|\264\275\306BB\275d9\261=A\345\237=\2061H<o\341\211\274\276 \320<\316=\031\275\254t\035\275\025\323\232\274\253\372g\275\373\010?\2758\250\260\273\334\246\275\274hE\205=\177\201\205\275v\266\303<\225Zw\275\363P\211;-\315m<\345#P\274\312\020\242\275\222ZY\274\256\250\312<\226f\013<,=\245\273\003Od=s$\"=\034\2418\275of\201<\214\347\226<\324)h= \273\372<\231\275\372;\271\352(<9~\274=\272\312=\274K\257G=6Y\243=C\000~\275\226\334i=x\004\226<\013\205#\274\363V+=\213\203\361\2748\231J<\215\354?\271tAc\274>\232\201\275\017V\222\275#uQ\275\256q<\275\320\273\263\274k\032/\275\030VF=f\213\240<\000\n\216=\"\343\276\275\336\177\273=\t\214O=\224\200+=!!\326<\224:\324<\203\317\221=\204\260\345\274q\310\210=Q\303\252<\251\t\020\275h\352\334=\275{\032\275X\201P<\305\3335=\353\2103=\355]h=\263u&\275\013\317\302;\t\240\377<M\037\227</2\r\275\\\315G<\273W\243\274b\327]<w\364\345\274zf)\275xi\377\272%\346\257<D\207\202=\003\275\036\275\244\272\r;\307#Z\275\235\375\232=o\200Z\275\225_\307\274\"\237I=\206C\014\275\252\373o\275\210\356\274<\225\031\177\275\363\320\216<;mF=\351i\277<\224\357+\275\342\204J\274f4\227=\374t\030=i?\346:\003\374G\275\rk0\275\300\257\244=j\230\344;u\363!\275\240{1<\321\241\217=\0329D=%z\"<\372D\n\273F\360k\275\3510\213=\370\014\\\275YI\213=x\3433\275\010Mn\275C\311c<\236\316(=@)\003\275\250\032\025\273wu2<;\200(<\243\345\340<\363@K<-\"\342\275a\206\220\274+b\245\274\313\364\262;1\205\211\274\006\3107=rK\352<\271@:<\227x@\275:\266\356<\331Ve\275`}\377<\307&s\275Ux-\2753t\232\274I\270+=Z\243\016=\0160h=\206Zq\275\201\r\241\275\213\227>=\020\365\261\274=\307\301\274\363\263\001\275\017Rg=\236\315Y<\006\370&\274n\340P=\035\2231=\342\275\204\274\3059L\274\244\352{\274:\007A\275i\277\272\272\306\010\025=\244\025\207\275\177\302i\275g\236\034\275}\236\247<\331\307+\275!\213\r\2755c\361<\251\037\236\274)I\013=\334\200\t\275&\300\200<\016\001\333<\277\007R<\036\213\351<\n;;=\230jc;\215z\231=\355L\322<\225p\347\274\343\263\305<1\254<\273%%9\273\327\270\017\275\266\216\007;\024\3420:+r\275<\276\036#=3\273\231=\362\354\024<\262<\272<\320\263t<J\017u<\367$\027\274\023q5\275\222\224(\275\271\ra\2755\312\034\274c`$=\226<\224=\353\325\203\275q\2232\274\213M\337<\372\005\334<\033\324\203\274\275W\207\275\312s\n=\341r\234<\210}\221\275_c\204\275\0357\273=\027E\n=\240\314N\275\353 \255:\316\245\370;6\004F=\014\301\334\273g\te\275\006K\217\274\242$B=\253\262\023=/ \017=\353\332\"\274\337]\006\275%h\020=\315-+=#\263\036\275\313^\021\273\216\321W\275d\233\307=\274N\233<\316\"\227=]\205\203\273v\257n=\256\305\276<s\010N\273\237`\200<\322\242\334\274\263\207$\274\314\224\203<\271\013\001=\376\351S\275y\320\321<\013\237\320<\226\010\322=x$<\275\332\343\204\275\203|\222\275\213@Z\274\242~s\274\333\245\017\274\311\215\275<\207\210b\274\224GS=~\276;=\363w\277\275\256QX\275\013;\020\275\342\032\356;\206\210m\274\301\315==\243\315\320\2745\375\375<\241_<\275\031K\356\274Cm\376<\231>\250;\212[\343\274\301\\O\274E=y\275\033*c:\202\327f<\266\237\007;6\337g=o\345\020\275\"o)=2\307\356<\201oP\275n\373\302\274\014\034g=\340!]=\247\300\274\274\331\237\214=\260\303s=\343\314\005=\247.\026=`\354E\275,z\364<\202\206\257=,\366\223\275\210\334 \275U}t\275\3450\020=e\206\023\275\206\251\226\274\265\335\223<\356\343\262= vR=7\210\202\274m\224\t=U{\362=\271\302\317<\271\233h\275\203{\213\274\361\261\322;gK\003\274/\027\247<p\321t\275\275\030\340<\254\302F;\321\254\310;\035\237\022=\255\353\214\274\356R`\271\037A7=7\202\347\274#\234o<\264.J=C\031\252;\240\r;\275qe\245;~\304\211\273m\336E;\363\354N=\301\245\234=\2714\200\275\214\016/<H\331\254\274\342\256B\275\370\rP;\363\211\027\2757\351\010\274\220\203\314\274\200\3033\274a\327\350\274(H\257=\2250\027=\347\345\010=D\324$<\3354\241<^A\310<\271\013\261=h]}\274i\022\007\275C\2617=\031n\266=b\200@;\215,\003=\211\310\254\275]\243\035;\016\247\001<-w \275\211O\221<\n\234\226\274\032\262\202\274k\202n<B\271\345\275\177\021\254<\026/\273\274\250^\321\274\234\340\211\273\373\310\'<\351\322>\275*\274K;^\305\245\274[\255.=\010\277f\274\333m\000=x\035L\275-\356r=\023\014P=\245`\264\275#\025\361<p\253\204\2749\377\237<\3333\257\275{s\316\275\240\316\302=\tX#<\373\3143\275H\210U=\361\256\215=\023q\241\275\306\251 \274\337&.=\261\034\244=R~\374:c\332`\275\212\253a\275\217RP\275\tM+\2754\265\266\273d-\201=:d)=\014>H\275)\215!<\332A\301\275\265\n\235\270\024\353\270\274y\257\027=\361\227]</\000|\275\277c\025=H\324\320\274\206\355L\274\354Y\222\274\337,\365<0\312\374\274\346\226\031\275\236rR=\244\000H\274\310;\221=Zy{</\034\260=~2\026<!w2\275a\346\326\274\003\345:=uZ\023<\026\177\\=\341N\200\275<\256Q\272\027\247\252;V\310\020\275Yk\213=D\254\030=M\252\212\274,\332\\\275\273\307)<\030N\255\274\032\217\241\274&8l=\023n\320=\267\370,=\t\332\261\274@\324\204=\250\177\327\273\013nD\275b\275\276\274l\"\351;\207\001\344\274X~g=\027\027}\275R%5\274\013X\2079\025n\210=8\032$\275\2214V;\277%\030=\331\357\320\274L\020\033\275Y\242X\275\2729/=@l\307<&\245\315\274\227\250\206=\276i\355<\321A\207<\357\252\254=i\3017\275\220\214\376<H\352z<\255\233\032\274\3459s\273s\024\200\275\242\315k\274\220\216\024\2756\2719<m\206\275;I\3716=k@\302\272\331\r-=D<1\273/=\261\275\031\035Q=\014J\330<\\\310==\230s\220= ~U=\217\0317\275X.\200<\322\\,\273\253\330\230<;\214\034\274\224\034\251\275\203\373\270\273\244\271\025=\232\216\021=\234[8;\332\211\017\275\035\005V</]q\275\226\310q=j\250\366\273\232\177F=\000\363\226<\210ig\275l\243\244\273\341\316\256=\304t\252<\315\256\221\275\322\232\215<}B(<\312V\242<\207=\034\275Q\333\302\274\014`\010\275k<\357<\006\024d\275N\'{\274\232\035\373;].\356\2741\2453<\265F\335\274\307\345\204=\'\340X\275k\247\006=d\335\265\274\260\001\251\274\"z\226\274\362\232\252=\025\254(\275\212\372{=\367@\370;H\014\351<\365\212l\2751sZ;\332\342:=\274\234#\273\324/\022\274\263^k<j\343\237\275\377\374:=\341\365\017<\346>\260\274\272\177\024\275\022K\277=\035)\002\276\177\177\332<\323\003\312<\342\240\207\272^;\325\274x\022\r=\311\016\232=\246#|=\223\346g=P\253\250<\320\312\206\275dE\200=\276\2567\275\001\270\313<\341\367\031=\024\351\003\274*\325\302<P\367o=x\346\264\274\344\352I=b\235\007\275\023N\361\273\374\247+\274\274)X\275\355\314\020\275$\265;\275\030\r2\275\220\031\223\2723\317O\274N\202\202\274X\2758\2748b\016\274!-\020<a\"`;\206\245~\273\200\216\313\274b\272\374<\376\3671=W\363\271=0\035\215\275K O<Uq\207;\343h\206\275\373P\250<\024\3732=\316\233M=\236\324\020=\340\200a\274\264\364G\274\247\013M=\201\200\261<\324\347\273<h:\353<\245\\\245\274\214\030\031\275\250\305^\274\013\034\006\275G\376\335<5\371w;\204F\251<\300\025O=\"\276|\275\t\233\241<X\372\336\274J\232(\274\367\366\340;\003o\010\275VS\000\272\302\334\201=[F>\275\214\"\237\274\263K\254<\253\252\310<\346i\t=~\255{\275\201\262\030\275\303\'<\274I\343f\275\336\035\257<\267\257p\274\365(.=?v\241=x\312W=\371\217<<\027\266\242\274\021\212\360\274Q\234_\274\274\202\226=\035\025\365\273zZ>\275\316\252\307\275\245LZ\275\266w\304<[v\'\275\327^\304\274\347 8=\216\003<\2748\344\201<\361\240\311<b\300\010>\323+9=r\0175=\250\022\245\273\321\230\023\275>j\334;\242m~=[\200@;\271\375\246<\311\024\377\274a\276\206=\332\243\205=\264u\202=`\206\263=L\371\024=\027&\357\274f\215\213<6@ \273l\'\033\275\305\344\331\274I<B=!\256\202\273Bm\t=+\261\264;\211\237#=\336\305\302<\311\251\372\273\304\021e\274\363f\017\275\020\304O=\317\366\221\275\222\305\214=\342\235m<\325\363\341<cw\025=\022!\\\274\304\273\235;PT]\275! \263<\370&\371=\257\332\216<y+&=\232i\302\272\201\014\034=\233>\003\274\2610\247\275M[B\275\340\014h\274Tm\002\275\023G\"=\356?\337=2}\242=\222dP=?\332%=\313\347\234\273\261=\n=,v\036\274K\373J\273\346\313\006<\3574\310\271B\005j\274_\343\302\275o=\251;-\200\250\274\310e_\274\276\002\320<\322g\255\275/\321;=\304\210\025\274\247\343\301\275\363O\246=\036V\230=\037\375+\275\262\306f\274h\026{=CWk\275\261\010\274\273\210Q:=\001\307F<\343\372\020=.\373\036=\263\302\016\2754@\217<\346\350\277<\024`\027\275\274\315\377\274\353\ne<\271\220\201\272\367\237#\275\000\344\224\274f\356\204<\002\300^\275k\264\222\274\252\213/\275\363D\330<E\034\026\275T\335\367\274\200\243\241\275\017\216\232=`m\325\273L\313\035\275\264\022\245=\033\343\025=k\377\226\275\343\203\205\274k\357\021<\024\332\337\2739\262\201=\252\223R\275\036\214\007=I\276\246\274\224\346i\275o\347\201=\206\340\276<\026\347.=\371\031\224<\263\230\271=\"5\204\274\253\251\250=\332\334\215:/\306\367\275\250\201M=|s\205<\246\213S\274mw\361\274K2\206<\366\364\3639\335\257\216<\223\241\030\275;\253\354<4p\242<\310Qd=U\230,<\203e\212\274N\372d\275f\207\302;:@m<*\351\202\275\034\306>=\360\353r\275\t\270\302=\264\331\243\275\373M\020=\350\267\246\273\177g\220<\320G\244\274_\247\251<\251\034\203\275{\324==\257\214\016\274a\304\034\274G\352\257<\t&\034\275@Qi=\265\304\234=i\351l=\244\376\201<t\212T=\022^0=\271\r:\275M\206\306\275\321\241Y<;0s\275\265\343P:T>\"=\214\275\r=\356\351\352<1\244R<\314\2728=\230\207\266\274\273@\200<\217n\203\274\014\375\234\275\266y%=\300\354\353<!\346Z=\200r\314\274\350\347H\275\314\320\353\2737\373\002<\221T@\275\322Y\n\275\325<\000<l\211\364;\217+s<9\324\r=1\3142\275k\320\306\275\010ox=\331\007\270<\032[\214\275b\220v\275\016\224\004\274G8)\274\223i\025\275\020\230\244=\211\027\262<ki3=\344\344\253<7\022\006<-\307\023=\235\334\n\274\221=\016=\033\375\211\273tZ2=f\270+\275\"\311c\274&\340/=\205\235\362\274\232_8\275\005*O=\372\'y=2\271-\274F9\003=l\0317<5\235>\275U\226x=\226(\305\273\334\367\223=\271*\377<\264\347\272<)si<\365\003Y=Po\216\275a\204\201\275\350o\270<k\2441<\337\0354=\362:\245\274st\236\274a\303B=\350\353\224=\036\242F\272\001\254\025\275\237\274\307:\215PH=&W.:\276\341c\274\311\225\313;\260d\326\274\340\302L\275g\274\216\275\324\213\262\274c8\320\274\n\274\334\275\025)\303\275-\037\243\273\351\210\354<K\363\376</qi\274E\364\024\275\014\345\345<\211\373z=\030\314\307\275\204\202\222<\221\027A<\010\032\021=|_&=\342\306\204\274\\\364:\275\335\345\261<\320\360Q\275\352,\244\274V\354\255;\377Q\372\273 \237\031\275\335\326\226\274\210\261\014\275|\331_=\311t\261\274qQ[=%T\230\273\024\360\t=Bc\223<h-q=A\277\337\275\275=\024;\332|\254\274}\036\344<z\376\265=\346\t\274\274B\"\247\273\023\255\273<\021\326\033<<\221+\275\366\264\223\275Y.z<\257\265\276:s\216\002\273_\263\001\273\306l\021;\244\256u=a\\m=\032\304\222<\021K\224;\026\205\253\274@\242\000\275\325\341\272<(L8\275\356b\354<\240\234\224=n\305d<!*\267=\225w\035=c\353\r\275\035\330\014\272\326\200N\275\037\222\277<\211\303\274<\317\234\231=\234\252\031=\377Y|;\241\020\245=b\231y\275\342\241\277\273P\006\345<w\271>\2753Z\237\274\265\224\000\274\350[\037\275\233\236\021<G9q\274\030J5\274w\317\301\274\302\005\034;Z(\031\274\013\327\003=\311\"~=\034\035\246\275\340I\030\274[\364\270<,XX<;J\035\274\265\345\371\274\024\353\026=\250\021\362<\320q\266\274c\336O;\033\000\241\275L\247^\275z\037\022=C\024\303\275\264!\"=6\260\341<]t\222\2733\026\366\275W\277\266\274\233/\207\273@\267]\275\236\222\034\275\034\233\341\274\266\355\201\275\335\352\227\275\021s\243=\213\361\014=KVG=\257xa=\265\222\216\275\265\312Z\273\316\272\323\274\223C9\275H\252\024=\013\310p\2757\317\033\275\200\302\352<K\327\267\275\271E\t<\343#w\275\202}r=\344\306\233\274\030\263\304=\006k\031\274\362\007\221=%\363\226=q\334E\2751D\367\274\352V\216<\3729D\274DY\007\274\240\211\002=\365\321\213<o\263f=\325-\000\275\017#K\272$\337\004=j\037\256\274m\003M\273\346\002$\274\347\257\232\274E\370\305<H}\352\274v\343s=\212\342\007=\ny\206\275\324\247z=\261\313+=\010\335\007==\313\"\275\314V\370<;m8\275\315rJ<\022\3374\275 \016\334\274$\004\270<\250/\266<\344=G=p\207\212\275\230\252\330\273EJ\365\274\206P\326\2747\267.=m\357L=\246\326\231=\255\221y<U\310\r=1\240\236\275\r\215\324:\353\330J\275\310\030\246<\305ic=\302\023\205\275\367\263\3279K\2054=\205\345\301\274\n\007\306\274\347\214`<\274\222\263<\002\305\021=.\332\021\274\224\240-\275G\345.<p\231\t<ws[=$g\256\274L\214&\275\273X\245\274Z\217\205<\306\301b<\t$\003=\327\262~\275\312\352\263\274Tv\330\274A6\212\273\262/\022\275\242\026\310=\010ig\274y\311\272=8D\317<\026\252\201;\250\003j\274u\r$\275\373?\207\275\000:\024;\210\343\212<<\025:=?\270\216<\"X\345\273\023\023\177\2758\352\271=wX(\275S\333\225\275\336)2=0\002\320<\314q%=\030c1=\264S\373\272\355\225\243\274\273v\207<\220\202s\275\333\375+\275\202\206\324;t\333\331=\362\216\252<{\363\277\275\2735;\275TAe:1\020\022\274\262\340(;\317c\340\274\276\242*=\264\006\010\275\236\341p\275\343\265\236\2741~\315\270\246\316\351\273\246\232\257<\365[M\275\320|\005<\344\0140\274[\251\215\273v\304\021=#m\311\275.\035\270\273\267\016r\275M2}=\352R\265=\367\372\024<C\340x=\347\016\313<\332\375F:t\2179=\216;\213\271\026.\350\272K\033\345:\201\004W\275\301ui\275\\\2312\274\314\216\312\274\000\223\244\274\311\177\336\273\020\233O=\260~<\275\347J@=\242)\204\275%\247F\274\364%\345\274p-\245\275\240\334\303;\356E\200\275\336f\347\274\217\235#\274\033\366,\2752$\211\274UM\025\275zH\255\274\245\345\215\274\0231\224\273P\231\336\274,\004\255=\336\350r\275\344Dp=\262y\257\275\203\252P=%B\241<\234\007\\=\344hE\275\016\326\314\273\225\340\237\2758\367\367\274\031\260\002=\203\326)\276\252\206\001=\345\007\323<\254\352e=UO&=:\375\371;}\025.\274\304\325E\275sV\203\274\367\233\025\2740O\203<\357\346A\275R\242\277\275\330?^\274\220DS\2753|\014:\026\252\350\274\014\363\305\275\006\324\025\275\274n\033\274\335\250\037<f\337\335\274\200\374\025<\273<\201\275\314U\036=\031\274a\272\000\323\022\275\016ZB\275\364\243\005\274x\274\233\274\316~p=\330?\256\275c\001\002\275\356\327\251=\207g\305=\225F?=\365u\266=\n\354^=\237\307\245\275\207d\204=\370=\336\274y\215\223=\264I\371<\330\306\360\274T\263X\275H\266L=\277\334n=\374\024\314\275\020\306\211\275\260\231&<\343\025\323\275_\215\031\274x\217n<)\000\200=~\274\256\274j\177\367;\250\355.\275^\3174\275S1}\275\357*E<A\210\205=\006\223\331\274\224%\311<\221W/=\331c\021=\315\3446\275\246\264\343\274\021\367}<\272G\357<\033\025\303;\306\336\254<\377\243\206<\224\254\220=[\264O=h\001\216\273\244\236 \275q\241\264\274\304B\200\275\321\263\364\274\342\t\276=\345\256\347<\242\250\025\275\315\007\\\273\006i?\274\234\365f\275\360\375\373;\254\367\022=\335(\373=\217\353S=m\334\332:w\267E\273\204\355&=\25192\275=\366\225\273Y\316\235\274AP\000=\\L\036\275?\302\233\274\177S\252\274o@\032\275|\336\323\274\262\016&<\214\332j9%\312]\275|+U\274G\336\231\274\246\006\266<\001\025O\275~\237\201<\230\351\032\275\276\274I\275W?\257\274\336v\374<\352\004\276\275\001Y\210<(.\231\275\271t>=hT%\275\263\254Z=\251\215|=\341{\022\275\334E\023=\235}\215\275B\254\3279\374\312\r\275;D\266\272\310g\003\275p\346h\2744\342)\273\256\022)=\020\222\330\274\257>\366<\017\0350<\010\270\313\274\203\310\202=)~\t=]\035\230\275\255\307\313\275\205\353\313=\327l\271<\261\362\262\273\334J\272\275\251t\024<3\357\206\274\035]\305\274\004\322\377<P[\212\272\331\021\201\275\226n>=\260\200(=\337!\320\273\347\210\271<$7/;\243\000\306\273E\2624\274\200\021\322\274\001\220\275\273\272!6\275\3750\210=#\353\330=\241@\236\275\316\001\234\273\257m\300\274\217,T\274\t\204\327<\242\340\261\274\227[\313\272\356\003\361\273\177\376\272\274O`\216\272\246\244\007\276\304\354\252\274\305\306{\275\351tw\274F\\\t\275\232q\036\274\346 \236\275\230\235\335:4\322\255\274u\267+\274\260\277-=V\206\262<;\211\207;jk\204\275\224\276\224<\357\311g=\232R\327<\032\322<\275v\234\030<\323\367\220\274\355\352\337;\376\250\241\273nV\260\274\214\205\001=\257\351\300<\267\302\257<T\351\026=U\2220\275\027\302-\275\"m\254=\205D3<|\010\016=\374\022x;\014?\331<h\200|;j:\2569\260x\363:\324\255\215<\"\350\013<\304\205\370\274\t\232.=\207\241\354\274\201\300?\271\2567\202\274\336\'|=\262\367\224\274\322\233\233\275\237x\245\275\003\232)=\0320F\275\210\370\010<M\244\036\273\\5\360<\251\010\224\275\367ek\274\375\313o\275q\223\353<\355n<<Y\224\224\275nB\017\275\240\351\225\275B\344Q=\\|#=\236\357\020=\240xi\2725\253\313\275P\323\266\275q?\335<\264,\231<R\355\037=\301p\217<\304\272\250\274\326Q\310=\215}\r\275aP\370\274u.\t\275\020\315z<\372\305\253\275\342{\007\275e[O\274w$\r\274\267\222\317\275i\231\030=\0337\005\275\344r\243\275*t\271<\334\330\014>\261\001\\\275\372\216F<\030\336\231=6\213\254;\264o\177<$,>\275B2\t=Bh\273\274\2442\220<\362Kc\275\213\003%\275\267t\016\275Z\001b\274\024$6=\275\020v\274\347-1<\374\213\261<a%\343<u\356\376\275Ko\003=\367&\243<\2739>=)\004\235<\n\337==@\226\304=\263\203\003=p\214\221\275=\371\273\275-F\232\273\241\264\200\275\024\022\363\274\r\253\\=(`\226=fG\200<\244\253\346;my\367\274[\360\026\275n\375$=\330\251n=\304s\217\275OO\t=HW\317<Ti\326\274fK\335:\364n\341\273\023\242\316\274\250\\\232\275\002\002R=!\317\017=N\332\337\274\210\321\220=[x\266:\276\021\225<f8\241\273\324\321\317<\031\270==q\273\337\273\0001\020\275\277?J\274k\256\264=\3365\300<\2078#\275\245\2600=\200\376Z=\001\212\315<!\332\313=\325O\025\274r\201\300\2756x\314\273\375\311\233\274\345\032l=/s\263\274\370\\\305\274o\337\221\275\352|\\<\204\243\270\274\263\025\222\274\025\317\312\274\341\325\251=\026\253\222\274@\002/\275\373\212\355\274M\r\223\275\346\334m=\244\204\362<:@\210\274Z\367\201=\243b\243<\266\360P=x\264\\=d\027\336\273rV\333<2\347\236\274|\3413=\214(\316\272\340f\037<l\244b=\360\366\235\274\242\214\035\274dJ\316=\334#\021\275%@\233;h\033S=9\2362=\270\314\356<$R\034;8M\331\274\212\232n\275\'\3253\274}M\257<\244\252\317\274\300\267y\274Ib\247\275#\025h\274\301\034\312;\257\346\264=\361\006\375:A\025\234\275\024\262\203;\252E\337\274 N\354\274\352\214\016=\2317K=\272\303\215;\367\371\253\275\020\010\240\275V\000}\275\324\243\332\274V\235\005=y{\226\274&\264\243<\327\334f\275b\376\373<o[g=-lQ<\314\241\237\273\370h\217\274\260B\n\275\362\001F\275\263\264\002\275q\227\274=B\305%\275hr\021\275\201\242b\274\013\237\201\275\377\324U\274m\362N=5\"\373\274(\326a<t\227\034\275\004\370C=\266\364\226=\251\233K\275\215I3=\03544<\346\023Z=\"\306\335<)\230\277\275\333\363`\275o{\021=HY\241\272\003z4\275;f\032\275U\304\303<\372q\210\272\351\355\017=\207v\'=\017_9=\217La\275\374\315y:\\\215p\274\256\272\304<wG\271\2749\345\205=X\253\343=\337\251u<\311\342\n<\362h\275=\203\325\374<\032<B\274\311\353\230=\006O\246<DZ=\274\311Xg\274\364T\010=\225\241\275\273\271\002\212=\3063Z\274\000\333u=\327]\245\272;5\030=\334I\214\275\367`\252\275e\310\271\274(\357k=R\347j\275\217(\324<\321\355Q\275-\320\251\273\213\262\271\274\254l\352<K\351\036=\232\341\021=\010\244\022\275A\0307<\316\350\331\274}\025<\275\355M\004\2753\302\273\275i\313\314\274\202\310\340;\215\006#\275\317\336\260=\227\370,:\003\320\016<\312W\r\274\225\212\206\274\255f\363\274\266\211\025\275\336\305p\275\"\374\322\274B\r\007<}\361\372<\266\343\032\275Z]\207\274\327n\035=o\307\002\2751\202\313<\230\257\375\274.\270Q=N\343=\275\376\347M\275\325lr\275\316\252\023=\2203\335<i>\232<\030\237y=\264\341\241\274Ja\265\271\253\371\365<N\362\200\275\232\000*\275\230\362G=\313\300K\274\221%\334\27479\274\273\374$p<\2528\203\274\275\332\032= k\236\274Q\001Q<\326&\024;W\325\201\275\340&\t\275\252D\220\275a\375\336=y\033\255\274\205\250\210\274\347\272\307<O\364\377\272\312\231,\274\354P\214={Hv=\"\023\234;0\334\305\275\241\026\203=\261\013\014\274\252WK\275,@\227\275b\277\314\274\263(\346\273\"\035\031<\305:\200\275!BW=\256\275\303\274\027k*\275\334\340\207=|8n\274\366\213\206<d\3221\274`r\207\275\255\336\335\274z\312m=\304\263z=E\000\201\274zO9\275\330{\242\274\2776/\2757\375\245;c2\263\274\025\275\324;r\371p;(>\250\274tt}\275\201\232\347<\353\300\036=\001\235\370\273\200\253[=\246\354$\2755)l<\026\233\r\275\023\211>\275\347\210\325<\315\213j\275\263\350\346\2731\212\362<Np+\275$\272:=9\372\002<\203k5\275}\374\253;\347t7\275e\206\217\275\223j\322<\020\327\321\274\020\344\317\273\254\306\366\274\256!\022=x\017\305=\243\221\227\274L\\\210=D\016\255<?\035B\274k\'\262\273\306I\027=\273\3546\273\020\204\005=\274)\262\275\202C\346\274\034\247F<)\304+\275\014\007z<S\337k=}\317\267\274\n\036\205=\316\237\310<\216\307\273\273\265O\312<\327\213\215\275\320\216\321;\233\332x\274wd7=\342C\337\272\224\272\034<~\232\021<J$\274\274W~\014=OC\006=0T\223;.\006u\274~\202\260<S\214\315\274\332\300\032<d\352w\274D9\263;\360\235\017=\307\027\254\274\225*V\275J\312\213\273hR\315\274+\234,<\335\302\002\274\352\303\241:)\233\264\274\3420,\275\262\221h\275GeG=E\0360\274i\014g=\261\332S;\005O\210=\266\333V\274O\001\205=R,\013\275.\2754=w\271\242<\354T\375=\344}\302;\n\315\001<\313\231\260\2755\323;=\233\306*=w^:=G\357\363<qx\201<\344\004\270<\n2\202=\341/\030=\214I\267<\000\344\006>\037Z\225\275\211\346{\275t\251\315:.\365\275:^\023~<C5==\214-e\275\326P:9L\363\037=\241\331\226=\307\033\226=G!+=\036\264\361\275Q\362\216\275\346\000\321\274\220\372\352<L.3\275\221\354(\274\353\273_<\376x\031\275\271`\216\275\215lF=\360\260\237=\377\276\265\271\273\255=;\254\351%\275\211\325\377<OL\0008\344\351\034\275[\006\323;\251\230\230\274\211\354\023=\334\"M<\225+\365<\203\232!\275\333\247\305\273\205b\200<H\377\232=i\321~\275\n\313\031<\365}U<\357d\210\275\330\022\213=\001M\252<\\Y\202\274\206u\201\275\"\\\335<rT\342<RP\312<8\276\264\273\276\021@=\207l\363;\2425\246\275\307\034\373\273\336{\010:_\272\216\275\'5,<\321Z\312\274Y\250l\275z\273\003\275\3450\030\2744\007\211<Qk$\276\306\001*\275\203\251`=\271\236!=\244\355\351<\271E\026=J\007\252\274VL\227=\301\010\002\274u\261p\274h\266\212=\202\236L<\316\265\217;s\\W=\364\233\365=\270\035\207:\354#\247\274m\361\235\274\202\273s=\177v\224\274\305q\233\273\322\304(\275\227\204\273<(\337[=\240\"5\275[7I\275\025\362V<`\243\307<\264\310\377<db\336<\206G\335<\217\016\310<x\215\000>\213\234\240\273\323\3274\273\357\353^\275\037p==Ax\362<\346\375O\273\375J\244=N\373\266\275<\270]<\373\006_=\306 \320;cH\205=\263\347k\274\330\326\357\274\221L\204=\242&\335\274\014\376\233<W\316b\275i\266o<\346\214\353\274!j\245;\215\301\000=\265\005\246<\226\013\237\275\346\246c={\352C=\366\252\207\272\365ff=P\t\305\2758\211\021=\026G\232\274\213\212\262=\357\"t=v6\262<}\261E=\334\364%=#1\265=\266\024\332\274\213\003\337<\363k =\366\"\374<\207\216*=\341\341\342\272&\205\227<\370S\252;\2666\301\274|\375#\275X\004b=:[#=\234i\336<\256\004\034<\034x\207\275\\\376\230;\005\264n\274\334\034\366:\000\342\340;=\2279\275\034\373\207\275Od\345\273\'%<<H\313\324\274\007a\254\274\002\273?\274\357\355\213\275\216\210(<W\351\212\275\201\257\211\274Nr&\275b\234\003\275<8\335<3\354 =\210\037\205<\355\023m\275\026\334t:\007v\032\273\233\002\221=5\366p\275\006\276\203\275v\317d\274v\243\031=\030\023\r\275\025\323P<h}H;\374j\372\2749\r\004=^\323\027=\250\243\177\275T\315\361;u\250\272=O\314\026\275/\216u\274\255\272c<\342\200\247=V\312&=F\220\303<?#\217=\013\346\304<\352\332J\275\002\320\366<1\020\226;\030\032\250\274\262U\333<C\200\370\274po\032=F)C<)\301.=\027\ti<\017\363c\275U\002\350\274Rs3\275\"+U=\212\327\001\275$\367\276=\273\322\027=\217\355V<\006\013t<-\025i=\236\024\310\274B\"\033\275C\214\262;\215f\003\275\001\014\217\274\020\024\351<i\331M<\232\320#\275*\301\240<\033!D<\201z\221\275n\374\010\275\334\231\210\275\301\342\270=\027\224\036\275r\246[\274k\225\371\274\026\317O\274\000N[\275\310\222A\273$H\230\274\237$\211=\211{\351<\244V?=j\326\332<\'>\022;M\301\316\274\224\222\370\273\364v\300\274\317(J\274\301\177I\275%\226\036\275\n\363\216\275\304\230\261\275\033\250\277\274\037)\027\271\300\215f;+\'\207\274\200\202\035\274u\346\331\274\337\316\217\2752\354c<^D\323\275\317h\035\275Q)\220=`\366J\274*\021\351\274\203\304K<\233\334\273\275\344\333_:\223\236P\275U\252\315\274z\267\210\275g\205\033\275\031\241\360;\242\357\005\275\304\037\203\275c7*\273*\002\250\274(\342\317\2745`\246=\270\263\331;\222\303\361<\260<x\275&\232B=\260\027\370\272rc\214\274r\000\024<\326\002\212<\000J[\275q7\243\275\243*\250;\202\304{=\351\206\204<\353\010^=R\343\310;\036\221\016=(\3010=dGa=k\317\240\274\255B0\274\350\004\215\275\006\013\245\275\313Y&=\305\033G\274\316\010\003\275\306\324\312;\223\303\n=\335I%=C^\334\275l?\374\274\254>\241=\341\367s<\301\344\023=\223\223\335;\206\375\246<\031\257\215\274\366O\025=4\377\256<p\321$<\335ec\275[\353\013\275\007\213\021\274 \031K=\223\202\236\275/\320\361\274\340\300\010=\251;\026=]\373\203\274\247\326\221<e;\213<\277\264\222<\330\360\264\274rt\021=@4\273=3\3641=\325\367\227<\033\223\246<\021~\253=\177\342`;Y3\031=L \007=\207\247\212<\361#\037=\364\024\020=XOY\274\347E\256\275\334\037%\275\325v\206=\214\241\367<\024\313\216; \353\231=\365\021\021\275\017\343;\275\317\'\314<0t\006<\024il=R\361\t\275}\301\271\273TV\232\274_\356.\275\177ML\275O{!=@^\031\274ds\006\274\341\246\031=\355\205\024=&\330=\275_\202\227=\2222\365\273\376fG\275\322\371\305\275\322\305\302<|O:\275s;\272<\0068\031=\342\276_:\356\024\020\275?Z\313=p\026\020<t\326\234=1\036c\273\277,b\275\354\215k\275\271\233\201<\355\177P\274z\004W<\335\013W\275\327ZH\274\204T\020\275\223\346\253\272\246\033\251\274f(\031\274\225\317j\275.6\373<e\346\007=g\024\207\275\36072\275n7(=\277\372\211=k\203\323\273\300r\031=\371\221\206\275+\363\006\274\354\250f\275\205\r\210=\247\234\263\275\314\276\202\275\355\334\244\273\210\240\205<\306\020\000=\343\340\023\275\274A\214\274\r\211\274\273\370\3679\275\213Z\244\273B\346v\275\30077=K\335\333\2748\030 \275\237\267H\274Gg\351<\241\314\205\272\014EO\273t-_\274\013\225\221=\337\002n\274\265\000\325\274\364l\\=\326i\353<\301\342\n\274\3527\326\274LGy=\317\217I=\216\306\205\275\036\322\\=5\350\026\274+\266\'\275\353\024\227<\362\032\241=\033\314\371=\261\223\025>\255\033\267\274\204\363\337\274\212\231\t\275\001MH;\002\272S\272\332D\212\275%\025\177<\254\004\231=\2409p=W.%=\271\205p\275\301\322\231\274]\306\265<\361\322\237\275R\233\200=]\277\365\274\210\315\235<ok\273<\361A\240=\020\344\035;\223\261\013=\037R\003<\"2^\275\303i\213\275Q_\334;\240$\034\275.u\234\273\271\210\240\275Z\026\010\275\233\374\033=\251 o=80\354<5\004B=\234\263J\275.\262\332<\004\304~\275\270\300\246\275l\341L=\271 {\275R\3043\274\302\307q=\240\363\244<k\244r=\004\356\\=db\026\274}c[\274\361M\n\275\034\032b<XfN\275\250\351\000\274\234\217\034\273\217Q]\275k\3648\273\306\213\026<bB\230\274\366_C<\212\202\275=\247\312W\274\'\266\314:\351\307\250<(>\237<\221+\333\2732]r=\" \330<N\330\326\274\302\371\025;\250\207|\275\222\200\271;\216\254Y\275@n\337<\344\277\256\275\006\345\020=\321\257}\274qN\210<\344)\001\274\330\220\034\275c\331\021<\367oY\274h\271|\274\341\352\005:\367\214\215=B\017,\275\243\2528=P\344\240=\240\361Z;\255\251\232;\215\212\234\273\244P\273\273\252o\357\274\342\273t\275r\376\033=\370-\375\274J\370\275<\360\227\311\275M\240$;\300\320\026\275P\333\215\274/~\222\275k\371y=\024\324_\274K\037\316\274\364G\316\275F\305\247=\016\317\027\275bE%\275\340\321^<\367~\341<\255\334\217\274$\"\213<^\242\035\274\256W\224\274\232\2759\274\036d{<\303\343\014\274\037\322\263;U\367\375\272\361YQ=\213\273[\275\206~\033=n\315R=\035!i=\243 H\275\251\\+;\326\245\374\274\2420T\275\035f\271<{0\316\2744\312\025;\027\244\350\275\033\311&\273\001\276m=\253x\r=\003\273\340;\352\217\"=qV\277\273TD\255<j\260\264\275\247L\235\275\037Uo=\017\236\245<\003\ne\275\336\306><\215:J=\013j\211=\260\264*=\036\"8=\316_\223<\266\027==1\270\305<\323\377\372\272\002\257\255<d\225\017\275\211\030*\275\304b\273<\227(\210<\021\206\253\274[\307\213;bx\032\275\2525\366\273\n+\217=\374\2550\275^\313S<P\260\371;\275\354\232\273fn\021\273p\336\016\275B\255\n\275+\000\326<\2254\315<~\227\327<R]\312;\213\007\313:FP\253<Yv\020=&s\020=\200\354Q\2755BA\275\0335\201=^)1\274\364\021\267\273\"K\001=\275~\225\274\362j\245\274\356a\317\274\333NI\275a\263\203\273RK\260\272\243\016\335\275\234$\273\274\221\256\327=>6\217=m\374\217\274\222\266b=F\274\341\273\027=\025<\266\264\375<\254\030\267=\204Rt=h\311\351\274\235.\017=(\271\020\274\243\346\036=\030\264b\274\202x\244\275\347*\346<\264@\263<\372\363\246<\013\207k=\245\236\033\275@\265?\275\333\255\245=\317w)\275j\312]\274J-\243=i\235\027\274\\\231\215=\266l\030\275O\022:\275\264\003~\275D+:\275\272iA<\030\336\361<q\"\251=xQd=d\317\027>\256I\262=\375%#=Q\335\376\275\301\276\225;\030\024\031<\007\326\004<\302\035H=\2706\204=\332?.\275b\323}\275\305\005\213<-\312(=\003\206\211\274\272\017\313<\030\014\332\275\344!\365;$\223\257<\006\025\342;?vQ<\374\025\332\273\177\007\016=1\334\206<U\027\233\273C-\247\2734B\036\274\016b\025=%F\334;\320\362S=\251\217.\274\257\026B\275>\211\304\275\314\254\203:`1\020\274g\025\263\274\225+\033\2753\2044\275\262\260\305<\020nR<\312\270\002\275=\222\032\275\005\371\331\274?\225\216\274L\347\304\275ch`<J\257\201<e\331\005\275I\313\267<\323\252\267:\346\302\207\275\"\273\200;a\241/\274\027x)\274q\354\345\274?\303\263\274\025a\r=*\332\236\275\335D\241\275\002V`\275K;\354<\275\356\n=\324/Z=\206\335\236\275\023\007\275<\260G\025\274-\270f<\006\252\351\274i\253S\275\375\322g<j\343\362<(\220%=\346=\036\2755r!\275v\254Y\272\017a\'=\343sC=TMg<\361\201\237\275\027S\200=\023 \343<\303\222}\275\331`\202\275:\216\314\273\321\366s\275\232\345e\275_S\273<\025R\324\274\016b\362;z\026\224=\341Q\211\274\364\3254\274o$\204\275sM\341<\230X\214=\322\375\227\275\224G\241\275\332\215\241\274,\323\007\275\227\250\323<)\220\202=\000\275\325\273l\250J<r\310_\275\246P\202=o\'S=\371\023\342\274\0359\n=O3\036\274\264\251\006\275\004\0036=\032\010\251\275r:n=\347\210\373<U\364\274\274\230u\214\274l\352k;\372>!=\270\204(=m|\322\274H\tM\274 \337\243<\275\236\243\275\273\200\212<\342\315`=\002\251%=\0228\"\274\327GQ\275l\037\235=\257\005\035=2\216\024\275\215\231\225;\032\375~=Ch\3009\246\302\212<!+\361;\207\323\322\274 m\330\274\371[X\274O\035+\275\277Og=10\237=R\317\022\275\236\245I=\306h\254\275\330.\302\274:\355\022\274A\014)=%\246\007\275\377\360\024\274\210\3426\274<C\025\275#\211K\275\031\311\024=\002|\262\275w\017:\275\364\305\232\275\235\3502\275\013U\202=`9i\274\362u\222\275\212\030\004=l\034\213=\021\254\231\275e\020v\274\370\355i\273Be\236\274\362\243\211\275\351\204R<h]\315:!\230]<\362!\246\2730^5\273\306\001b\275G\340\033<\301\350$\275B\331\177<\316\000\270<\230\024i\272\207\372\000\275\304\314<=\251\250\255\274.\355\013=\305\201J\275\n\376\332;\036\003\006=\032kO=\257\031\214<v\214w\275-\013\\\273\341\254\220\275W\003\230<\020\233\363\274\326\360\000>r\253\232\274+\3305=\256\327Z\274\202\310\265<{A\214\275\2455n=<,\036=\233k\233\274\233\372`\275\324\271\306\275\267\322\213\274\341a\244\275\311\350\177\274\025\323\347=\346\0072\275!\361`\272\025\244u<\363+@=3\013\241=\264\344\303\275\361&\304<U\332\023\275\362\327\355\274\215]<\273\206,\264<\256Es\274\213\311Z=\307\211\305\274\306\311{=`\3779=\217\261\304\273:\221\004\274ef\225\272\363\340\227\275\263Gu=\324V\224<\245 \231<\276R\037\275\310\225\002=\345\322*=\267\217\361<\203@\340\274\207{a=\225{\220=\271\252\177\274\013Wf\275\340\250H\274h<|\274\230\311\264<\270x\276\274\314\306R=B*/=\321\'\t\275\327^\213\275<\020)=\034\261\234\273\355\177 \275K\021\211\274j\2129=\245\214\242\274\261\033\'\273FdG=\006\357b\275\254\223B\275\003&b\273F\250\310\274\252\201\361\274\245\333\225\275A\275\022\275x`\231=!fr\275\243\010\274;\320\037R=>\342D\274?\223\202<\037\204\000\275\025A\265<\020Z\354<\337i\353=y\220\223\275\253\347\256\274\373\324\237<\315*F<\316X^<u\320I\274G+\242;\360g\022=B&\257\275\t\001\224\275Mo\202=\356O:=\336f$\274J\252o\275\013\000e<\331D\003<\024S$\275\346\370\177;8V\017=\316\232\273\274X5F<\374\357\r\274\221\340\320\272\264\027\322<\261c\217\274y\1774\275.P\220\274\302\317:\274\212\021Y=\266\340[\274!kN\275t\331\323\275\316\232c<\030@i\275I&\333=N\334\374;\233\237\372\274\351pq\273qd\214=\031fw\273\277\016\303\274\306m\210\275\375gS\274\\\234\220\275\234\032\223\274\372+\373\274#\223\313<w\034\334=\374\251\332<\275@)=\302\311\234<\257\372\240\274\343{K=\230\255.=LMA<\371\276=\275\312\244\327\273S\010\007=\341C\214=,\212\033<\331C1\275~\004o\273\311(d<\244\214\263<\272\262\007=,p\343\275_\303\201\274\250@\210\275\304\254\351<\362\351\263\273>%\017\275$s|=/%i\273\006\212\036\275\206\222\030=\323\252\301\274\214\221\222<\264\0304<O\352)=\2510\223<\325\037(\275\r\352\237\272\247\365)=<\203\037=\260C\234<\271\360#=\017\307\244<\216b\036\274RKc\274\240jC\275\237)\023\275\200\222c=T\201!=\376s\244\274{\336\030\275\242y\343\273\205\263\t=\013\362v\275A\240\030\275\220\260\344\274\370\252o\275\026\013\333<\031\036I\274\216#1<\224\210f=m\243\217\275\232\346\214\275\'\222\336=g\207\201=\266\nd=\312\020i=\2644\027\275<\324\202;v\202q\2755\315$=gx\262\274 \220\032<\023\333\017\275\031\232\341\274\023k\036\275\263+\026\274\013e\024\275\353\355\235\275\004\177\374\274\235f\245\275\253\221m<\264n\r\275DY\200=\354\035\266<V\313\216<\t\025_<\205\246\371\274\257\016\273<X\273\254\275\007\031e=Vj}\274%\rR=Lc\027=\334T\026\275;\351+;PU\240\275\t\362\272\275\234tN\274\226.\001\275\302c\240\275i\006\027\275\335\251\"\275\246w^\275\313\270R<W\215\350;-em=-\3468=4\240\236;\237\352\210\275\002\322\261\274\344\354\206\274\017l\026\274L\220\376\274\343ex\273\021-\005=E\366\252=Qf<=\302`\251=\366\014}\274\307@<\275e\302\037=r\006\036\275\007\251\370\273\330\232\t= \024o=\316Y\t=\206rN\275\313\355\206=M\n*\273h\'\235\274u_5=\361\230R\2735\300\001<\375\0147\275t\007\277=\300x\353\273\366\263\027\275\005\332\270=\023S\241=\257|s\274\312P\016\275<\324I\275\005z=\275\001\306\211<\241S\t\275\336\254\223=\322{\302\273Z^q\275=\343\336:\332\355\274\273U_6=\"\264j\275\013\016\275\274\240\234(=\265&\337\273\357\313.\274\237\307\210\274\324\204\032\274o\262-\275x\246c\274\333\037\235\274\003\270\234\274\267[\221\275\215Xd=\264V\016=\207\261h\274\353n\255\274\003>$<p\207\305<\221\373?=W?n=\003\001\252=\002\247T\275\325\375\014=KpU<\217\2158=*\273\236\273+\256\373<\370\004\225\274+\316?\275\375\201\023\2736e\314\275z&!<\"\2664<\223\004\233;M\237F<G4\262<2C\207\275G,\034<\206s\303\272\006\344=\275\255R8=\220\367\263\274k\0374\274^\365\350;T\305S\275~CE\275bl\027=\227&\353=\020\324\316\274\273n\212<\301]3:\t\000\247:\203\205\247=_\000\027<\360\035\241\274@T2=x\277}=\320_==\004\034\211=u\301,=N\2020\2736\010\004=\241ea=`\017\027=\260\274\\\275\322h\016\274\360/W=\366\310\023=gFm<{\n\222=\253\232W\275R\362\325=\3042\256\275\321{A\2759\221\035:|\263\t\275\360UB=H\322\320\275\032d\212\275\013Y\t\275\334\3118\275\250\210\363<T7S=(\004\010>\372dN<\351\247@\274\024%n=N\242>=\006\227\241\275\017\004\212\274\326\rm<\272\226:=\220\204\236\274`#5\274\357\037\275\275\375\235K\275\244\n\225<\352fY<\200l\337<N\352\211\273\343\212\003\275t\004p\274G\322\226<\212(\007=m2\341<\265]\315<\033\202\031<#\254+=\312\316i\275\276\372a\274\307\320\221=r_q=\310\242\241=\324,\231=mr\177\272\360\207\320<jb\034<m5\3069\001\327\025\275\251s\301\272\000A|=\3318\251\274gbH\275\315\311m\275q\013\241\275\017T\261=.,\233;\'\316c;\336-\232<-\205\237=\330\021]=\000n.<-\345t<G5\255\274\237\366\214=\302\353\005=\204H\342\273\255<\005>\246UO\275|C:=\242\007\t\275t\365=\276Sx\000\275\315\272\031\275?\017\312\274\213\242a\275f\307l<`i\220=aA\254\274\263\257.=J\262l\274\263.\315\275\272\325\211=\362\\T=\252\315\376<\210\033\002\275D\236\323:\247\224\240\274\036\242\237\274\364\310\343<\016,h<\373v\321\272\310\003\037\2753)\301<\320}\013=\232}[\274S\035\314<Km\220\274\013\364C=\020H\233\275\311\021%=\363N\033;\361\235;\275\t+J=\247?\231\274h\177H\275C\355\236\275VyF=\357p\243:en\305\271\311\223\3269\240\210\016=\025\016\235=\340\"\300\273+\277\301\274)^T=\n\024y=(\2109=\"\307\031\275\317\231\272=\356Y\274<\037\020\357\275\363\204G\273\373x\214\2753\336\032\275\347\225\273\274\233\303\274\272]\367\020=\232x\327<y\033\346\273#/;<\306\363\016=\253\240\361\273\265\211\202=\346\225\202\275,,A=\364\361\325\274\326`p\273G(\340\274\254\205\206\275Y.\224;\373u\216<gYB<\361t$\275\322\305\010<\371\347c=\360\220\365;|\347\223<$\270\341<\345\256\032<w\0350\273\307\366\220=)sd=\356\210\037<\347\342Q\275Q`@\275\221b\211\274\244\363\216;o\022\375\275E&\026=\233+)\275c\233!\274~\206\001\2754+\035\275\310Ef\274y\307\362\2747\341 \274\037\r\216=\200\352\274<\335\353?\275\370#\226\272\001P\003=xn\235\275{\320J<\332\014\\=\211J\345<\232\233=;\nEc=\263\256]=.\025R\275\304\023\353\274\331\305\330\274>\237S\275\360\r\270\274\032~\217\274h;\013=*}d\275\205\233\271\275\265\370Q\274\'{\224<[^\357\274o\010\362:8n\202\274\341u\301\274QR\\=#\305\353<\024\363\331\274@L\334<0\374\207;\353\356\356\274\270\301\004\2753,&\275Ys&\275\234\336m<H\306\275;\242n\250;\276\'\223\275\322A\361;\2243\210\274\\\030s\274\311\236\327<\356\373\004\275\221\007\267<\307i\221\273\"p\244\275!_\356;\272\256\334<\000Dc;Q\347\330\274\271\233\274\273\330M\n<\205\237\262\274y\263\351<\251\371\n\273}E\312<M\016R\275\2144\260\274u\277\312\274\206V(\275\204\362\006=\347\356\204\274^\277\301=W1\"=\251fr\274\332\314q=R\217U\275\253R\036=\312~d<\370AF\275\374?\237\275\205\204G=k\277\372\274\315\023\263\274\214P\023=\320\211\263<Pj\003=\022JG;\225M\004\275\200\206\263\2759C\202\274r\020\263\275\377\316$\273\006\177\320;2B\016\275*\366\223:\240\302\375\274^&9\275\177\256;<\276@\251\274N\010\341\273\221\311\200=\005\272\'<\343\304}\274\372o\377\274\340\325\357=5TH=\235\216\313\274\254S|<\022~M\275\301\222\025\275\324:\354<\205\336h\275b0\026\274\333?h=u\031f=yI\204\275\320F\245\275fj\227\274\325-C=\233Su;\237\303\347\274\036FL\275q5!\275\272OD<U\275\374\273\221\345\306;/\226\226<\031\376K<\031\247\262<\024\322\276\274\2357\r<t\257\231\273f0S<\014\n\233;~c\320<u \251=%\360\266<=\324\252\274\376\365\3539\036\245\005\275\337_:\274Q\234\001\275\266\320\242\272\341\177!\275\354\230\027\270?\022\303\274\325\r,<L8m<h\323?=t\033\366\274\201\022\020=\337\036\237=^x\257\274\351\227\250;\365\257Z=&\024\274\274\363\206\'\274\265Uq<\374\340u\273\266p\267\275\007\010\255<%d2=\256j =\005PK\274`\237^<\211L\223=\031\305\235<\243\211\250<\003(o=\276\017\346\274\301\205\256=\233\2463\274\217P+\275\331A\204:=\254B\2733+\363<\253g!=>x\022=@\306\361;M\010\357\273\3668\330=;](\275|x\225\275\313j\026\272\331\360\265<\324e\325\274\241\350\221<$4\022=\312Yr\275I\002|=\337\243\245\275\036\n\307<\237^ =rn\305\275Z\364x\275cV\323\274\320\177o=0\236\233\275\240D;=\306\007\035\275(\005\216\275\303D\200<\3553\237\275\306\177\247\273\343\010\237<\361*\356<\257q\260\274\200\254\343\274>G\202\274L!6\274`\315\r<\265\321\356\275\355\033n=\327,/\275\232\2566=\243H#\2755\271.=\212\235t=\230>\022\275W\2545\275\251 o\275\277\"\262<\375\241\"\275\347\350\264=\270\3757\275\000QI<)\213\252\274V-b=Gz\305\274\276\004\273\273\347\345\014=J\225\253<[5\027=\3760\215=\254\025\343\274\263z\235\275\226\213\211\274\341\372\227\275\271l\371<\237\324\007\273\'\266V=\0370\317\273\317\302\376\274IV>\275\3049\006<E_O<\231\242\346=\3179\007<\302\302\177=M\331`=f\341z\272\004\260\020=\034R\356\274\307i\327<\034\276\372\273}\212u=\272\244<<T\233\323\274\030\023\254\274\307\037K\275\243\372\204\273\270\246\200\275\221\027J\275\245\340\342\275C\374\t\275a\221\361\274\2757\237<\316VK\275\322\236i\274\370<\001\275s\327N\275d\017\310<bF.\275>?\236=\333\251W\275Lj:<\316\031\213\274\3201\t=\3105\325\274\251W\032=\214\240o=\262\343\257<c\343;=\347\245\247=/L\177<\335\2346\274\201\276\307\275\202\222D\275\242\2077=\307\240\031\275y\320H\275\204;:\274A\035\272\274\234\361\206=\373\232P<\247\201\345<\364\360\330<\342\330\242;\202\022\n>\367\t\021==Ny={JA\274\365ku=\371u\017\275\032\237k\274\210\345a=\300 k\274\354I\240;\301\361N\274\014\245\250\275\016\345\203:\027\2430=\215Yx\274\344y\\\275\373\343\351\274`bF\274\364\n\2459\221\260N\274\266\231\244=r\211\262\273P\002\360\273\022\367\225:+\305\254;\265\331\301;\236\003}<\307\257]:^6\271\274\013\354\234\275\355\244B\275\246\001\322<-l\367\273\303\273\375\274=\347\n=Y\025\246\274\222\301\003\274E^)=\202U\036=\316\214\236=\036J\332<LQ\001\274}Q\010<\215\252\226\274\370\0104\273.\370\2669vN2\275\230\230\220\274\220\370a\274\027.\222\275\331\004\234<\013\272\353\273\355\211 =$\\\036=\257o7\274\336\231R<\317\337\020\275-\360*=2\371I=\213x\214=\233\271\263;w\363\007\274C\357~\275d\236\024<\024\371P=\2102\216\275zD\355<\031>\023\274u\236\262\275\323\004\243<\r\352H<U\010\017=gW\327\274\356\343?\275\326\276\255\2740e\316;\250\251Y=\223\022\031=\331\273>\274s\310 <c\237H=\274[n\2757\013\261\275;\261\200\274\017\020\350\274 \034\210<c\277\000;\033\232\r=\016d\334<\226\275\027=i4\247=\200l[=\352\335\227=B\270S\274\026\374\264\274;\'r\275\317\213\313<\356*,=\264\3150=@\035\314<L#\307\275\266\362\317<6S\261\274\3442\210\274\373QS<\262\346\255\274B,\217\275\315x\231\274U\035\303;ev\333\274\360\362\257<\262\227\363\274\'\360\236=\357\207R\273\315P\275<b\306c=\212\202?=\225{\021\275\310b\255=,kU;\301\306$=b3\023\275^bd\275\2454\260<\331\032\314\274\276\035Q=\337\360\324;\033n!=\251\273\375\274M\014\000\274\273T\234=)\364\321\275\262W\237\274\240\250\214\275IiG\275_V\332<\204R\370<\374{\n\275\227X]=\251\312\262=N\370\311\272\330G\343;\256\312\355<\215\020h\272\203~\211=\365\216G<~\322M=,\303\352\273\237\"X\275vA\020\275\224\354\021\275\261\334\257\274\366\361\370;|\0273=f\221\215\275\323\017@=\3271\370\274\250\033*\275\244?\357<\314\334H=\374\307\002=o\336$<]f\217=(\025t=\021)M\275I\330\014\275\343\313!\275\244\3634=|s8<+\313\216=7\214W=\024\033\024=_!T\274{\013\242=\021\020\245=5\025\177\272l@f=x\376O\274Y\373\020=\305jN\275\374(v<6_\227=\351y\345=D\263\337=eJE\275\323E\204;\210jk<\265M\r\275\177\357\014=\321\233\377;\266\235\230=\271\306w=4\\z=\250X\305\274\321\243\350<\207\017\030<)[&\275\257\231\306\275/FU<mE!\275rOj\274\204\357\351<\037\220\346\274={T=\200\217\3238\020\026s\274\235`\231\275\t-{\275\250\265k=\r\342\3678q%\212:\362\242\024\275\364C\264;\364K\226\274^\335\372<A%\272<\007\233*=\314L-\275<R\323;\370\255j\273\332)\r\275\226\346\327<\277\365/;\221\021\026=L\301\241=\313r!\274\302\016\376\273\330~\035<\035\333\367;\002\332!=\r\3753\275\031F\266\274\355\215H\274\010\3572=\203\245a<\032\212\202\275wD\030<\202\274\231\272?v\245\274\326\023\364\274\365\242\220<\014\320/\275\323,\010\274\211\346\272<\016s\336;M\331\205\274\004\026\034={X\0149\272\\\336\273;*k\275_{\t\275\231I\253\275\244\317K\275\237\355U<\362\335\231=4\221E\275\276\0175=z(2<*\024\321\274\332\364\021<\303\252\254\274\351m\207<3\030\331\274\013\325\225\271\243\007\014=\364j\232\275G\304\244\275m\300S<\"O\262<\333\270\247=\334.E\275\021\342f<g\310f\272Kj\252\275\272\345y\275b\272\231<\353\0327=AD\215\273\004\037\002=\277\267\236=g\377\007<W\261\200<\010\312\224<\234h)\275\367\026\263;a\374\256=\350\231\364\274\030\257\310\274\003\344\006=\337B\266\2753\301\240\274\300\367.\274$\005\346\274\261\3621=\230mI=h\341\200=b\356\223=\001\355\243</\247E\275c\323\241<\316\274\227<\353\332\371\2749\327`\275\364\323.=m\214v\274\031\274\243=\324\234V\275_\233\000=\255]\024\275p\261\264\274K*\025\275Gx\016=\354\264\312\274J\261>=\\~\232\271\337\314\367\274%!\223=E\2144=\322\237\243=\256R%\275\364\256\251=\335\304\021\275\210Y\253\272\274+\347\273\356\322h\273\016+\252\274\023d\016=l\214G=\026\017\221\275\010\034t\273-\2168\275\n>*\275\031\230L=$\352Y=\357+%\273\274\205\245\274\331\327\300\274\342\276X=\212{\255<\370\312\247\275\200\215\224=K\241\346\273\357l\n=q\207\314<\233\035\026\275\200\330X=\2171\202=\316\305\263= WE\275\346U\311\274\260\251\326=\216Nk\275\331\024\376<&\357\314<!\242a\275\210g\315<\377\014\t=\362n==\241\201\246\2758\177\261=f\210\276;\025\355\t\275\371.\240=4\331\035=\306m\200=\344w.\274pu\n\274Fm\202=\260\364p=\003\\\327<\242\327\272\275L\203\205<\327\325\005=\210\326i=\370]\321<\310\"\022\275U\204\307;yy%=\013\315\302\274\277\305\010=\220\312\r\275\231\3304=\245\214\342\273\204ih\275\203+\010=\302.\307\274\301\303_\275_\320P<1\362i\273!\3430\275\367~\007\275\211\022\n=\352\027\307\274\210\314X<\316g1=\376a6\275\257J\214;W\322\344\274\221O\021<\235\366_\274!\237\203\272]~\251=\017\211\017\275\357L\272\2730q\236\273T\203\256\274\314Iq\274\321\206\217\275\227T\267\274\3303\016\275\222\220\177\275V\365\210\275\005\031q\274\213a<=m\343\';\004\300\\=\023=\246\274\253\225*\275\002JX=\312h`\275\036T\311\273\313\267p\275W\356z=D59\275\270Z\324\273\231\341\210<\032\203\216=\336\346\277\274\312 \257=\361\316\234<\335\312_\275n\315&=OB%\2752\357\222=F\000\242\274\376\260\027\276DLC=\0271\360\272~y%=\tl\264\274\333,\036=\254qk\272\364\002\001<c\242\203\274x\256<\275F\335\366\275J\324\207<\3337\035=\023I\264\275\357\026s\274\247\256\t<|\356#\275\255q\332\273\342\031m\275\245P\007\272\263\264\256=\303\235\251<\323\3642\275\346\310\246;\177\262\303<2\252\2726G?/<p\221\320\274\315{\365<P\\a9\326B\223<\202\007\211\274\366\271\024\275!d\220\274\353\222[\273\244\205\232\274!nx\275\302\267\224\275\324\257\'\275\334\204Y\275\024-\331<r \334<\001\200\333;\244Ai\275\002\377r=\325\2656\274\364\025)\274\341\324\273\274\267N\027=\325\033\013\275\266\r\t\275\313\365\014\275\331\342\332\274d\265\317\274O\035W\275\336Y\366\274\250m\016\274\354\215H=,QV\275y\241l\274\326\213%=\210:\335<\017\344|\275y\275\217\274\277MT=k\210\230\273\017\"x=\253Y\213;\"k\363;\022\n\310\274,\340:\274\333\327\224<\376S\354:\3210\250=\013\341\325=\227\314\021=\"N\003\275s\304\240\275\257\243E=n\216\035:\246\350\241\275\214%\205;rwy\275\367p\322<\273o8=\002\343a=\226\371\250;\246 \207\274zu\017\275\001@\360\273sN[\2748\302\r=QW9\274C\326\354<\010\345\273\275\372n}\275\366\024\016=,j\001\274\304\3226\274Uu\374\274w\325h=\003t\025=\301\253,<\364gU<\307\232O\274|\205\023\275o\010G<#\217\270\274\366\327:\275!\353\243<\037b\223\274\221\221\232=t\320\212;\377p\220=Kn\252\275\327\014O=\272~\001\275DGL\274\225\274\335<\n\216_=\010\254\270\275a\006\272\274\031\010C\275\000\257\301\273J-D=\375I\271\275\313\225\265<}\270\241<\377\025v\275\335\227\213\275D\242\001\275\002\357J<\264\264\265\2749\305\031\275\027\314q<\245L$=\367\205==>\362\306=\302$p\275\332\242d=\273\235\312\274\262R\213\275o&\316\274\222X3<\223\332\027=\010\226\232\274Aq\267\275>\306\265\273\2438[\272\000\305{<\305\025\206=\256\177\335;\310\375\001\2743\341\336<\200\331:\275\243%\346:5\300#=\260\365\222\274j\342\260\274\t$\'<=\300\005\275\221\352\303\275}\021,\275\370:\365\274(5\014\275\322n\201:R\367\004\274\277\241\240\275\010\265\033=UZ\240<\224\201J=E\020\321\274\257\353F=\301m\001\274\276u7<\307,<=\305\212\010\273A\204\332;n \037=\014av=\277-\362<\276\221\026<\301_\240<\371\3226=G\311\262\273\322\333\235=\345\300\021\275C5\317=AW~<\355\037\342<\344\026\032<m4K\274\031\301!\274\247\017\225=\323\306j\275\201L\270<\245y+=\035I/\275WP\020\275vGu\274t\270\232=\2426\264\275\2022\231=d\331\365\274\'D\004\273\361Z{=\374\000\263\275\355\316\243<\263\341w\275\366Z\367\274\370H\013\2741\247\035\275\026\300\261=\254\304#\275%\t\201\275f\276\254\274\355q\214=\203\3457<o\005g\274\336\205\302<\"\362\010\275\212X\013=\0305\354\273f\031\237\274d\341\027=\345\327\253=r>\017<\3741\031\272Vl3\275\204ym\274z\312\206:\350A3=\374z\242\275\235[{<\357o\250<\216\320<\275)\210\370\274\326\ti=u&\202\275\017R5=\027<\375\274#\237\216=T\342,\275\245\345\343<\343\016\024<x\312\204<F\005\254<8\315N=\352\214\221\274\305A\257<m\276L<`66\275\354\010\240=P\003\307\273|\353x=\036hO=\026Q\256;o\335u;\2640\356\274\372\315\304\273\021\376\236\274\372\324D=\236u4\275\220\334\262\274\272\350!=\335\002\220\275\364P\t<\225\276\032\276\007)\304\274\276\360M\275\340z\300\275y=\200<\231\310;\274\234u\241\274:|\300<QG\243<n\356\257\274\311\321\033\275\036\254\302<0\036\201=\r\236\203\273\251\316\255\275\303\240\314;\014\021Z\275\341\214v\274 O\247\275\303\376<\275,\361y=W~\206\274\222\215l\275N\034\235\274\\\312\344=\352\022\243\274\272\367\022\275\240:\371\274\265\322\375<]J\300=\213\227 =;\277\200=\375\363\211;]\233^\275\177\372T=\274\214\374<\007\366(<\345mC\275\332S\212=;L\200<J\215\222=\334\251(\274r\003\374\274\353\020\034=\307\320\200\275\341\257r=\277\027R<N>,<#T\010\275Z\333\030=|\371\213<\036@5\275=\204\212\273\305\204G\275\254\377\323<\340\357d=L\230c\273\356\'\315=\330\'/\274\020\010\332\274\263\225\037=\200\216\313;\216>.=f\275\215\274\026\212\t\275\277\024\277\274\377a)\275\357\2123\274\370\036\315\2745I(\275\020\233@\275\230+\014\275ex,\275S\313\256=\222\027\033<\205\374g;K\003Y=\003D\203=\344\260\034\274rU\326<\226\336\342<\005%\342\274\351\362F=\214\337\305<\031P\\\275>\376\263\274\214\032O<\377\365\205\275\250\013K\275\261\320\247<\005\'\364<m\375\237<eGv=\021\362\254=_\025\266\275[I\240<\2118\275\275\235\255\205\2759\362Z=\016\372\016=Q\027\247<\211Y\362\274\335\251\205=\302`\224\274\277\210\354\274\346\303n=\266\311\226<\333k$<\311V\312;\257J_\274\221\326\343<;\\M\273\366\332\236\274\270(d\275\372\213\264:[f\\;M\206\033<Q\230\234\275iI\254\271\364\212v=\367\352{<\373\037\341<\375y\267;F\303\211=\257\rw=\2120\270=)\230\200=F:\241\275x\256\226\275\212\363\301=\026\032\205=E\240\007=j\031}=7\264_<\000y\3039\004cZ\275S\310\035<\344\273\240\274h)o<D\367\022=@1\340\274!\022#=\035\300B=\247\006\367<:Vs\274}\335I=\310\2128\275\310.\032<D\265O;\331\321`\275 \376J<\227\370\'\275\003 \212\274\356\335~<\002h\372\273\241s\251<F\252\247<V\204!=\205\006\001<e\343\251\273\215\360\201\274}\253?=\310c\206\274c\020\322\274\034MX\275\021\"\224=\256\303\202\271;\r(\275\343\276@\274;\336\227\274\345X\244\275\02054<\261\315{<W\212\273\275c3}<\205\320\240\274\337\035\275=\2527\016=\210\307\222<\375o\037=\233\357\371<\034\n\367<\344\312!\274\252\007\347\274\305|\273\274\246\331v=\220\365\346\273\265\nS=[;S\275o\375$=(\275\315<\200M\201=\276\3635=\312\357\214;\3630#\275\255UJ\275\004\265\320<\202\377\346<~W\326\275\311\232\326<\220n\242\274\226\323\214\273N\216\234==\337L=\002?\031\275\247\232\360\271\002y\274\274\244a%<\230z\002;\243\234\240<\260\262`=Mb\203\275\270\003x\275\376\355\345\273? X\274\353\252\235\275\005\216\017=\037\003\030<\2060\221=n\266a\275\017vP<,rX\275\266b_<\312\253\037\27331o<mT;=\337\233\"=:\245\221=\356\342\262\274\230\323\343\274\360\344\204=P\347\336\274:\266C\275\377\230\"\275+\331\247\2759z@\275\346~\034\2730\022\263<\305\303\206=y\027?\274\364\232V=[\256\241\273\031z\202\274l\306=\275\006x\003\275*\320\340\273q\205\"<\004\201\222\275\204\233\340\273`\225P<\356\264\260\274G[^=\230\313\305<\327\215\306=\233\371\030=\253m\267<\007\177\3429)BS<\355\377S\275:\374\r=\030\254\236<\370\274\275<\31742=(\364\030<em\264\275\001L\204\275\267-\356\274\254\237M\275\361\037\327\273\002\237\374\273<\260\356<\020\003%\273\377\361!\274\243\205\220\274=\357\235=\376\217\312\2744\371\355\274\304\010:\275~\241F=\007\272\332\274\251\233\337;\374A\030\275m\245\010\274\331\225\210<\213\230\014=\024Aj;\014\260\026=oab\275u{(=\276\301\220<V;\322=;h\320:f\247 <\236\227\003=\357em;\3734\217=\177\303\325<\330\210\353<\202\371b\275d\000_=7\007\351=\001H\306;\273\225\264=lx^\274+\325\236\274\001\360~\275\361\251\340\274\355\212\035<\301\323\277=)f\265\274\216\212N\275\235\177\273\274\016\237:=\232J\006<\336\264\266\2744\340%\275a\375\215=\252\277\315\274\340\3158=\234J0\275\365\001\344=?-\325<D\026M\275\310<r=\230\000Q=\3778\233\275\376[\005\273\007f==\tL\331<88m\274\247\304\016\275\337\221\005\275\000\231(\275I\300\220\275H\205!<\207\353V=\372\007p\2755\274\324\274\225\007&=6\024\006\275m#\2479\335X\231\275\335\217\303\274\255\024%\275\346\374\364\274\202\273\353\274\376\323h\275\331\006\"\271\325\031Z<\255#I\2752\317\246<\210\253\245=\211\242*\275\202xw<\332\242\340\274\303\030\230;\004\206\036\275\307\"k\275\257\330\242<\356\322-=\265\250B\274\013\362$;\234q\017=\027\306\036<\361\010\004;\234\363\337\274\006D\\\275f\225\210=\014\200\277<\0275\215=\203$d=\204>/=C5\356\274G\220*=_i\237<_\237\370<\303)`;\'\254\221\274TM:\274\2047a<\344\204q<!z\254\274\341\216\230\274\346\312f<\341\273\243\275\367\216T=\021\254\023=n3(\275\027\311\001:.\344\013\274X\301\031<\350\177L\275Et\217\275\034\240\250\275&\256\216\275E\250\210=\221\376\255<\010\362N=\332>\263=\0305\360<^a\244\274M,>=\021\260\307;|\371\032=\201\225}\275i4\375\274\266\2409<\363I9\274\320Q\030<\363\253\332;\352\373E\275\240?\223=)\302\223\274\005\262\261\274e\375\235=\343NU=\366\023\013\274*$\201=\021\331\032=\263\317\302\275\025\300:\273\023%\256=Y\231\242\274;|\346=\215P\341\273\367I\210\274\252|\266\275\200\353\027:V\005\277\273\243\320\360<Og<=a~\326<\310\2276\273\355U\373\274\314\017\215\274\214N\024\275\027\014\213\275C\211\350\275\256g\222;\242G]=\037\252\277=\356_w<\277\334\037=K\352\272=W\266Q;QS\235=\240\240i<\275\271\t<<8T\275\233\343c=S\362\377<(#\201=ZG\317\275\214-\342<\217\370\352\274K\204\201\271\236\244\220\274\314\260\004\275\2145O\275\t\320\006=\275\317\254=x}^\273\325\226\317\275a\034q\274{\256-<\340\364C=\370\265\024=tRr=R|\273\274F\033\251\274\337\003%=/B\252\274\323\205+\275G\273\004=\352\013\007;e/\023<\347\232\371;\361>\331\274\020\361\232\275[j\233\274at\270\275\335w{\275\036\332C=;BQ\275H\246\'\2734/\t<7a\222\275\301d7\275\233\360\215<\277\rD\275Jly=\016\ts=\000^\203\273\305u\377<\344\335\222\275\201\237\334<\030IE=\307\022\207\275z\3744\275\023\245\002\275\313\2556\274\352{\360\274\177IN\274\216\\s<\266~\"\2745})<\352}\005;\014}\343<\337\245\005=\314\216\003<^-\005<^\205\013\275\023\330\341\274~\265\212=\213\260\016\275L\331\252:N\266\340<\312\255\316;Eh\242=\000\323\336\274.\373\234<P\204\346\274g\033\212\275\272\247*=\246\217></s\300\274\216^\327<\300\030*\275\005E4\274\257;\364\274\2374|\275<5\317\274/\003e=\345\010w=\252\020>\275wa\217=\234%\235\275\215\332\"\274\330\024\013\273\213\315\"\273\377\020\371\273\266\022\270\274\275\340(=\203\332\213\274\251\327\\\275y\305\367;[\006\204\275v\002\270\274\330\265|<\003\023\006<\351\002\211<\313\335\006=OJ\211<\245X?\275^\371O=.\353N\275\215_\371<\321\013\206=\226\245E<\002\354\251<\262uj<\'\202n\275f\267\025\273\003\t\247=\376\023\260<\311,|<!\030\177<m$l\275;\366\033\275\327\216S\275\2454 =\3171\254\274N\200\244=\004uo\275M\2355=\233\346\333=\337\357\375\274\246\354\303<\257\351%\275J\243\005\275\302\366\006\275/b\312<{UX\274\342a\021<L\244\224;\314\361\231=t2\024\275]!\361<A\300N\273\024\272\257\273\376\246\310=t\247\022\275\312\347H\274\016\363T\275[\270\213\274\203\026\r<\332\267n\275\325%\215<L\315\3109\2514\260\275#\371t\275\372\031\235\275\030\213\216=]\356\253\274\303%z\273\267\231\274<je\'\275\301\026\314\273 3\205\274 \013\337:;\275\n=j,\237\274y\343W\275\213t\367<\306n#=3\363\013\275\271\251o\274U{\254\274\274\177\017;\227\377\215<Q\366\347=\"7\200<\336\360\254=\370E!:\037\313A=\371?\314<\235\226\216\274C\227\367\274\364\n\223;<\r\177=\361\266\345<\001\177.\275/\317G\2740>\253\274r\2348<\"i\260\274d4\220\274AO:<8n|\275\034\023\342=I\212\233=\206\"\203=,D\030=\246,o=Zt\334<\212\257\361\274\233\036\321\274z\342\262\272\314\224\271:c\213\337\275\370\026\357<\032\221\034=#n\344:<\344q=;\277C<\314\0144\274\032\032\303\274\300\177\177=\373%\273\274\016\324\300</\216.=\347\221\246\275\247vD<\303\366\026\275\3662\275\274\204\211q\275\267\354\262\275\316\342X;{\272,=\243\263V<4=f=\253\211\307\275\347\212\311\274OY5\274\3722\311\275\264\332B\275\344-\007<a\200\326;\373B =\034\263\201=\307\342\211=L\000c\273\000(_\275\210\001\354;!\254)\275_\330\374=*\205F={\022\037</IW\275\221\213\352\274\312h\221\274\242\337\007<Lp0<VT\212<Z\326p\274@\364\220<\223\230q=!\034\337\274|P3=e\331\316:\021F!\275\232h\304<W\254\020=I\r?<\370\267\216<c4\365\274\340\026\007\275\3571\221\274\006\266<=\255\241\202\274\246WB\274hI\323=\255\373\375\274\3600\217\273\306Y\177:;\356\017\275\354\334\226\275\326]\342\274n\273\200=\346\206\003\275&9\251\275H\2773<\304H\001>\317\217\313=\240\272\\;<\2654\275\264\346\257<\343\030\331\2730\231\237=\233\324<=\254^\303\273\230\310\226\275\230\\\201\275\023%a\274\201\244\330\273\312K\0369\334\214R\274d\336\330\274G\265U\275\200\023\227\274+\327\355=F\315\230\274\362\214\367\274.+\351<O\254F<\365D\307\274\215|q:sb\351=gg\203<.\312O=`_F=\225g\332:\017\230\366\274\242\325\206\275i\026\355;S7k\273Y\004{\275\273h\236\271FO\304<^EG\275\374\266\260=c\366M\275\332J\264\275\315\263\223\275\371\243\211\275\rR\210\274\241F\331<\262\250\305<a\255$=\360_\364<t_\217\275\230b\374\274\005\334\200\275\207\314F=\003\327p<\360\023\213\274t\236f=N\030@\275\021*^<\030\306\'\273\202oJ\2753\266\266\275\365^3=j\303\342<c\333M=\024t\301\274\346J\021\275\004\246\225\274G\366\221\273,\254a;_N}\275k\261\201;pC\342;s\024f=*d\352\274\2256\032<\342\016\371\274\331\310\221:\037\347\274\274\327\006\250<\260\326z\275\3220+=Q\303\033\2757\024\333=\346\023\324<X(\254;\340\372\344\273\370\361Y=\314\216<\275\007\t4=\233\'b\275,\000E\2745\225\270;[5\013=\276\300\203\274\200\006\027\275\002\030\260\275.4P\275\251\0047<\276\243\n=\247\342\370\274!\241 \275\024\222\233\274\376\026!\2753^\252;\371\237>=\350j~=\025\331\036\275z~\346;e\2016\274NW\334\274\322\254\027\275\245\2454=\331\373\225\275\3657h=\255\375\224;\321\347(;\215L\245\273W\355D\275P\r\205\274\346\345\212=\250\\\035<\nX};m\253\n\275\271\350\'\275\204DO=\002jq=E\355~\275\004\250\203\273\035JN=\201\214\023=&\020P\275\255\300P;nfR\275\322\356\000=(\375S\275\242\371B\275\363\275\243<X\345\227<&i\310<\215|\001\274\352\314\233<aqh=\312\004d\275\371\236\237<]n?=\344\253&=c\034\214\273\231\253\240\275\213$\354<\225\203\224\275\2013\001\275\377[\226\275?\333\311\273\241 Z\274X=\\\275\202(Y\274\2622[=l/\202<\323?\340\274\'\311\264<C,\250<U\257\0067\272\005\005\275\210\3341\275\035\341\365<\240\251\025\275iw9\275\230\255\310<\035\177F\275\3513\347\275\336\352\330:\265\347\316\273\315\'v=\203A\013;}\326}=\232`\361\274F\336\021=\242<\213=\307\335Q=U\207\374<S\357\003\276\t\2061=yf\251:gFO=H\r|\275*\004\332<\232\266\315<S\266:=-\006\306\273p\'\375<K\223\242\275\272\023n\272B\314\231=\363\213\020\275p)\020\275Sq\333<\031\276;\275\002\356\232\275U/Z=\3479\243=\306\255]=\231\226\032;i/\304=9\331#;\010~0=\210\243$\275\305lH\275\3379\203\274\316\262\007\275\216Xw;I\352\340<\375\367n<\276\237\230=\373\247\311\274Q\364[\274\235\360\342\273\372\377\240\275\363\020\202<\324\373\t=\037\216\223\274\260\217f<\361\211\216;|\302\370\274.\026\020<\316\305\324\274?\0317\275\2061B=\216\233\226\275\006\2137=\006\316\003=\363fE<\266R\245=\004\265\334\273U\255\373\273d!\275<7\313\320<\327:\032\275;Z[\274h\t\271\275>\304\343\274\310\302\320\274\031\016n\274\330fh;7\335\262=\376\203\001=-Mb<\355p\026=\316I\212\274\326F\216<\330\3659\273\200\037K=@\272\203;\014\356\322\274B{\325<7s\020\275`;\216\275\277=\321\274\264\303\n\275\325Kt\274\315\376e<6\231I=\256\376\304\275\267\367o=\260\027\030=5\367:=%\265\207\274\372\330\266\272\334\327\332\274s\323p\275\224Hq=^nh=l\214\002=P:\344<X\"Z=\354\315c\274Lq}\275\274\363\"\274\374\310k\274Go`\275\331Q\231=\250\334o;\215\217\217<xS\035=\214]==\310\221\213\275M\\{=\242L\021\2755&\013\275A\244H:F\260\272=\014\266\221\275\023\337\263<\312\340?<\035\203\251\273?\236\235\273\243Bu=a\010r\275\241m+=T\225\253;X\224,\273\036\362\036;f&\r\275V\206+\275\252`V\273\263\222=\275_}*=\334k\341\274\021\005\033=Z\216p\273\331\213k\275r1:<\367\244\024=\247z\275=\022#\023\274\336g#\275\376\270U\274x\023\207=vo\306\274\257k\225\273\025\204y\2745:\r\274\023\210F\275\300,\353:\320sr\275\306\036o=\320N\245=!rt\274-\"\275<.\005\266=@L@\275b\244\224\275\027\003\002=n\002C=\215\274\314\274\331`=\275_\243{\275\177\361\206=\236\225\316<9\317\306=\375\276\360<*\344\033\275F\341r=\277\340\232\275n(w\275\037\301\222<\301K\202\275\360\377e\275E\214\230=\224i\205=[#\304;\220\274\037=\300B\177\274Q-\020\274\356\217R\274\013x\r\275\333e\312<\242\261\331\273\345\262O=\234\355\310\274\323\277_\274\351\250P=\252\306\014=\257P\323;\227]\275<\260\307\272\275!\242>\275\221\n\t\275\254\357\001\275\375(C=\2747\315;\263\232@\274\3302\302\272\272)\271<\002?\342\271\276\302\231<\002W\302\272\230\275q;~\240\242<\032b\006\274\320\246\352<\347K\027=\376z\205<\003\202\351\274:\2119=6\262\257<\310V\345<e\377\353<5q\346;`,\356\273\335\"M;\275\307\321\274\234\333\034=](\227\2745/\205=\010z[\274\0007\255<SS\'=\324\340I=\301?\022=\356\261\347<\352\313\215=\020\177b\275\2054\036\275z\365\277\275O\230\226=\334\306\242\271S\224\221<Zl%=\253\3740\275\345\334\017=\nW\032\273o\210\304<x\037\333<CB\315=\357\306\256\274\302#\320\274\264lV\274d2\260\273,\374Y\274h\237\312<\305\273\226\275\200\312\222\273\255\301\277\273\2736\212<j\207\334;g\302\007<?\002X<@.\357\274\t4\237<\316\347\310\273\255\312W\275\375Rt\274\303<\351=\314\214\300=\235\034E\275\242\312\t<\373$H\275\006\'w=\r\214\344\274Y\2732\274\262\222\234\273\004o\246\274\313:\034<9\004K=\224\377\375\272\203\r\237;>V\206=\244\244\014=\351\342\360\273I\207\261\274u}\024\275K\207\242\275\204\354W\275\r\317\276\275\255\037\327\274\331\352F<0\325\343<H\252\316\275\256 \250\274\002P\211<H\245\273\274a\241\371;\222\r\264<\250\361\261=>\300\310<\343\303\225<X\262\013\273e\234\354\274\300\306\202\275\327y\336<\344\232\230=x\001\254\274`\303.=K\353?=\2035X\2757\324 \275\223(\203=d\030X\271W\366\325=|\240C\274\007\376d\275\340\206\236<\021A\211\275\220\307\';-G4;(\204h=\225P\314\273\273VA\275\323O-<\250\362\234=n\021\021=\264\301G=&\235\313:\35754\275(-\005\2766\307\000\275\243\345u\274\312\234O=\334\256r<\030q\030\275\240\010\330<>\202\316\273\245D\240=\225$5\274p\177\021=2\321\323\274\316\312&<\177i\325\274I\224\375\273:\\w\275\215\371\334\274\356\330_=\253{\352:\031\343\245<\370\215\r\275\213r\214<\337\324-\275H\203\234<\016c\246<\221\305\230\274\036\032\314=\375:\362\273\206\332\n\275$R~=\235\356X\275A\242\326\273?\223\225=\262\360\315\274H\223\257<$C\'\273\332\217\356\274\370\020\333\274\003\013\305\275\r\304\371\274\033^\371\272\220\310h\274\2051q=\'V\272\275+\322\235=\'K\260<\033\220\361\274!\014\371\273\360\037\022=\341\375!<\335\317\211\274c\026\220\275~S\243=o\265\010<\032\036\305\274\2606\300\274\351\365\310\274\3133B=\326\3158=\n/\024=r\212C\273\202\203-\275V\342\036\271\267\345\207\275c_\263<:W\216\275&\242\203=wJ\037\274\310I\204\273\311\307\352\272\326\322L<\0253*\275\377\341\303\272\234\356\222\274\034}\240;\323\"\231=\036\200\256\275b\301\000\2759\263H\271\316d\220\274y\305\207=\357\375\353<k,M\275\237\037\351\274>\312\t=\217\0142=\326\305G\273~\2675<\237\235\210=\312!c\275\320\366\361\273\253\026\242\274NR\212=\226~\375\274\237 \352\274\342\310\275<\300\334\253\274\313\262\246\275\256\324\256\274\004\230!\275;\207\360<\275\222\306<\271\236Q=Q\344\317\274\263Z\240\274\215\350;\275\026\277\223\275\007}1=!\032Y\275t\325\233\275h\0353<<\266\000=\224\324\027\275\013\260 :J\213\277=\030j\347=\031c\216<\363\250\201\272{\026\251<VF\330;%\007\261\274\271\026\240\275\350~E=_k\242\275\377\263\203\275\377I\242\275\364~t\274\205\354\341;\373+\244\274H\332\022<\306^{=\032\200\212<\0354\016=\220\303\206\275\023 \343=\235\003\221<\275u\233<\356\324q<\000M\270\275\017\364z\275\347\377\341=\230\243\272=(\036Y\274\033 ;=s.\'=~M\216=\330]\315\275Ufg=K{\263=\354\353n<\225j\000<\304\364\237\274\003\321\216\274%\002\312;\241\233\212\271$\250 <\226\010\202\275<\030O\274F\261\211\275\263\220c=H0\360<\304\255\227=\274\340\216=U\213\227<p\270\026=\334\327\211\275\000\t\013<\006\014\255\274\354\240\243\274\226\026\224:\233\200p=\345\270\036\275\275\277F=\263\033\356\274{\276\225=p=\210\274\320\352\204\275kP\235<pc[\275=\346\215\275\206\301\014\275\363\274\302<`1\211\275\211\357\344<\225\321$=\204\363x=\204{\212\275z\230\226;N\322o<?\270:=\3461Q\275o\325\242=W\230\010=\357\352\333;\304\202}\275\344\370\024\275\333\004\312<\353\206\002\275\313\367=\274\335I;\274\026\020\244=\355kW\275q\222\302<\304\337\255\274\000W\010\275\005\257\347\274\323\235\201=\277$y\275\222Hm=\354\031c<\334\307\200=>\345\035\274b\3539=\317(\234=\000\005\210\274\254\010C=\210\251(=\366\177D;\200OA\275\315\345\004\274\237v\265;=\'\250\2758*\361\274\234N\313:\202I\020=\267\\d\274<q\024\274\302\'\265=\315\352s\273\235\213B\275<\266\016<\025\214h<`\267g=\327w\240\275\203\227\005\274\267\324>=\242\017\226<\216j\035\274\207\325\177=\212#\212<\\\372\230\274\270\"\230\274u\350\021\275\032u\225=q\203T;\270\313V\275\262z_=\203\037\240\273\2429\370\274\032\215\331<K\3405\274\000\037\017\272M\200\016=T\373\r\275\317\305)=\306\230\242\273.P\346;\264\370\251\274\353\037\034=q\251^=W\372\266\274\234w\331\27314Y\275cE\323<\360p\010=\032a\261<\223\215(=l\027\177=\363\233\016\275\301?6\273.\227\017;S\244>=\000\020\265\274\006m\254\274k/\014\275\231\370\016=\345\0166<\276\223T\275\024u\356<;\204\277\275\023\365\232=\021\314f\275\224F*\275\026\254/\275\2766\303:\020g\267\274GCk=_O\216\273\312\356\203\275\342\230J<\225\323\356\274\252(R=\255y\333<\243A\363\274>B2=<P0<W\033\315\274\263\256\025\275\323\345\224<4\010\340<\03493\275XN&=\032\026\004<\3666\331<}z\322=C\337x=\355\210\024\274\003\205o\274\333\302\255\275\313\303j=\220{\213;\335\220\021\275\261\014\206\275\272\225 \275O\341\355;b|\300\273\330wN=i\313\326;O\035\355<\216\n\332<\317q\255<#4_=\006\211S=\353{ \2741\361\227\274\311\377\346\274\367l\304\274p\267\270<\253\3231\273\322\316\001\275\227\300\371<\217W\371\274\373R\215\275\210{\211;S\261\364<\371\332@\275lr\237\275P\227\207<\326%y;\022\363/\273\213\217\360;\212Fc\272\276W\314<\300cp=\253\207\241\273\356q\001\275fV+\272E\037\030\275\205i\000\275\007\350\006\275|C>=\361\016\200=\246\312l=\264\272\200\275|\242\310\273\246v\016\275\016\332\347<D\202\216<]4j<\251<\207\273\323\035Y\275\207\201n<\2051\026=\375R\006=|j&=\022M(<}\342\257\275G@\003\275\320\273\327\274Wg\020\275b\234.\274\004<\235<iJH=\311\363\230\274\231\023\036\275\256\360\254<\314\200\267\274K<\210=\261R\005\275\035\312I\274~n\230<&\311\036=\004\213\337\275\320\322\010=e\022\311=\026Fc\275\264\016%=?\223_<&\002\266=\t\026\337\274\242\026\202\2748t\340\275gt\301\274\353\325\272<\301\024x\2739\356U=1\270\267\272A\310\217\274s\034G\275\273\357\247;\213\\\213\274\226\235\000\275dcd;\217\226\335<\233V0\275^\240\006\274tHf<D\202\233\275\234\267\323\272:\027[\275\317\035V\275\277b?\275\233D \275\251\321\013\275\336\257><\300\257}\272]Qd\273\233\346\236\275* -\275\020PW\275%\001\013=\002\245\033=\246\037\313\274\225\0336\275\003\301\246\275@1\274\274T\002\t=\261\267\037=\327\342\306\274Y\346Y\275\217I\352\274=\301\013<\272\247Z=z,\201<7\003\315\274\322(j\274\221\322\036<\362\226\021\275\000k\350\274\370\241n\274\006\006\001\276\323\2655=2\264v\275\273\310\257;\\\267\351=\334\3572\2753>\316<\356\306!<\202\351~<\n\337\'\275\035\332?=\222`\261=\257\265\200\274p#\025=\327\313F<\215\225\226<bA>=\206Q\017=\311\372\"\274\271\246x\275\344;\235<\364\266\000\274q\245\003=\253R\303\275\3361\360<2\001\264\274\037\317\206<\001\'H\274\323;\224<\2631\237=\345\3138=O \355<\216\001\317=\2406\r=\035r\037\275O\226\266<\206\364\020\275\250Rs\275\330\351\250\274\215\336X==~8=\277r*=9\215O\274g\212m<\335\325\037=\205\363\237\273\213\231\213\275\031\326\032\275,\343%=\346\003a\274\350\016\217\275W1\321\2742\346k\274\362\3036\275\323*\365<\205\356X<\225\331\245\275\315K]\272mPV\275l\333\273\274\363\324_=\364\337\024=v\375\372<\216\210\321;\216\274\002<\313Yn=\356\214\370\274\356\276k<u\323\351<QU~\274\345\305\264=\345/v=8\023/<\217\304\324\274\3303\215\275\326b[\273\304L\250<\365\273\216\2754\373\360\274\244`\356=.~\232=\344\321\222\275~\357\r=\347NI=\314\376\367\274\361\334\216\274Kx&\275\210.\022\275\324Q\235<|\230\334\273\345\266\017=\342\n\345=\227\204\014=\235\262R<\356\332y<C\000\207\274\2609\212:Ye\031\274\305\327\350<\235)h\275c\205\n\275D\013,\275\232\210\204<BA\256\273\222\217\201\275\245x\201\274\355B\231=\272\352!=A\217\261<4\264\206\274\246r\207\274\313\303\307\275\230\241v\275\nkk=\342*\212\273?\244!\275\010\313\031\275I$_<\te\030\275\301-x<\0365\301\274M\274\216\274\320(P<\005WW=\035@\025;\237\032*\275\207\nX=\207n\366\273\376\267&<\010#\312\272\007\037U=\306\031\032=z\005\207<F\312\016=C1\246<3\254\020<|\234O=L\243\222\275k\"\000=\257\227\006\274\267K\276\275\035j\243\275\332\300\204<\271\311H\275<\272&\274\353\376\276\2748M\032=\317m\023\274\034\217\225<\276\342\217=\233\343\307\273\213\005\n\275\237hM\275>\'w:0\335\007<\251\377C=\253\220\325\274@\323\216\275\241\225\014\274TT\200\275RR\307\274\311\230S=AQ\322<\017d;\2756*\013<:ez\274\241pp\275\006w&=\034z\016\275\327\242 \273$\237\n\275\345:T=\026\205\226\274@\241\211\2739&I=\314\242!\275\244\225==H \255\2757#\022:~\272\374;\027\032\354<\362r\'\275P\205\354<o\261\227\275-8\324\272l\244{\274\364\3236\275\022\254\273=\330\027\217\274S;\177=\341\035\025<\267!\215<f\330P\274$\321\240\274\320T\267\274\3345\320:\214\014\255\274\2144\016\275s\220\373\274\000\270\014\276\001<\3178;\321\016=j?w\274\340\233&\274\227a\314;uM\010\275\342a\264\273\371\354f\274Fo\226\274\237\276\315\273\017\021\247\275v?\253\271\316\007B\275\\u\317<g%%;\323\331\273<\2432@\274\343\343:<\037\347\312<\250t\225<\301\256\027=7\332X=\221z^\275\344f\200\274=\233\034=\313\263\331<\300\004\233\273\320\354\217;TL\334\273\367\327#=\247\246i\274\373$\201=\305p\212=\310\253\313\274\002\223\375<\032l\230<\347\026\220\275\216\355]\275\300\303\002\2747\352>\274\037\327\375;\025\276\230=\tX4\275\343\035\026;\230cw=.y\030=\315i\203=\342\177\230=\253Jn\272\267h\215\275\014\346\377\273s\366r=R\001\377\2744\212\032\275\243\225X\275\261\r\365\2743\240I=B\'e<\226f\306<\361\326\017;\211\244\010\275#\0201=\000m\344\274\202\r\314<ee\027=<F\001<\300\264\030:\267]\361\273\364W<\274\371F+<\031t\272;o/\374\273\034\325\200\275\233\0222=\t\301[=\321\027\212\274\030#J<\251\177\270\274\266z\272;\332\252\002<\231\233\030\275k\274\024<]wh\274\272\236c=\216\346\3339\241\331\001=\330@\324<G~\256\274\320\020\334<&F\256\275\372\370\253;\331\250\227;@[t\275xz0=\276\300\217;\307\r\'=/\247G=\"\260\236=)\335\023=\002\267)\274b\211\221\275i\325\316\275~|\307<<\tm;\256\317\003\275&\240\275<\376\261\360\274\346\375\266<\307X[<(%\025=\"\255Y<\223+Z\275\346\276p<2\275\205<oH\227\275E\312\311\275\323\205\201\274\367\305\331\272\375\275y;,\000)<\202\217\222\273+\0367=\252\362(\274zK\231\273C\240R;\224U\024<\3727\333\274\226\355\256<\355\324o\274\251\003D=-\035!\274\326\323l=]\020\013\275*e\200<{\371P=\337\"\020\274me#=\200O\017\273\371\215d=\3413\373<\364\254O=_v;\275A7g=\023\343\200\274:\215\037\274JF\204<\305\\&=\352\305\177=\202\261J=\207Fd\2744\247r\275Ut\242<\240\257\222\275\343\226\274\274\t\276\226=\036k\315\275k\254\203\273\235\321\001=\010r\004\275\264\230\206=^\207\345\274m\347W\272W\374\013\275c~\352\273\212\376G< \301\034\275\207\324\205\275\020\205u=\315\326(\273\253\240s=\274\001G=)\362\344;\364\320\241\275{\265*\275|I\23598\373\005\274\361\277\253;\263M\324\274\357\355\313=\372\2259<\006`\031\275d:]<f\357\341\273\337\273\254= \302\027\275S\035\372=\343\200\303=[\223\206\274\253ZE=3\277\203\2749\317\037==r\243\275\350\246\037\275\313)W<N,/=x\260\272\273]:i\275\355s\205\275n\354\246<\352\217p\274\367\327\241=D\2148<)\2538\275\277\341\206<4\t\260<ev\351:\301\t\346\274c\223\370\275\214\264i=\002\252J=\005\231\030\273\352\302u=\006\316;\275k\302\216<\246\312\031=z#E=\332*$\275\016\217\235;\177\225{\275\216\361\2619\213\013\017\275\016.\366\272\211\010\\\272\347:\221;-ev</\274\223\275-A\322=}\232\\=Q\377\331\274\360\021r\275\261\"\204=G\357\t\275\340k\252;A\014O<C\337\213=\217\242\020\274\347\021@\275H3\004=\241\210\025=\363\"*<^k\230\274\030\377+\274\354NE;tvR\274\313\234\202\274\227\"U\275\356\244\304\275o\323\254\2746\245\014\274\360v?\275R(\207\275\320\372\204=\266\317R=\"\253\325\2740\262\020>gc\235;\t\0067\275K#\205=N\327\206\275\366\001(\275\005\037\217=\326&\256=\030\374t=\211\301H\274R\317\026<\235\302\230<\261\371\311\274lW\267<\276\205\353\274\324\214\016\274\022b=;\312\0070;\327\335\207\274R\016\300=#\3617\274\313;\326\275\2308c\275\246\227\223<\037;\272\274u\360X\275b\256^\2754q\346\275\234\335w=@\370\244<iEW\2733\272K\274\247\035\355\275\355b\206\273\341\363~<x\\y\275F\376\315<\'(\222=\225\271\323<\251\325&\274}\325\371\2735V\230\275\022\310\370\274=!v\275\200*\300<\0259\244<J\370\273< k\313\2742\275\317=\232\230\236\275\351\020l=\352\025<\275j\221\026\275z.\206<\367t\332\274\022\307\023\275\303\243r\275.\204m\275\326\2578\275\232%\214\274&\275N;k\001\235\275\345\265R\275u-=<\360\251`\275\350\316\345=f\330\010\272\372/\277=\351Z\026=?\275\233\2741\027\031=j\270\'\275_\276\274=\360\031\265=v}\236\274b\204\316;O\026!=\236\"\013\275\336u\205=.\366K=\367pe<\272\242_=\314\0274\275y\371\207;\032\236\337;\226h\364<\002\256\020=\003+\262<,\026P\275\207\221\260<\260xh\275\317U\267\274\340\005\312\275s\242%\274\024t\'\275m\204\007<^lr<\030\310\217=I\205\330\274pv\263\275\344,~=\002m`\275CS{\275\350\335@\275\243\n_\275\275\005\006\275\327\000\313<\"9l\275\3770\263<\014\347\345\273\270_?=z\"\323\273\333e\022\275|>\373<\225~\367=\361o\217\274\367;\256<\346\014\027\274\250\014T\274\253T\313\273\010\315\323\274\354An\273\347\304\200\275\236l\236\275\326\363\232\275\2070\036=\262x\353\273\\N\013\274\216?\321\273\370f\"=\257\234\311<\032\217\026=\322\023\231\274Y\211\205=\323tR=\21276\273\004\211\003=\266&\323\27457\"=\010\232\026<\270\204\'\275~\365\224<.`\205\275B\203\212\275\337\257D=w\371\217\272\314\355Q=Oz\033<\305\375\275\275\027`3\275\226A\"\275\3338H<\240\r\262\274\376\247e<\021\332\r=y{\206\275\220\363\214:G\332V\274\236h\34492\364\020<\034\371x\275\007-s\275\017\243\325\272\326\262\256<\336)\346\274\213\353$\2741\020\016\2750<!= \013+\275\031l\332\274\277C\351\274\237}\205<\256\211\036\275\227\242\'\2758A\255\274\036\373;\275M\324I\275\312\rX;P9\316<x\237|\275\353\000\327=R\236\037=\234\337\270=}\337\2119h\207\033\275\234\307\202=\216\262\276\272\313\347.\275g\3448\274.\242\233\274\037\177+=1$\341\274K\317n\275\330\212!=\303\234\202=G\253\002=m\344\247\274`c\345<t7\031\275\223C\246=\231I6=\245\242K<M\242\372</\336\313<\030\250\206\2755\231\020\275\205\023}=\234\260\376<\305\375~=ms\230\274\373\002\t\274(\256:=:\325m=\265E\032=G~\236<\254_\275\274\205\250g\273\304\265]=\350\025\317<\004\217\315;\2207\r\274fD\024<e@5\275\302\364\013\275;\366B=\310p\325\274G\245\r=A>\212=\377m\267\272\251\263\313<\346K\230=\344\245\246=\251\265H\275\314\004N<3\222=\275J>\010\275\335\341\020\276i\321/\274w\227(\274\177\001\233\275T\254\003\275n\224\007\275G\317\203\275\223\022\200=\317\036\241<%vM;\246[\364\272B\311\247\274\227\220\366\274\356\237p\275\227\351\316\275>\370};\317<\005\275\373\346\007\273\371I\025=\266\340\263;\367:\001=\263\300a\272\206o5\275L\177\017=\245Zq=\245Q\235<86\204;\304I\227<m\366\206\275\307>\361\273D\242V=Ty-=X\362\262\273\210\336q\274(\377\'=\232K\257<\037\320\001=\332d\022\275\361]\346\275]\017+\275+\"\230\275\210\035\214=\243h\r=MKL\274\243\226a\275\022\347\361;\345^S<\227\200\330\274<\357\322\274\315V\232\275(1\333\274\177\262\223\274:\362\002=};\213\274\272\035\'=\201\357^=\034P\226\275\311\327w\275\353hi\274\004gz\274`\250\277<b|\'\274\270\256\"<\003\253\222;Bd\032=\373yq\275\230\324\255\274\3632\255\275\030\312U\275Y>x\274sU\244<\177\274P;\204\226\353\271 \240\244\273\351\300\232\275\026\370\337<\271\277\024\275L\267\263;\363\033^\275\005l\234\274Baz<\272\305c=\354x\010=\314\371\241\275\021?\023=s\327\227=q\325(>1\222X\275)\311\212\274{z\271=@\207\3427\212\216\311\274\013K\246\275\027\204\324<rG\235<`w\357\273\247\265\252\274\374\004T\274\214\025\233:\337\306\211\273\205)\245\275\314\253N\275\223\2632\274\324>(\273\224\000\254;\226\253%\274\266\333\247<#1\247<\007\347M=*\033\341<\004\352[\274hiD\275\005\'\006=\027\014\273;N\336\016\275t\346\n=V^\347=5F\274\274vJ\205:!\317\272\275\214g\340=\\\333\304\275H\270\326<\234\036}\275\274\010+=\314\365\000=\223E\217\273\026\254\\<\267\355;=\t\347-=\213\370\003=\336\013#\275\365\217\2659;K\301\273\325\347\240=\n!\'=\216\232\027=\340a\374=\214C[=\3660\313\274\376\305\331\2751oW\275w\362\221\274<\300:=`I\251\274\000P\216<\2672\030=\232q\025\273\246Y\n\275\210\t\277\2749\351\310<\340\322\231<N(\230\274#\313\203<\364\251\311<\006\3518<\341\205\220=\233\201V\274\004\272\n<\245\030@\275`\220\274\274\371\034\244<u\375\n=I\203\311\272\214u\266\274\310`\220</\323_\274\274=\030\274\t\350\345\274\337$\334\274gM\225\275@\203\237=Sj2\275\020\305\262\273\322\361K=\2241\202<\321\234*\274\371\261\275<\257wu;S\310U\274\025\036\223\275\304\330\205<\351\\\201\275\034\246\026=\001\275M\275)o\032=0!H<x\347\"=R\345\226<VM\242\275\226`\312\274\364\334\227=q\213\275\275\005\3115:*^\034=\274\301\314<5PD\274\370\025r\274\202mF=\350V\257\275\215\244\220;\332+\023\275\354k\235::\2762\275\267w\003\275\327\330\326:T~\274<`\326x=\336\2619\275\227\330\325\274\254\2718=/B7\275\200p\006\274X*\203={5\234\275l\372\261\274\344\024\032=\334\'\224\274\033,\201\275\030`\347\274<\013!\275\r\336\253<\223c\315\274\024Vo\275\037\356\275\275<\024\237=^2|=c \306<\304\201\242<F\305\261\275\2509C=\334\026\200\275\223zP\275\335\361\263\273\361d\303\275\322\326v=\276M2=Oe\232\275\016r\203=3\323\247<\316\274\000\275\225~z\273\2347\340\271\360\234\260\273I\263\003=+\326|<8\231Y\274\364\243_\275k\031\021=\201\352x\274\272d\354\274\017\024\217\272Y\214\024=\207<\261<\375\233\326\274\366\221\316<|\251F=\307>+\275\265\247\267\274\336\366\356;\365\272\200<\363\206D\275\220\216D\275}X}=\215\273=\273r\364\033\274?\341\021=\001\030\346\274\013\252\364;x\262\242\273\211\353b\274\345\036\267\274\022\3473=z\313\377\273\223\253\017\2758\023\340;\345\203)=\215\0000\275\372o\263\275\0227\004\275\007\327\202\273a8\201;\267\016\244;\307uE\274\253\337\027\275r\377\320<<W\256\275\361\013\235=j\255\n\275\203d\226;\'\3206<\302\244\230=\213\247-=dL\266=\316\314F=\360\362,\275\331W\260\274\205\340\215\275g\324=\275s\020\366<\232\373\247\273\210}|\275\nhK=\311\361\306\274\324\010\307\274\204(M\274\226\242o\275\031z\233=\017u6\275\023*\264<\212N\261\2733^\370<7 \260\275\366\322\316\273\304\200\003\274r\263i=\207\234\'\275\242O\276\273_?c\275\'\223/=;\340\035=-M\036=\264\336\266;\311\214\236\273\362\273\373\274\215\030%\275J\301.<\332\210\007\274\321\200\336\274\r\301\267\273r\260\007=\037\235X=[\217_\275\250\265\325\274\251\242O=r\356\201\275\3156\366<\212>\036\275-B\371=t\227S\274Q|\312\274\r\036\032\275\275H\367\273j#\014<(-\253;sy3\275\212\030\024=\017\203\264\273\315\250\177==2\245\275\215\301\327\275\321\005\220<[\003:<\231t\306<m\255\360\273?\317\347:\356V\021=\225\311\204<\272`\233<\364IK=\353\364\253=\315\357\222\275e_\206<\324\353\241<z|S\273\320n8=w\310z\273\211\2515=,[r=2\006\271<\014\254\223<2\373\354\275\260gJ=\244\272\324\274a\261\376<\223\2144=\313\247\367\274]\337\"\273\332\306k=\300\020\305\274\227\243_\275\363{b\274\265B\351<\2762\206<\026\341\311<*@H=(\023f\275I\231_\275;\205\275=\264KO\273=\265\326<\310[\340\274|\214$=\233yQ<\037\230\215<\204\210!=\317^\206\275o\2164\274\251\002\322<\r$\027<\024\304\302:%XA\274y\272\230<uy\343<\001\217\262\275\336l\261<l)\202\275\032\202\002=\215\r\207<2\320\204<\353\023\220=\346~\313;fx\233;\212\270\225\275N\025\033=\315\254\201\273\340\346\272=\231\226#\275\324\014K\275\255/\346\274em4\275X\221\311<\021\330B\274\240<7=\354\0142=\r\002z=\361\r{\275:\020\345\2746\221\016=\320\016\312\274\327\326\r=p\372\232\274\227\3619\272\220X\032>\240@\177\275 r\340\274\266\243n=\222g\212<\377\355l\275wg\362\274\301\377\007=y\013\013=\340\313\267\275\2079;\274\001\335\304\274\337\006}\274\0061z\274\372E\201<m\240\301<\223\2223=\325D\261=\300\263L=$X\233<]Y\204\271H\332\007\274_\312\213<\356\224\220\274\313\311\025\275\r\252\275<\006@\215\2732f]=S\216\301\275O\271\223<b\037\261\2747\343\035=]\327\336<\265\026\223\274\307&\230=\342i\035=c\367\001\274s#T\273\010Dh=\267\223\002;\211i\271<i\232U=\264\247\021\275\242\277\035\275\216\000\025=\237\322\005=\023$2\275\264oa=Q\355\020=\347\203I\275\333\351\"\273\002\340\013=O\0257<\020\317\220\275\004\336\257=>`\252;\263+3\275\307i\364\2739!\274\272\352\255\222\275\232h\014\275F\365m=n\014f=BT\357;\027\007\342\273\222\310\220\275 \326\3459\003\256\025;\251\353\314\274\347\307\372<\271T\241\274L\336!\273\250\256Y\275\322;\223\274#\332\312=\t\301\270\272\312\003\232\275t\222s\275\324:~\275O\350\310;\307\351\227\275\005\205\220\275}\366\200=\311\325\\\275\361\210\255\275+\271X\273\205L.<\205=\227<\222ev=7\253\275=\370\264\222\275\313t\257<f\206\237=\322\371\027\274Xn\273:b\317L=$\201\023=\264\256u\274_\212]\275\001\205\245\275\257\251\206=97\205<\340\232\2758\232\260\t\275,\341F\274\367\200Y\274K\304\235\274\235\366\r=\003\366\234=\344\'w\275\023\201\356<&o1\274\276\240\300<\177\031\023=\022 6\274\223\205\254<XMb=c\374\305<-\325\354\273\241)$\273%nK;\377\340q;\227\366\240\275\371]\217\275\"[\372:\324\0203<.5\306\274Z\004\300\273o\227\n\275bY\337<\336e\025=\356QP=\245o|\273I\241\034\275\372\265 <eN\333;\343\246\242\2750\003\214\274\025\215B\275g\341\326\274\366Z\035=Pj\255<\355n\010\275n\030?\275Bo\216<7\205\010=$\337\177<\233t\231\274X\304V=\330\250|\274Lx2\275\215\366==Z2b\274\001\262`\275\252+\305<T\007t=\351\034W\275fM\224;\225Y\204\274\303\037B\272\317\227\301\274\200t\272\275\"\364\025<\243\217\223\272oI\002=*3\201\275\327\311\032\2742\264.\275E~\010\274\033\245y=\251\213\314\274\274\372\322\275iZ\215\275\0051\341<ot|\275\"v\032<\026\025p;He\341<c\307\222=\273X\242\275[\nE\275z\030\037\274\204\361\016\275\347O\237\275\037&P<\223\320\014\275k4M\275k8\364\274\366D\256\274\004J\370<\n\'\261\274%\363\032<\267w\262\274\263\032A=\203\207\000=-\370\004\275\234\2365<$\316o<|\177\202\274\373\311\330\274\350\035\002\275\255\323\004<\r\014\300\274\306G\305\275\346\312\243<E\270i\275\250\375\226\274v\246\r\275\372\274\351\274\334\246\213\274\253\262\027<\211\317.\2745\241~9C-\265\273[:?=\0333\032<4\216w\275\235\244\211\274bE&= \360\301\275\212\230l\275<\020`\274\241\000\300\274rY\351\274q\'\007\275\215\031\210\275Z\256\215\275o\036\334\274\247\2072=C\261\005\275\333N\227\275\205M5=q\330x<\004\235\307<1?q\275\254\nH\275\276\262\010\275\276\352\275<g\340\r;!\302\210\275\333((=\204<\217=\036\242\363\273\330\267\033=\230h\275=\251\203\\\275\367S\005=\300q\340<Z\360\351\274\314 -\2744:\007=\n\347O=\212|\276\273X\255$\274/K`\273\337\232\004=\'C\315<\374+3\274\355?[<\217\231\024=a\0279:\266\020V\275\232\036\275\274\0379o\275Y\023\254\272\302\261v\274l\323A=\246\177\254\274\306r\025\275R\250\363\275\360\365G\273=\031\364<\025\252\207<\020\017\025=\377\215\212\273\\|\267\272\237\206+=\356L\021\275\303\364^=\0231j\274T\005\276\272\032\025\212\275\010\314\247<\'\"\010=\227\264D\274ml\272=t\222\241=p\346\252<\312]\230<\2027\'\275 \217i\275.\236\311\273D\026\240<\267ag\275\334\324\221\275>\231k\275\354\344z\274\245F\376<a\004\177\273q\203\221\274\214o\016=A\017N=\020\275u\274\336~\205<\336\27399\376\316\033=\317\325\210\274\254p\263\274\362\262@\275\211\261\212\275U&)<%:c<\351\010]<\355\3155\275\257\232c=\014\224\334=\247\244\000\275H\325B=\331R)\275d\201x\275h\246\"\275\276\001\210=aX\026\2751\235@=#\001\035\275\020k\221\274\273\260\342\274\013\3172<\034xG\275\200V#\275s\033\357<ru\t\275\315\227\004;O\223\336;\"kT=\3652J=\351\344\305;\336Go\274\216#\253\275\361_\360<\360:L=wj\013\274\027\336\254\275\177\307\030=\314n_=\300\204\260=\360O\177\275\220\261N\275\204\251\213\274\245\021\202=\333\273%\275\007\002\203\275xe\006\276\000\365!\275B<.\275\372\352\312\274\244Q\227\275C\0073\274o\326\273<\023U\212\275\306SG<iK\253=\271\257+\275\375\333#<#\260D\275)C4=}c\262;\037\004\326<\030\226+\275\271g\302\273\247\016j\275w\037Q=W\006\214=\215d\025\270\323\267\026\276\240i[\275#\377\377</\022 \275\353l\035\275\326\374\272<\230d\236\274G\341s:B\325\205<S\000\230<\367\037\'=\262dV\275N>]\274\017ne\275W\203\255<J4\252;\324\352\210<\372\320\202=6\362Z\272\253\353\213<W\277,<\240\347#\275+\371\232\275&\375\254=\013l\215\274W\335\262<\215\367\262\275\254q\263\275\262\364&=\211.\263\275/\202\335=\247\313g\275\323\334\272\275jZ\267\274/\303c=}\327\254\273\275E\n\275q\r\362\274U\374i=\022\256\257<g\271\202<\323\273J=u\201\t\274\000\233\201\275K\204j\274\030md=\311@\036\275\266Hl<w1\302:\300\233\373\274\316\231-;\252\277C\275%\327\013\275mj\035=3\202\220\275\203\020z=\374\345\200\275.\030\204=\360\322d=\036\271\254<\024D \275\3540\277<\217\302\274<\352uK\275\252\n\205\274\200\206\035;p\007)=9\360\250<L\343\223\275\351\227J\275\330\255x\274\235\335\305\274\246\350=<\2649\333\273\362\223\"\275l\307&\275\\\002\254\275:\253\344<g\321\031\275k\212\r=\010:\200<qr\002=5fc\275v\360S=\240\001\361\274\311G?=\366K\'\274W\331O=,\337\200=\221#\241\274\203\254\255\273\374\227X=\r\345\344<\n\376\377\272\314\377\240\275\203\252\210\275\352{\t\275\215\003.\275*\363\247\275\276\300#:o\314\273;\220\3170\275\306:\313=\2137\025\273\216!\251\273?\036\200<t\313Q\275\222\030\241;\205\tc=-\201\244;\230\275\347;\307\3632=m\3102=\270\324j\274\272\340\276;j\362x=\222\207\201\274`\3636\274\331\235\275\2742\313\251;;W\371\274GG\\=\271\350,=\357\371\030\274\030g\002\275\270\n\310;*g\255<\035Qy=\271\3567<\316\020\"=\325*\331<\330\227j\274%\t\250;\021\233O=\227\303\302:\234.L=A89\274\225b\221\275\303\221\007<\177\326\256\272\366\035\267\274\370\277y\274]K\341\274\347|\256\275p\222R=\341\233$\275\333sE\275\372\352\014=\320,\202\274\347\333\332\274\304\345\347\273\327QO=\023(\201\273\241p\343<\335\276!=\340.\334\273\341\017\261\274\370\234\270<\300+\211\273\3375@=\010\242\375\273R\tn=\344a\005>\207\312\234<\014`q\275\245\341\r\275R\323X=\023\034\261=\2273\223\275\314I\243\275i\360\t=*\355\177\274F\014\200\272B\207\224;\010w\317<\362S\303\274<\265\'\275F\210q\274\\\"\221=\010i\001\275\033\027F\273\377\021\332\274\207PW\275\255B\317\275\371\305\226\274\260?\365<\357\334\030\274n\271\213<\207zj<i#\204;UmJ\274\202f?\275\370\322\354\275G\323\n=Uu\235<\317d\320<D\253\220<\303\3312=8\274G=\372_\215\275\241\346\207\275\021\010H\275\343J\304\274\232\t\177\275\334y\301\275\214\251\276\274H\024\217\275\211\nd\275jO\034\274\223\363V\275\365\333\230<!\265U\274\320\327\\=e\023\326<lS\200\275\355>\235\275\262\3331;\364\246\211\275\033)\206=\243\216\031=\366\274\210=E\"\356<,G\000\275\256\365\274\274\014\232\336\275\253\252E\275@\\S=[~$\275\310\367\016;\235R`\270#vE=j\254\033<M9^<\244\352\370\274\013\314\022<#\242K\2736Z,\275\345\363m\275-\350\033=\202\371\206;\217eM\274OC\245=V?\316\274\302.\034<\325\236u<P\314\014\275p*\305=\235\013-\275\371\333I<\257\233\315<\214\301\347\274K\033(\274!\354@=\030P\241\274:\001\363=\242k\304\275-\337\354\274\253\352N=\372\177h=S\010:<\243\272\352<\\\244\227=\354]R;NA-<\216\332\324<\355\2457\275\363+Z\274\206\010_\275gg\335<\037YY=\222o\202=^x\322<\304\206\321\274\232\374 =M\361Q\275\000\340\022;S\'\231\275>gE\274\230\305$\275\0134\360\273\253~\001=\022\021m:\315[\236=\335\nE<\177\321b=\333-\213\275\244\210\232\274 S\"<a\177\"=c\031\020=sm\216=w*\200\275;9\210=:$_\275|\351\305\275\234h\206<\222\002_;\253\365]\275\\\362\337<\227\2005\275\345`\200=\"\353\324\275*Hx;\313mj\274\332\317\240<\207\333\007\275\302\233\361<\365\022\021\275.\033\177<\300\206\247\274\207\010\305=\223\210\010\275\010V==\234\306W\275wO\234;\264K\303<>\277g<\240\t]\275|1\\\275\240\253\267;-\260^=\r\306T=\227r\321:_\237\033=i\245:\273\022\234%\275U9\213=\265\231\233<\\\244\241<\253=\312\275\304!\010\274\344W\033\273\364\234\003\274\201\320\020\274F\t :&\366\301<`\214\037=+v\352\273\337\256\026;\360\315\363<\300y8=\214\242s\275}\215m\274\332\256\313;\266\217\240<\231\377\024\275\301V\337<\207 \270=\343\n\006\275\276\336\263<W\355`=\232:\254<\332\346\315\274\276Zv=^*\002<\016q\323\274\340\354X<\207\033D=\\M\326\273t\'\364<R=\025<\204fe\274\361\375\323\274}%\367<\323)2\274\013d\302\274\353W\312<\265\020\301\273\252y]=\343!\032=EH\310\272>\354\017\275\005\237o=\0311\007\274\315?\004<\2213=\275\271/u=\003\245\006=\231Gs\275\315h\273\275\237\3676=\247v\340\275\205\023\345\274\340;\324<s)\006<l\\\307<\211\334\312;.\357\247=\254\366\206=\244R\266<\037dk\275R\007\242\275\370\275\206\274s\321\r\275\014\271D\275\277\244\205=_\234;\275\202\371s<W\272\201=\303\322\332<6\002\031=i\027u=\232\023\205\275\366\276\371\274)\304\270<\243\2774\274\373\004Z==\317+<\301C\027\274*a\203\275\000E\003=\375&\366\273Zz\217=\240-\035\274\203<\201\271|\240M\275z;\006<\331\331r\275\363\232\215\274~Y\245<\036\310\323\274r\331\326\274\035\000\246\275i\313!\274s\344/\275\016\322\247=w\256\\<\342\364\361\274\004\314\225=\325\223T\2757\004A=!\007D\275\363\343O\275\351|\226\271\r\235\201<e\345\360\274I9\033=Xt\031\275$\315O<\266\374W=+\331\256=\372\303!<\211\233\261\274\320p\250\275pFr\275\217\311S<qR\202\275\003\330\203\275\247\222F=\352\036\010=\220\260\234\275\026\356o\275d\317,\275\240GR=\3724\242<\236(<=\331I\007<\233@\010=\340p\216=I\306x=G\234y\275\244\320\352<\350p\355<\310]\377\274\237\2739\275\317\020^\275\315g\213\275\277\255\025=\rj\n=w%A=\213\267\223\274 \245p\274\034\220\006=\031\307c=\0246\026\275\307>\342\272W\265\026\272\346Su=\014\326m<\367\252\202\275#E\316\2749\336b\274:^\013<L\370\256<\027\226\201=s\302\377<c\002\241\275\333\206\020\275\314;\205=\244\3610\273l)\021\275./\364\273\245t_<\361[\203\275n\203\216\274Ac\210\275Q\234K\274h\271\320<\0140\036\275\374\252D\275\031w_\274H\240^\273;\245\006\274\261rG\275\357\317 \275\226\367j\275\230\025\241\2742\211\314\274)\006,\275\000;R<l|\314\273\242\256G\275mV\273\274\000\232\235<\253\2625\275\3332\327\274\223L\\\275\276\371\230\274~\200\352<kiZ;\260\267\252\273C\262\301=\361+\007\274u.`=\017\361\350:\366%\244=\226\224\220<\320C\313:J\\\325<\341\373\210<\037,\232\274\030\314\363\275I\t\377;k4\301\274,\261\355\274q\265U\275\003\260\024;6\334\244<\256\322E<8&\225<Dz\235<\215\342\262<\202D)=\024\021o<tsc\275D\264\320=\t\3362<\313\300\233\275\362\007\035\274\276n1\275D\242\245;\232x\330<\202fJ;\305\336\220\273\"]\222<\'\373 \275\364\350\200<\264L\374<\312\312\341\273\330g\364=\025\276\3658_\204/=\240\305`\275\335\237E\274\337C:\274\010\001%<\357B\233<p\244\232<\272\302&\275\365\330\214\274\256N\300\275w@;\275.Y\215<\322\324\250;\017L\327=\034q=\273\007\344I\275\244\316\241\274QI\023\275\037\272P=M\030.=\327\264\'\275\201|M=w\311\021=\003\240n=wd\373<\373\n\325<L\002\311\273\023<l<N!\345\27401w<_TG;H\246d\275\350\233\214\275-a\206\275\005\354B=\253\257!=Er9\275\261\372\020;\203\037\302<\211\261\021<\321N\037\275U\216\234\274\036\236\010=\241\233h=<4\005\2753\267\247\275M\376\322<:\006E=\362\304\'=n\210\317=\204<y\275a\365,\275\316\370\005=\266w\300\274:\260;=\212\002\217=Ph\222<\223\356\350\274\363A\\=\224In<\251&\225<\275!6\275\363yw\275\177\350\355<\261~\001\274l\252\243=\344\225\234<(\241X\275C\267S\275\"\2636<\2268\226=.(\251\273\251.\214=\000?\021<\312\261\202=\260U>\275ru\016\275\037Nd\273\315\020z=\201\304\265==gA=\027\262\216;UN\207\275\035\373\177=%\276>\274\311\250\006==>\204<\224P\326\273?\242D=aQ\016\275]\352O=\316\270\217\275\361\201_;\357\334\222=\325\303y<\275\004\251<U\200\336\274\006\206\364\274~hb=t\313.\275\254\230\246=S-\036\275\212\206\216=\034\207#\273\332_*=\367\220\327=\225<\266:;\tQ=4O\307;\350\253\3769\021}C:\222\271m=\306h\221=4\344\324\274g*\212\274\323\024A\275\2213\363\274<\022D=1\335\r\275%6\000\274\3479a\275\316\3104\275(\036%=\353/A=\252\300\205\275\306\264\220=\304\370\260\273\2228\377;\323\346\2178\301\r\231\275\205\312F\274\246\211\022\272X1\216<\305\274\303\275\355\255\344\273\223\217\247\274C~K=\314\2779\274\322S\246\273T%\253;\215!\367<t\254\260<\254$\221;}\037\330<r\221W<7\304\236\274mml\275k\353\353\274\001\331\003=\245\007D\275\226\231\017== \004=\362A\002\275\256Q\023=do\227<]\361\274= Ya=\363vY=\201\275E\274\361\231\"\275F-\264<Om\320\273{\327U\272\013\225\031\275>Ov<Kp\262\275\206\356\270\274\033\023\013\275P\353@:E\370\206\274\016\303\246\273h\n\365<\r\271\343=a\363`\274O\330\243\2735\202\306<\200\326\241=\326@\352<\333\004\354\274\265\214\374=~3\274;\251\010\020=\226\250\205\275-\001\333<\037\305\204<\375W\341\274\027\210*=\247{\021\275E\204\307\275{\365\027\276\375\336r\273\001{)<\024\300\223=U9\035<\3524\213=\212\2429=\261K\362<\233\030\004\275$f\177<\312O@9\322^\201\2745B\202\275(\300\311\275zI \275\326\364\222\274P\233\220\275\232@\332\274\230\232,=x\374r;\344\244\355\272P\237F\274\360V>\274\266\275\303<6\233\002\274\320\252z\274\024V\031=n2f<[\014a\2743\314\016\275si\362\273H\320*\274T\273\235\273\354\243O\275\375\241\234=\3747\315=L\002\032\274\357\205\225\275\204\200\336=u\367\236;\'\361\036\276\324\222*\275|OY;\202\254\240\275\243Q\235\274\344\2420=\367\\\250\27486\344\274\327DQ\275F^V;\276\310_\274\245=\275\274\257\005k=zR\353\274\234]\240=T\002)=\345s\206\274\246\217\333\274\266g\333;T\362$\274\277\343\214\274*\252\202\274\031\021\244\264\236\323\000=\0317\201<\360\032P=\364\034$\275\3653\010=\037tS\275\256\022\212<V\225\000\274\212\230\334<\272\353q<G\352`<\'\030\032<3A\224\275w\'\254\274Zb+<\300N\270=\275\3431\275\352`\260=\223\313{=8\203\376\275\326\025z\274\327\373\004=p]\226\275\365\263\263\274\306\315\307=p\231\246\274%\373 ={\223\'=c\\\333;\026\327\t<\226\214\224\274\226\"V\274\257\331\2209\246i\300\274\375\250\271\273\037(\351\274\nA\371\274\021\314\322=\302&E=\364)\231\275\020j\326\273\013q\316\274\324\245\301<x\203\004\274\356/;=\031\254\021=\177\007\"\275\332\003\354<\241n\211=\250\206!\274\177q\376\274@\376\003=\327\'\242\274\211i\363;\010m\024<\256\373a\275\252h\207<G`\273<\024\307\303<\352\010\276\273%H\005={\270\035\275\250Q\016=k\n|\275\360\364Q<R\016\235\274\305\224\230<\244\246\007<n\350\325<\306\277#<\223\307\267<+\207\202\274\033\226\246=\n\343;={A(=\026\033\024<\203\000{\2753I\245=.\222\315\274\227M\003=\365\'\\;R\311\362\2748Y\245<\330\371\227\274\321\211\236<\007\234\211=t@\210\275\3604\207<[\305K\275\026U\342\274Oo\316\274\276\307E<\265\272c<\177\257\365<~#\311\274\200D\362<T\210\302;\035\303\023={\301\030<\205=\363\273\333\264\204<\232\250v\275\273/\275\274 \001s\275h\3370\275\364>:\275\2516 <\205\214\347;\r\342\362<l\000\270=\001\010+<3q\233=y\0001\275;\367E=\302\003\262<;\372*\275\275\001\352<#0(\274\022\327\001=\316a\220\274\251\370Z;\307\2176=#S^\273d\216\245\275~\363\227\271\206\036L\274\022B\262\274Q\307\315<~\033\215\275#\337\t<p\217h\274\254=,=\217Ch\274f\233k=\362*\355<XB\014=|\233C=\334u9\275\032\303\350:\214\002m\275\005\303\304;\353\252\222\274?\327I=\014\001 \275\033pT\275B\214\377\275{\356\307<@\367\227=|\253\022<,\325v\274\214\2422=\004~\006==mi=\327\320?\275\007(t=E\246\265\275\327F\217\273Cd=\274\006\367\033=+\374\202<U\260\316<\002\360\n\275RL\331<\"\026\333\275\236\027\004\275\321\205\254<\375\310\006\274\265\021\016<\233\364\326<,/\246<\267\264\231=\016\356\261=\014\341\017\275\ro#<\362DF=\207\n|\275W\005\370\273]\026i\272\201^Z<H\004\022=\214s\240=\330\313\206<Q\013,;P\230#<)gh:\245\203\177=\\M\365\274\007\036\036=\006\001\037=\321\034Y<\215\344,\275\005\t\330\274\256\374\275<\367C\205\275\373\375[=\216b\270\274?\361\000\275\320\032\224<\242y\337<\322\215\221\275\210\227\364\274\367\201\032\275\030\275\316\274\342?~\275:1N\275\262\324t=v\003\300<l6\277:`\236[\274\253\262\270=\025\177\002<<\242\025<\325\010\260\275>s\256=\026\n\211={\025\316\274j\277\326<#y\204=\236Q\004\274\027\330~\275\024i\273=\022e\001>\357jL<?<\001=\216\327\001=\3251a=\023i\027\275g]\271=\375h\000=I\377*=\367\260\004\273F\271^=\227O\214\275\236yq=\362\371\220=\203\\\335<\252\357\232\273[Sh\275\212\n)=k\347\205\274\013s)\275o\243T\275\3245!\275\\a\233<\311\276=\275-8R=\237\366t;\273K\005=\230\r\031<$B7\275\3754\315<\345\342\r\275\311\327\354<\363.;\274\036\355\332\274>Fh<b\337\001=\314\n\256\273\354P\201\275\337\307*<\365\327\227<\2159\234<0\317\177<\"\371\375<\237V\n\275q\215\306<S\302\211<U\253O<\203\023s\275j\362\006<)c\234;:\000\212=\263\013\325\274\030E<\274\005J\022=v7z=\220\010\332<\314\2556\274\230\375?\275\340\006\020<\361\242\000=\037\367E\275\372\301\264\274[\366\212\274\214\240\022<\362\321\274=\027q1\275\377\245X\274\366\226#\274\325U$\275/\346)=\243?\370\274\301\177\270\273\313\316\274<\014j\220\275\322z\317<]s\236\275\367\354\003<\310\251\204\273\340\266\212\273\037I\224\272\264\004\323\274\375\304\342\273\345\017\236=\304\254\323\274\323\375\304<\336Z~\273\232G\\\274\2515\201\275Yx\323\274\315\373\003\275\200\010d<iz\236\275\305\345\302\274\334\331\341=f\312\262=\367\342\330;?\245\204\275\264\267\332<\301\300\253\275\337\021\223=\252\t\347<J\2050\2756w\034=\365\365(=\333\342\330<\312\331y\275\342\361Q\275hh\264\273\346\234\313<\020\236\312\274\007\313f\275\t%\016=\220~\304<\313\360\216<\254xj\273\277\017\253\275fpu=\246\276\007=1\233\330\274\345>\237=\235\355O<\224\362\215\274}\014\n\273h\242\224;\251T6=\273\330\"\275-\002D\275&\027\275<68\374\274\031z\252;\010\307\014>\333\210\264\273\371\276\013=\256\304\233=\206ik\275\013\275\275<9(\"=Q\237\204=\033\224I\274\321\256S<\02480=\336\301m\274\037\320\215\274\215r\236=\017\256\340<*0r=w\016\262:\312\303\314<R\370\207=f\3756\274\352}\241\2738\n.=\221\252\306=\213n\227<\037\330\014\275\\X\217\275-[\226\274\215\r\321;\361%\343\2730\324\217\275\020\256=\275\361\247\002=\356p\014\275:+s=\024\006\035\275\267\265V;\214I\033\275d\026\331\274+\330\272<\321]\264=U(#\275\222\271|\275xS\207<4&a=\303r\n=\345\'\260\275\023[i\275+\367_=5\373\263\274\020\343$<\203sr\275t\301\032\274\243\253\347\274=\237E<\325\025\036;p8\225\275\221\210\201\274\327%\"=3\250s\274L\244\373\272{\024\260\274\022\327\363;, \312\274F\331\243=W\256\021<%\271^=\316\260\314<\004\202\322\2743\027\202<\246\347\n=Qzm\2748\000\372\274]\277\240<\271\246d<\020\372\275<\236\311;\274\244\355\330\275\201\341R\274Y/r\275\032\220\323\275F\241l<\276\343\344\272\023\246\233;\375oM<\230\237\014=\226;r=M\351\013=]g\266\274\020\247)\274\263\264\211<T\231s\274\266\302\013=\302\330\274\274q\324y=t\313\257<\367\010d=\352\253\036;\252\227\341\275~,\020=g\350\"=h\361]=\233\217\335;\256D\270\273\236\353\352\275\024n|;![:\273^&\014=\311\251*\274\3148u;E\316\372;\347}\263<L`y\273\035C\351\273)\322G<\211\306\262<U\\(\273\032n\370<\357\317\205=\305/\220<I\223\022=[\356K;\244R*\274\236X\0269}R\327<\240!\201<\305/&<\277\325{\2749\373!=L\226\025\275\350\357\230=\270\2656\273\334\264\026\274\r\323%<\236!\236\274\t\351\307=x\032\007\275\361.\035\275\216@\010=a\370\325=\320\304\345\274be\343;\274\343K\275\245\\\326;_\363?\274\025B<=\340\317\227<6\322\024=9 \212\274\326\315\016=\357\023\225\275\350W\363<fx@=\356\302\212\275\366ig;\340\215\025;\311\300M=<\362)\275\335\201\n;EbA\275\025\243\272\274-I>;\350\327\322\275\021\377\201\273\002/\203;#|\004=VYx<\007\207\243\275F\246\352<<Z\203<u4%\275\321\243\242\275t \236\275\222\335\344<\254\207\242=p\2135=\255[o\275\360sb\275\357T\023=\225Q\003=<\274\371=\010!\230;\373\350\241=\334\265\032\273\2439\007\272\036E\266\274\300\322\307<w\036#\274\013Pp\273\032\217\034=\263\270\254=\n\262z\275(\230\347<\330\271\357\274\230h\272\274\214f\247;tw\264\275P\177:\275\376\030\257<\263\300J\275g\324I=\367\241\030\2750\036\244\2740f\202\275\370\346\317\274\334\373#\274\013\0049;\370s*<\354\355\214\275\000%\020=\251\217\013=,\263F\275\022\274\256\273Y\253\322\274_\004)\275\226\335\224=7\232v\274>,\t<v\265\346\275\033s@\273\377\3403\275\345\237)\275*\233\311\274\016 a:\216\277\357\273\010\224\226=d\341\214\275H\007\215\267\244\240\037=\326\311\010=\367\221\251\275\r\272\355\2746\255\246<\312\022=\275\264\216?=q\374\237<%\334\204\275\036\\4=\032Z\035>\367\014\227\274\271|\365<l\262\265=\327\212\301\274\247\275\320\274\255L*<\333\240\004\274\3340#<G\245\367\274<\264\355;\013\272@==\262\276<\312\337\003\275$<\304\274F\004\260=bl\007\273w\263M\275d\260\037=G\364\217\274\230\361\333<\030\257v\275W\241k\275\010:=<\360\3159=\306{\272=\3040\200\275\024\330.<\322O\013\2752\325\271\275\217\327.<YI~=\341\226\020=\245\223\263\274\327\305:=\206\r\240\2755\332\200\272\311?\006=\020\320/=c\021\231\274A\'-=\313\312\325<w\343\234<\002\206\252=\223\272\262\274\346N <\254_\321\274\350\250\330<\206=\244\274\001\300\331<\315;\353\274\360\362\327=n\023\026=\236\010 \273\037\324\205<_\230@<\251f\271<\242\367\206<nN\215\274?s\363\274\357q\333;I\025\333;\263\347\311<~\375x=\304\340\333=<g\205<\250\341m\275\265>\354<\337\030\235\273\027%b\275+\277\006\275\357\203d=\004\363\213<`K_\274\302\007^\274\r)\371\273\351\031\005\275\345$O\274\324-p<\373C\034\275\357j\217\275\211\0067=\274;\370<n\244\246=,\320+\274\234\324\r<\346\230/<w\177\217;\200\177\321\274a\274\033=L\014\222\273_\245\366;\302N]\274\212\2454=\205e\340\2740\r\217=n\033\211\275\323>\202<\000\340F=U\244U=1\370\261\274\207[\332\273\\\254\374\275vP3=c\253=\273e\303\204=\3673\275\275\240\362>\275\032F\313<\232\001\006\275\224%\001=\307\201\212;n\246I<\267\265\265<\316`7\275\016\227\366\275\034\310D=1Q\021<U\342\267\274\311\300\314\274\364\244\016\273\255\t\001<\01019\275!GT\274\261~\247\272\010xI\274\265\362h\275\250mP\273XEW=\372\226\005=\306\343\206\275\313\242\372\275O<\231\273\031\311\241<\251a\252<\032\241\005\275\034\315J=\023\342\275\274\217\010K;\350N\t\275S\243\271\274\246\372\263\274\360My\2744\235J=\300N:\274g\226\246<-e\257\272\243\215\016\274\265K?=e-H:$\315\345\274\005\177i=\253\337G\275^\001u\275n9\240<\334\342\177\275x#h\275\tTn\275E\314\210\274\253\021\177=\220\r\210\275\021s\250=:D\210=\240X4=\334\rN=W\3057\275\311\253\204\275\334\364X\274p\361\006=\000\r\373;I\205\237\273\350\261W:\263\313\250\275\332\353\200\274\003\006\215=a\353~\275\373z\264\274\201y\366\274y\261\215<\232\t\241\275C+8=Q\265@=\313\001\310=q\r\257=\313\023\354<\236\330\317;hS<=TH\234=G\263\236\274\317\344j\274\310\225\252<QS:=0<\352\273/\230\204=,W\241;\237h\304\275\256\3007\274\324\250\212<B\013&= h\351\273\333r\207=\231\014:\275\302nB\275\324v\023<\344B|\274\242+\276\273\345s\363\273\001aV\274\245\244S<\0057\370<e\335H\275\245\021\r\274S|\200=\233[\321\274+\313{=\3208\266;\333\277\335\274\262\365\366\274Q\2626\272\'\000l<\373\273t\273\310\376\001=q\"*=\252h\016=\304\240><\341\315\004\275\000`\276<\230T\033\274pTA\272\031\267w\275\\?J\274\231\244\203\273\021\210\307\274\202\201[\275\204\251\021=\367\351\212\275\034IJ\275\303\327t<\3432c=\374\235\314:\016I\227\275\351AW=b\350\000\275\262~\210\275\321j\250\273\274`\350;Jh+\275b>\002;\021\340\233\273N_\372\274\2217V=\326\322i=\335\024\346\274k\340\235<NE\030=\335.\224<\"L\254\274%\201\230=>\343\003\275q\242\265=X(E9\367\275\3129\353\266\020>\246\332\000\275E\037.=\033!\210=d\360\275:\217L\022<\274\222\374\274\305I\035<Z\013\226\275~\303\315\274\\\242\217;G\021$=w\242\\\274\023G\313;\221SU=\227\261\216\275-\022\302\274\004M\214=\203&\317<\001\254\355\275\035\177\251\273\317\332l\275\322\376\206\275e\212\374<\216\273\371<\322\242\226<\364\203\345\272gQ\226\275D\205\245\273\2773-=\213y\220<w\200\255<\367\026\277\274\3217\221\273\265\257\014\275UZ\341\272$\222\220=\232\312\324\274s\330Y\272\312se\275\275\021)\274\345E\016\275*\242\231\274j\300\201<\374F`\275\016I\352=#A\214;\010\256\"=y\262~\273\267HT\2752\266\336;\275\200,\275\256?\204;\201\242\306\2750\031\222=<\'m\275{\370\025\275O\036\211<\236\240L=\016\260\\\273\231\213\277<\223\033k=\206\"\251\2740\336\373\272\350\334\"\275\323P\224\274\005\260$<\227W\276;\226:\034\275\023\031(\274\"\245E\275\306\306\004\275\335t7\275R\0272\2756\235c\275\0272e\274\274\371>\275Gk\010>3Z8;\246\216b=\313\014\314\274\353\322I\274\213\002,<\211{K=\334\311-\275\201\223(\2741g\344<\374w\000;\203\264\326\271\234\327\205\274\261@\030\274\3139\010\275\231\213\037=\273z\001\275\307\0268<\\\354\000\275ivF\274\222t\201=\366JF\275\026\236+\275\262\013>\275\3716\216\275&\004\302<\034\002\255=\314.Z\275@\331\322\275\3772}\275\317\312#=\357\377\205=\304\340\036\273\302\336\'\275u\207\250<%Y\004\275\3173\333\274\006Y\356\274\334\246s=U\364\031\275<\257y<\275H\226\274\337\306\240<\032/\274\274X (\275\366]O\274\351\361H\275\033v\325<\224\027\r=\245\353\272=\204\230N<C\2178\275u\353*=\336f\220\275Eca={\350\032=.\375\206\275\223\245\326\274\277\316\306;\327\210\013\275\003\246\334;#\030p\275\364\2367=d\2144=\375\365\215=\354}\026=\021)r\275\032~\236\274(\213\215\273z\326\375\274w\020W=\313\344\360\274P?\341\272\014\367>=Z\252\265<\004f@=\364\214Y\274\344\005\031\275Ep\206<\006\341g=}\346]\275\235\0265=\371\333\026=\316\025\376<\214ZH=\250Z\376<\362\357\317<\'\006Z\2752\353\n<A\025\376<R\317l=\345\320\014\275\251\274\360\274!B\000=\005<H\275\022\227\013=\206\262P;G\025\327\274\374\225L\274\037\264\275\275\323\213\214=\037J\035\274\342\251\214\275\307;\242\274C\245#=*\0303=\366\344\235\273\360\216\030\274+\341\024\275\312\375.\275 %y\275\327x\271\274\340V\251\274\013\234k\275td\003\274q\232\240<\261\322\223=r\224\321;H\316T=\343\316\035\273\247\"\355;\236\231\244=\033\346\274\275\220\022\034=~\274\323=@C\037\275\255\374\201\274\0254I\275&5E\275\023\017m\275I\252\313\274|\\v\275G\271@=&_%=\025at<\023@\010=\351\266\005=m\371\224\274\255K\303\2754\366\r=\207A\237\275\3053\214\274\335r6\275\031\225v\275\261\0039\274\177>\r\274\251?\234=\224\315\340;\231\201\347<\226\177\250\2744\367l=\2769F<\026\363\223<\000\302e<\262L\343<\326(\'=\221\224\351\274\214O\304\273\330\352\334\274\211\034\023<Mr\377<\227\010e=\250S:\275\023\214#<\253)\244<\204g\375:\302\034\321\274\304|)=r\234\245\274\275\023\230=\244s\n\275\263\321\002;\226l\250\274\250\335$:\034\3646=\0368\350<\256\013\245\274]\304=\275E4\243<|\305/\275\316y\330\274\251\225)\274\215\031j\273\243\255\273\275\375\272\037=\263j\243=\316\327\375;|\000&\274]R4\275f\267&\275]p!=-\364\024\275\346\350\206;\212~\246<\t\335\355\274a\324\013\275^f\234=J\021\230\273\237\355\026;\363\371!=+\210\274\273\330\206]=\275\376I=\2650\253\273;\275\266;=\242\264\275\251\311#<5\264\203\274\016l4\274\271\025@\2747?L=U\354g=z\234A\275\001\273\335:h\261\017\276\361\306K\275\250S/<\\\260\370;\252\236~;\237\365\266\275c\305\326\274L\365\363\275\313\303\204=\370\342\326<#\002\244\275W\275\261\274\252\235t=\253\026\375;\330\017\251=,\203^=\2648K\275\3735\271;\004\022\277\273d\363^\275f\314M\275\316-\202\274\206\363\276<\322$\010\275\335)\201\275.\370b<\315\017\316\2744\361\316<\033J\213<\221\302V=\027\331Q<g\316~\274\027\242\016=\226Bg\275\023\272\030\275\005)\214\274\177u\340<\346\212\357\274\325\030\242<\367\232\316;\213Ro< 4\004\275`\367^;\231\333)=\374\330c\274\372p\226\275[\215w<C\332\261=l\271\235=\263\013\325<v\363_\273\327w\031=RCl\275;x\315=\366oO\275\226\000\230\274\333!\365\274\221\221\224\275\2332S\275\355v6;\371\010r;t5i;/\362\242<[\351\206\275\300\014u=\361\353\211=1k\267<\346\237C\275\020\017\332<\026\314j=\361\316\234\274\2566`\275Fv*;\314N\265\275j}\241\274\312\303\032\274w\234\233=\221\027h\274\220\205\022\274\'5\346\274\222\365\375<Pi\010\275E&\234<\365\032\r\273\t\201z=?\270\242\274\351l\004=\361\027q=\230_\326;@3\370\273\361\264\240=\347\"7\274_\330S=Vq\275<\337\006\370<7\274\024\273O\257\276=\277\004\232\274\030\366}\274\277u\013<\370v\222\275\272\255]=\246e?=M\256\224=\213Q\240\275\371T\374;%l4=-?\262\275e\373\202\275O\341\034=\005\022q<y[0=\356\352\252=\233\025\324;\250\342\215\272\271\321\242\274d\242U=.sd<\202\336\321\274\230W\025\275\331\273/=~:\264\274\265\3633=\022\332\363<\343<\317=FJ$=\n\353Z=P\260\243\274|:\257\274\345`\225\274\277\335S=\003\331\244\275\373[\254\274|\210M\273NS\230=t=\r<S]\327\274\272+\232=\211\357\223\274\275k\344<jx\265<v\264\234=@ \336<\025\231S\274\002\025\006\275\353\350s\275\347\364\314\274\316e\\\275\360\213\301\274eh5=K\236\224\274\0064\223\275c\333)\274\232P]=G\336\257\275\264w\266\274|\350\212=\273\214h\272\353\273$\275#\316\363;\2766\007\274\204\tg<\261\020H<\001\363\247\274q\0312=\312\033\307=\355\356u=)#+=?6=\275\251\255H<q\177\241=\355i\302;\000}L=\017\242\203\275\362\366\327=~(/\275\353\374^<\204*3\275\365\257u\275\262\307*\274e8L=s+\264<qF3\275\326\212w<\356w\025:\037\252\242=\235Y%=QJ\212\274y\362L<\371T\332<\027\370?<nR\201\274\321\352\355:\231\025\241\275\254\021\022=|1+\275\023\232\255\273\263\312\\=\337FA=+\363U=\270\014\331;\344\371#\273\027\373\267\274\372\351\016\275zt\303<\326\324P;sop\274\302\035.=\330B\205<ig\276\274\252\311\222\274\333\243\360<l\343?=\212\2200\275\376\2378=\274\244\016\275\345lx==V+<\217@D=2C6<q\024\231=VJ\024=-1#=\310\005\201=?\377:\275\303\004\231<\262\377\264;\3179\352<G7I=\314\003q<\034CJ\275\325\372\250<\025\371M<\021\305X\275\336]\021\275\006z\267=D\007C<\334\365c=,U?:}\312\241\275(\240\270<\351\233\033\275\252\226\035<s\235\264<X\004\232;\267\355\240\275\025\252p<ZN\034=\337\025\271\274.\272\006\275\326\322S<\321\216\356;\276\223\341\273\'\220\034\275kF\317<\334_\214<\t\376\341\274\003F\355<\002se\274Hi\222:\205\0336= \261\202=\265\304L=h\345\233\274\316\360\254\274\0239\007<\366&\344;\0251\202\274\236\0020=\342!2=X3O\272O\177B<I7\025\275\350O\264\275jb\336\272\026\312\000>\302}5<\022\202\031<o~7=\313\243Z\275R\274G=\211\356\217=\021x\341\273lw\304=\276\334\240=\342 \357\274\227sV\275\361\201)\274\033\362x=\371\362\341;\203\223_\275\230\212\215<\372\250\300\274l\t\231=\371X\330\2757*/\275\314\350\001\275\\T\221\273\325\202\020\275,\324e=\370\017\316;\007/-:\226]L=\005\343h;\373\243S=9\305\363<X\211\252\274\336\213\305\274\240\370]=\256\003\250;\227\306 \274\275\241\345;\'\210;\275\211\202l\275\371hV=\316\241\335\2744\022\202\275\337E\244\274B\224\341<]Q\222\274\260\304\235\275F$\362<\201\250\230<+\354\326\274\312W\245\275\3535\037=\340]f=\275\'\204\273\240y\233\274\345e\242\275\203>!=4\211\300\274P\200_9\267\356\030\275\232\202\002\2757\r\202\273\020\360\022\275\2605\244<2\021\006=\236\267\217<\364jM=e\000H\274d}\206<\206/\374=\r`\004=?\347F=\020\323G\275\211\212A=d6\374<<\205t=y\350\261\274\017\345\261\275\374\344\200\275\313\345\374<\216\243\216\272\301\375\347<Q\347\206=\200=\267<\2132\031<2.\324<s:\037<7|\t\275\006|\266<B\'[=6\241v=2\026\232;0\033\364<\3010\324;Lbv<\252\363^=S\023)\274m\304\\\274\271\005\367\274\262\031\034=\032p\316=\221\255\317<6\324\017<-\177\265<\236\367\003<\2170\252\275/\0172\273\263\363\245\274\3324\034\2750\363\317\274b\034<=\362\361\000\274\035@\376\274\350\376+=\220\267\317<y\215B\275{\363!\275\354hR=6\366\010=\345\2206\274U0\356;\340T\323\274k\2150\275[\300F\275\347\264\002=*O\365\274\366\342\032\275]D5\275\337]%=4|\364\273\256J\230\274:ue\275/b/\275^]\256\273|\032\340;\205\321\322\274\206\211\340\274N\367\214=r\246\r\274\214\007\271<\263\305V=%\255{\275(\255e<E3\231<G\304)<U\031\260\274\225\273\014=E\026D\274k\256)=\364\233\240<\013\t=\275\363\267O\275\010\342\257\275sr\372<!\342\321<\244qn<\215\271\222=7\226\200\272\336\322\006>\341a8\274r\227C\275Y#J\275Y\232{=\205b\026\275\335\\\235<\202Y\261\273\215\037\274\275\267\354\270\273\344\035\206\2747\342\257;uG\204\274v\\\212\275|\251g=\360\234\266=\345sT=\313\tU\274t\020\364;\250l\222\275K\024\030\275\322\212\274=\302\332\242= @)<Sf\206=\267Y.\275\222\356\035\274\215\307\240<P\263\031\274#\211\221\274\366h\221<\337X\020\275v\rA\275\333\345\350\2746\003(\275F\224K\275*\370\222\274.\037\024=\000}\302<\360\357\177=k4\372<WBU\275\331\362\224\273\265\261\255\273\230\216 =\372\363\033\274-\301\234\275\212H,=N\000]=q\343\034\275\0029\217<g\326\024<2\014\361\272h\031\211<AY\227=d\364\223<\"\216\346;9\376\303\275\325\350\201<\323\232\202<E\216\265\272n\344\231<u\241\022=\304\302\316\273j\027\255<t\\\257\275\375\372!<16:\275\311<\245\273\227z\361\274\300\256`<i\262%=\236\302\223\275\333@L\275\252)V=|\300\377\273v\357\310<\t\347\363;\232i\307\272\\uF=\253ox\273\256\262\206\275-\205\240<4\276\n\274\353\317Y<SZ\220<\375$\024<\257\255u\275\322\252\301<\302\245\205=\275%M=\314\265\t\274J\3377:\"\231\007\275\007|8\275\0337\205<h_\251<B\3462\274#\313\222=\255\232\234\275\026\320\270=-6\224<IDZ\271\360\335e\273SF\333\2740\326\235\2749\367l\275\260%*\274! k\275Of\250\275y\023\333:\272\017\321<Dlp=\374@]=\376\245q\274\323a\231\275\247\307\214\275\335\353\252\275\227a\211<\323\247L=u\333\234\274\223\335\300\275\240\002\246<\352\n:\275m\r\\<\225\236\370\274\274\364\004=\361\201\032=\300\360\332\274\2252-\275\'\263E\275\304|\217=Ye`\275\240\301c\275\0304\326\275\024!\221=L\024\242\273Y1Q<\303|\034=\207c\237<\033\n\200\275\370\n-\271Q\255\235\275\357{d\274\275\310g=\242\273\316<!\213\226=\027\211_<\303=\220\272\206\264p\274\333\t;=\357\013\330\274oO\227\273\227Ho=\216D\022=i,\243<t&\305\2748\323\203\275\302\340A;&\007\205\274\306\325p\274)\316\276=\213\334\263=\222_\032\275\250V\241\272\016\nd=\200\372\213\274\\\037\023\275\374\357\221=7\222\214=\rE\027\275\222\221\342:\251\227\220\275\342(n\275\246\267\030\275#\033\274\275\036\361\331<\317F\263\274\204\325W\275\313\250\033\274G\360\036\274p\345b\275\372\215Q\275\373!\211\274V\213\003\275py+\275\354\366\022\275\234\276!<1(9\275\264\320\231=w\336\262<S\016\224\274o\267k\274\262\372\223\273yl<\275Q\310~\273Y\277\277=&\261k=\276\337\353<\331?\030=X\272R=\374\205b=J\246\316<u\030\267\274\034\213\327\275` \"\2739\262\214\275\262iX\275\233\305\333\274\025Z\211\275O\302\247\274O\266\026=\334\037m<\313\002\216\275P8/<\256\276\307\274(WO<f\247\351<\326\265\240\275\254\305\\=\252{\235=\353s\372\274\001eY<O\224Y=\002\240\215\275\244\220?\275\036\344\225\275\362\344\302\2730D\235<O\213t=x\n\246\274\243\324C\275{\231\207<dX9\274\021w\003:\347\026Y<p\212\000\275QT\244=\374c\265<\240\205\277\274\205\262O\275ap\316;\022\313\350\275a2a<>\300*\275\036\304\014\275\370\032m\275\242Q\21093EC=\304\201\201<`\t\210\275\017?/=\371\t6\275{:\334\275|\240\370\274\266\001\027<\222\335\000=\371\347\326\274\313\3020\274w\266\002=\346v\375<\202\377(\275\217 \224;\323\177\201<\366~*\274\356\020\240=\037\220\231\274fQ(=\273\272\250\274\356\330\307;\350^\264\273\245\263[\275\345Y\357\272S\025U=}\247\233<Q\270\376\273\317\316\275\273\303\312\030>\004z\231\274V6\331=\216Q)\275\303x\236\274\027\257\336\274\352]\204\275\3067\351\274\321>.\275\332\306\273\273k-\311<\253\201\202=\350\332\033\274-]\017\274\323Yo\274\214\003J;\336[\246=x\232\203\275m\317-=\006\377\276\273\030\215\247;\024\n\033;\352IO<\226\006\201\274\r\266\326\275J\274\n<=\302^\275|\027\021\275\235oj\275T\023\027\273\333\2043\275D\024\321\274\363\254#=#\300c=$\201\303<\376V\013\2745\321\310\272\253\327\221<\334n\235\274\244E\250\274\373\"\270<!\\i\274\222o\270\274M1\343;}\010.</\3416\275\365\342\314\274\023\331\374\272NcJ\274\377P\231=D\350\324\273L\337\300\273i#Q=\374}\236=\223\266*\275\240\323\t\274\211%\303\273>\361\\\274\205\003u=\236o\310;\340\205\022\275\307@\233\275\355\373q\274f\251\276<\014pt=4\263\225<*Lj\274\243f\267\275\207+/\274#d\321:\263{\007=\271\340b\274\036{\314<\257\356s\275Q\237\202\273\243\233\320;\337\346\374\275\311o\034\275\331\346\236\274\314<];\204K\007\275\254\236\341<2\357\271\274\262*O\273\255\217\034\274qi\255\274\025E\016\2744\222P\275\030\342\037\274\353oP\274\346\363\244\275\014\342K\275E.\013\2751i\'=\362\274\265<\221\005\356<\210\204\200\274\223\302\244=\304]l:\205i\206\274\355|\300<8\261\316=\234\236F=\215\337\031\275Y\024\216<\251\000\246=u@L=\207?\267\274=\252y\274\007\214\254\273\"\255\016\273<\265\253<\370\203\247\273r\364\222\275\243P\003\275\025\317\303\275\373\230\006\275\021\254!\275\016D\246<A(\227\275\020\256\317<\tA\356<\327$4\275b\241\002=0\265\275\275\204\0029\275E?8\275\271O\032\275\344I\'\275\'h\305<\374\t\327<\335\201\261=}\361\n<\302\013u\275\177e\302<`\007\265\274\364p\224\275\005\351\254\275\272\346\272<S\331T\275SV\307=t\230P=J1\024\275\030\031\024\275J|\302\275\271\245\352\274\376\'\'\275\272\354\340;\037\355,=\355\2571\275\251\240\005=;*\267\275\316\233\022=t|\310\273\216\005\000\275\376\234\206\273\n]\315=AJ\202<\257$\275\275\210H%\275\013R\335;\271-\322\273\364\251_\275G\315\247=\343Q&=\215^!<\\\343\332<\\\322\233<\211)Y=BSG<\223\366\224\275Lk\034<\030\277+\275L\033\001=U\220\010<\246\375\204=?\302C<)\353\247;\024\376\t\274\234\3418=\342\357\377\273\035\273\241<|\301\305<)Z\227\275b\302\244=\345\033t= \275K=\314K\250=\0070\005\275\262\243V=\371\206\205\273x+E\275\233_\343\273{l\031\276\335#\022\275\2177\017\274XR\217\274\2275\222\274\347\220\247=\303\325\251=-\375\231\273+N\007\275])\t\275?\352\215<\211B\216\275)}\200=\327\276\303<\026\236\r\274\263\245H\275S0\325\273\270Y\370\2747\206\033=`o+=\374\365\322<\334\360*=\211\277\000<\006\274R\275\016\003\217=\343\361\244\275j\020\271\275L\0051=\022\215\252\274\337\233u<\001H0\275\255Us\274\236,Q<\250\336F\275\247\330\215=\327\227_\274\237\240V\275\204\357\373\274\223\336\031\275\325\373\237\275\235\225W\2752\021\023\274\243\211\227=>\374\200\275\373\025\017=\217=\252<H\304\"=\261A\212;_\335y=\210\316\217=\342\234G\275\230?I=3H\005\273\016\027\354<\364\020!\275\"z0=\213\226\252\274Y\230\3517\337bH=\022\336\217\274\311\022\355\271\244Uk\274.\270\276\275\317\376-\275?\032:\275gQ\201=F\374\036\275\023\223_\274L\277\343<b\262\010\275\202\\\251;[\250\277\273Ur\215<\306\032/=kDL\2742\".=\372w3\275V\034[\275t\265\300;9\315w\274\333Y8\275I\013\025=\355\317\323;\245[\214\275\320\242\014<\rZm\275X\253\227<+t\220<\266\225\322\273\274\266\232<j\264o\275*p\204\275M\200~\274\254~K=\314x$\275\334\030B\275\254O\321\274\360\235A:;\234d=w>D<\210]\211=\002\214M\275\326\212\"=\357\332\263\272\214\004\\\275\203\312\316<\213\261\222\275\246@<\275\026\"\'\274\276{\233\274\234`\354;?\241S\275~!4\275d\273\245\274t\257J=B\374M=\000\310`=\001\225\351\274\253\036\255\273DZ6=\222\233(=3\r\363\274\263\301\221<#\275\204<(7\225=\324=3=\321\267\310\272\371>\227\274\004/\205;;<?\275M$\214<:\216\253<H%8=\213\266\016\274\226\364\243<\307\361\2029\"\377\270<\235\332\004\2743\240\220<\327/2<\303B\004=}\005\252=\203Y7\275[\206&=[X\216<\303YT=\016\034\322\275k\024\242<)9V;k\2303\275\"\324<\275\021\210?<\264\254\236=&\250\224<\226\277\034\275t\023\234\274T|!\274TZ&\275\227\r+\275ON\007\275EK\026;\301\301\264\274\025\243\233=\230F\327;\307\277u=\237\265\036=\251\335\020=\264\033\333<\213A\021\275GhO\275k\014`\274\266\277\\\274\360&\364\275m4\245\274\n\310\217<f\264\234\273\223x|<\302K=:\343\035\023\275|\376\270=\002\357\217=\227\265?=\372k\234=\214\365\212\273\004\346K\274\365*\371\274d\252\264\273\317|I=\021\310y\275\'\353\250\275\375\346`\275/\270r\274\332e*<\332\273\251\275\317\326\207\2744:\177\275\247\344\210\274i`\272\273\205\233\200\273\261\nK=u\220]\275\005>G=\265\251\301<w\353F<nR\207=\305\313:=\332\357%=\233\274\334<\211\342\322<\254O\030=\373a\020=.@\001\276\035\016\340<A\314\274\274\321\037\317\273\367\"h\275\021U\335;\221\030G\275L\364m\275\357\177\210=\263\343\323\271\274`\214=\241\340j\275\346\261K=\271!\251: \347\250\274\242\312L=\372\340\001=\177\241\307<\3663\t=(\244\317\273\275\324\205;\204/\036;p\000H\273}\301\027<\031\177\025;\177T\013;F4\017=w!\036\275\242N\313<R\243F;0\236\332<:\351\337\274\025\233\266\275\036>\253\275\375\016m\2746B<\275\317\235\227<e[\362<\'G\004=\210\224D\275\267jy<I\355\206\275\350\240\267=G\330\353\274\017\205\205\275\243\0051\274\376WX\275\272#\206;QvD=y\332U\275\t\263\212\275_\3405\274&\373\344\274\247\213\010\275\035\274_=\274\221\205\274E\000\t\275\274\\\210\273o\002\263\274 \237?=*?\"<:\235\261=A\201\244=\"@\334\274\325\207:\275\366\257\263\274^(\254<\'\240\205\274\361u\262;\362\201\022\275\204\221\247\275(k\271;\374p\332<I\257Y;\276\n\365\274\263[_=\0224#\275\350\272\240\275\262_\004=\215&\002\275\364\367\222<{=\344=!\211\307\272\337\265\014\275;D\314<%\255\234\274~\031\000<6\327:\275\232\331m=\236\221\273;\232&\356=\000\002#=fk <S\2527\275\177\353\270\275%\237G=\271\307\275<\210\0100<\036=\374<X-\317<\272\200\253<R\226D<l\367V<\321*\177\275\346\304Y=\351\313z\273\254\031\343\274J\266\003=$\2668\2759\333%=\364\255\273\275!\267\336<\005k\377<C@\356=T\2223\275w\254\350\274g+j\275x\304\260\273=f\340<{[\002=\347@/\275~\000o\274q\263\033\275ez\033\274\233\242;\275\035z\001\274\244`?=_?$:\367\357/<\247h\220\274Z\242\343;\"\022\t;6\003\374\274\002\261\221=\360\316\036\274\311\325\223\274\263\316N=\370_h\273dqF==\241\023\275Rh\220=\031\320\357<\273jm\271\026=\267\273\363c&\275R\013\311<\205\346\006=\013$\200=\023\\G\275sRK\275\377\340@=\312\016\337<+\237\305=\277s2=S\002~\275\217\001\027\275X\355\034<\njL=\2418\024<\342_\027<\344\341\221\273\3167\026\275\347z\236=\030\217\373\274\225\270\306;\177e\346<\350\202\247\275\266r*=\261k\231=\006\322\262<\366\2558\275\231\346\200<\345\322\017\2752\202*\275\272\245&=\214\240/<\303\303\016<\304\335]\275\005\323$\274\035\";\275\227\301+<\243\244\001\276\371u\370;\014\033e=vh\017;n\370\311\274\314,\037\275\324\226\251=\000\361m=\321\330\002\275\217\247\031\275\256\\:\273\361\370\316=q\3613=|wJ=5\243E\274\021\035\020<\217S\212\273.\273\246<\\e>=\3443Z;\245\341O=\310\035k=\261\354\206;.\313\\\273\331N\330< \310\277<9\267\007<\237]U\275U\275\232;\257G\\\274\352\332n<i\007X=\354\332*=\223\327W=\021\325\327\274\203.T<\025\035*\274\262|J\274\"b\227\274\270\272\205\271y\330\262\273\342\016\235\274V\374\360\275\302\024\310\275\221M\360\274N\022\251<\362V(\275*\252\021\273jI\'<\361R\031<\r\'\004;m\nV;\177\264\303\274\325\347.=\023\"+\275q\355\014\275 V\026\273O\221\244:{\014\302\274\353Q\233\274L\311\326=\265\224a;\032h\251=\215v_<\030\266t\275\262{\034\275g!\337=\347\201B=\202\277{\275d\341\001\275m\341[=g\322l<`\242\230\275\370\317><\261\373\027\275k\306\232\274\2634\373<\333oR=\364\331\242<HeZ\274\243\234\227\275*;C=~\307l\273`\3667\274\375\035\377<\244*c\274\027\373I<3\327\313\274\222\227\033\2751\374\034=\202/\010\275\"\345`=-\232\232<H\323b\275(\335\237=I\024\036;\264\375\213=\337*!\274\323\216\353<\303\026\251\274\311i?<\302\030\202\274\213<I\275\354\361\364<\350\276D\275.\344\367<:\253\322\2745\027I\275\230%\366\274v\337;=\027\237\225\275\322\346m\274j\025C\275P[}=\370\241\\\275\237\220\'\275\276M\220\274\'\255\302\273\327\337G\274>\211\347;\005\307\311<\216\023\014<w\266^:\333`\215\275\230\300!<\337Y7:%\203\'\275\224j\363\274Q\267\302\273\3647\263<\004w+\275{\322E=\307\300\212;\\\264\222<\213\340\361=.\325\005>2\361\257\274\230\"B<\350C\322\273\006\220\370;\340\316\021\275\2742*;\3572\305\273\265P!=X\034\026\274f]b\274\253\270\363<\013\250\026<\271\302\244\275\037\251W\275\007\230\\=\342X7\275(\366\214=\243>\371\274[q\237:K\000\033\275y1@=\266W^\273\311\250(=\254NJ\275\377:\361;\350]\035\275!y|=\n\027\315<\277Q\3169\365\204\327\2752)\210;Nu\216=\210\361s=\032\321\255\274\272\227\354<\357\026/<\201\201 =,~\245\274eH@\275\306/\212=\347\003~=\215\025P=\202\336\227\275\240\330\221=\250\237\364<\035\020\007\275I\363!\2748\326\252;:\255Z;}gx=\236V\017\276\020!v=\031G\234=/\031o;J\232\026\274\241\204\215<\370\205|\275T\265\n=\230\027H=\023\207\236\274\353\000Z\274\312\251?=\317q\264=M\177\204\274_K!\272\302yp=\246n\233\274\274L1\275s0\200<Y:\031=E\021\366\273\200\211\001>\370$\201=\353y9;\343\273J\274r\271\206=\247\254\202\274\323/\332\2718\264\265\274\321\221\307=\211\003\207\275W\240f=;\".\275\222\277S\273\027\336\207\275X\354\333<\335QB\274k\'\352\273o\\\204=\341\321\300\273b\323\214\275\265\020y\275\253\006\302\274\321l\222<\254\207,\274zv!==\263\"=\340EK<$\222\216<\306\232w\275\227\376Q\274\267r\037\275\254\344^\275\234+\032\275\203\"\205;\205\372\206\275\036\032Y\275\267,\003\275\242\022\371<X\300z<0\322\312<cqf\274D.\277=Ky\312<\022Va=\332s\240=\2436?\274h\343N\275P\217\335\274=Y\214\274\342\345\034\274\016D\312<ZD2\274\302tg\275uL\371\274Db\r=!9\324\275W\234\367\272\371\374\227\275\246\362+\274\347\022\274\275\212\001\302=mDC\275;5\310\272\245\321r<\003\210\267\273\276QJ\275\242\271\232\275\267\022q\275\305a\252\274#\271\311\274\'\306e=\330b\367<r\203\'\274\374\216q<\325e\017\275t#\341<mR\007\275\240\304\335\275]\324\330\273_d&=\270\254h<>o\337\2747U=\275j\212\036=[z\301\274\277\256\372\274\317\206\027\275h\317\213</G\025=\271\323\232=\367\322\327\275\231\276~=l\254\264\274G\360H<_\342M<\357\226\t<\363[\214\274\014!#\274\010^\252;\327\325\"\275\251\207<\275\243\342\254=%Up=Zv\001\275eE#<\276F\266\272\220E\025<\323\004\216\274\350\002|=\2738\346\274\332\277\n\275\332\342\000=+w\326<{\266\220\275\333rM:w7\001\274\025Mw\274s3\n=q\300\263=\364{<=e\346\335<\372@I<\352\276[<\221\032\233=-\366\357<\253\242\331<\315\365*=\177\000\303\274\235B\024=T\241f=\374\016.\275r\230\001\274\355o\315=\323\006\204;lh~=P#)\275\016\250\201<>&5\275&\021\241<\240\021\275\274\352\244\035\275\\\000\262<\3139\333\274\022d>\275-yf=\301\261\377<m-\243\275\226\226\227<\323\240\257<\247.\237\273\360\304)\275\343\242B=-\316==\030\351E\274\023\177\324\274\261\316\233=B\342\326\2749\326#=\034\212\205\275\240\220\303<\375\035\234<\370\233B\275\330L\226<Z\217!\2746?\312<z\255\032\275\263\212\206<K\373\026\275\rC\245<Wk3\274\030E\r\275\366iA\275\274\344\372\274\265\244\371\274\006\201t<\030\315\202=RP\023\273kI\306\274J\000\264\275V\254\223<b\346\222:&c\324=\300F<<X\307q\272C2Y<}\365\370;\'w\021;~\204\037;\313\227\233\275\377\254\214\275\1770G=B\205\274\274X\320m\273\034\2367\275LT\206\275\277\215\220<\035\317\025\275z\270\342\275\305q\307<\361\337\243\273\247,:\274\312X)=Y\024\001\275D\027\206=L\310\216<\206\3161=\360;\265\273a\227v=\211X\230\275\r[\347<\270D\331<g\270\365<\265A\252<\310n.\275\017\262\267\275\014Y,<\272\335P\273\005K;=\352S\352<\264\023\332:\206\261\375<$\233y==\033.\275\363\243\001=KH\t<\355HD\275b\200\221=\016K\227\275\354\220>\274\315\334\262<_\330\200\275%\226\231\274N\177p=\374;\360<\245x-=\035\306&<;\370\010\275\332\215.<\004\350\003=\251r#=\360\024\213\275\022\017\337\274\305 {=\271\320+\275\016\262==\326\336\333\273E\345\202\273\372\351\254\275\212\352\371<\357\'\217\2751\242\006<\347\355\323<pg\207=\3655\332\274F\375\200=\320({\275]\021\010=\020\030\016\275\341r\251\274\357\3163<i\270Z=|}\212\274\016\335\344<J\014\026\274~\372Q=1\200H=\311(\377<R\036\312\274\310\272\320<4\034$;A0L=\337{f\274;\365\262\275\316\342\345\274m\205\265<\035G]<v\253\273\275o\005\276\274Z<\004\275\331\034\311\273F\024\222<\206\2246=\221\201\370\274\026\002\307=\375\367\034=\024\0109=\317y\202\2758\034\370<\275\311`\275\021KN\275@\005C\275\347,\235=F\216I\275S\2044\274sP\243;\177\266E:\"3s\275\344\341\345\275D&\230=\021\032\343\275G7\255=\360x\006\275\217\326\327<\366\374\215;\242\270\033=\343:\200=f\243\204<i\310\347;\001*}\274\301<\005\275\3372\327=q\016\320;\244z@\275\'!\306\274\255\262\214<\034\235\361\273\013\021\006=\226,\t\2755Gr=i\200\002=\2446\333=_\236\251=\237\364\"\275N\265\005\275\027\237\356\273\\\372U=\330$R\275H\267P<5\236u\273\034\207\226\274L#A=\313\260\203\274\031\214,\2750):=\232\010\354\273\006)\210<\347\204\030\275\231\201\303\274\345a\332<z@\244\275\250\227\246\274\025W\254\273\315l\371<\313\223\310\275Z#\232;g\264\343<G\266\205<\230C\207=\3411\336<\257:\261\275\005m\232<9\226\334\274^\2421=\243\245\023=<\351)<_?\036\275\205M\\;\n\303\271\273\014\2039=x\024\366<\361\211m\275\206\357\247<\361@1:\233L\242\275\273L\303\275\224\001\205=VB\341:\257\253%<\3177(=\214\315\203\274\n\022\370=\373%\316\274\320a^\275{\026p=]Oa\275]\377\271\272\377\341\275\275\333N\214<V\'\226<\320!\001<=\265\261\274\345L.\2754\010\330<\237)\001\274\356\177\235<J\033r\275@\244D\275\253;\'\27572,=KH;\275\220\2272\275o\001\351\275\226\320{\275Ft\013<%WY=)`\252\275\205{\036=\2376\253\275P~\233\274\007x\365<l\376.\274\"\264\275\275\341W\274=\340Z\"\274\305\250,\275\237\261\301=\002%T\275p\332\313=\n\3776=\035\365%=\256\247h=\226a|\274\t%\266=i$X;\n\277\355\274\230\375F=\324\277/\274\\\207\231<\nf\231\275\367\314=<Yq\205<\302\312\236\274\376\210\024\275\216\315\205=\244\222\032=\371\335r<\324\022Z\275\234W4=\216\254\250\274\177\234\207\275\3454\213\275\203\370:=\257\t\354\273\223y\272<g\023\234=^\326\230=Gv9;\264\031\272\274\034W\t\274\240A\260;\272\346^\274\340\343\177\275\300{\207:U3J=(PL\275\225s1<\001\314@=3\320\246\275\347\347\022=tk\233=\321G5\275\325\374p=J\271\332<;\352\261\274D\030\376<1\017\302\274\300\251\202=\246F5=\030k\225\275\207\222~\275=$\013\275\246\375\243\275\032g\210=`\236\255;2\270\312=4f@\274\305\026\024\275>b\016\275\2736c\275\232\000#=\303\322U\274\277\242\301\274\203\261S\275gF\300\273S\032\230<\206\237!=\346\007P=\347\021b<CE\206=w`\314\273\214\333\254\274uFA=\030\260\220=\231\001\277\274r\324c=C\351\304;\202{#\275}D\227<E]\366\275.\350\305;wK\264\274p-J=\255\311\363<\372\273E=\005\003\373\274\315\336j\275\216\037d\273\361\250V=\245\005\250\274\327\206\233;\243a8<\026\024\360\275d\335w=\"\205\017\273\313r\305\273\316o)\274\3450b<\330\224\023=\337\027E<K\351\006\275y\\\364<Iz\224\275M\300\313\274\366\224Z\275`\032\032=\0019:=\212e\254\274\327\'\026\274\301\333\033=\351\220$\275z\307\236<@y\034<\035\352)=4\3273\275k\226\263\274?\n]\272X\030Q<\017y\322\274\216\025\241\272\nQ\307\274\266y8\274ryp;\233\320\017\274\255PR=\000\247\305<;\345\204\275\323\034\352<\201Y\r=m\361n\275z\272\037\275\303[/=\336\356r<A\350\273\273\202\237\276\273\017\211\271\275\363\241\n=\225\277\004=\360\324\001<\354\267\300<a\226\025<\265\010\352<\020\271Y\275~\232Q\275q\3074=\207\253$\274\255e\025=\213x\037\275\200\332\241<\350\254\'\275,%\246<\026\034\224\274\222e\"=\276\237\347\2741\024r\274z\3631\274\006\256\210\274_\275\241\274\263_A<1j\301\274]\236\213<\374\002\330\274oFS;3\022\013\275O\227\034\275\256\027%=C\237\021<\016\216T\272\312\204\206\275\207\237.=S\001*\274\026!\t=\315\373\226<\311W\352\275\317\352\010=\213\2457\274\375\222\263\275-\013\303\274\257W\334<\355\241\003=\201\n\267;\303\227\022\275\014\327\215=\243\022\205\275\023\'0;\370\321\261\274%!\340<\271]\215=o\303\370<\342\215}<\247\226\200<\235E3<T\365\225\274:[4\275\246\203f=h\336%<k9\330\273\020\230x<U\262U\275\262\013\270\275\023I\337<S\203m=\244\2555\274\203\374`;\354\216p\275\234\301\217=,\260w<i\212\027<\313\'\274\2734\372\347\274P\234\001=\205\216\261\274\320L\t\275\014\321\241\275\310\216\324<8mj=\271\216\305\275|\255\n\274}\005\215\273\276Y\377<O\363\224\274)\014\270<T]\013\273\360\216\233\275\013\325\360<\247b\016=\'\277*<Z\002B\272g\214,\275RL\032=\246\272=\275G\366Z=,j.=N[J\2753\023j<?\262==W\311\210=+y\246\2752\220\217\2729o\354\274\257T\356\274:\335\334<\020\347\207=\r\024\033:g\0144=\247\035\031\275\367\035=\274\301\255\373\267s{\250;\t%\270=\270\375\230;\305\332\273<\246\272\034=15|<0\334H\274\207>\003=\360\347\031\272\007\2553=\244\354(\275\224c4\275\343\303V< \211\223<5\326S=\217\256\026\275X\211m\275x\032p<\200\3421\274\327\352\301\275\026\264\272;?\224Y<+\335\022<M!\250<\003\312\276\275^\362\322\275\346\246\002=\017P\027\2740\305\377=\005\224\034=\247<\307;\250\340\201\274\273\377\347\274\324\356Q=\004\013\201\275\237\021h\275) \002<2\021\306\274(\332\233<2\034\246\274wF#=OX\204\274\244s\271\275\207p\3108L\1779;\254W{\274\024\275X=\343\265\237\274\374y\037;\271b\233\275M\252\315\273\267\256Z\274\373\006\036\275Dx\023\274\313=\214\275\214\021G=\214\356\251\274\202\252\311\273\240b\273\274>\377\003\275\271,}\273\337\271)\273\212\341\022=\346\3174=\271\243\361<\341b\r=\006\243\007\275p\233Z=1\215\330<\014?\243:|9Q\275\201\371_\275u\252\305\274L\270\033\275\035,g=]\256\271\274\327\3252<_\'\325\273\260\365|\274\301\360M=\2024_<\356\252\350<\213\234a=9\r)=TY#\274>M\207<\320n\231<\324\352\036=\325t\023\275\037\225&=v\236\330\273\353\362\240\274\2703\007\275n\334\014\275\004\320\255\274&,\317\274\2603)\275g\035\014=L\236E\275\375q\363\274\372:R\275\376\330\215=6r\210\274\004T\215<\231+\034\275\353le\275\315\361C=>\033\231\275\357\370y\275&\311w\272\034\036A=!\372X\273L\224==LE\215\275\327\345\207\274\036~\013=B2\266\272J\322\260=o\021\241<\n\367\235\275\246\001\220\275\264\3372=!\266\351\275\343\314\1778\023\\\232\274\2010\017\275F#t\274\014o\355\274]\361\177:\321\341\031\274Y`\345;N\242\313<l\274\354\273\373\276b=\000\376\331\274\365\254\216;\357\2524=lYj9N\033\030\274W\226\254;w\354.\273\315\234\347\274Jx\337\275 ~\214\274\250\014\340<\367y\200\275\020\250\203\275\351*\234<\362)\002\275\004\2019\275\3158t=\256\274\241\273\033\203\306\274\026//<\276\316f\275\336\355b<\200/\303\274\327x\t\275\002\310\033\275\264\201\370\273\200\327(\275\206\325 \275C\231\204\274I3\204:sRV\275\332\262\003</\273\005\275\014\357\277\274\355\350f\274\276\250\221\275\267c\354<\213}[=\2646\317\274u\214P=\014E-\275QYv\275\021g\245\275Z&o;>P\220=\325\020\032\274\235W\354\274z{\264\275rB\360\274\262\377{<8h\"\275Q\020(=HR\003\275\004o\001\273\325\331\247=ra\326\274\2761\025=l+\367\274\004j<;\032S\212\274\321\034\254\273\316\024\243\275\037P\270\274\263`\034=\343o\203<\225X\317<\342\353\321:\363\303\300\275\006\022\235\274\017\310\316\274k1\n;\350c\336\274\377\036\235=E|\024=\315_`=5$\230\275\027<\275=\333O\276<\2654N\274\020\260\360\273\277(L\275(\261\334\2736 \300\273\261\336\217\274\265\206\244<\372ca=E\000\221<\n\007\325<\306\267\303\275\264\336V=\337\311\t=5\326\373<\237\343\351<\230\001G;4\317\233=\240\020\205;s(\333<\300\235\343\274\232$\250;\001pP\2738\341p\275\233\370\240\274\236z\204<\345\261\314=\374\343\230=w\236\226\274\0277A\275\025\246\001=^p~=T\013\324\2755\330\"\275\251b\035=\314\030J\274M\375\204\275\247l\310\274o\365\247<K\333\321\274\004u\243=D\376\376\274\226\300,\275k\277\262\274\310y\210=\217=\222\271\271\307+\275\223\230Y=\324\316\336\274\326\275\211=\276\327\361:Q\2070<\241\031\315\272t\242\253;\000\013\034\275\226\335\205=\013\014z=&\022Z=\253\2042<\200\210\253\273\336\254\n=8\025\355<\332\034$<6\244S\274\237\344N\275\222\010*\275 <\232\275\001\341\202=\023]\035\275\220K\275\274P\264\004\273`\227\035=I\350\275\274\222N\217\274.{\353\273\226}a=\237<\220=c\256\364<os\000;\302Z0\275\230\2127<\336 \000=\233\315F\275\346\350O<\226\034\260<\376x\221\273\375\233\262\274\311\275\227\274.:\017\275\201\275!=n\304i=-\2740\275a|\272;d,\374;\330a\317\275{hx=\255\013%\275#\307=\275z\274B\274\343\'=\275b\335l\275QrR<\211\372\303\274RZ\220;\306\237\234\272\3230\242=\r\342\253<\367o{=<\n\214=b\226\372\273\237\262I\275\210#\367\274x\245\352=\217\033\"\275\264\022%<m\t-\275L\242\222\273\251\243-\275\230\266\233;\262\311\334\274\337%\211=^\261\352\274W\217\000<a\264+\275k\025z=\n 7=\343t\232=\017\373\226\273\356\377\326<\220>+\275tj\226;\017\223\010\275\377\273\233<;\376\254<\023\255a=pf1\274\003\357 =>\332\266<AL\331<\020\277\232\274\324\305<;zY\037\275\262\233\020:\341$\320<\003\252\005\275\002\360,=\241\246\033\275\177\n\324\274\'\005\033\275i\316v<\226j\246\2741t\307\274p1?\274A6\200<)60=e\034$\273B\265\372;\ra\311<\253Ow\275\300.\302<\210\304\235<\346\":\275\307>c\275\344\336\035\274\r\030\316=\304\343\311<\314\002;\275G\274\017\274\374\263\014\275\'K\375;J\333\267\275\332\347\204\2736\267\014\275\340\016_<1\000J;\344*>\275\347\275\234=\204\206U=\363\302K=\236\202`=\241\335\315\2749}N:\347%n\275\201*\262=\203\366/=\t\246\266\275\316q8\274\263\313\210=3{b\275\335\206r\274\211\373\235\274\233\001\347<\343\372B\275\360\356<\275\247\360\016=\212je\275zF\021=\302\277\033\276\'\242\354<$Y\226\274\370\337\206<\376\265\034=\337\014P=6\007\206\275x9\310<\257K\310<\326fp=\373\271\"\274\302_\372<\352\025h<[\204\221<\347A\263\274\262\344==q/$\275\023\246\343=\350\361\354<I\207\212<\210X\020=\352\221/=Ui\263=8W\0358\245\"!<\177\233\365;\215\267\004=\255\236\023\275\r\005\337;\266\301\241\275\240:\017\274\255\256Y=\372\255e:\305V\024=\003r\004\275\243^\005\275\212W*=\tR\321\274O\364\310\274\370\273\230=S1\210=v\241\334<9\033\345\274D~8\275\307kr=\330\\\365<\217c\t=.\024\002<f\261\230\275M\024\244<N\001\260\275Dr\204=\304W\315\274\021Hf=\255\311Q\273\006\342\014=\352\355\311\275\273H\223=\374\376\272=t\313\010>\241\254\210<j?\244<\211\343G\275\265\233K<\343FV=\236\026\224=\002H\353\274\346\361\333\273\330\200\317\274\021\360\311\274\275]\226\275\20264\275\344O\004\275\333\226\237=`\006\266\274\n\020\304=T\2462\275\307LP;\005\2620\275\033\350\254<\350\024\255;A\2609\274\353\025\226\275n~\217\274]\004\025\275\302>v\275\026\033P=W\240\237\274\235\014\t;\'\267i\273\202fS\275\370\373\364\273f\372-=DU\376\273-e\210\275\207U\236:+\227E\274N\250y=C\267i7|\033j<\376F\261;\007\345\216\274v\261\231\274\207\327%\275\251\215[<v\002\'<\250}\243\275\032c\014\275<\232\342\274_\376\315\274zzS:~&v\274\215\261\234\274\275\237\312<\277\315:<M\266y\275\265\t\216\275\300tL=\";b=\034\211\220\2758\002\247\275\030\010\016\274\200\222\362<\325rT<m\372\315\275Oz\024\275\310\360^\274\020\330?\275T\245\213=P\207\263<q\323\253;\032\345\262\275\324[\276\2747\0369\2740PR=1\210\t\275\254\342\331<\232\322A\274\244\365]\275\003\005\001=\031\226\252<\340%\375\274Go\201\275\266\245\206=9t\325;\237Y*\275\036D,<\t\307\317:+\304\367\274|\350\223\274/v}<O\266.\275s\023r\275\003\310/=\234\363\357\274q+\003\275\335\221\030\275\352\306\301\274\367\327\317\275\213\332\303\274\261I5\275\236T\326\274\367\000q\275\233\325 =}= \275\323M\266<\316\025\035=\314\010\277<J\250\212\274:\202\005\275\224\227D\275E*\\\275\344\014P=\364k\365<r\353\307=\215.\001=\307\344\320<\205\220\273\275\0225\323<\250\034v\274^\232\263\274e\343d<\201c\016==\343\204=\202,\335\271\277\324\222\274li\346<e\334\227<9\257\224\274\030ki<\213\231E\272\271\331W\275\310\326\314<8!l\275\232\213\010=9\312\201\275\276WJ\275iG\020=\003\221!=4\215\277<4\260\002\274r\272\375\274\211\362e\275d\252\237<F!0\274\025tp=>\024o<\364\277\323\274\266\036\002\275\346\346k=h\271\260\275Iu\251<\215\t\007>\2721\004\275*>\272\275 \273\343<y+\007\275qe\026=\300~\311<\330\272\316<\3671\222\274\215\274X=&:=\275\007\262D=\350\35409\001\010\210\275f\312\211\274\324Y\010=sB\251;\376\273.\274\000E\334\275-\225q\274\037\213\233=\307\241\007\275\243#\305\274r\207\301\275\021\3600\275h+\032\275\322\021\254=\265\326\273\274\366\010\260\272K\272\256<F\036\373\274;\325.<\315j;=\271\033\303\274\375T\023=Q\262\n<I\240\366\272\275\023%\275(\331(\275\261K\306\274>%\310\274{\225\027<\005\373\342;\317\225P=\\\201W=.\202\016<>\370\232=*H\364<\n\021\364\271\373\310\375<f\254_=K0\223\274\350\340]\275YW\362\273\223\371Z\274\265l\322\275\321\214\341<\346\240\364\274,\"d=\036\246\236<\221\224p\2753\353\352<\346\233,\274\341h\240\271`\325\214=\372\'\302<R\036\253<-\225\000\275\266\236D<1B\266<\027sP<\243\375\245;\314\003\305\274\327\335*=\226\317\312\274\316Es\2752z-<Ho\021<\266\316\301\274\215\267\237<\002\273\237\274\220\217:=1\007S\274.\'\373\274M\335T\275uk\203<y\345\242\274\330\342\201<\031\246.\275\"tX\275k\237\204\274\001h\'\275[\266t<\355{\321\274.\211\201\275\0059\341;\202\201\\=>QY=\313Y}\275\265#\205=\373sc\275\341!\025=,\026\013\275\224xT\273\r\032\334<\244\0047\275&>\241<\217kK=\314\033\253\275\277\203w\274E\340{\275\274\247\343<\220\034\202=\031N\222=\031]\274\275\211\010\213\275E\352*\274\035Ob<\261\225\265\275\220\364\310<\272\242^\274\265\000z\275\262\321\237:\266\007\237<)\256\016=K3\375<X\316Y=\217\035\344\274\263\242\244=\305\327\232=\rY\270\270\314\224\017\275\266\ny\274\310\257\364\274G\230\027\273\030\360\365<gCW=k]\030;\262\201\\\275\"2-\275\\$\334\274M\375\206\273\310\200\n=\321O\215<\265b\244\275\023C\271\274\203\247(\274\275\317\005\275\024\354%\275\t\324\034\275=\0262<\363\243\304\274\3040\177=U\324\226=/ \227<\204=\304\274\233\351\361\274\223\021d<\257S\335\275\216\210\270\273\320%\025\273\203E\263<\232If\275+\344\2619\247\341\320\270w\270}\275J_<<[-S=>\251S;\321\277.\273^\310\304<5\003\275<\327\004F=\007\007\327\273\337\243\374\2745tu\274\251\243_\275\246\212W\275Vr\000<\305V\271=\332\370&\275\327~\024=\352g\252\274a\210\010\275c\334\210\275r\356J\275\210\363\000=\213d\237\273\231 Q=\307\370\252\273\013\323\317\274\204\372\001<e\310\244\275\034XK=W\201f\273@\233\362:\361j\266\2756i\021\273\003\361\227;Rr\217;\345\212\204\274\271\254\352\273\301\312\004\275\375\227O\275\037\364~\275\037\362&\275T*\027\274\'\010]<\r\0105=^\275\201\275A\202\254;\030\322\227=\353\246W;?F\215\275\036\255\250\274i\232a=g\017\200\274\351\343j=1i\n\273\247\226\r=\335\257\275\274\250\246\304<g`\010=\356\267\203\275\366B\330\274D\016\324;]\203.\275\330\206\277<\273\323\317\274\254\000*\275\362uO={\364\010>\352\3557\275\314\355\035\275\253\006/\275l\270\215=4\2644=@\230\265;\274\372B=k\254\220\27576\220\275\342!d\273\036\272U=\225\220\004\275\273\001\310\275\357\206R\275\307\036+\275\223m\240<\220e\237\274x\204\t=/uE=fCe\273\224b\223:\372k@\273\255\265\342<\013A\216\275\374\372\205\274\245_G=t\322\327\273\342\210\250\274\343\216;<\331zY=\346\234\r=\017?d\274YT\257=\322\311\303=:\352=\275\314\016\270:\377>>=\233BV\275\333\257\027\275\251\300\037=\322\235\330;\374\"\354\274^\276\001\275\214\360!\275\271f\226\274\207S\022=\234N?\275\037\242\031\275\302\334\021\275%\332q=[\247K=Q\325\t\275\352\266B=\245+\221\273IT\220=$\005\225\273$:x\275U;8\275<`\361:\250\340z\273\311\215\244\274\213\362,<\352\031\225\274\266\t\255<2\361Y\275\354(\216=\357\304\214<\332\242/\275aA\331\274\026\nl<\3048\000<|\377\216\274\353w\031>x#%;\322Z\217=\242@F=\203\271A=/\344\301<\\\205\001=\227\361e=\345\016\213=\240\261\007=u\341\234;<\341\227=\223\231N\275\326\242>\275\330\257\326\274\210\341\r<z\201\270\274\261I\376\273\337]P\274\0324\031\275R\035x\275\\xu=\267\315\270\275\261\254\374\274\\\2305\274\307\307\206=UB\265\274\226,f<\374\363\276=\211Q\252<\225\375\320\274\243\303W\274\330\r\332;>a\r\275\330\356\311<\244\244\256\274Rj}=\nl\337\274\000\307\016\273\3048\016=\361I{\271\3511\037<_\003g\275\222T\r\275\031F\177<\333\375l<\326W-\275K\203\021\276\334*\254<\013I\r;\007\356\014\275\026\366\r=\036:\367\275\363Z\"=\361X\336\271\0325\r=a\371/\275U\334\271<\265\323\006\273\253g\360=\2116>\275\374\362\203\275\245\234\346<\224xA=\\H\022\275C\030\201\275\022\347\027=\340\370\247\2744\202\204=\222w\233\274{\261\320< .O\275S\3364;!Ng=\324\021\332\274c\207<;\010\033\237;s\225\035=\300f\267=\264J\0269Dzr<w\254g=\367\245\231\274\324\350\236<\032\313\302:\215Y\261\27331w=N\325z=-\300p<9|\201\275+\245!\275\2775\037=t!<\274\007[\347;q?\373\274@\021,=pj\377\274\023)e=0\023o=\367:\345;\211\"\222=\262c\277:`%\";\2260E\2754\253\330<^\203\251<R\310\316\274\325\320\014\275\2514\377;\302\016\030=\350\242\201;\304)\337\274\266\261\306;Z\347 \276\000\264y\271\362\2749\275\365\350\220\275\236\330\352<y\344\266\274\022b\343\274\321\233L\2757\036\250\274\024\355j<\021\010\316<\206\221%\275\002\r\347<t)5<^w\212=\211\026\035<\021\376\202\275<_\024\274\325\001\030;R\025\272=\377t\322:\263\216\216=\336\0033=\215UM\275\370\264\036\275%\364\000\274\320\027K=\036\214\266\272XN\2619\3004\231\274\034\347\212=C\230\323\274\3402\220\271@L<\275\373\377G<\023W\325\274\360\342\206\275A\345\031=\t\376P\275mV\221\274\320 s\274u\350\031\275?\315Y<Grm=\262\242\245\274#K\366<\n\303b\275I\357j<2j\021<\345Q\314;HN\013=t\'Q\275\351\326\030=\277\313\211\274!\3171\272\020W\037\275(\277w=\257O\006\275j\275\261= \277\274<\230\001\035=\355\342c=\277\304\207=\030\336\267\275 \n\336\274\315b\245=\355J\251\275:\347\221<\374\031\202\275c4+\275\035\027\370\273\'\310\267\274V*e=s\226\373\275\210<\t\274\354\303\201\274\370a7\275\261\010S\275\375B\227\275D8\345<))\270;\024\264\246\275\363W\006=\305\001\250=\0218\310<\374,B\273\002\323};y\374\320<rL#9\036)\224\275\335\251-=\232\007k=3\346\275\274b\"^=\374[s\274\275W\206=\320\017\243\274\256\246\347\275\276\353p=\003\332\264<\\\272\304\275\342\252\010=im\t<\320!^\2749Pb=%V\237</)v<K\273\303\274b\234\205=Z\304\377=Vy\023=\201\355\216=\301\023\366\274o\375m=\226\270\203\275\001}\336\274P\331\001\276\002\020\216\275P\031\267;\347l\263\274\317\307A<\207\227S<\026<s\274\221\343\001<\272\377X;%\023t=&\275k\275\240\376\3669\356!\351\274X\023\244\275\306$\342<\305%\223\275sy\336\274\241K:=\260\271_:\362\356\220<k\3065\275W*W=\026\343k=\253\302\013<0\252n=\340Z!\273I\365}\275h\331\206<\352\267?\274\367\204\240\273;\233[\275\2710\244\274z\220h\273\233\227\251<\220\203y<\256;\231\273g\213#=\210>\205\274|\235q=h\010\207=\336\231o\275V\201\200<\261\360P=\"\006\004\275\3732O\275Nr\202=\307\363\021\274\305\344Z\275{\313Y<\304\255\253\274\301j\311\274i\030`\275u|<\2741i\350\274\216\277\017\275\256\341\206=l\335{\275G&\'=\034N\337\272\356M\227=q\002Z=C\001\'\275\260\247\234<H\201\345\275\254R\313\274.\2669<3\274A\275\360I\031\275\243\274\247\274\205&\021=7\2610=\177z\315\275\034Z\016\273\260\342(=pZ-\271I%\275<*\312\030\275\341\304|<9z5\275\374s\263\274}/\230=\"r\005\274\332e\342<:\370\024\274\213\004\371\274.\270\240</f\235<\315\307\325\2742\246\270<E\317\274<1\266\240\274\255\003L\274\362\2413\275`\315\205<\004\374\273=\307\311\032<\237\334\203=;\347\225<\256\246\223=\204*\356;\237\345\360\274C\204\017<\243\215\030=\3739\223\275\342\234A=\243\302\226<T\037\205=\327\010\343<\235\262\360;\017\005\n=,W\314\274\037\326\003=%bS\275\314\301\326\273\335\333\316\274r\257;<\316x\357<\306\356\336\274um6<\217\230\275=\017qs\274`2\217\273X|\020\275x\374\303\274|\025\033=\242S\314;\006-\240<t\231\242\275\r\003\335\274\"UC\275#\2151=3\016\010\274\224d\213\2759O\320\274~\262\250<\t\337\246\274\220\225\262;y\363\004\275\035\305\212:7\257p\275{w<\275f\233\277=7(\351<\t\327\361\274Z_\234=\230\036\214\273kH\014=\332bg\274p\257 \275\021E\236<s\233\260\272\002!\345<o\244m<\326\372\273=\351\366\207=z\335\212\267\210\361\314<6y\017=B\300\226<\333\265\270\273\001{\254=\246I\272;)W)<\322Y\013<\337f\242\275\302\362-\275h\353;<4]\336<\323\341\364\274(\"\177<\344JH=J\200\t\275\351<\322\274}(\323<-\342R=\347\2471=n\177\222\275\327\372\343\274\241\344\274\274P\205\244:\005\216]\275\256P\030=xng\274\371\231T=!n\020<\007\371v:\031\347\321:sG\220=w\026\017\275N\017\246<s\357\310\275X\312e=\000;\275<\255\235n=\310\313\330\274\245\234\030\275\333\274\276<\202I\"\274T\332Y<\337\211\023\275R}P=3E\306<lO\242\275k\325\212\275^\243\004>\'\211\237\274Ka\034\275\004\021\251=\346\3315\275zv\214\274\204\247(<\375\370\300<\263\237=\273\321\325\212\274\3619&=WH\217\275\033 \317=\330\254\354:\274\245 =\\\273/=K\367\034\275\210\2219\2755\3274;\244\363\264\274D5\250<\240\372\327;<\225\216=wY\347<Cbb\275\366\026\264<\210xG<]g\026=\0355*=w\0143\275\376\357\277\274v\371\226\274\230P\321\274\325[\227;\031D\234\275\313\372\320<F\212\026=\3779\277;\320M0\275\326\234\353=a\306?=|]\244<l\022\355<\274y\000\275\363\334\310<_\375X\274$uI\274\371\226\333<\350\027\227\275\\tr<\204\350\034=C[\201=\210\251]\274\224\0027<\264\204\000\275\215\004\245\275\271P#\275\344\006\035=\247o}\2749\220\313\273\201\354\010=\250{\272=\004\227y=\214\226\"\275\317\036\350\274\262\3420\274{\326\300\274\022\346\237\274\271\033\315\275\267M\237<\211+!=\216\360#=\215n\272<O\331\024=\314\020\252<j\\\007\273J\255\255\274\304,\032\275\270\331\225\274h\004\277\274S<==\261Ft\274y\317\264<\260\234/\275nQ\264=3\316!\274\035\354!\276\250\274N\275\025.\205\275\036G\027;\301\337\240;\374\223\343\274\3146\260;\335\027s= \t\313\274\324U,<\tja=\370\276\244<\003\237\240\275\210\006q=l\232\222\274}1\262<\231\2328=\273\364|=Di\303<\377\245*\273O\010\312<X\202v<\2507\223=\370\276\254=\214p\223\273*T\232\275y\256\222\275lT\214=\022R\337;J\267p;-\203\037\274F\\\236\273l\276o\274q\t\203<\264\346\002\276\210S\031=\362WL\275\376\337\257\274\306}R=\321q\031:\225\276\226;\244\334\3649H\037\013\275\254\'9=_\313\240<P0)=\006Q\212\272?\236\341\275B\272\r\274~*\214\275j\222\033=\275\257\330=\302\277G\275bm\\<\270\032\031\275\346\366\023<L*O\275\3628\247\273\313y\257\273|\331\002=\314/7\275\231!\353\274&\317P\275n\357\371:\210%)\275\t\025\n;$j\314<\225<\266<{\324\227;\301P\'\2753%\032:\321\373\330<\265\307X\274d\301\320\274\271\310\"\275\346\003\010=\'\333\240\274gN,\275\200\274\272<$[b=0\020o\274\370{\273\274\320\201\206\272\242\342\221\275\177\t*\274\000\352\346\274\206\013\314=\224\372h=t\336;\275`\217\224\275E\0017\274)\005(\275j\2126=e\213\220\275\3732\036<\017}\257\273\275\3347=b^\370\2743\273\220=\324\002\354\274cT\272=\326:\263;p\324{<{\2611\2757p\331<:\315T=\302dO=\360F\213=\362,\367\274\200.\035\274\270\370\201=\016\352$\275\336\033\371\274&\316M\274t\272\254\275\204>?<\303\267M\275!\363S\275<=\243\2742O\211\274a\365o<\206\376\233<\334\260\250\274\0033S\275\313\373\301\275t\310\340\274\366(\213\274\244\221S\274\253\252\222\273>\251?\275\355#A\274\263\230\000=J]X\275\361j\232<\216\337\307\274\202UF\274\010H\266:\227\202\001=\324\343M9P\234\323<\r\365\n\275\374\256y\274\220~\300<\265\274\224;@A@:\362X\324<1T$\273\326 \324\275>\214(=n\236\026=\004\216\237\274\262\326\261\273\375\316\270\2750\240\351<)J\005\275+\221)=\225\263\226\275\002*\030\275\261RP=3\010p=\310\007\24194\030\335<#\217S<oN\217\274\344^\242\275o\370I\274\026\367\250\274\352\2439\273\320\212Z\275\254\352\\\275\177\225\250\274\301\364\216<\300{A<\376\352\244<\252\313u=\263\220P\275\267;\341=j\214n=%H\361\274\325\277E\275\360\305\207:\260\242\020;t\374\255\275\241\2468\273\360W9\275\235\217\370;v\2277\2740\034\325\274\340\020\273<\240\341\224=\021\357O\275z\305\'=+\243\252<a\377P=\030\342L\275\370\343\036\273\350\373\320\274J\241\231\274]\211\t\275\230W}=WRj=z\025\201=\202\303\267:40\240\273nB\035\275\327*\201<\272\264&=\340$\207<=\007\344<\231\372\276\274\336S\216<p,\271\272\265jn\275\034nb=6\251\245<\305#3\272\327\275t\275\2628\017\275\240L\235=9\256\324\273\345\361-=\022q\206=_y\222=\023\262\006=\365x\216\275\230\031`\275*R\321\273\233g=;\344~\212\274+\031M= t\351\274\000\233D<P0\330\272\016DS=\326E\022\275T\177\303<\264\177M=/\022\222=\343\307c\2752\370\223\274h\022\275\275d\032\211\274\303\266\275<\005!L<\026v\'<\0222M\274\0054\260=\340\210f\275&,\265\2743\211p=\321\270\211\275\226\343\212\274\007\214\035=\'\024\020=:\273\274\275{U8=e\316n\273\212\217X\275\277W\245\275\313(\231<?{\363<k\205\311\274\221\006\271<Z:\255\272f\200r\274z\225\032=N\032\240\275\205X\023\275[\254\036\275\306\343+\275N\3104\274}Ih\275\322\022\222<\274\376\250\273\375\n\207\275e\273i\275\341\\#\275\353\325\247\275\"\331\016=,\3417<\356\342 \275\216\315\346<\212\375\210=\023u\\\275\177~C=\033\370D=5\317\202=\362\025\217\273\314\261\263<\266\212\370:%W\213\275]?[\275_\226Z\275\347#V\275\020\017\220\275/\366`\274\273b7<\241\211I\275\341z\261<\372EK\274\336\237\'=< \277\273\376j\243\274\3647\202=\025W\306\274\033?\033=TR\300\274-\220\260\274\366v\300;\2229\232\275R\257|\275J\327e\275\311\224w\275\305\340\013=\254:\301\274;\276\266<:\354\034;9\302$\273\244 1=,o\325\274U\365\200<T+\345\274Z\031N;\010\304\t\275}\360\323<\225\321\223<F=\232;\274\233X=\313\305n=<\017\002=.1b<\013\0213\275\346\023!=\346\206\306;\035S\201\275:V\252;\003\236&\274=dr:x[-=&\354\t\274t\\\272<\247\331\022\275B\241/\275\354\031\212=y\262#<O\030o\275\277\313\020>e\202k\273A^\030:\334)\247\274U\366\232<\217zE<hnf=\024\213\230\274d\003 ;\237\370\206\275\306p\017<S9\301=TY\013;!E\263<+\327t;\341\007\372<\024T\353\275|\033\252\275\356\275\202=p\331\032=\362\331,\273\006@,=\306c\274=\256\301\202\275\3530\215<&\001P=\254\266\036\274\325F\222\274`\341\177\273\225\273q=\t\225!=\345\274\250<!o\204=%W\210\275\266\3532\275\311\333p=cr\342:10\005\275\221Z\002=\r*\006\274\003#\"\275\000\"\310\273\021\270\303<\224\361\242\274\024`\2728g={\2752\325q=q\274j=\234^(= \216#\274z\266\220<\372\363T=0$\221=fyN<`\243X\275k\025,\275\036\367\017\275\352X\301\273\373\246\234<\320c|=TY*=\350\242\220<\\\200\326<zd\302<p\324\000\275O\027E;6*\216<*_ \275i\240<\275\233\020$\275\272U\373\274\020\023A\274\023\362f=k\371\256\274\270\247\263\274\325\001\301=\'!\251\275\374\246\026\274\305\257\201\274\200\202\233<\265\265+=\3426X\272\243Z\032\275\371\270C<\356\220)=\224\275\216=\3228\267;y\232\365\274\334.q=\027;B\275)\375x\275i\224\345=\240\255\370<>\024\331<\354\t\006=\247\331R=\271=\347\274\024O\310\273[mh\275\252\206\267;\275\010\215\275\302=\330\274\253\304\237\273\335\353\251=%\\\201=\207j\034;i\017\213=np\243;\260\273\301\273\322\023\003\276\353\347\357<AK\326<\346\3037\275&\357\232<\254\212:=\313\\\\=\325\227\206\274\360E\205=\373aZ\274\260\263\346<\377P\206\2759\017_\275\353gW<\r\267\247\27501\277\274\251\321\260=F\271\276<\004m\322=u\'8:)\n\020=\365\260\375;\217\367\247\273j\306\321\275\026\264\230\274\212\2467\274\033GP\275B\224\201=x\032\371\274=\226)\275\023\270\245<i\220\001=\014B\205\275\'\216\335;|\231\007\273\217k\263<\337n\276;\255\304\233<=D\365:=\322\005\273T\242\3007\021\307\374;\205\221\307=\225=[;\323\225\026\274\323\235D\275X\375\211<\2300\277=\234\252\335<r\344Q=6\262{\274\327r\246\274\312\314\365\274yo+;lu\240=\353+\307\274\277\352\260; \261\223<PfV\271\305\236\"\275:Z\204\274Z\247\326<\300NW=\217r\227\273\220o:=\'\251\236=\245>\256=\271\212\033\274\324IB=\321\244\234=\014\352*=\030q\373<\373\206\377\274\016\\\313\274\363`\022=\276\266\371\273\222\nE\275\004\223\244<\3554^\275\177\023,\273B\321\340<_\320\302\274X\364*\274\224\253\310\274K\317\252<\250T{\275\321O|=\272\036r\273]\231-\275&O\000\273\003\376I=\205P9\275\255\245\001=Z/\006;Ek\302<`\246==\233\317\201=L\334\321<\222\023\302<\313\367\216<#f\213\275?\320\014\275%\244{\275*\006\307\273\037\212&=\"\r\244<\000\250\272\273R\273\025=\365\235,\273\361\2759=.\214 =k\272,=H\316\263<\320\327*\273\020\237\363<\020\235i\275QR\230=\271\177o\27558\212=\360Z\211\275\226QB\275\rA\037=\263\376\"\275\000+\371<\317\334\022\275R\336\201\275\325DT\275\334\340\216\2759@I\275\020\034\035<dK\016\275(\306\354;\335m\024=!\\\037\274\366/\215\274\3211)<\202f\271:b\207z\275Oj\334\274\005e$>\256\273\246\273NZ\303<WY\352\274K\254_\274P\341:\275\361e\243=\005\021E=r&\227\274\314yZ\274t\025C=\230k&=\342h\227\273\366\232\r=\352\007\213\273\251E\263\274\346\030\224=\256\356Q=\231\000q=P\305\006<\263\243\217\274\2513C=\207-$\274\215#[<\033Y\340<m\246^\275\264\002J<\353\211d=\351\264/<\324$?=\251\234\250\273\264\030\244\274BB\363<\334c\254\275]%\264<\322L\273<\270\365^\275\004\241\314\275\325k\203=C\354\251\274\326\332\303\274\213eT\275\314\226\235\274\036P\272\2741h^\275Ic\237=s\231:\273\336\024\214=\322\366\250=\337\027\024=\274M\354\274\013fG<I|\017=\307\221\250\274\0040\035=\244@\242\274k\257\032=\3551\372\273\253\307\243\2741\016\361:\344\337\274=\253\021\024\275(\312\274<\001)+=\351C*\275\'\376B\275v\376\331\274\365\214\205=\177\234N<g\345\021=4R\207\275t{k\275\303\215\277\2745\300\220<\211:\277<@\325\300\274/\313k\274\317\3154=T\025\336<\277P&\272\3730(\275\244\274+\275Q\220\330\274\366\240W=xM\206;HvP=\272\351\331\273\244k\301=\354\303\364\274\033\231\032\276<\014\304<\371y\276;\273z\236\274\227\212\336\274M\227\231\274\316\333\210\274w\027\024=z\351\205\275\344f\223\274\365\355\264;\th\307<\342\271\301<\210q\263\275\304\340\364<B\203\265=\235\037Y\275\262-\230\272Kp\277\273l\025\025=\027i\344\274\n|\344\274(\264\250\275\262c;\275\030))\275!\302#\275Q0|\274.\233\211\275\333I\323\273<\t.\275#\275\361<\260N\\;\257\222)\275F\345E<\311\\\313<!`\'\273L\020\\\275/\257\201\275\375\303\026\275`\000v=8d\026\275p\202^\275\025cR=\343\253\357<\026,\271\275\226\'{\2750\236e\274Ef\272<\\\214\t=\032\221B\275\007\330J=\217\177\"\275\354\021\254\274#\030\315<.\246a\274RSe\274uA\026\274\371\202\246\275\262\277\303\273 a\277<AJ\211=k\303\215=\357\354\333\274!\352\374;U0\265\274/\227\322<Fd\217=Ta\322\274J\342\265=.\022q\275\331\201\020=\365m:<\031\351\311\275\211\267r=\307\001\204=CtH<U\265\366=\027M\262\274,\204\224\275\225*\317\274\244\346<<\304\303H<\361k\241\275\336p\026\275\372\3072\275\202\237\217\275\271\356.\275\354\\\036\273\035(\345\274>67\275\252\2228=*\350S=\262D\224\275\241O\233=F\361\213=[I\317\274f\264\205=\350\300\020=\2615\217=\221\266\035\273\020\361\205=\0107\027;\212\217\212=I\214\323\274\314I`\275\345\365\210\273\262\316\261=O/\030\275\266J\353<3\263\213\275\355\377\004<\216\010\225\2754\307\242<P(@\275\307\201!<\211\353\271\275\265\221\205\272W7\206=\351\243=;~u-\275\304\377~\275\023\200\331\272\014\301\251\275x~m\273\245e\362<p\251\010\275\212\343\222=\300x\345\274\265\310\357\274}\316\215<\263\352\315\271\234(\226;\007\230C\275\351\260\334;-\025?<K\312B=\324Q\037=wC\335<8m\236<\377\025\324\274um\241<\007\025\334<\001o\321=\017_\355\274r\272\257\274\275p\201=R\270\365<Z\203\343\273sb\370\274y\t\036<\327\234\000\275x\351=\275\253\324\264\274\323ZR=\342AB\275J\345\325\274\312\"\026=B}\200=\232\341)\275\222Z\005=7Sf\275\337g\305\274^U\033=5\214z\275\351\241(<%\037\327\274\224J\006\275t\004\277\274\252\210<\274e\350\000=\244\260\214=\301\234\351=E\246\007\275\314K\'\274_\207\014\274\370\274\r;&{P\275\311\242\234<\213\372\360\273yoE=\210G\026\275<\335\261=!\374)=\226p-\274\031\315\226=\r\304\247;\0350\212\275]\272\211\274M\276v\275\215\033\010\274\027\'\233\2756Wf=\236\207e<[E:<m\215W<,\224\\\275\'\267\'=B\274d=\310\256\234;A\030\204=k\016\017\275\246\211;\275/X\005=\273Z \274\254\270\261\273\230hE=h\343\254\275\017v\264\274\330Ej\274!=\202\273\237\203\037;\027p\215=\201a\250\274\225N\024<\301\333\244=\353[\037=@\003\255\273\215\304\310;\375\236-\275>\245\\=\034s\\\275\326\353\206=\300$\346<\010\351P<8\204<<\301!I\275n\354\334\274n\366P\275n\363\326\273kTk<\222\301\000<\357\007\325<\265\000.=\033\022(\275\3233==\215ld<<\256[=x\273\357<\024\216S\275\2142\276\274\273\031\021=\333\177\226=y#\212\275m\337\326<\032Jt<\361+\010<\231\266\322\274\026\277\232\274\366\364\023\275\302\351\034\275e\225i<\216}\023=\301\212n\275\246f\373;\t\335\272<7O\224\274\013YQ<\317\020\014\275\023t\036=g\026\215=\205\343\200\274\365\234\250<\245e\036=V\235\031\275\345\346\275\274\266\371\337;\2723\207\275\3206{\274t\364\276\274\004\206\234=R\352\303<\211\003\001=_\272f=J;\241\275\362\221\250\2748\220\362\274\375\350e\275O\235\217\274\374L\006<\352\376q\275U\306G\274\267Q=\275\355\265\324\275\034]\307\273\333\264\023<2#\r<9\353$\272\273\251O<\372\001z={\315\304=\001\214\230<3&\033\275\207?\017\275\203\203\004\271b\r\006=\230\210\331\272;\227.\275\225,\256\275b9\242<\002\364\310\275\035\014\366<{\220\330<\216}\317\274\372\275\002<\020\352\032=\350Qn\275w0\335\273\014\363\002\274-\311\313<\357\006m\275\013\214P\273\326\0057=\257\371\304=\3719\265<\312%^=\006y\334<\273\246\336;\263\033H\275q<\213\273\357\212\006:q\302\361<3\360\367;\225\225\327\274\210(|=\352\2675\275\324W\320\274\375E\022=a3\007\275E\304:<\266/K\274\240\335\002<po\212\273\227*A\274}\222\275<!*\002\275\224\245\024\274I\034v\275b{\313\274F7H;+.\025\274\t\r\266=\370It;\202f\225==yx=\265vp=\351\036\201;\235N\370;\347OD<Y\362_\274(B\222\275\034EW=\034\t/\275\3667\376\273\347\204)=\344\336\014\275wuR<\376de\274\325(6=\366a`=*\312y<!\307\223<i\312f=\274k%\275\357\215\371<\210Y\235\275+\235\005=\000\320\240;\257\001\213\275\273\334\376\274Q\275U\275\002W@\275\2312\206\275\0138T=\326\210\201=?\236\211=\004 \325\274\023\242\333<\205\235\247\273\370\177@\275@\2244\275\304\327\007\275\326s-\274\372\306%\275\245Cc=\331yb=e\033\235=\326\271I=7\316\356<I|\231<Yv\230<W=\225=\246\200\264\2758\023*\275e\257\260\274\277f\033\275#\245M\275\215Y\215\275\354F\253\275\276\317\256=\033\327\255<\273D\365<\377\234\200\275\225\317Y\275\257\313\311\274i\334=;\275\232\234<\177\212/\275a\335/<\3243\010\2756\t\214\274\372\004P\275\024z\203\275\313\\\235=OD_\274\366\177\272\275\006~>=M\300\342<\027\304s;\032\025\345<\203\232\003=\337o\212\275\314\013\333\2745+\245\274>\316\021\275\205\340\020\275\027(\312<]\031\303=\364\314j:\261c0\275\332\354Q<\304A{\275\241(\342=\302\003\372;\303\207\263<yn\220=\252?\324\274\'\022\227=\020\312\245<\307\313\200\275\001\232G=\217]\n\273\251\215O\275G\300\212\275\014(\026=\327\010a\273=\324\022\275zP\017\275\033z\3109(\236*\275\203j\275\275\177\207b\274A\315\212\274\354\t\332;\"(\237<\223\235\226=\247V\021\274\035=\277\274\t\024\357\275,\271\372\274\361W\035\275\276~\256=G\213\375;\374\306\270\274\177\374w\274\264\230\352<\274TY;\356Bb\274\336\325\013=\306\027\223\273$\357\363\271\335\241t=\370\005$=\230\340\330<J\244\266;2\204\302<\331X\205<\220p4\2755S\346\274+\024\237\274\251\013\375\274\216\220q<\021\301\324<\351\334O\275\215\206\233=\275\354\365\2740\325\302<c\313\357<\371x\021=4\342\013=\272Q\356;?\'\232\274\024\357\343\273\265&\221\275 \262\030=\276\303@\275:\032\273<zV\205=\263(\240;\020`\302=U|\304<2\213\203\275\033\373\021<\337\205S9\230\225\261\275j\340\305\273FZ\254\275NJ\212<\305K\241\274A\tZ\271\262\026\020\275\226\310(=$\377\005=p~\240\274\002}\253\2751\331\t=j\350\242=`O&\274\301\214\203<\246\344\377<\346\3417\273\212y&\275\262$G<\200\276,=\322\254\034\275+\367\216=\0313\317<\227\rK\274\'&\314\273\322%\324\274\306+y\274(\3760\275\014\300B\275\367\233\"<\221\016u=\t\300\027=\003\035\377<d\226\002=\206.I=\327\320\271\274\252UZ\274\322\221\325\2754W>\275&\376\215\273\312J\240\275\242l\201\2748\027(<\177W#\275#\321\033\275\262\3138\275S\rs\274d\234P\275\245\320\206<V\177\013=\033\367\366<\t\224#=\310\243\026=!)\361\274(\225x\270\252I\254\275\341\rP<\303\021\202\275~\242\243=$y\342\273S\253.<\311\325\311<\241%\002>\322bx=i\005\032\276\027\373\326<\233\356I=\020\266\357<\342\360b:R%&\272\356i\206;\027a\264\274\331\t>=\227\006\003\2756\206%\275\216\240\031=\267N.\275\006a8\275V\'\252\274\350U$=\300\360X=\'\236\343<\310=\003=S\321\177=\206W\030=\001l\315\274\371\022$\274\260\033\035=\334;\241\274\347\324\351;l\027\237\274\0350\323;\221_\270\274\357LW\275\231\247\302\273\315wR=F^\246=\234\322\273\274~E`=\273\253s=\2015E=\010\244\022\273.\214\354;\221\214\016=\237\356J=\0312R\275\020z\206=\255\334\202;h\371\004\275S\035\333\275^\313\247\274\367\343\032<<X\314;\325\275!\273\026\275\"\275z\354\027\275\177\"\207=!)\214<\233\232\254\274ky\344\274\272\262\030\275K\027\'\273\2406\033\275Q\327\211=\263\320\365<\017\357\221;\"\032g\275Qz\352\273\322\304\315</\364\271\274eg3\2757v\331<\315\\\272\275L\351\010<\213W\026;\272\2045\275Vs\335<\3652\355\275\327(u=^\1778\275X%\270=6Y\267<\024Hx;-\204\261\273\036\262\313\274*>C\2759)z\275\002G\332:\274\261%=(eB=:\335\"\2741\277}\275\224\303\335\274cc?=\212\376\031=R\2519;\177\312\006\274\365\034N\274\264\306I<\303\216t=8\007\267<\003\tB=a\347\361\273<\246\221=fr\261=p\330k\271j\326\224\273\211\300\226\274\210\360\220<\013\213\345<\313\032 \275\254C0=\362<\226\273\226\234\210\275V8M<K\3307\275\215\257\276;F\314\014\273)n\240\274( \275=?\025\306\274\007\024O=\336\252\311<\363\316\356<\3047\035<\010\252)\275K1\201\275O\266\246<b[e<\2370.\275\265\307\241=&p\014\275F7O<\324n\355<};\034\275\025\356\337<oY\211=\215\252\342<\026\033\263\275qa\030=\350\035\024=od\035\275\317ka=\3309\267\274\030\376w\275\035\343\002\275\213rt\275\346|\022=A&\274=-\264\245\2750L\252=\000\255v=n\216\207\274F?\252:\210[\021=9\250z\275V\307?\275\215\333\303<\214#8\275\036sa=\322\304\203\275\rt\302;ZDw\274\212\233\t=\200\253n\275\033\303\025=_U/\275\203T\\\2757\002=\273\240\003\310\274\374[\301=\313\350\366\275/l\372:-l\217;\302\313`\2752\221Y\275\206\211\325<Q`\224=\333-\010\271\202\262m=\251\2308<\324\246y;\302\311H\274rQ\225=\321\"\033\275\027\351E\273M_\016<\355\362\262:L\341\221<\274u\335<\324\360\376<\343\007\226<\341\260\222\275\020\317\234<O#\021=_/\025\275\\\020\236=V\0349\275\025Nq\275C^p=$\360\261=\207\252\352<At_\273QaV=\311\255\016\275\273\216\t;\323\242R\2757uy<\257\347\240\274\330\361N\274\315\340\027=\354\211\006>\010\324\221\275>5\202\275\306\356\202<\004\361\'\275\013s\337;Qsg=\323\252\201\275\227\321\347<3\3576\273\331v\272\274\376\304\240<6\272#\275\256\265,\275\317\363\214\272\270)`\274P\033\000\275\336\215\200\275\030\315\322\274 \373\332:\'%\003<#\243\216=\206P\311\274\3234h<\315\227\363<\331m\324<,P%\274\360O\\\274@\351\214=\302\313\000=\313\230\006\275\366\333\262<?r\255<\tN\374;I\366\245<\341\276\037=\330\020\030;x\312\244<TI\312\274N\227\010\275c\333\234\274\270~V\275+\206\035<%zq\273\376Z\230=v?\267\274S\r\214<\231\306&=\344\0015= \204f\275+\262T\275\365*\253;\316Y\227=\340\307\275\275\363\277B=\001\335A\273H\032a<i\037\325<\327\333\017\275\340\017\\=N\016\335\274J\250H\275I,\204\274\302V\"=\037\212p<2]\230<\030\r\301\274\273w\r=?\224Y:\373\017*=hw\\\275\237\321!\275\376#$=\312a\300<\337\005u<w\257\227<x\367\327<\332p\211\275\231L\216<8(3=\345\266?=|\375X\275\004\0238=i\017/=]\325\353\274XGj\275\n\364\313\274\361\304\n=\341\036\022=?a\003\275,\242 =J\244\027=\316}\002\273;\261\246=[\2033\275\216}I\275\31243\274~\202\002=\341<\315<\233\211\255<Bv\'\275&\277\200=\365@\374:\tpT\275\312\024\003=\\6@\275%\336T\275\226\rH<\325\273~\275\003a\256<\233a\356=4\213]\275\244\320\226=\305\036a\273\304#\254;z\210\264\275\267?2\274\220\3561\275\025\366a=E\322\261\275E\363\222\275\263\307\365\270\371\330\212=\333/\220<\353\\\261==\211\312\275\263l\243\275^g;=9P\257\274\241\240\257<\"3\273\274\340\016\251\274=\342\177<bt\274=\"\354\340<\221\001\311\274\231\377\317<\266\360\316<\177\203\215\275\2018\007=\275V\306\274\367\264i<\336M\257\275\263\214H\274u\247\374<.,E<I\212\315\274T\215/=xy\206\275\'\006\r=\301\237\207\275I\271\205=\n\263c;#\330\234=\355\322\320\274\231\273 <\240\033 \274\345\306\213\272\223\024\217=\301H\206\274\227\225\222=\3412\236=\316\\\237<\306\026:\274.\201\n\275\234\313\003=U\203\345<\353\344\337<\236\274J=\252\337\263\274%d>=\344\212K\274\013q\206\272\372\017/\274}\031\325<qw8\275x\277S\275\275\355\021\275\336\301^<\233\216\247=X(\271=\305:\211=H\016\313;\370\312!\275\351\236\233\274\353\2159=\226\001\243\273% E=F\325\002=5\036\215=\245\002$\274\002\347 =\274\237\260\274\237\240t\273\023i\360\274\003\302\306\274!s]\2759\343\226\275\216\373\215\272\324\357\224\274fnQ\275 \301_\273\377R\360=\205t\037\275c`\"\275!\027\014<\0136\231\275mR%=(\203C;\025\240\237\273\027\232\215\274\351\211G\275\n\026\020\275\201E\022\275rV\000\2757\013\027<\236\n\036<\t\210\242<\361\032\213\274\3466\t\275D\207\272;\2476{<\313\242\200=~5\200\275\r\003\330=\t\310>=7\013\373:xhQ=\344\022\331\274k\223\213\275<\235\304\2745\346\366\274\217v$<\270a\017<=\353\342\274\274\2537\275\037\330\327\274\267-\205\275r\030R\275\3423\211\273_\267\314\274\371/\234;wKF=\367G\216=#\333\n\274\331!(\274\215[\025\275Q\341j<m{\360\274\234\277W\272e&\222;!j\211:\214N!\275\030O\020\275\352\254\037=\325\200%\275PT\245; #\330<\213v\241<\312\307\343;G]\314<\273\304@\275\327y\261=\020z\215\275X(\000\274y\373\231<\351\3620=\024\200\240=\234_4;4\350\204<<\357\277<\033)\301<a\036+\274Pp\007\274\317y\255=\022W\261\275\'\205\301\274\242!\255<\271>u<\250\217\270\274\3234\\\275\310\340\302<\316a\036=\321\312;\274\364N\232\273\217\273\210\275+\266\231=\335x\021=\363\362V=\332\313\374\274NX[\275\210D7\275l\257\007=W%\r=j\010\272=\234\022`<G\310\177\275\240\223Z<\t<\267\274\265!\255=\234oF=\315n)<\3739\364<\315\332\204:\205p\322\274I\205\253=]\241\035\272\007\307;\275\227\261\r\275\371mr<\232\322s<\t\203\317:\266\222I=\004\336\245=g\362\306\274\227*\014\272[\035\337<\325\000\231<\217\243q<!\302\233=\371\203b\275EDT=\305\251C;c\326\306\274\20624<mN\275=D\375\000\275\341\353w\275\377\357\234\275\230\243\276<Vt\006\275\247\326(\274\350\236;\275\211;U=T,\277<\232\304\2108\024\212\266=`>v\275\227A\212\275\235\335\307;\205S\205\275T\026\234<6\204R\273+\023P\272\214t\220\275\263\023\256\273|_\223\275\367\215\362\274p\014\000=]\303\206=1gm=\375\242\206\274\023\223\032<\3457\310\273\014\031\257<\2352\306<\223\205\026\274\000\231\211<\016\246s<\\7\025\275V\245$\274O\002o\275\263\'\374\274\003\321\242\275\034\225\273\275\330/d=\003Zs<\300>a=\t\343\217\271\002\276G\275\177\320\250\274\034\224\241\272\006{7=:\255\215<\177\344Y\275\347J\3058\346\346\320<\225\270\007\274\202\277\246\273_j3=)5M\275\332\016\307\274\360Zu\275rm\345;{x}\275\347\233\014\276N\324R=A\242\376<{\217*=\",\014=\030\351\272\275\344\240\203<w\225/=\270\247\022\275\001N!=p\250\237=P5Y\274F\317\023=\374}N=\353\263\'\275\365\255\006=\311\244\213=u\200\256\273\200\217\365\275\241\017l\273\014\222$<F\000\"\273\307\221K\275\257W\022=\021\244\214=\277\026\245\274*\014\270\274(\261\\\2757{?\2754>\246<\270TH\274\037]K=\2649N\275\256\244\272\275\331o\007\273E\003\014=c\213a=\024U\367\274\216\366\232=\344vp\275\350K}\274\245m\276\272\nM,\275A\216\245=\300\271\226;)\327\013=\223\253\331\274\271\252\026=bye<\323\037\201=\257\214\016=\323o\256\274\3725\365\273\370C\256<\353\253\251\275\330\030\001\2745\2655\274P\326\316\273\242\177\372\273\235\233~=\0365\005\274\250o\377:\201I\235\273|\021\210=\223\2263\275\212>\327<\023Z\000=\024a\326<:B:<\362\350u=d\351\216<\217C\207\272*\267t<p\000\263\275I\206~\274\024a\310\274M[0=b\346\216<\204\020\351\275s!^<{\344\000\275r\002\t:\262V\202\274-\323\2159\263X \275\276\212\227\274tK =\230\026\022\275\245\202t<\'\242\234\275I\346\215<T\350\035=\310\220$=\341JI\275GP\226\275;\007(\274\035\240\311=X6\022\275\0228O=\331\267D\275\307\230\253\272\272\033\032=\273g\237\2758(\033\275\340f\271<\004w\365:\377:|\274\243\234\234<{0E=\322\213\035<\r\3359=.\177\225\274\253\345\347<tP\335\273\212\335\210\274 \275\326<\211\256\036\275\276\\\267\273M\334\037=\017\205\240\274\245\335j=\203o\201\273rnq9\340Z:\274\3502g\275\333\332\271\274\301\301\236\274?\331\220=\250\033\n\275]7\310\274;\233,<\017p\210=\216\316+\275\315\327\001\275\037\367\263=\222@(;\370\325\023=\210mq\275Q\303\177=Z[\255\274\205,J<\316\262V\275S\005\303:\200\366\276\275\247\321\036=\"!\235\274\376\001I\274i\026K:\017\000O<\307\353\010\276\026\300d=A\360\021=C\244&=\212tz;\367\337X<\220(\215<8l\210;\342,\006\275\305(\006\275\'\264F\274o\224<=\013[\214<\206{\214\275ybM=\310\350W<\222\305\307\275=\005\"=\300<\207<\357|;<\233\377Z\273f\312\264<\260\2322\275t\010\235\275\221\024\211<\206\033\032;\350@\272\275\200\220\374<$el=\355\377\215=sbY<P\022!=\226;\370<\271\311m<$OK<\232\254\356;\010\023\210\275\032y\202\275\332\226L\275}?I:\370`\255\275\261\203\213;\207\261<=\332=8=v\237\254=\t\214\307=\311\247\003;\'\3517<U\032\265\2759p_\275\200\275q\275Q/q=@\307\264\274\225*\353\2740\310:=X\'b=31\032\274\325\217\020==\302\024\274C\n\353;\204 \237=\331^|=\321\334\306<s\027\233=\252\007#\2759\304(\274\035A}\275\\vY\275\001T#<\367\004B\275\277\264\343<\273\225x\275~+\232=\344\257\034\275\200\2453\275\010$Q\275L\205\203\275\306\007\\\275\355\254\247<\177\307o\274\310\337\217\275\211U\021\274z\3228\274[\252\027\274\016gp\273\014S5<\021\n\242=e\340:\275KbA=\344\353\236\275\207\332\355<\211\023\301\2716\264M=\007-\263\275\321\231\252\273\024wm<\376\357\035\275l\217\245:\200\344\215\275\220\205\354\274(\374&=1{\304=\277\320\364\275\246\310\t\274V1\301<\254\266\022\275{\242~<\023\327\371<Y\244\233\274\300E\342\2742]\370<\341Z\230\275\026\226\276\274\002~0<\245^\345<{*I=\356\316\240\275LB\013<\270\356\303\274\317\253u<\275\201t\275&UX<\014.\220<Wn*\275T\340\326\274W\010W\275\035s\036\270T\207?\275m&\256=p\025~<\224\202(\275|\202G=\267\024\364<\270\300\035\275\356+\275\274\006\222\307<tt\2557n\240\363<\202\016\217\275\341\214\002\274\000{\215\274\326\277\222=\016r\245\275od\026\275\2407\032:\203\2113\275\343\264\342=\357\021\247\274\266{\306=J\000\203\275\"\362\320;\032\214\245\274oV\036\275\3072%\275\344\365\313<30\247\274\207\224\'\275\257\313\250:\315\237!=$\021\202\274zWp\275\224*\236<\002\254_8\352Sp=\253\372\020\275\224T\036<\375\332\273=I\016,=\024\221\216=\265*\314<\312\2008=\232\362Q=]\237\031\275\315@\354\273wiI=\022\344/\275\321K\003\275\245F\244={\213\024\275&\0260=+\227d\275\177\3174\275\201I\241\274Ok\331;\221Z\346;\010\274\020\275\305\233I=\026\250E\275\360\037\376<\304E=<\354~c\275\367W\004<\343\374\341\2750t\202<\320\214\3169\332\014\t:\226\273\362<\273Jo=\"9B=7\247#\274b+\014\275@\327y=\245^.\275K\256\031=\025I(=n\261^=\350\214\252=\344\223z;\022\373\306\274x\211]\274m\240\013=_z\300<\265IH\275\302T>;\233\370\304;\333\363\247\274{;\211=m\360\303<\373n\006\275\'\023\020\275\267U\372<\206\302\210=\"h/\2758V\324<\030\3372;\243\252j\273\334G\311;\003\271S\275i\001a\273\240\322\351<6\030&=4\213@=\257\222\200;\316\362\235<\020\0100\273\270)\262\274\327h+\274Dh\010\275\366\276\031<~\032\263;a\207Y:\203\206\243\274W7\026\275\034\264!\275\277\353\255<7F\205=a+i=\324\2131\275\300rE<\224C3<FJ\332;p\317,=f\335h\272\204\320I\274mZ\367\274NVJ\274\276b\223\274\312\374\014=4\305\014\275P\326-<4\235\201=8\200u\275~\032\001=\376\023\334<0\023\261;\326s \274u\341\222\275\353\027o=N\3253=r\326<\275\271\216\230\275H\224\204\274#\341\307\274\202rA;dX\212<\341\006X=r\030_\275\235\r\237\273\"\036#=\335h4=\364\235\026\275\306\030\350;\375\023\274=9(\236\275\003>9\275\315R\014\274m.b\273\335#{=\006k\004=\032<\251<r\000\204=\224\370\331\272\371?\327\274\316\377Y\274\247\253A=\365\207\266\274\324\376\014=\276\313\273\274\013\0007<\2268\206=\206;\346\275\316\223s\274\022\021E\274\226\230\335<\007J\022=\2702\316;\206\273&\274\023\356\211\274\376\235\266<R}8=\251;>=U\352!\274\367\007\264<Q\210\274<\367\023#\274y\351E=\316B\267=\007\360\001\275=A\030\275\016\2542\275}\256\026\275\257 \367<\322\3579=q.\035\274\301\226w\274\260\374\370\274\242\214\270<=\017\240<\356\017w=\257\323B\275$*)<\203)_=\262\034Q\275[\355\251=5/\020=\031\351n\274\323\206\235\273Q&\361;\324\006\201=\3023T=\310x0\275\021\030\261\273F%\205\274W\2607<\0057k\274\006\336\324;Q\262\244\274E\337q\275n\024\221=\360%\260=OD\n\272[\274\270<\202~\357;!\373\004\2757\335\316\275\247Uw\274\252\246\035=\224\253\'\275}\235\216\274\354\377m=\247\315\261<=>X=T\255A\274E\366\032\275\370\312\271\274\316\300\267\274;\303\314=\311\3521<\241\202E\274\316dm\275\215\324\036\275A\005\205\2743\300\331\274\236\027\264\274\316\303\016=\202\234\030=\322\344\273\274w\n\227\275\233^\257=\342A\252\275\220\207\360\274}\005\355\274\243.\224;92A;[F\377\275\247\226\206\275\217\362\301<\036\320\023=X\336J\275\343\201M\275\305\304\205=\375l+=\207\371\206\274\227T$<\024\234E\2746\353\242<&\246*\274\361\325\r<\246h\225\275\037rR<\343\277\210\274\316\303\345\274\032\352\200\274\252\023X\272\241\263q\275\314\376L=\325A\245;=q\371:$L\373\274\251{\020\274M\240\370\274\330\233\374<\212\010\213\274\362\344\304<\231\314\031\275\004\331U;oT[=1<\356;\'\270Q\275\260/\253\275\274\342\260\275\327Dv\275\333\232\024\276\310\000\"\275M\343\030\275p\215\246<z\333v\273\222\210\001=\257A+=C|t\274\314\014\226=z}]\274ZO\003\275{\215\221=JK*\275\337\226e\270r\330\n=T\325\206\275\357\005S\275\255\2616\275p\365\221\275h\3160=\365X;<\016^\352<{\230\214\274\323r\232<9/\213<\023\305-\274o\2165=\277\006h=on\006\275\025/K<o\352\343<,\203\231\275\030\3227=\006\325\020<\342N =\006\342i<xz\342\272\311I4=8F\374\272\373\300#\275\370\360\014\274\277J\032\275s\2322<\372+\010\274g\252\376\274\002\233\215<U\305R=N}6\275o3\025;FE\355\275\341\261\211\275ZZ\343<7C\356<\204\275\372\273?J\227=M\216\315<r\307/=c.:\275\325\204\322\2745\242~\275\224\276\324\275\224\263\255\274\242\233\304\275\212\262\253<T\316\013\2758\364e=>\002\370<&\227C<\315\365\240\275$\007\231\275F\305#=\035\272t\274\333\340\350\270_\225\262\275%K(\275\222\272\204\275\332J\025<\333#6=%\3014<RI\342\274\311a\030<3\374\323<\032\334u<n\214\210<\315%\356<Ft\270=P\301\221<\\\263`=l\271;\275\226(\006\274,X\000\275\031D[\275j\005k\275\005\355\315\274-\037\212\275\264]\264\274\310\211\231=\321P\337;\241\252\373\274\\\372\303\273\263\310\030=\033Q\220=\376\244\360\273b\242K;?\301\227</.\307<a\250\302\275\024;.\275\364\030\003<\303\rT=0\270#<\363\037\272\274\352\236\256\275\301\r\'=z\222 \274\325\361\207\274E\021\225\275(\037\257<\353L\206<\320C\221\275\247\033\025\275\365H\302\274\354\033\341;\342?!=\275|\203\273\340\267\007>\346\223\304\274\363\367\270=\177D\032;\324\225G\275L>\202\275\017\333\261=\372\264\030=Y\036\003\275D\207Q\274\202\263H\274\306\327\246=v\354\240\273\014t\204\275\251w\230\275s,w\274\n\025\020<\205?\263=\324z\301<.\260\231\273\020\252\305<3\334i\274\257\343\2209\340Sr\274\263\202\222\275fn\036<M\242\273:>,T<\200On=e\0302<\3227z<]n\026=\372\035\302:Z\024\2539Oz7\274 \245\313;\026\266\302;\322\263o<L\343\003=\032=\324\274\343\036-\274m5\273:4oI<\366\010#=^Ul=<\240+\275\313\330\311<\222k\177\274\267\3038\275I\004X=\207\276\211=L\3261\275\030\001\225\275,\003>=\271\003\263<\241F\014\274\216\347\016=^mj\274\235m\025=\333o\326<mM\014<\364\220\202<\337\033\375\274D\005\325\274{z%\275o\223E\275\025\326\032<\336\325>\274\365*\007<D\237\215<\312z;\275\363\211C\275\272\030\216\275\021\355d=\2074{=\237E)<\304}c\275z\276%\274[;\017;-mO=\033&\027=\016\225\327\275\001\205\310\274z.!=\272\017\356\273\022\232?=8\010\027=\374\201\301<\311\254\217\273\225\235\250<t\340\036=\032\016]\2756\276\200\275\016\201\313\275\347\324|<@\230Y=d\357\324\275\177\\\021=9\207\263\275b\022q=\211\353#\275\312\313\204\274d\334\303=\006\263\231:\004\312\214\274\321#,=\0057\217\275h0\225\275\336\237\251=[be\274\235\217\277;)U\006\275vuA=\373\303I<?v =\335\213\001=\201f\030\275\275\003\240<S\204A\274sN\037\275\311\341\221<\023i\230<or\004\275o\316\177=\231\216z=\357\357\272\274mC\273\273\204\000t\272\244z\213<\026\260\362<3\036\240=M\3174=L\250\010=yx\360\274A\034$\274#?\001\274\217!\261\274\326A{\275[`\0139W\262\247=-.<\274?E\022\275VuR<c1\215\275i\271\247;\347\2545\275t\215\234=\241T\326\274\27033=\027\210\266\275\003\277\t\275u\023\230<\336k7\275\217\270\245<o\261\315<\334\301\225\273\036\271j=!i+=\307\334\242\275f\221\235<\0237\374\274\301\2367;y\340\033\275a\346\312\275\311\330\373<#\026?\275f\267^\273d| \274@m\321<7\271\341\273U\316\241\274\234E\022=\223\231O=\274w8\275Q\030\245<&\247\321\274\310}W\275\236\344\204=\366\261!=5#>=\2153\374<\221\003\260\274\200\237\203=\371]S<f\033$\275dt\017\272\201`x\273\342d\177<\020)\233\275i\207a\275k\177\325\274\242\333\013=\346=\334\274M$\000<Q\3155;\004\362\230=\216\0374=+\255y==iF=\213\005\262\274\212\013\245<\236\205\203<\212\215z<V$\t\276\302\371K\275\013gQ;\227\025\210\275\262\260\316\2740\341a=\316\031\213<\302\247\017\275\212v\230=\372\271q\275\004(\314<\260\334\252\275\204\211\227;\337\323\002=\372U\263<\377\365\217;\303\226o<\306\350\225<p\2540=\022?\226<G\'\376\274\367Xl=\036P&\275\323Z\027\275\230p\r\275\205{\265\275\241\321\267\273u\017\342<)\240s\275\311\226W\275\024\2234=\273\336\366\274\337\3607\275\224#n\274\361i\247\274\355\323\250<G\014\t\275\270\254\260<\376.H\275`3\207\274\257c\340\274\355y\322<\266b\246\275\353\343\240;F`N=ZE9\275\023\231\203\275x\305\216\275 \020<\275:\272\306=\333\257\302<\277\007\251\275\300!\003=U\322\263\2759hq\275\023c\221\275`\277?\274B\265\270=\001#\306;!\257s=(\230\307\275d\242\022<\351\037\274\274\370\304!=F\237\303\274\020\215\n\274\"U\017\274\233]\227\275\337\010}=\256x\006\275\021\264\323\273\037?\311<\320\375)\275\3726\352<\251/\314\273\335\326i=\265\361\017=\372\202R=\351&\035=\345:\010\275\324\320\241\275\245\376\213\275B\272\253\275\002j\255\274\376\2634<[\213Q:\246#\t<Dc\235\275\300\021\363\274\314\202\"= \t\024=#j\222=\2633X\274\240\274A\275/O\246<\"n\354<\330\251\\=\177\345\235\273\020\306\304\273\035i\314<\301\034\010\274Iv\r\274\027\247T\275\272\236\363\274\246\204\025=)\3050=6^\301\274L\321\223\275\274\021c\274\374\241\005=~\030n\273Bx\270<\330\230\312=\002QI=<\033\302\274\216\035\361\273\340\212<\275\300\212\346<\234\357\030=\004\010\025\274\276\301\250<\240\236\021<\260D_:i\207e<$JK\274K\275E\275\t\316\267=\332\377F\275\037\242\331\275\030\'\202=\327\210\274=\247\361\253\275\032\341\246\273\001\333{=\213\334N=\341\342\223<\357\265|\273{\334/=\025P\365;?\2159\275F\273\256\274oD4=0 \021< 2\227=fd\327;G\016T<\032c\033<\357\n\216\274\233\331\306<hT\332\273\327\357+\276^\222\257<n\234\271<x/\256<\000\237+=\017Y\227\273u\344\351<\203\213\307<b\236Q=h;\267\275#\001\245<\370k7<\306\234S=|l\227=*\357\227:\007]d<\376\352\013=^Z\276\274S\363\217\272S;\253=\277\022\333\274\375b\305=\350\302\232=\242C\362=~\223\323<\362\007n;9\007\314\274\034\222%=jl\231\275\241\304\231\2750\333\363<\277\302\212;\220s\210\275O\376\323=\001\202R;}\202\025\274\331\341$\275\322\0001\274\016\307\312\274K\032\017=v\005\233\275!\3252\275\310cw\275\327\360\230;\262\312\035=\307\034S=\353\315I<<\343|=\355#\246\275\254J\"=\315\261U<9\2602=\274\355\033\275\214\217\215=K:P\274\333\245\350<Z\210\t\275]K\016;\263\3107=n@0\275\000\264\034\275a\264\245<\211*\247=?\336\366;\266\377\273<.z\346:\273\204\272=\333\243\376=\270\031\004=\314\016\272<\240WC=\343\3451=PKI\275&\242\225<\203\200\007\274\270\265\\=\275\221\226=\310\313\334\274h\311\250:h\376\031:\004\344\315\2743\267\335<\002x\367<\007k\002=\003\223W\275\336ws<i\312\034=\007z\240\275\225\"\235<\344\261\352\274\"j\204;\314\377C=IJ\255<\2061\023<!1\023=\264\322\225\274\243o!\275%\247\312=u\234\264=\322\034{\275\006\223\203=\003\222\\\274\007{/<V\201\213=\330\3736<\247&\300<l\346\275;\036\231\204\274\251\035w\275 \020\016;&uJ=\201\t\304\274\n\020\217<V\231\307\274go\243\274\243\033\262\275\277U\310=\216\314\375\273\'\326b<\214\342Q<B\342\264<4J\203<\022\233\214<U\337y\275\033\211\240\274\225\273;\275\367\372\007\274 \222\010=\202\250\256\272\342\374\003=k\0057\275\306=S:\243\227\223\274\252L\267\274\2239\367<\taM\274I\276K:\335\351\320\274V\240\213\274\200^\206\275\342h\007<P\222 \274\037\263@\275,\301\210\274?N\371\274\376\373*=\'fn\274\007\2549\2746\035\031<\252\1775=oG\351\274\362s\200\2757|\353\274\210ow\275/\350\177\275{\253\254=\260u\203\275\355\252\026\274\2352\231;_\241\002\275\350\343\331\273Ty\257\272\035\364\276<\364\361V=\372\374\"=\340\353Q;\377\353\205<Q\315\234\274\311X\000=\017\352V<D\261}<\026b\342\274\313S\006=\313\315*=.\2159\273\326kD\273~\244k\2749\300\351<<c3\275\226\231y\274\311#\223=\372UF\275\225\307c<\240\2548=\345\235\005=\230\360C\275\235\031\214\273\304a%\275\013\361M\275h*\016\275\212_\364\274/{\261<\225\241;\2755\247\223\275\263b\203\2736S\221=I\017\227\275X]\220;@A\227=y\252\270<\223\325\351=\270\2336<\356\3636\275\203RA\275\206D\265\274\366\253\202=\256\243\210\2754\210y<\333|\226<a\215\225\275?\032\206\275\212\356L<\200\013\251\273X\205\216\275\032\365\261=s\352\233<\252\2636=\216\215\320<u\243.<V\014\223<\207\235\215\274\366r\330\273\242\246 \275+\373\320\274:\214\241\273$\203\376\2732+A;\"\270f\275C\014|<\3304T=\323\030\221\274\262\256\007;\330|\000\275\277\347\231\275\023R(=\n\241\206\274\201\301J=o\036\004=w:Q=3\036\250<\274\314\354:\323\263\277\274\260\004\005\274\321\216|\275\301%&=D\273\336\273|\275\221\273}\305B\274\344\021\001\275\020B\265=\231\240\t\275IS\241=ib\364\272\000\311<\274\035L\251\275_\207\246<\2626@<a[\217<%\255\337\274\304\034#\275\305\004p=\013\305m=\302e\315\274\333\357\313\275\235i}\275\335\026.\274E\204\007\275\003\203H\275=H\001\275\204\205U=\377\0376=\001\351|=;Q\246\274\244\330I<\236=0<\220W~=\227Nv\275=\226\357\274\236\353h\272^<\242\272\250B\002\272\024\024`=,x\375<\334\276\013:[\243H<\020\355\352\274\327`\014\274Z\242\016=\302u\212\275F7\262<\311\263\206\274p\253\300<\335\3665;\244JK\275\361|\374\274P\'\251\274NI\010<\205\375\223\274\267\211\347\274Vh(\275\243\257\226=Ic\301\274\244\210g\275@Q;=\226L\302;\005\346:=5l\352<E\335\035\275Sd1\274\330h\311<m\237\305\275\036\273\267<[,\014\275\365\321\210\274\304\212\r\273\"\330\201\274\034Wr;\214\242\004\274\353p\332\275\371\250\244=\273\001\311\274\266u2\274tg\352\274\025C\223\2747\252@=\251\216u;\227\351\207\275\261\336\253\274\371\337R\275\031=\366<`\002m\275G\212U\274\373\032\207\274{:v;L\327\227<\304\244\023=%\177b<\277 \003\275\021b\007\2756e\261=\207\3146\273\242\263\017=\273F\255=\367\231\255\275J60=/\315\013=,\243\323\273\030\310\213\275\375P<=\016\266\374\274\367\023k\274\035\235+\275j\031\212<\350]G=\2450\t;\216\036\002\274$\t1<\003\372n\274\375v\320\275l\225\373\274\321\371g<\210\256l\275\354\370[=\302\363\022=\025\210\353\274Vk\365\2740\305\327\275\202\n\033\274\265\035\016\275 \252T=\001S7=\365\252\035\2751\034.\274\306\322\006=\274\240\315\274\352\363\335;\000\003\200<zb\300<>\030\023=N\207\016<\311\001\351\273j\371,\275\235t\276:~\321\032<\212\210\035\275\177\342\323\274\247^ \274pt\214;Xz\204=\350!\033\274s$0\275\377\340\204\275\321\0052=\033#\360<2\250\333\275gQ\241<\221\032R<T{A\275&\373\201\274\000s\255<\020\023\356\273\230\336\303\273^\311\334<\207V\243<\235\262\256\275L\342\200\275\237J8\275\263\243\031=\366@E\274\373\222f<Pj%\27575\326\274\301\023\007=\310\224s\275\265\227\276;\232\376\204=\010\301*\275\310l?\275\211\335\'=Ll\035\274\207\356\362;c\206\030\274\320%\320\274\264\340%\275`0\035=6\326]=L\334\312\274Y\262\350=\312\261(=\326*C;\224\022B\274\355\223\343<[\203\225=\302\2400\273\2406\324\2747\256\177;Z\006\260<\273pi\274\326\n\201<^\230\221=\343t\'\2745\303\252=\346\177\036=M\274\252\274\330cA=\036\350%\275\275\373\375\274\314:!<\0365\3229\013*\017>\025\036\262\275\030\330\274<\354\316\232\274\324\206\200\275\2769b\275\"\005F\275\337W\261=*\333\363<G\257\271\274\355y\261\274\017g~\275\023\304\313;\217\224\255\274\316l\343\274\255\2105\275\325\006\215\275\230\202\372:\227\266]\275\372\331U\274\027\2740\274\272\350\\\275hL\302=\375Dc\274\025\357\033\274sg;\275\314\317\222=\223c\350;\223\210h\274W\335\200=\022]\366\273\307p\271\273\366\211\304\274\004:w\275\020\340Q\275Z\317\250=UH\000=\351\266\027=o\332\030\273\005U\021<9\003\341;\025\362\361<i\371\317<e\001}\274\020\316\004=\234\331\251<o\375\335\274\rG\263<\243\272~<\212\2642\275f(\302:\207Vd=\220\322\331<+B\304<N\2768=\302TP<Ga\377\274E[\356\274\277a\021\275\037\313\343<\037a\r=\265\224S<zj\021=\003\377\346\274\350\241v\275\234 @<\272\274a\275j\0265= \323\341:Eb\274\274(\317\023=\325\3351:Xe\236<\241\375x\274\376\327\375<\277fs=\010\216?\275\357!6=\205\377\262\275\317\265\343\266}\031\231\275CX\221\272N\347\220\275\335j\217\274\\\326G=\306\256\362<Q\316\310\274\367\201,=\245@\316\273\270\362\316\274[\222\355\274T\031@<1\021\235=\'d\361\274\273\351\263;.\310\222\275(\371\025\275\211\260\311<\343rv\275 \024\272<)\356\266\275\r\370\257;(\032;=\316\252\203\274\337\031\241<\276s\355<\364O\200=\031\354\031=\266\351\264=]\360\266=\000\240\005\275\330-A=\322A]\272\r`\023\275\342\363\035\275\327\272+=Z\\\"\275\206J\354<\364\225\"\275\013\362\035<Q\355\004<\377AW=r9\226=\0078\324=\203\320\001\275\2579\010\274\231hE=\256\321\363<J\276\200\274\311\2136\275\017\344#\273\372\332\265<Y\354\255<A2\326\274\236\356\277\274\373\010\206<\005\037\255\274\374\323\310\273\332\266G\275\002\257\346\274l\373j\2749\323\200=\032\024>\275\215\2028=\tc\213\273\271\252\212\275\310\365\037\275}\341\332\275!?A\275L\233\331\274\336\275\315\272\337D3=\267D\225\274\n{0\2758\220\212\273\253\347\344<\355\227\376<s\361\t=\270\311\362\273\247rq=<\336$\275O\026 =\221\200\367<;\361\244\273-\213\270<\200\3620\271\3034Y=\335b\326<S\322\261\272\235,<\275f\244\3459\301\275T\275\232\244Y<T\230)=.\2504\2756_/\275\346\316\205=\'^\004\275%\347\275\274\277\373w<\216\351\303<\226\302\216\275S\200\010=t\201\312\275\204\270y=\246\227G<\212\352\002;u#7<:\024\327;>\001^\275\330mp\275\333\355\222=\027\303\247\274Yd\013\274w\375z=\240U\261\274tzo<emx\272.d\245<\361\005(=\306\3528=&\204\"\274\247%U\275#\272\032=\213\226A=\363\240\276\273\215\374\222\275\021\354\204=\230\221a\275\314:\220\275\024\203\351\274\'\365\367\274L-%\275bJ$=\033H\356<\375IW=J\3501<j5M=\346\020\232<\311Q\256\275\373\352\216\275\3271\240<\246\324\036<\3659\364\273$\006\236;\367\277w\2741\006\270\274\003\374\306\275n\022\030\275\2738\313;\255\267\025=\n\367\343<Uj(\273{\357e=a\356\275<\305J1=\335%\201\274\324\010\375<\031\023g\275\205\221A9\006h\010=7\377(=e\035\263\274\233$\031\275\271/\226<\234\322\257\275\363\037==\204\202O\273\3543\244=\244\206\"\275t\366\343\275\372\021V<\245\357{=X\335:=\331\214a;\301(?\275L\257\002=F\335\312\274\226\030\216\275\314\027\313\275\241\t\244=\235M\202\275\370E\023\275\316@\201<*a\333<\344M\025\275\231\330W\274\310e<=>U\360\273TK\356<\031\217\030<.\302a\275\017\tk:\343\265\243=\304e$\274Iy\245\275h\353\247<\273A\225\273\365/\333;\023\350\201<\036\\\202\274\363`\264<\336\326\266\275\200\233\267\275+\230n<?\371J<\310 \331\275!\025c\275b\337\330\274@\332]=\344\211\272<\260\344`=s\324\356<R\374;\272\374\273\002\272\227\020\336<\222\372\201\275\014qR=\302m\354\274\355\214\036\274\034\331\203=\nH\277<\312\354\027=}\254\213<\254\251i=\212\353\014<\356\343[\275|\371\356<\236\252z=\317+\332<\263\\\272\274\237b\241\273X^\314<G8k\275\377\336.=y\026\247\275\262o\031\275\365O\351\273\322\377\274=\254\233{<\232D\014=-\337\351<rg\2569\331\371h\274\213\254\201=\373\006h\275\376$\033\273\310\223d=g\030\364<G\037\277\273\337Q\022\275\242<d=o\304\351<\0361\310<\273\326\244<\210\362\"=1@R=\262\301\3179l\257\211\275\023\320\032=\035\361\216\275T\"+=:\346\215<\217\265\273\275\316{\375<\276\177\213=\335QX<Xhq;\343i\326<\213\004\241=\377\211~=:e\362<|\002\327\273\013\217\241=\033\265[<\320h\236<${S=G\t0=%\302\210\274l\217v\275\017\023\376\274\273\251\206=\302\252\226<-S\243<\27075\275u \027\275q\215\025\273\343Mx\275&\274S\275\313\024\024=W\275\237=\275\035;=\236\304S\274\347\205\251<ZN5=\230\237?\275(\003\276\274#z\026\274\r\000V\275;\004\256=YT\205\275\322\265\211\275\033\300q\275\251A\007=d\232\257=-\313\021\275<2\2128a\367\214:\301\356Z\275\202o\331\273\277\313c=\205MR\275\327\352\211\275q\256\244\275\016\010\247=\373\304\037\274|\267\337\273\330\334\024\274\221B\354\275\347\202\221<\303\303J\275T\327H\275\225T\242<\3031c<\351au=\310]\023<v+G<`\211x\275\231wV=\220\340\273<\244Z-\274\014@\251=nMD=sq\216<\t\323\251<\3647\274:r\235\267<\231\027\036=s\276\\\274\251\212\323\273\373\331|\275\324\352;\275\232\277\344\274\004A_=\r\014\301\273\236S\211\274\210\345\005\274|\216\177=\360\206\205\275\312\213\376\273\310yi\274\320\344\214\275];\341\274\254\"-\275_i\256<\346{\006=\234\033\362\274\222{\254=\'\273\r<\332r\367<\250\270\271=%\006\224\274V\262!\274\237\016\231\275Z\237\333\274\001\324\250=3\347\335<*\036\314<\247y\334<\323\032\355:\220,v\275oYD\275\256\332\227=\203\355\317<\2147G;\272\020/\274rKO=A\315{\274l?\226\274:\037\200==\266\024;\316)\324<\0024\240=\337\327\263<\303\177\200\275Irf<\364\273\252<y?#\275\212\010\367\274}\021!=\004,\273;]\253g=\343\276\230=\254\330\250\273d/\315\275\225\211A=Hm\344\274\022\345!\274\003,\233\275~{=<B\3627<Y\2117=\253\025\360\274<.\225\273\025V^=8\222*\271 v\236\275\352w8=\264\307%=\274\022\312\274\233\3276=\306$\227\273\007i<<\016\006,=\013x\005=,\2100<\347\027#\275\304\254\307=R\212\3749#\304?\275d\250}=T\350\017\275\337k\327<\376@\233=\2444\030\2752\005U=\rJ?\274Z\304\016\272U\331\177<\266V/<\036^Z\274\t!\024<\337C\006\2750\016\221\275Kr\303\275\345\311\220<\310-l\273m\350O=\305\'\177\275-Z\263;\315\006~<\0053\207<\346$9\275\362WT;\255Y\332<m\352\262\275\226G6;\361/\264<\261\036\375<\356\367\005=\331\265\254\275\311\"\212\274\010F<<e\243\277<\266\306)\275m\332\204\275\303zd<T\026\244<\243\333\246=t\315k<q\207\004=\001A\316=\3507v=\3265\343\274s\214\231=\335\272\300\274\357\251J\275\334\257\260<\373u\262;\001\371\030;\370\205\257;\233\016\006<o\270\251<\207\302b\274tE\276\273M\003\024=\333\360,=\352\240\233=v\344\014\275\027b\006\275\271\222\027\275\370\343-=\202\273e=m\001,=/\346\202=\273\377*\272.\267\336=\\\022\264\275\307\370t=\016\223\207\274\265\306\325<\210\365Y\273k\200L=\007\352*\275ZHs=\016xG<F\267\017\274\254\026\377<\226=\020=\233\310\010<z,<=N\032\336\274h\022\211\275\336\365\027\275L2\231=\006\270}\274c\276\321\274E\225@\274\200O\321=\035)\025=\301\361\274;\222\325b<\207\027\303\275\362\366\305\275\321\223\214;\370\264\223\273\202\034\007\275\233\350S\274;9\311<\262U\222\275\003\306\350<L\021\237\274\235ah=dy\036\275\250\007B\274\221\260\030<[l&=\200\265(\275\177\264\006=|\327F\274z\333\272<\241\307C<\217\211\203<\360\260D<Lv\201\275\237\314P=\263B\361\274I\334\310\274\320\231O<\215\315\213=\211w\367=\366\202O\275\034+\023=A\004%\274\2224\202\275\032\253\263<NM\002\275\31118\275\024,R\274;\"B<\200+s\273\217h/=\017\301\200\275\241\242\335\274\201^\021=\025\250\214<\342\366/=\000\352\374<\021<\267<\000r\262;b\235.<w\2259\273\236\345\376<\372(_=\270,\024\274H\203\314\274@\354\036\274\237\250\241\274H\206\000=\247\351\006\275;\362Z=\371IS\275:\322\\<\253{\202<\320S\321\274b\020\267\275n%s=PS\313\273h\014\255\274u{F\275\\\341\224\2748|-=\267\340P=\356\375\212=\204\002\205\274\324?\317\274R.4:\336r\261<X\240@\274oS\302\274r\231e=%\014\253<B\276Y;\244\271@\275\221\034-=\370\313\354;\334:\036=F\032\230=\264\240\251\2745\0075\275\237\357\256=\002\316\326<[F\376<\353\333<\275&\262\264<\355\357\264\275\312h\327\274@#V\275\350\246\023=^\003\315\273\315df\274)\\\275\274\n\205\331\274\216\"\374\274\032\202\314\273\177\315^<\274\323\244;\272\272\315:\336\344\n=\r\244\261\274\"n\024=\177I\261\275\032\036\025\275\200\236J=\034\017\034\2748\006\246\275#$F\275\224\256$\275\334\344\030=N\351\203\271\014\317\251<)\342\177=\260\324\000<z\200\330<e\'\034\2751\256\353\275\243\276\361\274kH\353\274\301\037\216=\t&\005\275\214\036\227\275\237\372\266<\261V\304\274v\206\312\2753Y\t<\2360U\275J\206\212\274GK\212\275\336Z\027\274\243\237\005=\262\345\221\275\037\373\214=\"\2233=\361\342\216\274\250\201d<4\230H=\357\300W<\356\362D\275\265X8\274&\236\244\275\222\300\\\275\213\220A=\030\235\334\275\216,\n=\275\343\034\275\027 \335<O\010[=\3300\232<`\321@=:\250#\275\254\260R\274>\201\254<i\236\225\275x\036\266\274\341)\253<\337\220p\274\353m\272<\003\222c\274\036\036A=P\342\271\275\221T>953;\273\035\230U=\263\'/=#\327\345<\237\335/<\317qE=U\317:\274k\364\251\274\003\313\260=t\032\236<=N\205<\to\253;\234O\245=\315:\376\274\344\212-\275%R\237\2734\272H=6\207\204\275\027\334\324;\321\021\206\274\205\276\205=;\\\024<\257\277\216=J\351\351=\005\257D\275\320z\304\273\304\017\265<\010\014\214\274$/\031=W\207\036\275z\032 \275J\315\005\275u\256Z\274\017\032\2529\372f\267\275t\352&<\225^\036\275\352\271\354\274\311\370!=\246l\003\2753\311\t=(\276@\275\217~_<\332\346\237<\021\232\244=\331Vm\274.s\014=\361\300?\275\314\207\002=sn\'=0\260\213\274\225\211\234<\257&f\275\247g<=\033+\023; \347\332=(\354\202\275\302\376\030\274\376FU\274j\317\242\275\0349n=\346CZ=\337xY\274\000H\254\274\273\232V=\250\320\206\275\271\355\274\274\022\360\345<&R6\275\351\326\312\274\244\362T\273\375G\016\275L=\000\275\234\002\201\275\265*\n=~ M=\037\277\366<\315\253\216\275\361\373\300=\315\234\233\275:)\311<\024\335\230\275@\004w\275-@:\274[\331\377\275K*\034;\367|\303\273\353R\321:\214\327\'\2734#\010\275\256\210\221=;\352\210\275\030K;=x\010\210=<\325j\275\352\3371<\276\3214\275\362\377\370;nV\245=q\014\242<\350a\211\275\371\354p\274\210;\232<H\353\010\274\376\021\212\274@\343{\274\327\274\013=\307@\t<\005\342\027\275\344~M<\265E\353<`\277\016;\332\010n\275\177\222\316\273%\354\213\275\014\002,\275\251?_\275\r\302\'=?\307\361<\214po\274\276\020\220\274\215\t{=g/\375<\317t\257=\351\'\255;\323\372\235<\272\035\322<|Dj=\303<\213=\301\243\212=\030\n\206\274%\005\360;\001\361<\275\254zg;\361\217\245\274\376 \241=\332i\026\274\020=\032\275O8\016\275\201\335\261::\265\320<z\277\021\273\024\026\243=++l=\212\207{\273\034\233\026\275~,\026<,\363\370\274\246\212\202\274\257:\230\274\352\347\256\275\314J\374<\212\005J=\005\016\227\272\363N9\274\312\033\323\273\037=\371\273\342\2160\275P\026\344=}h\020=\336\274\023<>\255D\275m\000\201\275\316\216/\275/uc\274)\272\340\274\304-\306\274J=_\275+\307\203<C\333\\\272\230Z\253\274DX\252<\322\265\210<\013\002\002=\371\273P\274B]\236\275\351T\233\275\2761\243;\342\320&\274\311Q\022\275&\337\276\275o\2141=\366D\323\274Y\210\240\274\313D\374<\241\333\334\274\212\200\020=^\231\345\274op\270\275\223\236\364<\254\237\204\275\0258.\275l\006h=\325\252\024<\315C\003\275>\013\353\274\356\346\253\275_\341?=\362\211\257\274 \335\000\275\2279\263;7.\352;\207\311S\275\357\240\216\274\247\007|\273\005\302\256\274=\032\342<9\2165=\304\346\233<K\220\303\274\032\360\005\275kf\320\274\360\200\327\274L\2641=\253g4\273\362\261\033\274b\033\274<H\343<\275^YS=\313\000r=\032\360\225<\230o~<\214 \265<v\345\222\275M]\230\274G\202\375<\320\373\362<\373G\276<\260a\260\274c\331[\2754e\302\273\375\177Q;|@W\275fw\016;\326\\d=\324\002\235\274\031.\000=\010\222C\274_i+=\0229&<W\214\207;\367lo<\r\tN;\324\2673\275\350;\3328\206g\006\273\322ll<X\334&\275\350\002\303<\233\223\212=!\006~=\213\017\013\274\205\004^\275\034JG=8\230\200\274\027l\233\275g\360\244=u\276\216;e\356\213=\374\022\235=c\253&<\354\347\220\275#[}<\273,\230\274LW&\275r\017\313=I\332\243\275*\312\227\275/2\224\274\006W\313\274?e\027\275d\211\351<\270\234+=\364\374e<{\367\350\274ZRs=\325\006f=\362pH<\3209L\275\350\206I=|h\3529\236\354/\275\276\245\243=\355g\t\275\303\203\307=\344m\313\274\020J\237<\031m\256=\331!\n=\257\270\216\274co\277\274\332\206p=\347K\002=\217\331\304=\322\267\022\273\363`\307=\021\2126<^x\241\2749\231S=\341\220.\275\030%r\275\341\326%\272\305\355\3329v\003\026\274\010\303{\275u3\204\274r\214\001\275\232y~<U\327\032\274\022\277\037\274B \222<\203\370\332\274Ab\356<\207\364\023\275C\305\305\271C2\330<\265<\211<\004\214z\2755\230=<PSd\275K\221\204<F\n\257=vy\314<\245\367u\275\243\034\276\274\017\213\240\274uiQ=k1S\273\374/\000=U7\252=CX2\275\336\342\357<\237v\273<\021H\261;\306\016\343=\022:\007\273\220\217\206\275_\334Z=\332\006\355\274ca\311\275v\331\265<\007\275\023\2735\t6\275\006U}=-\233\206\275(\"\031\275\230\3439\275\3765\340\272\267\231\220<\3722\225\275\355\276\021\272G\317\003=\005\346T\275\262\260\372\274U\332E\275\375\214E=Wb\236=_\231\336=\272\013y\274\n\236.=\227\212\323\273A\363\316\275\232Y\253\273\255\327\353<\317.=\275tgE\275\336\251\222\275L\004A\275\233\262\211\275\260q\272\274\312\362Y\274\374Z\337;\t\320[\274D\361\366\275t|}=\364\333n\274f~U;\306\303`\274\244\020F\275P\013\202=\354\252Q=\2422\177\275\301U\034\273\010\255h=\003`\222<\201\273\234;\004|\310;2\205X\274\215\254y;m\365\266=\003Q\020=7,\306<\027\257\016\272\260\n\007\275BOg;\224\327\256\275\244\260\211=\231|\014\274 f\322=\026\021R=\030\345\002;\272\0166=\254ue<\305\264\246<\353\340\037\275\025S\237<\274\031\235\274\323\255\257=\373\223p\274fX1<\201at\274\230\203\317;\307\322\000=\262\360\024:\223\222\265\275\330\367\024\273\341\000\3209\352\254j\275+\013\275<N5\266\275\"\323[\275\313\367\227<\017\rB=_\022\267<\037\363\033=v\305\023=^\223M=\363\3044\274c\300L\275\301|\366\274\207U\255\274\312\231l\274\317\217\222=\312\277#\275\024z`\275\232u\206<\234\036\227<U\342\313;]\023s\275\271 \222<\233\274\010=\322\257u<\026\003\014\275\244\300}\275+\234s<\270\2121\274\365{\034\275\274\3134;\372\2756\275\007\364+=\300I\000\275\341\212\023<\027\003\271=\236\025O\272\222k\263<\373\231\312=%\355\271\274\3638C<\312\002S=-&_\275!\207W\274\'AQ\2744Q\214<\377\312\214\275\274\234\201=\0313\236<\321\240w=x[\001\275e\"\242\274oG\214=\322w\025\275\032\037\022=\t\327+=3\203h\275\211\312\344;/\306,=4\202\224\274\313\234\n\273-a1\274\353\241{<\021\247\335\274\213&\217\275\265\311D\275\2669,\275\276\375C\274mD\230;\277\221\243\274\320M\014\275x\200\n=u\035\206\274\204G\256\275\241\351\235\274j\371\n\272sh\345<.\214c<\007\301\233\274;\005\236<+X\020<\360uk\275\255\213\034=b\300:\275\\.!=\263\255\211<\231&\320\274\215S\010\275K\036\242\274\326y\326<\220H\273=e\2079;\340a\352<\tN,\275f\321\003=N\212\t\276K@\305;\004\370\206<\271!\254\273\316\237\004=l\n\237=\327\264@\274\232O\257\274\225x\302<O\251\006\275\323_\\\274\347\253\004=j\010\300\273[\342\255\274_\242\367<\024^Y=\035d\217\274\037\217\274\275\000c\245\275\225`\234;\023p\275\274\226\312B<\224\222\2658Ap\274\272\257N\014<\346&a=\350L,=\243[\004<\367r6\273\017\0068\275\006\245\257=G\351s=\321\264\210<k\367[=\017\201\347\274\027W~<\254\030^=\273\240.\275\312Z7\275\004\306\013<\323\n*\274}~s=v\240-=\261\342\r=\342\357\241\275\346E\240={\277\030\274?\014%\275\214;\204;\323\274q\275!\331&<\030`\275\274d\236\370\271\007\235\245\273\007}\010\275\356\030d=\226\177~\274\313\214\357<\000\037\227\275\210\262\346\274\206\215\207<\360\263\355\273\013){=\267\276}=i\250J<\326\177O\273h\005\005\275\366\367\177=\326\025\225\273\247\236\363<i\247(\275/\261d9\3661)=\2022\256<\033\217X<jr\305<\310x\035\276$\224\303<\021\331\377;\235\254@\274K\2613\275\205\331\222\275\245\3740<7\350,\275\035\303]=\267\305\036=\225\361\207=E\321\301\274:75\275\213\232h<\356\343\004=\255\333\036\2759\307K<c\033T=\237\214S<\265\300X=\220c\257<<\336\\=$\337\327\274\013\004\006=f\350\244<\325\350\324\275kwx\274\236\222\316\274\240\273p\274\274R\216\274o\201W\274\344\"3\274\275\031L=\253|\263<+\226\r=\270\314\204=y\325\312<\251\370\020=\236(G=,\223\334<\212\034\312\274\001\177\251\274\027\226\251\274\327\003\271\275\372\267\231\274\320\316\272=\025gt=Y\026\230\275\347\002\340:\207\017\360;R\315><\n\026\017\274\364\033d;\224:\271\274b\340\307\273&\2246<\005Q0\275T\231^=^_\243\273\007 \334\275\220\'C\275\270\263\337\274h\203J=\336\276\257<\337\332\320=~!\"=\037\036\365\272\034Y\030<\246\212!=\002\202\321\274\326\310\274=\332\217\007>\241\010\016\275\335B\256<\315\332\362<U\373T\274Qr\334<\020\357B=\247p\007=\020\305\245=\326\031\253<\227\253\350;<\244\361\274Q\231\303=r\031n\275\325g\234<]\246\273\275\003}&=B\210\215<\312I\250=\005m\356<\367\334\243=\222\n\010=V\231\212=\027\371\306\274O\320\330\274\352\177\227\273U\371\261\272w\314\356\274\351\252K\275\r\n\364<\315\307%\275\347W\367\274\303\235\215\274\202gT=\347\315\021\274\314\363\233=\221.,=\360X^=\341\225\276;\013\344N\273l\340\034=sW\234\274\rA\311\274\345|o=s\334\026\275\236:0=e\355\356\274\350[\270=L\240\317<\222\010\010=\033\200/\275\231\026\241<K\240\030\275\232\232s\275r\016\234=\256\202x\274\373\306\026=T\327\r=z\300\233\274\201\277\231=\227\261\371\274F1<\2745\371\032\275\356\377\001=\002X4=\305\313\013\275\343d\251=\343F\366<\316\376?=q\376-\275/!N=\223\310\332\274\320:;=\374\337Q\273\r X<\350\014U\275\246\001\234\275M\013D=\251h\024\275\264\237\224\274\322\202\335\274No\241\275\377\275F\274\3723L\275F?\371<#g\267;\265\340*<\347\241\233\274\306\240\330\274E\236\272\275\215b\232\273\254\204\025\275\177\347[=\177\3742=t\017\324\271\270\0242<\037n\035\275\1774\021\275\300\r~\274\326\322I\275\2022M\275D=}<:k\025\275\034\264\355<\226v\376<?)\245<UQI=\017\320\"=\341\035y<\315\203\031<K\363\215<P\240\201:\376\340\220\274x\205\201=\353\336\025<r\336J<M\363}\275\345O\236\272\033\373\010\2748\221\303\274(\313\342<\305x\250<@\240\377;<C\303\274\357o\267=\0065\336\274\232\355\026<\375H\230<\nx)\275\225\347\227\275#p\253\275\275\326\307<P\244\233;\2640\034\272\235\2544\272\020kM\275\367\233N\273Q\203\216={#\000=q\263\017<\207\215Q\274KT\367\274\026P\357<0\010\347\273!I\205<\312\216\367<\003\251\323<\313\340E=\341>\310\275p\355\327<M\007\307=\226\025\362\274\201u\344<p\032\241=\267\325\314\273\024\345\272=\020\t\240<\343\263X\274;\227\006\275}\310p=\312\252e\274\233\310\001\275\362\273\021=\357\020\363<l\316\303\275\261\267m=%,\213=A\225\327\274s\214@=\"\031/\274\352u\205\275/V\025=\232\034V\275T\211\006\274\005\340C;\275\002z=\301\311\270\275\017\024\017\274\315\261\300<Z\035\201=\177?\374\273]9\264<4P\310<\207Sa\275\273\206\334\273\266\273\001\275P\317\347<^\020\020\275\326<\023=\266\t\206=\"\033\000;1.\345<>\034w<\226\373\255;\223\265\231=\363\231\231;\376\024\244\273J\260\037\275L\r5\274\302\376\r=\362g\232<8{\324<{\241\007<\245\324\342\274\022o\357<Q\301\033\275\346\010\365\274\t\357\230<\033\237>\275\245\272\256=*P\227<;\267\336<\303\000\372<xt\342\274\3072R=\000\361E<B\235\021=\374\364I\275\323,!\275\351I\262=r\235\010\275.R\220\274B\323\037<z\347G=\271\2608\272w\377\312;H\364\026\275\0051\241\275\235@\237<\371\3460\275`\307\233<`\036^<\351\210)\274$\320\016=^\304.=\230\nT\274j\211\313\274\254\363\027=\333]!=\002\217\373:\362}-\275?\307\r=\325\200!\275\316\227O\275SN\311\274:\376`<\274\332&\273l\013\315<\371C[<<\013\200<d\346\202=\"O\'\275f\212\356\274u\344W\274\221^\260\275N\321N9CM\347\274\030\333%\275\273\2553=\364y\224<aB\235<n\311\263\274\020\354\224\2735\264\002\275\021\374\n\275fL^\275\247X}\274-\225~\275{\377\276=Hdb:\022\037\002\275\336\227\313\275\232\304\227<\365\202G\275\353\323\323;\034|\016=&J\263<O\206\343<Y\337Q\275\337\324\233\275\020\213\210=!l\300<$\t\220\274\257\246\002\275\321L\301\274*ai< \307\006\2750\216?\275L\005;=\256\333\223\275;\r`\274&\211\016=1\2729\274\256\271\022=>\324H=\026JQ\275\037\031\354\274EAm\274\013\253K\274\356\250K\275\021nC=\354*F=\212\304\362<\334<4=!\244/\275\223h\257\274\0130\210=\246\034\002=\236\260g<\201\240\203=\005\323\002\274\232\021\006=\243z\000\274\005\210\370=}\336\332\274>\n\245\275]\311:\275h:\032=\232>\327=\302\247\000\274\354z\314<\344\235\364=3\310*\275\371JH=\270\005\243\274\344;\212\275n\206t<\356\362\023\274J\211\226=s\317\236;N\313\207=\253D\n\275\212\337\025=\215\246\230\275\251\300\265\274\340\022\253\275\n\021\375;\327\363\200\274nO.\274\242\3220\274\215<\205\274\263\006S\275LB\362\274\031\260\314<\366\320\250<\346\024\302\274%\323\020<\035C\305\275S\223\t<\206bI;\010\370L\275C2N\275\004\263u=,\000\260=o\237u\275\307#1<?\000S\274\2357\323<\212H\2479O\324\340<\333!&\275X1\311\271r\006\026=\t\014\262\273\336/\340<\250k\021\275\006\364\233<\323\0235\275\215q\233:\312\251\010=\030\361\235=\2139\036\274\232\020\211:\2078\376\274Xj0\275\231\355\300<\016\261\252<\314h)\276M\265n\275\355\322\362\274G8\261\273\354\211,\274\245\316\335\273\036-\371\273\247\005\334=\312\352}=h\215\201\275XZ;=\374]\324:\356r\247\275}\177\260;\234x8\273\367\202\252\274,\260\031\275\025\177\001\275\320OW=\216E\017<h\177\355\274\271S\227\275\031-;<&vc=@A\021=!Z\222\274\372^\261\275\234T\325<\023B\374\274\230\376\341\275\326\"2\274t\274V<\3507\273=\236\300\312;\214q\343\270\252d\202\275\236\246\332<NQ\020=KvH\275\336\034\000<Gx\"<y\276\265\275*\304\217\274\365\0271=\003\246\250\275\301\332*\275\021\211\247=T\021.<\212\010}\275\362\\\361<\3754r<\377^w<\"\230\311\274\240t\224<\215z\231\272\374\267\013\275b\2174=.R.\274\257[\353\273\215H\256=\202G\303;\242\336\256=\330\337[;a\347\242\274\307\363\327<\264s\222<\007\352i\275\034\231\225<\217K\244\274\206\207\000\275$98=!<\024\275<o\250=S\245\3519k\357\256\274E\261\236\274gFy;\250\340\355\274\'\223\227;Z\253\263\274\315\310x\274\267\262c=_\302\250\275\230\206\220=I\214\023=F$\356;.\016d=\256\204\262=\221z\213\275\240AF\275\263\016\240=7\217\246<\002\215~=\363-g;\313\227\365<\020$A<\36399=<O~\274\362\023!\274k\"\203\275\"\243\236;\261\244.=\320\266\003\274\014\235\226\271\270 ]=P8\300=\367\242\203=yk\253\275hN\226;!u\033\275\003\353\t\274I\202\221=\342\371t;J\022\217<\273\356 \275\037\244\200\274a\232\212=U3)=\344\241\205=\342a\266<n\222}=\301d[=\222\230\235;5\210~\2751I\302\274\t\317\241;U\005#<\302\372\376\274\207\204j:\211&\025\274\2750\256=Tu{=\215\277\356\2717\337\014>\037l\343<\230.7;\027\266K<\347m3=~\377.<\323=\366\272\322|P\274\215\307\345<\275-\013\275(\017\207\275\027\001M\274\256t\244\275h,\267;y\256\312<,\340\034=\177\362\212\275\225r\335\274\344\316\236<8\2018\275\211\312\311;\252_\357\273h\016\232\275\316\327\231\274\3076d\275\320\243<\275\232 \037<s\013\363=\312\020z\273\241\305\026\275_\023\362;\215u/\274\242t\r\275\261\244\357<\035\215\211\275\021\305\251=\217u\257\274\275\200\"\275\017^\277=u\226\036=\234A\243<q\255\224=\364\0173\275\241\237>\274\255\312\226=`\327,\274\004\221d=\006.\r<\224\210G\274?7\'=J\220L\275c\226A\274=\345e;VB\206<\344\350\321<\215\343\227=/r\270<-\326\322;<\242\273<.\006\001<\216Y\371\274\336m\302\274Y\016H=D\203;\274R\350\032\275U\361\215\274\2550\336<\311\004\315:\333\003\215<\207\226%\274t\343\345<\317J\242\2732\0071=c\251\200=c\263\025\274\231F\3558\231u\037\275M\305\203\272@h\322\274W\007?\275\216  \274w\351\261=\303|\261=\210\234\200\275v\307\326\274\272\261\227\2750\222\305\273<\254\027=\027\204\211<\261W\037\2755\327?\274al%=\304AR\274\r\226\232\272\251\261\225\273\347\003%\275\306\022\024=\205\266k\275\231\263{\274\351\273|\275\351\264)<@\231\335<g\206\243=\000\346`=\354FN\274E;\244;\022\377A=v\325\217\274~:\262\275\030\210x\273f\r\000\275KdK=\373\024\235<\302\002/=\301\324\203\274\376G\005\275<\204\375\274\3051\303;`\311~\274&\037\177=\211d\237\272\253\301\021=\347\314\330<\221\272F\275\273\022K\274b\346H=\256\002\212<\025\007\214=\3636\244\275\311\366\034\274[;c\275\254\307\2049p\201\213<\003\203\253\273<\177\237\275X2\250\274o\000V=ck)\273\255\251q=+\247;;\250tX=\3737\032\274\3477\250\274]YB=^\367P<\206\302`\275E\314\370\273<\030\343<\306\345\260\274\351\201\356;\013\263\354\275\271\350`\275\263\320g\275\311\025\247=\374\331\245\274\330\026/=-\3141\275\036\266\246<(\210U\275_K\264\275\020\372d=U\226\260<\342\207i=\3373\204=L\244\253=p0\203=\365\265\231=\335\257\221<\"\255\031\273\323f\271;>0\303;\357\374\201=\302\267\213\274\310\202 =\036\342\265<\343\000?=W\013\"\2759C4\275;~\255<\353\260\277\274\t\274h\273\215\214\306<\266\275\023\27583\231=\206.\226:h\203q\274\236\375\r=\345\247 \274\2407\001=M\237F\274\227\005\'=?g\364\271\212\207\020<\324\013\342=Z\240\n\275\323\256\035=6v/\275\253\356\346\274\231\237U=\370L\033\276\020\002\256\274\232\032\\=\"(\236<.\242\331\274>\272_\275\2724B:^\317\366;Q\262\030=KE#\275c\237\024\275\220\250\312\274\234|\200\274\250Fp\275\n&_\275\'\034\230<t\314/\275h,\233\270\333\332\021\275\267B%\275\360\247\204\274\203\212\233\275\026o\210=\257a#=\367\363\212\273f_\007=\202\003\260=\377\234\205;4Y\247<czN=\024w\000>\311Lq=\226\220\213=\310\027\374<\242\026\367\273\355j\330<\304\265\217:\224w\257\274\211$$=\016\310\256<\016\305{\274<Ps;?\337Y\270\303\344\324=\372RX\274\315\215#=d\026\211\275\020iG\275\242\303\372;\212\341l\274\301\316\037=\225\234#=\244ml;\211\212\244<\354m\263\274\031\033W<\'4m=\274\203M<\037K\240:4\307\340;$\2519\274\252P<\275\255\023i<?L\223\275\354\311\025\275V\336\032>\036~U=\347`\006=\363Jx=\374\237y=4ci\275*\306\311<\213\033\r\275\365\2625<b,3=\030J\262=\255qR=c\232+\275\365\364\250\273TiI={\\*\2753\026O\275\207\331\261\274\033\005y=<\3322=M\025:\275\030z\241=\203\2263=\272Vs<\303\226\316<c\244^\275\002\216 \275\357\0001\274\215\360f=\"\336R\273V\007\306;3S\310\273w\325&\274\306^\355\275\255W\037\275\244\370 \274\323\247{=\343\273C=\207L\304=\256\320[</m@\273\032\325O=\323\350\370\275\246\337\254=\217\200\343<\213\"\023\274\303\342\342=\031!\272<\344$E;\275a@=8\317\004\275\263\263\214=\372\323\317<\372\321\273<\020h\337\273\003\376{\275H\t\260=0\310p\275\006\001\021\275K\256\243;H\0143=\024\310\302\274\250\341\005=\227\263\273=\007<\177<\363<\247\274DL.<\232\324\265:\245\316\206\275\006\004V;\024+\t=\242\323(=_\030\023<\362-\245\274\010\\$\275_\217B\275v\244&\275\036\030\373\274\3322\321<^1\'=\273\223\351<K#\227\274;\247\246\274s#\031=\2402\374;\257\223]\275F[\013<\214\227M\274\206]S\275\337\343\312\273Bu\362\275\323\370\020<\274i_<wN5=4\322\206\275y\371#\274\303\350\240;\212l\234=\316\306M=T\253\205;\037\244\324=:]\250\273\232\025\343<_\376c=\035\337\353\273\372\325\264<\366\352S\275u\221\332<\324(\247=\020\023\220=7!\246<\263\275_=\216\357 =\243\271\214=\352+\003=\352\324-\275n\370#<w\236+9\366\234\364;\370\346N\275\361\017\323\274\034\243\006\275Wc\342\273\024:\004\276\'3\032=U\037r\275\277\021\263\274\252\230*=\016\234}\275h\356\213\274\240\004v=Hl)=\331\'\n==\022\234<\367\373\002<\271\225\351\2748<\260\274\341C.<zw>=?\365i\274\224/\222\274\254+0\2753b\033=L\031D\275\213\364\321\274\223[\267\275\272\253\306\274\260\003&\273\256\272\374\274\353\371L=\220\210\000<w.\014\274\267o{=\265\245%\275D\250j\274\201r\'\275\013kY=h\211\360\274\271\335_\275eBj<\306\213;\275$\307D=\220uA=\373T\204<\363b\237\273\'\326\332<\345o|\275\007\202\032\270\254\377\t<\332\317\232\275r\311\212<w\016\016=\256\326[=\332\336\314\274$S\014\274\217\260b={\340>\275\361#\032=\273\022\014\275\377\022+\275\310\266\343\274\320j\237\275i\363V;\376\335\265=\220[\370\274\ng{\275\027,h\274_\233J<\264\203:\273\337\320\204\275(\024\305\274\253p\357;\352\247[=\247\244R=\317}\317\272\203\316\223=Q\324J\274P}6<\036\231n\274\"\2249\274\233/\t=c\375\340\2749\350\257;1\006\335<x\254\205=\r\213\275\275d\324Z\275\017\256\220\274\315_R\274\242p6\274\306\316-<\270\350\323\274\345\201B=\273\032\247\274O\377O\275\227\370\014\275\324J\355<\265\304\271<\262\214\334;\031\304\241<R\0242\274W\246?\275Qw\274\273\306E\344:\277\033\251\274%\203\251\274\342\227\265\274\267[\242\275\373+P\275\204C\255<\373\330\031=D\005\337<\255(g<1S\230\272\251*O=\031\022\307<\316\'X=\372Ui<\211\033\213=#\023\346\274\351L\217<\336do\275NzA\274\032r\355\274\034_\232<\030y\356<=t\237\275>\220\212\274\217\3726\275\251\354\021=?{\3629\202\274\236<\330\373\370;\230\376\266\273 \332\020=^\215\200\275\231x\024=\205\327\222\274p9,\275\357\226\370\274\214\246E=\351\003T=a\350\335=\0163\253=0\220\202<\221S\337;r\271\212\274/\374\322;c\345\267=\026\305\264\274\255\215\372\274\376\361\366\275\227t$\273h\217\372;\224\307S\274\005o\313\274l\237+=\3116$=\022\255\221=\345P\247\275\203\365#\275_\376P;7\036\304\274s\262H;\005\372\235<Z\301\025\275K\376H\275\201\033\371\274g\033\202\275\231t\345<\245A \275\225\017\000=rjd\275\240\343-=\001`\367\274\217\326\373\274\360e_\275v\000\212=i\002\321\274\317\253\247\274\374g\201\275\277E\234=\273\200`=J\'\212\273\231\235\003\275\226Gw;N=N\2755r\303\2752\344\006=\373\273\325:j.\233<\374\267\344\272\337\302\242\274?S\000=\322\341\017=\361OW=\377\2060:\033\006\307=\224\241\022=\202\310\n\274\254\234g<8Q\021<\320\027+\275r\365n\275X\213\221\274F\274A\275\340\025\357\272\235\003\257=J\323j<)s\200=BK\240\273\347n\207<i,#=\230\222\345\273M\361l\273a\214d\275\327\320\205<\331\335\371\2743\347P=\204\326\271<7Y\222\274!\003a\275\261\356\377<\371\377\000;\027\306`\275*\262[<\201r\310<\2514\302\275\201!\202\275\244\371s\272\004\205\031=\367\326\242=c\202\232\275\3331q\274~c#\275\361\375\035\275\306\334\352\274\247J\362<W\312\265\272\264PP\274\353\023\330<\310\322\020\273h\034\n=\205\254\032=\003\251\030=doI=s\277A\2757\261}\274\253#\235\274\273I=\275?\006l\274f\343\264<1\210\321\274v\312N;\30781\275*\232\212<:\274\002\275\254R\023=!\224\n=\367Cu=\246\372v\274)\267\007\275DfR<\360e<=J 5;Xhm<\177\313?\275\177tH=\033\246\342\273N\234\224\275R\\\215\274\204L\365;z\020$\275\320(8=i6\250;\203<\337\274\025\341);G\342k\275\362?\211\275\365\240\025=\214\036\023\272(R)<\254e\237=\237\306\317<\024\315\262<\254l\354\273Jy\336\274Y\3674<\203\r\254\275C\215]=\272\226\340\272\345k\"\2757\216+<w\330i\275\016=\200\275%3\305<\007\221\023<\346D\020\275\305\352\021=)jh;G\300\305\2742F\020\275\215\253\222;\312\365S=\314T\371\274Y\314\264\274\330\210\2079\034\304\244\275\300z\210\275\224M\236;\207W\343\274/b\265=~\315L<\362\232\366<\357\0060\274\227[\021<G\004L\275\254\203\211<\220\264\201\274\017!:\275\361<#=#H\243\274V5j\274p\366\210=\374P<\275\326\007\225=\312\265k\275\304K9\274\333\207\313\275\214\270\321\274GX\345<r\3743\275g\304\347\274\351\325\315<\\\273\241\275G& =TF\024\275$\n\350<\333SD<\234[\006\275/\240 =\r\0317<\231 \020\274\270A\023=E\255*\275\365@\327\274\377\307\345\274\301\202\005=\371W\016=\364\344\263;\367\002\300\274\"\r\306=n\346>=%\206\304\272\233\202\032\273Y\010\303=P\224\007<nU\325\274\207\224\034\275\316\033\354\273\375\030>=\013I\020\275\275|\260\275\3670q<\346/{<\321\216_<L\014\014\275\304\337\350\275\006D\301;\204\326\030\275\207\226\356\274<\231\207<:\275d\275\317\223\335\274\311z\275\274\315\236\304\274\037\304\005=S\032\252=\343\360\222=\033\227)\274\210\326\n=\005\206><D\267k\275-\027\244<4\025\270=\244\365\304\273\351#\024:\316\013E\275\017\023\264\275\2231\250;\227tC=\037\236G=\224\262\001\275\005B\236=\347\342\200\274|\302\230\275\177\025^=\356\277\317\273B\021\026\275n\232\372<\020\341\322<\017+\305\274\335B\216\272\335\330\207\274\314\357\340\274LG7<\235\210j=B\034\033\275\211&3\275H/S<\364\373\031\274d\236\367;I\0165\274\023\024\300\274\n-\235\2729\344\275<)\345\210\275dn\211=t\200\025<k\345\357\274\223\177\'<\260\352\037\2742\026#=u\214[\274m;\326\274\277Fc=Cx9\273\005\213\210\274\232\023\207=\244\366\023\276\254\360#\275\250\001a=\267&\004=]\344\273\275\303\244 \275\035\367\021<\232\373}<$\016\033=\344%\226=\343>\330\274\t+`=\260o]\275\ra\253;\376\357\265<U\263\273<\305\323\226\275/\272z<\346\365\217\274e\357O=D\177\217\275\002P\014=:2|=$gD\272R\tU\275\315\302\322<\214\233\017=\230\316\t\275]\362\207\274P\3103;\200\253\007;\341\235@;bI\311=F\273\355=Or\210\2751\013\336\270\361\254\372\274p\301\236=\262&h\275\264\2061<\275W\320\275\\\364\356<\251c\242=\357V\256\275\267\353\365<\370{\324\274\317~ =\317\016\000=@\207\021=\322\302\006=\007Z\363\275\\\344a\275>l\231\275g\313\326<\341X\220;o~g\274 \350\375\274\033\276\214=u&\227\273\'\217D\275\3418g\275\274U\030\275_\216R\274\326$Z=\215\233G\275\360\2317=\022\273\341\274\200\000K=\026\324s;\340\273\204\275i\356\212<\233\320\275\274 \003\251<\207\227G\274\210z\037\275\351\233\271\274\262\023\023\275\373\273\201=\304\327\262\274\350\360Q<2\314\021\275_\373\027=FW\257=#\026\346\275nX\216\275\244\225\201=>\362\205\274\305\222\010>\300Y\341\274\214\031\375;\324\222\306<\036v\214</*\332\272gn\245\274$\303^=\024\251{=\337m\013=\221wQ\275\037\252\246\270\247\341k<5\253\240\275\302\204\350;Il\302=\217\260\355\273\\\020\347\275\351\344?\273q\nc=`.\264;\331}\377\2745\261\034=3\366\345<E\252\357\274\214YE\275J\233\250<A\265\276<\032\013\357\274$\303u=\332\261(\275\3773\016=\315\370\013\275\372H\230\274\241\021\341\274\0348<\275\203\274\223\275\344\216\216\275\217\271\032\275\341\376}\274\270\021g\275\305\211\372\275r\025\000;\256v\263=\373\306F=\322\244{;I\230\301:\207\370\024=0\232\010\275\3422\356<\2507\324=\230\241\225=<!\227\275\304\003\377\274\301\n\330<\301R\017\275\354&\235\274H\0319\275\276M\313\274t\274^;\226\326\216\274\362\275\346\274\036\335\205\274\362\332\242\275\334\275D\275\262\200m=\362\375X=\311\277\004=\006\252\017\274\274\\B\275\3432P\275\244\237P\274\006G\027=\207\300 =\277>\322<\213<\223:\004*y\275H\230\257\274m.\225\274\202\257f=\356\345a<\226\257\317\274\270k\021;\264\314\317<\017\242G=\004\'\016=I\240\353\274O\360\271<\364\021f\275\226\220\034=\014sA=sg\037\275\021\354A\275q@ \272\367\034V=\233\361\266\273\034\322m\274_\226\230\274:B\'\275\216\022\363<\364\203\337;\323\217)=\226\355\016<\251\264\315\274\317\253:\2750\037\253\274\247\374>=u,\223<\n\232s=\267\244\216\2758\0165\275\323P\361<\002\005\222=\3614R\274\266\246\237\273\270.\n\274\275\243\344\274\\\274\312=H\207@=\036x\034\275(3\243<\232\216\305\2751\325$\275\014\244\200\275\343^*\275\374>\034\274\337\253A\275\177\025\352\274\371\363\361\274J\335\325<T\260s\2752H\252= \\\226\275iO8=\003\322O=\277\272\004<\335q\335\274Qj\253<\242\303\320\274\323\266\264;\241\362\207=\020\025\265;!\304\216\275\374\266\311<ei\236\275<\275\251<\333\263\033<L\260\312\273\261\003\244<\202\\\223=\365\3443=\343Q\033\275\006q\352\274\335~5=\317u\r\275\231)\005\275 \322\264<K\325\234\274#_\210\274H4\341;\031\277\302<F\3569\275j=\021\274t\213\312\274\211\243\356<\251\323\301<\236\221g\275\264\315}\273\016q\306<(\017z\275\305v-\275\330\324\204\274\357\206T\275\324F8<\264\0376=\375\337\003<(\004\330;|Wa=\223T\211\275W2\365<\021\303\342\272\177\300\223=\036\304\325<\220NN\274\330i\006\273\366\234\344\275B\250\375=\2021\345<\177Tc=\013\030\032\272\262?1\273\266\231M\275rZ\205<\202\3030\275@\372\002\274\\\323\005=C\300\200\274\237\301\250<\303\315\244=\261\307x\275g$\201\275\'2\317;X\241@=I\274\037<\260\330\207\275\266\3279\275\235M\037\275_t\314<\337\324\021<\224\251\252<\317\302\375\274rJ\225\275\366\217\252=\021R?\272\266u\\<\276 \024=\302\340\272<\251\221\270\273*\260\312<nzM\275O=\231\273\343\033\315<o\207o\275\234\361h=r\246\033\275\211\227\200\275\323\261\225\275\204\313\222;?\301\330<M\000\313<E\231\271\274\367\333\275=p\347\302\273N\265\207=\361\200\007<O\035\033=\351-\230=P-L\2740\332\016\275\333\310\216\273{\242x<\t!\236<\031|\202<\226\323v\275\001BU<?\323G\275N0-=a60\274\221\233r\275\032:\210=\317}l\275y\221\277\275&\251\020\275\334\373d;\322\267\264\275NE1=+\272D\273\034\237\243\273\036\037\214\273^\306\221\275\342\343\207\275\2545\021\275\326\334\354=/\234\236=\375V\035<\t\354\267<\331\200\037=d\344\227\275)Q%\272N\263\222\274v\354\203\274\276\"\206\275\350Y=\275\376\243!\274\020\220\213<t\364\026\275\032\243\220\275\325l\214\274d\177r\274tl-\275\207\241\266;\234\222\034\275\277`\260<Vu);*w\227=C\367\"=\204\346\245=c\t\262\274Z\333\005<T\264\331\275)\355&\274\227\375k\274p\306\205=\332C\364<\262\200\263=\276\242\311;>\265\252=i<\251\274\223y\271<\276\036\211<\262\376\241\273\373\037\322<)\200\200=\244\036\035\275WLJ\272N\266\341<\321r\220\273&T\177\274\032\372\322=\032|\322\273\035\204\007<\330\356\002\275\0107\223=\245\233\251<\026&(\275\031\007\262\274U\002\212<\260\250\303\274&\nk\274(\006\207\275\013\351c<\300|\254\275\357\330\245\273\353\275\360;dL\216<-\232\026\273)Mg=\256A.\275\373}Y<\254\036\257\273\235B&\275\236\366\241=[F\211\273b\302\216\275%X\004=\021k_\2745a\316\274]\303\'=\321o2\275\'m\276<\365\300\212\274\026\224\333\273\307R\333=\261\357\202\275-\310\033\274\233\361v;\250\372\001=W \222<F#[=#\333\000\275DM\024=4r\250\275\364R\247<\362\036U\2733\231\242<\224\244\376\274\263E\023\275*\265\341<?B\t=\232\t=\274\0307\000>\020\030\320\274\006\224\316\274d\027i\275\340\245\275\274\013\355\320\274\033\221\347;\026\243\345=\377+\346\274\004\357\235=\207]\323\274Nk+=\222R\020<e\263\307=\321\\\215<\215\024\221=m\002C=\373-\230;{\302|\2742\341\264\274K\360L\275,ML<D\330\367\274n\266\031=\367\232h\275U\226\026\275r|\204=.\220-\274.-,\275)\035\205=\273\2648=\001\216N\275\334z\237\274\016\261\266\275\235{S=\347\265\252=n!\210=)*/\274k\376\302\274\367\216\263\273\255\026h\275\222z\\\275\3416\265=\030#\337;\311]9;eyQ\275\037_\270=\035\370%\273#iL<su\252\274\323Y\326;AO7=\311L\202\2740\033\032\274S\276F\274\'\366\230\274\315\377\217\275\223\336\n=\305\304r=\333E\010<\202\025\264;\017\202\241\275\364\203\246\274\212A>\275\230\3269=\032x\277<\267\320\370<\355\243\253\273\251\3213\275\326\236\226= 8\224<*\267\256;\256P\337\273\250\311\201\275\314A)=\253&\005\274\025n\201;d\240\230=\023-q\274\345\372x=\320\215s\275z\004S\274\303Y7<%\321\335;\310F\177\2748\261}\274iCe\273-\260\362\273\255\302g\275\262r\032\275f\361\333\275\310\003/=Y0\010\275\"%\033=\326\332\354:y\224\025<k\265\331<\303\004X\275\202\001?<\374\241g\274\0273\207<j%\025\273@\362z<\232\356\251<\244=c\275JO\270\275\232`\214\274>\003\205=\264\366\272:\301\314\244\274\331\341\205=\355F\260\275h\201,=kv\021\275k\322G\275\306q\240=\325\335\336\274\302\363\315\273V\204t<y\\\310<\236]\323<\363V\004\275\275G\202\274B\020\021=\273\355\357<\026q^\275\213\265Q\275\214\263\177\273\302\007b\271\177\2726=\005\256M\274C\323\317;\236X\352\274\262\345{\272\376.\2739c\3160;\205\364@\275}\035m\275a\021N\275\306\316\263\273\347\205\253=\367&4=\203\301\225=*\202\017=\256\255\215;a\315c<}\205\237\273\237\267\312\274\376\3016;\212\373\360;\303\306\214\274\377\020L\275\211\232\231=G\340\265\273#\362$\275\335xU<\377e\277<R\233O=\337q\005=\313# =\247\215\021\275\336Q\265;\230\373\035\275H3\t=J\202\240\275\365\347\037=\nIU=n\030Q=\021\201\245\274.\236?=\021\030c=`\021q\275\265\2225\274\225-\036=\356\200:\2750\234\207=\002\002\022=EH\204\275\231v=<\351\363w=-\366\244\275\036\007\252\2748\2218\274\240r\217\274[\364D=\271y\363\274l(R=e\213\210\274=.\317<\365\033\231\274\255:w:\360%\352;\375 \r\275\224p\236<R]K\273 \321s<\313\274\007=\243\217\202=;\2040<\367\351;=\371o|\275D{\003=\367\025\243\275)\274\217\274\313w-=Na\365;\363%\235\273\262\360O\275q\363\256\275\213<\t=S\373\220</i\037<\354^\032\275\316\t~=\376V#\274\307Y\014=\236\316G<\037@=\275\225\326\244=t\335\001=v\370\345<\013w\037\275\215n\202\275I\340@\275\344\264Z:\"\2731\275;\026$\274\324\350\213=\026\202\212\271fD0\275\204\267\233\274#Wy=k\3047=\232\233a\275\002\251p\275\355\231\377\274sv\272:\006U\362;\341\254\200=4\316\250\275\234k\200\275f\253\020=\233o\325\274\217\355\010=\336\317\217=W\r\315\274\364D\033\275!\026I\275*c\000=`\303u\273\004;\020=ZH\004\275\264\367\311\273\344\276\230<_\242/<%\360\000=\206\346\n<\232\370\372<\301\366\255<\360\237?\274.\253\321\274\315\021L<\007U\234<x\227\366;\213\371p\275\320\227\2609\274\260\267\275\276/\320\274\037\342\026\274\256\315`\275\3113_=.\036g=}b\020<\335K\213:z\001\255\275\025\251$=!9\007=v\247\304\274X\350\224\274(\232\226=\r\243o\274\236\211\022<_T\207\275\371\344|=?5)\275\3764\232\2748G\253<\317aN=\217M\033;\277\262\200=W=l\274\330\363\301\274_\022\324\274a\007\270<C\362\211\274\306\364\250\275\343t4=\001\244\305\275\205\2552\274\034\025\325=DG\202\274\023p\"\275i\3677=\366\341\314\273>]3\275T\3071=\317\376\207\274-\227\006\276\003K\260=6@\367<\265\314\345\274\256\326\247<\033\026?=\016\273k=\310Y\353\274o+G\275J\247\010=~\317b\275\223\341\365\273+\204k<yu)\274y\267\275<\233\244\246\274*>k\274\257V^\275\017\224\376;E\3742=\203\2728=B\2213\275\373\231}=b\264z=U%\303=S\364w=7\336P;p\276,\275\342\241\213=\025\t\251\275\033\273\230=\221>\230<\273e\302\2746\340\317\274G\210\337\274\333\026\244\2744\361\026\275\247Tg=\321\260\263<s\320w\275p\263\361\274\336\033@\274\303\'d=v\002\"\275\234\316<<_\001g<7\361}\275@9\263\273\257\323\375;\332\215\201\275\207\005K\273Km0<\205\262\225\275(\007\364<\203\252\330<\277\246%=\216\201\332\270>l\032\275\250\006\200<H\177\004\275\277\357\206<r\276d\275\"\331)\275\226\177\026\273fa\024=\263y\253;E\346\377<\233\023\303<L\020C\275\203d\271<\223C\243\274\366\'\231<X\343\225\275{*B\275\035\335:=wI\267\274\343\234A\273\242\013\252<\357\313\r=\376\316\310<\210|\213=Wjr\275@\302\220\275\235(<=\270\260W\275\235\'G\275R\252\267;\334[\235=\231\037\025\2752\312T=3E\305\275\002\333\017;\372g\341\275\250Z\314<mK%=\344KE=F\023\246\273Dk\277<\037\377\240;\223$\274\274\343\233\277<\306\230f\275\206\0259=\024)\330<f\316\337:\010\321L\274\3701\033\275\020\266T\273#\354\215;\211$\307\274\004\362\221\274\276\216W=\3259\247=\324eg\275\214M\256\273M\177:=\213\334R=\346S\033\2757\235\225\275\217\274\356<\312w\310\274\374z&=\007E\360<\355O =\256J\336<\0030\220<|\r\270<5`\027=\203?e\275\354\225 \274sL\224=\351\276\342<\034j\035;\266\235U<\276\003?<\303\233\201\275\340o\256\274u\360\242<\230\326T:\250\302|;\020\332\340\273\036,\317\274\213\340\027\275Tv\022=;M\356<\360\017C\274\336\2357\2754\337?=H#\200\275p\305\256\274\020\307\237<\004\032\001=#/\246\273J|9=Hq=;\274\013\246=\352y~;\305\270m\274b\341$<D\275b=\361\325\372\271\221E\353\274\327\005\n\275|\224R\273u\037\216<\354\222\353\274\027\002\231\275\240b\004=\036Mv<\316\342><\000\1772=\200\255\347\275\211\300\234=\370Ao=Bsc\274A\304\245\2742\214H=;\314Y=\236\245\023=\201\371\301;Ji\301<p5\325<\240\271\366<?IG=\203O/=\376b\351\2738\311\352<\212\317\347:I\217W;\345$\376\2745\375\016\274\215M\337=F\323*\273\257\'M<Wc\235\274\376\264\275=\211;p= \263\363=\342\0018\274\366\n\'=\3017\361<\267\256e<U\226\373;\230?\322\273/\371^\275LL\311=\330C\375\274\'\210\2445\206\225 \275\235`\251=\007\364\373\273\020\266e\274\276\016\306\274\234:Q=.\035\327\274\320O\302<ps\027=\"\002\032;\004R\313<\002(\207\275p\253\331=,h_\275\332p\266<J\353\274<r\246\270\275xB\201<~\312\212;\374\233\346<\237+\002\2749\324e=\365E\035\274%\222\014=W\301\037=\250W\257\2752O\300\273\344\224u\275\265\273\001\275E\240\205<K\234!=\273\240\014\275R;\302=\303\021_\274\005\2002<u\256\035=\177C\266=\236\374\n\275s> =p\325\003\275[\014x\275\321O.\275\010z\004=\271f(=\356\366\257\272\242\030\t<\326;\223=@`C=\337\177\303\274\203\t\t\275D\375)\275]\324[=\005\204\225<\370V*\274\345\242\277\272\256\262\030:\301\332\377\274\201\251\033=\260\024=\2745\276F=w>\256\274\3549\206\275\242pL\275\000\314\330<\331\264v; \320x\275^\205\t\275;k\013=EZ$\275\205J\247\273\365\214\371\274\017v\002\274\216J5=\3249H=\177\227R\274Q\r\314\273\037\270\220\275\376E\227;\036\256q<\272\3119\273\233\300\205\274\256i\232=f\276\315<\245y\3378\377F#;A\215R<:\033\367\273A\'k\2746\272\014\275\211;\204\273\266\250F=\231\207\231\274*\253\232<\341|h=\254\366\214<o2\246<\2356\'\274AO\360<=\033\225=\007\236\255=\361.d\274Uq\276\275\234Q\215=\273\325\252=\216\310\236\275\000qx\273v&\336;4\250B\274\031R\246=\307\022\270\2748[\267<4\3175\274\205\226\007=\010\177_\275\217\204\212\274\205D\004\275\231\016p\275v!V\275.\276\365;2K\322\274X_ ;\3419\007:o\t\237=\001\272\005=\320C\327<\201\227\340<I:\002\276\206\361\232\275\331:\331\274,\310Z=\351O%\275\261?7\274jd;\275\360\002\224\275\314!X\275\004\241\002=:\372\356;b\225\331\274\016s\250;\206!/\276\254\031\324;\312O\315<\361\234\032\274.\356L=\356\352n\274\314m\024=\300U7\275\273\267i=\251[\260\274\365U\037=\325\352\217<\361(\305\274Un\204<\370\204\230\275\320ZW\2756[\212\274;w\270=\320\351K\275%74=\345\337B\274j>M\274\235H\245\274w\336.=\001s\336\274\200\253;<i\207[\275\037}\203\274Y\265i\275\336\237\230\275\303(s\275\020\227N\275p\310\253<m\r\376\274\\k\003>j;@\275\354T/=\313~U<z\274_\275\020\275\211<\261\354Q<w\210q<Q\335\217<8Y\301<\301\261\301\274X\242\007\275\265v(=\206|\234=\316\326\352\274/\316\017:\3369\236<z\371\363\274*\237i=1\316!\274*k\243<\376\2209\274\363\223\220<\320\212m=\352e6;\211\365\033=\356]+<\277\365Z\275\332rI=\016\255\351\274\306\327\\\275D\363\210;x\251\024\275Y\334\251\275\375\254\343<\t:Q\275L\220\024=\220\210\213\274K\361\233=\212x\014=\274R\016=\220\313\262;v-\245<2Y\201\275A\244$\274\372q\336<\"Z7\274o\227O<\271\241\203=\317\231\007\272\317/5\274\307\343\232<\252\030\343<4\026*\275\364b\034=\006V\304\2747\006\n\275\355\355\000<\371\177\301\273\273\337\003\276(\251\225\274?l\247<\021A0\275mC\254\274\366N\026=\021\3734=\376\277W\274\"\277\212=9\363Q:\323\000\202\274\031\371\026=\005\271\016\275:m\275=\362G\374<\234\226I=\230\255\276;\026\212\250=\205\200\262\2756]z\275\232\031A<\244\265D\274\033\376\243\275\221a~\275\300\273\n\275\365\265\234\275\370,R\275/\263\256\275\212\014\232<8\260v<\003\035R=\036\272\'\274\006\222\340\274&\355\235=\260*\263\275\255\n\n\275te0<@\355 =u4\311\275\363\301n\275\206\332\006=\304eP\275\262\327\324\275Kd#=G\340\331\273\333\331\317\273I\245\023\275\317\037#\275k)\236\274\313\243F= jY=\325\311t\274\006\351\327;%\270\315<\014L\034=A*f\275@2\367\274\237\004\207<\023\207\263=\213\307L=\355\372E<\301{C\274U\247\027=\363\270\213\275A\262\032<\311\227\266\273\351\322\263<&z\225;]c\207\2749\216:<\316\370\211\2743\"\234=\357\266Q\275\262\005\226\274\224n\003\274\306T\r\274\363\036y\275J\230\244\273\326L\243\2757\270\340;}\256\224=;v]\274l\210e<E\377\214\273W{\352\274\364B\\:|\334\366<\362I\"\275\\\2561<\211\327\216\275$\235\260<\277\"\261=\"\020\210\273"
      }
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "lstm_1/recurrent_kernel"
  input: "lstm_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/read"
  op: "Identity"
  input: "lstm_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "lstm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/concat"
  op: "ConcatV2"
  input: "lstm_1/Const"
  input: "lstm_1/Const_1"
  input: "lstm_1/Const_2"
  input: "lstm_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_1/bias/Assign"
  op: "Assign"
  input: "lstm_1/bias"
  input: "lstm_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1/bias/read"
  op: "Identity"
  input: "lstm_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice"
  op: "StridedSlice"
  input: "lstm_1/kernel/read"
  input: "lstm_1/strided_slice/stack"
  input: "lstm_1/strided_slice/stack_1"
  input: "lstm_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_1"
  op: "StridedSlice"
  input: "lstm_1/kernel/read"
  input: "lstm_1/strided_slice_1/stack"
  input: "lstm_1/strided_slice_1/stack_1"
  input: "lstm_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_2"
  op: "StridedSlice"
  input: "lstm_1/kernel/read"
  input: "lstm_1/strided_slice_2/stack"
  input: "lstm_1/strided_slice_2/stack_1"
  input: "lstm_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_3"
  op: "StridedSlice"
  input: "lstm_1/kernel/read"
  input: "lstm_1/strided_slice_3/stack"
  input: "lstm_1/strided_slice_3/stack_1"
  input: "lstm_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_4"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read"
  input: "lstm_1/strided_slice_4/stack"
  input: "lstm_1/strided_slice_4/stack_1"
  input: "lstm_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_5"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read"
  input: "lstm_1/strided_slice_5/stack"
  input: "lstm_1/strided_slice_5/stack_1"
  input: "lstm_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_6"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read"
  input: "lstm_1/strided_slice_6/stack"
  input: "lstm_1/strided_slice_6/stack_1"
  input: "lstm_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_7"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read"
  input: "lstm_1/strided_slice_7/stack"
  input: "lstm_1/strided_slice_7/stack_1"
  input: "lstm_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_8"
  op: "StridedSlice"
  input: "lstm_1/bias/read"
  input: "lstm_1/strided_slice_8/stack"
  input: "lstm_1/strided_slice_8/stack_1"
  input: "lstm_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_9"
  op: "StridedSlice"
  input: "lstm_1/bias/read"
  input: "lstm_1/strided_slice_9/stack"
  input: "lstm_1/strided_slice_9/stack_1"
  input: "lstm_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 384
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_10"
  op: "StridedSlice"
  input: "lstm_1/bias/read"
  input: "lstm_1/strided_slice_10/stack"
  input: "lstm_1/strided_slice_10/stack_1"
  input: "lstm_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 384
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_11"
  op: "StridedSlice"
  input: "lstm_1/bias/read"
  input: "lstm_1/strided_slice_11/stack"
  input: "lstm_1/strided_slice_11/stack_1"
  input: "lstm_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/zeros_like"
  op: "ZerosLike"
  input: "conv1d_4/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/Sum"
  op: "Sum"
  input: "lstm_1/zeros_like"
  input: "lstm_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "lstm_1/ExpandDims"
  op: "ExpandDims"
  input: "lstm_1/Sum"
  input: "lstm_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/Tile"
  op: "Tile"
  input: "lstm_1/ExpandDims"
  input: "lstm_1/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/Tile_1/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/Tile_1"
  op: "Tile"
  input: "lstm_1/ExpandDims"
  input: "lstm_1/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/transpose"
  op: "Transpose"
  input: "conv1d_4/Relu"
  input: "lstm_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/Shape"
  op: "Shape"
  input: "lstm_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/strided_slice_12/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_12/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_12/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_12"
  op: "StridedSlice"
  input: "lstm_1/Shape"
  input: "lstm_1/strided_slice_12/stack"
  input: "lstm_1/strided_slice_12/stack_1"
  input: "lstm_1/strided_slice_12/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_1/strided_slice_13/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_13/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_13/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_13"
  op: "StridedSlice"
  input: "lstm_1/transpose"
  input: "lstm_1/strided_slice_13/stack"
  input: "lstm_1/strided_slice_13/stack_1"
  input: "lstm_1/strided_slice_13/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_1/MatMul"
  op: "MatMul"
  input: "lstm_1/strided_slice_13"
  input: "lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/MatMul_1"
  op: "MatMul"
  input: "lstm_1/strided_slice_13"
  input: "lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/MatMul_2"
  op: "MatMul"
  input: "lstm_1/strided_slice_13"
  input: "lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/MatMul_3"
  op: "MatMul"
  input: "lstm_1/strided_slice_13"
  input: "lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/BiasAdd"
  op: "BiasAdd"
  input: "lstm_1/MatMul"
  input: "lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_1/MatMul_1"
  input: "lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_1/MatMul_2"
  input: "lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_1/MatMul_3"
  input: "lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/MatMul_4"
  op: "MatMul"
  input: "lstm_1/Tile"
  input: "lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add"
  op: "Add"
  input: "lstm_1/BiasAdd"
  input: "lstm_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/mul"
  op: "Mul"
  input: "lstm_1/mul/x"
  input: "lstm_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/add_1"
  op: "Add"
  input: "lstm_1/mul"
  input: "lstm_1/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/clip_by_value/Minimum"
  op: "Minimum"
  input: "lstm_1/add_1"
  input: "lstm_1/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/clip_by_value"
  op: "Maximum"
  input: "lstm_1/clip_by_value/Minimum"
  input: "lstm_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/MatMul_5"
  op: "MatMul"
  input: "lstm_1/Tile"
  input: "lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add_2"
  op: "Add"
  input: "lstm_1/BiasAdd_1"
  input: "lstm_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/mul_1"
  op: "Mul"
  input: "lstm_1/mul_1/x"
  input: "lstm_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/add_3"
  op: "Add"
  input: "lstm_1/mul_1"
  input: "lstm_1/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "lstm_1/add_3"
  input: "lstm_1/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/clip_by_value_1"
  op: "Maximum"
  input: "lstm_1/clip_by_value_1/Minimum"
  input: "lstm_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_2"
  op: "Mul"
  input: "lstm_1/clip_by_value_1"
  input: "lstm_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/MatMul_6"
  op: "MatMul"
  input: "lstm_1/Tile"
  input: "lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add_4"
  op: "Add"
  input: "lstm_1/BiasAdd_2"
  input: "lstm_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Tanh"
  op: "Tanh"
  input: "lstm_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_3"
  op: "Mul"
  input: "lstm_1/clip_by_value"
  input: "lstm_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/add_5"
  op: "Add"
  input: "lstm_1/mul_2"
  input: "lstm_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/MatMul_7"
  op: "MatMul"
  input: "lstm_1/Tile"
  input: "lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add_6"
  op: "Add"
  input: "lstm_1/BiasAdd_3"
  input: "lstm_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/mul_4"
  op: "Mul"
  input: "lstm_1/mul_4/x"
  input: "lstm_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/add_7"
  op: "Add"
  input: "lstm_1/mul_4"
  input: "lstm_1/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "lstm_1/add_7"
  input: "lstm_1/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/clip_by_value_2"
  op: "Maximum"
  input: "lstm_1/clip_by_value_2/Minimum"
  input: "lstm_1/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Tanh_1"
  op: "Tanh"
  input: "lstm_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_5"
  op: "Mul"
  input: "lstm_1/clip_by_value_2"
  input: "lstm_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/TensorArray"
  op: "TensorArrayV3"
  input: "lstm_1/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "lstm_1/TensorArray_1"
  op: "TensorArrayV3"
  input: "lstm_1/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "lstm_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "lstm_1/TensorArrayUnstack/Shape"
  input: "lstm_1/TensorArrayUnstack/strided_slice/stack"
  input: "lstm_1/TensorArrayUnstack/strided_slice/stack_1"
  input: "lstm_1/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/range"
  op: "Range"
  input: "lstm_1/TensorArrayUnstack/range/start"
  input: "lstm_1/TensorArrayUnstack/strided_slice"
  input: "lstm_1/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "lstm_1/TensorArray_1"
  input: "lstm_1/TensorArrayUnstack/range"
  input: "lstm_1/transpose"
  input: "lstm_1/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/transpose"
      }
    }
  }
}
node {
  name: "lstm_1/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/while/Enter"
  op: "Enter"
  input: "lstm_1/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Enter_1"
  op: "Enter"
  input: "lstm_1/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Enter_2"
  op: "Enter"
  input: "lstm_1/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Enter_3"
  op: "Enter"
  input: "lstm_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Merge"
  op: "Merge"
  input: "lstm_1/while/Enter"
  input: "lstm_1/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Merge_1"
  op: "Merge"
  input: "lstm_1/while/Enter_1"
  input: "lstm_1/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Merge_2"
  op: "Merge"
  input: "lstm_1/while/Enter_2"
  input: "lstm_1/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Merge_3"
  op: "Merge"
  input: "lstm_1/while/Enter_3"
  input: "lstm_1/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Less"
  op: "Less"
  input: "lstm_1/while/Merge"
  input: "lstm_1/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Less/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/LoopCond"
  op: "LoopCond"
  input: "lstm_1/while/Less"
}
node {
  name: "lstm_1/while/Switch"
  op: "Switch"
  input: "lstm_1/while/Merge"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge"
      }
    }
  }
}
node {
  name: "lstm_1/while/Switch_1"
  op: "Switch"
  input: "lstm_1/while/Merge_1"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "lstm_1/while/Switch_2"
  op: "Switch"
  input: "lstm_1/while/Merge_2"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "lstm_1/while/Switch_3"
  op: "Switch"
  input: "lstm_1/while/Merge_3"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "lstm_1/while/Identity"
  op: "Identity"
  input: "lstm_1/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Identity_1"
  op: "Identity"
  input: "lstm_1/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Identity_2"
  op: "Identity"
  input: "lstm_1/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Identity_3"
  op: "Identity"
  input: "lstm_1/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_1/while/TensorArrayReadV3/Enter"
  input: "lstm_1/while/Identity"
  input: "lstm_1/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "lstm_1/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul"
  op: "MatMul"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "lstm_1/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul_1"
  op: "MatMul"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "lstm_1/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_1/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul_2"
  op: "MatMul"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "lstm_1/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_2/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul_3"
  op: "MatMul"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "lstm_1/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_3/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd"
  op: "BiasAdd"
  input: "lstm_1/while/MatMul"
  input: "lstm_1/while/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_1/while/MatMul_1"
  input: "lstm_1/while/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_1/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_1/while/MatMul_2"
  input: "lstm_1/while/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_2/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_1/while/MatMul_3"
  input: "lstm_1/while/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_3/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul_4"
  op: "MatMul"
  input: "lstm_1/while/Identity_2"
  input: "lstm_1/while/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_4/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add"
  op: "Add"
  input: "lstm_1/while/BiasAdd"
  input: "lstm_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul/x"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/while/mul"
  op: "Mul"
  input: "lstm_1/while/mul/x"
  input: "lstm_1/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/add_1/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/while/add_1"
  op: "Add"
  input: "lstm_1/while/mul"
  input: "lstm_1/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Const"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/while/Const_1"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value/Minimum"
  op: "Minimum"
  input: "lstm_1/while/add_1"
  input: "lstm_1/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value"
  op: "Maximum"
  input: "lstm_1/while/clip_by_value/Minimum"
  input: "lstm_1/while/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/MatMul_5"
  op: "MatMul"
  input: "lstm_1/while/Identity_2"
  input: "lstm_1/while/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_5/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add_2"
  op: "Add"
  input: "lstm_1/while/BiasAdd_1"
  input: "lstm_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_1/x"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/while/mul_1"
  op: "Mul"
  input: "lstm_1/while/mul_1/x"
  input: "lstm_1/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/add_3/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/while/add_3"
  op: "Add"
  input: "lstm_1/while/mul_1"
  input: "lstm_1/while/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Const_2"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/while/Const_3"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "lstm_1/while/add_3"
  input: "lstm_1/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value_1"
  op: "Maximum"
  input: "lstm_1/while/clip_by_value_1/Minimum"
  input: "lstm_1/while/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_2"
  op: "Mul"
  input: "lstm_1/while/clip_by_value_1"
  input: "lstm_1/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/MatMul_6"
  op: "MatMul"
  input: "lstm_1/while/Identity_2"
  input: "lstm_1/while/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_6/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add_4"
  op: "Add"
  input: "lstm_1/while/BiasAdd_2"
  input: "lstm_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Tanh"
  op: "Tanh"
  input: "lstm_1/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_3"
  op: "Mul"
  input: "lstm_1/while/clip_by_value"
  input: "lstm_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/add_5"
  op: "Add"
  input: "lstm_1/while/mul_2"
  input: "lstm_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/MatMul_7"
  op: "MatMul"
  input: "lstm_1/while/Identity_2"
  input: "lstm_1/while/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_7/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add_6"
  op: "Add"
  input: "lstm_1/while/BiasAdd_3"
  input: "lstm_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_4/x"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/while/mul_4"
  op: "Mul"
  input: "lstm_1/while/mul_4/x"
  input: "lstm_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/add_7/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/while/add_7"
  op: "Add"
  input: "lstm_1/while/mul_4"
  input: "lstm_1/while/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Const_4"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/while/Const_5"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "lstm_1/while/add_7"
  input: "lstm_1/while/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value_2"
  op: "Maximum"
  input: "lstm_1/while/clip_by_value_2/Minimum"
  input: "lstm_1/while/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Tanh_1"
  op: "Tanh"
  input: "lstm_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_5"
  op: "Mul"
  input: "lstm_1/while/clip_by_value_2"
  input: "lstm_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "lstm_1/while/Identity"
  input: "lstm_1/while/mul_5"
  input: "lstm_1/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "lstm_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add_8/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/while/add_8"
  op: "Add"
  input: "lstm_1/while/Identity"
  input: "lstm_1/while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/NextIteration"
  op: "NextIteration"
  input: "lstm_1/while/add_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/NextIteration_1"
  op: "NextIteration"
  input: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/NextIteration_2"
  op: "NextIteration"
  input: "lstm_1/while/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/NextIteration_3"
  op: "NextIteration"
  input: "lstm_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Exit"
  op: "Exit"
  input: "lstm_1/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Exit_1"
  op: "Exit"
  input: "lstm_1/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Exit_2"
  op: "Exit"
  input: "lstm_1/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Exit_3"
  op: "Exit"
  input: "lstm_1/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "lstm_1/TensorArray"
  input: "lstm_1/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/range"
  op: "Range"
  input: "lstm_1/TensorArrayStack/range/start"
  input: "lstm_1/TensorArrayStack/TensorArraySizeV3"
  input: "lstm_1/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "lstm_1/TensorArray"
  input: "lstm_1/TensorArrayStack/range"
  input: "lstm_1/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "lstm_1/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/sub"
  op: "Sub"
  input: "lstm_1/while/Exit"
  input: "lstm_1/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_1/TensorArray"
  input: "lstm_1/sub"
  input: "lstm_1/while/Exit_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/transpose_1"
  op: "Transpose"
  input: "lstm_1/TensorArrayStack/TensorArrayGatherV3"
  input: "lstm_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.125
      }
    }
  }
}
node {
  name: "lstm_2/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.125
      }
    }
  }
}
node {
  name: "lstm_2/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "lstm_2/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 3733553
    }
  }
}
node {
  name: "lstm_2/random_uniform/sub"
  op: "Sub"
  input: "lstm_2/random_uniform/max"
  input: "lstm_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/random_uniform/mul"
  op: "Mul"
  input: "lstm_2/random_uniform/RandomUniform"
  input: "lstm_2/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/random_uniform"
  op: "Add"
  input: "lstm_2/random_uniform/mul"
  input: "lstm_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_2/kernel/Assign"
  op: "Assign"
  input: "lstm_2/kernel"
  input: "lstm_2/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_2/kernel/read"
  op: "Identity"
  input: "lstm_2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/kernel"
      }
    }
  }
}
node {
  name: "lstm_2/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
        tensor_content: "r\3735\275[\253)\275\216\027\016\274&I\247\275!i\340:C\255\224=2\203\013\275\317\377\310=\037l\336=\253\277\213;\246\252c<\255\266\242=\371,\021=\254`V\274\360f/=0N\300\274\210\t\300\275\216W\275\274\270\236\365\274_u\010>\177\371\221\275\331\\\224\27523\323=\021(\214=M\266+\274\344\232\032=IZ\241\275h\026?\274\255s\366\274\'\257\254;\233\253\016\276\361\177\303\275\276\014\344;\211\244\264;t\0173=\341\t\225\275\304\260H<uA\026\274u@\204\275\243\227C\275z\237\227\275Nf\326<\237e\211<xw\335\275J\2245<S\'\341\272F\022s=\230\234\023\275\022\347\353<[\rV\274\224\274\321=(\350M=mlL=:\002\253\273\345\3639=\277\035d<\314\334 =\305H\265<\3777\016\275\342ss=\036\241\363\275\246=\230=\253\221\201\275\241\025\211\275\n\030D<\\\250\262=\374~G\275\2554^<\347\237y=X\243x\274\216\377!\275\016U\020<\337\212\327;\347rQ=us\211=\006L\360\274\005\271:=\312\323\002>\'\362\014\276\223\032\271;\320\177\272\274\333\254\371=\010\247(\274\201\243\022\274#\345\361<\260Nt\275\361\'\203\274\t\n\034=qg\002=\336[?\275\026>\017<*#\267\275\036b\270=\251\306\260<U];\272z\241\262\275\216\325,>#\306P\275\251\242\216:\230\340\031=\342=\005\276\237c\374=\372>\265\274\2038\034;G\267\215\275CI\206\275I\337\373\275<\243\037\275p\212\321=}\240\003\275\n\236\272=\356\255\017>\253\236\312\275-\267\232<\271\035.=o\303\377=jJ\'=\322\312\010\275Qxm\275Aj\267\274\222\243<\274\210\306\214=\200\260?=\364S\210=\336\275o\275cT\006\275\262A\341\274\262\225\375<l\321\375\275\314h\247<\315,\353\275\313<\315<\323\342:\276?\360\013\275\252m\207\275\003\303\316\274y\'\307\273P{\270\274\230 \032\276\260Bq\274\023\217u\275\320\357\362;#\242\340<2L\245\275\214NY\275\205i\237\274N\236\354<\352\366&\275\026\217\'\275\310\243\336=\223T\016<\2215%\275v\232\364\274\356\037\253\272\206\233\026>\324\350\213\275\356)\214=\326g\240\275Fx\214=\t\021G:\312\241\007\273\300\362s\272C8\002\271N\333\\<\004\224\261<h~\235\275\225\247\216=\006\271X\275\003\275\250\275\202\253|\275\371\200\013\275c\377\223<8\317\214=3~\220=3\014\342\274U\331\240\275P\366\346;\225\364P>p\247\006<\017\226\211=\375\275 <\246z\r\275\361\366\326\275Q\"P=)\263&\274\006\017\354;\200\030\262\274\313S>\275\005\000\'=\376\340\250\274Q\316R\275S[\221<x\362\333\275\026\350A\274\221\375p\274_\334\321\275-\362\207\275\220\3645<O\263\220\273\277\223\007=\023M\351\2736\322^\275\177\016(\274v\273\302\274\236YU\274\363\372T\275T9\325=\213)a\275n\230\353\274\363g\376=,c\354<\341\014M<\213\304\240\273;\010\\\275\317u_<\016a\027=P\362\236=Y\303\275\275\200\321\250\275\344\213<=[\010\330\274xR\016<u>\016\276\306p#=R\275\321;\340\227\337;\346\230\247\275\344\370w\275\010+#\275\303\376\377\275\244+h9\345\330\177\275\026\031\370<\222\236\001\273\233\251\200;\274\274\026\274\255\223\302=+mo<\177\237\200\2745\275H=\314T\022;\242\215\356\275\347\336R\274@\364\031<\217?&\275\004\r-=\355\240\301;\250Ao\275\'\203\255=t\265B<\310\004\231=\263\001<<l\3265=r\357\376<l<\324\272}\215\037=\232\307\236=\321\034#=\337\036\222\273w\016\271\275\277\004\373<\205\305\201=c\346\270\273H1\335<R\\0=!1`<?tz\274\366\213\304=\033\231)\274)%\264\275\301\237\250=C \010\275\204^\304=\024\233\030>$8\270<C\005\216=(\005$=$\350\364\274\325\357\214\274\316\325\036\275\270\006\223=\342\223\013=\016\342\267\275\327\237\255\275i\357\221\273w\375~<#e\207\272G\010\374\275\311\273\333<\234~\177=\337?\031\274\004g+\274d\220\002\276m\365\n\275jK{\274\300\204\266\274\267e\246=\316cv\275\005!\330<J\223\203=\350\366R\273\000f\204\274\266\352\346\272\377\235\271\275-|?<\355<\343<F\036O\275S[\177=\350\330\242\274G\376=<)\346\002\275\t\242\217\275\223F\304\275\242\371\317=c\357\345\275\257\177\014=r&\266\274\000\005\025\275\331o\261=\310\316*\275\306k\214=f\026@\274\022\303\316\275\032\236\001=`d\261=\217\362\335<Q\307\236=*o\013=j\014\242\274\316\210\000\275\232\335\303\275\227\345\222<\241\226\324\274\370g\244=\335\215\275\2758\367 <&\244\000>%\255\214<\033\177\271\275\361o\326\275hN\031=1s\204<r\320\225\275\305\026\254<\003b#\275\326\362\237=/\323\240\275(\214\342\275\336\235\300\274\244\230\312\275\350^\266\274a\233*\275\214\315\203;\024\262c=u\333\224\275Y\373\275\275\317\002\246\274\270D\311<o\213\005\275\207\203\213=\005k\221:g\351\334\273:e\243=\215\030A=\210-\342<3\363\321<\371L&=\214\236\203\274\312\200\332\274\345=\326\2758\006\020\275\325\221\351\275EUA\275\310\314s\275\253\352\233\274&\226\263=K\026\305\274\007\277\253\275s\217\353\273\206#\030<l\252\252<\337&\2629@\203;=\006\216\235\273@8\361=\252\272\3749\375\231\247=\214\362f\275\324\313K=\247\1779=E\234\006\275\376J\201\275f\005\253\272&\324\022\275\016Dl=5\222l\274K;,=\332\365\210=\316\363\025\275H\233\245\275S\352\007>\245\003\337=H\034\361<D\373:=\3605Q\275\024\n\274=\026\314\035\275|\257\220\275@\336}=\037;\007\275\330Cw<\372/K\275\337>\\\275\372\251\346\274S\302\322\275\030\334\234=\254rC=\253\035\210\273\372\213\"=QZD=s\261\237\275\331S@<L\3215>l>\236\275\322\215\253=\353g\247<\305\022\007\276\025\324\257<\225\312d=2\266\r\276\366\346\336\275!D\276\274\036rB;K\313\330\274\"\370\320\275\260\232U<\3779\234=\377\025\t=\3766\031\275\303v\031<\257\023z=\202\277\344\273\354\363\237\274\245\024\206<\355!D\274g\010K\274\311F\013=\222\"\036;\207\036\215\275\344\247d=\321\215\257<\204\350\256=^\230%=\032t\004\2740Y\314\2758\205;>\2578\263\275\340\256I\274x\271\"\275\003!\254\275^\202\363\274\207\236\272\275\346\206\242\2757S\352<)\233\207;\200\034f\274.\372q\274\211\25609/\3166\275\313W\377;m{\250\275\271\360\020\275\267I\200\274$^\000\276\316\354\203<\006~\263\270\345;\021=\203\3534<\242u\371\275\266\002\301\275j\202\322=7\021>=?\314\r=\222.\261=\230-\'\275\356\363\365=\316Az=\347\365\341=\005\003\336<\021\337\236\274\246\202\014\275D$\n=\203y\033=.\301\037=\325*\325=-De\275\"\346\033\275;\213\200\275\250\243\272\274\350\202\022\276a;4=\307\250z\275\333\n\245<\251\324?\275\255\013\317=0\223|\275\356|\210=\256Wf\273\n\016\211\274\343\020L<\3552j\275\242\343==r8\0058\203\261\334\273,zI;\345\336\014=\3554\020>\327V\027\275\356\306\303=\233uA=\246\255\305\275\202H_<x\344\304=\302\203\213\275\314\261\004\276\371\024\016\273\341\207\235\275\3024\231\272J\020\243=<\266\321=&l\266\274\021Q]<\032\362\005=\347r7=\n\233\270\274\336\354\026\274\221\220\334\275Y.\235=\354\021N\275\177\365!\275\014Y\321;\210\033^=ly\320=\004P\021=\324\334\017=w\023q\274\013\345\222\274V\021m=P\230$<\026\261\222\275\004\366\233\273w\"\256=\027\320\263=||\207=\204\030K\275l\372\304\274\227G\200\275\'H\211=+ \240<v\266\002>\005[\316=\2115I=\\\347\300\275\304$\300=t\370\r=\321\264t\275\305\310\036=O\010\372\274[\241\263\273\241\230\010\275n?p=\201\010\326<\242\227\254\275\316\023\344=t\240m<Q\004p=\323\360\022=\302\210g=\3414\036\274\363\327|\275*\214\003>\226h\203=\347\232\010=\240Xn=R\234\2139EL\330=RF\242\274\263\212u\274\273j\266\274\234\352\265=\237\321\334;R\325\315\275\000o\365<\031Z\373\275\247\304O>D1\245=\022x\321\273\327)Q\273p\001C\275\306\023L=\303_\217<\235b\231\275\304\206\323\275?J,\276#\026Y\275\266\263\363=\336E\222\274\001\267b=\346\271w<`\300\370\273\364pc=\201\205E\275\036\301\036=C\337\317\274g?\010\275\372\313\263\274\304\342\014=\217G\233=\3519\227\275\363\334]\275\004sK=\022\020\360=\250\300$\275\2612\270=\022N/:IK\t\275\357D2;\361C\000\275\257N\232\275\226\314\256=]`\354<\006\330(\275c+\010\276^\271\373;Q\2568\275nD\\\275\351\362\'\275i.\340<\366\330\234\274e\311\327\275\3271!\275PN\275=NN\342\273\215$\277\273\221\345\272;\014(4=\217\250>;\312\344\326\275\224\312T=)\332B\275\373\334\372\275\367\230\225\2758{N\275\3108\026<\211YN=u\251\037\275\344\325\333\2739\312\232\275\036b\217<\230\034+<\227\313\256\274\002\211\374\274t\007\254=\007\016\307=\364\255\'<\277\335\276=\261T\243=@~v=\325u2=\261&\215:Zh\245<\366\177\214=\002\234\016;\270\032\201\275\345\230E=~\360}\274\267\216n\2752\332\031\272f\322\316<\251\036\221=,J>\275c\037\271\27493v\275rO\333<\033k\306=\213\313\365;\2426h=u\024\314<\022\020;\275\237\272\201\274\344\252\211\275&.#\275\255$1=\253<\300\275\325\027\307=\322:\364<FI\037\275\330\373-<@;><>\201\243<;>v=\312\231\201\274\214\365\016=jw+=QE\310<\355\275\270=\323(I=\372\251m\274\244\005,=\233\n\235=\023S\264<\240\325M=\372u\204\274\235h\201=\020\340\257=\270]\341<\373\355Z\275i\374\230\274\027\202%\275\27341=\204\354D<c\246\314=\3240\274=m\304}\274VU=<\274\234@\273.\205\201<\030\345G\275{V\256;\350\313\267\275\277~\"\275L\354W\271\031\326\334\273\"\205\202=\210\023\007=^\214\251=,6t=\237\353\224=$\010\205\275X9e=\220+Z=nef=3\351\t\276&\262;;\220S\341\275\317\351\213\274\374=\010\274\344\361\222<A/\310\275~\2262>\225\252\326<\303\343\252=\022e\262=4|\025\274P\325\216=\272IJ\275Bt\233:\3700H\275Q\233\245=\210^\001>\\\000\241\274\236/\357:\357[Z=Y\223\251\274l\t\022>\236{`=\241\322D=\nFc=FU\360<\231\357\330\274\310\243c\275\253\263\245\275\257,\021\275[\374\356;\256\003\242<\264\227e\273\035\013\025\275\271\254\343;9\237K=\321\t\213\275g4\035=\332<~=\214\320\222<nP_=\312\337\250\274\271\261\336\274\000\000\215=q\r@\275a\032\250\274rr\366\274m\365y=\034P\363;\023\333j\275\223\301E=\3778&\275\217FW=W\305\006\274\246\217\036=\334,B=\270\273$=\374\335\351\275)?\262\275\014k\255:R \270\275\025\236\216\275\212\223;\275\312\346\000\276]\200\264\275f\322\264\275\206\370\271<(\304\254=\256IR<I\347&\275\305\033b<c\245\365\274\350S\331;<\337\331\275\217\005^;\271\204\224\275\326\365\364\274\240jx\274y\272\267=\227\367S\275P\2622\275D\366\317=\264/=\275\006\010\227\274kW\352;\375\362U=\352y\264\274TB\n\275\367I\\<\245\252Y\275B\202\275\275b\267\224<\025\331U=\234\327\207=\260ac\275\016\002k;\246\016u=3X\217\275\356\0261>/!\306\275\302\267`<X\265B\274\322\014\"=\2261\216=\347\322\303\274\024i\330<\202\264\247\273J\316G=\227\206\006\275\021\356\230\275\014N\217\274\316\206\026<\356\211{=a\225\337\274)\303%=\321\307\212\2752\353\275\274\342\026s=\313\235\226:NW\277<\322\313\320\274z\323\016=q\207\303\275x\250\255=I2L\274\363\275\366:\262!\207;\034A\351\275\031\261\201\275\367\224\231<q\207\022=}\031\000<5\221\265\274XU\303\2749.1\275\254N0\275$,\314\273#ZE<\024\0308=*\255\321=I&\240=\203f\000\275\211\267\341<J\363\000>\"\372\010>\177~\271<\367\260\017=O1\033=\253\227\270</\017T\275)\244\n>\034j!\276\234aq\275{\241t\274\206\373\206\275\277=|=F\315\267\275d_\221\274\262UH\273\375\366\364<\2275\231\275\220\001\000=\256>L=\'\363{=\332\020\251=\177\312\304<1\212\221\273\363\203\247\275`\303\030\276;-m\275\314Om=\031\tG\275\221\224X\275\226\250\365=\326\341\240=\205\341,=o\251\314=\301\232\207\275Q\025\262<\303\202\247\275R%\"=\016)a<e+\013\274T\257\345\274\362{\033\276?\323\377\275\2343\256=)o\212\275\2412\235=\226\330\217\274\372uQ<\020\213\313\273\275\002\232<uT\251=\\\276\303\275\005\222\022\276\024Q\016\275\3208\003\274H\317]\275\344\366N\275\367\307\310\274o\311!=\230\266\336\2740\207\222=\271~<\273r\026\021\275\310\010\177;9\377\274\275\006#\321\275\230\274\013=\200O\026>N3<\274,\2525=]5\021\275>>\202\274$ ]\275\320\030\323:\311\3040\2759A/\275Q:\370;\315\245\311<z\003\036\275\027V\342\275\226\235Q=Y<\360=Z\017\215\275s\270$\276\364\322Z=\224I\025=\216\356\244<@@\222=\253\347)\275h\266B\275\372\343\232=dK\321\274\'\200U=G\260c<@\341?=\013\374n\275@\\O\274\0076\341\273\367.\014\276T\021&\276\360\343d\274\037\353\306<\260\370\247\274\341eu=\225\272>=\024\226\232<8\t\255\275\352\342\006>+\025\021=\345G6\274E\227v=n\263\245<S\351\031=\365|!=~Y\021=\260\262\331\275\340\261\347:\224\356\227\275VY\206=x;\335\274K\225\217=\301\346\305<\265\326\266=\301\251\006>R\322\031<\232\"\335<\346\202?\275\3120\356<Vz\263\274R\331O\275*\336\270\271/\343\027\275s`R=w^\017\276\307\213\274=\226Jg;\326\345\202=>E\225=I\332\031<\346\347J\275\236\206_\275,\227Y\275w\272\211\274\372\025\305<\372<0=ya\022=\227U\027\275C\355\266\273\312\023\007\275\233y\326<\307\3445<V}\220=Ov\366\274D\242k\273\313T\350\274\262s,\275X\355\004\274\226\026\352\274\253\225\323=\206\020\375;\327L\337;%\227\223\274\317\366\237=\367\3466=:#@=\3369\345\274\203\302\024\276\226\000\335\274\260Y-\275Q\262\333=\262\230\363\274\014t4=\rF\024>#Y\n<\2728\014\275\300\273\227=\341\374\236<\026&$=\361]\225\275\200\323\252\275{\n\250<\332\355\312\275\306%\326;\365\321\206=5U\363=\367\272\023\275\372z\n<*\207\323;\246ZZ\275\326\322\036=\364 \263=,\247\t=\235\026\021>\340\225\212\274\255[\027=\032\234X=\217\242\307\275`\337b=_\241\000=K\251\354<\323w\230\2735\202)<\266\364b=k\331Y;mO\242=\307\ng=fF\034=\374\365\026=Ux\305\275S\257\316=\356\315o=eV\347<\037\244\321\275b\031t\275w\216\314=\361\325\322\274\2067\013\275/Q\234\275\371\326\255\274[\345\270=\032\305I=\241\230\010=\201\353\211<\371\001\330<\337\375\007\275\336\373\227<*\230T\275\220I\210\275\343_\031\275\232\312\237\274\324\304\306\275\"\212\324<\234\325%=\2565\227\274}\225\306;K\006\205\274S\234V<z\342\353\273DfN\275u\231\273=\252\251\376=\260*\212\275O\217c\2754\337\240\275\210\314\334<u\2072\275\355\313\225\275\320\335\307<~f<\275\230\231\267\274\354\310\031;\302\364\232=\374@S;\353Y\313;\227\210\226\275\316\361\233=d\212\200=\332\316-\275\207\251p=&\227\204\275M\277\224=-\241-\273\200\022\030=\005\375\370=\257\276\357<A\017\317=\254I\203\275\305!\203\273\340\203+\275y\3364\274\362%\232=\252s\354<\014\244\031\276\314\330s<{\016\013>\031wY\274\364\r\376\274\007Y\004>\267\364\213\275h\213&\275\010\006\306=\031f\212=\205\036l\274\3659\010<\016V\t\275$\020\'=\276\255\221\274\276\024\274\274~\205\004\276\033\257\256=\273d\242\273\016\024\014\273\224Z\302\275Y>\204=\303d7\275\344\241\250=]\227@\275 8\266:\256\322Q\275\027O0=\313=\350\275=\314\314\275 \033\022>*\231j=\325\233L=\364\0347=\343\256\036\273\245\006\313=p\362\027\276\225\362R<#\001\221\273\345\314\210\275\014>D=\033\313\003<\371\226\315\274\007\005\307<\363\266\203\275Dx\313\275\321\360\010\274X!@\275;/\373=\223\001o=7OO=\366\311\025<\367\\\273;L\212/=\0046\007\276)h$;Fh-=\222\336p\275\333}\\\274[\335\360=\303\271\256;\351\260\306=\236\204\027\276\265\030\200\274\005\234\377\275\240\357.=\r\320\270=\367\2762\275\204\264J\274U\016\022=x\323\254\274Bv\314\274<\2357\275\327\307\372\274\247\r\312=\272\006\252<?J\037\275\275(\224\275\345\224\024\275\232\010\201=cf\204=\033\021\325\274\002\365\214=\226\255\256=P\224\253<\230\025\206\274\3039\211;$\006H\275\004\006\375\275\326J\226=\256\223\346\275\225Ev<\311\013\225<\326\336\221=\0042\244=\222\031\362;\274\362\347=z\355\351\2741iY\275{\207\365\274\356\227\275<M\000\034=\231P\303;\3513#\275\361S?\275\253\272\260=q^1<_\237X\275\220\376\365<BC\272\275\005\251\267=0\316N<\314\005\375\274\214\242Y\274:\\\372=\237U\001\275\336l2\275v\331\347=os+\275\226\004\254\273\337\301\310=\271\240\267=l\330^<\256\255\262\275\034eP<\017\223\032=\270u\027<I\311N\275\016q\212\275m&\250\274\213\350U\275\232\340\271\275\367\212\027\275\026\256\353\275\223\335\201=v\332\221\275\316\026\361<\024D\006\2756\356\002\275\017\376X\274\254\243\220=z\256k\274\230i\260<9\316]\275\2102r=\006#\215\274\371\265\017=\312\366&\275\364+\025;;\257;=*\313d=?D\017\276H\\\027=d\227\310\275\265\214P\275\023Cz=xf\245=\357\340\201=\276JK=\346\357}\274\0225n\2747Z\242\2751\306J\273c\002\221\274\305\264w\273\017HT\275(:\036=\0232\217\275\362\312\246\275ZE\206=R\000\263==\177\266\275\240\207\316\275\314D\330=\364\213\205\275~v+\275@\217z=\2557\006=v\"\225=\2140p=6\n\311<\325\344\323<\272\372\320<\347\027\200\274\'<;<2`\317={%H<|\244==\202\240\247\273B\212\350\275\320\020\024=\366\353\202=\220\263\200=yV\027=D\022\004\276\250n*=\365\310\034=B\344\316\275\206\346b=v\037\200=1\247\240\275\365l\034<:+\215<\334\335\245\275\000\\\'\275\"\240\234=\211\023\204<`\027\264\275\247DI=e\026w\273<&\322=\300\302\353\270j\343\266\275\201\225u\275?\010\207<\3736%=FM\350<\234\217\333\274\327\237H\274\276Q \2762\005$\274\213\247\240=4\233\346=\203\275d=;%\003=J\035N\274\213\332\255=\344\314\n=\342jr<vC\227=\366\253\025\275\317\025\306\275A\305\351=\227\245m\273t\237\246\275\224\255\344<\366-\354<\20450=\210\307.\275!\323L\276\265\364\301\273\357\3304\275\237\'\277<\302\tR\274\212\331\276=\031\333\213\274\2332\200=W\244p=\341(\"<\367Z\277=,\351[\275a\267\363=\301i_\275\366\010\234=\352v\271=\356z\375\274\302nD=j(?\275\204\231R=\221\345\201\274\373\342\025=\345\343\265\272y\232\317<Z\313\351\274\030\035\\=\207\224\357=Nl\314=O\245!==\245&=\377\356v\275\321:\027\272\203f\226=#\311\025\273g\246Z=r\227P<\273\033\347=\223\355\'\275LiB\275\206\332\316\275\201\243\340\274 \367\244=@\0053<\311=\251\274Rt\304\274\031\372\245<W\217\263=C\364\257\275l\273\013\275\344S\244<\033\370\310<U\336\260<\346\022-\275a )=\024j\224=\260d\357\274\256\304\237\273\227\2253\275\022\345j\275\250\244T\274\264\327U<\216\345\366=0\227\n\276rh\327\273\275\366Q\275K\340|\274c\n\353\274\370L\230=O\270\017=\376\320`\274\340f)=\006\361\357<\2524,<\346\300\222\275\222\036U\275\216\351e<\2518 \275\234\013\000>\262b\020\275=\354\210=\010@E>\362[\262\275Rc\030<\2538\351=\342!\225<\230\023\371<\352\025&\275\037\271\267\274\255\013E\273c}\347\274!\356\302=\177\352-=\350\243\203\272\224Z7\275%\337\371\275\240\344\370;\354\344\261<R\270\247;\275\234\177\275\211-\312=}\262\214\275\344\024\206\275\270(\037=\264\206\226<\221\037\264<\346$\346<\001\260\320<\222\332\356\275x\014\223<\202\352s<\274\362\315\275\335\271\226=\3565t=\2547\361=\343\177P=\273\220\037\273k0}=%\353\254<\234l\025=RRb\274-R\310\275\241j\215=\255<\222\275\376%\006=\006\266g=\177\037\212\275\324\324\205\275\004\333\244\275m{\234\275\337NZ=\332\246\256\275\"\246\371\275\325\201\333\274\375z\002=az0=\256Ts\275T7\336\275z\330w\274\350\213*<\224\370\322\275\\\364x\274\250X\202\273\227&\270=\362\344\300=\235\n\326<8\266\305<\265\313\324\275N_\007=\243\206\210=\013\260\033=\312\345\237\275\277\272\002\273\302\363\201\273\337/\212=\247\2738\275lG\203\275\324\342O\275\346\245\336\274\360\234\313\274\202\365<\275\320)9\275\316\345\346<\306\333\352=\016h\356\274.w\324;\346\013\030=\216\241j\274\235\366p\275\344\220\340\275\037$i=\376:\223\275\361\0030\275\220\354\026=\346\204\210=\362\021\003=\"\231b\274\361\340P\274\271\'\322\274\365kQ=\346n\237=\035\341\366\275Y\330\010\275\225e\255\275\326\007\313<i&\025=\337(\036=\351\327\337\274;\316\275\275u\031)\273H\246V=\261|^==\273\313\274Y\263\216=\003\020\215\273\273\345\007\275x_\361\275\025I\t<f\370\337\275s\246\233\275\033l\336\275\215\3727\274N\177\271=\257\306\026\275g\\\233\274\006(\225\274n\263\000>\303\017L\274\273!\201\275\341\020\006\275\245\303\004>\307O\337<\216lx\273\321a\016=#\315\202=\246}\372;\261pu=\347\371t<\273\2267=\025\356\315;\030\002\303;\274\341\234\275\027\033F\275\325:\250=%\035\321<\222\346\327\272\231c\014:\026\030\311\274*s\033=\333\313\331;#\223Y=4\357\035=\354\005\244\274\337\273\206=E\232\224;@\371H=8\230\300<;\\\316\275\206\237\247\274\024\256%>\221\365\370<\346+a\275\007\326\230=\344\216$\275\0254\210=?J<=7\376\001=\222\206\324<\374\374\375=|\373\207=#\234\214\2758\335\000=\370\366T\275=N\355;#\004\251<?U\241;\26742\275\253\021x=\216\265\014\275\275\211\265\275\310\3168\275\030\346x\275I\226\234=\225\367\023>\255NH<\310\217\n=\223\220\r\276\217h\340=\037\205\037=*\245\256\275C\373\334\274\305\031\222=Tf\200\274\206\007\234\274G\222i=\224\331v<S%\351\275\270 \020\272 \036\022\275\337\366\004\276i\325\000\276\017\331\021\275\343u\240\275\356\221\375\274 X(\274#1:\275\213:w=dD\027=d\013\305\273 \034\030\274R\004\221=\334\203\226\275A\271]\275-g\323\2758W\334\273\245j6=\013k\240\273\021\270\033>82c\275\246\031y\274\030\324\273\274\336\345\323;.\373\332\275\310\031\275\272%N\236;a\"\343=\217\273@=\374(\263<\256\304\237=1\272\000\2757X\r\275l\300}\274\014;\001=\250\251\027\275Xr\375;Q\314\327=\326\227\n=#$\335\274\"X7\274r\002p=\235D\236\275\312c\376\273\305\356\216<8=\022=\306\333p=\256n\017\276\216X\261<\335\260r<5\3028\275P\255\244=\355lu\274+\354\340=\342\246t=[\337\006\276\227i\367;\261]R\275\315\230\007>\260\217\247=\330\253\272\275k\023\270=\374lX<|\224\262<\032\261\202<\021;W\275l=S=d[\343\274\200\207\234\275t\362\262\274\204IQ=\032\330s\275,B\"=\216\347h=\265g\001\276_\326\372<\246\310\361\275\323_\345;5 9\275\223\206\037\276\322\004\227\274e8.=\241\310\263<\272\320\215;/\027\257\275%\236j\275\335\340\272;G\205\204\272\371\272\212<O\377\342=b\253\311=\250\361\336\2755\330\212\274\324\334k\275\211}\024\275V\212\247;=\251\223;\373r\311\275\200\356\201<\222)\002\274\314=\r\276\'\240<\274\233O\032;\022C\234\274R*\256=\356\205A\273\331Y_=\260\304\275\275\310\217\222\274\261W\344\275\331\250\211;\243\3241=\341\240\207\275\031l\304\275kL\n<&\367\261<8\363/=\033F\245=\3341\201\275g\351(\276\267\361e=\353\257\235\273\324W\224\274\0164\206=\276+\262\274\001&!\275\356\317\241=\007\300g<:\304\020\276\351hZ=\307\307e<)\260\321;\224w\345<\233\005J<\3167,\274\356\326\274\275[xf<*\341\272\275\212\352Z\274\361\004\010;1n_<*\334\203=|\271M\274\034 \020\275\032\230O=-\366\016;\271x\010<\241\324\244\275f\211\014\274B}\245\274\005\346\016<N\340\271\2752\224\210\275j\247\316<+[\001>\353\270\265=z\304\362=:8\315=m\247\273=\252{4=e\232\027\275\240\201\211=\t\3647=\331gH\274Ll\214\271N\021*=5\312+\275@\211\376\273Z\023\254\275\254|\210\275\375\264!=c\341n=\020\202\207\273\350|\333\275\\a\341\273\356\222\263\275$349c\317\177=\034\376\217\273L\242\313\275\306\334\030>\262WR=\226aN<\306\033u<8\204\226\273\257\234e\274\312\360\242=L\035e\275*\200\261\275)\206\331=\267\'\206=\024^\221<\310\202h\275xhA<\227&\256\2752\347`<\225;\3128\230g\352=K\036\321=\234\242,=g\371\321\273\306Z\"=\256@\314\273\016\354/=\021\177\273;\243\344\310\275I\3657=\221\334Z=\251a{\275\350\370\033\275*51\274\246\317\352<\223\222\221\273N\266\002\276\204\263\365=LG\224\274\257L\253\275\372#\217\274\247H\261\274\333H\250\275\214h\"\275\201b\373\274\005KV\274\025\213\277<\320d\303\275\234\207l\275\024\037\315\275\017}\202=)\020\r<o\371d=45\217<nJ\225;\261H\242<\206\204\352\275\343-\343=`V\006\275\t\204\256\275\"\265k=\311\227\024\275%S\214=\342\241\352=]\366n;l\360G:\r\261\250\275\353>\031\275w4\336<\314%1>\255\230\333<GZ\024=q\222h\2758\344`\275O\266\244=\262\032b\275v\204\304\275\263\300\246<F\255\204\275\313\304O=.+\214=r?b\275f\350\007=\347k\256\274W\030\023\275,\207*\274\251\331e=\2722\322\275\233\037\215<\244\263\004\275\312@\214\275\307\225p\275\343\014\264=uI\372=\321\226h=\263\255,\275Xv\033=\245\222P<\2431E=\305+\\\273&\017\251\274v\241\256\275\232\360t<\214F\255\275\200\356\025=O\000\350\274~\324\276=\355\352\240\275tK\340\274 \210p\275\303)\300\275\313m\313=\331\350<=\313&b=\3147\223\275`\265\355<\005\354\333\275\305\233\006=}\2108=\3746\204=0Z\203\274e\n\303=/\215\031\275\014h\206=\207\227\251=Dv\032\275\302\007T\275RR\224=\333\2560=\322\003\361\274b\254\233\274\0161\200\273;\367\266=\325j\333=<\314}\275o\372\257<\266\336\343\275\327$R=z\216N;\nh\254=9\333T\275Kw\217\275\234\301\364\274;\237\231\275\210\315\027\275\207\322\226\275>R\366\2748\255\246\275\226a\261\275\330\301\t\275\021\300\332=\341\003\255<\317-\313\275`\230]<\372!\204\272\234\002\n=\\\263\034\275+\250\277<\036\351\227<\203\243<\275\367\231)\276z\330\253=\210\362a\275\226\346C\275\000(\n=\224c\237\273yf\254=\370\234\262\275\345\334\220=@\250\203\275J\304\270\274\0212\261=s\2613\273\204\372\026\275CS\241=\323z\246=W\014\335=5\343\261=\033[\342\274M\024\276\272D\364\224\272c\033H\274u?\237<\024\324F\275\337\003\301<3\352\'\274\351\031C\2759\226\003\275\235\';\275]9]\275)\213`=X\2329=\261\320I\275\373\0028=>\214\210=g\253Z=K\252\224=\336\327\253=< {\27570M\275yy\346<\225\347\354<\321\302\013\276U\220\004>\3144\263\275R/6=\237\205\270=c-$\273\274k\014=\2370\215<\036\252E=\031i\217\275`|\256\274\260\221\374\274/\203\215\275\220\2242=\240E\340\274\325\333\277\275\0259\366<\014\213\250=T\335\213\274JQ\220\274\\k\275=\023\3165\275i\221Y\275\242\217\356=\273\236\300=/@\360<\272\005\363<@X\014=\346\r\242<\222\253\244\275~!\016\276{\353\261=\326l\036\275\371\217;=\365|\254=o\010r\275\204\375\224\275J\331\213=\3458/\275\362\334\277\273t[\301\274=\261\316\273\364X\255\274E\217N\275\237\256\210\275\346\006X\275\333r\366<\337\220\201\275b\362:\274\223.\345\274\257\211\271=\351\223\035\275}\300\347\275xv\376\272\255=U=\311Dz<\337\330\303\273\241\247\365=\rH7\275(\222\356\274\241\263]\274\234\312\007\276c\275\265=o\204\n\275\0064U=\021\206\215\275\200W\010=\013\'\344\274%\327 =/.#>\213\3175<\007\371#<\336Y\203\274\321,\022\276\236\260\312;\216\336\350\275\n{\375\275\357\341S\275~p\213=^\262\326=\222w\252<\305\312\256\274\321\330 \274\345\317\350\275\214\331P<0\333T;\236\037\215;<\2749\274\2644\247\274\013\325\234=\336q\211:\003<\244=\3342\240=\206\233\010;\2448\204\275c]a=\327=\006\276\357\354\256\275\032q\217=$\321v=\0057\306\273\315m|=,\367\256\274\260\240\241\275\017\206r7\354(\031<\335\275)<YF\354<\222O\266\272\0067\262<\357\213\377<\n\r\240\275\275}_\275\024\252\212\274n\333\374\274\245\033\257;X\004\310<%]\274\275`\244 :\353\254\020\275\022\032\244=r\"\310\274\002\355\020\275\366\326,\275\300\016\353=Q\024\306=\350\351\360=9\255\201\275u\027^\275\212\345\266\273_\272\346\275Q\263\345\274[\004\301\274\034\265\333\274\310J\225;~\334o<2c\350=\344\001\332\274\026-\204\274\221k\362\274\r\034\256=\036\n[\275\252\304\2378\200\230\202\274\303\371\277=\3639.=3\026\216=#d\330<!\271j\272mY\265\275\335\250\273=\276\t\311;D\331\'\274\225\323\360\275\374I\364\274`\330\247=\030O\241=\264\374\276\275\373J\\;\265=\016>\364\036\311\275IM+=v6\002=!\363\256<\330\032\001=\026\215\256;5\313\016\276\3050\001=\321>\312=y$\344<\367\304.\275\345>\033=\367\005\000=\260\306\365\275\353\254\032\275#\\=\275v\365b\275\357-\005=a)\202=\376EK\275\374J\210=\346kS\275\257\003\002\275(\367\223=\345r|=\201\375\274\275@\201\204=\262\025\316:\r,N=\377?\327=\260\205\212\275&\245\023\275@4\036<\0348p;\252o\362\275\\\331)=\253\327h=\270\223H=<uV\2754=\227\273\'8b\275K\252,\275)\341,=i<\233\274[\177\323\274\213\306\032=\003)\364\274L\262d\275\256\221R\275\322\026s=\013\001\206\275\000`\245\275F\326!\275\231\304\243<\315\204\212=\263\257\217\274u\2507\275\3058\210\275\272\322/<A\3400<%\235\205\275[\000\314=\354\025\360=LF\237\274T\2552\272\344\355\036=\217|3=\022\361\253\274\274\215\t\275\230\244\\\2750\231 ;$\267e=v\017\261\275f\"\344<\2314\355\274\227=\002\274\200\333\310\275b\0314\275\313\177\225\275R0\031<S\006\302<q\315\242\274h\367\333\275\365\313\205\275N\364\n>\"\342\330\275\035\205\303=\236\206K\275T8i\274t\034u\274Q\0207=%\313\374\275\346HD\275>\271\267;\315N\216\275-\245N\274C\2773=\304\216.=\0365[<N-(>\025#\025\275\364t\244<\3650\231<`\273P\275\31229\274\317\330\205=\205\304{\275\210/\334=\206\252\022\275\337\023\257=j\001\300<^\025\230=mf\303<`\013->\241\321\000\2745\332\231=\340\335\177=\373T\261\275 F\265\275\211\356\230\275sz\365<\315\355\"=\360s\002=+\213]\275\3151\241=\367\333\332\274\236\013>=Q\3524<e\0100\275k\351\034>\331\363\245=\270~\222\275\250\277\310\271\274I\025\275\013\344\270\273\242\227\325</\362\376\274\273\n\207\275Y`\305\274\241r3:\277\265\371<\363\321\330\274\2155]=\200\2260\275\373\207\223\274~\013\235\274\232+\330\274zJ\035\274\000N\263=Y{\034=|`b\275q\274\"\276nU\005\275:\317\203=\031\351\242;\260q\027>\342\315\016=\273m\010>\325\200\005\275\352\212\253\274\333\021\274\275\363\355\207=\371Vn\274\207\034h\274\304\255\201\274\305\342\304<^\255 \275\2572k=\003\000\241<\335?\255\275\0002\276\275\367\006\214=\033\200\302\2758WH=\367R\273\275\320\004Q\274\240\327L<\224\301d=\272@!=QJg\274\237)\330\274\263\242\320;!a\371;\330\333\303=\007\361\237\275\215q\303<Q.\254=f\352\205\275\367\277\325\275\177u\334<\021\340\205\275\347\030,\273\320\360\214=|\213\221\274\177\036\242\275J\030\n<\327\324\263\272\035:v<`b\303\274\007\007\237;\245\251\036\275\276\3470<u\222/=\343\022\264=J1>\275\267Z<=b6\272<\370\252X\275\371\3223=\301\221\t\275\355 \210;_M\000=_\244\241\274\347\254_;\316\250\002>\210\241c;\362\201\223\275\316\033\004=\254x\213\275C\031\203=}E\335;\177\316,:\331\016c=[M{=\342\332\270\273\007{\271\275|\324\230\275\355\214\023=\245\357\275\274~33=\351n$\276\314\226-=\337)\376<F5\017\275(\'\227\273\327<\240\275\0311%\276\035F\255\275\213\271:=o\211\303<\002\377\027\276?\276\212;?\221V=\014\004\303=\262\336\017\274\021[\234\275\226V\013\275\301\257\241=A+\353<*>l\275\233\235\355<\010\177 \275p\214(=\351]\006\275\257~\233\274A\031\317<\377Zs\275\316\345\366\275\242\256F\275\200\355\361\272\301\354\343\274\017|Z\274U\330]\275\207\326\263\271\304\323\226=\0051\335<V\330\360<\324\311\014=\211b\333\275\n\3321\275f.\005>)xi=\361|\346\275i\255\022\275\r\353P\275\312\311{=\274\231\355<&\007\306\275\343P_\274_7b\275\237\311\301<\247\367J\274\3155\344\275\243H \275\322%:\275\313\235\317\275\255N\263;\225\357\200\275\270\211\212=K\263P\274\013\376\300\274\365\267\301\274\226\310\274\275!\024\262<\321\241\027\275\2172\t=\375\001\254=\266\205:=\017\206\212=&&\254\274\333\216\003=K\267&<\367\335\007=\344\275m=H\347\200\274\006\272b\274\213\355\014<G\250\340=\362\242\321\274-\253\030\275\014p\212\274\006\356\002\276\246z\320=\253\354\220=\006\262\220<\231\303\327\274\2067,=Q\251&\275\357\324\213\275\334\355\265\275\327\312\213=\356m\337=\305\211\235=@\373\221<\253\327Y\273\241\205\346\273\234\007\241\274|\2079\275\337i\305\275\375Z\322<x\216\240\275\222.n\2758\227\210<]|\001\276\222\032\252<\311I\354<\000\230~=\360!H\275\017Ny=Cb0\273\177HD>q6\206\275\250\357\244<\260__\275\377%\224=j\016\271=\247\302\201=>\036\022\272KK(\274\204\355Z\274V\205\273=\320=\010\276R7v\275\020\3505=\210k`\2737\265\263\274\0228X\275\020\000\326<\022\020\236\274\254\236\254\275\374\327I\274\024\247\236\275E\310\220\275\3147o<\tC\333=\001G\034=\001\360\212\275\005\224\352=g\302\027\275\362\240\024\275\245\327\272<\007Vx\275v\267\207=\320\374/=\3225m=L\033\324=\250\023\253\274E\326>\275+\211\322=\357\351\312:O\356t\275\257\002\007\274I\036c\275\256NW=\227\001\260<[W\266\274-\024C=\314\337\226=q\255\224=J`\252<\233\n<=`\251\271\274+Q\273<\251\231\223\2752\246U\275\033\275\204\274\312\006$\274\213 L=\354kK=[\351\313\275\225V7>\024]\007\276\270\322\321\273\023tM\275\213\227\236;;E\033<\021D\232\275q\236\213\275\266\315\273\273\006\021\310;\336\206\264<\024\3371=]Im=f\216\243=(h\210\274\270\002\306=p\313\215\272\307k\243\275\036\345\022\275\276\2758\274\031\265\004=o\235\032=\206\343\226<\354\245l\2764\357\326;\221)\006<\006\237\242\273Q\226\007=\037!\220=\256\\\032<\3048\227=%A\271\274\366\301\252<?8\355=-\311#\274\345\3103\274\r\332\252<^\3211\273\355\214\252<\2054\250\275\010\013\256=\244Ij=T\336\r\275\337i\005\274\335\227\205\275*\302\235\272\250\236\n\274\246\235\317\275\235T\312<[\376\231\275{\200>\273xm\002>\200\375\217\275m\3344=\327\003\351\270N\306{<\037\376\366;?\264p<\206V\243<I\235\316=E\302\361=\247a\001\274\333?\206\274\220\221\331=\217\360\242=~%\361=\276\375\234=\375u\230\275\013\0064\275\037\236D=@\271\222\275 \275\225<\345}r<\320yz= \247\361=[Fl\275\320\306\367=\353\255:\275\322r\311<3b^\275\273]/\275\2628\005=L?\205\275\2362&=f\037\360\275\377\254\201\275.<\304<V\322(\2752\347\342\275\017n\247=eF\217==\373\270=\232\322\266=k\234\272\275V\237\216=\376Q{\275u\n\267=2G\331\274\240\3445\275\214\n\224=g\321\356\275\232x\227\275\025\035\023\275\366\261\001>\2555\245;Dz\246\275a%\206=\2107\232\275A*3\275\200WN\275\\\310\005>\345\2312;\255\033X\275\331\t\264\273\321P\256=\'\223\t\275et\327::\272(\275\243\315\004>\321\031\227\273\202\342x<d3:=#\334\"=\303\301\270\275\336\001\023=>\230\234<{\236-=\025\330\251\275\3301\035=\347\276\331\274V\300,\2752\262\307=f\305M<\373\364<=}u_\275\306\260\222\274\321\037\236<\204\324\233;)\212\332\275\r\242\334\273:\026\341\274\220\302n\273\341\n$<\2064\020\274\240!;=\221\324j\2756\030\032<\316;s=\250T\256\275\203\212\266\274\365\036\202<\216\001\221\275\\\215|\274\032\254\352<\345\026\211\275\n\373\372<o\253,\276Lr\313\273p\013\254=\341-\302\274\214\264\277\273\254V4\275w\350k=\320\340\237=x\253s\2758[-\2758\200K=\377\202\333\275f\303$=\341\037\032\275\024\206\177=\034]\r>\275\\\n\2759!\256;Z\231\222=\013\225\251\275{)\216\275\217J$=r\317\020\273\241\214\246\274\207z\212\274%\336\005\275\026\354\205\275\032\374\016=0\016\261=*\025\261=\366F\025\275_\312\212\275\274=\007\275\342\257\305\274\242\022 =\270\207u<\247\203:=\264\353\221\273.\223G=\031\302\372:r\234\204=D\274\211<\267\326Y\274\310\031\326\275\'0\260\275wg\251\275>\363b\273N\312\340=]\201\014\275\244C\307\275\302P\344\274\t\2311=3\341U=W\034\216\274\200\377\322=>\316\217\274\177s\345:\300\013\307\274\212R\033>3k\263\274v\013\272<\264\264\302<\230\345\312\275#\374\245\275G\371\034>K?\n\274$\220\271\275a\224a\275\307\3660\274Hq\225\275\300\354\266=\262{\204\275\\4p\274\302#\004;\034\303\260\273Lv?=>\344\341\2753w2\275\362\304\027\275\225\273\252\274\225\275\312\274(\257\036>r3\236\275\317\261\336=!zB\274H\270\317\274\343\307>\275\277\372\246=\236\225k=\315\363\013=X\203\267\275\375\372#\275m\3762<\315a\300\275\'\234\243=N\247b\275\025\n >\001-\264\274w\246\230=^\004\022\275\212T\200=\321\337\303\273\233t$=\246\305?\274\252i&<\236%\262\275Ud?\276\247\333\210=6\244\222;jWi=8\253\226=\227\206c=u\250\273\275D\334J=\t\363\330<\344v\031<\362\036r=\374\251\242<\014\371\031\274\220\025\201=[\323\360=\354^+\274\014\317\002=J\301\033;z\211S=\026\'\361<\303\234\327=\016VW\275\230#\253\275c_\226\274\224A\326\272\266\"\353;\3249\002\275r2\267=\211\311q=\322o\341<\264\334\345\275\001\375\341=a\017\335=\217\347)=\2104k\274\266O\322\274\371f\265<v`\226=\203w\373<r\r\223\275z\0371\275\3370\270=Fn\350=K]-\274\030\265\246\274\007Xl\275\354\2314\275\2233&\275z\206\010=b6%=\037O@\275\321Y\016<\254=\204=\261\001I\275\364\242\301<=<\274\273\"c\251=u(\300<0\300\256<\307\274\241\275\005\010\204=\223\301\2327\247+\031>\221\022\215=\224\262.\275$?\221\275b\316\326;\300c8=,\253\214\274\325\356y<\335\354\271\274K\340\275;\215\252\211\275\203\240\217<!\207l=\364\376\317\274S\246\306\274-\311\322=Z\025I=\027\0179=\032\225\332<\332\242\235=\235\231\331<\233;\327<\220g\013\2754>\365\274de\033\274\352\304\345\272Q3\334\274\001\336\030\275\227;\321\275\033\355\342\275\031u\312<!\245\'>\' h\275\222\214\277=}pj=9\321\314\273\027\317\213=<z\026<\365\001]\274/\315m\275\362\304\323\274\257\203Q=\003\236z<\356\026\256\275\033\\w\274u\377s\275E-\002>zc7>-\025\034=)\253S\275\326\357\205\274$\312\020\273<p7\274\217\311\372;aV2\275&\240\r>T\0218<~\220\025\275o*\211<\203\364\005<\311%\202\274\346\364)= \305\322=\352h\024\275\212\362R<\262\310\262\275\225oz\275\350Z\272\274I\251:\275\240v\236\275\371\025\030<L\260\006\275\325\345\316:\203\027\202\274\367\314\227\274\235\256\261<[D\345<\273\305\253\274\300C\245;\347c\271<\301\025\217=G\320k=\240\346Z=\341P\270\271\323}(\275\365\305\214\274]\227\035=\220\037i;uP\\\275_\027\224\275\304\237X\275\265P\313<[\251\204\274T56\275\033\224\303\274\237\244\333\275\177\310\314;\025=r<\027\273w=\361`\204< \340\207=Yq\252=-\234\267\275\233y\216\275\235n\375\275\354r\214;\014\252=\274\255\270\347\275\222t\016=\265\034\214\275x-3\275\035ek\275\242A\350<(\027\021\276sJ\215=\345\222\322\275\031\306\372<=(O\275\325\020\003>H\276w\275\226\356\361\274\352\306\306\275\305\267\254\275\374H\275\273\241^[=*\331h\275\233\305\224:\375P*\274K~U<Klm\2757\264A\275\217z\247\2753\240\300<\0254y\273\324ge=\tOA\275\327\345\227<H\332\273\274rC\352:\317\252\304<\241\215\'=Kl\274\273\322Z\037=\035\267\354\273E\314!\274\343\202\215=\201\334\372<\2172\225;\276\240~=\326\346\313=\212\211\020=\354\025x=$t\266\275\330\330\302\274\246V\241=lY\227=\364\026q=}1\330\275=$\333\274\035\376\266=\001\n\200\275\242\375\255<\037s\007=\237\227\245=\214N\360\274\345\3701=\001\345\322\274\\s\255=\010\352\034=\270\271\310\275\242\013\000\276mmO\275\n\364M=G\243\212=\262\033O=\201\277\2479\355g\207</h;=\374\024\223\275\372\310$;?A<\275\\/\312\274Yu\303\272\320\220\265<\023t\033\276\021,\350\2757\027\006<\333jO\275\277\030\243=f\231\304\275l\034&\275\306\215f\275\0104Y<\3400D=\362b\004\275\307\262\244\275y\362\010=4u\213\273\036\262\204\273\017\214\223\275r\221\225\275\3548B\275\237\230d\275;\021Z\275\227\013\326\274\203Fw\273\3072\005\275\326\364\327;g\317[=f\372\202\274\"PK\275\344\002\362=|\2556=\035\313q=g\002\226=\243\373\014=\257\343}=\343n\033\275\374\271\017=J\217O\275\212XM\275\205l\250\275\260K4\275\206\r\351<QQU=Z\275\331;_\000\022=$P\311=\232^{\275%=\247\275 %(=\337\247\234\275\001j\033=\006Q?=\\W\253\275H\0205\275\32405\275\242\264\020=z\252I\275\301P\261=~8\034=\375,c=\375\333\212=\332\002v=\356\3666\275\225\207\356\274\213\322k;\034\036P=\2518\023>A\224\">\332\001\335=\326\334F=&^\325;\220\253\236\274\316\026\271\274\241\371u=H\026\004<oo\244<\206\t^\275\216\025\201\275Q\260w=>\235\005>\r\221I\276\217\342L\273F\213\243\273\346\225P\275B\355\006\27681\010<\266vb=\223\221h=X0C\274\372q\355\272\330\034\202\274%\343y=~\221a= \240\243\275CK\333=x\305\213=\310\213\260=\010\031\031\275Jk\311\274\352\022\n\275\333\322\320\274\331\341S\275\216D\274\275)\010\247\274\357\037\327<\205\303\233\275\354\355\265<U\203G=$\013\215\275<t\337=j\321\010>%J~\274\321\0227\274u\271(=\023\300\003<2\210\324<\256P\217\275\375\225\\<Q\360*<\0340\224=\307\303\366=\237\277<<\350\303J\275Mm\000\276\331\267\205\274?\262\252=\314\035!\2734\302\266=\272\006\211\275\266\277\310\275^\361\314\274\311Q\350\275\002\n;\275\355\247\222=\233\222\235\275\207\002\013;N\274\225\274s\262\361=S\231j\275\211_J\275\203cX=N\010O\275\243\332\314\273\362.\201<\306e\211\273\022\376\325<\262\353o\275\027r;>DB\273\275\\\005b=N\267\217=\036\254\230=\223\265\n\274\034L<\275)\307\277<\267\371\215\275\351\030*\275\216\220\000\276\214\340Z=\023\226\201=\344v\276<\003\037\273:_Ch\275\013\2617;\277\355\252=\242f6\275\277\024\352\275t;n\274\001\235\016<*Mb=\251\376\003=\2508F\275\016:{<\031\360\346<\365d\274\275z\215\350\275$\270\020\275\320\370\240\275\333F\374\274\213\300\020=\260b\270\275G\375E\275\027\025Z\275\236\376\214\274\246e\003<\3059!\275\023\204\232=u\255\302\275\254#_\275\335W\330=\217\002E=e\253\206<\2419\273=\203|\257\272\214n\206=\344/\304\274\357\271W<rK\n\275\317\345\203\275\033\257\014<\203\031A<\031\307\270=mRm\275\332UY\275k\217\313<,\276\007=X\262\334\275\224\331\337\274\270\262W={\350\225=\302\370\367=\312B\203<\215Gq;t;\010>\303\312\206\275\226\226\363<\375(\262<\227\215 <4\267\213\274\246\242\364\274 \332\231=d\202\314=4\3136<\230!\177=f\352P\275o\347\237\275\247\315\320=:q\025>\323Aq<\005\250V=\204O\314\275\026+`\274\355M\302=\343\364\371\274\341\3222=\257\002\000<V\320Q\273\306\010\211<\226|\371\274\333\2565\275\376\251\367\273\025\243\277<\002\360N\273\214\254\036=\350\022\032\275\243\302-\275\305;V\276<\222\376\274J\r\266\274\005./\275\224o0<\270\221Y\275\223\312\027;\350\013\t\275O\230\\<{\014\001\276\353\311?=\374@>\275\307\222>=\203\273\326\275\277\'\235=}\246\375=\262G\250\275\336\357\240\275\024`{=\251\021\202\274L\320X<@\252^=G\377\330\2745\235\271<\311\217\332=k:\251<\216hK\275B\007\242\275\242u\222=\317\377\033><\347\277=/\244\362;\262\331\300\275yg\027\274?\353N:\330\226\371\274\240\342-\275\016T\212:\\\314\010\272\217C\">#\312\243\275B\021w\274s)B\275\022\304\271\272\303w\262\273\246K\n<\262\250)>\256\264\357<\210\242\206< dS\2756r\010<\245\244\321\274\266\035\302<\327\265\343\275t\1778;5\212\313<<\347\211=\324Z\315=B\315\2449\022\205\373<\335\250*>\212\342\207<\341nW\274\213T\214\275\301I\020\275Hs\221=8\335\302=`\366\332=\227|d=G\333\214<o 8\273\270\343\226=\331Y\351<\204\010a\275\'Sk=xo7=H\355\327:\205\231\371\274\247k\214=\377\226\331\274\261\247\"\275\022\356\320;^\214\034\275\232\007\023=R\353\241\275\306\344\002\274\370\257\252\275\001\022*<+9\031\274\316=s=\343nC=\271\364k<B[\350\2755\374\331<jJ\316=\230y$=\014\254\014=.\036\220\275\273\002\346\275\357\263\024\271p0\204=n\376X<\244\202\177=\367\343\235\275\252\314(=(\356\221\274\221\305\023\274X\225\342;\320|J=\314f\254\274\'\242\234\275\323\253a\274\305\317\231\275K\263\256\275\240\245\004>\027\032\214=\022B\226\275=\331\347\274\261s\266\274\244#\267\275\253\215\341<\234\237\367=zZu=PL\001=\010\352\321;\264\317\252\275g\344\217<\000R\340\274:\253u\275=\211!\275/D;<\2401\013=[{\177;\031fX=\345>\330\274\023y\322;s\"\362\27584T=2,z<o\202\313\275\303F\t\275\332k\271<\351\371\225=\r\263\356\274\021\330E\275VI\250\275\023\264\351\274\336\236\351<;\003\010=\265\231Q\273\311\373\232\274us.=@\273\327\275q\224\201=\275\255\221\274\230\232:\275\027\323\004=a\222b\275\035$\246=~|M=\211\354\016=\327\375\251=h\\\226=G\260\334<\230dU=y\265\346\275Y6P\274y\370\020\275\270*\244<&\230%\275h\377\013\276_\306\207\275.\nc=b;\261\275t\266P<1\217\357\273V-\301\275\213\277\276<\310\025\020=)\2053<`b\205=~\311d\274\221\373P\2748\345\314<\336\177\223\274\013\303N\275};\n\275\256\006\206<\242)\361\274yM\004\276\212\202+<\276\342y\275\260\370\240\274\220\214\351;\266\006-\274\244;\253=\323\324\014\274\202\324\n>\302z{\275\344F\215=\'\032u\275\205)\034=\364\010@\274^E\227=\245\007T\274\331\360<:\227IE>\367\010(=:\327*\273\333\r7=\000\326\224;;\341\374\275\332.F\273R\364W\274Sz\263\275\252\213)\275ML\256\273\351\363J\275\337M\204=3\246\003\275\007\232\271=7\354\250=\325\315\255\275\337B\003\275i\025\212<r=\032=\301\001\260=\034\211\366<\254\344\"\274\033\365>\276\014./\275\nq\022\274\363\"\254\275\013\032!<b%\206\275\322\341\236\274\274\251\324<\251}\217=\010+\214=t\211\201\272l\322\300\275\306\226c=\323\261\240\275b\037<\275k\344\243=\333-\261\274O\003\001>\'8\002\275q\010\225\275\343\213\305<D\214\000\275\031\036\231=\007\206\240\275a\212\353<\232\261\315\275\0279\202\275\304+_<S\375\207\275\014~\036=\006\343\310<8\225\340\274\230b\n<8\365\232\275\244\231\360\275\250hA<\303\364}\275\301\273v=\217\356\033\275\277\276a<9d\214\275*\032R\273a\317\354\2745\0347\274\3737R\275N\032\244\275M\240\246=\273/\t\275\020\375\215=/?5\275\260\345\266\275BED\275\322\027\262\275\334\300\233\275\262@f\274\346\243\244\274\204\267\221=\340\244\024=/\227\342\275\377^#\275V\311\261;o\332\266<\361\362\211\275>\303\372;2d\211\274\303\203\200=X\315E\275\326\350\233=\263\252\352<a\336\37092f\000\275\035\257\257=\205D\304\274\022\000\031\275\027\335\373=\350\250\276\275w<{=\006\017\221=\240\242i;4+4\275\232\203\267=\256\025\213\274\260\256\377=\307x\257=8\203\'\275\376E\275\274\235\037\360\275\216\200Y\275\'\262\003\275w\276\001;\tt\231\275\316\305\023=\\\201_\272M\326\214\275G\211l\274\277$\261\272\233\2145=\244\212(=\242hb\275\036YD\274q\245\026\275\237\376\214\275\250{\367\274\372\233B\275\367~\303<\327o\352\274|\233\315<\251%,\275Nr\255=\266\372\036\274\234;\330\275\325{j<\241\004\000=/ud<\312\033a\274\310c\301\275\346\305\356<`\315\035=\300\203+\273\330\014{\275\320m\315<\243\033\237=\331\216C\275\034D\263\275\022z;\274\353\377\241=3\340\031\274\360\347\321=)\321\221\273\210\356\336\274Q3\326=\303\324\200=\344U\024\274\034\242\235=\031~\321\275\300\213\365\275\237\035\271\274\236\224\244\274m>q=jYM=\2340B;\236\256\356=\\5\270<\202_\362;xl\277\273\246\027\261<\366\222Z\275\t\004\322<U/\030=\372\223\336\273\325\271\341<\320\257\023\275\031\026r\275]9\027\275\257\310\225\274\304|T=[S\225<\274\311\037\275\201\213\326\275:\034\207:\026\207,=\230\367o\274\020\201F=\356M\005=\034*\325\273\267\004\027\275\204\364j\2756\275d<\367\343\346\275\370]\373\275)\330\226\273\313O\201\275$\023\263=\222,\310<\371&\357\274\021\3645\275Ii\t>(\317\244=\360,,\276c\031&\276\031O|\275\203=\237=\242\257R<3\371\n=_\357V=\005\200M\275]\020\013=H?%\275\225\357\316<\353\330\227\275\2337<=PG\035=\346/a\275 lU<\017\n=\275\244\243c=Q\177Z\275\244F\245<\375p\265=\220\234\267\275#\373\302=*\231\211\274\211E\201;\2249\224\275\210\243\206=0t\275=\212\232/\275\343}\265\274\307\t\311\274\275s\336;\344[\203\275#%\253\274\034\205\212\275\254@]\275\223\257\271=\026d\331;\326\324\321=C;\026>YX\246<\211\252\320=,W\263\275Y\251\344\274\240W\227=C\333\311\274*T\220\274\373\262\004>\255\016\347\275B\033\025\275nH\373=\255\360J\275\377fQ\274t\336\017\275}&\206=l\002\212\2743\\\025\275\"\302\004\276\326\272\334;\231j\004={\2762=\307\031r={Z\231=\344\275\243<yc\007\276B\004\225=9\243 \275Z\205V=\342\351\262\274Pj\032\274]~T=\200\352\001\276\275Vq<H\346\241\274\365\254Q\276\233\350\005\276\354y\262<{\336\211=\267\014\374=\223\372\365<\024^\245\275v\256\006=\024\342\327<:\342$<\335\'b\274<\251\326=K1\027\275%\215\025\275\027\237\002=^\231\312=\346\010i<3g\212=`>\315\275\261\355\334;\226\222\216\275\361\276\013=g.\217\275Z\211\372=\367>\270;\367\013\243=\266\227\215=\017\345\267\275\020e\201<$\226\367<D\201.\275\277\010\272<n\022\317\273\370\247D\275)\234\272=\'\005\346\275b\274\030=\022D@\275l\235\273=m~\201<\357f\223\273\246\244\001\275OF\313=t\363t\274\312V^=\262\r\267\274Bd\227<w\022J\273T2\326=F\n\031\275\264\337G=\242\306h=\254\020\202=\324\314\246<\346\312Y\275d\352\021\275\343\216\267\275\277\003\207=\360\347Y\272\240^\002\275\000C\230\274\'\177,=\336\"\302\275\3061\201\273\017\003\376=i:&\274\332\222U\276[9\264=\337B\271\275\344l\024\274zr\233\275\323\322\322\272\252\311\301<\0023\001>\316P\246\275\361\264\240\274\200\231\021\275\013|\025=\346\234\276\275!h,=\204\204\211\275\n\254\"\274\233\002\001\274\242Rt\274\205$\343=\321\201w<\004\327\233\274\326O\345\273\347\331\220=\351$\237\275\323u\212\274\2377c\2748p\021=].\020\275\002/\017=i6\352\275\256\221K=yI\017\275B\233\230=\361u\354\274\277_\034\275\300\023\366<\343\024\267=\000`\234:\326\025\246;\3246\251\275\331\307\034\275\220\027\337\274<p\243\275\221\340B\275\345\223\226\274\306\327#=\303V\r<$WW\275\260=\276;\375\032#=\327\2579\275\271\351\022=b\312\023<\264j\000\274\276B:\275\271!!=\035-\002\275\223\340\237\274\3466\">\227\212@=j\213m\273\253k}\274\222D+=\256\3525\275\344\374\324\274\207C\346\275\351,\027>\345V\226=\360\037G\275\370$\365\274I\265\002=\334\360\277<\177\252-\275h\030\020=\213\242\370\273\014\341z\274\004\353\024\276\177P\265\275o\377\264\275\253%\006\275m\023\252;\310\207\226:>U\353\275\256\371Q\275\263\0010\275Md~<\346\r\354<\255\214\270\274\367\347>=\001\367\331\273Y\354\"\275\353RT\275\\\r\300\275\255\004\202\275*\217\032<\376\\\177;\244\274\001\275<\217\372\274\373\315\033\275d\207\032\274\010@\274\274\232B\204\275^t/=\275\257<=\347\361\203=\177f\271=\023v_\275\330\013\366<\235\320\324\274+\337\377\275\342\020\214\274vk\315<\363\340\234=\270p#\274<\035\315<\035s\014\274\356d\220=v\204\036\276\330f\330\274\241\357R\274H0\276;\372\203\\=\017\177u=\203\355\366<\2653\302\274Kg\347=ceZ=0\226\032\276\345\264{<\203d\326\273\257\037A=\2262\376<\221\340\374\274\225i\251\275\202r\214=\265\245\242\275\023\253\250=\367\225%>\001\371@=F\334\301<\035\'!>\373[\226;\304e2\275s\320q=\266l\341;\370B\325\2749\314\376\275\345\376\242\273\2760=\273\350)l=\nj\310\274\000\020\020=\264`j=\004]K=\360\315}\274?\274\217=JX\010\275\250\240\234<\375\030\n=\316\367\253<sKg=\344\261\"=\207\237\305\275\217\255f\275\202\267\213<\001\232\317\275\355\023\271<\301\365\232=\345Aw=\247\2009\275\207\253}<D\240\233\274\034)\'\275\325{\026=\256\017\363\274\333=\276\274DvZ=h\313\n\275\030\3070\275\025\251>\275r\267\006\276}\036\301<$\036\336<\231E\234\275\027[\202=\266\'\242\275\325BR=\365\214\255=\231G\004\274EHw=\236I{\275\221\371/=\007b\270\274M\177\035>\320\376]\273#)\025\275\336\214q=\350\354\030\275\243 \205\275\327[i=\3719\017=G\363\204\275\370\027}\2738\222\030=\002\315\215;-\220\000\275\354\344q=\013\242S\275\377\035\257\274\301a!>zp\246\273$\\\304=\2001J<6q\037=\033\327\201\275\370U[=\375|5\275\211;\243\274J\001\310<\316a\377\274\216\270\017\276z\256$=\313j\203=e\262\010=\207\200Y\275\327\376\215\275\336. =\307R\307\2744$\t=\252\227\003>S0\3426X\255\376=a\301\310<\256\370E<\212\217\255\275^\002\213\275~\317!=\210\350o\275\016G\207=\036\362\205<k\333\322<k\335\226=k.\334<\275\257\177\275\007\365\212=\343\350\010\275\340H|\273\316\302\301\273\246\265\315\273\305\265\274<\317?\336<\232\223F\275\335H\023>\022gB\275\214e><\214\016\361\274J\252>\274\362\322t=\207h\255\275\323g\321\275\271\036i\275T\373\021\275;/[>d\237\213=\305\330\310;\234\\\201<\256P\213=aTJ\274\355Kg>\210\"\347<\352\357\177\275\233\370\304\275k\336\362\274\362\327\232\273\265\003\006\276\021\0212\275>H\200<wJ\371\274o\211O=\245\000\004=~=\217;\275\312\312<\347$\241\274\321v^=\370\363\n>\324\236\206=U\t8\2756\026X\274\3405\260\274\275c\350=i\014\304<\0276<<\336\362\271\273?\024\277<\273\231#\275\007\343\223\275`\022%\275\207*\306\274\026\036\214\2743\243r<)$\350=q\327\231;pl\'\275`\376\301\275\357\247\246\271\013d\037\275\246\031u\275\363\347]=\223\221\217=a<\224\275?\252!>\245\345\274\274\206\010\201=q\006)<\237\024\007\275\275B\274=\321\016\266\275\364\n\350<\345\245;\274\034\304Y\275,\270\031=\276\306\263\274m4\037=khP\275\367\nC=)(\211\274\375^\300\275\325\3629\273\026\376\250\275\235Ic\274:\261\316=\372\266\237<\322\223\266\274\272o\035\275\313\'\033=X\302\222\275\271\2333\275f\r\025\274\256\340\233=\274q\326=l\037?\275\027\265\254\274\262nV=\240j\033=~\245\347\274\267\321g\274\232 M<&\306\256=\316\365\300<l_\033\273\340\352\270=\037Y\242=\373a\244<\346\025\321<TCD\273/@\252\275\340\306V<\230G\252\274\035\3513\274\024M\035\275\370\214\353;T\260\000>\307JP=t\344\t=z\372}=8N\275\275\321\206\"=\313\333\234\275\373\321n=\000\272\336\274\316\302\232=\203\352X\2756Y\036=\263D\356\274 \n\211=\2325\304\2751u\007<\016\303\026\275\364O\210\275O\300\021\276\002\330\t\276\025\211a\275N\370\240\274(\313{=\005\250H\275\320$L\275\367{\223=\273j\204<(o\307\275\363\224:\274M<\241\275\215/\271\273\270N1\274G\206\334\275dz\321<\363]\231=\213d0<}I\027\275\373;\275\274V\3511\275`uk<?F)<\345Y\266\274xL\256=\365\215\235\274\026\214\004=g\337t=\370\224\330\2753\311\023\274 \276\345\274y)\317\275f\222\246=\270V\':H\272\264\275F\3613=\315\336\274<\236Y\217=\326F\r=\313\256\027\276\'\026\032=.Xs=\252\233\036\273\356P0\274\321\342S\275!\343\255\275M\347\203\275\r\215\242\274p\335\007=\376\031\245\274\360\207\002=\\\270\305\275\324\336\324\274]&q\275Awf\275E9\335\275\234 /=+\371\245\274\356 \003\276\310\311\002<\037\362I<n\025 \275#h\225\275a\021\241;\214sN;\252k\316\2739\245h\275\326\265\264\275\004\227*=\235\377\256=+(`=\250k\340;\214Po=)\331\206\275\310\376\205\274\270S\274\275\3304\237\275\240\215\324\275\264\316q=\2606\022\274\233@k=Z\336\210=\014\353\223<\031\245)\276*t\'<\342\0006=\276\316\304;In\036\274\372\357]\275,\236l\275\016\372u=z\301\205=%7\304\275\334\365\';F\325\250\272,\344\231\275be\243\271\364\372\273\275X[\270\274\321\241\247=m\264\"\275U\025W=<0\361<M\216\340<\360R\027\274a\227\034=\213Y\201\275q#\313\275\226\276\030=u(B:\032\232\341\273\n \311\272\375ok<\373Z\340\275\300\360\314=\237\323\327;\271\377\221=\375/\251\274\200\344\n;\177\366\223<\305\n\354;\357G4<\374\375\245=/]_\275\343r\261<\341l\007\276*b\331\275\000\252\252\273\250%\235\274\354\016\231<mBk\275<\375\374=2c\223=-\214\354;\255\230\257\274@\221\262\274\326\266Z<\3257\350=\035nA\275\017\246\273=R\3608=M-+<}d<<\221\227)>\224\214\002\275\252\277\326;!!\317=\351\353\214=W\330\t<QH\352\274P\007\351;\331\375k=,\017C\275\312s\266\275sv\323\274\004;(>[Cy=I\r#\273\034-\225\275\342\340\316=\246\206\221<\265\345\003<\266\013$=P5\234<\333\207\225<B[{\275\036W\213\275\337j!=\307\267V\275\016\0140\275\341\010S\2746f\211<\017\343}=\363&\005\275\245\312R\275l\251\240\275\334\315N\275i\307\002\275_\376\245\274\366\262\225\275\220\301\270\273\216\363/\274\326V(=\210\264\036\275@M5\276\243\224\202\275\307\357;<)*\322<\365\223\302=2\230Z\275\244\344}=o0\231\275\342\221\356\273x!\004=X\013\000\2755\017\014\276r\2578=\n8\262;\360T*\275\312y\376<g\201]=\031\004\270=\357 \300=y\351\020\276\3505\311<\317\\E=U\271\013\275\232A\311\275aOM\274\216\177\002;\232_\201\275W\341\261=\236\003\221<\230\250\371\275\331\323\260=T\202\r;\010r\024=\301Y\273;\205\212\242=g,\262\274\320\234\266<*4\327\273\201\337D=\322_|\275\253\036\274<\225\263\332\273\345\274\215<\246\363\242\274[\315\263<\366-\023=\235\315\211<\314]>=\356q\316<\024\010\003\2753\357#<\334\230\222\274M\002\244\275@\371\342;\320`\177=\254\222\237=]\3440\275\327FH\2754\030\255=C\237\320\273\232\200\223\275\306\233;;\252\271o\275\213p\223\274\374)\303\275\266\307\252\275+\032J\275K\347\240\275\350\264<=\315R\300\275\205\'\370<\223&\316=\351\200\335\27585\331<]\237<\275\255zf<\004F<=\337\363\020\275\216\261\027<\250\264?=\374\213\374\275`\200\365=\347\337\236\275JF\023\275\030\253\n\273v+\323\275D\372n\275\371\205\260<\321\',=J\244W\275\356\030\317=\003\236\030>\t/S\275\344\330\023\275\203Z\002\275\323\337\276\275\207\"]\273\376\311\364\275\246} \274[=\332\275\322\260z\275\303A\036=\"\205\320=w\233\257<g\037\262<\016\353\023=\n\266e\275\300v\250=\r\363\001\275.\254\352=\336\037\216=\354U\354=ae%:nhW\275D\201\253=\037\357+<:\334M=\333xo<$\356\002\275iM\336\2756\332\233=\277I\324:\006\301\325\274\303&\200=\310I\241=\356e\260=\265T==21I\275\370V@\275#\236*\275}\305d\274r\222\324=\354\320\252\275M]\356\274\303\346\331=\004\'\026\276\265*\237=\326\363\004\275\303\270\310\274\201\252\373;\026LN=\241\000\373\273D\036\251=\'\210\272\274\316n\345=V\203\200\274\345\351\005<5^\267\275\005\316\270\275\213\251\236\275L\333\327\274m\312\215=]\352:\275^k\250\275\235o\366\274\362\247\236\273\025\000\023\275,$\273\273\245\244\367==\273o=\217\022}\275\265\030\214\275Von\274<\276\226\275\020\277\245\274l\232J=\275\035\274\274\3768\207=\366\273T=N\264\020=\302c\245=\332\024J=e\013[\275\247\"\365;\321L\203=-?C\274\331\201\177\275\310\217\371=\327\264\000\276\334j&=}R\261=\355I\316\270\305e\267\275A\266\t:`\\G\275R\024\201;;\234\024\276W\342t=\343\006o\275\246\252\344<\317\307\006=\215)G>\026\365\252\273\264S\322=\002u\200=\031\301\212=\014~\t\275\376lY>\237\367X=b\005\317\275\rgQ\275\0164\316\275\230\326\010\276\206\215\332\274\342\315c=\302\032\260=\345X\003\275\357\035\317\2757j\007\275\177\214\215=\323\3372\274\221\037\034=\017)4\275\263\205\376\273\2519\250\273\322\374\232<5\255\177\275\370\333\001<\335O#:P\313$\273\206\335\226=~@\001\274\320\216#=:\223Q<\262|\014>*\370\360\273u\031_\274\254\253\374=s\250|=\03421=?]\300\275\225\214G<\201S\021\275\340\"\214=$EF\274\271=\270\273\235i\301<@\237\250=V\002\243\275\324\007\036\275/\355\005\264v\321];\212\263K=%@\204\274\244\351^\273\213\256`=\215\264B\275m\227!=~\343&\275\332\035E\275\227\307\206\275\315\247\207\275\215\374,<\020\230)\275[\035*\275\236^}=\266\224\026<k\211#<\214\316_\275l\221\343\273M\222\204=b\273\312\274\374>u=\216\364\330=5\202\214\275\203\277\334\275\n<\321\274\221\245/\275\302\304\005\275&7\233\274\312\200\314\270h\352Q\275y?\006>\017x\245\274\025]\362\273\335s[\275\373i\322\273\340\307\350:\005nR\275j\352y:\030\266:\274\t\275=<\255m}=r\210\355=Y\3241<\r5\317\274\207\210\260\274\2037\007\2751]\211\274\373b\215=;\207\010<\346\206\251=\333\246\211\274R\231_=-\2604<\311\026.<`u\301\274%\017?\274`\362\210=\215aA\275\013\333\364=K\342_\275a\017\200;\031\306\313\275\002\221s=\365\236\247=\342\264^\275\337\017\241\275\0028\032;\371\371\224<aT\204\275\273P\340<\255<\014>s\347Z\275!\256\314<\364\021\310;o+\247\275\201\t9=?\007\255\274\037\000\200\274\261b\215\273\373\0024=St\245\275B~;\275E\'\t\276\347\016\321=D\377\224=0\201\334<\224m#<&\207>=x\331\276=\306\252\353<\264_\335<\332\243\257\275\266\330\223\275\307J=\274\027\253\314=\021D\217=\327T\224\275\377v\205\274\253\217\277;\210\263:=\374\001V\275\003\270\200\275CJ\311<G\n\373\274\007W\224\275\201\374r\274\224\177~=n\276=<\360\373A\271c2\257=y\263\205\275\344\024y\275\372\r\302\275wv\213\275k\255\215\274\250\365\216=a\331\217<P\324:=?\301<\275]\212\215\274\n\034\365<\357\247\305\275\r\034g=\262#\030\275\211\232\244\274\225\271\261\275k\371\354:$x\032<\247\267\265\274\375\246\331\275#\316M\275]\224\377=\354y\000<\030\263\271<\216\344\323\275]n\332\275\340$\336\275V\212\246\275C\272R\274Eu\254:sh\007=Re4=\311\325P\275\346\215\350<W\277\247\275S\032\310\275\344I8=\030?\213<\211\022p\274\305\353\306\275\367#A\275\261\2305=WQ\234=\331\013\323;]\206\013\275\'\204\327;\032\341|=\264\004\202=u\342L\274\255k\357\273\024\033\027>\241\002\256<)\022E\275\326\211\361</y\342\273\313\273\022\271\372Tz\275\347M\222=3\314\364:K\306\234=\205\345\013\275S\244W>\030\277*=\035RR\273|\263\231\275\002\341\202\275#\274\357<\235>\010\276d\202\244<e\241\021=Ei\004\276\373\222L\275\237\227\257\275|\025\004\275\335\000;=\226\222\237\273\231Y\251\274F\327f=\254\354H=\302\024\213=@\206\352<J\340Q\274\261\030\301<%\221\345<\027a\025>\223\332\256=\0315\314=>\252\025=\226p\275=7\3362<~\023\317\273 \331?\276\256\020\203\275\243\266\t\276\357\255Y<\2372\201<t\204\032\274\326\372i\274\222\275\242<\037\207\305\273\330\320\202=\344\254h\275\260\306\244\274\332\235\005=\036}\035\275Q\212\306\274\263h\234\275ln\226\274\302C/:\201\003\337;\374e\215=k\007\331<`\202W\275\300\307W\275K\034\230\274\375\210\226\2753\245]\275\272\375\227\275P\305\375\274?\251\t\275]\001w\275d1\211<\027L\202\275j\353\004\276`\237\216;~\333\032;\024\304[=v\203\260= \014b\275\3444u=?\336\334\274\017L\362\275\342\234\t<\0304\324\275 _\263\274\237\037\001=1\034+=\207*t=\360L\237=h\355\300\275j%\002\275\202\2622\275\316\260I=\2246\242=\226\\\025\275*\210[\275\226\325==R\266\330<\250\030\020\273B\223}\275\n\310\022=\333\233\243\274K\320\024=\262\001\360\274V@9\275\366\213\001>\r%w<\304\331&=X\"\177\275YC\325\275\252fP<Y\247\027<\244d\351\2754Q\263\274[\334\354<\2102\310\274*M\351\274\202;\271<\324\252\300\274\253\215g\275g\371&\273\323\362\352<\017\207J\274\215\202\3508n\305H=\271\324\\<1\214\207=\224le\274\340\023\340=i\367\005\275\341\257A\275\332\036\030\275r\301\004=\347\314\260\274\322d\316\275\016\237{<\025\250\303\275Q\276\030\275O\007\261\275\303\022\204\273\275.!\275\342\t\006<\243@n<S=F\275\213*\225=\357Z<<~\355r<{X\026\275 \310\220\275\366n\n=h\233\213=\307\346\226\275W\363G\274\304n0\276%\341\005=\024\314\251\275\037\270q\275-_\232=\342\241\027=v\254\023\274\2473\376=\364\252\003\275\271fI=\334\304\262\275s7;\274]\207\222\275J&\026=`\240\013\275\242C\205=@X5=\277\203\245\274(\305\357;\276\363\344<`\204.=qA\003\276\'\002\247<=K\320\2749\036\314\275\206=/;\371\312\336=d\232\340\275\221\205/=\250\352p=\375\350\204\274Cz\017\2756\001\002\276G\004\017=\362j\022>\375\360\213\274`p\005=sjf<A\030\265=\r\237\307\274\240l@\2760#\256\275\341\234\213< \361\030>$\330\027\275\254w\237\275R\200\227\275\' \034=#\262\325<\332Z\221\275t\277\377\274\247\276\255=`W\232;@p\340<\376\263r\275.H\225\274\342\333%\275\215Dc=\262/J\275:\213\232=\372?E\275o\361\016\2744%@9\330\037\302\275\263:+=P\326S=\312\013\037\275\020\354\346=\326\r\304\272Z\220\n\275f\250\224\273m\004\341;\002\025\225<\354E\326<\250AS=\202Q\257\275g \335<\323\235\256\275D\371\264=m;\220\275\310\2135=\342Q\035\275&\315\034\275O\327\016\275\217\357\304=\202\267\n=\303\250[<\253I\247\275J\322\254\275\354\240\220\2754+\201\275$\322\271\275\231\247\t\2740\233m\275\264\361\202=>\303\t\275\355\365\370\274\033\207\030\2750\017)=\227\311\332\274\367g/<\261yN\27593&=+Ib\275$\"\225=\201\323\207=\341(\027=\367\341\003={\260\234\275#<.<\r\254D\275K\200.=@7\217=\265\025\252=\366\322\237\274\013_\351\273\025?a\272\252\354$>Yh\016=\257\316\035\275\322\266\034\274\2408\246\274n\354\372\273\317r\341\275\362\021\304<\314\346-\276\332W\210=?4\221<@\355P=).\226=\226\302\230\275\255M(\275a\020\207\274%\316s\275\361\250\020=\3124\214\275V\302\260=\014\360\017\275\210J\271\274\326^\355\275\215\311\217<\241rM=\nL\233</\t\356\274\247\321K<CA\240=\272F:\274\343Z5=\322\'\377<\232>\242<\007}\216<{\260\257=\263\206\324\274MV\010<6\211\205\275\204\253\312=\264\271:<\354l\206\274\032\217\237\275\245\000\276=u\004H=\316\030:\275\300\231K=1\'\262;\216x\355<N\377\362\274\254-\032\275\002>\220\275gA\344<s$\300\2745\246A\275\250\356r\275\263\203&=.k\'=\006\021\036\274\023\330\316=\022\330\205\275\364\251N\274\356P\231\275+\361i=\217qh\275\207\362\240\275\2152\020\275\327\316\\=$d\376\270\314\204,=\327y\r\275\207\342%\276\3126k\275%\226\241\274z\370\263=\241}\026>,wq\275\374\000\036<@\326\t=J\000\345;}\017v\274I~\247\271\315\356\252=\240b\006\276+\016\'\274T\324V=f\341\326<\275\213\027\273\tV2\273\261{\333\275\254V\240=\315KM\275\031\302#<\351\226\230=\231\252\033\275\3720\360=\322\r\005\276\n\316<;JE\240=\335G\305\274\031~\347<p\375\370=\305\334\025\275\nNB\275\232\022\022=lV\307\274\250wK<\344:1=\223\241\256\275\374\261{\274\312\036\200\274\250\"/=\262\177\257=M?.\275\313?L\275\240&;\275{q\346=*\351z\275#<`\275\374:\217\274s\332w\274\230%\315\275\224\205G<]\214\232\275=\301C==\r\241\275P\364y\275\214dK<\t\016n\275,\225\257=\324\232M=\300\315\226\273\364 \272\275\343M!\275=eZ\271z\005\333;1u\322<\213\272\207\274I\325\210\275\256e\365<6\234\376\274\255\270w=\214\270A=\035\250\210\275\246\246\206=Cs\216<ese=f\037,\275\254D\t\276\252\375\301\275[\320\202\275M\301\264\275\236B\002\276h\363\246\275\362>\345<\201\023\370=g9\347=\341\253$\275\332dP\274\005\0069>\255\251}\2743\365<=<tJ=\360`\'=\236\360\223=\027\212l;\330w\231\275gg`=B\335W\275:E\341<0\301\250=X\030^\274\346\344\314\275\226@\233=\317%\261\275A\354\234=\263L\242\275Yo \274\"C\250\275f\032q\275\252\253,=%\022\232\275Q\245c\275\201\230\334\275|&l\275\007\316\313\274o8f=#K\r<\246N\277\273\276\213\207=\266\213\302\274\343N\346<4\0009\274\032\336\224\275^\013\356\2759=*\275A\005\203\275$\370N\275\272\212\346<&\307;\275\034\002\000\274\245\306N<\307X\002\275\305\0371\275\226\255%\276\272\357H=\310\217\"<\300\361h=\225\304\236=\031\031h\274_O\332<a^\t\276\345$\025\275\263\266+<\177\252z<e\206\005=F}\034=oe\233\275(\3767=p\014\311=-\313\030\275\001\340\315=\014\220\313<!\374\364;$x\332=I\247\005=Q5Y\275zz\333:\204\232\333=$\323\216=\207\242\236\275\330\345\037\275\267\342\021=y\227\213\275J\340Z\274\304\006\256\275\213D\206\272X6[=\320-\254\275uf\320\274\177G\351\274\317\321h\274\352\207\212=7\373\327\274\263?\016;\332\365\202\274\035V\310\274\345\274\203<.}\010\275N\3201;\347bJ=\265B\262=\246\271\334=\241\335\206\274\2579C\275\025\272s\274\220\335\007\274\346yL=z\351\214<\025l\314\2756v\027\275\267\362\236\275\342\024\374=i\342\204=\031@\317\275uq\336\275\020r=\273:\314\032\275Y\213\035\275\267\017\034\275^\362\326\274\351.\211\2748\267\004\2744a4\274]\264\220=\313\022\n\2761G\273\275\220\343\037\272\307\3722\275\235\273\226=\275\204\366<{\351\t>\342Df\275\350H\302\271n>\306\273\224\325\004\276\314\203\207<\023\351^\274\3343\354;\351\351\237<V\352[\275([|\2741\311G=\256\340S<\230\336\177=\350?\203=\332\345b\273\342:\360=\362\035+=u\254\317=i\304\"=#\006 =,\r\225\275\335\200Z<\245\202\337<\202\301?\275\303+\215=+X1\274\025\'\316<qV~\274\300{z=w\312b=\272\3568<\373\261\257\273\345J\222<\0015\236=6L-=\005\003\204=\363\375L<\250\031\223\275\017\265\260<\255\270\202=j\177\271\274c\242\321\273\205\337E=\376M\242=\031e\215=y\346\213=\266\375p\275\264\225\345\275\261\225\364<\356th\275\\\222\031=\222\014t\275MO\223\275GT\250<N\013\031=\346\236\306\274`W\274=zs]>\222\364\330\275\333\034\241\275/\017\224=B\327\302\275\241\223\242<;Q\265=\226\256\336=\2744\204=\020\007\307=\007\226\235=\262\030\224\274Dx\331\274q\347\340\274\277\254p\275\370q\234<\317B,=\237#\024\276\353qn\272\344H%\274q\320x=\033\244\267<F\253\177\275Y\310\004\276\2144O\275\230V\355\274(\300\214\275\233\n\223\275Z\335\204;Rx\224=[f\327\275\300\305\005\274\222\272\220\275\313{\001\275\034Q-=l\373\307;\312\225\252=Ob\020<\251Q\325=\"8><<\023\013=\036\024[\274sg\013\276\\\2746\273\372\005\237=#\317\210<\324\243u<\365x^\2749\335\306=\321<\217\274w\243\215=X\271q\275\227\220\262;\212U\273;\t@\325<\327\'\371\273\372\360_=\203v\371\274\\\342\006>\017\233\'\274g\024*\275\tA\254=\367\373K\275Z\354[=\022~\273=\203\374\206\274\207\235\207=\000\350\223=\035\306\357< \316 \273\236\017W\271\305\364\330\274\337\243\233\275\020\014=\275\265B\364\274\021@w\274\214{\013<\275fz=[Z^=;~H=v\300n\275\331\336\323=\360\312\211\275\nq\337\274K\215u=\232\323\254=\240\013V\274\305\3227\275\035\224\325\274`\253\000\275\217T\211<Q\237\237\273\241\014\226;*\337]\274U\017\"\275l\300\220<\004\024X=\315\256!=]\016\267\274\260\247\321=-\360o=0\217[\275!\030\212<\353\336\001=\350\360\024=\337\331\204<\311\033\232\275V\234\322\274\235*\203=\335\014(>\351\220\021\2752o\r\276\252\006\240\275\247\255F=\010\225-\276\00069\275\216\021\206\275\372\204%=\000c\016\276\331\326\366:\013\265J\275\334j1>.9\004\2769\200.<sP\230=URx=T\340Z=2\\;\274\333\372%\275\367\335\353;\247*\006=\237\3709\274m\260F\275g\265\205=\024\034\253\274\232\3702\275\004\357P\275\311\354\244<*\315\030=\\]]\275G\353\375\275A\305\222=-(\232=\036\224K=R\0359=\n\216q=K\226\315\274]/\026=5~%\276.\372\254\275s\202\301<\356\242t<\222\247\200=)!\022\276\261m\375=\205\016\224\275k\315\353:\241\014\342:\253~\020>\356\357\031>\242,\341\274_\357\253=O\273\036\274\213h\265\275\353\377\340<\3115\202=\230\363\224<~\317\365<\305sH=\204\350P\275h\243F\274\330\031\025\275fu\337\274\017~H<\025\341\335\275\304\362Q\275Q@\232=\000B\307=/\262]\275\013\220@\275\272\2662\274\240\3756<\313\237\027=\321\342\204\275\254\3522\274\n\2777=l\307\262=d\312h\275>\326\000\275@r\226\274\024\023k\275\265\037\257\274\3245\323<\353\323_\274w\271\335\275\202\354\232\274\375\263I=\375\317b<\206Vp\275\272\212\333\275\274\037\262\272\254p\267\274FE*\275\321\021\215\274_\240\271\274\245Yg\275\321(\247\274\247\230\203\274\346&c=.\rT<\322r\262:\304\373\353\275\314\010\326=\317\177C\275\010\022\311\274u\235<=@p;\274\331de\275\225l\316\271\230\\\226\275?\177\330\274\025\360h\275V\352;>\342Ur=c\335o\274\030\273\221\274O\351\253<\002\2033\275\366\320\203\275\3002\312<\006\'\327<\335O\257=\2269\212=\016\236\241\275e\245\367=\222D/\275\005\236S=%I\001=\324T\"<\231\230W=\036\314\254=\266\344\242\275yx\234\275g\262\301<$\033\247;\343\3003\275<\200;\275h\337\306=F5n\275\033\257\013\276\n\252\345\273\277Hi=!\232*:\t\230\252\274\310\337s=c\373E<A}\375\274@\352\374<\360\206\340\275\346>\246\273\301(\334\274\347\251q=\330b\002\276\006\370\032\275\3710\367\274\205\004.=Q\307\005\275\221A\313=5&(\274T\266V\272\317\352\306\2744\374\003<\350a\010\276\236m`\275\266J\033\275w\256\010\272\n\3147=\237\246O\275X\217\372=^pI=\264\264^\275\r\373\240\275s\232\302\274\207\305\231\274\366\312\037\275\207t\030<\257\265\001\275\3352\351\275\010\361\251\275\332\000\037=\320E\025;\261\205u\275\357\324\225\2748\022&=Qc\331\274z\271d=ay\016>\343V\300\274o\232\377;\301\3123=\373U\225\274O\225Y\274\245@\251\273h\357\3379\312\343\253=-<\310\275\\\345x\274u!\331\274\346o\203\274\360K\002\275\016\326\202=u\020/<\305e,\275\221\352\017<\305\013k\275\307\2474\274\201\231\253;t\374\257=\206\227|=\236\271\233\273<W\246=\261\357\272=Iul=8\247Z\275\352H\030\276o\343\317\274\275=\023<|%\233=\013v\256=^&S\275g\005@\275\307\230Q\275\237\022\237\274B\204v=\236\342?;V\302c\273L\342p\275\33571=\030\223#\2765\361\335\274\346:*\275\276\265\203\275\222\216$\276\337\242\355<^\270\016>\301\274I\273\227\024\227\274\277h\360<\252|\315<81\232<`.\250=:\310\257;\205J\244\274\340N\032=\263]\314\275\264\345@=\363wp<\000\255e\275s\220\265\275\240\210\247<\023\3221=|\017\315=4\350&\275\301\250k\274\233F-\275<\007\262=\251\245l=\014\005\n\275a5\367\274r\355\013\275\327\336\254=\211]\263\275m\026\324=\255\214y=\212,&\275\307-\316\272*\206\021<\355A\221\275\254m\210\275 \230\034<v\247\252\275\000\003\240\275P\0370=(\224\305\274E.u=\031\365;\274\241V\271=\250&\307\275N\221\216=\305\355\007=\021\300\201=\\a(<\231\204\211\275\352\267\010\276^\212\260=o\370\264=vR\270\275[\300^\275\356\324#\275\312\267\350<\021/\031\275\323\n3\275\340\224/<QE\030=\2505\201<\005f\252\275^\257\002<L\024T<\311\272\216\274\264H\n\273G\016v<\006\365\220\275m\3048=\323\206\020<\206\304\275=\350\241G=\307n\233\275ze\322<S\351\243\275\202\'\020\274B-\312\274\261\263^\274\227\027X=\t\022X\274U\365\010=\255 \002\273\350\224\341<\241\021\254<\277Jj\275\233s\022\276\344\201\365\275d\267\315<\031Pq\274\244\350,\275\305\321\314\274\020i\314\275S\266\334\275\223\023f\275,\211\232\274\032L\253<\216&\305=G+u=\364\333`<\337\340\267\274\t\244$=z{\361\275,\214\360<\330\236\r>\302\362\243=\232\300\323=\366\r\037\275\375\206/\275\026Z/\275\276O+\275\365\345\374\273\006(B=2\253\237\273x\264\245=\350\305Z=\017\002\304\275 \2568=f\016\303\2742\213\311\275,\2168\275\0015d=k\254\330<q\034\021\275\004\325\213<\245\003\224\2751\202\231=\226\210\306=\235E\203<e\251\220\274\340Y\007;\n\337\030\275\226\244\014=E<\224</z\302=\321c\346\272\356\300\337\274E\226,\274|\n\271=\351\346\361\274\350\025\226\275\242\326\372=,#\275:\262\216\033>\255\365\t=\035QB=`\243@\275\013r\253<\254\022]\275.\332\267\274U\271F\272\333+7\273\351\345\340;nKP=\242\322#\275\026K\314\275\220\222\350\2745\005\256\275j$\314\275\261\211\215\275\276\215\212\275\233\206\361\274cN\232=\374S=;\331\325K\275\326\247@<w\252\202=\202v\311\272\204n#=\262\237\245<I[\250\275,c\321<(\362\312<l&\316\275\270\246\274\274mh\255\275\302\212[\273\325p\365\275`\234\226<|\224\035<\025\237\241\275\230F8\275\245x\274\273\253\006\334\274\r%v<~/:<\354\023\t\274\025\363\352\274\245NP\275\371\031\322\275G\255\027=I\200\016=\330l]\275\205\0274\274/.\245<F\345\212\275\215\312\235=\242\\o=\\\370\375\274\2374\033\273i\247\241=\322\305\310<\020p#\276z\300\251\273\207.\237=\224\247\334<|\350!\275N\232\272;s\245\310\273\377\025\002=\265\347\370\274$w\345\275\221y\227\273\267\030\226\275>~A<\243\222\241\275\370a]=\017.E\275\373\235\r=g\033\322\273 \004\000<\0042%\274(\265\007=\324W\246<\361\017r\275\275\261=\274\226)@\275\377=1=i\376*\275\273\317\205=t\001^\273\013p\320\273\361p`\274\315c\371\2742\310\021>\202\211\034\275;\244\234\275\017\321O\274\236Lq=-s\270\275w\374\326<dT\215\275\366\354\004;Hu\205\274O>\213=\337\242S<\302\203\"\276\223\220\276=\030\023\326<y}\326;l\273\375\274\360H\215=&B\000>56\014=I\214\031\274QFi\274\206C\202=\233 \234\275]\001\033\276L76\276k\004 =\206Z\247\275,\300\215=\030N\255<\267\252\021=)\342\323=\226\2529=\370\302\013>\234+9\275E\265\245\275\254Y\341\274K^9\275/\236@<\206+H\274\377\006r\274_\010\206\275_^\037\275\323h\225\275\225V\352\275o[z=\006/\004\275\235O\211\274:\310\332=\237\252\257=;\346&\275\230\"\216=\\4\023<KP\264\2755\360\215\275\n\022}\2755\336\n=%#\223=\343\330n=\226\247M\275\346\312\333<k\001X=\346\206\277=\341y\312=\312\216\357<A\016\226<\353\036\010>\213\267b=\252\370\273=JP\017\274\263\370a\275\205n\302\275\260\253?\275\033(\200=\312\013b\274Vu\370\275l&Y\273V&h=\344\317\375\275\273\320\366=\014W\357=d\024\326<y~\333<\274d\213\275t\016\220=\365~\027=(\352d<\251Z\316=\032\303\031<D\222\026\275 \005\003\276\357\224\\\275?L\307=/\236K=\361\234{=\267\326E\276|\250\330\274\302\'\021=\275\304Z;\271\257\036\275\323\244\314\273y>\356\274\301c\347=P\340\036=\r<z=\032\216\211\273%\244I=9\310B==\267\214\273|\324\233\274\303\361&>\323|z=\245j<=\355\344\206<\232z\003\276\250t\243\2749&D\274h\n\210=\343kn\2749?~\275\260\005S\274\2641\034\275\305\235S=\356\372\257;P\254\251=p\202\212;\347\306\022>\347\3322\274\237ds<\326\215==\0100!\275\035\244\367<H\237~\274\250{\232\275\256\372\372=\206\330\313=\177h\216=\222+\205\275\320\276\354\274\274\314\r=4gY\275\361\347f=\037Wx\275\234\341\016=\010V\021=\257\307\303\275\246\020\014\2746\226\247=Kw=\275\255\242\332\273k$i\275j\023\031\275\005\203\340=Pc\222=\340\3648=\222\262Y=\336\374\253=\246\250\025<\372X\355=\002\320\230\273\355O\301<\rk\t\276\2412\366\274\340;r<|+\211\275\254\333\242\274\366\275,=\241.\265<\326\025S=\336\0100\272U\312e\275A9\346\275\337zg=b\321\271<\222:\263\274\351\001\n<\233\253\276<\373\373\200<)E&\274\307\352>\274a\255\240\275K5\342\274v$$=\275M\004\275\323\305\233=I\211\031\276x{~\2742\3439\2734\355I=\336\307\203=\205\024=<\345\303\204\274\245\367\'\276#\325u\275\224\037\301=\222\005\261\274\214\313.\2758\311\256=\370\323\222<\032\233\261\274\0059\001\275\236E\'=\201\205\n\275y@\212;\257\367$\275O L=\335d\305<\206^\237;\031\332\311\2743\302\220\2759!\243\275\2654\004\276\206>B\275\275\027\347\275\240RS<\257_\237\274\202\211\233<^\216\367:\352\304<\275\262`*\275#\t\304\275\000\360>=\220\371\251\274+\036\022>\010\340\033>q\305V=\275\272f\275\340s\301<\034\'\275\275\311\261\313;+\213%;Bnv\274\315\244\340\275\303\316,=\344\021?<\343\345\234=\031CN\2755{\036\274\314\370\030=\257^\375\274ar\320\274\374\347\215<\277\211\n\275\255\374\177<\252c\340<\\\025I\275\036|\370\275x\336z\275W\315\024=*3\270\275Z\253\272<\022\004\031\275!a\340<\320H\312=\224K\316=\303\377\304\275\013\313\033\276\302\305\316\275\355\232G\274\316\232_=kf\010=^\017\276\274Kt\\<\233b+<\363\325\033=_\212f\275\207,B=\\\020\"\274w\013\200=\354w\255\275\316+y=Wf\217=\032\235\271\275D\000g\275\035l\323\274NT6\275WB\266\2752\373\251\2759\306\377<\211\\\204\275\346m\375<\263F>\274\354?\016=e\363\323\274{\354\004=.U?<\224Cj=\202\306 <i\241\247=\352\247\t\276(R8=\3134\226\275k2\315\274\321\201x\275\334\253\236\275s!\371\272eG?\274\002_\220\275J\354\334; R\273\274\257\374\261\273os\206\275\236\2733=\0204\234\275\310F\217<\205\025\001=(\240\003\275\3710I;\250\212\017=#\361\266=\020\303_\275!\335k=@\007\220\275it<\274\361\222\330\273x\025p\275\312\263+\274\252&\257<\203\213\360\275\344\227\347;\364\274H=\373\326\013<\233\245\251<k\273H\276\000\003G\274\305\313,=\300\032\334\274<\025}\274\350\233\275<\2709\304;\257D\276\275\253g\304=\202\204\374\274\211\3127\275\276\221\202<\320\302\215\275D3t\275\315\254\010\276\354!\000\275\241\354\206\275\310\322 >\271\221#\274:HT\275\352\375\027>\'hF\275Z\201\222=\245\354\013=\231\2219=\027\332\256=2\031e=wS\255=\347\327\267\2753\355\003=\313f\260<\236\232\271\274\021q)=\340w\351\274|\351\326=J\001\320=\\(\366<\304\237$\273%?\216=\033\307q\275y\365X=\261\033k=|\034\253<\036\323\003=F\261\r=\347\314#=\302F5\274\363@\262=\361um;;\251\204\275\326\325\034\275\021\362.<&VZ\275\334\203r<o\234:=f\304\3037\n\244W<\326\270\256\275n\007G\275\007\225i=l+\337:\353\233X=\232\016\246<\257\372\267\274\331T.<\002P\241\274pL\302\273\330\370w=\373\304\334\275K \214\275\346\001.\275v\023\004\275\213\330\t\275$\354\237\275\344\002\322=\256\005\214\274\277\301\260\275\326\241N=\240\005\305=hk\251=3|\262\274k\212\014=ET\310<\252\006\235\275\322V\241=v\262\335\275\242\347\223\272\332\034\210=rw}<\317\241\300=/xM\274\377\302\000<\350\330\004<\212K\033=\250W\261<\235\\\227=\2000:=\022\370^\274\3760\'>\206\005@<\274\014\377<\360\374\3458/P\361\275U\2708=n\226\221=\255\346\027\275\025\323\035=\341\364k;\370FI\275N\314.\274u\0132\274[e\"\275\001\377\204=xU\320<\273k\342=2M\202=j\207\340\274\3763\"\275\013,\205<\263\242\361\274\006Z\024=\256\231\240=?g<=\247\216n=\274\277U\275\364\'\254=\266\224\033<\220\201\010>\357J\304\275\221\010\231\274p^\373=\241\241\357<\347\310w\275\241\377A\274\325h\261\275\360\373\354\273k%\236=\353p\017= \303\310<-d\353\271a\247\266=\364\246\322\275b(\001>\256\006\273\275w\350O=\242\347\206\274\205 \257<\270t\t=\374\267\356<\217\345\037\275\371g\362=\032l\235\274\246\230\240\275|\362\002\2757\225W\274\201\312\246=\370\010%=\321\215P\274\263\320\361\274E@g<k\332X\274\240P\025\275\362\277\254\274\273S\344\274\362\362\347\275_\243^=\336\360+=\271\214\032=\247m\234\275\2233*\275\256\3339\275\353\214\245<:k\325\274\223\234\032=\326\346L=C\310A\275;\217\246;\320Y\016>_\n\023\274\250\325X=\242g\305\275?Yd\274g\222;\274\320\306\036\275\321\005\375=,\0308\276\354&y\275\227P\355<\214\330v<Y\362|=\r(\371=\235\034\314=\332q\313\274k7I<\177\\\275\273\343a\375\275;V\301=\306P\324\274\016\027\375\274\256\325F\275\213#\303=!\267\021> \333\024\275\242\222\371\274\264/|\275\031\363\230\275Rw\217\275&\354\361<\316f\253\274\203p\271=\305\034\254=!o\352=(\344M\275\327\304\026<g\327\025=\241\023\333\274\t\033\302\275\375\237\214=\223C\365=\217I+=X\317\231\275o!7\2737\214^\275\267\266\342\275r\251\013\275\211\320\006>\306M\311\275\343u\005\275A\220\016\273\247\365\366\274\235\231\t\275.\002\034;\240[\244=\354\235\247\274j\"\215<\\l\337\275\253U\235<jU\033=V|\215:wg\272\274\031\331\363\274]\317X\275\272\304B=\216\3548=\210|\245= e\026\275Gxd<j`\202=\017*\033\275\331R\327\274\251\205\212=\232\023\374<!\273\351\274\000\346\257=p\277\275=B\022\300\274\037\366\013>m\367!\275$+\273\274\236\370Z<\017A\010\276LAZ\274X3\006\275l\301\206=\356\301\367:\362\027G=\203a\t=\036Z\200=\242`y:\246\032\034;c\375P=\322L\'<\2356\254<\274\321\007=N\345\245\274\202,\263\275\2079Z=\312B.\275\347\000C\274v7\r=d\316\341\275\024)\312\272\003\333]=%\2114\275\330\374\201<\177\343\273=\367i\374=\301\270\305\274\362\327&\275\037\222\304\274\270:m\2758(d<\243\263\224<hB\000>\327\363-=<\301\310\274\320\345\022=,\013\203=\004\321\201\274\204\277\230=\006\363;\275\373 R\273\324\364\204=7\356\206\274\005\021W<\356C\214=\310\020\227\275\326\270\235={Ky<\026\177\354\274\007/\307=&%\242=c`\240;\235\214\t=\242\023\236\275\353/\274\275\323\017\227\275\246\220\335<\001H!=\001\001u\275V&\262<\347d\221:\345 \3259\024\310\336\274\3043d=+\344\217\275\364\325|\273Y\336\371:\3714\313=\337\372!=\224be\274\004\221\020\275\335\231.=\240\220\200=\354-\216<\264\241\026=\r\3742=\347\356\037\272%\353\311<\237\302\006<\231H\223=\310\213\210;\262\225\010\2741N\306\274\030\005H\274\211%!\276\324\226\245\274\nqf\274!\357\351\275\235D\213\273\343\235X\275\310h\367\275\034\225S<\365\013;=\334\204\327<\333N\233=\013(\013\273\032GA\275h\330\240=XF\005=\007\005\211\275\206\272&=\3547\270\274\030\353\367;\337\300k\275\036\212\366=\336\242\256\275?\005\036<\361W\263=\210\221a=U\352a=l\230\204\275\314\345u;\240\355\314<`\360\366=\'\204\217\275\275#M<e\035\252<\027\371z\275Lj\014=\326K\207\275\201\026\022<\316\352\216=\247\332\330\275\330\360\244\2757\345\031\275\024k\313<iv\220<\260\027\217\274[\007\240\275\310\252C\275\254\305\031<\316-d=V\263\263\274\000\271\242\274\013\016\032\275\200\203\262\275\256b\257\275\334\311\236\274\305\213\002\274\340h\252=<\322\204=\201]e\274\275X\225<\317\331\000\275\347\200\022>L\034\025<nq\006\275\352\217\304\274\354c\222= \302\347\274\236\313\\\274\371\'M\275\231X\237\2755\335=<\371\rT=ea\306\274\253\317b<\224\301\000=^\370\312\275\272\263\267\275q\353\243\274\237\201\376;T\232(\275\240\252\364=\331\223\317=m`\201\275\275\277\014>\224\357\033\276\021L\267<\276\270\211\275\335\201\213<\316\230\320\275Q\371\351<7\244j\275\251J\245;\256\351R\275W3\227=Y\250 :d\004\347=\377\323/\274|Ew=*S\310\273r\365\200\275\023\257\227;LJ\026=\364d\231=\2453\260\275\r\204\030\276}\036\266\274\t\252\242\2759=\r\274\255\025\233\273R\246\022>\0239\325\275\264%-<\253\270\273\275\3636\315\275\024y\256\272\226\304\231\272j\275\232\275\232\204y=n\211\213\275\005\270\017\276|\326\031=\020\250\025=1\313\222\275\323%E<\213\313\356\275L\034Z\275\177A\2059\377\352\021=a\271\037\275\277\210\231=\340\352 >tv\031>\340\356\300<\346\356\214\275=x\210\275|\344\240<\007n\375\274\237*\314=s\354\344\274\366-h\275P\350\321\275\014z\010\275\226\030\256\275\\[\032=Lxf<_\035\324<\275\005\353\275\317\305\325=1Y\010\276\360\037\252\274H\370\332<TH\230<\247\301\266=R7\213=M\203\214\274nA8= K\027\275\025\306\353=Z\030\205<V\024\231\275\215\247T\275v\320\016=U\025]\275\341\312\241<\024\257[=\360\276k=Q\n\332\275\002\013\207\275\225#\215\273\300\251\320<\200X\311<\256\344\257\2744\252\035\274N7C=%%\232\274\350\315\027\274\307\303\366<\356z?\272/}\276\275\313*\211\275\374Xt\2758j\331<\312\253\007>|B\370=\274q\206=\371o\274=g\033\036\276\352\226\354\273\002\320\350<\325\200\310\273\355\324\270\275@\266J\275\005*6\275\347\'\3029@\2404=i\336,\275)\377\025=\231e\237\274\301\342o\274\266L\202\273\264g\216;\013f\026>\027B\302\275\203\222\021\276\035\023\217=_\'\334\272AA\023\275\362y\262=\336t\340\275\004S\240=\310\3145=\033O\252;d\356[=q\343\352\273\223#\227\274\324\215\016\274\252Q\312<q\033e\274\201\335\253\274\245r\205=\'>!=\036\031.\273\347\364\305\273Y\036\000\276^\240\037=\341\332\321;\334\001\231;\016=1=~c\351\2745%4<j\217\306;#\367\206\274\3772\375\272T\034\264\275\304Q\271<n\033\341=\345\2244=\013\267\201=\277\3420\274\303\'h\275\364\257c=\342O\240\274h\217\254\275sGA=\306\372\341=\247\367\362<\243\355\021=[#X<\030+\300\275v\267}\275\177;\004\275\007\013\001\2758\317\214=4\341F=F\273\301\275\376U\t\275\333b+\275\366,\375<:\230Q\275\372\237?<\224n_=\237\365\272=\301\033\224\274\251\342\373\273\353E\325\275eM =-Ec=\275\203\230\274\251\227\037\275\202\271\010>\257\224\257\274\316\215\026\275\035\205#=p\324\267<\222\033\014>jk\271\273\355\023\034\275g\373\346\275\037\202\265<\230\200\004;f$u<\270\363\250\275\372\240\202\274\223w\235\275\2623\321\274\326!R\275\254<\n=i\313\356<3\214\276<\034\020H=sBf\275\233}\350=\322]==O\305\253<3\273\306=x\263\200<3D]<\205.O\275\261\026\272\275\033\351t;r\307\024\274Gu\244=\231\256\302\273\274\350\235=\274\344\316\273\036\034+<.\023\220=\025\344\276=\274\022\t=\371M\305<.\205\r>\363w\355;\032\365<\276\375nm;C\370\n=}T\270<\236\210\347\271\372\263\246=V;\250\274\236d\254\275`%x\275\020\000(\275K\360;<VI\345=\251\036\374\275\353GZ=\004A\326<\307\257\002\276\274\246\366\275\236.Q\275t\311s=t\241p<\207J\244=\264ar<\217`\371\274\027\317\"=\255\260\207=\255\241\363=\221\264\367\274\207\362\025:\306#\365=\327\203\370\273\373U`\275$\343\321<\001\332s<+\263\241<\357h\255\274Q\264\002<\023\200x\274\327\267\022=\345-s\274\266\370\361\275\203`f;\367%\035=\234\263\034\276\005!C=\222\274X\272\306\2718\275\320i\"<\253\306\241\274Myc=n\222\314\274\'\202\266<IIl=!\357\002\275n\214\373\274\343gb\275\'4\021=\334\rK=\345\263\020\273PM\215\275\337J\223\275<\254+\275\251\353E=\215h\022\275\020cO:\002\004\331=Z\320\201<\365%\241\275j\\\277\275\376\344\r>\2404\206<G\375\247=\335\322\312\275\210h\220\275{\014#=J,\371\274\347\273F\275<`\353\275D\332\353\275\367\346\014\276\3450\030\275\031t\031<\352I\306=\347V\253\275i\250\216\275\331\352\305=H\302\212=\3010\222\274x\2018\274\0167\003\274[j\235\275\261*\216<\302\227\n\275]\034\301\274^\321\235=\234\320?=\236e\331;&7\013=\t\300\214=-}\275;\337\263O<\300 \026\274\206\'\232=\\<\023=+\315\251\275\224n.\275\323\347\211=\251\004\207=@1\"=\366b\034>\007\360\260\274\251\"\230<\216N\036\275;\333\377<Z\262 \275\3340\227=\204\332\217\275\265-\'<I\340\016>\246\035\361\274\305[\305<\304\256W=\215<\205=\r\336\346<\306#\356\274+#\024\275\313\234y\275\315`b=f\005\036;\256\371\246=\241H\027<Qr\r\275tX\320\272\247\234Y=\373\347\302=l\316\t>\000\002\247=\237\372\357=\250Q\014<\010*==\305\354R<P\241\214\275\002b\324\272dw\014\275\232n2=\177\016\231=\217}>\275\343\315\267\275\313G\214=\311\2150\274=s\216<b{\221\275\2500\025=2\225\330\274\207o\205=\323\225\345\274\311\027\244=!\366\272=c\010\304\275\021W[\275\2771\257\274\301O\005\275\257\267\221=\304\222\346\275\262\245\347<|\177\306<A\222\322<\"\372\336=\020\261\205\275RK\373<\230\314_<\370\007\r\275]\321\250\275nw\023=\020-<\275\332##<\0060\253=\216!\350<\246\010:<\264\020\366\275\372\212@\275\016i\325\273N@\232<\026\025?=+0\220\275\344\346\240=M\354u\275\'\216\024<Yh\235\2746j\333;L\303\270\275Z\240v\275_pG=\006=\023>\215\t\'<\317\325\310\272\n\3703\275\333b\366\274\201\2447<\270\301\023\276H\023W\272G\n\265<u\014f=\311G\221=\"\202+=v\\\t\276ih\235=3/\r\275\236\200\317=WP\233\273{\035\362\275n\201\315=\353\261\275\275\345\035\357\274XS\265\275*\244e\275m\232h\275Lt\243\274\243\273\310\274\246lZ<\034b\340\274+\026\355\274\242\273(\274\007\371F=\034\316\347\273D\250\271\275\273\327\037\274\357P\244=\014r\373;\255\232G\275{\r4\274^.\222\274\356p\226=G\256\246\275^\347\310=\001l0<1\022A\2754~\240\274\363\271O\2754X\263=\367\257;=Nu\245=\362\340\372\274\336\256\242=M(\\=L\366\341\274\355\270\001\276L\347Q=+\327\036\275ps\261\275\255\2621=\002\330U\275\313\256\250=\375\240\302<7\222\340\273A\223*;\317Y\357\273M\354\202=N\344,>\366\222\031\275\206\215|\275h\233*\276\376x\230=\356\302\"=\235\343\001>\211\017U<g\t\367<\255\205\307\275\212\321\332\275:\361\022=\005BJ<u!\343\273T\020\023\275:\377O;\326\030]=\207N_=zi!=\311G\237<\004\217\206=\035\3714=\262x\226=I.\267=\305s$<\363\246\221\2733f\356\275K\236\336\274\337:\372\274\n\023\t\2753i\323\274!H\204=\022\3312\274\r\212\266\274W\016u\275\017\217\331=\302\272\'=.\035\214=\202\332\203=\017\216>\275\357\265\361<\301\331\007=\332\177\227\275\354\243\320=\354j\002\275Q<\251=8\327K=\243\206\332=\024\006\372=\362\205\372\274\344\256\205<1\251\237\273\242v{=\376\231\354<\027`\247\274\337\276\344\275D7\257<\022\226\225\274{\030\003\275\022\303@\275\361\211K=\210\020\025=`\026I\274\357\254\037=*%\370=P\031=\275\372\337|\275\2268\216=/\320\331<\0051\212=\354\256\352\274\325\336>=\374M\230=\177%\n\276a\020\356<\327h~=\246\305`;d\333\275;\265C-\275M\313\361<\221\0362\274\224\306=\275\246\232\233=\310\021\262=\325\370\032\274\211\245\304\274\337\213\266\275$\'\206\274\263\203\242\274\231\006o\275i\235\257\273SJ\004\2768[>=\235\214\372=\261<\025=m\237\307=C\274\340\275\364Q<\275\216\306$\274\216)==\210F\205<v<]=\341\024\010=d3\374\275\261\220\024\275\000\257\247\273\027\001p\275O\"\251\275 \204\215<\223\274\254=\337$\017=\343%\026=^jA<\246Y!=w\234:=~\357\344=\244E\233<%K\023\275Z\314\304=\201t/\275-\354\376<\276\362\215\273\254\234\374;\246v\200=Z\202\210\275&\033w=o\254\003>\006\314\310\275\344\211\311\275\013\261\321\274$\227\032<\036\275\336<\025\000\266=\203(\213\275\315\354\362=\316\"P=\317p\312\273\274\231\250\272C]\237\274\231^\244\274\324(C<G#\314<\023\035\255\272L\312d\275)v\316\273\306\223\203=m\277\341;\203\014\343\274\211\010#=\272R\211\274tx\355\275\361\331\233\275-\325b=\217\000\313<\325SV=$\206\033=_\364\257<\223\211:\274\"\262\330\275\272/\370<ub\215=8QX=\362\267\350\275\026\253\020>~v\330\275\343I\203=te\235=\"\253\224=\361\021n\273Ju\032=\325\267\205\275\014\323-\275\246\236\254\274,\242I<\351P\361\273\220\234\374\274 \177^<}\244\202\275\233]\261=\375\317f=\2523\005\275\254\331\241=\027\250\016<\253,\020=\244c \273\361\t\261\275\320\353\023>I\342\016>3\365\"=\216\367_\275\014u\310\27587\035\275r{\203\275\316H&=,\340M=1\014\244;\336\353*=\257\033\007\275g-\273\275\345x\356\275\355\306\221=\006\014&=I\300\225=\257\',<oCC\273\370\006O=/.\351<\271\205\360<3\007\244<\007\375\200=\310\037\347\272\317\270\024\275\342o\246;\326\247\014\275\300\261\235\275\325\335\023=\240M;\275L\336\355=\355S\010=\030\375\034\273\222\234\021\274K5\010=\253\243Y=\334\273\033\276~\374\006<\314\222{\275\241\213\362\275\252V\010>\364\311\275=S\213g9J\306\003\275\347V\034=\353S-\275:\201\n\274\264fW;we\356=Q\255\025;\354\247?\275\332\361\016=~1R=\313`\203=L\"\305=,\273\376\275\253{\346\274\'T\314\274\362\206z\275\202\323r\274G\304\273=}7S\275\211\213\357\275\326v\213<\301\024\206=\334Tj\275\244\372\340\273\007\033\357=m\221-=\306l\300\273)\375h=\245\'O\275\000S\312<\033\024A\272S\0338=m\343x\275\321\365\003\275\321.\241=]K\031\275d\005\330\275\304\336\013\275!PL\275fg\226\275\230\214W=,\"\235\275\276?\225\2755\257.<4\214%\275X\316\013\276@\376\203\273A\010\334=\341\257\026<\207A\322;v3\005\276/\311\365\275q/\301=H\202T\275\323\370\214=\372\300@\274\215s\247=j\324\300<L\236\\=x6\320=\222{\365<X\305\201=)\333\257\275\305\246\347\275\301\030W\273\335\212\337\274X\363z=\017!\376\273\003\037\026\275\221\"\257\275\023\211\023\271\341y\305;\016\276\302<\0232\001=+\261\265\2756\311\231=\267m\270\275<2R=\247&@<\203\034!=\231\242\267=\375pX\275\373\230\267=\255\263-=\370\221\327;>?\312<\3026\024=\315\370\000\276\217I\"=S\306\351<w\273\033=Wj\225;|&\025\275\204n\247\274H\343X\275i\263\233\275\020\227\226\275\352\255\206=\245\211\244=\352X\302\274\304\364\035=b^\312\272\335\326y\275\213\367\217\275\247P\226=C\356a<\247\203\035\275o\236\240\273\005\016\237=\"\240\330\274\373\217\213\275:\314\245\274\344[N=\023eJ\275q\265\342\274\341\372\261=\260\245\217\275\033&\272;\213\022,=\213_T\275\355\343\370\273\207\326\236<\327\220\363\274\327&\330\271s\325\000\272\254\001b\274\022\020\347\274\230oR\275\237\321G\2752\030\031=\2360;\275>\304\302=\360 \257\275\262s\233\273\246a(>\r\244\000<w\250a\275\242\314\204\275\212,p=g\253\262\275N\355Z=y\361\361\274R./<M[\007;\034F%<+\375\233\274\244E\305=\370\250\032>\345\326\272=U\"\204\273\320\201(\275\"\345\023<nl\212\273\226\276\252\275\360\243\276<G\220E\275\344t\261\274\277\231M<QCY\275s\307\022\275B.\333<fi@\275f\217\016>+\371\302<9`\266\274\303\2006<]l(\276\211\3468\273\264\301}\274M\215\014=\2346t=\337\223\203\274$_\353=\273{\257\274\023d\232=\265\t>\275\275\007\254=\034\334\010\275\300\233\032\276\023\256\035=eb\303;\331\344>=Q\322J\275*2q=\263\337\260\273\373\312\222\274\244\253\241=KX*\275\346\333\004=\223\024)\274D\0247<\372\325\211\274F\001\002=q\375\240<\354\247\304<\264<\374=\267\013\344<\361\tJ=\347m\377\275)r\216\275\245\016\330<N\252\031<+\201\252=\333\026\301=\327\340Y=\224\274\023\274\025\331\036\275\264\322\236\275rL\311=\021vR\276|+\215=\0229\225\275\263\351\362<\001)[=.y&=\316] =\034\327\271;#\346\265\275n$\310\275\241\006\252\272\341Ok\273\310\236\321=\330\025\344=v\270\002<\225\364\364<\201\267\255\274\016\010C\273\320\002\023:\305\210\232\275\320\204n\275\2664\212\272\205\371K\275\333\365X\275L\215g=\350\357\331\275\220:\227=\324\034\347\274\177\230==\332\177\017\275\371m\324\275\256\273S\273\024\235\247:\341\250N\275\261\0244\274\3608%=\340\355\007\273u\236\214=\340b\246=\037\252\321\273\247\2319;\221\242\010\276\376\241\365<B\350]\275\200S\351<\373\265\324=\235!\016\275\313lm=u\240\031\275q\321\271=\366\323\337\275\022\024a\275\375\314\000\275\315+\261=$\355\t>W\376\314\275\243\237l\275V\363\251\274a\2143>\350\261\205\275\306\210\316\275\tk]<\030\201\265=\026\223\036=\377x\227\274\207\254\242;L\243\270<\220\353\n>\366\324\201\275?F\177<\'\361y\275\361\002!\275\310Ok<&X\014<\334\322C<\214M(=v\033\031\274\037\033j\274\267\315>=h\021\354\274\035bm=\237.\366<p\330b\275\373/D\275\371\376\033\275S\3217\275_\277\313\274\227\274\246\275\0230$\276\263\022\236\275?\t\374=+0\271\275&\300X=\017\377\366\274\036u\221<eX\031\275\003\320\277\274B\375\247<\324\236\306=iY\031=\221\363\025=\2720\006=\321\371\010=\276v\224\274\272\366t=\033\351\254\273 \237\311;\355\"I<E\264\267\275G\363v=\302A\217<\024sD=L\363\274=\252\270\020\275\320k4=e\024k<P\305\320\275\332\272n\275\265\340\256\274\002\225\r=\246\237\263\275i\276y=IY\335\273\314U@=\006E.\275\357%\306;v\342>\274\327\333\003\276v\263\256\275\373\004y=T;\313=\236*\365=\257\215\300\274\030\242\206\274\374a\245<d\202\357=Q\325\357\274\020\327\267\275ju\202\2744\230]<\007\270\006<gQg\274\226\260Z\275A\2528=\373\261\n=\375\237#<\026\003J=\374\276\355\2755\346\231\274-e\316\275\030\331\205=\367v><e\237F\275o\373\223\275\241\333\236=\245\2045=-V\t=\010\023\000=T_\326\274\253\010\204\275\251\212\037\274\002\321J=\370o\n<s\tv=\241[\206\274\332\205 \276\336==<\343\324\217\274\223\023\207=\026N\266<#\3101\275\315\230\331<\303z\302\274\370\235q\273\2369\201\275\253\275\270=u##=\372\033\265\274\344:\004\275\226>(\273>\337\250\273\267\255L\275\335K\312<\264\034\223\275t\365\324=\002X\366<]-\203=2u2\275\'\002a\275\002\021\324\274\216@\215=\375\274\341=!\271v=\302\361\204=\004\3251<\223\276\322=\026\234u<_<k\2754\\\236=c\365v;\312\234\200=\035\362\005;\213&\274;S\266\250=\035$\257\273\023\320p\275\341<&<o\215r=\274\322\\=\222\002C\275\342;\301\275}\271\221<~\2514\274D$\202\275\2510\375=\353\341\347\273\315\0038=\244\363\277=\203L\271<\260\265n:f\311\031\275\023\316\374\274W\'\227;\352\331\033\275\263\316]=\343m\023\275\264\356\253=\2657?=\017\346\350\274cu\361\273\016_B\274\323\373S\275\002\034\007\275l\363\223\275\256V\313\274\013\3274\275Y\020\034<\247z\t\276\006\n/\274\021v>\274\324]|=\324\333\323<\327\364\266<\360B\377<&\t\371<9<\236<\345+\007=\\\206\203;5]\237\274\026\261\260=\230[\201\275\266w\363;S\365\234=[#R=WVZ<=`\254\275hj)>\243\001m=V*\363<7\r<\276[\2717=\300[\005=\025|q;\217\303<<\330\0337=\033s\201\275@\243\201=\214s\200\275\362\337\002>m\245>\275\375\211\202<\017*\216\275\334\357\214=\226\010\005=\004\000&:K\033\032=\327\260.\275F\360g=\233\232\344\274\255\341)\275\'\373\233\274\313\307\271<\231\350\317\275\206\205\000\275F\345\365=,\257\275=p\262\351<\371\212\301=o|\224=.0\257=\234G\200=3x><\301A\306<h\374\020\276\027\236\225\274\031L\230=\247}\233\275\345\265\020;\245\354\255=\223\234\034\274\226y\204\2756\335\250\275\243\264\003>\023\334\206\275\375;\232=sU\240=W\367\002=\037\321\341\275\341\366q;]1\326\274\017n\003=l\353\265<\245\237><\200\020\330<\307\301\262\2746C\002=fi\311\272\277\364P\275>\034\n>he\217=\026\372|\275\366\233\263=\362C\'\275>P\212=\371\020\263;\214\002\224\275\231`\365\275^\227\246\274\275\177`=\3638\306=#\356\356=\017\000>=\032r\r\275h\035&\275\334\377+=\305J\210=\205\n\327=^\331L<\212;\232=\021X\254\275HgV;\304\336\250\275\024UL\275\336s\355=\210|\202\275\244\240\256\275\032\003\342\2740\020\221<\320\027Y=\377\274\234<7\034\202=\257\031\355\275\274\006\030\274\031o\t\275\270\266\032\275\262,\255\275\265P\232<g\357M<?\205\237<z\343\333\275\274!J\275Py-\275>w\034\276\266^\357\275\350N\236\275\200>\331\275\0038\352\274\357\345V\275\"\206\264=\372\307\214\275XDO=\224\031\262=\247\031M\2745\010\361:j{l\275<\224\271=?-\022=\265\322\245\274\035|\023=pJ\205<\235\315\357\274\275:\266=4\025a\274oi\251\274\035\024\306\275O\302\351\274\027kh=\023\367q\273w\376\202\275U\036\266=\340>\374<3\207\216\275/@\227\274\245&\304\275\2042r=\371\013Y\274\252\307\326<\276\223\205\272\302R7=\372\327\004=\240w\016:\247\355\344<\337B\'=9\217\027\275\357\264\026\276\324_\220\274Wj\371<\342\210\002\275\255\\\r;\343\331\000\275k~G=t%\224\274\014\207\206\275\330Kw\273\035\217\346\275`k\353=j\215\236;#\001\231;\254\036\276=;\244Z<\320\345-<\212\2405\273wT\'\275\320Xt=y\256A\275#a#<K\300h\275m\366L\274\030\260\001=\317\210v;\303\361\023=pf\020\276>h\213=\372\310\201\274\242\t\274=6)\275=-\203%\274\315\337=\275}\342\337=\310\034\236\275\351,\002=\017\020(\273\3276\327=\366;\361=\217\257\001\275\251\310\202\274\302\257\r\274S\027\231\275\267\200\251=q/\377\274\233\245\375=\373\273M;\213\357i\275X%\204=}\276\314\274\004\240;\274\301L\221<?Y\342\275\217\331\217\275\316\223T\275e\344\225=e}9\275\210\310\017\2758\203\255\273\013z^\275\234\"\231=V\202D\2727\233\370\274}.\241\275\371\211,=\334\010t\275$\342\245;;\327\375=\273\351\035\275<{\371<!>\220\275\001\241\021=\r\214Y=\021\2371\274+\327N\275,\3143\275W\302\340\274\347#\335\273\360\006\307\274\256>$\275\256\343\221\274\010\017\032=}\211\362\274\016)]<\267\033\026\273\\s\226=\313\024\243\273\246\337\354\275\177\316\223=\355/\344;l2\263\275\306\331;\273\212\302\302=\275\3079=yJ\237\273\032\246\032>\260\003>\275\253\253l=\243!\001\275_\363M=-7\300\275\310s+=xS2=\200r\230\275c\213\303\274t\3065=\227\261$\275\326z]\273st1==\2529=\340P\257=\250\350\240<\247\300\230<*\322\023=B\255\211=;R\243\274\336H\343\274[\313\227\275m\265\364\274\2048S=\363\026\346;\027\032\003\275AR[=\026\305\235\274\262\026V\274b\0044\274\250\\\3278\210\214\215\274\373\365\367<gRT\275\241a\246<\333\341\247=\255\261\240=\250H\021=<\241\241\275V~\323\274\3521\t\276\231\3553=ja\307\275\376#\356;d\027\332=\026\311V>\376\371\036\274\234\314;<\340\254<=\2478\341<i\252\354\274r\324\033\276\024k\001>\217\254\320\274\237\260\266\274\026\335\000\276\316\350:=i\251M\275\221\266\036\276\341\304K<\242\207\217<3\212\251=x8\251\275\242\003\246\275\222\310\305<\272\2215\275RO\362\274]0\306\272\2474\002>\336V\001<\001r\377<\314\t\372\274$F\002\275\240\201[=\\\213\307\274-n\370<\236\362\345=e~e\275\357[\204=_\265t=\202\000\321\275r\013u\274\233S\200=k\315\213=\340\017|\275jk\216=EZ\203\274\304\037\225\274\342\300\277\275\376\226H\274\031\242\202\275\256qC\275\032\027\360\274\370\360\361\275\227\213\203<_\000Z=\301&.=\005\'\233\275\344\204P=\232f\377<\372\243b<2LF\273\263\r\215\275j\023\322=\224HF\275S\t\025\275;\211\307=\376\2452>wC\247=\236N\245=p\365\250\274\260\313,\275\rt\233\274i\367\t\2764:u\275\265\222\262<\206`\323\275-\373\351\274\226(\200=Jh\243\275\361M\337<)\023m\274\252\202\272<\020C\202=\"y\354=\365\354\255<zT\206\275\260;\212<\005&\243\272\205k\253;l2\342\274<\2726=\240\312\000\276\236N\272\274\006\343\303\275\014d\222=U\301\314<W4\310;M\207\222=g\215\016\2752t\360<\306B\207\275\267u\006=\300\325S\275\0028\213=\306\220\240=\023\210\327=^\230\003\275\266\3310\274\313z\006=\263\273[=e\000\034<\3113\222\275\261\236F=\340l\211:\231\232\033=\335\003\037\275cV\276<p9\037\276\302\013\350=)\030\222=\214\254\'\275\226B\220=`\tZ=e\365\034=\266R\335=\226@A\276\002j$\275@D|=,\357*=\013\246\302\274\363\201\260=\3331\211\275\3063\251\275\"\031|<\273\235\005>\266\233J=\205)\227\275P\313\250=0#6=U@\262\274\360\235\227\274F{\000\275\354\316L\274\002\260\215\274\357*\205=\214|\212=\357N\330<\243e\016\275\265\016[=\243d\357=\007)\034=T\210\306\274|\013d\274\257\234\322;xp\373\274\300\377&\274\215\326\327\272\227\t<=N\316<\275\016f\262<{3\215\274\014{\004\274\214h\000<\342\013\035\274\367\330\026\274\377\335\024<\000\314\331\275\332Y\262<\313\250\321;\2371\035=B8E\274v\033\345\275-\254\017\275\205\244A\275r\257\t\275\254I{\275;\002h\272\017}S=\r{z\275\362\005\310\273\365\350\245=\361\240\222\274\263Z\2538\256\351\231=\222(\250\275\016\345\367\274\357\177\360\275T\250\002\275\3164p=\305\237\256=\000\003T>\265|\024\275fj\234\274\017\321\202=8q\311\275f\t1\274\003TM\271\241\360{\274\265P!>Z\327t=3\270\224\275]\003v\274\r\256\220<\300\251Y\274\231\001O\2750\031(=\232\340y=\353l\221\275\240\266\376\271\232\206\331<\340\217\232\275\237$\177\275/\237\003\275D\306\'=\031\333\365\275r\311\261;\271!]=\266\377\322<\202\3528\273\373\3224=\326\247\003\275*O\265\274\322i\216\275N\205+=Q=I\273#YC=\221J\002\274-\343}<\251=>\275\260E\034=\346\301U\275\252\026\017=\277\367Q=\305\226J\2759\252\203=y#G\275\342\367^=\355w\232\275\326}g<b\310\212<\242@\"\276\307\317U=U\r\277=\324\023\r=cq/\275\266\202r\2758d\245<\206\277\301\271J\216\213;\034\205\027=\344D\263<\037\001\220=i\275\334=\025[[=\034\210\014;/\275C=\260M\217=\203w\002\276A\205\345=S \010<{\251\251\275\314R\023<\256\260f=\250\272%\275\340*\241<)\313\033\275\227\242\326\273WL\202=_\317\214=t\226|<g\001\376<\326\227\201\275\372\307Q;vd3\276\273[z\275\206XC<V\014\310;c3*\274h\252\264=\222{\333\273\245)\210=t\007;\275\021\264\334<\013}b\275[\2551=\336\177\r=\341\345\274<\000Y\002=\2658\306\275\257O\230\274\003K9;\357\255q=\027\264\360;\360\326\237=U\325\315;\351\035+\275y\032\214\275\n\220\277<\330`\303<\200\334\360\274.%C<p\226\272=\306\333\r\276\020$\331\273N\217}\275$\347N;7SC\275v\3770\276\376\235\235=\301\312N<\325\341\261<\016\352i=H\334 >\024\204\217=\304\234\002\276bsk=KkD=\307\320i=z[\031=\343\322g\275S\207\275<\357@\247=\240\345,\275\203\371\224\273\334\005\024\275\245\307\275\273\371p6\275\256\340\200;\247\013\306;<\177\262\275\037\321\000\275\234\320\033\276D\234\367\274X\254\275\274O\246Q=P\0337\275\306/\324<\024z\340=a\326Z=\303\2071\275\370\371\202;\316T\314\275\227\344\214<}&\230\275D\301\324\274\021_\336\274\307\200\370<\232F\313\274\324\231\301<\024\322(>\373\021q\275\362\003#\275\021D\031=3v\t=\313X\232=+\304S\274\025\006\365\275*\223\023=\312\265\214\274\260\035g\271\266\224\267\274i8s=z_\"<A\244_\275\036\246\006=\311\335\272=P\".\275\022\261\254=\307g\025=&\006\251\275\374\227\266\272[\202\300\275>\3773<\347\204\203<K\365\027\275J-\327\275?\364\253=\271\250\372<\031\331\037\275\177&\2109\267w\332=\\\222\217=\\\003\240\274\301.\262\275]\276\376<\0078\301<%\310\"=]e\200=S\212\317<]\002\262=f|\361<\325\300e\274\353@\252\275\301\356\272=\275\r\235\273\307A1=\236\256\210=\226\364X=@\243\003\276\317=\342<c\337\221=5q\246\273\336\006\275<4B\217<vL\276;s\372e\275p\273\313\275\2251->2\r\256=iX\\\273\364\327\331\273\375\362\274=nc\213=\243*n<\177>\265\274Gg\227\274\337\357z\275\243\000\002\276\265\377\231\273\364\355\007=\006\005\274\275\177\031\236=\376\231\031\274\256Ws=\230\325K=:K\240<\033}-\275\ns\203=(\256\334=\0356\271\273\306\177\260<\225p\265=\342b\005<\022\352\266<H\311t<\275\3176\275\020\233\013=\217\322\260\275i\374\220:\333\350\260=b\030\262=k\343\013\275\025m\244\272\027\306\247\275\247R\"=Rc\222\273\355V\241=\003\017\352;q7\246=\3522\314=\323E\334;e\250b\275\3670\210=\344\251@\275\3464\312;\374~\022\275H\207\004=\326k\233=E\374\275\273\352\362\016=\300\014\253=\315\343\033=\030\007\224\275b\346^;WN\221\275\216\345\r\275\032\233\322\2755\221\354<\242\342\353;\331\'\223\2746|\371<\006\275\305\274\262\370\376<\'\203\370\274\3028\312\275\204r\221=A[\213=\035\0078=\351\372\253=\265\241\253=\216\243\207=\320s\033\275\255M\341\275\017w\336\275\006\246\303\275JG\260=\337\345\201\275s\277\375\274\000\332\202<\276)#=,\213\331<;W\277\275 l\225\275\207\204\250\275^d><\237\324m\275}\222\243=\026\003F<A\033\000\275\031F\342\273\364\312\'=\234\033s=q\343\321\275b\376\214\275(\217\006>U\332\377\274\205\237\024=d\365\257\274$@=\275s\273\020>(5\203\274\024\0379\276\207\321\300\273i\274\007=\362\236f\275\021\263\251=\206\261\260\275\0225\310=!\317-\2753\332\277\273\007zB\275C\254\331\274\201(\210\275tB|=\342f\n=\265\017j<a\303\271\275\341\357&=\300\2564=\300\362\356\274\016\302\317<A\340\206\274\tI\214;Y\374\235\274\374\275\025>x\002\364\275b\270-\275\030\323\253\275b\245\260\274>\336\017<\220or=/\010Z\275X\236\006>8#\334=&\037\230=\n\366\"\274l \213=\017\242.=\246\252\212\275\n\227\246<\232W@\275p\350\332=\341U^\274k\332|\273\367\202K\274!\342\035\275\227Co=\275&\372\274\267\032\270\274\341\274\273\273\325# =q\307\243;\307{;=\177HE=\004\0361\2758\224f\275e\001\242\275$\245\207<\262;[\275\'\265\274\274\270\222\032\274j\324\207\2750.&<e\301\000\276\317\216\t=R\r\317=\245\334\230=@\244\202=4p\255\274\217\360;<\003\245X\275\335Ql=\207.\n>n\271\275<\204fX=n\354\345\274\266\350F\273\241_\313=\000E\360\275*\306\352\274\007$,\275\307\372\221\274\356\010w<\340D_=\330\002\326\274f\312S\2757\323/=D\t\213=\341\340t=\"\006\t\276>\335\204<\037\002\377\275\242r\201=S\351\274=\001)\034\274\004\274q=-`\241=\236C\243<\256p@=a\245#\274\027\253\310=\024\251\032<\023\344\252=\001\240\320<\014\210\355;L\345\020=\265\004\334\275\214\240\246=R\351\037>\035\204\270=\352\260\250<\341L\246=q\342\224<wv\245\274\005\022Q=-\2754\2759\023\000\276\347),=iqR\275\035\370\377<\332\234`=\323\356+\275\226\'7=\023@\313\273*\351\010<>P\262\274R]\014<\335X:\274\341KV:\333\331\210<;\265\026=\333\325\206\275%n\203\275EI\324\274j7\230=j\320)\275\240\361{=\321U\234=_\354\254;\361h\245=gh\210=\247\025\025\275\007\224T\275\247\376\300\275\344\362\004=j4\020=\315\037\223\272\207\026\203\275\3371\274\275p\311%>\331,\313=f\330\236<B\262\207\274\021\253\220=\224n\222<2\234e\274\030\024\274={\030\302\272=`\200=\255\202\000=,\215\024<\210\237\\\275\351\250\035\275\325\323\220\275 \325\300=\216|k\275\243nl\275Ru\300\275\251\247\264\275x\204\025\275\000Y8\275\036t\035\275\032O\303<\272\375,=\377\244\244\275X\323\243<\003\345\270\274\000\254\n\276L\320\322\274l\231h=\250\010\034\275\034\241x=\224\025 \276JL\'\2732h\214\275,\204\234=\000\274,=8\025`\275\374\212\217\275\261RM\274{\272\203=\207\307\317\274c\372\226<\177\341\235\275\335\327T=&\376\300\274.\355\265\275\262\362\016=\310\256\033\275T\225\001\276x\211\364:Ru\213\275}D_=\317\372\225<\006\030\271=\225\317\332=Q\312\324=\231\277\357<9\022\332\275\200\332\312\274\203]\207<\016\215\230=\325YB=\364\016\205\275\325\032\256=\177\237\221\275\240y\373=e\353\007\276\017\233\020=*\t\350\274\267\257V8l\241w\275Z\330\n=qfM\275\030\2431\275\306\3273=lg\361;\353\010\025\275*\361\376\273\324\267\336\274\037\262\237<\304Kt<\005\350T\275\014f\177\273\037\222\004<\007\014)\275\207q%=\276y@<\366c\010=\312\007)<\342\2554\274\232>R\274\244\033\324<\253\345L\273\354\271g;\231\323\322\274Z\202%\275u1\336<?\256\347=eg\341\273\324\300v\274\262\227O\275[{\262\274h!\373\273\357\260\'<p\246\206=[\363\212=i\240\270\275\307q\272\274aA\241=\342\032\323=\351h\310\274\2648\025=\202\215\300=\243b\036=\327I\033=[>3<\254/*=\234\260\206\2757R\031\275\214/+\275\347\372Z\274\202\0167=\320G\007=\003[K=\017X\273;m\363.\275\2536\276=2y\022<\340\325\325\275\355\321\244\274\222\227;\276\371}\213=\036\342\'<\210V>=\334%\367\275b\227\206\274\350\212\271=/\221\230\274r\331]\275\2260\274\273\355\036\275;\233/\271\2745\177\'=\33318=IU\210\275.K;\2751\231\014<\265\271\265<\272\316\263\271%%\374=\037\367\266=1{\022\276Sd(<<(\004\275i\253\237<c\231\273\275\337\036\362\275\207A\230\274\232\266:=m\026\214=,lH=%lZ\273\035zT=\264\232C=~9X\275O\352\036\273\021\332\276\274M\331y=\230\237/\274J\006M\275\177\372,=\023\023\236\275B\037\312\275\272,#\276\360\257M=zN6\275\254\207=<\0028\240\275\3508\253=\001R\373\275\1777c=M\020\\=\273\350\330\275\017\254)<\224\321,>\244\234s\275\037+\031=n\260\021<\216\013\004<\206\231\201=\002\025\354\274n\354\373<7_\225=\027\323\253=\032\032\317\275\350\\|\273\327\216\310\272\372\313\\=]S\242\274?-\321=\\\211\0239\227\300\256:\236\t7\274+A\377\275\211\371\205\275\316\001\227<@s\262<\233y\234=\247<b\275\233Z\224;\037\t\217\275#\3277\274\03718;\t\373\254\275\340\374\205=\225\255\211\274n\272_=\026 \242=\001(\223\273\252\342L\275W\207\206<3\370{\275^\237\010\275V\322\200\275\035\320\014\275\013\305\033\275\370y4\275,@_\275\345\327\247<\254\366\216\275\270 ]\274\312\216\243;\231v[\2750\254\t\275`7\273=\220\327\002\276\332J\030\275\363\030\253;\0307\271=d\\\224<d\221\360\274\177\\\346\274x\325\226=\336:\233=\370\321b\275[\202\002<\245|\014=\347\227X\274\017\323\006\2765\202E=-\241\\\275TY\272=\273\336\337\274(\201 \2748\312\236\274\216x`=\347\214\275\275\014\344\300=\277\033\260=T\003\223=\'\033\241<\027\312[\275\007\214\010>c\020n\275\333Z\332=\351LM>\373V\376<\322\214!=\351\021\205\2757\260\217\275\263f\377<\242\025N=M]u\274g\177\215=\322\372(=\363\242\003=\027\371\332\274\314l\300<\231k6\274\274\213\227\275\202hx\275\377\004\000\274%\t\273\275\230\'W<~)\220\275\376\221C\275\033\275 <A\000\004\274\245\211\216=\037m\220\275N\220,=\270^\302<\361\230\226;\264\335\301\274\013\t\211=,\364)\275\255\'\251=\336\251\224\272b\312\231\274\362f\203\275\'\262\242<m\n\013>~\334O\275`\202\021=9\342\267\274\302\325\275={r\256\272\232\336F\274\277\002\"=\235\246\n=\330\rj<\221\370\211=\337\341\247=(\237[=\002\266\030=\200\360X=<D9;\341\025{=\213V\033>\324<\223=\275W\355<\275\0109<\264<\226=\335g$\275\357\205\365\274\365=\244\272)\003\262=\343\375-\274\231)\271<)h&<\3379#\275\206hd=\317\350\267=[\0314\2753!c<\216\364\200\275aK\024\275s#\352\275\365&)\274\200d\342\275iH\314\273\025\244\020\276\211qj\273\262^\207\275\023\007Q\275F\006\304<\203\023\313<\240\177\321=\303F\242\275yU\227=\005\237X=\033\014\330\272_\265\"\275e\200\223=\330\231|<\r\246\265<O\315%\275$\327\256\275\316\035\224=~b\332=ww\224=\310\316\350=\020\202\223\275\247\217\242\275\351x\322\275\375=|\275\250{\243</\266\n=\362z\'\274|e\254=Z\374\251\275f\202T=\220E\r\274\332\245\220<\324\267i=\026\006A=L\237F\275\320*\264\275\362\022\360\275#\363\346\274w]\265\275h\337c\275\0223\234\275\334`\354=\022\262\035>\364\305\221=P\301\320\274\002\244\357=:(\273\275\010\265\224=`P\004>8\375\336;\013\305,9 P\245\275\014\332\207<\317\367,=\262\356\367;\275B\257\2741\221*=B0\245\274a\346q\275\245\005\016>\363o\321=B:\214\275x\320\251\274:q\322=\327\0040=\\\254O\275\0051B\275\222\304\342\274\254\022\313\275\033J\252\274\014G\232\274y\016\317\2726\265\327\273\321WE:&\304\325\275Wa\251\275V\242\003\276\303\014K\275K/\016<\023\214\211\275\341!{<cN\365<\235=\211=\315\215\213\274|\013e<\247>c\275#\340\206\274_\016\311\274\345\305!=\022\000\233\275\t\330\013\276\355\270\362\275fp\342<\311/\337=G#\206=\353\275\345=g\'\201=\375C\200\274\257N!\275\010\211\265=\0014\n=\311\310_\274:^q=O\256\020\275\253K\211<\306\033g\275q!P:\220o\314;\227O\016\275\335d\360\274\216oh\274\355I\371\275\376\236n=\035LU\274+v\300\275E\303\311<\003\3773\274\315h\362:\226X\267<\243|A\275\377\215\030=\212\262\207<\324\334\213\275\016\250t\275\007M\342\274\306\270L\274e\235\306\271\2761\237=\345\254\200<\311\225\252=z\310\257\275\367\347\335<\033\013\242\275\376\274M=\t\343P\273\267\224\312:\226O\036\276?T\017\274\272{!\275\273(\350\274\006R\317\273bi\346\274\300\347\276\275H0\001\275x\272\226;\006j\031\276a\006\253\274K\320\243\274x\027t;\365\200\307\273\223Z\037=>,\236=\326bK\275LO\227\275\314XB<s\340\224<\252\276\347=e\355\253=\275;%\275\311:\226\272\367\212;=h\273^<\273\212\336\275\327\307\336\274B\250\267\274\032\376\235\275~h\334\274|N+>RL\204=\335\323\210\275\240\355\366\275o\272\201<\r\305\334<;\341\334\275\240\031\327;\214z\222\275\036\007\236\273\347\351\317\273\204\027\214=\013\373\000\275\031\224v\275p\371^\275\357\321E9\231\276\000<\032\327\272\275\263\324v\275:\230[\274\315\303\261<\262?\304\274\365\204U=\n\217W\275\271\236\201=\274\314\212<d6\2169\241\004d=\370\000\200>\272\225\260\274\216\255\222\275\342\242t=Uqv\275\017v\320<\367\026\215:,\340\377<\223\2337><8\320\275\002\233\"\275ZO\242\275\224\260Z<\360re=\246\315\242\275\220\322\330<\353Y\024\274\315\270e=\363\345)\273\307\'\017=\242(u\274Ya\331;\375\334q\275\330+\024=pg\222<\242~i=\007\324\006\276\216#\260<e\005\n>\350\257.=\273\226\274\275L\025L<\2017\206:\177R\234\275$\356\313=\305\200\251\274\000\317\014\276\301Z\021={Dj\275\264\246\303=\306!\366<|\247\342<\342\342\347<kL\202\274\231\341\340<\230G\203\275\346\373\355=\024\254\272\275\277\020\234=\3344Z\275c\265\211\2752c\310=\216xI\275\030\340\364<\372\033\362=\332\350\337\274\213\037\026\275E\334\217\275\237\367\026<\346\331?\274\302\2236\273aQ\343<C\273O<Q\021\207=\354\301\034\2731\025\377\275\301\273n\275\351(\000=m=\377\275jO\334\275\000\\\260\275\037\203\264<\236)\255\275P\304\271<\343D\020\276\007\370!\275\232\r\366\274\\\177\266=\232\335P<v4;<\274|\031=\247\251w\275&M\254\274(\305\026=\362\244\277\275d~y\275\010\305\010=\322g\277\275y#\237<\354\365\032\275\tM\230\275\"9\251<\007y\002\276\272L\232\275\360z\033=\024<V\275\257\341\311=3\3616=\324\203o=\024\334\357=\271\242x=\000aG<\200\207\304=\001\217n\274\226\016W\275\337!\231\274~&N=\226]p<\255\363\232=<j\301<~\364\227\275\346\001H\275 I\034\275}h\021;\361\341+=\0306\257<u<\020=\362\370\014>\213\375\301\275b\034\314\275XG3<\347_m=\005]E\275XH\214=~\034\036=\324\303\202=\000\262H=\336\342\016;\007\351F=\347\345,\271\304QK\275\223\305N\275\034\274\315<\014\316Y=\367\030\305<\314n\347=\377\t\232\275-YM<\213\023)=\376\234\007=\253r\224\274\315\356{:\335\306\240=\242\r\363\274\325\330+=\3146\230=?\303*\275Y\307\252<\2461\003\275\301\245\270\275\336\362$\275\273\201>\275\213=_\274\364\003\325\274\034R^<\251\240\025<N\257k=\004\021\211:\221J\212\275\276\177\224\275\211\037-\275\213\r\250\273\314\347\236\275]l\344\274Df\253=1Y%\275:\306\362;X`\272<LM\246=\354b~\275)\261\216\274\303t\236\275\300u\310<\315U\000\274\270\0212\275\010pJ<\207]\250\274\330(\363;\251\324\234=\260f\355=y\207\332<\200\254\200<\313p\202:-]\262=\215fz\274\025t<\273K\034a<\\\244\247<8x\234\274Qi\311\273\320\351\205<}@\252\273\374r\231\274J\r\035=#\021\013\275\356i\030\276\335\221\006\275P\256f=\000[\204\275:\237\003>u\010O=\021\236\203=H6b=@\301b\275\316\353\273=xbH=\326\241\036\275\216;\021=\002U\277\274\"@\253\275\177\2019\275\257*9\276\2350\210=6CW\274ne\240<\315\357\177\271s1\261;\300\356\226=G\371*\275\270A]\274R\337\222\275\215b :\274\343\264=~4d\275?a\343\275R;\234\275[/\246\275\212\222\231=\265\242\016=\2076\377\274\001SK\274#\2219\275#-\027=\216\341<\274FP\376<\014\034-\275\266\223\212\275\252\355\314=!\310P=i/M\275jj\016\275\323\334\241\275>\247(=^E\235\274\270+\026=\261\346f=\020\346d\274\234\307\347<\333\372\021\275_/\202\274\236Q\002\276\3136\337\275\244\006\264<\245@v=\201\013\254;\200\376\006\275\364{\353\274\304u\n=\356t\207\275-77\275\322\361\223=\211\364\311=3\357\215\274\277\253|=\251\313\343\273T\305\026=m\373\264\275-Q\031\275\222\000<\275?\266\316\275\312\316\002=\331\\\247<\264_\030\275\004\017\232=\275\3121=\344\370!=n\267\332=\333\037\275=\314\231T\275\235\204\371=\324\013\022=\202\224\215=X\307}\2747\336\203\274\366lc\275\251:d=\004X\261\275\373_\236=\356\221G=\327\331\242\275\215W-=\326\231a=\372\302\213==\025k\275\2675x\275\210\003==\215\375\004>\271\323;\276Ik\023<\330\360\027=\247z*\275@\373\221\273}\233\200=Tau<M_\342\275\316+\'=f:i\275~\334\034<\025_\244\275\236:@;/\256\275\274\211Y\370=2\374\031=\375O\2269)\214\221\2752A\006=\203r\277;\217\264\256\274\224l\256=\261,\304<\035\244\224=\005\304\036\275\366\310\032<\242\353U\275\247\217\034\274&\366\020<w\207)=}\262\314<\312!\203\2757\t\230=\255\'\310=\302\363\263=9\3217\275\302Ti\274\340\273\003\276\354\311\265\275\340\273\201\275\301\364);\253V\300=\375k\266<E\357\324\274+w\210=)\221\006\276=K\256\274\n\256\260\274\016*]=\\)\255\275\243\227\240\275\342\026\361\275}\230\202\275\203\007:<\214\321d<x!$=\257<\004\275FVZ=3`\222\275\035\000\206\274\256\320a\274pyg\274\310@\t<\014j\010=J\001f=\312\320\253\273\241\237\322\274*\032\246=F\214\0328[-\030\275\337\245\306<Q6?=L\272)\273\244\346\302\272.t\215<RO\236\274\214\215f=\326-\240\275\327\214\257=V(\036<\007\021H=*\353\r=:\232\322<\316\211\271\275W?\203;\351\363\311=\202\032\017\275\352B\212\274\247\270j\274[\2743=\243\355\200\275(O\305\275\233.\003=\027wm=\227Gd\275VK\354<\250\t\317\275\206\337!\275\207I\251\275\304\312}<\013Dr=\301.\316=\344\243\301;\004\360\205=K\265\277<\024Y!==;\335=2\205\260\273k\365\236=\322^\320\275:\3734<\031s\203\275M\244\233\274\346\227\273=!\253<=\274\313&\275k\322\327=\301\377U\275]\340\222=\223ey<\033\'\314\273o\346\243\275\2163\364\274g\344=\2732\340.\275I\005\270=q\210\220=\000\r\225=\254\243Z=E\241\367\275\264\300\253=\274h\272\275\204\276V\276\3379\265=\260\232\232\274\3758\352\274\237\355\216<u\337\225:\246\357}=\222\307}=5o1\275)`\330<\r2\347\274\277\325\352\274\221\371\t\275F\313};|\261\233\2758/P=\301o\021\275T\213\000\274\244(\355\273\023\215\232:kf=\275\263jG\274L\013\316\2729\260\311\274\244\242\004\273M;\270\275P\365o\275\257\373\013=\n\030\346\274X\027\030\275\200\363\205=R\347\031\276T\213\232\275\317\205\211<\374\214g\2757\375\266<T\334\014=\341\2177\276\026\261\227=\247y\036>G\347.\275\210\r\340\274^\003#=V\006\026=\344\003P<\347x\241<\007:\300\275\345\363\345<tvF=_\361\232=(\031M=\244\267\246<\343\331\231<\330\251\247\273Wq\321<\021\237(=\256\265\221\274\357\337\276\275\322\017\263<R`\276\274\217\2047\275\374\004\254<\322\363\330= M\352=\n\357\346\274n\211\237=\243u\220<+\365\336<e\267\257=\246q\334\274\307\337d\275!\322\"\275\317\207I\275o\026\330\275N\221\235=\020\230\311=\262i9<\354\261\001\276Ui\"\275\245\021\010>k\007\317<\031\252\313\275\210!\013\275:\323\3209?\367\352=L\334\323=\245c\350<G\200O\275\365\356\213<\200\231/=\362\032<=0\265%\275\364\375r\272O\035\222=\273V\301=\344--\275\370\332\320\274\336\274\033\276\242\357\233\275\356\006x\275\356N\372\274\322\2658\273u\247\254\275\306\003g\274\270\241\214\275\005\255\324\275\2352\273\275Fuf\275\006\377\023>$Q\214\275\261\210\254\275\000K\010\2743\265\\\275\237g\201\275v\277p=\225\317=\275\304\342-=\303m:\276;X\244<\021\223\256:\336UC\275\366\251\305\275\020\242\270=\032O\370\274\305\254\262\274\013=\217=J\313\334=q\343<=D\222x=\265(H=\346\321[=\260\336+\275\203\371%\275\n\245\335\274\177eN=7\3544=\313\206\254\275\307=\031\275\310U\303\274\'\277p\275\370$\226\275\213\266\273<\243\207$\276\360Q\001\275\262\344\250\275d|\010=\315\216)=T\013t\2735\315j\275\207\363\036>\036\r\203=\222\026\3009\014\223n;w\3006=\252*\236:|\025n;\035\2722=\024 \031<~6:\275\243f;\275\221;\001=\004\230+\275|\376(\276\030\032`=]\333\030\275>$T\275\311w\373\275]\360 =\274\360\271=\032V\225=\303\215\226\275\267\007T\274\213Y\240<\356\027\007\275\244\225e==\031\030\275\031\3249\275S\351\226;Rjb=\2336\206=`\206\216=\034\212/<\310Y!<$20=Ta\013=\313\367\217\273\215\010\214\272\265V\223;\222\262\200<$-Q=\345~\t<8\273\022=f\260\242=\233\272\263<]]^=\344\365\034\275\000\3634=\202\350\220\275R\267\235\273\225\036J=j\247\216<\252\206\234<OHe\275\243a\013=>\343\025=\016\310\347<\026\252\\=n\304\361\274B\375\010=\321\350\300\274\252I@\275\361\267\264\275w6\007\275\325\234\003\274p\025@=9C\317\274Y^!=\272^\222\275\236\362\371\275\2518\313\275J1\014=\330\263\364\274\212\215H<K\245\243=_\277\301=\204)+=\343\014o\274\361\274%\2769\014\222=\354\006\014=\3576\313;\331\001\007\275\211\253\201=\0330\341=\002S\021>\267\363s\274\240\276D\275\213U\013>\236{A\275\021O\260\275\273\225\275\275\025\347i\275g\006\341=X\036n\275]\237b=Jy\020\275\rb\260\275\026P\215=\374L\346<\311\265\352<\244\013\342\274\263e\323<\256>H\275\225\255\242<\177m\003\276nQ\253\274?\330#\274#\372\001=\313D\225<0\362\212=\220\230\344;\322\3148\275\360\"K<\343T\257\275\036\236\236=\330)Q=\250\r\005>\347[L=\2356\232=\207\377\020<m\363*<[;\216\275-\313\357\274\332Hz\275f\242\230\275\273\322\302\274\205\375\260=\336\273\360<n\352(=\213\223\374\274-r\206\275N\343\367<\2266\244\274\360X\234\275\374M\013\276hl\234=L]\204\275\023\315k\2752\353;<\234r\330\273rw\022=\371M\263\274\223\304\273\274\331\347\207<\214`\030<%\004\033\274\tq\262\275\313\377\207=\326\\.\273F\255 =\304\353\225<\203\230\037=\225 \253\274\372\234\211;\373\r\355=\242\262(\275\303\306\311<6R\330=\354\310x=\330X\305=\024\375\245<yj\351\273^\320\317\274)m\\=v\265\033\275Q\031\243\275\242K\305=\320>3=\367X\333=\351\247\233\275\023:\375\273\372g\216=K\320\177\275\2360\235\275\206v\254\274\227\236\351\274\247*\013\275m\000%\275\206-i;\361n0=\023\340\321\275\337\216%<\250\005\207\275A\351a\273\366\307\364<8\001\362\273#T\002=\204]\252\274^\260d=\314\027\331=\330\031\365<g\212\222=uO\353\274\356\024\317<H\r\255=\266(\357\273{ C<\262\205b\275\340\3626\274$T\300\273\303\313\202\275\227\355\326\274\344\260\007=\\\340\010\276\361\233\242=\031\237\230\275S\264\233;\352\'\326=\372\327\001>\037\334\303\275\003\324C\272\'Aj<\311\035\020=L\035\"\275U^\211\275\210K\322\274\327\031\203=\365j\341\275\027\255G\273I\3260>\371\017h=\177\007\210=\022S\275\2742&\325<V0\351<gaL\275\315\020\032=\253\"\031=\0026\023\274\221d\256=U\370::^\336&=;\354\265\275\254uf\275\316\013W\275\231y\234\274\213\220\001>\354\343@<\220\224\305\274%\227e=\230M\215;\262\224z\274\341a\235=W\007\261\274\202^Z\275\313K\2619\367q\020\275_\230\237\274KI\004\275\221\001B\275\026\240\235=X\237F\275\333\305\313<\337\205\312=\373\014\234\275\271\235\204\275uR\232;Z\210\274\274\245\301f\275q\223\206<\210\007\223=\237fM=k\324\357\275z\371\317\274\222\020\221=-_\256<\261U\022=\260\273\333;\277\234\215\273\3137\t<\377\207+=w\021\334=X\034\261\275uA@=\257SO=M\377\305\275\203\"6<\344\353\327\275 %\305=\201\375\342<Ca\031\275\"\204\220=+\025\336:j\337\336\274\027\266m=\252\022^\275\206b\226\275X\372R\275\177\003\276=\323\313\251=\332\006\225\275\000j\235<\232\321&>\320\364\002\275J\216\207\275\270\254\211\274\363\352\035=\257i\204<\241\361\262\2734\341\260;\214\317S\274\251\354w;\020\227\352;\265?\277\275\217\373\301=\242\204\221\274\233\237\004=Z\236*\274\220\210\300\273N8t\274B\\\233\275G^Y\2754Kc\275\351\305\013;\364*\241=\363\273r\275\3330\r\276\236%\312=\326\247\227\275\262\025!=\313\315\253\275\005Z\027\275\2435\334\270c\230\347\273\224\203\241=D\256?=\n\304\250\275\304\235\001=\n\r\347=\016\\[\274\212\363\236<V\325\250\275Dj\366<\205\037\301<\220\335\0109%h\255=_\025\236<\031\360\003=\347\335\207<5\363\254=S\025}=\345\372\253\275o+t\274\235e\001>\244\334\034\2764\016\305=\027l*\275\237]\313\275-\205+=D\033`;\350\010\207\275hN6\275:&\311=|\250Z=\273:\261=\325\304/=_\371\237\275\3761\000>\307Ug\275\217\356\332=\251\205\270=\326\177\343=\242\216[=E\005\222=\215\rB=S\006\201<\177\257\'<\026\217\222<Y\211\200<W\252\023=i\351\237\2754\304\267=O6\023\274\241\301\305;:U\005>\362\031\215=\251\325\031\275\302\334\031=\217c =~\364\017\275 \002W=s\276(\275\337~\004\274J\357\240\275\226IA<Gz\010\274\216\270a\275\3551n\275\013\327S\275;1\334\275y\r6\275\227\016c=\030\227!>\306\325(\275hi\317\274\214L\262\273\357[\247=\334\'\370\273\277\344\207\275BK\253<\356\224W=\253\226\315\273%UG\275\374\355\262=\300\236\234\275\350u\034\275\255\3637\275\'\n\337<\320:2:\200\337@=\n\207\374=Y/\250=\271Cw=\324\260\351;\373R>\275.l\241=9~\222=g\345\305=\206H\037\274\000\240{\274\014,6\275\365\266\252=\351\237\235\275\264\007\200\275\245qJ\275zE\203=\332\246\316;KG\220<!\235\022\275\327\252\306=\004S\314\274\243\330\366\272XE\261<@z5\275\026\002\315=xm\304=M\"\\\2751R\240\275\322\343\202\275c\321\220<a\222\341\275K\211\376\274Xv\233\275x\222\312\275\033\003[<0*\205\274xt\265=\376\221\257=9s\225\275\330\0132=H\211\023\274\000|\233;\265\001N\275\'$\252=\331x\n\275\216\347 \275j-]=\007.\346\273\017\301\233=\177\022\252=?\254\221\275\215\204\330=\277\302h;`w\003<\330x\256=\214\001V\275\323q\306\275\330\311\270<t\016X=\352T\217\275\330-\235<\017\371\002=Q\301H<\211s\031=\035\344\224=\003\374\373\274\251\025\233\275\333hU\276\350o%\275\302FP\275M\020.=*\322f\275S\031\334=~o\340=r\251\267\275e\240\005<\270\345\341\272\313\201\304\273\311\025\212\275\321\017e;\307I\206=\326\330\305\275*\026\272<\244\274\245=\317>:=\005\216\220</\226r\276./\212=\330S\366;I\242\\=\032t\010\275\354y\t=\315b)=E\332\207\274\352\232\037\275`\324\034\275\375{t\275P\216\225\274A\334:\274\000\\\n\275\325\370\035\274ll3\275_\001\242\274\232\\\n\2741\353H<I\256f\275\0170\320\271\204\343\005:\225\273?\274>\207h<\240\2615\272C\332e\274\326\t\232<\2532\310<1%\262=3A\371<a\203\252\274Id\311<\311p\307\274\323Z\321=\314\324Q\275\365\334\315\274T\036N\275E\312;\275\267\374\204\274u\274o;\003.\003<\321\316\372\275\031\\(\2753\262w=v\027\353\275i\201\270<\301G\214\275K\325\273\274\202b\274=\250\305M\276\324{\031\275\200(\317\275L)\215\275P!m\275\200<\266:$\026\314<L\034\256=\003\356&=\327\375)<\336d3\275j\244\361=v\323\371\275\027P\030>\330>\007\276(\367\305\275a}\r>\204\370\315\274\177\211\027=\361\374\243\273\245\235\006=\220\376\303\274$\234\317<\322\2040<\001\321&\274\010\r\"\275]\332~< 7\333\273\360\300s=`Z\227=\214\223\177<\370}\317\272W\2118\275Bn\255=M\354\247=\234Y\202\275WV\344;\022\024\360<\347!\356\274\341\260\344\275C\257\023=\275}\217<\312\325j;L\376\220\275\n\345\347\274\277\001\347<\003\325:<\207c\016=\271p\357<\r1z\275V3\013=\035\212\364\275\010\263\350\275\r\265\205;l\311\225=\224\341\201<8 \234\273\365\300\301=eJ\016\275{\276#<\316g\034=\333\334\322\275\361:\205;Y!\365<\263>\212=\262\211\203\275[\366f<|\224\372\274\325\016Y=b;l=\272\336\014\274F\376\027=\027\207*\275\260^\266<>x\n={T\"=\333\017H\275[\216\322\274\251\027<;\346B\371\274\2706\267\275\324\261\030\275\347=)=\027U\031=\303\246\026<H\223\265=\221\356\217\275\027\3709\274\244\235\335=\206\245U\274\266\263\370\275\200\322\017>\372\230\350\273\r\177a=\236\307\221=\273\356\253=\273s\272\275\235\031e;R\367\200=k\345\230=&Y\\\2750 \315<S\353\266=2\004\335=\317 ?\274.\354\276<\362r\217=T\246L\275H<!\275\342\320\025=\023_\337;\246\231\225\274?\241p=Yse\274~\215\255\275\300\334N<\020g\271=\274\376\307=\310\214E=\264\376Z\275\014e\221\275\215\220\247\274\033\026x=\273\321$<\256m\024={Q\031=\312\006\245\2759g\245=X\222\311=Kan<(\275\240=?\026\220\275O\304\\\275\245\200\335\275q\261H\275}2\272\273\276o\233\275\332\224\343;\027Ov=4\271\241\275`\234\217\275]\220\335<\031\256\254\274\247\323\221<i\347\314\275\371\342\322\274\242\327\305\274\222\377\352<\201\276\320<\363\356\363\274\375t<=\025\264\250\275\264`\303=\351+\222\274N{\315;\3534\235=GJx=\220a\005\275x\221\235\275[n\221\275\241\227\260\275\344.\022\275\334\244\337=\t\256f;\262aN<\372\016@=\354\250\337\275\222L/=\222>n\2741Z!<y\246h<\204*\365\274\237\315\367=\350\216\212=n\rS\275a]\357<\342\304k=Sc\212=R\236\001\276\307\002\235=_\3257=\234\322\222;\226\223\251=\272\216\242\275\023\242\210\275j\232\203=6\325q=\217\274O\275w}\224\273\'\254\266\275\234\227\232\275\261\3504\275\322\n\200=\314\216\006\275\301=\t\275\213\343\\\275\370\271\312<\315hd\274\032\001\243=$G&\275\222\200i\275\030\n\031\275j\025\255\2744\265\014\276\242\257\r=Y7M=\365]\033=\342U\214\275]\212\226=\316\034\260\275Q.c\275\306\215k\274\354\006F<\320m\251<\234\247\221\275\326\314t\275E\260\230=Q\372H=T\362J=\206H}\275\004\221D=\261I\203\273\317T\222=\275\367;=\205d\232\274f\215C=\271\223\374;V\247\244\274\346N\205=N\335\004\275Qh\224;\203\350\226\274=\021\256\274\351\017)=O\263\365\273W$\211\275&\277\016<4\026\025\275\342\311\004\275,J\223=|$\017\275\325\207i=A\361\200=\030\264t\275^\266\340\274f;\235<+>a\275\233\305\362=\320\025H\273VJ\266<\252\214\2717\234\005\202;\034\207\001\276\005:\326<Y\003b=\222&C:5?\333\273\244@f\275f\203I\275\036t\250\275\303n\n<\000s\264\275\030\315\014<\225d\t\276 \272\236=~7\372<\246\263\204=\245\236\023\267\2266\222=or\361\273NF\347\273\024\330\335=\0173\372\274\023\373\240<V\217\376;\242t\251=\321N\360\275U\024\205=\361\257}\272`\0309<\316^|91\230\r=\032+\'=MJ\344=B\244\240=\222p\245\274\204J\243\275fMe\274\244\001\206=1\311\'=H\325\036\275J\272\232=\337\034\337=\\\333\033<\311\363\036\275\177\'\037<\n>D\275\356\313\327\275\363\022\366\274E>C\275\312rL=V\242l;)@8\275\261\275\223\274\306\252W\275MKP<\005\014\244=\014\225><i\343\243;x\263\341<\254[\003>\306\366\004\275;y\311=\2362\016<\360\304\t>\031=\344<\371\006\204=\321(\005>A\254\005\275k\0257\274\371\\\272\275T\230\310<\2353\005\275\336\2208\275w\017-=\255\342\225\274\200\216\237\275)\372I=?\213Z\274\251\246\201=B\347\222\275\005O\334<S\262\\=\200E\221\275\235\027V\273c\215B=\3041 =\022\305\356=\256a~=-\315\007\275$\217g<\217\177\n=\022\354\260\275\362%D;\351_\014=\201\311\370<3\276N\273\304{\233<\236\005\025\275\221\276\010\274\364\027\310:\325\257\320=n\212\372<\346<\214\273IK\016>w\363\357\274-\r\354<\337\361\277<N\357;\274A\357\013\276H\376X<$\323\027>36\234=\234\332\000=/\210\273< \240\024\276\307\315\230\2752\217<:D\243m=\343\t\276;\362\364\255\275\030{*\276\316\022L<I8\240\275c\026\247<z\r\002>G\244N\275\351\243\241\274\237\351@=5\201\336=u\t4<\375l\005\275\230\361\241\273\3631\025\275\205\2617>\\\320y\274\275R\305\274\177Y\226\275P\236\000\275X\356H=\340\203\353<\365+\231=\324E\331=\341F2<\231\003 <\234\267Z\276o\336\221=\225@J\275\367\326<\275\r;T==S2\275\345zN=\010\353\372=\324\031\t=\203\311\363<Y\267u<\270O\301<\010\223v\275\357\030f<-rF=+\224\303\274n\214X=\201\341\361\275$+\177\275\261\263\217=\222W\274\274~\370\206\274\006\271\303\275\177\332\305=\032tb;\034\2530=w\206\315\275\242\034\256=\222\311\214\275\234\0061=\177\316\227\275\207\2162\276\t\303\246\275g\227T\274\303\031*=wY\032\275\306Z\374<\237s\016>\260\307\237<b2%=\030\221:=\035\226\372<\362%\232=\266&\207\274/T\256\273\277\000n=}$j\275\372\262\t>\202{6<<\360G<x\371X=\262\027\221=\266@G\275\374\260\225=\225G\245=\274\037\352=\037\311\236=z7\010=$K\200\275\236\2416\274\343\026\225\275\325l\263=\236\254\304<\265H\351\274\300n!\274b\330#\275\204(\031=\001\305m<Y\264~;\217\010\344<\366\303b=b\3117\275\003\267\202\275\361\351F\275X\251\r=\014`\271\275\214P\212:\201\270\355<\205\252\204=9\210v<e\'\333\275\246Z\233\274\032\r\224\275||1\274q\034\023\275r\321z\274b$\275=Y\302\007\275 \002\036\2752\034\366\273\251\033\321;\262d\232\274\311\026\354;Km\212=\263\332\\\275\033\256\023\275\323\304\312\273\366\205\262\275\344\234A=N\271\027=T\360\315;Ss\302<\3421\306\275\323]\325<\266\376\352\271v+\213\275\351\261\252=\313\302Y\275\02378\274x\243\037\275\000\243\214\275\304\033\010=6\367\300\273S\213&<m\341\230=q\256\312=\375\354\213\275\277\330\007<[\025\245\275\3538\\\274\270\0003\274\207\366\327\275\017\360\361\275,\250\347=\3437\340\274|\373\"=\"\306\227\275\025F-\275|\275h\275\311\271\377\273\357\262\016>\026Y\322\275\301\200\225<\312\025\256<X\206\232\2745\236\211\275R\246\021\276P\333#=\275N\'\275\213\217\027=>ir\275\007\364\r<\321m\212\275q\322\247\274sP\254=L<\375\275\260\265\325=\306en\275%\034\345\274\312\'D=z\020\026\274\305\341\\\275\021\325a\275\346\030\004=\265\317\332\275@\336\371<H\017+\275.wk<\327\023Y=\205\031\013\276\r\031\206\275\376\334\204\275l\020b=%\026\267<~\013\227=-\336\242<\201\024\256\273\334Y\001=\377Mq\275\227N\346=$\236\301\275V\342\316<\245\031\332\274\356!z\2754b\004>7G\236<\300\274z\274\356\355\246<\307\303\247=\371U\024\275\227\036\254=l\315x<\2547P\275\307\227\314=\315#\242\272\212\275\200\275M\002?\274\205+\324<\377\010!=\215=\352=\305\273\010\276W.\377<sm\t>V\250r=\203\253\203\274IK\262\275|\346\377=N\021\232<\210\365M=1\357N\275\236/!=\241\315p\274\272\327O=\375\220 \275\366*\232=\227\n\251\275s]p=H[(=\336e\331\274pZf=\227\213\316\275FJ\366\275J\314\350\275^Bt\275\305\376/\275\214U\024>\361&\277\275\321\'J=\272\023\035=\357c\216=N\300\335\274\377x\335<\200\025~<\244e\264\273\305\232\004<)d2\275!{\335=u@\247=\014\232\310\275\031(\204\275I1\177=Y\366\206=\023\304\377<\352m\034\275_\347V\275\242Zz\274Q\356\223\275\202\256/=\023\351m;\323wJ;:\321w<@\275\n\275\317\236\345\267(\207\302<\356J\017\275BL\235=\'g\234<\370\206O<\262\350\326\2740\301\'\274C#:=\310\356\000=\320\036\377\274\367\236\300\274^\225\226\275\033\236\366<@r\000>l\300\326<\3161S=\254{\333\274\376kl=\3079Y\275\355\200\266=J\021\217<\306$\266=x\352\261<`\356\223=\200V\200\273\010\3500=\215\335\014>\206\246:\273K\250\267= \312[\274]\256\267<\344\275\233\273G\335x=\352\205\202=L\177`\272\010\333\357\275\230\020\250\275\274\200p\275\370\017\235;9\257\033\274\027P\350\274\220\035\223\275\322\240\024>\243\226\333=\331\360,=\266\\\013=,\\X=\337-\204;05\r\275ee\214<\235c\014\273\262u\212\275}\202}=[\221\021=\333g\207=PS\022<$\310\206=\275\366\336\271\205\2313\274\037Q.\274r\261\025\274W\214\265<\321MA\275\265\310\353\274\237MN\275\364\212\025=\220\272\007\275\202\301\374;\262r\316:\356\315\331=\232J\037=\002\250r\275\234e\217\275\307+\233=\364\226\235\275\205\355\366\274+s\364\275ea\013=9E\244=\020K\265\274\310\024\030\276\213\264\r=\020l\007=\2358\376;qV\t\276\036\252\347<\261\251\023\275\363?\217</\346R=\211f\275\275\353\343\230=\352\265\232\275@\267\211\275A\204\306;\260\010\254<\300\231O\275\277%`\274$\021Q=O \006=\230{\301<\311\002\347\275\nQY<S\360\227\275-<#\275\002\201\375<%\363\206\275\226l\277;\177\336\205\274\210\tE=\366\231\n\276\244\006d\275\316\345\013<\177\227\032\274\312\302\037\2764_\024\276`\002)=`\235\333\275\321\342n=\020\306\257\275\3066\n\275\233v\036\275S}\245<\\\027T=\223rj=\214%\213;C\002\214\275\3642`=_\373w<\351\027\000\275\no\263:\3451\322\274w\037\300\274\230\033l<B\017Y;\206\244)=\031\t6\275 \316\226\275\206I\243\273p\311<\274\210@S=\324j\335\274\267i\336<d\010\203:\2077\261\275\000\314\374\274\027\264v\275\203\312\324<V\335K=3yS=\021\237\200=\200Df\275/p\000\276\246h\310=(p\001=/j\206=\004\037<\272\320\367\304;\326\351\223=\374\323\322<(X\341\274\242|\030=\356\005\345\274\204G\242\275O\327\254:\033\274\250\274\332 \021\275\021\002(\274\355h\235=\007\256\215\275\273\220\244=`e\207\275,\3245=:(\200\275\301>\306\275Wg(\275\021*\314<\334\222\335\2747\341\333<\311B\306\275p\325\252=n\362\320=3\242\300\275\272P\201<\323\247\241\275\314\276\300\274x\217\036<,\231\022=\242\231\017\275\007\373\357\274Q\013\004\275\264x\250=\306\305\364\275\301B\271\275\324Y\036=tY\314\274\230X\345<\221,\353\2755\365&=\322/\r\273\360\304&=\265\301\021\275R:\246=F\3260\275tu2=\363\263Q\275[\023\010\275\321\007\274\273n7\246\271;ef\275\030\225\346;j5\274=P\2638\275\310;\300\273\001<\263=\206\274\232\274\256\352^=\311\302\020;\231R\337\274\010\017\322\275\360}\275=\030\030\234=\250\001\013\276\342T$=\254pw\2757S\363\275\223,\232\275|\361\262\275Q\221I=V?\320\275\252\013\010=\r\356\206=:\305b\275s#\017=\251\010\265\275D\221\266\275Q\300\022\272\335\345&\275c\265\005\276,&\337\275)\334\304=\320w\251\274\000\323\230=\221\271\323\2749,\316=<Z\250;n\220\377\275R\035\233;\035S!\276\241\3475=\207\377\005\276f\006\000\275\213\302\201\275R\257\214<\0373\025\275\324\200\244=\305\034\233\275\177\343\336<\213f\023\275\277\215M;6P\005<V\225\370:L\203@\274q_l=\271\006\200\274\335\254N\275\222\371g\275\215\013c\275c\256\354=$,\007=\"\361\005\276\342\235\265\274:\0263=\006[\357;\377E\320\274\021\010\000\2764E9\275`\376\210\275&\347\215=[\273%<=\352m=<`\017<j%\312:1R\224<e\204\301=\005\360\301=\021\341\271\274*i\266<\203\004\037\274u\323\355\274\310\001\014=\312B%=\306B3=\234\236\274\272\252\265\007\276\241\241\274\275\024\222t=a\306\264\274\365\343\202\275\236N0=\"\220\231=t\rS<\267$\n\276f\265\203=\353\310\344\274F\327\331\274\356\255\370<\347\023\301=)C\370<rs\263=\2177<\275\200\303\342\274\321\310\023\275Qy\221<7re\275o\304\230<\377\357\n\275\253C\264<\036b\023\275$8\005\274\351\033\216:\216\371\030=\217\303\n=\363S\003>0\355\366=f\261\267\275\266\350.;\n\313\316=\305\372\006>3\222\200=\313\2117=,;\033\275\204\017K<\345\211\341=#\006\013\276\333\305t\274\303\016\216<V\037\306<\363\236!=\246w2\275\323\331\301\274`J{\275\323\034\333=Y|/\274\345\361\313\275+\303\340\274;\000l<\270*\236\275\332\367\342\275\246\244\033=kN\022=\221\362\271<\367\374w==\240\271\275z\313\351\275N\343\255=\3476\233\275\007\013R=\331\270\005=4\341\320\274\365\263\344<\r>\272\275}\234;>:\0026=\371\232\274=\177U:\275\026\246\261\275>\304S\275\376\377\212\274\200\213#<\270\217\211;\3351\311\275\236C\r\275vdW\275\327\257\203\274\037\361\264;\207\246\024\275\316\207F=Sv\327=\355\240\037=W\003\350\275\202\211\353\274\262\232\024\274\224\031\364\274mS\222\273\344G9<\2135\212\274\310\314&\276iK6=\336\213H=\337\326\216=U7\027\275\242\356\347<\205\354\276\274\237oi=L\322 <\177V\256=\376;\344<\233=\231\275pl\356\275\310\375\352<\222\212\316\274\330\2555=TA\223=Y\310\241<\263\'\247=\225\034\024<\240\014\231\273\n\277Q\275\317\336\227\274\301&\025\275\270`\306\273$\017\013\276\3619\316\2741\246\330\274\024\037\274\274\316\\\030=T\231Y\2757\237\371=\005\326\226<\321\225\372=\347Zc=c\2641\275\363\321\204=(W\024=\355\"\353=\306j\263;\257r\377<\3520\003\275\372\006\306<b\344e=,\225\205<\003\372\350\273\004\312 \275\377\231,\275\305\025:\274\365\201\247\274\302v\262\275xg8=z\332\233=\314\276~\275l\341n<\264\250\013\275K\202\264=\023\314\316=\004\367\036\275*0\344=b\276;=\302&a\275{7\247\274.\214\262=YV5=\3568~=\366\003\224\275\207\216p=\017?\226<B\356\024=\2725+\275\314\207j:\322G\250;\t\326\031\272z\361r=\020\3503=G\026#=\346H\021\275o}\032\275\342\363v\275<\253;\274\003\275K=j\357L=\316\023\001>\210\221D<\007\177\302=\231\343.\273M\210\026=\210\204\020\276Z\005\"\275\272\256\267=1\235\001>~\353\373<JC\255<\3471\242\274\254\361\t=&\030/\274\306c\005=\001s1=\033\025o=X7\225=\365\020\273\275y\267k\274\323\014\211\275\347\252\327=S\344\035;\014,-\275\305X\317\274\373\277\347\274\r3\256\274^\007\252;|\356\214=\272\204_=\026\210\303<bSF=J\316\371;\315\364\016\276\2055\224\274\016`\014=A\267\001>\230\306\215;\346\022`\273i\332\020>\030@\315=Vb9\275\347b\371<\265\247\347<\3569\201=\215XP9\213\377\244;\226R\262=\263\035#=\217@=\273)1s\274&\236\370\274^O\234;@x9\275\025h\267\274\234\220\n=T\321\254=\276\0104=\323\225=\275R\207\251=\236\220\363\275\242f\225\273\326\016\237<\245m3\273#7\022\276\332\005\003>\007PR;\317\026\201=\341w\232=\351\215\375\274\3668\224<\237Ct\275\355\002X=!\025\233=\243\333\207\275\323\334#\275\003d\311=\325\022\206<\226\243\037\275\213x^<\261\177K<\220\3158\275/\317\225\275\364\360\207=;\005\007>\357\303%\275\027\n\272=\201\335\030\275\334\263\242\274S\023\003;\241\304\362\274Gc\215=\002I\n>@\002]\274ck\020>\003\247\025\275\025\215\021:\366\372\002<F\0205\275\341\300\207;\276\363\365<\220&w\275c\342\305<\nYs\275\251\341\262=h\315x=\274\240\205\273\340=\030=\252\022\332;\217\306\005=\302/0\275:\355\354<\337\326\360\274\337\362\233=\003\023\025=\360\242\314<\345\247Q\274`3\303=}\326%;p\317\337<&\366\241\275f\210\t>\300\306\213=\256\302N=\013\303\233<\326\326\255\275F\2747=.\354\005\275\n\230\211\273\270\314\016<-N\024\276\214\023\266=\372;\347\274+\262\205= \232\357\275\014>\213\273x\231:;VY\361\272)\351P\275\237\211\371=\210\237Q\275\316\004\"=z\267\010=\365\370\031\276\267\243\206=\3415Q=\353\356\330<\330\323\320\275\272\352\230=\3514\304<\207\357j\275\320Tf=Z\321\264=l\306\213\273\264(\031=\203\366\360;\035q\223=\231\270x<\302^?<~G\200=Hkx\273\325\n\347\275\377\014\253\275\006\221\';\034\313\016>\r\316\017\275k\020<;\341E\315;\213\334\242:\016X\"\275R\003Q=ks\305\274\2032\030\275\376.\374\274\226\020\273<a>\345=\025d\321=\254)\241=G\365\t=\275\336\036\276\262G,=\177\0251=\004\214\024\275!\310\032\276j\372\327\275\203\210\363<\257B\021=\317\nX\275\206\202\030\276\275O\233\275\344\276e\275lkY=\r\377\302\275f@\225=\206G\224\275\256\332I\273\300\314\223=\025\364\001\274.bV\274{z\235;\2756\304=\252\230,\275\213\202\216\274\305\231\022<\347\224e\274h\354\200<\337A\027=KM2\275a\025 \275\010\276\207=\360\032Y\274\322\217\213\272No\251<\272\364\204\2730e\014>\305\212\200\274\314\337F\274\351\377\034=\230Sb=\315\303F=\255F\373<\274\2445\276\323A\211=\372FH=\177??=\354o0\276_\032\266\274Y\240\242=\327\204\262\274\344Y\034=P\237l\273\257\3466=\202O\025\275t3\r\276oP\036\275\351\327\221<f\022\251<\327\221m\275\341\221\306<F\035]\275\263\221\333\274\344\004g\275\036\271;\275\002\037_\275\311\211\222\275&!B=\342\033\242\275(\257\262\275z\220a\275\305g\242=5\005\363=\253!\227;\272w \27519\236<0\313o=b\265\217\275h\260\264\274G\366\216\275\221 \\\275Dh\251\275\365\233l;\020\351,=\234_\327\274\225;\014\274\372\316\326;s\272m<\002%q=\215_\243\275aYp=X\365C\275\\\200b\275\342G\350<B\033\233\274M\352\200<\247!\204<\250\200\207=\341y\233=\324\300\307\273\036l\360\275\327\037\362=\366<\021\275\371\035[\273.\230\247\274\223N\310\274\224n\032\275\"Lg;\276K\205\2759@\003<\t\201\364\274!\307t\275\375 f\274\276:Q\275\005iF=\245\306\221\274\312\360o\275\365\017\007\276+\364\364<\3501 =\007M\215=\234\256\021\275m\266\212=?6\306<\307\274;<\244\337\025\275=\202D9<Ga\275\021\350\202\275\004\340-\274\262\036y=\371.w=_\371\020\275\024_\r=\360N\005\275\343\030\002=\247R\315=x\245\335=\220A\215=\033\227\026=A\236\254\275\031\230\314\275\360\026\253=\256E\t=q\370\311<\3551\000>:,8\274\'j\207=\277!\002\274\226i\001\2769t\337=\357B\316\275\\i\260<\357>B<\027\263\210\274\327\300\\=\241\214M<\371\341N\275\016j\277<\021\272@=_\016\306\2749\234\330\275+sz\275vX\203\275\241\300\302;\373\030\020\275\004\360\020\273\205\0255>\275ge\274\263&\234=\000\024\251=\335\005\025\275\353\000\r>W\242\246\275\302#\205=\305\236\262\275\tu\213=\274\236q\273\261\301\332<\0176\240=\332\2567=\020.\232\274%p7\273\3438v\275\340`\362\2750`\000\275h\252\371\275\\>\245<\243i_\275G+\010\276\237\223\336=\n6@=\361\261\261\275\341\247>\275i\024n<=\355\226=Q#!>-\032\217\275\035c\016\275\\\216\336\274\367\373\362=L\304\214<\217\354\245<Br*\275\204\220\351\274 \227\271\274\220B\366\274\200H\235;\307\007\026\274l\375\237</\022\211;\2128#\276e\343\343=\364\376U=\240\201\314<\373\376\257\274+\330\275\2754y\371\274~\022><\227;O\275c2\247<5P\006\275\323\253\342\275G\230\220;\342\014\344<\213\340h\274w\311\330<q\274R\275\342\316\016<\274\310;;d\364]=\226\370\254\275\rAC=\345\023\022\274>\226\013\274\357\200\354=-\024\337\274\246\243\302\275\262\037\274<\331\314\207\275\r\240~\273\345\2438\275\030\340\332\273\203P\210<U\201\376=Q9\377\274a\340\222\275I9-\275A#\324<\323e\n\275\307/\222\275K^A\275+\020\237\275_7\200=[\002\357<\374\334\243<\205\312\260=\270\007\310\274\240\031\022=\330\221\205\275\224\363(=LZ\000>\271\336)<\370P\305\275\035\335/:\270\346\252<<y\037\275\253\345\307\275-\177\307\274\2755c\275\\M}\273\\~B\275\014\345\217\275@MD\275\020u\201<h\274&;2\3467\275<\030\265\275\204\374\262<\237(\332<\022\370\334\275\3104\256<\027\257\222=\247\360\004>~\206\t>\370@\253\275?\016\357\274Hq\320\275\200I\232<\323\316\032\276X\254)\274\226\266 \275\2728\371;\306E;\275<G\037\275m\273\025=\242!\024;\356\331\316\275\275\007x\272]\r)=\037C?\275\267\251\010=\335\026Q;9O4:\277\nx\275\031\037A=\214\024A\273\3462\367<`\255\0309R\200\023\275\001\363B\275R \325\275\250\272O=\3611\337\272\221\020\225\275\351\'8\275\343\370\265\275\363A\340<3\231\016\275\370S\271\275\200\017\031<\016\363^;\327\273D\275!\322\351<q\221\006>\206\022\";\300\2241\275\316\2651\275\231X\273=\203g\307\274Qw\t\275B\274\203=\307\005\204=\277\301f\275\276\200\026\275\002V\243<\205\030\223=\376\227x\274.\224\010<\235\362A\275=\\\270<@ui\275\274\236\244=k\265y<\312P(=\276~\216\275\220\334\302\275\022\247\312=\330\2057=\3652\261\273\3115\365\273\236\343\025=\311\307t\275\022v\313\274D\304\340<k\253Y\275\207v\262=K\220\344<\231\255-=p\226!=vlD=\216.\230\275=\350\332=f\313\376\274$!\225<\235(\316\275\005g\271<\376\354\300\275o\325]\275IW\304<\375(4\275\317\340\200=;\256_\274\233m\205=\333\367y\275\275\301q\274_\035\206\275\226\270\026=\027S\017\2753J\344<=a\325\275\303b\256=\344\304)=\2562M=\177R&=\347U\364\275!3M=3\343[\275H\\\351<\0057\251\275\237m\014>\272\300\025=\355P|\274\210y\240=\t\014k\275\317\210\260=\027\331\321\274z\353\t\275a\377\307\275\203B\254\2754f\272\275\351%-\2750\225\202\275\035\274>\275O\016*<\3674M<p*0=,\236\204\273\260\3606\275\373p\356\274\2134 \273\366G[=\034\372\225<\354+\270\275\233\213\311<\215B\002\275\324\341`<W=\336\273\035;\030=\277\345\035=\2250\005=uO\316=\365\325\274\274\351\335@\275\367\266\010\276/\224M<\304)E=\265\302\305=\335\022\201;\265~\354<\030:\307=\377p\033\276@\\\004<\215&\305=\362\007\003=+\300\277<~>\241\272\'g\311=\327\2302\275\377\210a\275\")\010\275\302\373\"\274\234d\235\275\374\236B=U\212b=\230_\'\275\227\351~\2752o%\273\241\362\343\273W&,;=\206\010<\361E\324\274fw\256\274\344\206\010\274]\324P;Ut\372<F\214\215=\022b\262\275b.`;+\246\323\273;\222\252<5\261$>\274\355\037<\027S\212=\351\"\276\274\311\021m\274q\315\240\275\322\325\247=\220\343\355<\321\325@\274\220.T\275\246\236\336\274\013)\207\275%x\t\2752\265@\273\307t\217=e\325+=x`\326<}f\215\270A\267\241<v\t3\275A\205\006=\371Z\320<\2032\037=\010s\020=\263\312\241=\217\353\250\275])\333\275U\251\332<\006T\004\273\340\217\030\275[\2311\273\002rD=\337\362\225<\342n\200\273\\a\\\275&\271\352\274\357\252\035>\'\242\307<\351F\256=\336h\237;\345-\207\275o\224o\275\201\345c=Oh\\<d\013\"<\237\204\007\276}\007E\275\327\204\"\273.\361N=\303\030\344\274\016/\024=y(\236=\225w\216=Vxc\274m71>\201\272\"\275\"\213R\274\362,\226\275\3751\236<M\'~\275\246/\r\275\355,\311=O\037q=t\324\t>I\356,:7\325\262\274F\230\340\275g\246K=\n\214i=\262\301\201\275\350:\222=\340k0>\356\241N\275\332p\204\275\272\375\207\275\2378\373<\351\020\250\274\363\323%\274\202\305\345<O.\277;4\273g\275\3752v=\256\227G=\274|\032<:\322}\275\016\235;=\206\323\266\275\314\352\273=s\010\222=\321\2563<\215\353\247\275s\373\217\273\262\r\272\275\276\344\302\274\026\264P<\252\344\263\275\247[\017=\371\265\004\275\t~\243:co\220<_\361\270=v\212<=\037Z6\275\347q\036=\357\322\376=\200\334\215\275/\014$\276~\361\352\274`_\234=\215\020\231\2749\325\035<\275\375@=l$\232\275\236\226\010>\207\332c\275\324\212\324=\n\203\302;\325rh\275\010\360f\275 \376\323\274\342\270\026\274oM\250=\302JP=r\266k;\220T\200\274P\211\337< \330C<\247\311\341<>c\245\275\347\031\210=<\241\205= \261\355=\254\014r=4\035\364=0\204\221=\245\244\257\275\256mu\274I\312\367;\212hU\275<d\t\274.\243\220\275\236\001\361\274\365\215\340\274\226\265m\275iQ&\275\022\324\302;\315\260\222\275\263\353\332\275H\031E<\210\363\017>\030\262\265\274\"1v\275\236\327\260\275h\030\370\274D6\267<p\236\256\275\346nB\275\023\372\200\275\247r\243\275(\257\257<\252\373\233\275\312=?\274-~%=\350\312z=\344\2123\275\263\214\377\274y\265\336=||\355=\301\257@=\333dA\275\234R\260\275o+a=D\351R\275\350\334\037\275\363RL\276.\376V=e\373\035<\212t\263\274\'`\206\275\252\321\027=3)\246\274\2078\266<O\0334=\337\0222\275D\374_=\277\253\250\275\276\303\356;\317\017\361\275\374\304\215\275\tO\027>\261\371\017<\006\026\205\274;!\346\274\367\027\031\275\373g\271\274W\201\326=\216\024\245\275\3622 >\r\223\315=\307\021!:\345E7=#u\377<\270\366e\273f\376\000\276\235\234\230<?\3362=\235\3450\275\017\277\202=8\2517\275j\302\367\275\235\014\324\2747u\311=\222ck\274\263>v\275*\334L\275\251\'\030\276\016\200\037\275\004\223\212=4J\007\276[\302?=\243\207\022\274\246\357\033=\024\364\304=\266\267\267\274\273\217\255<\375\266\300\275\230ct\275\34131=\'\233\016<\277\214)=\r>\305=EJi<\200\003!\276\377\245a;\006\306m\275\363d\216\274y@>\275\272\246p\275g\032\235=(g\321\274\002\303B;\220\374\001>\351\026s\275h\336o<u=\314=\325\025\257\275\347\202W\275uv\223\275P\342%<\354_\250=\373m\204=Pfd\274n\357K\275\336\212\236=_\031\233=A\266T\275\337CS\274\'\217]<g\354\356=3\rX\273\021\004[<\334hj=\256d\213<\300hi=\226n\270<\307K\000=\004\350\233=\271\320\032\275\355?[\275\241h\343\275$\260\017<\245\301\257=Q1w=[\005\004\275\000\366S\275h\243W\273\025\324t\275\357\223\212=\005/\017=\242|\350\275S\274<=\350iL\274\256Q\367=\245>\273\275\325\020\031<\342\221\350=\223\231\316<\"\335\201\274\246\240\030=\271\312\316;`\034\341\274\327\342\205\275\322\332V\276\310\316\270=)\212\002<\204J\333<\266-\267\275\320\201\313<)\335\215<)\337\017\276;\340O\274>\274\027= \213l\275\317\3249=\236\227\343\275Jl\331\274n\031l\275%\2108\275w\230%\275\024\315\300\275]\273Z=\304\242\333<\234\216\n\275\017&\321\272y\005\205=o4\216=\322\233\217\275\354m\324\275\"\014\213=\331g$\273\210/\214;4\315\251<\256\376\352\274\270s\263=\005\241]\275\210J0\275\345\270\236=\375\361-\275:\036\316\275_\037X=\221$L=\364\332C\275#\203\356=\260s\315\274\252\030\265\275\352E&=\273\034\307<\020\341\246\272\314\220\002=\267\357\200\275\274\223\033=\"\310@;,|\337\275\2407\212=yu\033\274\t}\010=\312\237\247\274f,R\275Yw\021\2740_\207\273\t(\303<l\251=\275\030\016\337\274+u\276\274\270\362\300<\346PB\275;\366W=I1w\275fK9<\222\262\221;g\353\355<\377\355 =\205\2764=\200\307\322<0\200\336<\243(<\2756\200T\275\374\222N=\304\344\313<\321\006\240\274\374\221<=M\354\210\274\326\217\224<\\\3559>%3\030\275\271^\315<8\241E<\350b\203\2743Av=\356\215\266\273\333\260\355:qw\367<\243\323\210\2740\271\267\274\1775\000\276I\317\207\273\230\245\251<\302\213\221=\n\324d=\336P\335=| \273=\217H\221\275\351p\375:I\201\022=\025\373x=P\357\035>\221>\223\275_zE\275\370T\245=C\342+\274\037#-=\204}\021=\3618\010=@\240\353\274\304\364\007\274O\206#\275\242f5\275<\226\244;\350-?=\263\312n\275\037\334\264=\311\262\362;l\257\217<<kn\275\004\373\272\275\2067\214<\021\016V=\215dW=(U\252=j9^<hG\263;\303\371$\2754O\311=\361\344|<\250?\222<\312\232\201\275\366j\016=\367\007\017<\352\2736\274\333\254h=,\367Y\274^\323\230=\272\253\234<\226h\303<\245\200\n\275:\255\334\274\232\370\352\275)\220\340=\"\324\241\275\376\276\320=\220\340\002\275h@\226\2741R\017\275\263\3621=9\225W=1\206\310;Y\260\210=T\320\001\276c\010\025>\000u\\=\016\210\013\275\221\372\233\274\027\306<=\220\235\243\275\362\261\024<\\\275\242=\251\263\020\275\334\006\t\274lf\332\275r\010\376\274\304%\271<#-\364\274Y\340g\274\374\270\345<W\255b=\234K\014\275\340\027z=\311\237X<\034\240\277=\2303\t>M\20689\341\301.=0r\337\273\t\315\345\273\001\010\002=pGW=nj\253<\3277\333=\233\250\350\275z\2510\274\210NP\2745\270\255<\237\010\224<su\253=^\013\332=6)\235=\201\366\005=C4J\275\246\277\266:[\017H=\313!\233\274\020\323\304\275&7;<\257vw\275\373\261C=g\354\002\275kk\013\275\264\007\215\275&s\231=\254\327\312<\002\344#\275\262c\302\275\243\222\013=\022\332j\275jD\317<m\327\352\275 \236\247\275\311\232\300\275\017\346\211\275\335\030\213=\305s\316=\215\303\202\275\277\206\377=\016\372\027>C\2019>\271\304\341\275\"\261\261<\243\017\215=\025\375#\274\002\177\035<\254\361L\2746\nA<\346b\r;\274K_=\267\017\375=\217-\031=\246\030S=\3666\215\274P\005\366\275K\325b=\371\024==\376\270#\274A\346\203=\324\255\341=H\352P\274\201n\316\275\246\2578\275\234\026\200=0\263\214=k\350\262\274\016l\236\275\'\370\222\275\020\372\347:uF\016=\344\366\353<k\247h\273?\316\272;W\025\202\275\264y\221\275\023\234\236<\227>u\275\317\004\227;\303\364==\231\r\211\275\320^m\274\t\243\203=\241\267/\275\347@5=\3675\031=J\231\240\274\202#\333\274\277&x<\370\367\217\275\376\200x\275\256i\321=\236\344D\275X\000\343\275\034w\210=\234:!=H\234\300=D\037K<\215T\216\275\226\r\036\275\216\r>\276\375\253\030=Tr\030;HV:\273#Zx\275\336\031\000\2762\206\263\275kf[\274sr\243\274k\253I;\325=\276=\037\202\266=\317;\304\275\007E\253\275\271\307\257\274\227][=tQ\324;\321?\324\274\036\2456\275\007\036\n>\306hk=9\007\013\275&#t;\007\300=\275=[\347=&\212\222<\327i@=\2103\357=\014\273\314=\243=\214\274\020xr<\207l\347<p\305\000\275\207[L\274\322\021\324\274R\017 =\"\327j\275\257\177 >^\036-=i\006\212\275\240\022\224=\372\337Q=\341^\217\273$\213\314<^\370\'\275\361\333\324=[\305\017=\307\017\037\274\325\215\222=M\025\024\275\243J\001<Q\240|<\303\360\230\275\000\2078\274Fmi=\rC\014=c \2628D*\006>\366R\201\275\241\361\001=\306]\312\274eO\212<\205\332\r\275\2137\026=\330\223\022\275\241\245c=\271;*\275VE\014\275g\231&\274\"\212\002>\273\251V=\206\203\252\275\343\347\244=#\267\246=I2\302\275If\331<\211\375\003=:\n)\275\'6\371\275\342\313\t\275\3310\\=\356\271\271<\303\357\335\274}6\344\272\035\021f\274\275\367\000\275\322fm<\354\207\'<\267ku\275\242;\2529\342q\207\275@h\323\275\352\246\263<\306v\034\275i\014\"\275b\377\016=\020\n\361<\271\257t\274\006I\335<\354\215\240=:&\214\274\327\227M\275\030\316I\2753\270\201<\320?\303\274\246H\304=h\310\257<t\237==<Q\256\274\245\273\000<\336\360>\275\014@J\274\200\347\313\274<\307\255=-\026\025\276\221\312\223\2746;\r\275\356X\232<\363u\203=\244e\266\272\241[J\275L\251\013=\330\236\336\275k\013\022>)\003\240\274\221\tu\275\210\310\377<\256\276\350=S\257\261\275Iu\363<\211\036\245\275\354\357\255\274\331d\010\275\343q^\275_~m\274\231\207\341\274\204\177\263\275Op\001\275h\223-\275\375\337N\275\\\3625=l\317O\274.\370k=U\317\024\275\243\214\010<yO\241\275\263\2561=l\366\246:m<\216\275\306\251\305=\025\030\226=+\367\017<0X\001\275\340\305\243=\322/\202=\275\245\023\274\277\324\\\275Z\031\021\274\224\3103\275x\035\245\274\n\t\032=\016\357\267=\310\013\202\273Y\375\377\275\362\345\225\275\314\350\020\275\227\247n=\234\320\276;}\033.=\025\217\017\275\222\303\010>\360C\001=JXV=\227&-\275\272!\346=\306\262\360=\225\334\014\273\300\270\260:K\200>=\252\374\356\2744ca=J\230\333=\r9.>\374\262\303\271\211H\353\274y\213\201\274>\361-=a\215\030\276w\234\205=\002S\\<\336y\206\275\203\366]\2755\260\323=X\004\004=e\013)\275Q\325i\275u\211V\274\337o\253=R\355\303;0\275Q\275m\321\243\275n\271\371\274n\242\334\273+\n2\275G\215z=8#\215=\311\022 \275\364\366\241\274(\207\203\275\364\213B=@\'G\275\244\304#\275\362e\355;\014\273M\275y\361\341\273\377u\220=\010\014\355\272\" B=\341\355\252=\323+\t\275\237-x<\322,\036\274\3775\261=\316\013\007\276\254|\223<k\317A\275\241\222n=\374\237\374\274X\027x<\031\'\226\275\357\300\214\274\215\364\272\274V\260\235\275\261\216\353\274\324\225\206\275(\252\230\275R\2657=M\316#\2753\256\t=\226\355Z\275\325\313\003\274\375\014\033; \310\004>\320\'\030\276\377\310\r\273\022\354\223<TLa\275\023\373\025=\236\266\217\275\301\2631=xX\226\274\202A\364<q{\004>\013\222\272\275\035\303M=\205{=\275;K\331<\230\345\202\275\354\321\321;\333S\225\275\274\247\262\275\216\332\277=\203\264\222\275G\266\362<\271\302\310<\017!N=\025\241o=\217\371\027\275H\351\230=\237\251\211\275\211\\\263\274\377\334\357=\0052\207\275x\3261=\253\260\026\275\335%\200\275\321\322P<@\311\201=\351\214\367<\005\200\211=\2062~=\366%\347=\356\374\006\275s\276\022\275\237\3146=m~\016\274\024V\336\274\267\225><\313o\216<O\246\333\273\304v\021\275\375\230\235\275M\223Q=\345=\234<\200\251\212=\244\227Y\275\005\304\306\274i_\342\274\211\337\345<\230\001G=\213\246K<\350&:\2744\010\214=\375\237\251\275\227\322\031\2767_\273\274\200\260\200=\267\302\237\275\037=\362=\001\221\311<Jz\346=\177\317\202=AF\336=L\366M=O,\230=\200\323\252\275\242\340\262;\356f\224\275bi~\274\346[\322\274\3571f\274\276\350r=aM\226<:L\'=\211[\017>I\211\364\274u\206\220\275\310\035Q\275\225\231j\275}?D=X\335\036\276\214Y\345\275\273j\235\274\300fS=(j\303\274\000\216\333=\246\365\307\274\375\037c==\037m\273\307.\223\274\013B<=?\225\243<Ta\254<p\334\313=\r\372\207=Y\236\212\274u\330\014\276g1\216=-jC=Y\321\264<\235\357\004=\353\023\351\274\240\220+\274k7\235:Z\270\371<w\276\202\274\311\273b\275\314m\322\273\261P\032\275@\374\370\275_\024\350=*k\322\275\270\361\'\275k\033\310\273?Dh\275\001?x\275\210\226\302\275\275f\322=\306\321o\273)\217\270<4\326b=\371/8=\216a\002\275S\367\266\274\321\210\303=o\223\253\274\036:0=\255-\r>\322@\202;\335B\224\275p\215\275=,hL<\306\005\r=@1\332\275\325\333.;\314\275\224<\375\031C\275@\365\373\275|\013\025=z^\022\275\243\232\262\275\304\256\t=X\314\341\274-b\034\274\337\352q=\255h#\275\033B\275\272K\277\340<\250A\302;\014u\214=^\301\n>\340\000,\275\347\016\250=\024\370H<n7>=\350\002\211=\202\217\035=\250\323\317<i_X\274\014j\217\275\002A\217=+\360\301\275~\232\'=\341\023\227=\255a\271\274\202\330\214=\022.\213\274\333\316i\275;\240o\275\302`\255=\222\3235;%\275\222<@\266\330<j}k=\322\260k=\346\000\310\272R\303V\275a\210\324=\331\333\250\275\217\324a=o\033\207=\255\263\034\275\252\233\345\275G\221\342\274Y\023A\276\3421&=\213\201\237\275y7\243\275\324d\n\275J\252d;\246i:=\317+\261<b{\303=\336:\006\273\232\n\020\275@\271\251=\\Zb=2\013F\275\304\261g\274|\356[\2753\233\326\275\323q\033<l\262\340=\352\021`\274_\362\330<\266\371\210\275\321\355\203=i\267\315\275\r\361x=(0\253<1\374W<\210\317\224=\365\273\310=o\216\002\276Y\0259<\023I\177=\361kT=\231A\206\275\245\367s\2736\226\355=\340e\307\274\'\337z=T\363\232=tT<<\315\306\'=s\264|=\255o_<\347\355\304\275\202#t\275 \274\013>\231\034=<\233\337V\275!\361\001=u\354\374\272\226\225M\275\301\215\362=\271\366Z=K\327F=)\037\337<\036d\277\275\237\333\211\275nR\211;\212\t\311<\313\231w\274\206\267\212\275B\230=\275\002\324\204:o\211\321\273B\367\020>\037\3016=R\353\314\275@z\033=X\341\254<nw\333\274pe\333<2|:\2756S\216=\247\237\312\275\360\205\253\275nm\200=\332\343\001=a\303H=\032\244\212\2750\337!\275\2415~\273\013\017\321<h\252I=3\257`\275\304I\225=\2636\\\275\326\300:\274\265ta<N-\3069H\217<\275\320\007\324\274\302Q3=\267\264\233\274\312\313\317\272\211\246y\275\024o\322=M\365\210=\037q\321=\211\332(\275\240\232\002<\336}\027=\220\n\340;@B,\275\006U_=d{f\273\276\241_\275\223\205\274<\360;\202\275\310!:\275<\237\253=~\277\262\275\374\313\031\275\250\216c=v\022\253=,\234\030=N\225\210\275\221\022\303=\r\216L=\'\003\035\275m,\030\275\2632H=\315\233J=\207\017\206<\243VI\275\361\346\305=?\264\252<\037\017\231\271=\315\366\274\371\265\226=\023F\356=<T\211\273\201\326n=\277;\321=`\221\347;\241h\223=\203v\265\274\2127\031=\331f5=5\377\016\276\003{C<_\013\260\272\371\000\341;:\017\036>\002\301\246\274y\224\375<\013]\237\275h\005\223=\274\336^\275\272\322\225=\t\277\244=\331e\022\276r\022\311=\321\231V\275\210\242\271\274\n\352\005\276\216\232\223=\2717\233\275CG\225\275\346Z0\275\367U\302\274\372(_=\264\354\375<-\026\223<\024\031\240\275E1}=hY\354=K\323\360\275\221\221#=\302\221\340;\271\0058\274\252\2649\276\320\377\257\275\223\327\"<S\313]<\316\264\332\2756U\205\271\322Kv\274c\376\010\275S\306V=\377\247\354\275\265\360\212\275r\003\375\273G\222S\275\326\251\333\275{k\253\274@F\203=\262U(<\261\261G\275\360\257\027\275\373\360\336=N\315?\275[\016\215\275\252T\004=\034\205\203=\307\213\327\274\227\311\231\275\332{\367<z>\212\275V)o\274\203R,=US\211\271\275\037E=\326\364\023=\255\257z\275\316QT\274\262oR\274\004z\313\274\262\010\275\273/\310\200=\273&4\275Uc\001=\305Y/\273\354\360W\275\356\177\021\274\367\027\026=\334\216\3719Z\320\251\272N^\267=\265\r$\275\327\227\346\274\372\312n\275\231\344\360=7\353\352\273\263tv\275IN\214\275J\365\323<\031\317\005\275\305\274H=RF/=\216\0015=(3q\275*\253\177=a\003\004;K*\210\275d\004\n\275\245K\270=C\036\226<\320\312\255\275\226`\202<\225\367*\275\261\262\241\274\t\334\r\275An\234<\323\262T\272~\026\256\274w\027\212\275\021ti=\233\352\263=$\371\031>\313\362W:\232mp\275\305\377\007<\332\375\234\272\232J\233\275c\227\351=\201\017\343\274\343\006&=;;\001=\327\353g=b\332\243\275\243\321.\274\231_+\275.$4\276!b\013\276\234\\\r\274\340\363\254\275^7d\274:o!\276Q\325\364\275K\n\021\275Ci\377\272\273\2459\274\344\036\301\2752\270\206=G<\204\275\306OG=\303@\223<M\033\225=\356i\032=\006\247 \275\326\374\251\275\334r\242\275\345g\037<\257\025\016\275e\021\314\274\346\266\276\275\024\237\316\275\276\020\305=3\035\003<\031%f=-q\211\275\342\370\227\274\024.\234=E_\202\274\005\367\261\275o\324\210<(m\177<\307\0059<\026\r\007=\264\035 \275\204{\224=\263\220\266;\320\261\232<\340\260p=\t\014l=\237`\270\275\306\026&\274\334E,\275#M\303=]\362b=p\212\004=\322&\320\275\352\352,\276]J\000=\007A\312\275\035\177\265\274\"\330h\274}\304\231\2758\3379\275\325^@>R\231\314\275!\206\362=?\224\234=1\307\334<\265K\'=\2365\307=)\220n=\335\003A\273\263Z\202\274\304\021\216\271\332\031\220\274q[\272=B\226\234\274\320\n\372\274UL\306=\344T\334\274\207\317D\275`*\3238\237\021\234\274\221\0101\275o\\_\274\333\017\345\274\017\241\334\274\300\240!<\260\324\342=|\272@<\230\033\225<\335}\240=\277$%\275\213\240-=(Y\177<\"a\210=\r=\241\275+\004F\274 \3208=%#\237\274j\206\'=-\362d\273t\000\362\274\303r\324<\323X\371<\031\252\001>{\177\365=\027\246\245\275\234i\313\275\214\270q=6\037\221=\267\347\237=\342\212\"<z\207\211=\370B\243\274(D\333\274\331\377\257\273\254\014\"<\321\315\332;\007\374\316;%5;=b\363\032>\021}\n=\232\262k\274Rx\246<\375\210\225\274 \321c\2754\355\353\275\t\317\005\273\3333y\274\227+e\274\276v\311\274\370d\r\275\370H\315\273cg\316\275W\203\233\2720\224r<\362(\216\274\251O\300\275\215GH=\235\000e=E\361\314\274\206i_\273K\024\010\275h\350\"<\367\357R=\226/\021\274\340\365\216\274\023\202\234=[\370\350\275\333Z\033\274\236\216\031\274\234\304\263=b \375=\031\030\322<\331T\014\274\035\312v=\222\277Z<\233\325\332=+\243\241\275!\266\t=\307\032*\275=e$\275\270=\231<}\302A\275\030\021&=\027X\n\275_-d=\304yP\275\307\0166>*\251\364\275\031\216\251<rq\317\272\234\231\214\275PID\275\320w&=HO\345\275>\245\264=k=\200;\205\215i\275\266\363\341\274\212\211\267=\3605\206\274\360\317\232\274\374W\177<\026\274\307<\230\300\205\274\241\375\322\274\317v\232\275\243\202\032=\227\243Z=r\221\324\273\310rd\273!\303\263=[|\271=^\345\215\275\002\010m\275\007\010\271<<i\223=\232\340>\275\356y\005=\314\021\322\273\344\362>=\226\206w=\372_\230<(\261\240<\365a\033<\211n\262=9v\324\2755\272!=\367\253\323<\263\213\344=J\261\354=\265\006z\275\356\272\324<\316\240\270\274\272O\356\273[\026\314;OL\273=H\036\227\274\233Hw=.\252\236<\024hG7_\002\n\275y\246\216\275\302\364\241<\021\230\217\275\366\2662;~Q\005\274\216\2541=\215:=\275\257\027\213=E\322?=1\3124=\305\263\251=\256\335\277<\342_\302\275\305|\342<\232f\355<\334\014O\273\305\200\237<\2644(\275\036\320y<\0377\031\276n=\212\275`\177\004=\211\237P\275\005\323@=\n^.=\337\222\373\274\244\223\307\275\356\207\241<\313\232&>M\017\343\274\036i\030\275y\364\216\273btE<4\t\017\275\177\332\207=\346L\\=\367\201\311\2740/\324=F=\232=\224\236\270;O\330\216<\002K\367<\205\227\372\275\300DU\275|Q\202=\035\013 <\373\332\253=\215\326\363\274\362b\177=\367\252\270\274*\240\370\272\371\311\202=>\255\200\275\212_\235<\306\337\216\275\020\"\357=_\372\013\274H\220#>8\2676=\354(F=~X%>\225h(=\211\276\245\274m\000\312\275y\032\243<\331\251\\\273\371r\362\275:\365\240=\321*[\275A\245\207=\002\332F\275?\005\241\275\303(\214\273pO\250=Y\tR=\377\034{=\374%\003=\315\014\014=\037\315\372\275\377\336q\275\377\357\370\273\342eN=\331\2619\275\027\232\361\275\026\021\272<b\376;\275\271-\341\2757\234\230\275\317\210#\276H\362\325<\317$\325\274\265\325\016\276\370\013^\275\035\307\005\275\306|C\2766\250\035>\347\360\225<\231\373\244\274\030\201\261\275\356\266*\275\267\273\247<\021\302\302<G\372\000=\356HE=LD&=\325\366N\274\243\365\r=\203\022>=\025\352\223\273/\207\177=D\327$;m;\310\274D\006\375=\334\277\270<\223\277\022=3\347\323<\304\0242<\254\224\211=(}\361\275I\223X\274\372\261\272<\001tO\275\372\215^\275 \230\300=\253\"[=poB=\2236\213<\275\331\370\275T\017V<>\257\342<\217\010\242;2a\336\272i%1\275\336D\255\274\264\220)\274_?u\275\341\237\016<\337\323\314\275\327:\255;[z\177;\210!\313\274\261\374\017>\232\"\363\275]\377\t\275\251SP\275\300\372\032<\t\342\214<\276\204`\274Q\321\365\274\034\001E\274o\224\253<\240\032\006\274\203\362\034=\354\273\226\275\2412\310<\236\3039<\017=\224\274\023>I\275\312U\001\275\226\375\326\275\205\300\310\275\325#\211\275\266P\262\275\347\210\237=\251\205\342\274\364\363\034=H]G\275$\260\235<)\261\240\275\231c\036\274X\326$\2752e\237\275\255\377Y\274T\264\206\274\246\314#\275\233\000*=\376\302\367\274\213g\200\275d\333\205<\337_\003=u\0316=G\025\302\275\014\355\235<Q\275\347\275e\251!=A\244\321\274\375\306\211=lo@\275\"v\210\275\202\307\330<\177hp\274\223\336\021=h\0166\276i\340e<\250\177D<\302\212y\275\032\370m=\207\257\204\274\033\250\224\275\022qA\274D\221!=8(\262<\371\2646=n-\337\275=:\303\275\273\004\006=\234M&\275\001K\021\275\246NA=\314ad<\250GS=\301U*\275\013\231|=X\020\222<@vg\273\014\020\254=\3652\235\275\324\023<;-\345_\274\265\035\206<\222\373\374=%\313\322\274\204\333\006=\244\367\037\275.\320\177=\231\177 =\355c\234\273c\3629=\234\334\334\275`\376*\274\243\375~\275\205\000\217;\"L\212=\316\345\244\275\250\"\354;\3716\020<\354\361\236\273fg\255\273\215\372p;\363h\214;\\\032\'\275\371\336Q\275_\212\261=\240]\346=\214iN\2769\245\212\275\033p\377<yW\n\276K\321\243\275K4p=6o\220\273V\234H\272Jq\310\274\347\016\215<\034\337\014\274\274\251\010=b<&=\001\223\350\274\022\320\232\275\355\370\023\276\334\251.\273p\266\223\275\263R{\274n\362%<7\260\007>/ \367=L\335a\275\341\271\345\275\376%\260\274\244h\036=M\250\261=H\256\r=\273e\203=\213\372\\=\037\270S\275BK,\274\221\010@=\346\206/<\020i\252\2740&\227\275\271\\\202=[\330\251\275\246\rG=\260u\223\275g\235\270:\202\nG\2753j\317\275\262\202A\274\216\257\361;\244TE;\222N\337=-\343\023\276:\302@\275\362t\342<\313c\"=\2351\204=\371\360\353\274\270\033\254\274\235/\274\275%\341\242\274#\236)\275\351\312\020\273F\266`<\224\007Y=\007\306\246\2751P\201=r\337\r=\013#Q\275\263\274\316;\373x\365\274\325F\322\274\205\205\346\274,\213\270\275\352\370\023\275\304*\t\276\344\376<=\217mV\275\332\020\273\275\320P\351\273V;};\365\232\220<:\004\232\273\025y\036\275\242\300\302\273\tw\031\275\230Lr\275|w\r\275\203\330\322=\025\206\360<e1)\275!\316\210=hP0=\317\t\206=\004\001t=a\352\030=\372\nI=\305\005r\275\235\322i=\001h\245\275\207p\371\274\013\025\233\275)_&\275\n F\276\314^\037:g9\236\274W%F=\327#*<\265O\260\275\016_\375=\255\353\003=pd\324\274CU\234\274\305\2560\275\203]h\275\224,\006\275\265\235\313=h\233g\275\353\004O=\000\202\234\275\274\210~<T\263\025\273*d\227<\254\306\314\275\036\221\262\274\020#,=\341\215\346:\3244\257<\271\001\300<\035u\321<\227\346\340=T\273\315\275G;f\275\257\375\354:~\371\272\274\033~.>\306\263)=\375M\346=\273\324\036\275\237\005|\275\327\314!=?:\017\275@L\200\273\267\202\347<\t^t;&P)\272\316\345\016\273\212W(;\310>\265<\246dV=(\215\276;\352\222\251\274\204o#>\247p\236=\261\377\245=\344(X\275\354\361\227\274\345\n\240\274\370\333\205\274\360\t\246\274#\345\304=k\344.\274\327\234\227\274k9\034>\036\372\003>\370h\000=\232\257\345=\330<m=O\375\005=\241\373 \275\237\253\252\275\252y\300\275<~\014\274\2420,<:q\016\276\250\302\237<\247A\264\274\024\324\r=\217$\234=\204\240\307\275\224\302\361\273j\334\362=}+\3569\302\251\n=\221#X\273\335\375+<x\005\262<\307r\214\275\014\374\342<\275\363\203\275n\335\327\274\2114\363<\020\206\227=\032\225\023\275\004\023\254\274@b\235<\203\331\242\275\0228/\275\027BO<\267]\211\274\324\326\235<\375T\2359\300\334\204\274\212_\232\275\245\336\305:N\275r=f\340\353<iU\263=Y\324g\275\312\023\241=\271\3362\275\265~G\276\035\2063\275\003|M\275O9C=7\016\223\275\225\304\327\275\267\343\273=\200a\025\275\023\266\224=j\024\357\275\2546\365\274\271D\364<\246\255\322\274\026\177\323\273\022\327\230\275\366=I\275\031\013\005\275srJ\275\311I\373<\264Y\304<zl\036\275\331\252\305<\0006\272\275@\3700;R;z=\003\376\265\274D\031\007\275\177*\365\275\233\310\370\273v\300{\275X$\341\272\017\274\304\275\270\013\243\275`{M=\357,\314\275;K\201;\207>\t\275\250\322=\273TB\244=\277a\021\275\202R\021>\347Hc=1\244(=?\201d=\035B\226\275\005\230>\275\312\005\243<\352D\200= \217-=H\232%\274E\237\204=\221M\211=\251^0\275\307;\251=R\206\333\275`\205\356\274\000\246\260=\031PR=^\006_\275\255\030\013\275\347g\334\274M\345\036\273+v\372;\377\356\265\273\r\001\233\274\005N\262\275\266\307\352<\272\265\3209m\263\'=FB\367\275\212h\241\272\n\356\320=\303\005\013>9\265\224;\354\263\311\275yk\202\275\316\347\326;\323w\276<\014FJ\271\013\231\001\274/\254\360\274\226\217\223\275\306z\034\276\263\222V=\223b{;YN\024\275\036\021\027\275\341\331/\274\212\274\251<\322\007J\275s\277\005>\235\253}\275\316\221\235<Vx\024=^\353-=7\206\216\275%\000\327=\206\332(\274y\234\016\276\007\3066\275\324\356P\275\002\356?\275\333(,\274\361\261[\275f\025!\275\341W\227=\367\274\t\273A\007\014=\332\'\273=\3341\326\275\271*b\275\252\336<=AQd=\224\272\357=\317n\177<\373]D=\\\241\366<?\177\220<\035\260\240=\342\366\273=5b\332\274\026x\203\2747|\r=YZ\177\275A\000\214\274\341C\313\274\3355\371;\3600\212\275\311\2651<`\307\246:qe\343\274\202\352\367=r\017\204\275.\014$<\216\242\271=\3167*\276g3d\275>\025_\275\316 E<\026y}=\214N\210\275\215lB=De\010\276\305\006G\275\245x\217\275\356\202\016>\250\367\277\274\223w\032<\303\332$;\236\316\215=C\347x\275\036\233\331=\204\2668\275\336\301\320\274\030bA=\257nF=\\z\263<\300\277b\275\321\266\307=BTc=\006p\257=\276y\026\276v\324\t\275\0057\336\273\306\311u\274\251w\032\273\272\017\201<\021\023d\275\016\367C\275\200z@=\004 \350\275SD\365<{\253\205\275\271\334\350=C\266\355\275\351 \030\275\325~\352;\2356\206\274\215\302\235\273\240\376P<\210e\210<5H?\274+l\004>\274\253\332=}\031\206=\270\343\027\275Is\004<N\t\020\275mq6\275\026EW=\232~\262<yO\305\275\256_]\274I\036P<k\253\030\275\252\261\177<\310\360\314<YlP==\275j<\260J\357<\030\036P=\356\030\252\2748\023\335\274\315\022!=\360I\304<\006\254\357<\257.a=\240\227\270\274\226\340\224\274U\355(=]\240\372\273\377\341\305=\322\245,\276\321\2212\274\304\314\275=B#Z<\237\266\221=T\037\356=\305\002\261\274\337\333\334\275\313\025\332\274P\213=\274 t\222\275\350B\327\275|\345\251\274F \316<\311\237\250\275\363\272\213=\334\265n\275b\311v;}\212s=\223\024\020=\2201,\275-(\241<\275}\262=f\331\203=p\235s\2743w]=\232\257\244=y%\003\275/e\300=}YG=0\344\344\275Ay\253<%_\031\275&\224S\275\r@.\273\010\n/\274\264$\004\274\353\026\002\275\207\312:=\264x\272<t\207u\275mZ5\275\241\311m\272\n\251\177=\3707\367\274\270\357\317\273\336\215\242=\227\003\017=\244\206\027>\354\334p=\274}\000\275\010G<:\026\317\341\274\206\365\200=W\340\006>\r\003\324<\221w,\274y?\232;\014\024\322\274.\340t=u\310\262<6\251W\274\340\357`=\026\212\344=@7\204=\002\005\352\274\242\313\235:\251C\375<\022@\334\275\314p\223:\300\354\262=\262\321\255\275\262\2133\276\313\361&=\356\034\021\276 \002\304<\305\177\356;L\035\t=>I\342\273\252A\021\275I\321\340<\033\223\246<M\371\213=\313y)=S\242\002\275!\'\215\275\350\200y=u(\211\275U\325^<\3619=<r\025|=\030\200\037=D@.\274R\232\215\275\205\212\030=\3306\373=-\017,\275\226!\237<jr\234\273\320\267\331<\006M\303<!&\017=v6a=\033\300k\275\005\304\036<+\343\204\275\016#\347<\312\230\"=\373G\306\275\034\226\221<\225\271\n=\321\346\245=\361P\201\275_\377\322<Li\034=rJs\275\257b\025\274\024\212\024<\304\221Y\275\007\355\272=\223\223\023\275f\271\266=if2:X\250\004=\325\025,\276\037\303)\274\\Vm\275\243\200\006\275\317\260\200=i\001\004\276x\257\214\275\247\352\205=\023\014\232\274j/9=\320\002\025\276\013y\203=9\264\255=D\356\225\275\177n2\275\273F9\273\030\330\033\270\224\375\316\275\241\254\243\275\032\364U\275\343\021:\275\333\255l=\362\206q=\002\035\377\275\334\322\201\274`\317\343<\324\210&\275\312\261\366\2758\205c9\203\222L=\374\262\014<\350\312\225;\254\225\275<\232\211\267=\277d\205<u\314;=T\203\214=\356\205\225=\250\320\327\272\337\301\267\274\356v\227=\300\335\000>\216\317m\275|\351\342\274*\010\312\274\270\354h\275\027\351\344=\217^0\274\365J\335<N\215\205;\312\242w\275L\034m\273\347XG\273\366\312\215\275\336j\354\273\377\036\240\275J\224\r\272O\213\034\275\371\363#<\245\365\365\275\267\205\006=\370\304(\275\334q\370:\330\324\036\275\350\372\037\275\333\2218=Wq\244\274\271\350`=\337\321\320=~\\c\275\255\000~\275e\322\313=BE\370\274\005N\\\274D\033\306=[\031\355\275\342\376\361\273#\224\303\275\017_\234=\201\3764=W\304*=|\273\247=<\367\330=\024_\222;\323\344!\275\220\263a=\321f\247;v\316\211;$D\031=\033?\303\275\301\r*=7,\226\275\177\251\265\272\206\240\207\274\226O\267\275\007\024\020\274\256\377\202\275\214\261\330\273\267\202\231=\021\037\235\275\022Sg=\376\357\223\274\207\347\302<\263\315,\275\272p\342<\313\2436<\311\267\037\275\324\220\271\275\334\267d=\037\214\t\275)\241T\275[\\\356\275\223\271\001>L\025\241=\273\336B\275\266U3=\326z\r=vx\000=\243\364\331\275*\307\273<\217\010\330\274\ty\335=zE\204<\311\342\007>\276\2075\276\222U\260=\0175\274=\262\205p=\257\273\236\274\300\341\266\274i\227\331\275#\324\222\274t\366X\275\250\257\242\274\221\344\314\273\027\264\361\273\322\305N=\234S\215\272\244\177\371\275\276\026\205\274x\245{=\005\364\377=\216\'\265\274\212\245\324\275\010.\216\274r\2061\272\371)\004<&\312\313\274e\n\037\275_|\316\274\370\200\240\274\211\001\207=\256D\317=\016\273\256<(\252e\274^\235(\275y\271\354<\037\017\320<\325\235\237=\2522(\275\'U\226\275_iz\275}\267\213\274\022Q\245\2751\220\360<,\234\213=:\230^=/\024\356\274\343wi=\341\004\211\274\2313\036\276{\"=:\311,\372\273\0029\260=L\337(<|\232\250\274\346\356\207\275\340\355l\274\033\203\022=\343\317\342\275<\302\226\275R\370\240\275\034\332V=\233O\367<W\254\t=\003\004\201\275\3544\007\273\326\260\341=\257\033!\275\013-\220;o\245*=\234\r\237\275_\255\335=]\2004=\205\220\232=\222\372)\274R~:\276\322\241\250=\017\030\215\275\336|`\275|6\373;.k.\273I=>\275X\261\201<\017O\250<\200\213:\275\341\212\036\2755}\317\274\206S\256=\322g|\275\344\310\244<\\\226V\274\343g(>\253\000\007\274\202U\030=\253\251\022=\3038\213\273\274\2252=\320\026f\275\324\220\365\274m\204\246:l\027h\275\206\210\223\275\242<.=\304\204\277\275\360~\362<\250\335\211\275\363\321\251\275\323\307,\274\270\0369=NZ\017\274\302fe=\010\031s;\003O\216\275\336y\n\274\354\221\010\272\374\345\223=\367\260\301<\361\275[\275\267G\265<]\014\310=\352:z\275\321\376\276<\325\364\343<\213\025\241\274\256\377|<\004\343o=D\036\207\275p\240\234\275o\n\013\274S\301\323\275\275\234\233\275\374\221\313=\2428\275<P\366\211\274\272\322(\275\004\177\262\274\351\300\270\274\240\222J\275\233n\202\275\207\213\002=Y6\225\275\304\245,\275w])<\235\300\266\272\305\236\305\274\305(D\2756~\026\275\276\352\301\274\271Y\237=?\304\301\273%\303\213=\033\3336\273\024\226l\275\375?~\275\254&\306:fi\257\275\315\261/=T\331\221<\035$w=\374\032\005=\274\317\374\275\242\002\000\275nPl\275\336q\315<%\332\003>4\367\346;m\322e<\330H\325\274\212r\304<\222\217\337\275\236u\340\275\214\032u<\301\331\233\275\333\344\177\274EB\234\274\222p\263<\234\201\325=\2033\315=l\002\252\2752)y=\373\270G=\247n\256\275zr\314<\372\330\331=\315&\371\273{\377\227\275\td%<j`x=)\026\210<A\016\254<\331\017\351=\030\006\235<\260\232n<um\333:\216T\212\272\035L$=\000\"U\275\036\255\307<d\333\341=\213\354\005\275\240\304\r=@\305\310\273\257\'\276\275\267gU\274X\362\016\275\247\243\314=\305\000\001>j\027\334;\333\263\252=\337\230Z\275H\"T\275\250\323\'\272\354\347\005\275y\336\263<\245u\304\273\306\026><K\336\205\273\266\220\326=U\204\343\275\322\357\256\275`\207X\275\025\013\301\275\253\321\266\274\271:\355<v\340p==\022\223;\351\260\024\275\252\0045\275\330kx=\257\005!=ZI/\275\312\216Y=\376\ne=\272\275}=Ci\236;\t@j=\2569\000\275[\337:\275\357u\255\273\370|F\274r\360\035=K\241\003\275\262\013i=\302_\212\275\217\207\330<\235\010\227=!\232c\275\343s4\275j*\211<\313}\233;\217\360]=\017\242\'\275\316\272\315=\333\"\314\275\220\034\027\275L\270 =]\317D=$\333K=\"\364\r\274\030\243\272=8\220\005\275\376\323?;A:\334<\276,\030=\324%\224\273\354\270z\275\234\201A\275\321\343!<\320\301\227\272\3146\022=P\257\301= \311i\275|8\351\275O\2246\275\275iP\275\235\275\000\274\322\367\261\274\316\3434\276\326=\210\275\317\223\037=\010C\215\275\362\241C=n\016M=\370\220\030\275_\364\311\274\367\340\256=\n\n\242\274u\266\332\273\021\002\025\276\027\216\">\013\323\333;\325\013\240=N%r\275<\217h\275\224\2666<-)=>\212\027\037>\356\346s\274n\227\306<\206\243a=\342\0068=\2750\335=\307\234@\276D\2615\275\023\265\255\2759&w<\364\315>\275\002o\230\273\325\331\233\275\2408\003\276\206\237?\275\267\301\216\275\325\263\216\273\010i\367\272h\343\320\275\305\205\210<F\nd=s\341#=4 )=\220\3516\275i\337\244\274\nB\001<\005v\230\273?\335\004<\302\357\274=1\3062>\255\253\225=P\315\246\274\255\3718<\207\242O=e\031\027>\315\215\203=S\325\224=\007\362\024\273;\303\003=lF\267=\033\260]=\212\353\007\275U\305E<\024\305\034\275\306\275\222=\004\351\304<\252?\001\276\244\311(\275f\251\001\275*e\210=\223\326\202=\265\n\333\275!\266\301<\2700\234=m\t\300\275En\324<vG\214=\343\274\304\275\241\0171=\347\317\236\274\002\355\300=k2m\274`t\325;\",\270<\212yU=\305Q\257=\177\222\367\274\337%\361\274X)3=\322\302Z\275\354\314\230<`\235\330=>\370\"\275e<H=\205\033\315\275d\237(\276\242\023\333=\'\354V\274v\337\t=\351u\236=e6\002=\261F\335\275z\004\356<\263J\202< \0233=\014T\201\273\231<e=h\034\357\274\261\366\250=\311\253F\274sl\241=\342\307\233=\224\373\254\273\306\004\320=D\013?=\211\3034>\022\227\016\275\305\246\326\275\027\017u\274\311o\002=\007\251O\274f\006\253\275\356\007\277=W0\"=\204\242\231=\237\036|\275\260D\352\274\331C\203=\320A\003<S\311!\274\301\004\242\275\233{I\274\320@\212\275\214o\t<G\\\005\276\317\312\001=r`N\273\266\371\265\275$.\000=\026e\320;\276\374\033>6/\372<cp\004=\027\264\021>:\020\260\274\272W\301\274\323\367c\275\202\0012<\"\301\205\274\210\243\007\274VZ\207\275I=\300\275}\t\352\274\255c\033=\024\324\344;\005Ka\275\342\263;<\021]\005>x\177\300<\0353\204<(\306\207=c9\240\275\302~|;\024\314\231\274Z\317\223\275\014h\216\275\223\3424\276y\347\303\2754\215d\275\364\031\361\274\337\3654=v\367\035=B\037@\275\007\021\231\275\376\216\260=\232\302\"=\256\024W=\3156\210\275\005\333{\274\203\227G=2\276\036\275\247j\251\273p\255(\275\022\357\330\275\3734\274\275\202w\362\271\216\241\005\274-h\010>\206=l=%a\247\274\277\343\263\275\210\237\311\274\355DN=#\213\013>,\300P\274\253\254\024\275\343\350#=8Z`;\222\221\246=\r\235\340\273\375\325O\275\346\r\307=1\240\020\275\\\324\360;\322\311a\274d\356\2579\215T\252\275\207\025\036<s\376\220=%\024T=N\216\n=\267\213V\275\r\266g\274d\0170<MU\372<\366\024\365=\227ST>%2\322\274\232^k\275\207\023\226\275\244\006F\274R\240p\274%\177\034<\222H\r\275\267O\t\275\215\241S\2748\326z<\2637j\274\312\013\204\2751\031\206\274Y\022\310<>0\332<\023;~\275\370\367\235\274\300\276\324\274\363\311\037=\253\324\307\273\307\236H\275.\'^\274\361\321*=a\207\300\273\345\255\002>\006\357\311<\235\364\230; \324w\275y\037W\275V?\345\275W#)\275-\361_\275E\344\254=,\236\256< y\017<\217\201\354<\240u\210=1\t\300\275dC\251\275\220]\321=@\343\275;\177\322>\275[(\365:\376\335\322;n:b=L\n\271=\244MU=\r\203\371<.2D=r\275\217=6_\202</\246\001:\005\033+\276\216\232=\2758\211X\274\330;\216\2756\274h<\014\243z=\220\n\262\275HfY\274k&?=6\270T\275\330\260\307<WIG=\377\350\302\274\337G4<\3141t<>Fq\275\275\374\013>\177^Z=\245\250\301;\024\314N=<q$<R\347t=\002%\n\275\304\242\001\271@pe<\332jM<\374\263\317\274\350f\376\274\335\316\240\275\235\254\315\274>\361T\275F\275\031=\3403;\275\236ap=i\354\237\275\362\016\346=\357S/\275k\036\245<mN;\275@\026w=\0374\016\276\177\305\265<j\200\003=\332\370\n=9,\001\276\201>\360\273\324n\244\275\t\201\010>\244;\225=b|\365\273>\343\025\275\337\022\204\274\226\215\221\274\274e\316:\241\025\306=S\r\202\275\2516\361<<s\027=\340\246\216=\271\002\244\275\020\1771;\236\276\'=\353\231P=\271\255\032<$\274\001<\262fy;\027\203b<@i\252=\230\315\347;\235\322\000<\016\001k\275\222\010\311=U\377\310=\261+\211\275Z\206\247\2751\027\326<Ga\241<k1\352=\037\024\356=\303\364\212\274b\350q\275MW\253\275\347\266\307\275n:\006>\350\216\340\2751\265\035=\266\207\343=\021\277\212=:\354\005\2755\247e\274\026\037\207=*Lg\275Tp\273;\215\0263=)\262\307=\277\343(=\361\334r=r\324\220=\2260B\275\243\253\364\274\021\276\251\275\220e%<\247=m<\035Q\225=D`r=\016\313\231\275\347\013\016\275Gb><\300\3535= \251\301<2?\303;A\004-\276O\023\215<\2107E=R\367\206\275k4\214=\023\276i\275\224\3170=n\"\233\275\374\371\375\275\000SE<\204\021\313\275\221J\306<\340\363F=\207\300\207\275\244\240&\275Rq\331\273\"\362\373\274_\2736\274g\325\357<\"\337\"=\227\336\262\274/\re=\000\261S=\372\316\237<\263\272\277\275\307\022\224<s\366\254=\303\037\274=\377\241\023\276\352k\230\274\300!\330=G\314\244\275E\355\326=\376\014\255<\370\321Z\274\r\2413\275&\223\336=\267\252\267\275o\253\212:\\\033#=\r\004\207\274yZ\276=[{^\274\3413\304\274V\305\305\274\327E\010=\236\274C<\034C\017\276\337\364U\275[\\\215\275!\007\344\275\n\0132\274F\247\227\275\177\002\342\275\247zX\274\311rA=\377\221d\275A\242\362\274\217`\215\275+8\244<\317\315\337;\223\323\006=\223\272\216\275g\351\240\2754]9=d9}=\235^\312\275\005\035\367:H\202\201=5\340_\275\232\243\243\274fH\224<Bq\333<\023\3357\274\372\275\230=?\022\223\275\344\253\275={H\206\274\264{\036\274O\212\361<G\251\205=\367?#=ctp=\000l\253\275(\025\203\274\301BR=\321C\005<\022\242?\275\274\245\337\273\000!?=D18\275z;\235;\r\303\262\275\236\302\225=Io\201=Nr\240\274\010)\237<\256&/=}S\303\273\353i\302<\332#\020\275\301\005\337\274\332\274\3619\213\027\302=<\315\234=\247\215\356\274N{\021\275\354#\200=\256P\205\274<T^<=(3;T*\221=\333:\254<\231q\223\274t\010\340\274p,\236<\030\364\215\275\345L/<SN\005\276h\017\237=\307\177\322\274\266\202\343\275\270\211\325\274\202 \351\274\247\222\010\276\356=\\\275\t\222\350\274\316i\254=/\201\n=\307>\232\274\004\375!\274\321\"P=\001\347\314<\255\245}=\206\335\215\274aI\034\275\206\316\'\274\031e\211<\247I\274\275\203\355\'=\222[\356<m\252\001=4\225\204=\257\021\356\273#g\312=\006\215\016>\345\227\351\274C\216\206=I\332\243\274\355\013\246=\"\'w\275\001\345\254=\255\253\306\275V\206^\274FJ9\275\253p\233<\352DU<\206\035X=\210\352\313\275\363\302\214=}\303\345\273X!\342\274(\237\026=\327k\016>\243\3355=F\342\272\274V*\'=\201\237\027=\341\234`\275\006.\363;\277\222a=UG\017\275\317\214\267\274z\007\034\274X\251(\274\223\262\313\275\017J?=p@\264=2Q\233=\322\254\026>\014\376}\275\204\332f\274|\007\211=\313R\332\275$b\033\274\216\300\352\273~\220!<\251\243\264;C\353\"<iB;=6S\021\275\013\240\211<*\365\216\274$\316)=\271\\C<\242\320\314<u\222m\275\242\346\252=\255\357\335=\353!V\275\306\262\254\275\031\370\n\276\222\354\033\274\016\n\255\275\023A:\275\241#\254=\203\237\216\275)M!=8\227\024>\215\315B\275\327\340\343:\321UY=\311(\210\2729\030\237=\353c\036\275\321\216\206<%\212\236\275\030\322.\276P\320\310\274<\034\373<\260P\365\275\364+\274\274\256\277\213\275\301\224\266\275\305\306H\274?hx=>\257\336:\352A\314\275M\371\344\274\234[\t<\324\232\360\274pK7\275\345\220`\275\304\251\225\275\020\220\004\273\306\246\332;gq\261=; \333\272\275\032j\275\'Iz\274&\335\241<HS\326<\375h\221;\357\002\\\275\016\201|=\3350V\275\300\225\005=\362P\243\273\360\341\312=]\256\210\275\217\327\310;one=\321\253\257=H\022.\275f\351z=i\3645\274_\017\270\275\322\357!=\335\364\227\274\n\377\304\275\346\004\220;\240\274\201\275\336\261\277\275\014\263R=\202@,=\327@\"\273?\355\037;j\023\010\274\030J\266\273\202y\341=\213_l\275q\212\204\275\350\224\220\275\305\006\215\274\243t8\2753\037\355\2734\'7>\232\252v\275\301\326\202\275\226\254_<\353\331\034=\310%y=#*<<\277\342\274=i\311\247\275\236!\013>\337\227\223=\024\246\261<\250\334\223\275I\r\007;\246\222\027<\266\331\230\271$\245H\2759\220)=\221\020,;\016J\225=\034C1=N\266\300<\215C(\276\317J\260\275\350[\364\273\333\321\025\276\037\306\325<\307c\030<\020\245\336\275\245\210(=\307\365\227\274\037b\210\275\033+;=*\'+\275~\233\351\274S\005\\\274\214\364\336\275\245\261\'\275\2334\005=`\275\207</+\312\274X\315Z=}\254\213=UX\"\275\314\203\212=`\t\334\274\250$\371=\215\016]=\277\245\t>l\037n=\026\226?\274@E\333<P\261\320;\310\301\251=\304V\365\274V\322\014\275g\016\222=\252u-=\364\304\024\276\320\031\022>t\030\020:\237\266\244\275\237\313\227=\351A\353\274\205I\023<\260^,\275E\207\000=\2708\362\274\305\337@\274`F\237=\255\r\221\275ih5<\272 \026=\250\014W\2754s:\275\317\275\354<\306`a=!__<\000\303\262=\333\311v\275N\244\254\275v\035\272=~I\033=R\214\224\275M\360h=\256F\207\275\320\255\230=*\205\202=lW\244\275\333\2269\275\001\243\021=\307F\222<\246D\276=d\210,=c\214\234<\021,I<L\004\001\275L\000\316=\242s\215=9G\">\312\225v=\305\'\274=\006@\265<\353xh\275\211Z\233\274\251u\006\275j\365}\275\357\363\235\274\034\333\010\275t\245\346\274`\240\253\274\311m\227<\007UR\275w\311\331=\325\\\033\275\375\210\241\273*\355\226\274\362\214\215=\026m,\276\373\244\352\274\265\320,=\236\201\220\273\246P\344\274\276Vo\275\002\343\262=<Z\210\273:,\203<\214\354\366\275\001\231\261=\337\037\206<}\322\027>\230\257\260<E~)\274!M\273;\301\334\263\274Q\377\232=\315\2625<\200G}=\277\207\205=\342\t\263\273j\034G=\3457i=\321)}\274y*\227<g\334\213=\332R\272<%!\023\275\245\224J=\310Q{\274\343\300\321<\257\000\020\275\370~\351=\332\211S=j\347\347<g\331\021=\371\210\031;\021`o\275\326\352(\274\031\373\217;\371\240\264\274s\341\204<\366}\353<\202\266h=\030\367\303=\272\223\257\274\316`\223<\370\352\213=\273Y\t=-f@\274C\231\235<\200\276%>5;x\275UG\t\275q\276\367=\240\023\227\275\230\3233=\257D\r<\010\326l=i2g\274=\330\023\276\005\363;\275\232\227\315<\224\026\322=}\022\247=\026b8=\247\325\364\274s5X\275\367X<=*@\014\274@\025\313\2750\017\243\275U\037\373<\256\254\274\275\201\032B=\265\272\320\275\371\237\352<\213\371\250\275Q\227\340=wi\r\274\374mi\275@|\263=z\271\023\275f\210H\275\320\032\177\275\r\337\334\275|\344\005\275\223\032\035\276\315w(=\363\025\301\275\271\001p\275\263\242\325\274#\377\272=%\307\031\276\t\016\000;\016n\316=Qn\305=\261\242\031>I\260\\=\241!V\275\000\3766<}K\331\275XV\240\274\206j\016\274\032^\211=L\221$\2752\311W\275\332\210\001\275\030\230V\274G\307\247=~z\'=WI\253\275\026\352\240=nU\306<\257\257\354\272\356\t\334=\352\266\346<y\001\226=};\333\275pXp\275R\237\357\275\232\203\257\275tg2\275`,\031\276\315R:\275k\215\007\2737~k<\311\'\277<\237qL<?l\361\275%\010\356<\365:L;\344\317N=]\325\020>\214\210Z<o\203\361\274\\\037\027\275#o\207\274%\035\222=\220\260t\275\000j\216=\253\006\340;\021\211\023=\035\265\027\274\341\320\311<U\276C<\334z\212=\267\305*\274\373\245@=\311\2125<\201f\217\275\223h\034=.\211\227=c\332\311<@\261}<x\323.=>\260\345\275\267o\324\275\367\340\006\275N\322`=]6|\275\346\020\033=1\213\227=\"\353@<?\334R=\025\033\241\275,\025\014\2766\031\253<\354\246U=\346Js=[ly\275l\"\320\275\352\326]=\375M\264\2752\313\002:\030=\231=E\257\210=Xj\275\274\351\317d\275\002U\260\275\371\003\n\274\202\363\274=t\256\215\274\330\352\335;\207\246\311\275\375\230\177<\027<\321<\235\240\225\275\254A\002=\000\242\002=h\276\214\275\370\343e<\323`\377<\001\325\016<}\0169;\350]\253=\217\350p<\377F\370\274\t\247@\275L\217\216<c\t,=\004\027\307=t)\373\274\"}f<\230\301\243=H%\"\273 \245l<H+\246\274\316^N\274\267\337\333<{;Z<\244\330\305\274\032\355\264<m\223\236=\365\002,\274\004\021\n\273yxO=\234\220\331\275}\242a\275\031^\307<\0027\375=\367\314Y<\346\366?\275}\221x\275\212g\024\276\273\3259=>/\264=\007t)\275\342KS=H\324\336=\t^\034\273\322 \036=\266\316\275\274\326)\203=2\023\321\275Rs\245\275\345\263\257<\334\313\265=\250\027\324\274\277\223\202=u<\331<\215\214\311<\037\325\256\275\3271\210\274f\310\356\274\000W\201<\220\222:;\314\251x=\351AY\274\264\312Y=\"\316\231<\304\230\254;\356\222\010\276G\005\375\275Q\255c<\373\371\316=\356\202\303=\014\241\212\275C\202\252\274\027\321\211<Y\375\204\275\337\247\263=^\236\347=\000\212|\275/\313\000=\360[\250\274C\317== m?\275\266\211\034=\2155 \275\270\020Z\275\361\216\017;\333\372\364<1;\t\276\250=\216<\007\311-\276[R\030<\027\251\221=Tr\315\274\314/\035<\374\021\023=\037\235\236\275\303\236J\275\324X3\275\225\206\364<vbz<T)\244=B2\217=\002\357f=.\305\325=\007$_=+\233;\274\3607\025\275\327`S\275\033^\241\275\304\004\003\275[\362\206\273\311\275\304<\343\370R=h\3204=\273\256\253;\325\330\241\275\361#\256=\027\3174=\270\323\265=\204\371\322\275\033\035\277\274\311\354F=\361zr\274\275a\236<\321]\215\274%M5\275\335\2314\274\307\274s=\317\346\227\273\242!\020\275\272\277\334\273\265\320\002<\371U\324\273~\364\326=\262\303(=\024\201\337\274\346\205\215\275+a\233=\213\025l=]\320V\275\304n\312=\373W\264=\223G\251<\217\300\243\274i\305\265\275\223\307\327;{V\304\273\246\234\316=\177\006\265\274Y\266^<Y\333\221=d\273\327\275\026\346\215\275\260!\333\272q\030\304=\335\201\356=\227F\325\275\277\304\214\275uq\327=\342\262\213=7\210\211\273\203\210\313\275K\275\315\274\356\234\";[\375\007\276#v\355<\215\224y\275\014TH\275\324I\235<\\\006\230\275H\270_\275 ;\331=\213\020S=\3667\221\275\031\321u<\007\3751\274\000H\025\274\334\271\006=\354\374U=W\366\326\275\002\271\341\274\006\301\367\275::\201\275.\351z=\3140\222\275)\204\215=\273\243\226\274M\274 =\356\266\255<\365HM\274\230\"\024\275\277\232{\275Y\036v=l\363\266<\002\251\363\2750\351\327;j\351V\274\233\367\347;\210>\341=\026\017v\273\'C\000\275\346\224\246=\341\257\270\273h,L\275C^\354\274mi\317\275\211:\377=\377\264\345=N\006\"\275\261\335U<\'j\302\274/\363\241=M\314\037<\034\241?\274\310[\231\275H\264\345\275&\220\327\273p\336\311<e}#\275\335D\227\275\300\216\354<\312\243\307\274.\371\327<EZ\266=\025%\034=6\305\333=\030?\034=\370\322\273\274\257y\322<H\365\r\275\302x\034\275-\320#\275!\346J=\222w%\275\023\202\342\273~\361\315=2\345w=\371\257\231;\333\230\256<\261\265:=\005F\266\274\212\372\233\275\317\315\300=\016/\234\274\321I\246\275{\264F\275\313N]< \244\216=\207DI\275\226\205\260=\216\210\245;\213q\234\275\236\202a\275\226\335\306<+V\r\274\227\320\315\274\003\253\252\275YX\264\275\337\362)\275\356\341_\273\002\007@\275\312M\246:&)\204=\034\3263=.\010\200\275\271\022\224=\311\313\021<\020\237P=\351\333}=\025s\313\275_\027\026\276\243\341!=\2619)\275ra\231\275[\255\262;!\010n\275\264\323R=X\252<=\031o\021\274\"\037\342\275\2248\200=\225\340\270<~\000\200\275\306TU\273d\255\314\275Q\0054=\274I\266=K\026\352\275D\376\347\274\024\242\373\275\002\031\215\274\261H\355\272\231.\275\274?k@=>\232\211=\005\032#\275f\313\354<\370$\037=\232J_=k\334\256=\374\334F<s9\022\274_\331\253<)|~=\236wo<\032?+=\005\210\034;\345V\002=\t\n:\273X\205\001\275\360\270\325\273,o\023;\205d\035=\350i\266\275\330;\244=X\010\215\275\206\321\374<A\033\226<\177\n2<\352%5;\333+\220\273\335\301\274=\324h\371\274$\211\353\275\013E\007\274\377,\330=\353\322\265<_\025\210\275\307f\214\275\373:\200\274\374h\334\275\244e?\274\355\301|\274\260\300C=\265\352\002>\320\325\024\274\rw\307=\307\360\345;\326\024\247\2746\241\000>\244\243f\275\010\007$<?\325\207\275\310D\246<\25216=\215\233\360=J>V<\177O\343<\022\'!:`q\214\275<{\256=\365I\010\276O>B=\021\356\322\274\274\264\023=+\262\033<\223,\021=\345\3711;\233Z\331\273]+{\275\320\332\317\2744\270\372\272\0352i\2754\215\243\2757\016H=\220\376\r\275\310\364\354;\265\307\271<\260\241\216=D\365+\276\367\341\217=A\204\235<\252c\\\275V\307-\275\005O\271=\200\230\204\275\274\367\201\275\315\374\237\275Z\3024\276\220\275\034\275#tu\274KA\357<\211\226\214\273\3468\347<\351\270^=b\235B;c\247\177\274,T\033=\n\321\201=>{\"=1\370\250=\022\341\277=\304\301\212\275\304\203L\274fe\306\275{7\274=\335\332\304\275\361\271\177\274\241\324\257\273\373\364\000\276a\263\211\271!\371\217\274w\232w\275\260\363H=\276\217\372\275\207\037\263="
      }
    }
  }
}
node {
  name: "lstm_2/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_2/recurrent_kernel/Assign"
  op: "Assign"
  input: "lstm_2/recurrent_kernel"
  input: "lstm_2/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_2/recurrent_kernel/read"
  op: "Identity"
  input: "lstm_2/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/recurrent_kernel"
      }
    }
  }
}
node {
  name: "lstm_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/concat"
  op: "ConcatV2"
  input: "lstm_2/Const"
  input: "lstm_2/Const_1"
  input: "lstm_2/Const_2"
  input: "lstm_2/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_2/bias/Assign"
  op: "Assign"
  input: "lstm_2/bias"
  input: "lstm_2/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_2/bias/read"
  op: "Identity"
  input: "lstm_2/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/bias"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice"
  op: "StridedSlice"
  input: "lstm_2/kernel/read"
  input: "lstm_2/strided_slice/stack"
  input: "lstm_2/strided_slice/stack_1"
  input: "lstm_2/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_1"
  op: "StridedSlice"
  input: "lstm_2/kernel/read"
  input: "lstm_2/strided_slice_1/stack"
  input: "lstm_2/strided_slice_1/stack_1"
  input: "lstm_2/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_2"
  op: "StridedSlice"
  input: "lstm_2/kernel/read"
  input: "lstm_2/strided_slice_2/stack"
  input: "lstm_2/strided_slice_2/stack_1"
  input: "lstm_2/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_3"
  op: "StridedSlice"
  input: "lstm_2/kernel/read"
  input: "lstm_2/strided_slice_3/stack"
  input: "lstm_2/strided_slice_3/stack_1"
  input: "lstm_2/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_4"
  op: "StridedSlice"
  input: "lstm_2/recurrent_kernel/read"
  input: "lstm_2/strided_slice_4/stack"
  input: "lstm_2/strided_slice_4/stack_1"
  input: "lstm_2/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_5"
  op: "StridedSlice"
  input: "lstm_2/recurrent_kernel/read"
  input: "lstm_2/strided_slice_5/stack"
  input: "lstm_2/strided_slice_5/stack_1"
  input: "lstm_2/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_6"
  op: "StridedSlice"
  input: "lstm_2/recurrent_kernel/read"
  input: "lstm_2/strided_slice_6/stack"
  input: "lstm_2/strided_slice_6/stack_1"
  input: "lstm_2/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_7"
  op: "StridedSlice"
  input: "lstm_2/recurrent_kernel/read"
  input: "lstm_2/strided_slice_7/stack"
  input: "lstm_2/strided_slice_7/stack_1"
  input: "lstm_2/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_8"
  op: "StridedSlice"
  input: "lstm_2/bias/read"
  input: "lstm_2/strided_slice_8/stack"
  input: "lstm_2/strided_slice_8/stack_1"
  input: "lstm_2/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_9"
  op: "StridedSlice"
  input: "lstm_2/bias/read"
  input: "lstm_2/strided_slice_9/stack"
  input: "lstm_2/strided_slice_9/stack_1"
  input: "lstm_2/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 192
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_10"
  op: "StridedSlice"
  input: "lstm_2/bias/read"
  input: "lstm_2/strided_slice_10/stack"
  input: "lstm_2/strided_slice_10/stack_1"
  input: "lstm_2/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 192
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_11"
  op: "StridedSlice"
  input: "lstm_2/bias/read"
  input: "lstm_2/strided_slice_11/stack"
  input: "lstm_2/strided_slice_11/stack_1"
  input: "lstm_2/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/zeros_like"
  op: "ZerosLike"
  input: "lstm_1/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/Sum"
  op: "Sum"
  input: "lstm_2/zeros_like"
  input: "lstm_2/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "lstm_2/ExpandDims"
  op: "ExpandDims"
  input: "lstm_2/Sum"
  input: "lstm_2/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/Tile"
  op: "Tile"
  input: "lstm_2/ExpandDims"
  input: "lstm_2/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/Tile_1/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/Tile_1"
  op: "Tile"
  input: "lstm_2/ExpandDims"
  input: "lstm_2/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/transpose"
  op: "Transpose"
  input: "lstm_1/transpose_1"
  input: "lstm_2/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/Shape"
  op: "Shape"
  input: "lstm_2/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/strided_slice_12/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_12/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_12/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_12"
  op: "StridedSlice"
  input: "lstm_2/Shape"
  input: "lstm_2/strided_slice_12/stack"
  input: "lstm_2/strided_slice_12/stack_1"
  input: "lstm_2/strided_slice_12/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_2/strided_slice_13/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_13/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_13/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_13"
  op: "StridedSlice"
  input: "lstm_2/transpose"
  input: "lstm_2/strided_slice_13/stack"
  input: "lstm_2/strided_slice_13/stack_1"
  input: "lstm_2/strided_slice_13/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_2/MatMul"
  op: "MatMul"
  input: "lstm_2/strided_slice_13"
  input: "lstm_2/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/MatMul_1"
  op: "MatMul"
  input: "lstm_2/strided_slice_13"
  input: "lstm_2/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/MatMul_2"
  op: "MatMul"
  input: "lstm_2/strided_slice_13"
  input: "lstm_2/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/MatMul_3"
  op: "MatMul"
  input: "lstm_2/strided_slice_13"
  input: "lstm_2/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/BiasAdd"
  op: "BiasAdd"
  input: "lstm_2/MatMul"
  input: "lstm_2/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_2/MatMul_1"
  input: "lstm_2/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_2/MatMul_2"
  input: "lstm_2/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_2/MatMul_3"
  input: "lstm_2/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/MatMul_4"
  op: "MatMul"
  input: "lstm_2/Tile"
  input: "lstm_2/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/add"
  op: "Add"
  input: "lstm_2/BiasAdd"
  input: "lstm_2/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_2/mul"
  op: "Mul"
  input: "lstm_2/mul/x"
  input: "lstm_2/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_2/add_1"
  op: "Add"
  input: "lstm_2/mul"
  input: "lstm_2/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/clip_by_value/Minimum"
  op: "Minimum"
  input: "lstm_2/add_1"
  input: "lstm_2/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/clip_by_value"
  op: "Maximum"
  input: "lstm_2/clip_by_value/Minimum"
  input: "lstm_2/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/MatMul_5"
  op: "MatMul"
  input: "lstm_2/Tile"
  input: "lstm_2/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/add_2"
  op: "Add"
  input: "lstm_2/BiasAdd_1"
  input: "lstm_2/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_2/mul_1"
  op: "Mul"
  input: "lstm_2/mul_1/x"
  input: "lstm_2/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_2/add_3"
  op: "Add"
  input: "lstm_2/mul_1"
  input: "lstm_2/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "lstm_2/add_3"
  input: "lstm_2/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/clip_by_value_1"
  op: "Maximum"
  input: "lstm_2/clip_by_value_1/Minimum"
  input: "lstm_2/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/mul_2"
  op: "Mul"
  input: "lstm_2/clip_by_value_1"
  input: "lstm_2/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/MatMul_6"
  op: "MatMul"
  input: "lstm_2/Tile"
  input: "lstm_2/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/add_4"
  op: "Add"
  input: "lstm_2/BiasAdd_2"
  input: "lstm_2/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/Tanh"
  op: "Tanh"
  input: "lstm_2/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/mul_3"
  op: "Mul"
  input: "lstm_2/clip_by_value"
  input: "lstm_2/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/add_5"
  op: "Add"
  input: "lstm_2/mul_2"
  input: "lstm_2/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/MatMul_7"
  op: "MatMul"
  input: "lstm_2/Tile"
  input: "lstm_2/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/add_6"
  op: "Add"
  input: "lstm_2/BiasAdd_3"
  input: "lstm_2/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/mul_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_2/mul_4"
  op: "Mul"
  input: "lstm_2/mul_4/x"
  input: "lstm_2/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_2/add_7"
  op: "Add"
  input: "lstm_2/mul_4"
  input: "lstm_2/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "lstm_2/add_7"
  input: "lstm_2/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/clip_by_value_2"
  op: "Maximum"
  input: "lstm_2/clip_by_value_2/Minimum"
  input: "lstm_2/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/Tanh_1"
  op: "Tanh"
  input: "lstm_2/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/mul_5"
  op: "Mul"
  input: "lstm_2/clip_by_value_2"
  input: "lstm_2/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/TensorArray"
  op: "TensorArrayV3"
  input: "lstm_2/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "lstm_2/TensorArray_1"
  op: "TensorArrayV3"
  input: "lstm_2/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "lstm_2/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "lstm_2/TensorArrayUnstack/Shape"
  input: "lstm_2/TensorArrayUnstack/strided_slice/stack"
  input: "lstm_2/TensorArrayUnstack/strided_slice/stack_1"
  input: "lstm_2/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/range"
  op: "Range"
  input: "lstm_2/TensorArrayUnstack/range/start"
  input: "lstm_2/TensorArrayUnstack/strided_slice"
  input: "lstm_2/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "lstm_2/TensorArray_1"
  input: "lstm_2/TensorArrayUnstack/range"
  input: "lstm_2/transpose"
  input: "lstm_2/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/transpose"
      }
    }
  }
}
node {
  name: "lstm_2/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/while/Enter"
  op: "Enter"
  input: "lstm_2/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/Enter_1"
  op: "Enter"
  input: "lstm_2/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/Enter_2"
  op: "Enter"
  input: "lstm_2/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/Enter_3"
  op: "Enter"
  input: "lstm_2/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/Merge"
  op: "Merge"
  input: "lstm_2/while/Enter"
  input: "lstm_2/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/while/Merge_1"
  op: "Merge"
  input: "lstm_2/while/Enter_1"
  input: "lstm_2/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Merge_2"
  op: "Merge"
  input: "lstm_2/while/Enter_2"
  input: "lstm_2/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Merge_3"
  op: "Merge"
  input: "lstm_2/while/Enter_3"
  input: "lstm_2/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Less"
  op: "Less"
  input: "lstm_2/while/Merge"
  input: "lstm_2/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/while/Less/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/LoopCond"
  op: "LoopCond"
  input: "lstm_2/while/Less"
}
node {
  name: "lstm_2/while/Switch"
  op: "Switch"
  input: "lstm_2/while/Merge"
  input: "lstm_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge"
      }
    }
  }
}
node {
  name: "lstm_2/while/Switch_1"
  op: "Switch"
  input: "lstm_2/while/Merge_1"
  input: "lstm_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_1"
      }
    }
  }
}
node {
  name: "lstm_2/while/Switch_2"
  op: "Switch"
  input: "lstm_2/while/Merge_2"
  input: "lstm_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_2"
      }
    }
  }
}
node {
  name: "lstm_2/while/Switch_3"
  op: "Switch"
  input: "lstm_2/while/Merge_3"
  input: "lstm_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_3"
      }
    }
  }
}
node {
  name: "lstm_2/while/Identity"
  op: "Identity"
  input: "lstm_2/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/while/Identity_1"
  op: "Identity"
  input: "lstm_2/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Identity_2"
  op: "Identity"
  input: "lstm_2/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Identity_3"
  op: "Identity"
  input: "lstm_2/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_2/while/TensorArrayReadV3/Enter"
  input: "lstm_2/while/Identity"
  input: "lstm_2/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "lstm_2/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/MatMul"
  op: "MatMul"
  input: "lstm_2/while/TensorArrayReadV3"
  input: "lstm_2/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/MatMul_1"
  op: "MatMul"
  input: "lstm_2/while/TensorArrayReadV3"
  input: "lstm_2/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul_1/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/MatMul_2"
  op: "MatMul"
  input: "lstm_2/while/TensorArrayReadV3"
  input: "lstm_2/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul_2/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/MatMul_3"
  op: "MatMul"
  input: "lstm_2/while/TensorArrayReadV3"
  input: "lstm_2/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul_3/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd"
  op: "BiasAdd"
  input: "lstm_2/while/MatMul"
  input: "lstm_2/while/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_2/while/MatMul_1"
  input: "lstm_2/while/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd_1/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_2/while/MatMul_2"
  input: "lstm_2/while/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd_2/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_2/while/MatMul_3"
  input: "lstm_2/while/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd_3/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/MatMul_4"
  op: "MatMul"
  input: "lstm_2/while/Identity_2"
  input: "lstm_2/while/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul_4/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/add"
  op: "Add"
  input: "lstm_2/while/BiasAdd"
  input: "lstm_2/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/mul/x"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_2/while/mul"
  op: "Mul"
  input: "lstm_2/while/mul/x"
  input: "lstm_2/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/add_1/y"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_2/while/add_1"
  op: "Add"
  input: "lstm_2/while/mul"
  input: "lstm_2/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Const"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/while/Const_1"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/while/clip_by_value/Minimum"
  op: "Minimum"
  input: "lstm_2/while/add_1"
  input: "lstm_2/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/clip_by_value"
  op: "Maximum"
  input: "lstm_2/while/clip_by_value/Minimum"
  input: "lstm_2/while/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/MatMul_5"
  op: "MatMul"
  input: "lstm_2/while/Identity_2"
  input: "lstm_2/while/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul_5/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/add_2"
  op: "Add"
  input: "lstm_2/while/BiasAdd_1"
  input: "lstm_2/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/mul_1/x"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_2/while/mul_1"
  op: "Mul"
  input: "lstm_2/while/mul_1/x"
  input: "lstm_2/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/add_3/y"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_2/while/add_3"
  op: "Add"
  input: "lstm_2/while/mul_1"
  input: "lstm_2/while/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Const_2"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/while/Const_3"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/while/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "lstm_2/while/add_3"
  input: "lstm_2/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/clip_by_value_1"
  op: "Maximum"
  input: "lstm_2/while/clip_by_value_1/Minimum"
  input: "lstm_2/while/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/mul_2"
  op: "Mul"
  input: "lstm_2/while/clip_by_value_1"
  input: "lstm_2/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/MatMul_6"
  op: "MatMul"
  input: "lstm_2/while/Identity_2"
  input: "lstm_2/while/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul_6/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/add_4"
  op: "Add"
  input: "lstm_2/while/BiasAdd_2"
  input: "lstm_2/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Tanh"
  op: "Tanh"
  input: "lstm_2/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/mul_3"
  op: "Mul"
  input: "lstm_2/while/clip_by_value"
  input: "lstm_2/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/add_5"
  op: "Add"
  input: "lstm_2/while/mul_2"
  input: "lstm_2/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/MatMul_7"
  op: "MatMul"
  input: "lstm_2/while/Identity_2"
  input: "lstm_2/while/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul_7/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/add_6"
  op: "Add"
  input: "lstm_2/while/BiasAdd_3"
  input: "lstm_2/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/mul_4/x"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_2/while/mul_4"
  op: "Mul"
  input: "lstm_2/while/mul_4/x"
  input: "lstm_2/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/add_7/y"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_2/while/add_7"
  op: "Add"
  input: "lstm_2/while/mul_4"
  input: "lstm_2/while/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Const_4"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/while/Const_5"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/while/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "lstm_2/while/add_7"
  input: "lstm_2/while/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/clip_by_value_2"
  op: "Maximum"
  input: "lstm_2/while/clip_by_value_2/Minimum"
  input: "lstm_2/while/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Tanh_1"
  op: "Tanh"
  input: "lstm_2/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/mul_5"
  op: "Mul"
  input: "lstm_2/while/clip_by_value_2"
  input: "lstm_2/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "lstm_2/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "lstm_2/while/Identity"
  input: "lstm_2/while/mul_5"
  input: "lstm_2/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "lstm_2/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "lstm_2/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/add_8/y"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/while/add_8"
  op: "Add"
  input: "lstm_2/while/Identity"
  input: "lstm_2/while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/while/NextIteration"
  op: "NextIteration"
  input: "lstm_2/while/add_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/while/NextIteration_1"
  op: "NextIteration"
  input: "lstm_2/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/NextIteration_2"
  op: "NextIteration"
  input: "lstm_2/while/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/NextIteration_3"
  op: "NextIteration"
  input: "lstm_2/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Exit"
  op: "Exit"
  input: "lstm_2/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/while/Exit_1"
  op: "Exit"
  input: "lstm_2/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Exit_2"
  op: "Exit"
  input: "lstm_2/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Exit_3"
  op: "Exit"
  input: "lstm_2/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "lstm_2/TensorArray"
  input: "lstm_2/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayStack/range"
  op: "Range"
  input: "lstm_2/TensorArrayStack/range/start"
  input: "lstm_2/TensorArrayStack/TensorArraySizeV3"
  input: "lstm_2/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "lstm_2/TensorArray"
  input: "lstm_2/TensorArrayStack/range"
  input: "lstm_2/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "lstm_2/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/sub"
  op: "Sub"
  input: "lstm_2/while/Exit"
  input: "lstm_2/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_2/TensorArray"
  input: "lstm_2/sub"
  input: "lstm_2/while/Exit_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/transpose_1"
  op: "Transpose"
  input: "lstm_2/TensorArrayStack/TensorArrayGatherV3"
  input: "lstm_2/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1767766922712326
      }
    }
  }
}
node {
  name: "lstm_3/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1767766922712326
      }
    }
  }
}
node {
  name: "lstm_3/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "lstm_3/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 4690812
    }
  }
}
node {
  name: "lstm_3/random_uniform/sub"
  op: "Sub"
  input: "lstm_3/random_uniform/max"
  input: "lstm_3/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/random_uniform/mul"
  op: "Mul"
  input: "lstm_3/random_uniform/RandomUniform"
  input: "lstm_3/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/random_uniform"
  op: "Add"
  input: "lstm_3/random_uniform/mul"
  input: "lstm_3/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_3/kernel/Assign"
  op: "Assign"
  input: "lstm_3/kernel"
  input: "lstm_3/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_3/kernel/read"
  op: "Identity"
  input: "lstm_3/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/kernel"
      }
    }
  }
}
node {
  name: "lstm_3/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 128
          }
        }
        tensor_content: "\236&T<\351\231/\274\214\336/>\312\341)\276\243\005G\274\031P\000>\310\254\217\275\372\013\r<9Z\271;\361\330\377\273\346\316/\275\340\307&\275[\317\331=\336\314\341\272z2\316;\267#\250=\340\2265=n\204\332=+\225\034>\t^\221=Sk\006\275\006\330\377\275\t\2436\276[(Q\275\273\020\236<\306\263\022\274\t7\017\275l\002\360=\330\3667>Jx\302\275n]*<\330D_>S\377\326\275|\336\r=49\342\274\373e\263<\270\355\357\274EVl<\354\254$\275\021\301x\275\235\341X\274Iem\275\215G\300\275h\251]\275\237s\334\275\307\220\327=\212\355^=}\253Q\274L\231\362\275\277\265J\275F\2212\276\0067a<\343\364\000=W\336/;\007~\212\275\334@t=\200\004\226\274(\227>\276\334\310\272<\251DX\2769\302\262<\354s\222\275j\266\363\275>\030Q\275\005\342\003\276r\255@<\023\023\317=\252^\002\275f\237\313=\237\255\316\274\r,\200<z\024>\276\375\2714=\177F_=\363[[\273\252\365\212\275r\023\340\275\203\223\231=\275=C=U\220*\275\002\263\255=\225\267\005>+>h=j\233~\274@O\016\276\326\031T\275\020\035\262<\005\317\256=\251#M=\324A-\272N\242\024\276\013\3738=\311\2329=>\240\365<\350\207\326\273Lhy=\251\375X\275kt\221\275\035h;=\2301\330\274Z\222O\275R\346\217=4\225\231\275\025\310~=3\333$\276|\255O=Y\201<<\213\265K>\0320r=\364\361\324;8\233\355=\303\226\355\275\325\351\230\275\255\255\222<\n{\357\275\\#)<\373[\237=\2511C\275\032\2307\276\020\014\023>\351b@\275\377\027x;\303\342\006<\"\211\303\274\341t\234=&\354\r\276\215[n\276\234=@\274\320\333\203=\372]\261\275\243\034\025\275c\305\200\275}\t,=\301\364\026\276Q\325\271\275\022\010\030\275\235\377\215\275\200\n\315\275\241\254\335\275\336#R=]0\241=1b*>\247\327h<\254E\000>\024\237\207\275\021/\"<s\377\267=\347#g\275\217\253\r\276\310\341\312=\305\377\203=6\261,\276\351[]\276\247\377\\\275\234E(=\232\275\271<\374\353\371<S\337Y\274p\032\216\275\344nP=p\367\236=\350\212~\275\037AY\275GT=\275\345\247\337\275\007\356P=TD\270<\033rI\275\226\325\037\275g\005w=\243\361~\275\263\227p\275>\304V\275\217a\202\275\222\305z=\216J\320\274\207\341\033\276t\0338\274,\2733=^\1775\275\373\353\"\276\335\035\001\275^O\212=\027\300\276\274\227@\215\275\236\305\325={b\370=X_\211\275\211\343\201\275K\320\031\275\370_\357;S*$>\301\252\202=\356\220k<\245\260\300\275%{V=\020\237w\275\311!\304\275%\357q\275d\"h\273*\034\334=\327\201\344\275$Jz>\226\025\003>rV\252\275\020\370\004<\215h\276\2759b\030\276\301\222\326=\032m\266\274+\300\221=\377Ho>\366Ai=\"\211\000\274\331@\225\275\303\247\254=\240;\270\2752\023\220=jp\373=D9\306<.\214?=V;\226=\204\374\257\275\020X3=\\\006\271\272*5\226\276\277\304\207\275\332R(\275\251\336%\275\361K\331\275\250\367\216\273\316\251\210\275\246y\010=\230\377\020\276\2010\257<\357\350\303=\2568\341=\247\277\236\275EV\200\275\026\344\300\273\201\005\004>\rGE\275\360\024\014=\346\033\t\274\265K}\274\034\217\201\275Y<\034==9\030=\245\203\031=r\264\021>RK\022\276\006\210\224\275v\271\301=\237\256\334\274\014e`;{\244u=\321\010E<\242\351\234=\244/B\275_\352\200\274m\300\027\274Q\002\376=\372\211\014=,\013\272\275<Kn=\347\250\277;r\"M\276\226;\202;\205\276\370\274\365\333\356<smg=\2678]=O\202\266\274a\032\243\275\276\242\017>\306\343\334\275\032iO>\255|\360\275\225\375<\275d\363A;\216\251\363;\014\236\377\2754\270\317\275\267\201\344<\235\347\214\275\003\325\317\275c~\267<\203Bk\273\177\026T=\234\316V\276\333\356\037=j2J\275\210\213\373\275\365\361\013\276\036g\253=\361\020\"\276\234o\376<\032\310\323\275\200R\232\275)\222\213<s\254\025>\034\212\301\275\312\2257\276\000\004\317\275\032\320\366;A\r\n\276\007\366\267<\304\362b<Q\204`<6b\272<\262OO>\272n\364=\372\363\000;\245;l\275\346\234j\275$\2207\276\003\325\251\275\341i?>\207r\314\275\213\036\235;\237\007\204\274{tW=\277J\351\274\217\005\277\275o\245\306=\247\243\204<89\343=U\276\310<\317\321|\275#\243&<v\370\237=\316\257^=\227\242\377=\214\3126\275&\217*\274<h\373=\253\231c=x\024\244<&~\264\275\225a\212\275_\006\007\2766\016\274=Fne\274\233\236Z:\226\037\324\275?\310\331=,~K=~\340\341;\203{\242\275\376\014@>\266\247\020>n T\275%\351r<H\265\246\274/\256\224\2750\345\211\274mA\236=dq\230\275=^\024<\200m\343\272\215[0>-v\013\276J\364\271<\353\030\211<\324\220\317<7\030\230=\255a8\275=\353d=\244/\352<\274|\236\275\362\344.\276\305fl=(\024\216=\323\322\375<\017\006E\275:\206Q\276n\321e\275\337\306\274\273\261\376\231=7J\324<oS\201<K\266\336\275\300\261\254:\031\367\225=\227\246\234<\317U\202=)\\\246\275\0042\214\275%h\007=\264t\357=%k\323<3\362\307=\017\217S\274\343\266I\275\203\003\022\275\305X\335=\265\020\335=\025(\313\273_4\317;\276\002\363\275l\314w<\335\300\273\273\032\373?=\257FW\275\033\010P\273\'\270V\275\260\030\300<\035\310h=I\003\031\275G\007c\275\263\335M>\245\013h\273\366_\214<\025s\320\275!\200U<\272\000\210\275\"\276\213=\355\327d\275Z\222!>3v\307\274\240\3754<\020_\273=\357\344\242\275\010\027\236=Aa\262\273_i\374<\260\212\334\274\275#\301=\256{2>\024\204&>\221\230\215=\337i\274=\323r\243=N\355#\2757\3768\276\270\212\227\275\243\304\321\274e\255-\276\226\207\211\275\347\306\250=%\025\310\275\002\n{\275T\246&\274\017\346\214\2756\352\344=%\357\225=5\014\007=\327\234\030\275D\001V>\367>-\276\0215\t\2754\331\212=\344\031T\274\346\354\021\274Ja\350=t\316\017\274\0204#\273\345Y#=v\307\262;\2654Z>U\236\034>[\325\203\275>\372<=\373\033%\275\362\331W>\361>,<\240e};\376\251\254=\014\303\001=\220V\322\274y\244\002\276\322}\025\275p\242V\275\324\264\351\275\261\327\347\275\272\216\251=\260\374\327\275\235\t\340<{Z\243=\233\376)\275\2405e<\337C\304\275b3^=Bg\276=_8&=\233\036\250\275\302[\034>\274\315\310\272\014M8\275S\264\336=P\236\351<\365NW\276\013\261c\275q\030\263\274\3448_=/\317\215<\360u \276\253\207\303=H\215\317=vQ\203\2756\350.=x\014;=\376\021l=7\313\374=\341\210p=\356\310\235<\302J\022\275\005\274\216\275\230\322\273=\034\217\221\276\355a2=q\352\203<\024\026\307\275\003\014\032=\336\222}\275\253\345\230=\035\001L>\357U~<\037K\221=\351\032\320<\324\255\006\2763k\r<\227Xx\275\205\207\231\275\nJ\356=8H\224\274\236\320\006\275\361}\343=|\325]\275\220X\231\275\326\212\023=\013<\027=\237\371\330\274@It\275\211\375o=\324\362\325\275\310\000\301\275XL2=\324g\243\274\022#\265\275tZ%=\354\3263;\016T\t=\205\2662<M\225\352=\2219\245\272\261aQ=\316\006\020>\351\020\224\275\272U\212\275Z\316\307<\300\326\300\275Pt\344=k\272\362<\273\243\205=z\235\026\275F\270Z\274~\306\271=c\006n\273\203\333\000\274o\005\230\271\350\033\232<I9\227\275\337h\031>\034.;=\032vg=\316\035B\274&l\341\275\023\024\235=\302\037\t\276J{,\276\006|\'\275\357u\225\275\rz\325\274\264\225\214<\010\314r=\214Ku\275\255\223\202\274nr\210\275o\373\330<\215\350\376\272\232\004<>\222\212a\275\035\350\334\275ihi\275\005\246s\274d~\242<\372\370R\2765\331\266\275}\247\333\275\340\241\324<\237\241\273\274\245\226\t>\013i\277\275P5\221\275i\211\311=\315\300\341\274\256\217\252\275\013\262\202=\007\221%\276\274\220g=4\220\224=\321\025\237=\302\232\321<\013S!\276\'\262=>\226\207\311=j4\220\275l\345Z\275\355}\365\2749=\271=G\253\030>\273X\273\272k`\300;>]F\276\021nY\275D|^\276\002j\023\276\\\037\021\276\347\276\320\275\241\365\034\275\213\362\375\275[\257J\274\220p\326<\2628\272=\032\217\240\273X\213\034>\236\205\230\275E\223\373\275\256\254\r>\2746\216=\365$\356<z)5<m\312\204\276z\007\036\274\307lZ\275\3367a=5\013\206\274\256\036\201<W(O\275\360\317f\274_Q\221<\016:8\274\022Qq\275\375\034\237=\371\335(<\333\0106>\253`\247=%R\211\275\323\347\030>\323\336|<\316\350O=\310\252\375\274\337<\305\275\022\342]=\343\023b=Nv\316=\0139\331=\006S\201=i\003m=\301\301\177=K\353\207\275]\323\375=\333\362A\274I\212\"=\3145\333\274\376\227\273=\371\000t\275\262\372\232\275\320\266\r\275\244\323\334\274@$\025>Iw\300\275[(\336=\225U\236=9L\272\275E\257\004\276:\344\272=\263\204\256=\233\273w=ja,\275b\313\245=\347\357~\275\224\305\217\274\221H\246=\342\366\331\275\243\203-=\370 %=y\200:=\246\336o=\330\222\337<\370@\360\2745\336\007>\200\347\247=\277\230S\275\355\232\346=n^\317=\246\215\333=F\276\025\276Kz\325\2756\273\016>\350\301>\276\204\252]\275\367\241\346\274]\005W>P;\021>\311z\222\275\260\021\033\275-4t=_K\335<L#\250\274e\250\254=(\351\001\275b\024\016>\245)\001=>f\215=\022\372\033\275\"\206G\276\026(?\276\215\245@=&\033\r\274\333n\220<\356\016\346<,n\005>La*\275Z\254\035\276\314\347\353<\0073i;\322F\345<\236\344\222=\001~\014>4\355V\275_\230l\275\021\255\225<w\364\036\275\273\340\003\274\206\240\201<\013\0055\274r\225\233\274\337\337\t<\222a\030\276-\023\276\275V\355\315\275\221X\002\275\032^\271\275\225\266T>Kj\345\275\217\332\262=\231O\335=\005]_>Tu\313\275|\363e=\027\221\231<\010_r\274\022\023\266\275lk*\276\357YD=HC\353<\310\214\233=\352\377\252\275\354\244k=\256\240\364=T\200\251=\210\031S\275\354]\213\275\366\033\037=\251\252\344\275\364\362_\274\274\336_=l\360\010=(\203\247;\323\346/>\020\026\336\275`\366\000\276\006T\313=\356\252\337\270\265_8\275\253\177\274\275\336\363\360\273A\341\314<C\3279=7\346>>\374\344\330\275\300\277\264\273\\\357\266=\307\347\342=\231Sp\276\"\341g>\0324\027>\215\014\010>-a\360\275\2573Z;\375\336\225;I\205\271<1\357\265=\000V\372\275\2752\355\275+\330\007\276\276\213\337\275yM/\275\030\233\037\275\354~\005>\340f4=Oe\212\274\317Y\"\276\327\232(==T\235;\2350p\274\304\277S\275\301\310\004\275\274\266\014\275}\026\227\274\235\017*\275\035\360\344=\324\252\350\274m\341+\275\'\r\254\275\177\027\256\274b\204\014=\310\204\207;\220\\\306<H\345\261\274S\313\330\275\220\352\032=\345\365:\275\337d!<\275\300\313=\220}f=f3\037\275\205\\\263=p\336K<<\362\032\276?90\275(\276\026\274\234v]\275\004\010T\275\245~\035>\206[l=fA\202\2754\001\355<r5\224=/\221\315;g\036Y\275\314\"\013=z\373\220\275\352\230\013\274\301?\002=!\035\330= \0101\274<\t9<\243\010\256\275\220\302\206>\353[\262\274\304\231\324=(\037\226\274\312\212j\275\336Cn;T%\034=\323\204\307\274!\002\216<\377H\023\2761\236\334=5ct=\355\343\332<\262\344`\276\256{\264=R\365\313=n\342\200\275\206\3119=\310\024L\276j#\232\274\307l\033\276\'\274\263\273\371\217\232=\335\327B>\265$\252==\301\361<Bp\266\275\033\234\214\275\242\306\006\276`\021\037;O\201\271=V5\353\275\367\272L\273\266hP\275\325^\241\275G\226\347\275\336>]\275\373\226\236\274zD\241\275\320/\210=\200\204\324<\354G\267=\204\3565\275.\nf=\351\322$<\210\032\323\275\307\026\030\275Q\357b=\222g\207\274\207\214\250;h\306^\275g\273\354<\325\327,>\251\3730\273\2440\263\274\210\231N=\273\316\250\275\317w\237;\020\326\210=\376i\013\276CM\324\275o\273\300\275\007H\214\273\261tz<\033\231\004=\270\034\177=\205\240\365=4\204}\275_\031\001>\rI\207=\314\335\206\275\244\r\275\275\375P\255\275\330\336\312\274\252\223\n=\300_\374;!\310==\335\344\001\276\365\032\257=v\345\377\275C\213\004\276B2W=hC;>\322$H\275\257\372\352=\245\312\222=\216u\035\276\035}\343\274>/`=\356\030\000>\037\263\266<\263b\212=\265U =\243wJ=\323\352-\276^\375\320\275\3141\213<\217\032\231\275]J\013>g\333j<.\014\207<d\344\226\274Z\224\233\275\376:\260\275\376\326K\276i_\227<\270\002\020=7\000E=TG\021>^\366w\275\236\233\323=\256H\347\275g\020\203\274V\264\227\276{\272\200\274|7\357\275$\262\362\275^\340\266\275+$H=Pg+>\313\217x\275s\337\253=\225\356\213\275U3\210=P\221\265=\345\322\206\275\333Z\024=\222\350D\275B\256}\274\370\023w\275\017\207\347=\246\271a=4j.;\267\226(\276\277*V=\006\312Q=\265e\036<\313i\353=\373\377\303=\212\315\"\275\025@\227=\230y\231\274\232p\236=L\255>=g\222\r>\020o\010\276\220\214\207\275)\254\010>\036\235\337\274\273\017\032\275\360\335\362\274\341\322)>\226\3204;\3613\361<j\024X=\230\003M=\275\007\205=:\3474\275._\024\276 \357s<\3002&\275\252_\345\275\253\304\344<\300)\366\27455^=\335\265\023>\255\266<<\032\345X;\016\\K\275\362>D>\373\225\333=Rt\205=\nc\010\275T\034\"\274\375.\034>]f\302\275\312\335\333\274\204D\255=\311B\361=p\223\364<\352`U>\341&\262=Gm\374\275\226\213\023\275YhI=\312F2\275\033!\006\275\211(z=\252\357\262<+f3>\311\010\374\2757\030\347\275)\177\002=\tX\336=\027\023\326=\345n\224\274\t<\313<\3158m<u\005E\275H\3438\275w\020@>N\016d\273\246\335\034>#\202\267\274\020\277\233\275\226)\360=H\257W\2754\324-\276>[\300<\263\027+\275\311\207\365;\211\300\276\275p\000\224\274\371\212\332=Ph\204=\207\034\243\274%\307\221<Z\254\337\274\261\335\202\275\243\337Z<\t\302\005\275\351\260\n=\376%\246\274\216G\365\274<\n\254\274\017\342\006>l\237\362\274UC|\275C:\021\274X9\242\274\216\216\'9F\311\235\275\376t\320\274\353E:>\335\231\241<3A\"\274\254P\361<L\325\321=\007\343\025\276\263\004p\275\214,1=\030\246r<:B\312=w_\260\275\204y\332\275\227\037`=\326;\200>1\266=;&[\\\275db\315\274\336\375\246=\001+\272\275S\233\r\275\000a\035\275\265*f=\030\305\273=\356)\037=\350<\277\275F\316\357=\245\270\332\272*\367#>\325ly\272\311\244\206<\254\000\027>\360 \232=0\214\001\276\274\344\361;\002d\227\275\264a\310=\341\326\305\275\370\200\373\274\2502\365\273\020c)\274?71=7\304\207=L\037\021\276\3017u=k\210\304=9\216\216<vV\363<\232\014@\274v\241\027=\350{V<\360\373\217\275]\346\235;S\202\363<WIw<\237G\032\275`:\365=A\272M\274\371\360\016<\024`\006\276\265\2564>\000\304\n=\"\343\237\275\340\177G\2765\343\244\274\210\351\253\275_\264\357=\252@\233=\014\201\243>l+\r\275]\200\304\273\272\356Z\275\242\214\037=R\202\016=]\230d>\\\373\016=M\255\025>\230\004\271\274%\0035=\276\326Y=;m\033=\344\341\231\275\251\250\n\275A\"\020\275\247\313\031\274\346H\351=\337\357\243=%%\221\276Ia\203={\244\371\274\313R\330<\207\321|>`\310\364<\005P\256= E\202\275\330\205\227=x@\"\276{j\336<\225Y\271=\310[U<7\204\267=\326\301^\275\367\222\267=,\002\366=)\213\270\275r\332\330=m\352\375\275\352\232\034=\034\347)\275\276C\225<*\"\213\275\232n\252\275\255\025\t<\227\245K>F\237K\275q!x\275]c\236=\273\300\232\275\331$\017\275)\307.\275\202\326\252\275m^4\2756R\257=gi\273=\n\202\224=\n\212\350\274\022\343\215<\227\200\311=\027\027\362:\032\'\222=\263\265-\274\034\3229\274\201V\r=\025\371\033\276\261m\330=\321\027\010>\207\343\235=3\037\177\275\240(Y\273\023\301\227=\227\304%\276\001\353*>1\264\007\276\304\255\215=\362\256\366\273\3135m=\240\326\266=\010\341\261\274\364\252E\275\240\323\376\274e\366$\274:*\206\275\234\344\272\274\211\350\200\274 A\035\276D\353\210\275\243\034\213=\330\222\"=l\2539>a\232\n>\004\230\226=\200\233[=\350:E=B+\302<\330\360\316\274S\\\264\275\255\322\033\275\342\264h\276\'\214\352\275\"1\306=\001\263\035\2738\206W\274\000\323\216=\225\006\004\276\343\210\332\275\227\032\226\275\334\304\302\275\216\014\205\275\356y\252\275fc\177\275\346w\317\275\375\351\037<8\014\020\273\320\210K=\371\036\317\273\300(\354=;\236?\276\025\023\261\275a\303\336<5\002\036=\006>\243\275\205\354\242;\264\360e=\236\036\306<.\007\264\275\300\317\353<x*\265\273\223\205\202\275/\270\t>\022E\010\276W\336\202<nY\242\275\364>\313\275|\210\002=\034U\232\274\347\271\234=\376@\256=_\270\212<\200\241\352=\210\354\n\276\312T\241=\370\2361=^?\'\274^K\355<\254\001k\275\232\3216>1\266$=\1770\000\275\004\007R<\312\352\227\275\020\357\241\275\3203\277\275L\006m\275\014 )>\372\226P>\000\366\361\275\037\215\314<0k\246<\356\2248<\311@\005\276/v\220=\001\372\016\276\203\271\247=e\344\014\276.\'\214=\"7\035=\225n\234\275\277\330\241\275i\205\320;\373c\023\274\273\200\300<\230qK>\035\032\202\274\216\202\215=\027wh>\276\223\225\275\004\356?\275S\330\030\275\3304\336\275\307\373\006>5\3356\275]\317\304;\273\273\365<\227X\001<\275\224\311\275$~\355;\362G%<\313>\214=\331\n\020\275k\223{=\263\335\356=MR\t\276&\360\213\274\311\310\034\275\312\234\261<\254\017\006>\212\2357>\212\325\007\276$\201.\275\233\216;>\003\034`\276\261\233\312=\276\354\003\276:\025->\t\304}\2754\306\246\273\341\376\227=\004(\320=\3464q\275\033\355\254\274\200\343\211\274\3432\200\275\314:\017=S\237\206=\277\2700\2742\213\345;\017h\227\275\333\2639=\327\324o\274\345\247+=\'\366\252\275\364\005o=\320\305\377\275\333\r\354<h\004\213<\331\236\016=\312I\230\275\264Y\216=\304\265<>]E\226\274$\006\034\275\251\323\355\2731\316\236<X\263\345=i\201\242=\276\t\375;U&?\275\276\302\367;\34472\2757\004\270\274\370\\\211= \320v=\224\177\233=hzJ>1<\375<\034@\311=3\3707<\2749\255=\275A\352;\033\255.=E\212\231<\300\204\246\274\233\273\362=\033\034\233=\247\342&\276\032Y\222=T6\333<\"rs\274\253\221\375\275p\275 =\277S\256=\365m\256\275\246\214A\275\014wV\276WL\371=\275p\272\275\361\222\212\275\264]i=\301a\n\276\203)\215\276K\001\206\275\t\264\262\273W\340{\276*\332\216;\324\254>=\235\021a>\270\037w<\257b\234;\231\265\264=\006\345\032\276\232:\"\275\005\364\306=T\355\300\275C\023+=\272\016I=Y\264\026>K2\251\2757c\270\274\325\225\204\274\306\036\177=\307\001\264=t\225a=\303\007O\275D]9\275\2741\263\275\244bj<\026\305y<7(\273=\277u\316<\320\245:<\241\025\024\276\217\273\253<\301\232\274\275n\203V<\005P*\2766\203?=\370yw\274\251xL=\316=1\275W\273\323\274\013]\230=[f\006\276\264\235~<\340\272H=x[Y=\274\232\267=\220R\"\275_\240\003=\2423P\276\345\272\215\275\260\210\236=e\352\006=>u\376=.\331\265\275\013\322\003>P_\274<&\024\234=\004\361\264=\0358\000\274\2019\r=}g#\273\233X\360\274V\264<\275\220\264r\274!\226d\275\231\314\361<\260^\276\274\016\266)=\352\320E=\0237\327\275H\347\323=&\300\226=Y\364|</p\374=\3716S\275\223\244\251\275k\241\005\275N\222\n\274i\367\205\275D\215n\275\311XK:u+3\276Ea\033\275\267\016\210\275\353\005\271\274\036\343\210\275\236\030\304\275\004\223X\272pM\301\275\254\357\222\274\343WX;\025\230\267\275S!_=\276\250\005>\351`\r\275\216HF>\227H\010=\241G\230\275\373\371\227\275\215\342\035=\340\265\313=\254\000\207=\033\236\345\274\027q\005;rW\250\275K\346\256\275G\211\032>j\205\337\275\237i\037\276\215\242L=5\222\032>\216\024\276;\025\000\004\276\234\006\200\275\335<\251\275=\362\201\275|,\266=\324i\025\276\342\246\271=1\036\256=:\350,>\020\302\034\274\326}{\275\342\377\007\276e-\237</5\207=\254\010D\276C4\020\273(\360\262\274\273\326\242\2757[\307=}e\277<\303\301\037=Z\325\311=\332\216\004>v\2539\276=\016\014>\033\000\356\275#\014\224\275\251\023\252=\2534\004\275)\302\350\274\037M\031>\220\343\270=$\336\266\274\347\'\247\274\213J\003\275\342>\214=\316%\215=R\'~\275\363\335\204\274P\310\257\273!]Q\2744\364\267==\303P\274\305\350\'\276\331\324\203<\336\rZ=\267m\037\276\274\316\007\276\ny\221\274\2376\004\276\213\236\322=\340\251\016>\223^*=E\313\303\275\034\342\034<\007\002\200:3;\263=\270\\\223=$\357U\276P\230,;-m\240<0\031\265\275\n\255\023=\320\220\247=dVL<Y\240f\2759qP<Um\355\275\036\\\371=x\'q\273\030\276\231\275\233\374\030=\204\351\367\275\2556\231<q.\026<\212\312\376\275\276\213N;\225\377\254=\207\235\255=\241\341\202=w\224\244\274:.\211\2750\350Q\275\354\2751;\242\022\335=l\377\205=\312\350\006\276K\007\252=.\024\247\274\371\302\315\273u\354=\276\206@\016>\336Z\027\275\314\376\220<.\251\312\275\376\022\244=<\232\354=\031{\362=&\255\243\274^F\017>\2306\331<\265B\006=\364-n=QN,=\241\327\327\275\233\332@\275\2527T\275W\3649<\242G\337<\207Q\034=\274Xr=\030T\317\275*\306\375\275\330\371\351\274\326\2119\275I]\333\273\355CK\275\232\320\220\275\020\022\035\274\022\373R>\353\233\213=\230w$\276s\323\335=2\205w\275vA\374<\325%\036\275BE\206\2744\356l\276\037c\204=N\013\032\275\234\034\260\274\206x\335<2\265\230\274J\245\337\275\223\224\036>\305\346\251=\251\020\301\275/kS\275B\\Z=\350\033_\275\350\'\013=\007\"\306=\204m\347\274?@\026>\304Y|=\222\263\251=8\271d=b\'\334\2741\307J\275\256wi<\225\320\207=\260}\336<8\365B\275\351q\243\275~\371,>\225\243\221=3\277\001\276\203\231\330=\334\353}\276\261Db\275\265\351A\275\363`\360=\234\307\217\275\"\264u\275\233O-\275\234p\357=5=^\275I\025\000\275-\326\261\275%\330\005\276\317O\300\275\004\361\307<\024_\273=\335IR\272\214\325\022\275\n\030\306=\335\203I\275\214\024\313\275n\336z\274v\226\035\276,\254\324<\352\320\024>\013\202\237>\254\226\343<?\375 >\t\254;=4=R\275\233~\257=\326Y\002<p\253\'\275X\003 \276~\356b=@\344\201\275\017\031\270<\263\003\232=\300w\207\275\200\345\204\275,S\263\274\005\261\351=\201\314\232=\304\227\216\275\326\341\224\275\223QJ\275\000\n\360\275\220\350\303=(z\206=4\211N<\223\177\327\275ut\010\274\211]\274=E\2212=~f\347\274\200F;=\003B\366=\314\234\276;\001\336\241=\223p\330\274\246\014\254\275\212\002X\275b\352\341;N\266\032\276\'\020x\275p\3006\275\317\362\223\275Y\004\213\275\222\360~=\013\006\344=\322.\342\271\250\363\037=\213\251]=\275\255 >\365\276p=\'\023^\275\221\021\021>W3\360\275\023\203\343=\353\343\221<\244\370+>\234\246f\274\031\234x=|\344\332<[\242\372\274\347SL=\205O\001>@c\212\275\005\252\250\275L\000\273\275\013\t\251\275\312R\263=K\255\036>\020\037\022\274\3715\324\275\275n3={EJ\274\373\275#>\327w6=\021Y\267=rx\305<\201\327]\2754\0267\275\215\304\275<\000\350\231\275e\220\033=\021\r\320=1\324\360\275\215\314\024>\333\256\303\275\244y\032=\007\300\013\274\213\323\025\276\005>$>\2518\305\273`\241V\274\037h\022>&\013\213\273\254\342\037>\271\213b=\352\376\267\274uA\'=\025\2560\275:h\341=\307\363\367\275\360\347\210<;U9=\341\001\211\274\211!\211\275\001M\036>\266\027\224<\373\0065\275\353\256\326\274Y\265A\275i|\304=\247\245K\275\221\\\010=jw\303\274nu\314<\036\272\361;\373\274\177\275\2204\013>S\243\263\274\265wO<\360\252\354\275#\000\210=};\032=\026\312\013=$\211+<\300\001J\275\226f\260\275\374vr\276\210\201\370;6u\243=\370/\342<\244H-\275$p\252\275\037\336J<_D\026\275\001\345o>rY\233\2749\3751=\273\014\354\275A\300\224\275D\304\016=G\310\203;\325\335\232\275\334!\216=\277\024\241<\256\013\261\273$0{\272\264k\207\273\370\006\027\276\014\370\363=A\351`\275W>\243\2753\237\302=\272\274\217\274\312\007\006>h\264(\276+\226~\274]z\001>\22709\276esR\275(\3452\275\'\223\\\274TB\022>\220\240C=A\030\005=\032\272\220=X\362\032>\336s|\275o\271(\275\256\243\253\275\262\264\234\274\204\311=\276_\032\000\275\2047)\275\262m\320\275d\225\314=\002\206^=\233\314\000\276\346\345+=\265K\244<\361\244\264\274\224e\006\276W`\336\275\331D\'=\250\375\275<\006W\276<+RH>_\371\367\275\301.B>\204\227G\275J[\001\276m\342\317\275;\277\022\275\360rc={\347\2049\374\026\375=\354\000\027>\035\332\216;\211\006h=\244\336\256\275\334?\016>\370\373\357\274\353P\032\276\203%\003\274\253\261\206\275`<W>\353\335]<\030\224\200=\020Y\304\272X\352N\276K\004\027>\316\361*>\230(\\\274PR\257=\206}X\275\362r\351:\n;\006\275\306y\275=\021\364\020>\370[9\276\372\212\266\275\035\0228=\027t\247=\332e\022\275q\310\323\273\226N\'\274\3717?=c\344\206\275\\BB<\007\337\020>\242Z\371;\250K\030<\314q\376=\245\203\225=\275<\205>;E\252\274l\261:=\307\345\217=\374\215\315=\202\307w<\242y\212\275\260K\t=\337\200i\275g\225\323\274)\275\370\275_\210\326=0J\001\276\232\360\032<\272(l=z\352\375\272JN\017\275d\204\031\2758}\252\275\244rB\276\301\307\344<b\327\310=\355\274\247=!\345\014=\360\235\347\275\345\267\332=\345\327\260\274\376\233\312=\246\277\227\275\177J\224\274nl\233\275\235\371+\276\342#C=~d\002\276S\201\251\273\010(\320\274\204\213\346\274X\024\273\274\331\037\034\275\363\027\006\273\345H@\274]\033\002<\023K#\275\320\2452\275\\j\315;\"\021\374=)\321\356;\370\210u\275.L\306=\206\247m\275\273\305\002\276\357\3014=\232\317\232\275\315\031^\276\221\"\367<\277\332\200=C:\247\275%g\320\274%\nz\273\211(,=7:\301\275\331(\323=\264\017E=\037g\235=]\255\030\276\002\220\364\274\357\265u\275\213\366\313\275\376\004\313=\nL\007>4nM\274An\257\275\334\301\222\274N6\002=}{\212=f\3776\276Jr\250\274\036|t\275\222\005}<\215\360~<0\341\007\276L\0360\276L\251\275=#C\354<\013w\364\273\013\356O= \201~=R9$\275\343\225\001\276\250\272\261=\277\266 \276\221\013C<\376\356\345\275\306\251\251=~\333\327\275D\255X<H\332:\275\021\376\323\275\276Kb=\013\245\332=DLV>I\212\273\275\'\256\273=\307y\373\275\"\340\340=\346i\350\275\311\203\006\275\300\025\213\275E\361\332;\360\274\377\274\373\020f=\204!\033\2767\270\023>\251\036|=\212\016\004>\031T?>\356\025\260=(\2113=6zZ>F\326b=\017\351\002=\223Q\377<\243\307\371<fu\000\275\r\230\354<\202\342\';\270\270\220\275\240\261\371:7\363\236\275\261\306\327=\242\263(>\222\341\002\275:\303\342<\220\006\026=Gj\253=\255\310r\276\310\027\314=\204\365\303\2750Qy\2734\243\023>:\257\340=\035\377\322=\371\031\r=\233A\272=\302\335\361=\266d\000>\226\361\017\2753\255\301\275\251\357&\275\253\376\250\275\023\230\277\275Pg\256\275\271\235\202\275\244\301\325=\335\000\037>o\260\276=\362\367~=\366\026\340\2727\0104\275\225\377=<\3042;>a\035\254<\321m%\275[\002K<e>\032<E\361\250\272\221t\002\275b\231\014>\301\344^=\344F\254<\333\036\213<\306!\202\275D\323b;\235\276\312\275\372\351\211=\376\025\005>\n\254B\274c8\376\274\265\351C\276A6\210\275\251\301\266<T\344\213;\026K\007\276\341\332\350<\204\021\021=\026h\026>[\332\202\275\007\362.=\220\377\022=J`,\2754\272\242=\202\025\372=\204g\037\276\277\207\374=\'q>=\035\346\235\275\236\'\364=\255v\033\274\235#\003=\";~;\271 \201=\205\316!\2756(_\275&\202==\211\025\026=~u\224\275\004\ta\276\246\014\371;\237\352\254=\032\246\243\274]@%\274bT\361<Z\317\262\275V\227f\275\313\326\240\275\232\366\357=\214\303\234=\237\357\010\275\377\237L\275|\213\201=\211U\213\275@\370S\274\303*\266=\355\310\031\274\313\312\214=\242\233\304\274\024\252p\275\355(\243<\006\212G=4\332\243\275\'M\200\275+m\273\275vp\366;D\272\353;\371l\005>\022s\330=Xy\371=\230\341N<\240*=\274\006\010\366\275S$z=q@\001\276\247\3178<+\034\273<\004\310\216\275N\n\217\275\001\223g<L\215)\2763\334\305<\263\027\036\275\345\373\221\275\270\021\014=G\2052<}\374B\276\372\336\305=\370\225\272=\321\244y=\205\244\252\275\306\016\264\274pA\027<\216\3760\276\301<\023\276\263\246):6\302&\276\270\017\326=_\347\240=|F\246\275\367n^\275\214\233\021=\024\377Q=\375\020&\276\266N\214\275\375\006\033>\356\214(\276r\036\222<\217\021\t>\264\3530>\246\320\217=\241\250_\275\336{\022<\207A\n=\225\250\367=\013m\221\275d\335c\276\303\320\014=\t&a\274pc\030>\325\317u=5d\241=!dU\275\246\316\243;\210\303%\276\312\355\224<\217\032\214\274\350A\334<\350\034\225<d\223\333\274\017\000\035\276,*H\275E\232\273\275\254gI>\342\306\023=rrU<\r\000\233=\024\273\006\276\350\2329=\301L\333<DN\326\2725\305;\2760J\316\274\221\327\313\275|\347!>\311\364N\275\007y\217\274\367\n\244\275\007?\007>v`\007=\273\261\265<T\035U\276\'C=\276\367{\030=\306\220-\275\333\003z=\253\310p\275\025\026\244=\007!\356\274\305Q,\275\372\270\002\275}\\X\275\231\261\361<yE\331\274\252O\253=\276\235\226\273\261\364t=\205\311w\274f\254\233\275\3069\242\275n|\034\274f\247\245=A\r\254<L\177\233\275/\221\326\275\342\337:<\"\275^=\271\362\232=\314k\274=C\372\220\275=\307\373;\227i\226\273>t\331\275\356\033\323=\234,\203\275\t*G=\032\303\301\275!\355P>\245\333\327\275\267\2442>=G\316=\304\231\034>\347\232\364<\002lD>:V\r=\006b\201=D\347\342\275\354G\264<9\"\267=\353`\n\275\226\302,\275\324\354\022\275\315,\303\274\342):\276\027\275\020\274\376\213\274=\361\324\364\275\037Y8=$\013\276=\262C\017=\214\233H\275\204\312\037\275\356|\205=\212\206=<%\036\017\276L\334\\\275LN\275<[5\036\275\014\225\345\274@\355\031\274\220\350\013\275\354\010\236\275q%p\275\362\302\316=\245\013\310\275\351\356\300\2756\031\357\274\321Ax\273\3464\027\276P^\274\275G\3360\274\263Pl>$T7>\237\210*=\372\013\204\275>u\372<\254\204\366:\204#\222=W^\202\273Z\273\332=\031\177G=\322\0213\275\260G\230\274\275\231\r\271\0276\034>\203\021\374=I\204\2617e\357\326=/\373{\274\340\360\020\276M\232\316=\007\314\034=\365is\27604\314\275\013X\356;<]\337\274:\325\304=E*\244<\313\246;\273\331\204\301\274\322\206\277\275l\216\376\275*\016o\273`;\353\274\361y\364<\330\341\337<O\210\222;[ \t\276M\3027>\203\007 =W\364\001>]M\211;\203\323\374<\304\222\237=\217\257W=\326\030\235<\272\rV\275\214\005g\275\037\242|\274\342\252r\275\304Ao<L\005C>x9\\\275\032\232,\274=\321\351\275w\206\223\275\357\270\370=\030Z;\276\220S.>\010\246\301\275Z\277P=(\037\374\274\201Y\234=+)\317\273\361u\371=A$\021\275\027\350\034\275\304\200\260;M\237h\275~\214\335=F1\353\275\326\302\206=s\260\361=Z\314\324=\271\212\023\275\257\335u<OP}\275V7\345\275\270\177\313<\t\205\204=\264\241\017=\030\364\007=\013\024><\311:\021\275XsC\275[\217\242=?\220\021=RR\023\276B\026j\275*_<>\263\000\030=\263\026\205=\236\255%\274\360&w>\340\032\370\2746\320\330\273\321\305\276=\346\002\021\275\312\273\000>\204\221\036\275\337\262\010\276:\367\007>F\346\206=\037\204\203\275[\243(\276\026\354\337\274\217hL<>\335)\276\riV<w+\257\275YQy\275\003\220\000=\267\230\374\275s\213\205\275)\032\022=\177\375\n=\013\375\342\274\357 \037\276 \342P=\352\212\220\275R{m\275j:\231=CQ\317==q\\\274\006\222\376\275\032J\215;\214\361\026=\320\202D=\226\371\213\275\362\304\311\274\327\371?\2743\237\035\276<\337\257\275\333rB\276\323X\\\275\370\224\002>bR\000>/\026\n\275\362A\332==3e\275\035\031\010\275\200\242\002=TO\n<\372\202\332\275\365T\227\275\311\242#\274\334w\027\276\222\313v\275c\300\245<\270/]=w\036\014=P\353\241=\223S\361\275]^k;\001W\352\274\026\013\230=\214\'\313\274\264\257\037\276)\300\260\275i\265\005\276\250|\r\275\243\014-=\236\240\363=\332\224@=FM\351\275\3302\256=\227\272U\276\342\350\211=\363n\031<\007\023\023\276\342\312\375\274\202\366o=o\364x<\001\3033\275>a\373\274Y\222\016\2760\020\036\275b\230\024\2754x\265=Y\277 \275&\333\266\275\263\331\207\275C\211\230\2750\321\223\275\260\013\332\275i\300\016<EX!\275\341\366\336=\357I\212\275 n0\2762o\354<\335\rr=[\371\\=\025\026_\276\227a_=W\244z<j\3148>\370\310\213<\t\345)>ri\214=\366m\315\274\370\331\352\274\006\217s<\216/\007< 2\013\272\344\211\n\275:\214\236=UB\240\275\374.\256\275\212\366]\275\3548\245=V\325A=s6l=\245K\301=~\206\224=\344\247\304=\004&\023=\210\3127=GX5>\316\222\205\274B\331s=20t=\3037\324\274\211S]=,\350\311=\002\210I=\032\226\207\274\304\335\023\276\035\320\345=|\227\242\274?x\242=.\315\205\275qr\276<z\312\257\275\tx\r\275,\203;\274\257\260\351<\214\213\304:\036\215\'\275ir\257\275q\221P\275\3404\336<\347\031\370<?M\217\273\324\344\223=\201V\215=\342\201K=\324\214O\275tk\335<\312z\340<\215\n\304\275D$\331=@  <\356~\271=D\365\314=/\252\213\274\333\034\216\274B\354\'=\210e\343<<X\236\275\244\241!\275\336\372\276\275\007\244\032\276\213\247\317=S\222\003\275j9%=\330K\037\274\270\021H>s\3527>\332+\035\276\310\332\333=|i\360\272\207\372\257=\202\221F=\202>O\275.y\232\275E\335\335=\360\264\030>Ia\025>\010\211q\276_\027+\275\362\270m=\363v\200\274%\205H<\000\332\266<LW\320<\027r\002>\271\225\300<\350\rv\276\307+[=\033\357\010=v\261S=\330\227\000=O\370\025>\226\224\313;r\273I=\206\201\206\275\0314Q>6\244\200=\226Q\355\274\327\341%\276\276\357\021\275\222qw\275\237\031\002\275\303>\233\274\256J\342=h\222\210\2748\3576\275V\336S=\314\317?>\217\010\220\2745\017\251=\360\303J=\275\367\227\274K\316\033\276\357\243\026\275\032RO<\2141\331=A\223\231=l\330\032=\214R\000>%\372\345;.\360\020\276\3568s=\325_<\275\266Cc\275\317}\003>\013\331\203\275\233\205\316\275\333z\273=\017A\345<f|\240\273\313\251\033>\2660\013\276\354\010\372\275\214\273\000\275\016\336q\275a5\214\275@\243\n=(\305\021>\222\006;\276\206\360\225\275N\030\207<\307Qe\275\306\367\236\275\204\031/\276 kX<\033\253I>G\030\325<\312`\321<(o?<\036\027C<?\'\000\276=\016\201=\324]\213\273\205\220\352\275\r \275\275\233\241\301=\200P\034>_\017\214=\026\232\314\275\376\234\275\275\333\324\037<\332C`>L\220\263\275\017\210\224\275\233\260\212<\004HQ\276\222\227\327={\372\250=m8\251\275+2\257=\316\312 >Z\376\n\274\373I\227=\371Y\365\275\222G\036\2762\301\316\275\301\243\332<\246\017V=\353Zq=\304\235\331=\236F\375=\353=\016\275\333\237\255\275T\230X\273\\@\200\275N:\232\275[\330\231\275\263\r\004>#D\t=\007\250\003=\032\005x=\255\266\315=\210z9\275\204\025\001\276*n\345=\254G\343\275Q\276\201=%\327\211=_0\361\273\r]\'\276\037i/>\346\332G\275\351\235\210\275\235 i\275\266nj\274\310\314\262<\371QC=\032\373\023\275\346\366\001>&\355\005\275\331Dk\275\271\257\032\275\004\302\366\275\307\254\257\274\352\334\336\2758p\233<\215\314\351=y\024\207=&\320\306\274\316\337F<\324\202\200=\201SI>\200.,>\201`\370\274\221\374\260\275\334\003z=L/\222<R\"\206=\227\267\317=\364:\262=\250\243b\275\\}\031\274\347\220\304\275\034\353\221=\223\251\312\275\321YP\275\374\237T\275E\350\345\273\266\366\014>\222\023\320=z\344\314\275\006\262\243=lNw=\356v\037>\362r\376=O3\361=\025\274\371\275\230\224.\275\367\340\230\274\004\007\377=\263e\214=\213\005\263\275\371\374\345<\367\360\275=\n\331\204=\356\325\000\275\201\301\022<\\\205:=\\\024\313\275:0t\274c#\345\274\023mm\275\277\262\231\273H\315D\275O@\227<zN\250\275ll,\274q6\364=\003U\235\274\316\3373=\014\224\025;\022\014*>\023\361\276\275V\211\007\276\"\322\241\275Jq\300=m?@\275o\253\201\275\301\\[=\335\235(\275j[\202<\023\005,>\215\311n=;\272z\272Z\305>\275R\026G\276\342Ck=Zz[<\213\363\025>)\373\220=xk\244\272q\206N\275/\t\023>?\314J=+\232}<U\235\356<\315\311\325=/\343\">AO0>\"0?\276\257W\035\27573V=FM\365=JT\030\275\376a\245\275\225\224\365=\226CW=\206\303\r>\342K\356\274\311\332\n\276O\306\001=\372g)\275s\220\205\276K\225\320=b\252\023<\203\222q=q=\026<L\236b\275\325\031\343\275\263\373\213\275\006\226\n\275\242\010\246\275\342w\200=\203\364\267<w\252O\275f\317\301=\310T\317\275\"\266\325\275rY\360<\323]T\274f\360\r\275\021\254\003>\267\304\355\274\227\026T\275\322z\027\275\024u\326<\225\257d\275\303\014\236\272\300%y\276\364a\275<=|\265\274\365\227\262\274;\352\243\274\242\212q=\034\371\250\275b\335\t=\032N\201=\026\316\273<%\375V>\373\244\241=1x\030\275\344V\270<K\302\246\275;\233\310=\270\360\r\275e\356\t\276\022/\002\275\030\234y\276$@\t=\312\033\231\2753R\255\273#y\221\275\227a\302\274gF\n\275\313@\022=\260\316\220\275\260\254\010>WOd\274oA\\\275\323\313]\274l\334\223\275,\227i<\355c\001\275J\337\356\274$\333\277\275\345\375\374;\211}\227\275\3658\326<[\310\245<?\302\254\272\356%5>\177L\365\2743\327\301=\257\375\376\274\006\252A=Mi\277=\240\032\006\276\261\300M=\177\252\325\274\221\365(>\223\356\233\2753\263\032\274Sb\003>\357\206.=L\3766=3M\036<\331\260>>DrK<M\227\306=\235,\314;y\225\n\273\324\346\261<F\200\233<\215\217\366\275\230\230\344\275\014~S=\207d\016=\234\244\007\275\316NT=\334\206\273\274wT3=\347\371/;\243\310\010\274\311!a=\207\342\007\276m\201;=<^w=|~J\275w\300\321<\225\233;=Ja\253\274\330\240>\275$^\367=\n\201#\275\354i\212;\304\211b<\253C3>%\226\366;\331;\207<\353\213\215<UN5\276{2]>\367\270D=98\301=\372!]\274\313i7=\361o \275\310\362\330\275`\326\204=\345\323\362\275\257\010\037<4\270[=\365#\262=6\0007\275\333^\032;\225\305K=Q\263\244\275\373N\221=\234%)>\345\255i\275\327,\037\276\000\213\"\275\375\343{=\344\223\210<\324\227\024\276\332*8<1D<>V<\r>3\314\324\275\352\356i=\007\362W=\260\251\260\275\031\027&\276\205P\235\275`\240\026=\335S#=\254\215?<\034\255\035=\n@*\276\336\226\257\275\267E\242\275\3300h<\231\212\273=\265\222\233\275m\346\250\275\227\330\277\2739\357\325\271\n\233\n\275\317\216=\2760\030\031>\262\273\237;\332\022$\275*/\223\275\027\004E>:\032\330:\255\016\206\275g\031\340<\202\337I\276\305\312q\275-\354+>?Q\027>qi\231\274,\275\366<b^\017>\376\016\022\2761Y\177;K\t\026\276\035\216=\276}\021\256\275\346\334\003\274x^\310\275\313\334q\275\274%\367\273\321\234\204=\334\367\254;\030\001\252\274\221\245\222=KK\335\274\223m!\275T!\200=\235W\330<K}\335=\272C\370\274\003F\326=C\031\335<\331\371\010>\030Q\031>\251\345B\275M\304\014\276\252\237\004;\235I\262\275\345\253J\275,\261p<\253\366U\275\0313\274\275ZA\245= C\230=]\270\201=W\006b=Q\311\214<M\336^\275\000\223i=\301\373\023<\212a[\275\321~\031<\002\221\024\2767\276\251=\034\367u<g\326#\275>:\366=\342\276\377\273\377\332f> \020\231=\321xC=`u\257\274_\2415<\315\205D>\177\\\363=\344\200Q<\351A\010=\303\307\326\275\346\214\204=O\364\234\274\242H\267=X\356\272=[l\364=)Fn\275\355\213\231\275\001\200\355\272\307a\267<N\217\237\275\371\223\375=\016d\316\275\330\205w\273\027\3111=\376\330^\275\353\205K\276\004\215$\276_`E<\'7\250\274\234?\245<0\276\013>\225\013\226<\320\325\364\272\033\313\002=\256\221B\276\275\331N\273\204g\203=\030l\210\2756\360;\276\013\320\370=\371\327\233<\030\3672\275\\\302\266=q\200_\275\035\246?\275\223\206\371\275\250\364\322\275I\002\030=\203\360\372<\370\360\010>0\"\276\273\347\356\274<\273\345>\275\374\242\246=.\014\241\274\271\2147\273\r-\002>\277\254\251=\331\3752=\260Y\274\275-\257*\275\003\0148>\025w\320\275\333\331\247<\304\377\r>\224\307S=i\211\303=\304\243\004\276\2333e=w\266\243\275w\177\215\275\256\306\247\274\305g`\275\326\200\036\275%\"\232\275\234\207K<O\315\311=\323\223R=\242N\222\275\301]\263=h\024\312=-6\212=\241\301\031=\210\346\303=\302B,>Tp\314\275\000\211\343\275\266\254\035\274\215.\004=\365\347\221=\364 \036\275\211]\375;|\036B\276\264\205g=e8\033=\230\032\356=\331\311*=\241`\334=\372\370N>D\010\330\274\016\216\205=z\350\021>\313\357}=qQ\354\275\325F^\276\247\370?<\231o-=u\344\003=\245\203\250;X\2007=z\324f\275\306\211\034>\272|f\275%\003\215\2746\363*<\313\354\016<\356I\325\274\231\321f=Ah\265\274g\240\016\276\220\227\265={Rj=\245\303\263\272L\3454\275IQ\020=\010o\026\275\235`\003\276\200\311\370<\022-D=\257\200\r>\324Z#\275\260\351A\2732\237\302\2740\351\017=%Kr<\031\202\234\275?\363\260<\271E\250\275\341\250%=\025LF\275\205_\376\274N\236E:\032Tx\275V\202\275\274\274\333*\276\007\315\351=\206\021\203;\252\246\335\275\314E\222\275\272hZ\275r\"\024>\332\313!\275\236q\036>\345O\031\276O\204:\275\367\307\023\276\246\204\237=\377\234\027=\311\367\021>\211\276Q\276\210\037\204;i\243~=\3115G>\312(\237=\367\"\367<\321\361\330=\3218\021\276\010\3207>\325\205R=p\032\346=o\315 \2762@\265=1F\305<%Zu=PN\233\274\273\335U\274\013\036\225=K\027\217=m\340\363<%@\262\273UK6\276\376\353\250\274O\273\035\276\027\257 \276/6\314\275~\344\263=k\t\230\275\250\377\327\275\017\362\326:S\276D=\275\231D=\363o<\275\023ST\274M\003\360\274\311\273\032\275\312*\"\275\276\177c\275!\305\326<\334\261\217\275\243\212\021\275\260\353c\274!\tu\275!\3522<a\250\303\275\r8\267\275\2204\356<\371\376\222<<YE= \251&\276\362\251i:\253\020d\275\331\340#\275\374\355*\2764\007\r\276\227\204\307\275\017\377j\275o\202\004=\350\255s<\334#\206\275\032\342q<M\021\262\274\375\242\000\275\026V\236\275\2470\366;9w+;\337\317%\276f\340\251=E\215\314=w\375\201<\t\352\275=\312\344\232\274\264\367$>d\360\277=\270\177\t>\254\376k=\326\335b\276\"\253!\275)\tY>\027L <\212\2010\276\364\355\241\275M\"\255=^g\216=~\355\034\275\244\277\256=>\352\365\275\353\347$=\006\367\267<\342\307\021>#4w\275O\274\033=\033t\303\275\033d\255=\031\206\'\274Y\222\340=\333\273\323<G\263[\275\001\260\361<V{f\273\304\336\250=\'\272\320\274\246?\203<v\347\307=?\215\214=1\031\236=\233\201\177;\374\200\256=\340\340\000\276d\351\303<|\t)=\257\010\357;\376[\017\276 a\265=\306\006(\275$\245m\275\202(\306\274=\350v\276\361?\371=\217\261<\275\36449>,\200\226\275!\303W\275\361\347?\275\265\203\n\276\355\356Q=\244Y\270\275/\"\r\275\240\376D\276\204\365\325\275.\035\346\275\350\014\273\274\252\277\014\275\211/\343=!\212\030\274&\231\034\275\362,\346\274K\005\313<\\\3152\2750\330\010>\224\352\235=\216\025\303\275\350\324\267=\313=\275\275\272\327\024\275p\2347\275\006\300\362\275#\357H\275\016\215j<\031\262\316\275\326\300d\274l\375?\276kM\236<\177\353j<\216\272\210\275\333\230\031\274\204\300\243=\034\323\035>w\357\376\274\346N.>AR\'\276,\223&\276\317\364c=\022xL\275\213\000\247\275\315\"\367=V\305K\273>\301\374=\330\220\352;\302A\306\275,\005|=\344,\030=\301B\202\275\357\037?=\rUR>z4\";\240\003D\275\260\364\007\275\025\001\347\275\006t\314\275\330\037\007=\246+\341\275o~\032\275\371\033\326=\337\237q=\230c\227=\316(\020\276\014\030P=,q\251=\221\242!\276\317LW\275\213_#=\221W\035\275\230q!=\212\205\253<an\334=\215\005\300=\217\336\036=\310\214\004\276\305-\245\273d\227\2279\242\276%\276\241\320\327=o\024K<\2546\002=\315\003\373<\210\336\374\275\371y\000\276\016\363\355<>\024\243\274M\262A=\307\253\004\276\276z\211=\025\252\255=}^\331\274t\276\266<>>\005=\201p$\275N\243)\276\242\277s=\0063\235=\320\322L\274\"5\353<\273\247V\275\251\330\361\275\323$\240=\311#\274<\261\362\304;\371*\277<;.->\306$\001=\367\221\234<\020VJ\275f\0061>\317\334\371\273}!W\275\006K?=\376\216\302=\236>\254\275\335B\245\275O\253j\276PW\033\275!\247<=\020Y\031:I\353\371=\177\376W=\347\221\206=^;\342=\265\313\214\275,\t\222\274\347\004\262;T\325\251\275\213\333\311=\025\010\300<I4D>\262#4\275\021\033\205=\325)\033\275+\374\377:\322\'\016=b\276.=?\333w\272\325iT=\017X\202\275\272\366\222\274\024\331K=F`m\275\377>\220=C\211\274\275\376\215\273\275\0356\210<\376\354\375=\323\262\032<\256B\320=\240\267\004\276\237\210\004>\254o(\275\030hh=4u4\275E+\272\275\037\266*\276s\273\360\275\037\204\020\276\362:\355<b\376t<a\3743=\203G\327\275^\324q\275(R\202\274\023\376J>\323\031\260;\010\372C<\373\332\357\275\271\343\342\273q@\"=S\205\270\275@&$=fs\243<y\256\234=i\311\261\274f\313\'\275\242S\300\275\206E\267<\304\276h\275\021\375=>K\375S=\315\301\020\275G\226\377\275C\310\351\274\274\203\364<\254\307\271=\3228\t=\2567\000=:\245\222\275\244\027\274=\374\347\305<\236G7\276\315C\336\275\026)\311\275\247\270\377<R%\366\275\230\335\t\276C\240\272\275+\267\262\275f\270Y=<\254\027\275\204\340-\276\311\357\025\276\'\256,=\331Ea\276\030:\232\274\355\207\321=G\213\256\275<Pt>\313\1776;\230\366\005\276\344aE\276\304\016\334=7\2009<\252x\212=\243\001$\275\377\037\004\276k\331;>pV\274\275\2262\311\275UK\337\275U\340T\274v+\243<\352=\004>*O\024=\335e\002\276\266\300\224<\335\017\261\273\310a\211\275\276\n\363\274\354!\211\275\273\242\207;\307D\237\275\303\315\252\275\271\340y<\035\342R\274C\362:=\366t\314=\276\220\327\275v\236\027\275\034\030\323=\322\311\220<\257@\031>\025\004\215\274F\245\311=Z\355\036=TTe=\245\035[\276\357\2313\275\357H\200=;\274\234\274\351\360\330<\374\225\'\274\205\335\234\274\3134\022=v\352\007>SmM>J\260\223=\262\007f=\037\254Z\274\363\316->&B\235\275=\250\206\275\217\023\272=w\321\234<\014@7=\212\326\222\274b\351\326\275\202\345r\275\323N|=\211\026\351\275&\217\313\273\231\266\211\2726\210\232=\214\036\233=\261\026\016>\312\364\251<M\036+\275\20181\275D%\004>\356,\241\274\r\260-\275\3413\021\276\255K\014\275\330\335\250<o\331\210\275\250\321\205=\357\206N\2757\026\224\275\346\377\017\275@\254\252=\341=\311=\005\252\373<\310\306\377\274\255k\013=\322\365\210=&e\263=\211\203Y\275O|\272=\334\335\222=k\244\274\272e\222\002\276\026\255\274;\235\324F<\365\375\300\274w\3677\276+\273\017\276\202\332\036=\030+6\2763\337\363\275\005e\250=\211\337\322;O\275\213<\003R\003:\010^\302\275C\330H>u\350\r>\250\313\007<\267\327\273=\206mZ=L\360\035\276\316\331@=\230\335\315\2756\310\266\275#\272\t\276\335\340*>\326i\234\275tI8=(\"\017=\235\240\221=:\355\013\276\215\264\202=\201\024\224\275\265w\266\274\213^0\276\016\334\302\275\304\256\231\274\033\360\241\274:\216\"=\355\333\233\274oh\272\275\031\003Z;P\200\177\275_\322\320\275\200\335\"\275\254\002\275\274\257\263S=\376\r\301<\300\254\002>ENI\275z.N\275|\335\345=(\tB=\263\206\221<\2511G\275\206^\220\275\313\000\017\276\303x\021=\333=\211=4s\210\275\312\202\275=M\241\370<\004\273\271\275\271\321\324\275P\254\305\275\357D\217=e\004\331=\366\024\256\275.b/>\257\355\247\275\350\246\217\274\221d\177\275\272\361G=y\010Q\275\265*\244=\264d\355\273\227\327\024>\364DO\275\325\304\345\275p\034\226<\261\206\240<\315\233P\275{\316\362<\230.\215\275\244\261\035>\220\356\\\275\301\275\245=\021R\216\274J\020\026\276\354/\225=\347`]<\r\256e=\013\354\263\275m\216U\275V\221\345=r\351\025>\371\301\004\276&\n$\276X\325b=\244k\"=\"=u\275\031{\200=_\320$=\255\221E\275\222#\260\275\237G\251\274\335\032o=\\S\343\275\274\332\236=\272\243\005\275fx\255\275\204\317\255<\262\203\242\275\007y\245\275\310\031\031=\375R6=<\270p\275\250\177*\275\203\253\t\275\231\267\240\275\343\r\322\275\310k\324=\254Z\270<k\337\025>\372\275e\275\360\034\233<\025\325+=\237$\307\275\275,\227=\025\356*\276\033\247\201>\177=\302<\0210\355;Z\025u=be`\275\337+\354<]K\357:\207F\026>[\355r>\013\365c=\333\tz\275\312\271e\275f\3445\276\004x\246=\242\024v<\236\273\231=Gk\324=z\312\214\273\273\235\205=\306\250\353\275\304a[\275\242r\325<\2460\217\274\271\nX<\371\375\364=\256\007b\276B\307g>\335\n;\275?-&\2766\344\302\275R\000v\275\330X6\275wA\253=\307\206\236\2754z\361<\255\323\243=\177\214\202\275\246\302\204<Y\307\004>2\347\233;\027\362\305\275\241\363~\275n\257.\275\330kV\276\252d\004<_N\241=\321n\275<\3201\200<u\361%9\305]/\276\002]@\276\2511\273\275\n\322\010\275~\270z=\357\372\257\275tO\002=\025}\324\2750\316\325\275?\215\263=R\256\202=5\374\364\275\340\232)>K}\020=7\3543=\n\244C=\025\337\365<cm\252\275\200\256\023\276\364\352\366=\273s\266\275\240\023\217={\251k\275\323k\213=\213&\305=b\331X<\000\361B; \210\367=\001\245\007=\007\027a=wW\253\275\205\344\024\274\244k\325=jR\200\275\342\245\236<G\352l\275F\277\344\275\374&M=\300\276\242\275l\361\306=\251\306 \276\377}\344\274\311d;>\300\335\236\275\316X\020\275\356\rH\276\220\330\024\276(1!\276\022\021A={\206}\2751\024\356=\375\'\367=\004\037\250=\374b\304<i\362\242\274\231,\314=\205\366\340:\350|\364\275\273\3712\276\255\343\314\274\036\033?=\216x\010\276\306k\205=\301M\227=}\250B\275\365k,\275\207\\\325=\215\2561\275e\r\225=\030?\n=\274!\200\275\227\377\016>\312\331\253\274\257\326\223;\337\031\363=c\263F=N\'\026;\240\272\235=\255\270\253;\277\n\355\274FVS;\0240W=S\237i=\347+\n\276\211s\377\275\267\245\215=\371!$\2765\305\322\274\002\367\264=_:\033\274D\250u\275\215\200\017\276\241:\323\275\274h\200=,u\337\273\215\301\210\275\367|\034>?|\026\275\3710\253<MQ.>\363\245Z<\362\277\0029d\036\002>\316\326\211;\360\035\020\276r\371a=,\206\025=\236\030\203=\212D\366<\177\234\224=m\\\352\274\351O\251=F\300\255=b\013\303=\273\311\177\274t+\232\275Lv\014\275j\273\203\276\353\343\266;\273\327\217\274\220\266\270\274\311\203\316;s\336&=3\233\372</\t9\275\266:\037=\031\"\216\273\036\205\332<\244d\003\276\304\305\242\275\302j\037\276\024\372\337\275\336\345\245=\321U\325=\200\326\227>e\006*\274md\220\275\222^\315\275\367O@\276\023\025\001=\335\322@>G\325.<\347F\347;\006D\352=\002\177\307=\333\354Q\275\330\022g=1}\213=%\031\256\275\366S\205\275\027\036\031\276\357\232$>\334O\374<\232\234\236\275\330\331\323\274\305\327i=a\271\207\273\re\211\275\030/\014\275@\177\031=\317\024\034\275-;\243=\354\024y\275\313\036\262\275\256\350\363\274\315\300_=(| \275\301\020\242\274o\373\342\275\255\\\340=\330\341\327\275\344\2269>7\327\312=\010Z+=Q\010.\274\363p\215\275(5i\274\007\014}=5\257\347<\000\3610=8&\275=\203q\251\275WE\372=\321\330\347=/\342\035\275\336\356\273=YP\236;\312\376#<\325\247\362\275\330\347==\033\030\301\275\024(U=#}L=\031\262\267\275\024\220\274<\027x\032\276\352\365o=\020d\211\275\010)8<Hu\337\275\270\242\256\275\332\005\310\275\375q\236\275e\264e=\036\033\032\276\202\037\303\275\342\302\214=6\313\223\275\221H\036>.\241==\343o\241\275\373M\345\275\200\352\216=\224\311\036\276\261\036M=\032vR\274\376\272I=\217\026p<\200\000I;\300g$>:}\234=\177\005\251\275\333\004\037=\225\332\275=\177\213\346=\265\324\241=\240\261\207=\177\326\025\275\240.\001>\335\000\017\276\260\252\214\275\t\030r\275\254\343 :\223\217\221\274\376%\340<\277p:=\010a\211\275E\261\370\275\315\233\240\275\2627\221=ka\024\275\013~\263=\220\362\177\274"
      }
    }
  }
}
node {
  name: "lstm_3/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_3/recurrent_kernel/Assign"
  op: "Assign"
  input: "lstm_3/recurrent_kernel"
  input: "lstm_3/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_3/recurrent_kernel/read"
  op: "Identity"
  input: "lstm_3/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/recurrent_kernel"
      }
    }
  }
}
node {
  name: "lstm_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_3/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/concat"
  op: "ConcatV2"
  input: "lstm_3/Const"
  input: "lstm_3/Const_1"
  input: "lstm_3/Const_2"
  input: "lstm_3/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_3/bias/Assign"
  op: "Assign"
  input: "lstm_3/bias"
  input: "lstm_3/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_3/bias/read"
  op: "Identity"
  input: "lstm_3/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/bias"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice"
  op: "StridedSlice"
  input: "lstm_3/kernel/read"
  input: "lstm_3/strided_slice/stack"
  input: "lstm_3/strided_slice/stack_1"
  input: "lstm_3/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_1"
  op: "StridedSlice"
  input: "lstm_3/kernel/read"
  input: "lstm_3/strided_slice_1/stack"
  input: "lstm_3/strided_slice_1/stack_1"
  input: "lstm_3/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_2"
  op: "StridedSlice"
  input: "lstm_3/kernel/read"
  input: "lstm_3/strided_slice_2/stack"
  input: "lstm_3/strided_slice_2/stack_1"
  input: "lstm_3/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_3"
  op: "StridedSlice"
  input: "lstm_3/kernel/read"
  input: "lstm_3/strided_slice_3/stack"
  input: "lstm_3/strided_slice_3/stack_1"
  input: "lstm_3/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_4"
  op: "StridedSlice"
  input: "lstm_3/recurrent_kernel/read"
  input: "lstm_3/strided_slice_4/stack"
  input: "lstm_3/strided_slice_4/stack_1"
  input: "lstm_3/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_5"
  op: "StridedSlice"
  input: "lstm_3/recurrent_kernel/read"
  input: "lstm_3/strided_slice_5/stack"
  input: "lstm_3/strided_slice_5/stack_1"
  input: "lstm_3/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_6"
  op: "StridedSlice"
  input: "lstm_3/recurrent_kernel/read"
  input: "lstm_3/strided_slice_6/stack"
  input: "lstm_3/strided_slice_6/stack_1"
  input: "lstm_3/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_7"
  op: "StridedSlice"
  input: "lstm_3/recurrent_kernel/read"
  input: "lstm_3/strided_slice_7/stack"
  input: "lstm_3/strided_slice_7/stack_1"
  input: "lstm_3/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_8"
  op: "StridedSlice"
  input: "lstm_3/bias/read"
  input: "lstm_3/strided_slice_8/stack"
  input: "lstm_3/strided_slice_8/stack_1"
  input: "lstm_3/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_9"
  op: "StridedSlice"
  input: "lstm_3/bias/read"
  input: "lstm_3/strided_slice_9/stack"
  input: "lstm_3/strided_slice_9/stack_1"
  input: "lstm_3/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_10"
  op: "StridedSlice"
  input: "lstm_3/bias/read"
  input: "lstm_3/strided_slice_10/stack"
  input: "lstm_3/strided_slice_10/stack_1"
  input: "lstm_3/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_11"
  op: "StridedSlice"
  input: "lstm_3/bias/read"
  input: "lstm_3/strided_slice_11/stack"
  input: "lstm_3/strided_slice_11/stack_1"
  input: "lstm_3/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/zeros_like"
  op: "ZerosLike"
  input: "lstm_2/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/Sum"
  op: "Sum"
  input: "lstm_3/zeros_like"
  input: "lstm_3/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "lstm_3/ExpandDims"
  op: "ExpandDims"
  input: "lstm_3/Sum"
  input: "lstm_3/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/Tile"
  op: "Tile"
  input: "lstm_3/ExpandDims"
  input: "lstm_3/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/Tile_1/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/Tile_1"
  op: "Tile"
  input: "lstm_3/ExpandDims"
  input: "lstm_3/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/transpose"
  op: "Transpose"
  input: "lstm_2/transpose_1"
  input: "lstm_3/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/Shape"
  op: "Shape"
  input: "lstm_3/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/strided_slice_12/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_12/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_12/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_12"
  op: "StridedSlice"
  input: "lstm_3/Shape"
  input: "lstm_3/strided_slice_12/stack"
  input: "lstm_3/strided_slice_12/stack_1"
  input: "lstm_3/strided_slice_12/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_3/strided_slice_13/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_13/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_13/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_13"
  op: "StridedSlice"
  input: "lstm_3/transpose"
  input: "lstm_3/strided_slice_13/stack"
  input: "lstm_3/strided_slice_13/stack_1"
  input: "lstm_3/strided_slice_13/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_3/MatMul"
  op: "MatMul"
  input: "lstm_3/strided_slice_13"
  input: "lstm_3/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/MatMul_1"
  op: "MatMul"
  input: "lstm_3/strided_slice_13"
  input: "lstm_3/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/MatMul_2"
  op: "MatMul"
  input: "lstm_3/strided_slice_13"
  input: "lstm_3/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/MatMul_3"
  op: "MatMul"
  input: "lstm_3/strided_slice_13"
  input: "lstm_3/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/BiasAdd"
  op: "BiasAdd"
  input: "lstm_3/MatMul"
  input: "lstm_3/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_3/MatMul_1"
  input: "lstm_3/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_3/MatMul_2"
  input: "lstm_3/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_3/MatMul_3"
  input: "lstm_3/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/MatMul_4"
  op: "MatMul"
  input: "lstm_3/Tile"
  input: "lstm_3/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/add"
  op: "Add"
  input: "lstm_3/BiasAdd"
  input: "lstm_3/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_3/mul"
  op: "Mul"
  input: "lstm_3/mul/x"
  input: "lstm_3/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_3/add_1"
  op: "Add"
  input: "lstm_3/mul"
  input: "lstm_3/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_3/clip_by_value/Minimum"
  op: "Minimum"
  input: "lstm_3/add_1"
  input: "lstm_3/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/clip_by_value"
  op: "Maximum"
  input: "lstm_3/clip_by_value/Minimum"
  input: "lstm_3/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/MatMul_5"
  op: "MatMul"
  input: "lstm_3/Tile"
  input: "lstm_3/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/add_2"
  op: "Add"
  input: "lstm_3/BiasAdd_1"
  input: "lstm_3/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_3/mul_1"
  op: "Mul"
  input: "lstm_3/mul_1/x"
  input: "lstm_3/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_3/add_3"
  op: "Add"
  input: "lstm_3/mul_1"
  input: "lstm_3/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_3/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "lstm_3/add_3"
  input: "lstm_3/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/clip_by_value_1"
  op: "Maximum"
  input: "lstm_3/clip_by_value_1/Minimum"
  input: "lstm_3/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/mul_2"
  op: "Mul"
  input: "lstm_3/clip_by_value_1"
  input: "lstm_3/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/MatMul_6"
  op: "MatMul"
  input: "lstm_3/Tile"
  input: "lstm_3/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/add_4"
  op: "Add"
  input: "lstm_3/BiasAdd_2"
  input: "lstm_3/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/Tanh"
  op: "Tanh"
  input: "lstm_3/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/mul_3"
  op: "Mul"
  input: "lstm_3/clip_by_value"
  input: "lstm_3/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/add_5"
  op: "Add"
  input: "lstm_3/mul_2"
  input: "lstm_3/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/MatMul_7"
  op: "MatMul"
  input: "lstm_3/Tile"
  input: "lstm_3/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/add_6"
  op: "Add"
  input: "lstm_3/BiasAdd_3"
  input: "lstm_3/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/mul_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_3/mul_4"
  op: "Mul"
  input: "lstm_3/mul_4/x"
  input: "lstm_3/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_3/add_7"
  op: "Add"
  input: "lstm_3/mul_4"
  input: "lstm_3/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_3/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "lstm_3/add_7"
  input: "lstm_3/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/clip_by_value_2"
  op: "Maximum"
  input: "lstm_3/clip_by_value_2/Minimum"
  input: "lstm_3/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/Tanh_1"
  op: "Tanh"
  input: "lstm_3/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/mul_5"
  op: "Mul"
  input: "lstm_3/clip_by_value_2"
  input: "lstm_3/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/TensorArray"
  op: "TensorArrayV3"
  input: "lstm_3/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "lstm_3/TensorArray_1"
  op: "TensorArrayV3"
  input: "lstm_3/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "lstm_3/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "lstm_3/TensorArrayUnstack/Shape"
  input: "lstm_3/TensorArrayUnstack/strided_slice/stack"
  input: "lstm_3/TensorArrayUnstack/strided_slice/stack_1"
  input: "lstm_3/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/range"
  op: "Range"
  input: "lstm_3/TensorArrayUnstack/range/start"
  input: "lstm_3/TensorArrayUnstack/strided_slice"
  input: "lstm_3/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "lstm_3/TensorArray_1"
  input: "lstm_3/TensorArrayUnstack/range"
  input: "lstm_3/transpose"
  input: "lstm_3/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/transpose"
      }
    }
  }
}
node {
  name: "lstm_3/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/while/Enter"
  op: "Enter"
  input: "lstm_3/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/Enter_1"
  op: "Enter"
  input: "lstm_3/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/Enter_2"
  op: "Enter"
  input: "lstm_3/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/Enter_3"
  op: "Enter"
  input: "lstm_3/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/Merge"
  op: "Merge"
  input: "lstm_3/while/Enter"
  input: "lstm_3/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/while/Merge_1"
  op: "Merge"
  input: "lstm_3/while/Enter_1"
  input: "lstm_3/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Merge_2"
  op: "Merge"
  input: "lstm_3/while/Enter_2"
  input: "lstm_3/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Merge_3"
  op: "Merge"
  input: "lstm_3/while/Enter_3"
  input: "lstm_3/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Less"
  op: "Less"
  input: "lstm_3/while/Merge"
  input: "lstm_3/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/while/Less/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/LoopCond"
  op: "LoopCond"
  input: "lstm_3/while/Less"
}
node {
  name: "lstm_3/while/Switch"
  op: "Switch"
  input: "lstm_3/while/Merge"
  input: "lstm_3/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge"
      }
    }
  }
}
node {
  name: "lstm_3/while/Switch_1"
  op: "Switch"
  input: "lstm_3/while/Merge_1"
  input: "lstm_3/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_1"
      }
    }
  }
}
node {
  name: "lstm_3/while/Switch_2"
  op: "Switch"
  input: "lstm_3/while/Merge_2"
  input: "lstm_3/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_2"
      }
    }
  }
}
node {
  name: "lstm_3/while/Switch_3"
  op: "Switch"
  input: "lstm_3/while/Merge_3"
  input: "lstm_3/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_3"
      }
    }
  }
}
node {
  name: "lstm_3/while/Identity"
  op: "Identity"
  input: "lstm_3/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/while/Identity_1"
  op: "Identity"
  input: "lstm_3/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Identity_2"
  op: "Identity"
  input: "lstm_3/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Identity_3"
  op: "Identity"
  input: "lstm_3/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_3/while/TensorArrayReadV3/Enter"
  input: "lstm_3/while/Identity"
  input: "lstm_3/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "lstm_3/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/MatMul"
  op: "MatMul"
  input: "lstm_3/while/TensorArrayReadV3"
  input: "lstm_3/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/MatMul_1"
  op: "MatMul"
  input: "lstm_3/while/TensorArrayReadV3"
  input: "lstm_3/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul_1/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/MatMul_2"
  op: "MatMul"
  input: "lstm_3/while/TensorArrayReadV3"
  input: "lstm_3/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul_2/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/MatMul_3"
  op: "MatMul"
  input: "lstm_3/while/TensorArrayReadV3"
  input: "lstm_3/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul_3/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd"
  op: "BiasAdd"
  input: "lstm_3/while/MatMul"
  input: "lstm_3/while/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_3/while/MatMul_1"
  input: "lstm_3/while/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd_1/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_3/while/MatMul_2"
  input: "lstm_3/while/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd_2/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_3/while/MatMul_3"
  input: "lstm_3/while/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd_3/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/MatMul_4"
  op: "MatMul"
  input: "lstm_3/while/Identity_2"
  input: "lstm_3/while/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul_4/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/add"
  op: "Add"
  input: "lstm_3/while/BiasAdd"
  input: "lstm_3/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/mul/x"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_3/while/mul"
  op: "Mul"
  input: "lstm_3/while/mul/x"
  input: "lstm_3/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/add_1/y"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_3/while/add_1"
  op: "Add"
  input: "lstm_3/while/mul"
  input: "lstm_3/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Const"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/while/Const_1"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_3/while/clip_by_value/Minimum"
  op: "Minimum"
  input: "lstm_3/while/add_1"
  input: "lstm_3/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/clip_by_value"
  op: "Maximum"
  input: "lstm_3/while/clip_by_value/Minimum"
  input: "lstm_3/while/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/MatMul_5"
  op: "MatMul"
  input: "lstm_3/while/Identity_2"
  input: "lstm_3/while/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul_5/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/add_2"
  op: "Add"
  input: "lstm_3/while/BiasAdd_1"
  input: "lstm_3/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/mul_1/x"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_3/while/mul_1"
  op: "Mul"
  input: "lstm_3/while/mul_1/x"
  input: "lstm_3/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/add_3/y"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_3/while/add_3"
  op: "Add"
  input: "lstm_3/while/mul_1"
  input: "lstm_3/while/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Const_2"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/while/Const_3"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_3/while/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "lstm_3/while/add_3"
  input: "lstm_3/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/clip_by_value_1"
  op: "Maximum"
  input: "lstm_3/while/clip_by_value_1/Minimum"
  input: "lstm_3/while/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/mul_2"
  op: "Mul"
  input: "lstm_3/while/clip_by_value_1"
  input: "lstm_3/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/MatMul_6"
  op: "MatMul"
  input: "lstm_3/while/Identity_2"
  input: "lstm_3/while/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul_6/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/add_4"
  op: "Add"
  input: "lstm_3/while/BiasAdd_2"
  input: "lstm_3/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Tanh"
  op: "Tanh"
  input: "lstm_3/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/mul_3"
  op: "Mul"
  input: "lstm_3/while/clip_by_value"
  input: "lstm_3/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/add_5"
  op: "Add"
  input: "lstm_3/while/mul_2"
  input: "lstm_3/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/MatMul_7"
  op: "MatMul"
  input: "lstm_3/while/Identity_2"
  input: "lstm_3/while/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul_7/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/add_6"
  op: "Add"
  input: "lstm_3/while/BiasAdd_3"
  input: "lstm_3/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/mul_4/x"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_3/while/mul_4"
  op: "Mul"
  input: "lstm_3/while/mul_4/x"
  input: "lstm_3/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/add_7/y"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_3/while/add_7"
  op: "Add"
  input: "lstm_3/while/mul_4"
  input: "lstm_3/while/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Const_4"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/while/Const_5"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_3/while/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "lstm_3/while/add_7"
  input: "lstm_3/while/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/clip_by_value_2"
  op: "Maximum"
  input: "lstm_3/while/clip_by_value_2/Minimum"
  input: "lstm_3/while/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Tanh_1"
  op: "Tanh"
  input: "lstm_3/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/mul_5"
  op: "Mul"
  input: "lstm_3/while/clip_by_value_2"
  input: "lstm_3/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "lstm_3/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "lstm_3/while/Identity"
  input: "lstm_3/while/mul_5"
  input: "lstm_3/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "lstm_3/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "lstm_3/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/add_8/y"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/while/add_8"
  op: "Add"
  input: "lstm_3/while/Identity"
  input: "lstm_3/while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/while/NextIteration"
  op: "NextIteration"
  input: "lstm_3/while/add_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/while/NextIteration_1"
  op: "NextIteration"
  input: "lstm_3/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/NextIteration_2"
  op: "NextIteration"
  input: "lstm_3/while/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/NextIteration_3"
  op: "NextIteration"
  input: "lstm_3/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Exit"
  op: "Exit"
  input: "lstm_3/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/while/Exit_1"
  op: "Exit"
  input: "lstm_3/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Exit_2"
  op: "Exit"
  input: "lstm_3/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Exit_3"
  op: "Exit"
  input: "lstm_3/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "lstm_3/TensorArray"
  input: "lstm_3/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayStack/range"
  op: "Range"
  input: "lstm_3/TensorArrayStack/range/start"
  input: "lstm_3/TensorArrayStack/TensorArraySizeV3"
  input: "lstm_3/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "lstm_3/TensorArray"
  input: "lstm_3/TensorArrayStack/range"
  input: "lstm_3/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "lstm_3/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/sub"
  op: "Sub"
  input: "lstm_3/while/Exit"
  input: "lstm_3/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_3/TensorArray"
  input: "lstm_3/sub"
  input: "lstm_3/while/Exit_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/transpose_1"
  op: "Transpose"
  input: "lstm_3/TensorArrayStack/TensorArrayGatherV3"
  input: "lstm_3/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dense_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "dense_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.19364917278289795
      }
    }
  }
}
node {
  name: "dense_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.19364917278289795
      }
    }
  }
}
node {
  name: "dense_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 2589551
    }
  }
}
node {
  name: "dense_1/random_uniform/sub"
  op: "Sub"
  input: "dense_1/random_uniform/max"
  input: "dense_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_uniform/mul"
  op: "Mul"
  input: "dense_1/random_uniform/RandomUniform"
  input: "dense_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_uniform"
  op: "Add"
  input: "dense_1/random_uniform/mul"
  input: "dense_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/kernel/Assign"
  op: "Assign"
  input: "dense_1/kernel"
  input: "dense_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/kernel/read"
  op: "Identity"
  input: "dense_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
}
node {
  name: "dense_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/bias/Assign"
  op: "Assign"
  input: "dense_1/bias"
  input: "dense_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/bias/read"
  op: "Identity"
  input: "dense_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
}
node {
  name: "dense_1/MatMul"
  op: "MatMul"
  input: "lstm_3/TensorArrayReadV3"
  input: "dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1/BiasAdd"
  op: "BiasAdd"
  input: "dense_1/MatMul"
  input: "dense_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_1/Tanh"
  op: "Tanh"
  input: "dense_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\006\000\000\000"
      }
    }
  }
}
node {
  name: "dense_2/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.21160368621349335
      }
    }
  }
}
node {
  name: "dense_2/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.21160368621349335
      }
    }
  }
}
node {
  name: "dense_2/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense_2/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 515637
    }
  }
}
node {
  name: "dense_2/random_uniform/sub"
  op: "Sub"
  input: "dense_2/random_uniform/max"
  input: "dense_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/random_uniform/mul"
  op: "Mul"
  input: "dense_2/random_uniform/RandomUniform"
  input: "dense_2/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/random_uniform"
  op: "Add"
  input: "dense_2/random_uniform/mul"
  input: "dense_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_2/kernel/Assign"
  op: "Assign"
  input: "dense_2/kernel"
  input: "dense_2/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_2/kernel/read"
  op: "Identity"
  input: "dense_2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
}
node {
  name: "dense_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_2/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_2/bias/Assign"
  op: "Assign"
  input: "dense_2/bias"
  input: "dense_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_2/bias/read"
  op: "Identity"
  input: "dense_2/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
}
node {
  name: "dense_2/MatMul"
  op: "MatMul"
  input: "dense_1/Tanh"
  input: "dense_2/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_2/BiasAdd"
  op: "BiasAdd"
  input: "dense_2/MatMul"
  input: "dense_2/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_2/Softmax"
  op: "Softmax"
  input: "dense_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/iterations/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "Adam/iterations"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/iterations/Assign"
  op: "Assign"
  input: "Adam/iterations"
  input: "Adam/iterations/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/iterations/read"
  op: "Identity"
  input: "Adam/iterations"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
}
node {
  name: "Adam/lr/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "Adam/lr"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/lr/Assign"
  op: "Assign"
  input: "Adam/lr"
  input: "Adam/lr/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/lr/read"
  op: "Identity"
  input: "Adam/lr"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
}
node {
  name: "Adam/beta_1/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "Adam/beta_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/beta_1/Assign"
  op: "Assign"
  input: "Adam/beta_1"
  input: "Adam/beta_1/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/beta_1/read"
  op: "Identity"
  input: "Adam/beta_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
}
node {
  name: "Adam/beta_2/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "Adam/beta_2"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/beta_2/Assign"
  op: "Assign"
  input: "Adam/beta_2"
  input: "Adam/beta_2/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/beta_2/read"
  op: "Identity"
  input: "Adam/beta_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
}
node {
  name: "Adam/decay/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Adam/decay"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/decay/Assign"
  op: "Assign"
  input: "Adam/decay"
  input: "Adam/decay/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/decay/read"
  op: "Identity"
  input: "Adam/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
}
node {
  name: "dense_2_target"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "dense_2_sample_weights"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/Sum"
  op: "Sum"
  input: "dense_2/Softmax"
  input: "loss/dense_2_loss/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "loss/dense_2_loss/truediv"
  op: "RealDiv"
  input: "dense_2/Softmax"
  input: "loss/dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/sub"
  op: "Sub"
  input: "loss/dense_2_loss/sub/x"
  input: "loss/dense_2_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/clip_by_value/Minimum"
  op: "Minimum"
  input: "loss/dense_2_loss/truediv"
  input: "loss/dense_2_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/clip_by_value"
  op: "Maximum"
  input: "loss/dense_2_loss/clip_by_value/Minimum"
  input: "loss/dense_2_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/Log"
  op: "Log"
  input: "loss/dense_2_loss/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/mul"
  op: "Mul"
  input: "dense_2_target"
  input: "loss/dense_2_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/Sum_1"
  op: "Sum"
  input: "loss/dense_2_loss/mul"
  input: "loss/dense_2_loss/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_2_loss/Neg"
  op: "Neg"
  input: "loss/dense_2_loss/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/Mean"
  op: "Mean"
  input: "loss/dense_2_loss/Neg"
  input: "loss/dense_2_loss/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_2_loss/mul_1"
  op: "Mul"
  input: "loss/dense_2_loss/Mean"
  input: "dense_2_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/NotEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/NotEqual"
  op: "NotEqual"
  input: "dense_2_sample_weights"
  input: "loss/dense_2_loss/NotEqual/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/Cast"
  op: "Cast"
  input: "loss/dense_2_loss/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "loss/dense_2_loss/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/Mean_1"
  op: "Mean"
  input: "loss/dense_2_loss/Cast"
  input: "loss/dense_2_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_2_loss/truediv_1"
  op: "RealDiv"
  input: "loss/dense_2_loss/mul_1"
  input: "loss/dense_2_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/Mean_2"
  op: "Mean"
  input: "loss/dense_2_loss/truediv_1"
  input: "loss/dense_2_loss/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/mul"
  op: "Mul"
  input: "loss/mul/x"
  input: "loss/dense_2_loss/Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/acc/ArgMax/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax"
  op: "ArgMax"
  input: "dense_2_target"
  input: "metrics/acc/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/ArgMax_1/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax_1"
  op: "ArgMax"
  input: "dense_2/Softmax"
  input: "metrics/acc/ArgMax_1/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Equal"
  op: "Equal"
  input: "metrics/acc/ArgMax"
  input: "metrics/acc/ArgMax_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Cast"
  op: "Cast"
  input: "metrics/acc/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "metrics/acc/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "metrics/acc/Mean"
  op: "Mean"
  input: "metrics/acc/Cast"
  input: "metrics/acc/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Fill"
  op: "Fill"
  input: "training/Adam/gradients/Shape"
  input: "training/Adam/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/f_count"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_1"
  op: "Enter"
  input: "training/Adam/gradients/f_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge"
  op: "Merge"
  input: "training/Adam/gradients/f_count_1"
  input: "training/Adam/gradients/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch"
  op: "Switch"
  input: "training/Adam/gradients/Merge"
  input: "lstm_3/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add/y"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add"
  op: "Add"
  input: "training/Adam/gradients/Switch:1"
  input: "training/Adam/gradients/Add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/Add"
  input: "^training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_4_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_1_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPushV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_2"
  op: "Exit"
  input: "training/Adam/gradients/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_1"
  op: "Enter"
  input: "training/Adam/gradients/f_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_1"
  op: "Merge"
  input: "training/Adam/gradients/b_count_1"
  input: "training/Adam/gradients/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/Merge_1"
  input: "training/Adam/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/b_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_2"
  op: "LoopCond"
  input: "training/Adam/gradients/GreaterEqual"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_1"
  op: "Switch"
  input: "training/Adam/gradients/Merge_1"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Sub"
  op: "Sub"
  input: "training/Adam/gradients/Switch_1:1"
  input: "training/Adam/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_1"
  op: "NextIteration"
  input: "training/Adam/gradients/Sub"
  input: "^training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_3"
  op: "Exit"
  input: "training/Adam/gradients/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_3"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_4"
  op: "Enter"
  input: "training/Adam/gradients/f_count_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_2"
  op: "Merge"
  input: "training/Adam/gradients/f_count_4"
  input: "training/Adam/gradients/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_2"
  op: "Switch"
  input: "training/Adam/gradients/Merge_2"
  input: "lstm_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add_1/y"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add_1"
  op: "Add"
  input: "training/Adam/gradients/Switch_2:1"
  input: "training/Adam/gradients/Add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_2"
  op: "NextIteration"
  input: "training/Adam/gradients/Add_1"
  input: "^training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_4_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_1_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPushV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_5"
  op: "Exit"
  input: "training/Adam/gradients/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_4"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_5"
  op: "Enter"
  input: "training/Adam/gradients/f_count_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_3"
  op: "Merge"
  input: "training/Adam/gradients/b_count_5"
  input: "training/Adam/gradients/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual_1"
  op: "GreaterEqual"
  input: "training/Adam/gradients/Merge_3"
  input: "training/Adam/gradients/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/b_count_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_6"
  op: "LoopCond"
  input: "training/Adam/gradients/GreaterEqual_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_3"
  op: "Switch"
  input: "training/Adam/gradients/Merge_3"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Sub_1"
  op: "Sub"
  input: "training/Adam/gradients/Switch_3:1"
  input: "training/Adam/gradients/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_3"
  op: "NextIteration"
  input: "training/Adam/gradients/Sub_1"
  input: "^training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_7"
  op: "Exit"
  input: "training/Adam/gradients/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_6"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_7"
  op: "Enter"
  input: "training/Adam/gradients/f_count_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_4"
  op: "Merge"
  input: "training/Adam/gradients/f_count_7"
  input: "training/Adam/gradients/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_4"
  op: "Switch"
  input: "training/Adam/gradients/Merge_4"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add_2/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add_2"
  op: "Add"
  input: "training/Adam/gradients/Switch_4:1"
  input: "training/Adam/gradients/Add_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_4"
  op: "NextIteration"
  input: "training/Adam/gradients/Add_2"
  input: "^training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_4_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_1_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPushV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_8"
  op: "Exit"
  input: "training/Adam/gradients/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_8"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_9"
  op: "Enter"
  input: "training/Adam/gradients/f_count_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_5"
  op: "Merge"
  input: "training/Adam/gradients/b_count_9"
  input: "training/Adam/gradients/NextIteration_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual_2"
  op: "GreaterEqual"
  input: "training/Adam/gradients/Merge_5"
  input: "training/Adam/gradients/GreaterEqual_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual_2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/b_count_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_10"
  op: "LoopCond"
  input: "training/Adam/gradients/GreaterEqual_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_5"
  op: "Switch"
  input: "training/Adam/gradients/Merge_5"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Sub_2"
  op: "Sub"
  input: "training/Adam/gradients/Switch_5:1"
  input: "training/Adam/gradients/GreaterEqual_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_5"
  op: "NextIteration"
  input: "training/Adam/gradients/Sub_2"
  input: "^training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_11"
  op: "Exit"
  input: "training/Adam/gradients/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/Fill"
  input: "loss/dense_2_loss/Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/mul_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/Fill"
  input: "loss/mul/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/mul_grad/Mul_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Shape"
  op: "Shape"
  input: "loss/dense_2_loss/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Shape_1"
  op: "Shape"
  input: "loss/dense_2_loss/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Shape_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Prod"
  op: "Prod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Shape_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Prod_1"
  op: "Prod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Shape_2"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Prod_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Prod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Cast"
  op: "Cast"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/truediv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Tile"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Shape"
  op: "Shape"
  input: "loss/dense_2_loss/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/RealDiv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/truediv"
  input: "loss/dense_2_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Neg"
  op: "Neg"
  input: "loss/dense_2_loss/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/RealDiv_1"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Neg"
  input: "loss/dense_2_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/RealDiv_2"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/RealDiv_1"
  input: "loss/dense_2_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/truediv"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/mul"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Sum_1"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Shape"
  op: "Shape"
  input: "loss/dense_2_loss/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Shape_1"
  op: "Shape"
  input: "dense_2_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Reshape"
  input: "dense_2_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/mul"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/mul_1"
  op: "Mul"
  input: "loss/dense_2_loss/Mean"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/mul_1"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Sum_1"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape"
  op: "Shape"
  input: "loss/dense_2_loss/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/add"
  op: "Add"
  input: "loss/dense_2_loss/Mean/reduction_indices"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/add"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/range"
  op: "Range"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/range/start"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Size"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/range"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/mod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/DynamicStitch"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape_2"
  op: "Shape"
  input: "loss/dense_2_loss/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape_3"
  op: "Shape"
  input: "loss/dense_2_loss/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Prod"
  op: "Prod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape_2"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Prod_1"
  op: "Prod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape_3"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum_1/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum_1"
  op: "Maximum"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Prod_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/floordiv_1"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Prod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Cast"
  op: "Cast"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/truediv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Tile"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Neg_grad/Neg"
  op: "Neg"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Neg"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Shape"
  op: "Shape"
  input: "loss/dense_2_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/add"
  op: "Add"
  input: "loss/dense_2_loss/Sum_1/reduction_indices"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/add"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/range"
  op: "Range"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/range/start"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Size"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Shape_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/range"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/mod"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/DynamicStitch"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/Neg_grad/Neg"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Shape"
  op: "Shape"
  input: "dense_2_target"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Shape_1"
  op: "Shape"
  input: "loss/dense_2_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Tile"
  input: "loss/dense_2_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/mul"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/mul_1"
  op: "Mul"
  input: "dense_2_target"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/mul_1"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Sum_1"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "loss/dense_2_loss/clip_by_value"
  input: "^training/Adam/gradients/loss/dense_2_loss/mul_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Log"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Log_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Reshape_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Log"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape"
  op: "Shape"
  input: "loss/dense_2_loss/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/Log_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape_2"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "loss/dense_2_loss/clip_by_value/Minimum"
  input: "loss/dense_2_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/loss/dense_2_loss/Log_grad/mul"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/zeros"
  input: "training/Adam/gradients/loss/dense_2_loss/Log_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Select"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Select_1"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Sum_1"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "loss/dense_2_loss/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "loss/dense_2_loss/truediv"
  input: "loss/dense_2_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/zeros"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Select"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Select_1"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Shape"
  op: "Shape"
  input: "dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Shape_1"
  op: "Shape"
  input: "loss/dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Reshape"
  input: "loss/dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Neg"
  op: "Neg"
  input: "dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Neg"
  input: "loss/dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/RealDiv_1"
  input: "loss/dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/mul"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Sum_1"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Shape"
  op: "Shape"
  input: "dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/add"
  op: "Add"
  input: "loss/dense_2_loss/Sum/reduction_indices"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/add"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/range"
  op: "Range"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/range/start"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Size"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Shape_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/range"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/mod"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/DynamicStitch"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Reshape_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN"
  op: "AddN"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Tile"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/Softmax_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/AddN"
  input: "dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/Softmax_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/Softmax"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/Softmax_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/dense_2/Softmax_grad/mul"
  input: "training/Adam/gradients/dense_2/Softmax_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/Softmax"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/Softmax_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/Softmax"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/Softmax_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/dense_2/Softmax_grad/Sum"
  input: "training/Adam/gradients/dense_2/Softmax_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/Softmax_grad/sub"
  op: "Sub"
  input: "training/Adam/gradients/AddN"
  input: "training/Adam/gradients/dense_2/Softmax_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/Softmax_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/dense_2/Softmax_grad/sub"
  input: "dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/dense_2/Softmax_grad/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/dense_2/Softmax_grad/mul_1"
  input: "dense_2/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dense_1/Tanh"
  input: "training/Adam/gradients/dense_2/Softmax_grad/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "dense_1/Tanh"
  input: "training/Adam/gradients/dense_2/MatMul_grad/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/Tanh"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/dense_1/Tanh_grad/TanhGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/dense_1/Tanh_grad/TanhGrad"
  input: "dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "lstm_3/TensorArrayReadV3"
  input: "training/Adam/gradients/dense_1/Tanh_grad/TanhGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "lstm_3/TensorArray"
  input: "lstm_3/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray"
        s: "loc:@lstm_3/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "lstm_3/while/Exit_1"
  input: "^training/Adam/gradients/lstm_3/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray"
        s: "loc:@lstm_3/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "training/Adam/gradients/lstm_3/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "lstm_3/sub"
  input: "training/Adam/gradients/dense_1/MatMul_grad/MatMul"
  input: "training/Adam/gradients/lstm_3/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like"
  op: "ZerosLike"
  input: "lstm_3/while/Exit_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_1"
  op: "ZerosLike"
  input: "lstm_3/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/Exit_1_grad/b_exit"
  input: "training/Adam/gradients/lstm_3/while/Switch_1_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/Exit_2_grad/b_exit"
  input: "training/Adam/gradients/lstm_3/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/Exit_3_grad/b_exit"
  input: "training/Adam/gradients/lstm_3/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/Switch_1_grad/b_switch"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/Switch_2_grad/b_switch"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/Switch_3_grad/b_switch"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/Merge_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/Merge_2_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Enter_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/Merge_3_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Enter_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/lstm_3/while/Merge_1_grad/Switch:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "lstm_3/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_3/while/Merge_1_grad/Switch:1"
  input: "^training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Identity"
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Identity"
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "lstm_3/while/Identity"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_4_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_1_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/Shape"
  op: "Shape"
  input: "lstm_3/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/stack"
  op: "Pack"
  input: "lstm_3/Tile/multiples"
  input: "training/Adam/gradients/lstm_3/Tile_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Rank"
  op: "Rank"
  input: "training/Adam/gradients/lstm_3/Tile_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose/sub/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose/sub"
  op: "Sub"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Range"
  op: "Range"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Range/start"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose/sub_1"
  op: "Sub"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/sub"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_3/Tile_grad/stack"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose"
  input: "training/Adam/gradients/lstm_3/Tile_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_3/Tile_grad/range/start"
  input: "training/Adam/gradients/lstm_3/Tile_grad/Size"
  input: "training/Adam/gradients/lstm_3/Tile_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/Enter_2_grad/Exit"
  input: "training/Adam/gradients/lstm_3/Tile_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/Tile_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/Tile_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/Shape"
  op: "Shape"
  input: "lstm_3/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/stack"
  op: "Pack"
  input: "lstm_3/Tile_1/multiples"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Rank"
  op: "Rank"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/sub/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/sub"
  op: "Sub"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Range"
  op: "Range"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Range/start"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/sub_1"
  op: "Sub"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/sub"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/stack"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/range/start"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/Size"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/Enter_3_grad/Exit"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_1"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/while/Merge_2_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/AddN_1"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Tanh_1"
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Tanh_1"
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/Enter"
  input: "lstm_3/while/Tanh_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/AddN_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/Enter"
  input: "lstm_3/while/clip_by_value_2"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_2"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/Tile_grad/Sum"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/Sum"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/ExpandDims_grad/Shape"
  op: "Shape"
  input: "lstm_3/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/AddN_2"
  input: "training/Adam/gradients/lstm_3/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/clip_by_value_2/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Shape_2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/Enter"
  input: "lstm_3/while/clip_by_value_2/Minimum"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/zeros"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Select_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Tanh_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/Merge_1_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Shape"
  op: "Shape"
  input: "lstm_3/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/add"
  op: "Add"
  input: "lstm_3/Sum/reduction_indices"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/lstm_3/Sum_grad/add"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_3/Sum_grad/range/start"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Size"
  input: "training/Adam/gradients/lstm_3/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Shape_1"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/lstm_3/Sum_grad/range"
  input: "training/Adam/gradients/lstm_3/Sum_grad/mod"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Shape"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/lstm_3/Sum_grad/DynamicStitch"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Shape"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/ExpandDims_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  input: "lstm_3/while/add_7"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_3"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/while/Merge_3_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/AddN_3"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/AddN_3"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Identity_3"
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Identity_3"
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/Enter"
  input: "lstm_3/while/Identity_3"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/Enter"
  input: "lstm_3/while/clip_by_value_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Tanh"
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Tanh"
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/Enter"
  input: "lstm_3/while/Tanh"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/Enter"
  input: "lstm_3/while/clip_by_value"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/Shape"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/Enter"
  input: "lstm_3/while/add_6"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul_1"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/clip_by_value_1/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Shape_2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/Enter"
  input: "lstm_3/while/clip_by_value_1/Minimum"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/zeros"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Select_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Shape_2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/Enter"
  input: "lstm_3/while/clip_by_value/Minimum"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/zeros"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Select_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Tanh"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/BiasAdd_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  input: "lstm_3/while/add_3"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  input: "lstm_3/while/add_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Identity_2"
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Identity_2"
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/Enter"
  input: "lstm_3/while/Identity_2"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
        s: "loc:@lstm_3/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
        s: "loc:@lstm_3/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/Enter"
  input: "lstm_3/while/TensorArrayReadV3"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/Shape"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/Enter"
  input: "lstm_3/while/add_2"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul_1"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/Shape"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul/Enter"
  input: "lstm_3/while/add"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul_1"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_11_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_11_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_11_grad/Shape"
  input: "lstm_3/strided_slice_11/stack"
  input: "lstm_3/strided_slice_11/stack_1"
  input: "lstm_3/strided_slice_11/stack_2"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_11"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_7_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_7_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_7_grad/Shape"
  input: "lstm_3/strided_slice_7/stack"
  input: "lstm_3/strided_slice_7/stack_1"
  input: "lstm_3/strided_slice_7/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_7"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_10_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_10_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_10_grad/Shape"
  input: "lstm_3/strided_slice_10/stack"
  input: "lstm_3/strided_slice_10/stack_1"
  input: "lstm_3/strided_slice_10/stack_2"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_10"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_6_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_6_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_6_grad/Shape"
  input: "lstm_3/strided_slice_6/stack"
  input: "lstm_3/strided_slice_6/stack_1"
  input: "lstm_3/strided_slice_6/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_6"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_3_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_3_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_3_grad/Shape"
  input: "lstm_3/strided_slice_3/stack"
  input: "lstm_3/strided_slice_3/stack_1"
  input: "lstm_3/strided_slice_3/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_3"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_2_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_2_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_2_grad/Shape"
  input: "lstm_3/strided_slice_2/stack"
  input: "lstm_3/strided_slice_2/stack_1"
  input: "lstm_3/strided_slice_2/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_2"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_4"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6_grad/MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5_grad/MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_9_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_9_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_9_grad/Shape"
  input: "lstm_3/strided_slice_9/stack"
  input: "lstm_3/strided_slice_9/stack_1"
  input: "lstm_3/strided_slice_9/stack_2"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_9"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_5_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_5_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_5_grad/Shape"
  input: "lstm_3/strided_slice_5/stack"
  input: "lstm_3/strided_slice_5/stack_1"
  input: "lstm_3/strided_slice_5/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_5"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_5"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2_grad/MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1_grad/MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3"
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "lstm_3/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3"
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3"
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3"
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/AddN_5"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_8_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_8_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_8_grad/Shape"
  input: "lstm_3/strided_slice_8/stack"
  input: "lstm_3/strided_slice_8/stack_1"
  input: "lstm_3/strided_slice_8/stack_2"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_8"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_4_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_4_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_4_grad/Shape"
  input: "lstm_3/strided_slice_4/stack"
  input: "lstm_3/strided_slice_4/stack_1"
  input: "lstm_3/strided_slice_4/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_4"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_1_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_1_grad/Shape"
  input: "lstm_3/strided_slice_1/stack"
  input: "lstm_3/strided_slice_1/stack_1"
  input: "lstm_3/strided_slice_1/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_grad/Shape"
  input: "lstm_3/strided_slice/stack"
  input: "lstm_3/strided_slice/stack_1"
  input: "lstm_3/strided_slice/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_6"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/strided_slice_11_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_10_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_9_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_8_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_11"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_7"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/strided_slice_7_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_6_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_5_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_4_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "lstm_3/TensorArray_1"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray_1"
        s: "loc:@lstm_3/transpose"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^training/Adam/gradients/lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray_1"
        s: "loc:@lstm_3/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "training/Adam/gradients/lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "lstm_3/TensorArrayUnstack/range"
  input: "training/Adam/gradients/lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/transpose"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_8"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/strided_slice_3_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_2_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_1_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "lstm_3/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/transpose_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "training/Adam/gradients/lstm_3/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "lstm_2/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/transpose_1_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_3/transpose_grad/transpose"
  input: "training/Adam/gradients/lstm_2/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "lstm_2/TensorArray"
  input: "lstm_2/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "lstm_2/while/Exit_1"
  input: "^training/Adam/gradients/lstm_2/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "training/Adam/gradients/lstm_2/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "lstm_2/TensorArrayStack/range"
  input: "training/Adam/gradients/lstm_2/transpose_1_grad/transpose"
  input: "training/Adam/gradients/lstm_2/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_2"
  op: "ZerosLike"
  input: "lstm_2/while/Exit_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_3"
  op: "ZerosLike"
  input: "lstm_2/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/Exit_1_grad/b_exit"
  input: "training/Adam/gradients/lstm_2/while/Switch_1_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/Exit_2_grad/b_exit"
  input: "training/Adam/gradients/lstm_2/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/Exit_3_grad/b_exit"
  input: "training/Adam/gradients/lstm_2/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/Switch_1_grad/b_switch"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/Switch_2_grad/b_switch"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/Switch_3_grad/b_switch"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/Merge_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/Merge_2_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Enter_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/Merge_3_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Enter_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/lstm_2/while/Merge_1_grad/Switch:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "lstm_2/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_2/while/Merge_1_grad/Switch:1"
  input: "^training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Identity"
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Identity"
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "lstm_2/while/Identity"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_4_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_1_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/Shape"
  op: "Shape"
  input: "lstm_2/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/stack"
  op: "Pack"
  input: "lstm_2/Tile/multiples"
  input: "training/Adam/gradients/lstm_2/Tile_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Rank"
  op: "Rank"
  input: "training/Adam/gradients/lstm_2/Tile_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose/sub/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose/sub"
  op: "Sub"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Range"
  op: "Range"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Range/start"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose/sub_1"
  op: "Sub"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/sub"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_2/Tile_grad/stack"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose"
  input: "training/Adam/gradients/lstm_2/Tile_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_2/Tile_grad/range/start"
  input: "training/Adam/gradients/lstm_2/Tile_grad/Size"
  input: "training/Adam/gradients/lstm_2/Tile_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/Enter_2_grad/Exit"
  input: "training/Adam/gradients/lstm_2/Tile_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/Tile_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/Tile_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/Shape"
  op: "Shape"
  input: "lstm_2/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/stack"
  op: "Pack"
  input: "lstm_2/Tile_1/multiples"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Rank"
  op: "Rank"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/sub/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/sub"
  op: "Sub"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Range"
  op: "Range"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Range/start"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/sub_1"
  op: "Sub"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/sub"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/stack"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/range/start"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/Size"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/Enter_3_grad/Exit"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_9"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/while/Merge_2_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/AddN_9"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Tanh_1"
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Tanh_1"
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/Enter"
  input: "lstm_2/while/Tanh_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/AddN_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/Enter"
  input: "lstm_2/while/clip_by_value_2"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_10"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/Tile_grad/Sum"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/Sum"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/ExpandDims_grad/Shape"
  op: "Shape"
  input: "lstm_2/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/AddN_10"
  input: "training/Adam/gradients/lstm_2/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/clip_by_value_2/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Shape_2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/Enter"
  input: "lstm_2/while/clip_by_value_2/Minimum"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/zeros"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Select_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Tanh_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/Merge_1_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Shape"
  op: "Shape"
  input: "lstm_2/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/add"
  op: "Add"
  input: "lstm_2/Sum/reduction_indices"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/lstm_2/Sum_grad/add"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_2/Sum_grad/range/start"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Size"
  input: "training/Adam/gradients/lstm_2/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Shape_1"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/lstm_2/Sum_grad/range"
  input: "training/Adam/gradients/lstm_2/Sum_grad/mod"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Shape"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/lstm_2/Sum_grad/DynamicStitch"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Shape"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/ExpandDims_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  input: "lstm_2/while/add_7"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_11"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/while/Merge_3_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/AddN_11"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/AddN_11"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Identity_3"
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Identity_3"
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/Enter"
  input: "lstm_2/while/Identity_3"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/Enter"
  input: "lstm_2/while/clip_by_value_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Tanh"
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Tanh"
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/Enter"
  input: "lstm_2/while/Tanh"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/Enter"
  input: "lstm_2/while/clip_by_value"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/Shape"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/Enter"
  input: "lstm_2/while/add_6"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul_1"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/clip_by_value_1/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Shape_2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/Enter"
  input: "lstm_2/while/clip_by_value_1/Minimum"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/zeros"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Select_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Shape_2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/Enter"
  input: "lstm_2/while/clip_by_value/Minimum"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/zeros"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Select_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Tanh"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/BiasAdd_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  input: "lstm_2/while/add_3"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  input: "lstm_2/while/add_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Identity_2"
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Identity_2"
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/Enter"
  input: "lstm_2/while/Identity_2"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
        s: "loc:@lstm_2/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
        s: "loc:@lstm_2/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/Enter"
  input: "lstm_2/while/TensorArrayReadV3"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/Shape"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/Enter"
  input: "lstm_2/while/add_2"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul_1"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/Shape"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul/Enter"
  input: "lstm_2/while/add"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul_1"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_11_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_11_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_11_grad/Shape"
  input: "lstm_2/strided_slice_11/stack"
  input: "lstm_2/strided_slice_11/stack_1"
  input: "lstm_2/strided_slice_11/stack_2"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_11"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_7_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_7_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_7_grad/Shape"
  input: "lstm_2/strided_slice_7/stack"
  input: "lstm_2/strided_slice_7/stack_1"
  input: "lstm_2/strided_slice_7/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_7"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_10_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_10_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_10_grad/Shape"
  input: "lstm_2/strided_slice_10/stack"
  input: "lstm_2/strided_slice_10/stack_1"
  input: "lstm_2/strided_slice_10/stack_2"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_10"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_6_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_6_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_6_grad/Shape"
  input: "lstm_2/strided_slice_6/stack"
  input: "lstm_2/strided_slice_6/stack_1"
  input: "lstm_2/strided_slice_6/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_6"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_3_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_3_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_3_grad/Shape"
  input: "lstm_2/strided_slice_3/stack"
  input: "lstm_2/strided_slice_3/stack_1"
  input: "lstm_2/strided_slice_3/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_3"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_2_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_2_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_2_grad/Shape"
  input: "lstm_2/strided_slice_2/stack"
  input: "lstm_2/strided_slice_2/stack_1"
  input: "lstm_2/strided_slice_2/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_2"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_12"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6_grad/MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5_grad/MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_9_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_9_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_9_grad/Shape"
  input: "lstm_2/strided_slice_9/stack"
  input: "lstm_2/strided_slice_9/stack_1"
  input: "lstm_2/strided_slice_9/stack_2"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_9"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_5_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_5_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_5_grad/Shape"
  input: "lstm_2/strided_slice_5/stack"
  input: "lstm_2/strided_slice_5/stack_1"
  input: "lstm_2/strided_slice_5/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_5"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_13"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2_grad/MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1_grad/MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3"
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "lstm_2/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3"
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3"
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3"
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/AddN_13"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_8_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_8_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_8_grad/Shape"
  input: "lstm_2/strided_slice_8/stack"
  input: "lstm_2/strided_slice_8/stack_1"
  input: "lstm_2/strided_slice_8/stack_2"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_8"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/AddN_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_4_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_4_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_4_grad/Shape"
  input: "lstm_2/strided_slice_4/stack"
  input: "lstm_2/strided_slice_4/stack_1"
  input: "lstm_2/strided_slice_4/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_4"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_1_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_1_grad/Shape"
  input: "lstm_2/strided_slice_1/stack"
  input: "lstm_2/strided_slice_1/stack_1"
  input: "lstm_2/strided_slice_1/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_grad/Shape"
  input: "lstm_2/strided_slice/stack"
  input: "lstm_2/strided_slice/stack_1"
  input: "lstm_2/strided_slice/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_14"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/strided_slice_11_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_10_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_9_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_8_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_11"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_15"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/strided_slice_7_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_6_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_5_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_4_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "lstm_2/TensorArray_1"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray_1"
        s: "loc:@lstm_2/transpose"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^training/Adam/gradients/lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray_1"
        s: "loc:@lstm_2/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "training/Adam/gradients/lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "lstm_2/TensorArrayUnstack/range"
  input: "training/Adam/gradients/lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/transpose"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_16"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/strided_slice_3_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_2_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_1_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "lstm_2/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/transpose_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "training/Adam/gradients/lstm_2/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "lstm_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/transpose_1_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_2/transpose_grad/transpose"
  input: "training/Adam/gradients/lstm_1/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "lstm_1/TensorArray"
  input: "lstm_1/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "lstm_1/while/Exit_1"
  input: "^training/Adam/gradients/lstm_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "training/Adam/gradients/lstm_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "lstm_1/TensorArrayStack/range"
  input: "training/Adam/gradients/lstm_1/transpose_1_grad/transpose"
  input: "training/Adam/gradients/lstm_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_4"
  op: "ZerosLike"
  input: "lstm_1/while/Exit_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_5"
  op: "ZerosLike"
  input: "lstm_1/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/Exit_1_grad/b_exit"
  input: "training/Adam/gradients/lstm_1/while/Switch_1_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/Exit_2_grad/b_exit"
  input: "training/Adam/gradients/lstm_1/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/Exit_3_grad/b_exit"
  input: "training/Adam/gradients/lstm_1/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/Switch_1_grad/b_switch"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/Switch_2_grad/b_switch"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/Switch_3_grad/b_switch"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/Merge_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/Merge_2_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Enter_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/Merge_3_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Enter_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/lstm_1/while/Merge_1_grad/Switch:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "lstm_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_1/while/Merge_1_grad/Switch:1"
  input: "^training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "lstm_1/while/Identity"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_4_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_1_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/Shape"
  op: "Shape"
  input: "lstm_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/stack"
  op: "Pack"
  input: "lstm_1/Tile/multiples"
  input: "training/Adam/gradients/lstm_1/Tile_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/transpose/Rank"
  op: "Rank"
  input: "training/Adam/gradients/lstm_1/Tile_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/transpose/sub/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/transpose/sub"
  op: "Sub"
  input: "training/Adam/gradients/lstm_1/Tile_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_1/Tile_grad/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/transpose/Range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/transpose/Range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/transpose/Range"
  op: "Range"
  input: "training/Adam/gradients/lstm_1/Tile_grad/transpose/Range/start"
  input: "training/Adam/gradients/lstm_1/Tile_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_1/Tile_grad/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/transpose/sub_1"
  op: "Sub"
  input: "training/Adam/gradients/lstm_1/Tile_grad/transpose/sub"
  input: "training/Adam/gradients/lstm_1/Tile_grad/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_1/Tile_grad/stack"
  input: "training/Adam/gradients/lstm_1/Tile_grad/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/Tile_grad/transpose"
  input: "training/Adam/gradients/lstm_1/Tile_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_1/Tile_grad/range/start"
  input: "training/Adam/gradients/lstm_1/Tile_grad/Size"
  input: "training/Adam/gradients/lstm_1/Tile_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/Enter_2_grad/Exit"
  input: "training/Adam/gradients/lstm_1/Tile_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/Tile_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/Tile_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/Shape"
  op: "Shape"
  input: "lstm_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/stack"
  op: "Pack"
  input: "lstm_1/Tile_1/multiples"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/Rank"
  op: "Rank"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/sub/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/sub"
  op: "Sub"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/Range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/Range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/Range"
  op: "Range"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/Range/start"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/sub_1"
  op: "Sub"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/sub"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/stack"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/range/start"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/Size"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/Enter_3_grad/Exit"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_17"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/while/Merge_2_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/AddN_17"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh_1"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh_1"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/Enter"
  input: "lstm_1/while/Tanh_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/AddN_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/Enter"
  input: "lstm_1/while/clip_by_value_2"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_18"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/Tile_grad/Sum"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/Sum"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/ExpandDims_grad/Shape"
  op: "Shape"
  input: "lstm_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/AddN_18"
  input: "training/Adam/gradients/lstm_1/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value_2/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape_2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Enter"
  input: "lstm_1/while/clip_by_value_2/Minimum"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/zeros"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Select_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/Merge_1_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/Shape"
  op: "Shape"
  input: "lstm_1/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/add"
  op: "Add"
  input: "lstm_1/Sum/reduction_indices"
  input: "training/Adam/gradients/lstm_1/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/lstm_1/Sum_grad/add"
  input: "training/Adam/gradients/lstm_1/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_1/Sum_grad/range/start"
  input: "training/Adam/gradients/lstm_1/Sum_grad/Size"
  input: "training/Adam/gradients/lstm_1/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1/Sum_grad/Shape_1"
  input: "training/Adam/gradients/lstm_1/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/lstm_1/Sum_grad/range"
  input: "training/Adam/gradients/lstm_1/Sum_grad/mod"
  input: "training/Adam/gradients/lstm_1/Sum_grad/Shape"
  input: "training/Adam/gradients/lstm_1/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/lstm_1/Sum_grad/DynamicStitch"
  input: "training/Adam/gradients/lstm_1/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/lstm_1/Sum_grad/Shape"
  input: "training/Adam/gradients/lstm_1/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/ExpandDims_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/lstm_1/Sum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  input: "lstm_1/while/add_7"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_19"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/while/Merge_3_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/AddN_19"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/AddN_19"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_3"
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_3"
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/Enter"
  input: "lstm_1/while/Identity_3"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/Enter"
  input: "lstm_1/while/clip_by_value_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh"
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh"
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/Enter"
  input: "lstm_1/while/Tanh"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/Enter"
  input: "lstm_1/while/clip_by_value"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Shape"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/Enter"
  input: "lstm_1/while/add_6"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value_1/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape_2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Enter"
  input: "lstm_1/while/clip_by_value_1/Minimum"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/zeros"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Select_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape_2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Enter"
  input: "lstm_1/while/clip_by_value/Minimum"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/zeros"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Select_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/BiasAdd_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  input: "lstm_1/while/add_3"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  input: "lstm_1/while/add_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_2"
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_2"
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/Enter"
  input: "lstm_1/while/Identity_2"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
        s: "loc:@lstm_1/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
        s: "loc:@lstm_1/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/Enter"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Shape"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/Enter"
  input: "lstm_1/while/add_2"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Shape"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul/Enter"
  input: "lstm_1/while/add"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_11_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_11_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_11_grad/Shape"
  input: "lstm_1/strided_slice_11/stack"
  input: "lstm_1/strided_slice_11/stack_1"
  input: "lstm_1/strided_slice_11/stack_2"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_7_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_7_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_7_grad/Shape"
  input: "lstm_1/strided_slice_7/stack"
  input: "lstm_1/strided_slice_7/stack_1"
  input: "lstm_1/strided_slice_7/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_10_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_10_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_10_grad/Shape"
  input: "lstm_1/strided_slice_10/stack"
  input: "lstm_1/strided_slice_10/stack_1"
  input: "lstm_1/strided_slice_10/stack_2"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_6_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_6_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_6_grad/Shape"
  input: "lstm_1/strided_slice_6/stack"
  input: "lstm_1/strided_slice_6/stack_1"
  input: "lstm_1/strided_slice_6/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_3_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_3_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_3_grad/Shape"
  input: "lstm_1/strided_slice_3/stack"
  input: "lstm_1/strided_slice_3/stack_1"
  input: "lstm_1/strided_slice_3/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_2_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_2_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_2_grad/Shape"
  input: "lstm_1/strided_slice_2/stack"
  input: "lstm_1/strided_slice_2/stack_1"
  input: "lstm_1/strided_slice_2/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_20"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_9_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_9_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_9_grad/Shape"
  input: "lstm_1/strided_slice_9/stack"
  input: "lstm_1/strided_slice_9/stack_1"
  input: "lstm_1/strided_slice_9/stack_2"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_5_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_5_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_5_grad/Shape"
  input: "lstm_1/strided_slice_5/stack"
  input: "lstm_1/strided_slice_5/stack_1"
  input: "lstm_1/strided_slice_5/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_21"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3"
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "lstm_1/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3"
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3"
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3"
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/AddN_21"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_8_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_8_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_8_grad/Shape"
  input: "lstm_1/strided_slice_8/stack"
  input: "lstm_1/strided_slice_8/stack_1"
  input: "lstm_1/strided_slice_8/stack_2"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/AddN_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_4_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_4_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_4_grad/Shape"
  input: "lstm_1/strided_slice_4/stack"
  input: "lstm_1/strided_slice_4/stack_1"
  input: "lstm_1/strided_slice_4/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_1_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_1_grad/Shape"
  input: "lstm_1/strided_slice_1/stack"
  input: "lstm_1/strided_slice_1/stack_1"
  input: "lstm_1/strided_slice_1/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_grad/Shape"
  input: "lstm_1/strided_slice/stack"
  input: "lstm_1/strided_slice/stack_1"
  input: "lstm_1/strided_slice/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_22"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/strided_slice_11_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_10_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_9_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_8_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_11"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_23"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/strided_slice_7_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_6_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_5_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_4_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "lstm_1/TensorArray_1"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray_1"
        s: "loc:@lstm_1/transpose"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^training/Adam/gradients/lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray_1"
        s: "loc:@lstm_1/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "training/Adam/gradients/lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "lstm_1/TensorArrayUnstack/range"
  input: "training/Adam/gradients/lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/transpose"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_24"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/strided_slice_3_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_2_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_1_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "lstm_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/transpose_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "training/Adam/gradients/lstm_1/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/lstm_1/transpose_grad/transpose"
  input: "conv1d_4/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/add_grad/Shape"
  op: "Shape"
  input: "conv1d_4/convolution/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/conv1d_4/add_grad/Shape"
  input: "training/Adam/gradients/conv1d_4/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_4/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_4/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_4/add_grad/Sum"
  input: "training/Adam/gradients/conv1d_4/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_4/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_4/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_4/add_grad/Sum_1"
  input: "training/Adam/gradients/conv1d_4/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/convolution/Squeeze_grad/Shape"
  op: "Shape"
  input: "conv1d_4/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/convolution/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/convolution/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_4/add_grad/Reshape"
  input: "training/Adam/gradients/conv1d_4/convolution/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/convolution/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/Reshape_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/Reshape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/Reshape_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_4/add_grad/Reshape_1"
  input: "training/Adam/gradients/conv1d_4/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/Reshape"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/convolution/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "conv1d_4/convolution/ExpandDims"
  input: "conv1d_4/convolution/ExpandDims_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/convolution/Conv2D_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\003\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/convolution/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_4/convolution/Conv2D_grad/ShapeN"
  input: "conv1d_4/convolution/ExpandDims_1"
  input: "training/Adam/gradients/conv1d_4/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/convolution/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv1d_4/convolution/ExpandDims"
  input: "training/Adam/gradients/conv1d_4/convolution/Conv2D_grad/Const"
  input: "training/Adam/gradients/conv1d_4/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/convolution/ExpandDims_grad/Shape"
  op: "Shape"
  input: "conv1d_4/Pad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/convolution/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/convolution/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_4/convolution/Conv2D_grad/Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_4/convolution/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/convolution/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/convolution/ExpandDims_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/convolution/ExpandDims_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/convolution/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_4/convolution/Conv2D_grad/Conv2DBackpropFilter"
  input: "training/Adam/gradients/conv1d_4/convolution/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/convolution/ExpandDims_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/Pad_grad/Rank"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/Pad"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/Pad_grad/stack/1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/Pad"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/Pad_grad/stack"
  op: "Pack"
  input: "training/Adam/gradients/conv1d_4/Pad_grad/Rank"
  input: "training/Adam/gradients/conv1d_4/Pad_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/Pad"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/Pad_grad/Slice/begin"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/Pad"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/Pad_grad/Slice"
  op: "Slice"
  input: "conv1d_4/Pad/paddings"
  input: "training/Adam/gradients/conv1d_4/Pad_grad/Slice/begin"
  input: "training/Adam/gradients/conv1d_4/Pad_grad/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/Pad"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/Pad_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/Pad"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/Pad_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_4/Pad_grad/Slice"
  input: "training/Adam/gradients/conv1d_4/Pad_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/Pad"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/Pad_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_3/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/Pad"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/Pad_grad/Slice_1"
  op: "Slice"
  input: "training/Adam/gradients/conv1d_4/convolution/ExpandDims_grad/Reshape"
  input: "training/Adam/gradients/conv1d_4/Pad_grad/Reshape"
  input: "training/Adam/gradients/conv1d_4/Pad_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/Pad"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_3/Squeeze_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_3/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_3/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_3/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_4/Pad_grad/Slice_1"
  input: "training/Adam/gradients/max_pooling1d_3/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_3/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_3/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "max_pooling1d_3/ExpandDims"
  input: "max_pooling1d_3/MaxPool"
  input: "training/Adam/gradients/max_pooling1d_3/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_3/MaxPool"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_3/ExpandDims_grad/Shape"
  op: "Shape"
  input: "conv1d_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_3/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_3/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/max_pooling1d_3/MaxPool_grad/MaxPoolGrad"
  input: "training/Adam/gradients/max_pooling1d_3/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_3/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/max_pooling1d_3/ExpandDims_grad/Reshape"
  input: "conv1d_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/add_grad/Shape"
  op: "Shape"
  input: "conv1d_3/convolution/BatchToSpaceND"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/conv1d_3/add_grad/Shape"
  input: "training/Adam/gradients/conv1d_3/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_3/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_3/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_3/add_grad/Sum"
  input: "training/Adam/gradients/conv1d_3/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_3/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_3/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_3/add_grad/Sum_1"
  input: "training/Adam/gradients/conv1d_3/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/convolution/BatchToSpaceND_grad/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "training/Adam/gradients/conv1d_3/add_grad/Reshape"
  input: "conv1d_3/convolution/BatchToSpaceND/block_shape"
  input: "conv1d_3/convolution/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/convolution/BatchToSpaceND"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/Reshape_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/Reshape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/Reshape_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_3/add_grad/Reshape_1"
  input: "training/Adam/gradients/conv1d_3/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/Reshape"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/convolution/Squeeze_grad/Shape"
  op: "Shape"
  input: "conv1d_3/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/convolution/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/convolution/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_3/convolution/BatchToSpaceND_grad/SpaceToBatchND"
  input: "training/Adam/gradients/conv1d_3/convolution/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/convolution/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/convolution/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "conv1d_3/convolution/ExpandDims"
  input: "conv1d_3/convolution/ExpandDims_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/convolution/Conv2D_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\005\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/convolution/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_3/convolution/Conv2D_grad/ShapeN"
  input: "conv1d_3/convolution/ExpandDims_1"
  input: "training/Adam/gradients/conv1d_3/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/convolution/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv1d_3/convolution/ExpandDims"
  input: "training/Adam/gradients/conv1d_3/convolution/Conv2D_grad/Const"
  input: "training/Adam/gradients/conv1d_3/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/convolution/ExpandDims_grad/Shape"
  op: "Shape"
  input: "conv1d_3/convolution/SpaceToBatchND"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/convolution/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/convolution/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_3/convolution/Conv2D_grad/Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_3/convolution/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/convolution/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/convolution/ExpandDims_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/convolution/ExpandDims_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/convolution/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_3/convolution/Conv2D_grad/Conv2DBackpropFilter"
  input: "training/Adam/gradients/conv1d_3/convolution/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/convolution/ExpandDims_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/convolution/SpaceToBatchND_grad/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "training/Adam/gradients/conv1d_3/convolution/ExpandDims_grad/Reshape"
  input: "conv1d_3/convolution/SpaceToBatchND/block_shape"
  input: "conv1d_3/convolution/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/convolution/SpaceToBatchND"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/Pad_grad/Rank"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/Pad"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/Pad_grad/stack/1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/Pad"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/Pad_grad/stack"
  op: "Pack"
  input: "training/Adam/gradients/conv1d_3/Pad_grad/Rank"
  input: "training/Adam/gradients/conv1d_3/Pad_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/Pad"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/Pad_grad/Slice/begin"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/Pad"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/Pad_grad/Slice"
  op: "Slice"
  input: "conv1d_3/Pad/paddings"
  input: "training/Adam/gradients/conv1d_3/Pad_grad/Slice/begin"
  input: "training/Adam/gradients/conv1d_3/Pad_grad/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/Pad"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/Pad_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/Pad"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/Pad_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_3/Pad_grad/Slice"
  input: "training/Adam/gradients/conv1d_3/Pad_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/Pad"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/Pad_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_2/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/Pad"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/Pad_grad/Slice_1"
  op: "Slice"
  input: "training/Adam/gradients/conv1d_3/convolution/SpaceToBatchND_grad/BatchToSpaceND"
  input: "training/Adam/gradients/conv1d_3/Pad_grad/Reshape"
  input: "training/Adam/gradients/conv1d_3/Pad_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/Pad"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_2/Squeeze_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_2/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_2/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_2/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_3/Pad_grad/Slice_1"
  input: "training/Adam/gradients/max_pooling1d_2/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_2/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_2/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "max_pooling1d_2/ExpandDims"
  input: "max_pooling1d_2/MaxPool"
  input: "training/Adam/gradients/max_pooling1d_2/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_2/MaxPool"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_2/ExpandDims_grad/Shape"
  op: "Shape"
  input: "conv1d_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_2/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_2/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/max_pooling1d_2/MaxPool_grad/MaxPoolGrad"
  input: "training/Adam/gradients/max_pooling1d_2/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_2/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/max_pooling1d_2/ExpandDims_grad/Reshape"
  input: "conv1d_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/add_grad/Shape"
  op: "Shape"
  input: "conv1d_2/convolution/BatchToSpaceND"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/conv1d_2/add_grad/Shape"
  input: "training/Adam/gradients/conv1d_2/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_2/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_2/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_2/add_grad/Sum"
  input: "training/Adam/gradients/conv1d_2/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_2/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_2/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_2/add_grad/Sum_1"
  input: "training/Adam/gradients/conv1d_2/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/convolution/BatchToSpaceND_grad/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "training/Adam/gradients/conv1d_2/add_grad/Reshape"
  input: "conv1d_2/convolution/BatchToSpaceND/block_shape"
  input: "conv1d_2/convolution/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/convolution/BatchToSpaceND"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/Reshape_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/Reshape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/Reshape_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_2/add_grad/Reshape_1"
  input: "training/Adam/gradients/conv1d_2/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/Reshape"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/convolution/Squeeze_grad/Shape"
  op: "Shape"
  input: "conv1d_2/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/convolution/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/convolution/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_2/convolution/BatchToSpaceND_grad/SpaceToBatchND"
  input: "training/Adam/gradients/conv1d_2/convolution/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/convolution/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/convolution/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "conv1d_2/convolution/ExpandDims"
  input: "conv1d_2/convolution/ExpandDims_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/convolution/Conv2D_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\005\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/convolution/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_2/convolution/Conv2D_grad/ShapeN"
  input: "conv1d_2/convolution/ExpandDims_1"
  input: "training/Adam/gradients/conv1d_2/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/convolution/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv1d_2/convolution/ExpandDims"
  input: "training/Adam/gradients/conv1d_2/convolution/Conv2D_grad/Const"
  input: "training/Adam/gradients/conv1d_2/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/convolution/ExpandDims_grad/Shape"
  op: "Shape"
  input: "conv1d_2/convolution/SpaceToBatchND"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/convolution/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/convolution/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_2/convolution/Conv2D_grad/Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_2/convolution/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/convolution/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/convolution/ExpandDims_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/convolution/ExpandDims_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/convolution/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_2/convolution/Conv2D_grad/Conv2DBackpropFilter"
  input: "training/Adam/gradients/conv1d_2/convolution/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/convolution/ExpandDims_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/convolution/SpaceToBatchND_grad/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "training/Adam/gradients/conv1d_2/convolution/ExpandDims_grad/Reshape"
  input: "conv1d_2/convolution/SpaceToBatchND/block_shape"
  input: "conv1d_2/convolution/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/convolution/SpaceToBatchND"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/Pad_grad/Rank"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/Pad"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/Pad_grad/stack/1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/Pad"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/Pad_grad/stack"
  op: "Pack"
  input: "training/Adam/gradients/conv1d_2/Pad_grad/Rank"
  input: "training/Adam/gradients/conv1d_2/Pad_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/Pad"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/Pad_grad/Slice/begin"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/Pad"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/Pad_grad/Slice"
  op: "Slice"
  input: "conv1d_2/Pad/paddings"
  input: "training/Adam/gradients/conv1d_2/Pad_grad/Slice/begin"
  input: "training/Adam/gradients/conv1d_2/Pad_grad/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/Pad"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/Pad_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/Pad"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/Pad_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_2/Pad_grad/Slice"
  input: "training/Adam/gradients/conv1d_2/Pad_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/Pad"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/Pad_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_1/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/Pad"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/Pad_grad/Slice_1"
  op: "Slice"
  input: "training/Adam/gradients/conv1d_2/convolution/SpaceToBatchND_grad/BatchToSpaceND"
  input: "training/Adam/gradients/conv1d_2/Pad_grad/Reshape"
  input: "training/Adam/gradients/conv1d_2/Pad_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/Pad"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_1/Squeeze_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_1/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_1/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_1/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_2/Pad_grad/Slice_1"
  input: "training/Adam/gradients/max_pooling1d_1/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_1/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_1/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "max_pooling1d_1/ExpandDims"
  input: "max_pooling1d_1/MaxPool"
  input: "training/Adam/gradients/max_pooling1d_1/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_1/MaxPool"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_1/ExpandDims_grad/Shape"
  op: "Shape"
  input: "conv1d_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_1/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_1/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/max_pooling1d_1/MaxPool_grad/MaxPoolGrad"
  input: "training/Adam/gradients/max_pooling1d_1/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_1/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/max_pooling1d_1/ExpandDims_grad/Reshape"
  input: "conv1d_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/add_grad/Shape"
  op: "Shape"
  input: "conv1d_1/convolution/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/conv1d_1/add_grad/Shape"
  input: "training/Adam/gradients/conv1d_1/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_1/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_1/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_1/add_grad/Sum"
  input: "training/Adam/gradients/conv1d_1/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_1/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_1/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_1/add_grad/Sum_1"
  input: "training/Adam/gradients/conv1d_1/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/convolution/Squeeze_grad/Shape"
  op: "Shape"
  input: "conv1d_1/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/convolution/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/convolution/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_1/add_grad/Reshape"
  input: "training/Adam/gradients/conv1d_1/convolution/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/convolution/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/Reshape_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/Reshape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/Reshape_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_1/add_grad/Reshape_1"
  input: "training/Adam/gradients/conv1d_1/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/Reshape"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/convolution/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "conv1d_1/convolution/ExpandDims"
  input: "conv1d_1/convolution/ExpandDims_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/convolution/Conv2D_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\t\000\000\000\003\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/convolution/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_1/convolution/Conv2D_grad/ShapeN"
  input: "conv1d_1/convolution/ExpandDims_1"
  input: "training/Adam/gradients/conv1d_1/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/convolution/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv1d_1/convolution/ExpandDims"
  input: "training/Adam/gradients/conv1d_1/convolution/Conv2D_grad/Const"
  input: "training/Adam/gradients/conv1d_1/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/convolution/ExpandDims_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/convolution/ExpandDims_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\t\000\000\000\003\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/convolution/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_1/convolution/Conv2D_grad/Conv2DBackpropFilter"
  input: "training/Adam/gradients/conv1d_1/convolution/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/convolution/ExpandDims_1"
      }
    }
  }
}
node {
  name: "training/Adam/AssignAdd/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/AssignAdd"
  op: "AssignAdd"
  input: "Adam/iterations"
  input: "training/Adam/AssignAdd/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Cast"
  op: "Cast"
  input: "Adam/iterations/read"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "training/Adam/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/add"
  op: "Add"
  input: "training/Adam/Cast"
  input: "training/Adam/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Pow"
  op: "Pow"
  input: "Adam/beta_2/read"
  input: "training/Adam/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub"
  op: "Sub"
  input: "training/Adam/sub/x"
  input: "training/Adam/Pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value/Minimum"
  op: "Minimum"
  input: "training/Adam/sub"
  input: "training/Adam/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value"
  op: "Maximum"
  input: "training/Adam/clip_by_value/Minimum"
  input: "training/Adam/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt"
  op: "Sqrt"
  input: "training/Adam/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Pow_1"
  op: "Pow"
  input: "Adam/beta_1/read"
  input: "training/Adam/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_1"
  op: "Sub"
  input: "training/Adam/sub_1/x"
  input: "training/Adam/Pow_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv"
  op: "RealDiv"
  input: "training/Adam/Sqrt"
  input: "training/Adam/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul"
  op: "Mul"
  input: "Adam/lr/read"
  input: "training/Adam/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\t\000\000\000\003\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros"
  op: "Fill"
  input: "training/Adam/zeros/shape_as_tensor"
  input: "training/Adam/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 9
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable/Assign"
  op: "Assign"
  input: "training/Adam/Variable"
  input: "training/Adam/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable/read"
  op: "Identity"
  input: "training/Adam/Variable"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_1/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/zeros_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_1"
  op: "Fill"
  input: "training/Adam/zeros_1/shape_as_tensor"
  input: "training/Adam/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_1/Assign"
  op: "Assign"
  input: "training/Adam/Variable_1"
  input: "training/Adam/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_1/read"
  op: "Identity"
  input: "training/Adam/Variable_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_2/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_2"
  op: "Fill"
  input: "training/Adam/zeros_2/shape_as_tensor"
  input: "training/Adam/zeros_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_2"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_2/Assign"
  op: "Assign"
  input: "training/Adam/Variable_2"
  input: "training/Adam/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_2/read"
  op: "Identity"
  input: "training/Adam/Variable_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_3/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/zeros_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_3"
  op: "Fill"
  input: "training/Adam/zeros_3/shape_as_tensor"
  input: "training/Adam/zeros_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_3"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_3/Assign"
  op: "Assign"
  input: "training/Adam/Variable_3"
  input: "training/Adam/zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_3/read"
  op: "Identity"
  input: "training/Adam/Variable_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_4/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_4"
  op: "Fill"
  input: "training/Adam/zeros_4/shape_as_tensor"
  input: "training/Adam/zeros_4/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_4"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_4/Assign"
  op: "Assign"
  input: "training/Adam/Variable_4"
  input: "training/Adam/zeros_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_4/read"
  op: "Identity"
  input: "training/Adam/Variable_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_5/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/zeros_5/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_5"
  op: "Fill"
  input: "training/Adam/zeros_5/shape_as_tensor"
  input: "training/Adam/zeros_5/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_5"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_5/Assign"
  op: "Assign"
  input: "training/Adam/Variable_5"
  input: "training/Adam/zeros_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_5/read"
  op: "Identity"
  input: "training/Adam/Variable_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_6/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_6/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_6"
  op: "Fill"
  input: "training/Adam/zeros_6/shape_as_tensor"
  input: "training/Adam/zeros_6/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_6"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_6/Assign"
  op: "Assign"
  input: "training/Adam/Variable_6"
  input: "training/Adam/zeros_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_6/read"
  op: "Identity"
  input: "training/Adam/Variable_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_7/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/zeros_7/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_7"
  op: "Fill"
  input: "training/Adam/zeros_7/shape_as_tensor"
  input: "training/Adam/zeros_7/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_7"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_7/Assign"
  op: "Assign"
  input: "training/Adam/Variable_7"
  input: "training/Adam/zeros_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_7/read"
  op: "Identity"
  input: "training/Adam/Variable_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_8/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_8/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_8"
  op: "Fill"
  input: "training/Adam/zeros_8/shape_as_tensor"
  input: "training/Adam/zeros_8/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_8"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_8/Assign"
  op: "Assign"
  input: "training/Adam/Variable_8"
  input: "training/Adam/zeros_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_8/read"
  op: "Identity"
  input: "training/Adam/Variable_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_9/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_9/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_9"
  op: "Fill"
  input: "training/Adam/zeros_9/shape_as_tensor"
  input: "training/Adam/zeros_9/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_9"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_9/Assign"
  op: "Assign"
  input: "training/Adam/Variable_9"
  input: "training/Adam/zeros_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_9/read"
  op: "Identity"
  input: "training/Adam/Variable_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_10/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "training/Adam/zeros_10/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_10"
  op: "Fill"
  input: "training/Adam/zeros_10/shape_as_tensor"
  input: "training/Adam/zeros_10/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_10"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_10/Assign"
  op: "Assign"
  input: "training/Adam/Variable_10"
  input: "training/Adam/zeros_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_10/read"
  op: "Identity"
  input: "training/Adam/Variable_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_11/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_11/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_11"
  op: "Fill"
  input: "training/Adam/zeros_11/shape_as_tensor"
  input: "training/Adam/zeros_11/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_11"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_11/Assign"
  op: "Assign"
  input: "training/Adam/Variable_11"
  input: "training/Adam/zeros_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_11/read"
  op: "Identity"
  input: "training/Adam/Variable_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_12/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_12/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_12"
  op: "Fill"
  input: "training/Adam/zeros_12/shape_as_tensor"
  input: "training/Adam/zeros_12/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_12"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_12/Assign"
  op: "Assign"
  input: "training/Adam/Variable_12"
  input: "training/Adam/zeros_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_12/read"
  op: "Identity"
  input: "training/Adam/Variable_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_13/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/zeros_13/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_13"
  op: "Fill"
  input: "training/Adam/zeros_13/shape_as_tensor"
  input: "training/Adam/zeros_13/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_13"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_13/Assign"
  op: "Assign"
  input: "training/Adam/Variable_13"
  input: "training/Adam/zeros_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_13/read"
  op: "Identity"
  input: "training/Adam/Variable_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_14/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_14/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_14"
  op: "Fill"
  input: "training/Adam/zeros_14/shape_as_tensor"
  input: "training/Adam/zeros_14/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_14"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_14/Assign"
  op: "Assign"
  input: "training/Adam/Variable_14"
  input: "training/Adam/zeros_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_14/read"
  op: "Identity"
  input: "training/Adam/Variable_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_15/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_15/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_15"
  op: "Fill"
  input: "training/Adam/zeros_15/shape_as_tensor"
  input: "training/Adam/zeros_15/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_15"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_15/Assign"
  op: "Assign"
  input: "training/Adam/Variable_15"
  input: "training/Adam/zeros_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_15/read"
  op: "Identity"
  input: "training/Adam/Variable_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_16/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/zeros_16/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_16"
  op: "Fill"
  input: "training/Adam/zeros_16/shape_as_tensor"
  input: "training/Adam/zeros_16/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_16"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_16/Assign"
  op: "Assign"
  input: "training/Adam/Variable_16"
  input: "training/Adam/zeros_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_16/read"
  op: "Identity"
  input: "training/Adam/Variable_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_17/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_17/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_17"
  op: "Fill"
  input: "training/Adam/zeros_17/shape_as_tensor"
  input: "training/Adam/zeros_17/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_17"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_17/Assign"
  op: "Assign"
  input: "training/Adam/Variable_17"
  input: "training/Adam/zeros_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_17/read"
  op: "Identity"
  input: "training/Adam/Variable_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_18/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/zeros_18/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_18"
  op: "Fill"
  input: "training/Adam/zeros_18/shape_as_tensor"
  input: "training/Adam/zeros_18/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_18"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_18/Assign"
  op: "Assign"
  input: "training/Adam/Variable_18"
  input: "training/Adam/zeros_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_18/read"
  op: "Identity"
  input: "training/Adam/Variable_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_19/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\006\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_19/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_19"
  op: "Fill"
  input: "training/Adam/zeros_19/shape_as_tensor"
  input: "training/Adam/zeros_19/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_19"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_19/Assign"
  op: "Assign"
  input: "training/Adam/Variable_19"
  input: "training/Adam/zeros_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_19/read"
  op: "Identity"
  input: "training/Adam/Variable_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_20/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "training/Adam/zeros_20/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_20"
  op: "Fill"
  input: "training/Adam/zeros_20/shape_as_tensor"
  input: "training/Adam/zeros_20/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_20"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_20/Assign"
  op: "Assign"
  input: "training/Adam/Variable_20"
  input: "training/Adam/zeros_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_20/read"
  op: "Identity"
  input: "training/Adam/Variable_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_21/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\t\000\000\000\003\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_21/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_21"
  op: "Fill"
  input: "training/Adam/zeros_21/shape_as_tensor"
  input: "training/Adam/zeros_21/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_21"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 9
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_21/Assign"
  op: "Assign"
  input: "training/Adam/Variable_21"
  input: "training/Adam/zeros_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_21/read"
  op: "Identity"
  input: "training/Adam/Variable_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_22/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/zeros_22/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_22"
  op: "Fill"
  input: "training/Adam/zeros_22/shape_as_tensor"
  input: "training/Adam/zeros_22/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_22"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_22/Assign"
  op: "Assign"
  input: "training/Adam/Variable_22"
  input: "training/Adam/zeros_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_22"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_22/read"
  op: "Identity"
  input: "training/Adam/Variable_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_22"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_23/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_23/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_23"
  op: "Fill"
  input: "training/Adam/zeros_23/shape_as_tensor"
  input: "training/Adam/zeros_23/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_23"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_23/Assign"
  op: "Assign"
  input: "training/Adam/Variable_23"
  input: "training/Adam/zeros_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_23"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_23/read"
  op: "Identity"
  input: "training/Adam/Variable_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_23"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_24/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/zeros_24/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_24"
  op: "Fill"
  input: "training/Adam/zeros_24/shape_as_tensor"
  input: "training/Adam/zeros_24/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_24"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_24/Assign"
  op: "Assign"
  input: "training/Adam/Variable_24"
  input: "training/Adam/zeros_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_24"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_24/read"
  op: "Identity"
  input: "training/Adam/Variable_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_24"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_25/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_25/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_25"
  op: "Fill"
  input: "training/Adam/zeros_25/shape_as_tensor"
  input: "training/Adam/zeros_25/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_25"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_25/Assign"
  op: "Assign"
  input: "training/Adam/Variable_25"
  input: "training/Adam/zeros_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_25"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_25/read"
  op: "Identity"
  input: "training/Adam/Variable_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_25"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_26/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/zeros_26/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_26"
  op: "Fill"
  input: "training/Adam/zeros_26/shape_as_tensor"
  input: "training/Adam/zeros_26/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_26"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_26/Assign"
  op: "Assign"
  input: "training/Adam/Variable_26"
  input: "training/Adam/zeros_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_26"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_26/read"
  op: "Identity"
  input: "training/Adam/Variable_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_26"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_27/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_27/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_27"
  op: "Fill"
  input: "training/Adam/zeros_27/shape_as_tensor"
  input: "training/Adam/zeros_27/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_27"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_27/Assign"
  op: "Assign"
  input: "training/Adam/Variable_27"
  input: "training/Adam/zeros_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_27"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_27/read"
  op: "Identity"
  input: "training/Adam/Variable_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_27"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_28/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/zeros_28/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_28"
  op: "Fill"
  input: "training/Adam/zeros_28/shape_as_tensor"
  input: "training/Adam/zeros_28/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_28"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_28/Assign"
  op: "Assign"
  input: "training/Adam/Variable_28"
  input: "training/Adam/zeros_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_28"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_28/read"
  op: "Identity"
  input: "training/Adam/Variable_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_28"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_29/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_29/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_29"
  op: "Fill"
  input: "training/Adam/zeros_29/shape_as_tensor"
  input: "training/Adam/zeros_29/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_29"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_29/Assign"
  op: "Assign"
  input: "training/Adam/Variable_29"
  input: "training/Adam/zeros_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_29"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_29/read"
  op: "Identity"
  input: "training/Adam/Variable_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_29"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_30/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_30/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_30"
  op: "Fill"
  input: "training/Adam/zeros_30/shape_as_tensor"
  input: "training/Adam/zeros_30/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_30"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_30/Assign"
  op: "Assign"
  input: "training/Adam/Variable_30"
  input: "training/Adam/zeros_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_30"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_30/read"
  op: "Identity"
  input: "training/Adam/Variable_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_30"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_31/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "training/Adam/zeros_31/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_31"
  op: "Fill"
  input: "training/Adam/zeros_31/shape_as_tensor"
  input: "training/Adam/zeros_31/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_31"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_31/Assign"
  op: "Assign"
  input: "training/Adam/Variable_31"
  input: "training/Adam/zeros_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_31"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_31/read"
  op: "Identity"
  input: "training/Adam/Variable_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_31"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_32/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_32/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_32"
  op: "Fill"
  input: "training/Adam/zeros_32/shape_as_tensor"
  input: "training/Adam/zeros_32/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_32"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_32/Assign"
  op: "Assign"
  input: "training/Adam/Variable_32"
  input: "training/Adam/zeros_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_32"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_32/read"
  op: "Identity"
  input: "training/Adam/Variable_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_32"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_33/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_33/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_33"
  op: "Fill"
  input: "training/Adam/zeros_33/shape_as_tensor"
  input: "training/Adam/zeros_33/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_33"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_33/Assign"
  op: "Assign"
  input: "training/Adam/Variable_33"
  input: "training/Adam/zeros_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_33"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_33/read"
  op: "Identity"
  input: "training/Adam/Variable_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_33"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_34/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/zeros_34/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_34"
  op: "Fill"
  input: "training/Adam/zeros_34/shape_as_tensor"
  input: "training/Adam/zeros_34/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_34"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_34/Assign"
  op: "Assign"
  input: "training/Adam/Variable_34"
  input: "training/Adam/zeros_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_34"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_34/read"
  op: "Identity"
  input: "training/Adam/Variable_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_34"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_35/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_35/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_35"
  op: "Fill"
  input: "training/Adam/zeros_35/shape_as_tensor"
  input: "training/Adam/zeros_35/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_35"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_35/Assign"
  op: "Assign"
  input: "training/Adam/Variable_35"
  input: "training/Adam/zeros_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_35"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_35/read"
  op: "Identity"
  input: "training/Adam/Variable_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_35"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_36/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_36/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_36"
  op: "Fill"
  input: "training/Adam/zeros_36/shape_as_tensor"
  input: "training/Adam/zeros_36/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_36"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_36/Assign"
  op: "Assign"
  input: "training/Adam/Variable_36"
  input: "training/Adam/zeros_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_36"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_36/read"
  op: "Identity"
  input: "training/Adam/Variable_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_36"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_37/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/zeros_37/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_37"
  op: "Fill"
  input: "training/Adam/zeros_37/shape_as_tensor"
  input: "training/Adam/zeros_37/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_37"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_37/Assign"
  op: "Assign"
  input: "training/Adam/Variable_37"
  input: "training/Adam/zeros_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_37"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_37/read"
  op: "Identity"
  input: "training/Adam/Variable_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_37"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_38/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_38/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_38"
  op: "Fill"
  input: "training/Adam/zeros_38/shape_as_tensor"
  input: "training/Adam/zeros_38/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_38"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_38/Assign"
  op: "Assign"
  input: "training/Adam/Variable_38"
  input: "training/Adam/zeros_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_38"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_38/read"
  op: "Identity"
  input: "training/Adam/Variable_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_38"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_39/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/zeros_39/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_39"
  op: "Fill"
  input: "training/Adam/zeros_39/shape_as_tensor"
  input: "training/Adam/zeros_39/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_39"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_39/Assign"
  op: "Assign"
  input: "training/Adam/Variable_39"
  input: "training/Adam/zeros_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_39"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_39/read"
  op: "Identity"
  input: "training/Adam/Variable_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_39"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_40/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\006\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_40/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_40"
  op: "Fill"
  input: "training/Adam/zeros_40/shape_as_tensor"
  input: "training/Adam/zeros_40/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_40"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_40/Assign"
  op: "Assign"
  input: "training/Adam/Variable_40"
  input: "training/Adam/zeros_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_40"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_40/read"
  op: "Identity"
  input: "training/Adam/Variable_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_40"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_41/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "training/Adam/zeros_41/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_41"
  op: "Fill"
  input: "training/Adam/zeros_41/shape_as_tensor"
  input: "training/Adam/zeros_41/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_41"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_41/Assign"
  op: "Assign"
  input: "training/Adam/Variable_41"
  input: "training/Adam/zeros_41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_41"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_41/read"
  op: "Identity"
  input: "training/Adam/Variable_41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_41"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_42/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_42/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_42"
  op: "Fill"
  input: "training/Adam/zeros_42/shape_as_tensor"
  input: "training/Adam/zeros_42/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_42"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_42/Assign"
  op: "Assign"
  input: "training/Adam/Variable_42"
  input: "training/Adam/zeros_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_42"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_42/read"
  op: "Identity"
  input: "training/Adam/Variable_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_42"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_43/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_43/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_43"
  op: "Fill"
  input: "training/Adam/zeros_43/shape_as_tensor"
  input: "training/Adam/zeros_43/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_43"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_43/Assign"
  op: "Assign"
  input: "training/Adam/Variable_43"
  input: "training/Adam/zeros_43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_43"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_43/read"
  op: "Identity"
  input: "training/Adam/Variable_43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_43"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_44/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_44/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_44"
  op: "Fill"
  input: "training/Adam/zeros_44/shape_as_tensor"
  input: "training/Adam/zeros_44/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_44"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_44/Assign"
  op: "Assign"
  input: "training/Adam/Variable_44"
  input: "training/Adam/zeros_44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_44"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_44/read"
  op: "Identity"
  input: "training/Adam/Variable_44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_44"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_45/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_45/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_45"
  op: "Fill"
  input: "training/Adam/zeros_45/shape_as_tensor"
  input: "training/Adam/zeros_45/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_45"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_45/Assign"
  op: "Assign"
  input: "training/Adam/Variable_45"
  input: "training/Adam/zeros_45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_45"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_45/read"
  op: "Identity"
  input: "training/Adam/Variable_45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_45"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_46/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_46/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_46"
  op: "Fill"
  input: "training/Adam/zeros_46/shape_as_tensor"
  input: "training/Adam/zeros_46/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_46"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_46/Assign"
  op: "Assign"
  input: "training/Adam/Variable_46"
  input: "training/Adam/zeros_46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_46"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_46/read"
  op: "Identity"
  input: "training/Adam/Variable_46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_46"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_47/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_47/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_47"
  op: "Fill"
  input: "training/Adam/zeros_47/shape_as_tensor"
  input: "training/Adam/zeros_47/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_47"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_47/Assign"
  op: "Assign"
  input: "training/Adam/Variable_47"
  input: "training/Adam/zeros_47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_47"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_47/read"
  op: "Identity"
  input: "training/Adam/Variable_47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_47"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_48/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_48/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_48"
  op: "Fill"
  input: "training/Adam/zeros_48/shape_as_tensor"
  input: "training/Adam/zeros_48/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_48"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_48/Assign"
  op: "Assign"
  input: "training/Adam/Variable_48"
  input: "training/Adam/zeros_48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_48"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_48/read"
  op: "Identity"
  input: "training/Adam/Variable_48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_48"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_49/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_49/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_49"
  op: "Fill"
  input: "training/Adam/zeros_49/shape_as_tensor"
  input: "training/Adam/zeros_49/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_49"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_49/Assign"
  op: "Assign"
  input: "training/Adam/Variable_49"
  input: "training/Adam/zeros_49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_49"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_49/read"
  op: "Identity"
  input: "training/Adam/Variable_49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_49"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_50/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_50/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_50"
  op: "Fill"
  input: "training/Adam/zeros_50/shape_as_tensor"
  input: "training/Adam/zeros_50/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_50"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_50/Assign"
  op: "Assign"
  input: "training/Adam/Variable_50"
  input: "training/Adam/zeros_50"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_50"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_50/read"
  op: "Identity"
  input: "training/Adam/Variable_50"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_50"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_51/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_51/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_51"
  op: "Fill"
  input: "training/Adam/zeros_51/shape_as_tensor"
  input: "training/Adam/zeros_51/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_51"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_51/Assign"
  op: "Assign"
  input: "training/Adam/Variable_51"
  input: "training/Adam/zeros_51"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_51"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_51/read"
  op: "Identity"
  input: "training/Adam/Variable_51"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_51"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_52/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_52/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_52"
  op: "Fill"
  input: "training/Adam/zeros_52/shape_as_tensor"
  input: "training/Adam/zeros_52/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_52"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_52/Assign"
  op: "Assign"
  input: "training/Adam/Variable_52"
  input: "training/Adam/zeros_52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_52"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_52/read"
  op: "Identity"
  input: "training/Adam/Variable_52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_52"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_53/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_53/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_53"
  op: "Fill"
  input: "training/Adam/zeros_53/shape_as_tensor"
  input: "training/Adam/zeros_53/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_53"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_53/Assign"
  op: "Assign"
  input: "training/Adam/Variable_53"
  input: "training/Adam/zeros_53"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_53"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_53/read"
  op: "Identity"
  input: "training/Adam/Variable_53"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_53"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_54/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_54/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_54"
  op: "Fill"
  input: "training/Adam/zeros_54/shape_as_tensor"
  input: "training/Adam/zeros_54/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_54"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_54/Assign"
  op: "Assign"
  input: "training/Adam/Variable_54"
  input: "training/Adam/zeros_54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_54"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_54/read"
  op: "Identity"
  input: "training/Adam/Variable_54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_54"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_55/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_55/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_55"
  op: "Fill"
  input: "training/Adam/zeros_55/shape_as_tensor"
  input: "training/Adam/zeros_55/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_55"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_55/Assign"
  op: "Assign"
  input: "training/Adam/Variable_55"
  input: "training/Adam/zeros_55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_55"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_55/read"
  op: "Identity"
  input: "training/Adam/Variable_55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_55"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_56/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_56/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_56"
  op: "Fill"
  input: "training/Adam/zeros_56/shape_as_tensor"
  input: "training/Adam/zeros_56/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_56"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_56/Assign"
  op: "Assign"
  input: "training/Adam/Variable_56"
  input: "training/Adam/zeros_56"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_56"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_56/read"
  op: "Identity"
  input: "training/Adam/Variable_56"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_56"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_57/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_57/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_57"
  op: "Fill"
  input: "training/Adam/zeros_57/shape_as_tensor"
  input: "training/Adam/zeros_57/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_57"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_57/Assign"
  op: "Assign"
  input: "training/Adam/Variable_57"
  input: "training/Adam/zeros_57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_57"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_57/read"
  op: "Identity"
  input: "training/Adam/Variable_57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_57"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_58/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_58/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_58"
  op: "Fill"
  input: "training/Adam/zeros_58/shape_as_tensor"
  input: "training/Adam/zeros_58/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_58"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_58/Assign"
  op: "Assign"
  input: "training/Adam/Variable_58"
  input: "training/Adam/zeros_58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_58"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_58/read"
  op: "Identity"
  input: "training/Adam/Variable_58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_58"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_59/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_59/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_59"
  op: "Fill"
  input: "training/Adam/zeros_59/shape_as_tensor"
  input: "training/Adam/zeros_59/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_59"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_59/Assign"
  op: "Assign"
  input: "training/Adam/Variable_59"
  input: "training/Adam/zeros_59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_59"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_59/read"
  op: "Identity"
  input: "training/Adam/Variable_59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_59"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_60/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_60/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_60"
  op: "Fill"
  input: "training/Adam/zeros_60/shape_as_tensor"
  input: "training/Adam/zeros_60/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_60"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_60/Assign"
  op: "Assign"
  input: "training/Adam/Variable_60"
  input: "training/Adam/zeros_60"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_60"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_60/read"
  op: "Identity"
  input: "training/Adam/Variable_60"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_60"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_61/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_61/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_61"
  op: "Fill"
  input: "training/Adam/zeros_61/shape_as_tensor"
  input: "training/Adam/zeros_61/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_61"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_61/Assign"
  op: "Assign"
  input: "training/Adam/Variable_61"
  input: "training/Adam/zeros_61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_61"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_61/read"
  op: "Identity"
  input: "training/Adam/Variable_61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_61"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_62/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_62/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_62"
  op: "Fill"
  input: "training/Adam/zeros_62/shape_as_tensor"
  input: "training/Adam/zeros_62/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_62"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_62/Assign"
  op: "Assign"
  input: "training/Adam/Variable_62"
  input: "training/Adam/zeros_62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_62"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_62/read"
  op: "Identity"
  input: "training/Adam/Variable_62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_62"
      }
    }
  }
}
node {
  name: "training/Adam/mul_1"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_2"
  op: "Sub"
  input: "training/Adam/sub_2/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_2"
  op: "Mul"
  input: "training/Adam/sub_2"
  input: "training/Adam/gradients/conv1d_1/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_1"
  op: "Add"
  input: "training/Adam/mul_1"
  input: "training/Adam/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_3"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_21/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_3"
  op: "Sub"
  input: "training/Adam/sub_3/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square"
  op: "Square"
  input: "training/Adam/gradients/conv1d_1/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_4"
  op: "Mul"
  input: "training/Adam/sub_3"
  input: "training/Adam/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_2"
  op: "Add"
  input: "training/Adam/mul_3"
  input: "training/Adam/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_5"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "training/Adam/add_2"
  input: "training/Adam/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_1"
  op: "Maximum"
  input: "training/Adam/clip_by_value_1/Minimum"
  input: "training/Adam/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_1"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_3"
  op: "Add"
  input: "training/Adam/Sqrt_1"
  input: "training/Adam/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_1"
  op: "RealDiv"
  input: "training/Adam/mul_5"
  input: "training/Adam/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_4"
  op: "Sub"
  input: "conv1d_1/kernel/read"
  input: "training/Adam/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign"
  op: "Assign"
  input: "training/Adam/Variable"
  input: "training/Adam/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_1"
  op: "Assign"
  input: "training/Adam/Variable_21"
  input: "training/Adam/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_2"
  op: "Assign"
  input: "conv1d_1/kernel"
  input: "training/Adam/sub_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_6"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_5/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_5"
  op: "Sub"
  input: "training/Adam/sub_5/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_7"
  op: "Mul"
  input: "training/Adam/sub_5"
  input: "training/Adam/gradients/conv1d_1/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_4"
  op: "Add"
  input: "training/Adam/mul_6"
  input: "training/Adam/mul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_8"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_22/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_6"
  op: "Sub"
  input: "training/Adam/sub_6/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_1"
  op: "Square"
  input: "training/Adam/gradients/conv1d_1/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_9"
  op: "Mul"
  input: "training/Adam/sub_6"
  input: "training/Adam/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_5"
  op: "Add"
  input: "training/Adam/mul_8"
  input: "training/Adam/mul_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_10"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "training/Adam/add_5"
  input: "training/Adam/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_2"
  op: "Maximum"
  input: "training/Adam/clip_by_value_2/Minimum"
  input: "training/Adam/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_2"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_6/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_6"
  op: "Add"
  input: "training/Adam/Sqrt_2"
  input: "training/Adam/add_6/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_2"
  op: "RealDiv"
  input: "training/Adam/mul_10"
  input: "training/Adam/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_7"
  op: "Sub"
  input: "conv1d_1/bias/read"
  input: "training/Adam/truediv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_3"
  op: "Assign"
  input: "training/Adam/Variable_1"
  input: "training/Adam/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_4"
  op: "Assign"
  input: "training/Adam/Variable_22"
  input: "training/Adam/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_22"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_5"
  op: "Assign"
  input: "conv1d_1/bias"
  input: "training/Adam/sub_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_11"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_8/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_8"
  op: "Sub"
  input: "training/Adam/sub_8/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_12"
  op: "Mul"
  input: "training/Adam/sub_8"
  input: "training/Adam/gradients/conv1d_2/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_7"
  op: "Add"
  input: "training/Adam/mul_11"
  input: "training/Adam/mul_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_13"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_23/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_9/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_9"
  op: "Sub"
  input: "training/Adam/sub_9/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_2"
  op: "Square"
  input: "training/Adam/gradients/conv1d_2/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_14"
  op: "Mul"
  input: "training/Adam/sub_9"
  input: "training/Adam/Square_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_8"
  op: "Add"
  input: "training/Adam/mul_13"
  input: "training/Adam/mul_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_15"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_3/Minimum"
  op: "Minimum"
  input: "training/Adam/add_8"
  input: "training/Adam/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_3"
  op: "Maximum"
  input: "training/Adam/clip_by_value_3/Minimum"
  input: "training/Adam/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_3"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_9/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_9"
  op: "Add"
  input: "training/Adam/Sqrt_3"
  input: "training/Adam/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_3"
  op: "RealDiv"
  input: "training/Adam/mul_15"
  input: "training/Adam/add_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_10"
  op: "Sub"
  input: "conv1d_2/kernel/read"
  input: "training/Adam/truediv_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_6"
  op: "Assign"
  input: "training/Adam/Variable_2"
  input: "training/Adam/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_7"
  op: "Assign"
  input: "training/Adam/Variable_23"
  input: "training/Adam/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_23"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_8"
  op: "Assign"
  input: "conv1d_2/kernel"
  input: "training/Adam/sub_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_16"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_3/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_11/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_11"
  op: "Sub"
  input: "training/Adam/sub_11/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_17"
  op: "Mul"
  input: "training/Adam/sub_11"
  input: "training/Adam/gradients/conv1d_2/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_10"
  op: "Add"
  input: "training/Adam/mul_16"
  input: "training/Adam/mul_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_18"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_24/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_12/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_12"
  op: "Sub"
  input: "training/Adam/sub_12/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_3"
  op: "Square"
  input: "training/Adam/gradients/conv1d_2/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_19"
  op: "Mul"
  input: "training/Adam/sub_12"
  input: "training/Adam/Square_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_11"
  op: "Add"
  input: "training/Adam/mul_18"
  input: "training/Adam/mul_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_20"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_4/Minimum"
  op: "Minimum"
  input: "training/Adam/add_11"
  input: "training/Adam/Const_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_4"
  op: "Maximum"
  input: "training/Adam/clip_by_value_4/Minimum"
  input: "training/Adam/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_4"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_12/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_12"
  op: "Add"
  input: "training/Adam/Sqrt_4"
  input: "training/Adam/add_12/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_4"
  op: "RealDiv"
  input: "training/Adam/mul_20"
  input: "training/Adam/add_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_13"
  op: "Sub"
  input: "conv1d_2/bias/read"
  input: "training/Adam/truediv_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_9"
  op: "Assign"
  input: "training/Adam/Variable_3"
  input: "training/Adam/add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_10"
  op: "Assign"
  input: "training/Adam/Variable_24"
  input: "training/Adam/add_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_24"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_11"
  op: "Assign"
  input: "conv1d_2/bias"
  input: "training/Adam/sub_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_21"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_4/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_14/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_14"
  op: "Sub"
  input: "training/Adam/sub_14/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_22"
  op: "Mul"
  input: "training/Adam/sub_14"
  input: "training/Adam/gradients/conv1d_3/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_13"
  op: "Add"
  input: "training/Adam/mul_21"
  input: "training/Adam/mul_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_23"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_25/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_15/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_15"
  op: "Sub"
  input: "training/Adam/sub_15/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_4"
  op: "Square"
  input: "training/Adam/gradients/conv1d_3/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_24"
  op: "Mul"
  input: "training/Adam/sub_15"
  input: "training/Adam/Square_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_14"
  op: "Add"
  input: "training/Adam/mul_23"
  input: "training/Adam/mul_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_25"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_5/Minimum"
  op: "Minimum"
  input: "training/Adam/add_14"
  input: "training/Adam/Const_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_5"
  op: "Maximum"
  input: "training/Adam/clip_by_value_5/Minimum"
  input: "training/Adam/Const_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_5"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_15/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_15"
  op: "Add"
  input: "training/Adam/Sqrt_5"
  input: "training/Adam/add_15/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_5"
  op: "RealDiv"
  input: "training/Adam/mul_25"
  input: "training/Adam/add_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_16"
  op: "Sub"
  input: "conv1d_3/kernel/read"
  input: "training/Adam/truediv_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_12"
  op: "Assign"
  input: "training/Adam/Variable_4"
  input: "training/Adam/add_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_13"
  op: "Assign"
  input: "training/Adam/Variable_25"
  input: "training/Adam/add_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_25"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_14"
  op: "Assign"
  input: "conv1d_3/kernel"
  input: "training/Adam/sub_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_26"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_5/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_17/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_17"
  op: "Sub"
  input: "training/Adam/sub_17/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_27"
  op: "Mul"
  input: "training/Adam/sub_17"
  input: "training/Adam/gradients/conv1d_3/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_16"
  op: "Add"
  input: "training/Adam/mul_26"
  input: "training/Adam/mul_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_28"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_26/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_18/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_18"
  op: "Sub"
  input: "training/Adam/sub_18/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_5"
  op: "Square"
  input: "training/Adam/gradients/conv1d_3/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_29"
  op: "Mul"
  input: "training/Adam/sub_18"
  input: "training/Adam/Square_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_17"
  op: "Add"
  input: "training/Adam/mul_28"
  input: "training/Adam/mul_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_30"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_12"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_13"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_6/Minimum"
  op: "Minimum"
  input: "training/Adam/add_17"
  input: "training/Adam/Const_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_6"
  op: "Maximum"
  input: "training/Adam/clip_by_value_6/Minimum"
  input: "training/Adam/Const_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_6"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_18/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_18"
  op: "Add"
  input: "training/Adam/Sqrt_6"
  input: "training/Adam/add_18/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_6"
  op: "RealDiv"
  input: "training/Adam/mul_30"
  input: "training/Adam/add_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_19"
  op: "Sub"
  input: "conv1d_3/bias/read"
  input: "training/Adam/truediv_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_15"
  op: "Assign"
  input: "training/Adam/Variable_5"
  input: "training/Adam/add_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_16"
  op: "Assign"
  input: "training/Adam/Variable_26"
  input: "training/Adam/add_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_26"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_17"
  op: "Assign"
  input: "conv1d_3/bias"
  input: "training/Adam/sub_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_31"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_6/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_20/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_20"
  op: "Sub"
  input: "training/Adam/sub_20/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_32"
  op: "Mul"
  input: "training/Adam/sub_20"
  input: "training/Adam/gradients/conv1d_4/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_19"
  op: "Add"
  input: "training/Adam/mul_31"
  input: "training/Adam/mul_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_33"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_27/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_21/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_21"
  op: "Sub"
  input: "training/Adam/sub_21/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_6"
  op: "Square"
  input: "training/Adam/gradients/conv1d_4/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_34"
  op: "Mul"
  input: "training/Adam/sub_21"
  input: "training/Adam/Square_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_20"
  op: "Add"
  input: "training/Adam/mul_33"
  input: "training/Adam/mul_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_35"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_14"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_15"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_7/Minimum"
  op: "Minimum"
  input: "training/Adam/add_20"
  input: "training/Adam/Const_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_7"
  op: "Maximum"
  input: "training/Adam/clip_by_value_7/Minimum"
  input: "training/Adam/Const_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_7"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_21/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_21"
  op: "Add"
  input: "training/Adam/Sqrt_7"
  input: "training/Adam/add_21/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_7"
  op: "RealDiv"
  input: "training/Adam/mul_35"
  input: "training/Adam/add_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_22"
  op: "Sub"
  input: "conv1d_4/kernel/read"
  input: "training/Adam/truediv_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_18"
  op: "Assign"
  input: "training/Adam/Variable_6"
  input: "training/Adam/add_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_19"
  op: "Assign"
  input: "training/Adam/Variable_27"
  input: "training/Adam/add_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_27"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_20"
  op: "Assign"
  input: "conv1d_4/kernel"
  input: "training/Adam/sub_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_36"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_7/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_23/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_23"
  op: "Sub"
  input: "training/Adam/sub_23/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_37"
  op: "Mul"
  input: "training/Adam/sub_23"
  input: "training/Adam/gradients/conv1d_4/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_22"
  op: "Add"
  input: "training/Adam/mul_36"
  input: "training/Adam/mul_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_38"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_28/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_24/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_24"
  op: "Sub"
  input: "training/Adam/sub_24/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_7"
  op: "Square"
  input: "training/Adam/gradients/conv1d_4/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_39"
  op: "Mul"
  input: "training/Adam/sub_24"
  input: "training/Adam/Square_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_23"
  op: "Add"
  input: "training/Adam/mul_38"
  input: "training/Adam/mul_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_40"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_16"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_17"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_8/Minimum"
  op: "Minimum"
  input: "training/Adam/add_23"
  input: "training/Adam/Const_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_8"
  op: "Maximum"
  input: "training/Adam/clip_by_value_8/Minimum"
  input: "training/Adam/Const_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_8"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_24/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_24"
  op: "Add"
  input: "training/Adam/Sqrt_8"
  input: "training/Adam/add_24/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_8"
  op: "RealDiv"
  input: "training/Adam/mul_40"
  input: "training/Adam/add_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_25"
  op: "Sub"
  input: "conv1d_4/bias/read"
  input: "training/Adam/truediv_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_21"
  op: "Assign"
  input: "training/Adam/Variable_7"
  input: "training/Adam/add_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_22"
  op: "Assign"
  input: "training/Adam/Variable_28"
  input: "training/Adam/add_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_28"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_23"
  op: "Assign"
  input: "conv1d_4/bias"
  input: "training/Adam/sub_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_41"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_8/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_26/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_26"
  op: "Sub"
  input: "training/Adam/sub_26/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_42"
  op: "Mul"
  input: "training/Adam/sub_26"
  input: "training/Adam/gradients/AddN_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_25"
  op: "Add"
  input: "training/Adam/mul_41"
  input: "training/Adam/mul_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_43"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_29/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_27/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_27"
  op: "Sub"
  input: "training/Adam/sub_27/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_8"
  op: "Square"
  input: "training/Adam/gradients/AddN_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_44"
  op: "Mul"
  input: "training/Adam/sub_27"
  input: "training/Adam/Square_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_26"
  op: "Add"
  input: "training/Adam/mul_43"
  input: "training/Adam/mul_44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_45"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_18"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_19"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_9/Minimum"
  op: "Minimum"
  input: "training/Adam/add_26"
  input: "training/Adam/Const_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_9"
  op: "Maximum"
  input: "training/Adam/clip_by_value_9/Minimum"
  input: "training/Adam/Const_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_9"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_27/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_27"
  op: "Add"
  input: "training/Adam/Sqrt_9"
  input: "training/Adam/add_27/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_9"
  op: "RealDiv"
  input: "training/Adam/mul_45"
  input: "training/Adam/add_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_28"
  op: "Sub"
  input: "lstm_1/kernel/read"
  input: "training/Adam/truediv_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_24"
  op: "Assign"
  input: "training/Adam/Variable_8"
  input: "training/Adam/add_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_25"
  op: "Assign"
  input: "training/Adam/Variable_29"
  input: "training/Adam/add_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_29"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_26"
  op: "Assign"
  input: "lstm_1/kernel"
  input: "training/Adam/sub_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_46"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_9/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_29/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_29"
  op: "Sub"
  input: "training/Adam/sub_29/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_47"
  op: "Mul"
  input: "training/Adam/sub_29"
  input: "training/Adam/gradients/AddN_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_28"
  op: "Add"
  input: "training/Adam/mul_46"
  input: "training/Adam/mul_47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_48"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_30/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_30/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_30"
  op: "Sub"
  input: "training/Adam/sub_30/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_9"
  op: "Square"
  input: "training/Adam/gradients/AddN_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_49"
  op: "Mul"
  input: "training/Adam/sub_30"
  input: "training/Adam/Square_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_29"
  op: "Add"
  input: "training/Adam/mul_48"
  input: "training/Adam/mul_49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_50"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_20"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_21"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_10/Minimum"
  op: "Minimum"
  input: "training/Adam/add_29"
  input: "training/Adam/Const_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_10"
  op: "Maximum"
  input: "training/Adam/clip_by_value_10/Minimum"
  input: "training/Adam/Const_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_10"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_30/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_30"
  op: "Add"
  input: "training/Adam/Sqrt_10"
  input: "training/Adam/add_30/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_10"
  op: "RealDiv"
  input: "training/Adam/mul_50"
  input: "training/Adam/add_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_31"
  op: "Sub"
  input: "lstm_1/recurrent_kernel/read"
  input: "training/Adam/truediv_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_27"
  op: "Assign"
  input: "training/Adam/Variable_9"
  input: "training/Adam/add_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_28"
  op: "Assign"
  input: "training/Adam/Variable_30"
  input: "training/Adam/add_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_30"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_29"
  op: "Assign"
  input: "lstm_1/recurrent_kernel"
  input: "training/Adam/sub_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_51"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_10/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_32/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_32"
  op: "Sub"
  input: "training/Adam/sub_32/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_52"
  op: "Mul"
  input: "training/Adam/sub_32"
  input: "training/Adam/gradients/AddN_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_31"
  op: "Add"
  input: "training/Adam/mul_51"
  input: "training/Adam/mul_52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_53"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_31/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_33/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_33"
  op: "Sub"
  input: "training/Adam/sub_33/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_10"
  op: "Square"
  input: "training/Adam/gradients/AddN_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_54"
  op: "Mul"
  input: "training/Adam/sub_33"
  input: "training/Adam/Square_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_32"
  op: "Add"
  input: "training/Adam/mul_53"
  input: "training/Adam/mul_54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_55"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_22"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_23"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_11/Minimum"
  op: "Minimum"
  input: "training/Adam/add_32"
  input: "training/Adam/Const_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_11"
  op: "Maximum"
  input: "training/Adam/clip_by_value_11/Minimum"
  input: "training/Adam/Const_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_11"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_33/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_33"
  op: "Add"
  input: "training/Adam/Sqrt_11"
  input: "training/Adam/add_33/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_11"
  op: "RealDiv"
  input: "training/Adam/mul_55"
  input: "training/Adam/add_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_34"
  op: "Sub"
  input: "lstm_1/bias/read"
  input: "training/Adam/truediv_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_30"
  op: "Assign"
  input: "training/Adam/Variable_10"
  input: "training/Adam/add_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_31"
  op: "Assign"
  input: "training/Adam/Variable_31"
  input: "training/Adam/add_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_31"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_32"
  op: "Assign"
  input: "lstm_1/bias"
  input: "training/Adam/sub_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_56"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_11/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_35/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_35"
  op: "Sub"
  input: "training/Adam/sub_35/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_57"
  op: "Mul"
  input: "training/Adam/sub_35"
  input: "training/Adam/gradients/AddN_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_34"
  op: "Add"
  input: "training/Adam/mul_56"
  input: "training/Adam/mul_57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_58"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_32/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_36/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_36"
  op: "Sub"
  input: "training/Adam/sub_36/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_11"
  op: "Square"
  input: "training/Adam/gradients/AddN_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_59"
  op: "Mul"
  input: "training/Adam/sub_36"
  input: "training/Adam/Square_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_35"
  op: "Add"
  input: "training/Adam/mul_58"
  input: "training/Adam/mul_59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_60"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_24"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_25"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_12/Minimum"
  op: "Minimum"
  input: "training/Adam/add_35"
  input: "training/Adam/Const_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_12"
  op: "Maximum"
  input: "training/Adam/clip_by_value_12/Minimum"
  input: "training/Adam/Const_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_12"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_36/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_36"
  op: "Add"
  input: "training/Adam/Sqrt_12"
  input: "training/Adam/add_36/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_12"
  op: "RealDiv"
  input: "training/Adam/mul_60"
  input: "training/Adam/add_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_37"
  op: "Sub"
  input: "lstm_2/kernel/read"
  input: "training/Adam/truediv_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_33"
  op: "Assign"
  input: "training/Adam/Variable_11"
  input: "training/Adam/add_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_34"
  op: "Assign"
  input: "training/Adam/Variable_32"
  input: "training/Adam/add_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_32"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_35"
  op: "Assign"
  input: "lstm_2/kernel"
  input: "training/Adam/sub_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_61"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_12/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_38/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_38"
  op: "Sub"
  input: "training/Adam/sub_38/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_62"
  op: "Mul"
  input: "training/Adam/sub_38"
  input: "training/Adam/gradients/AddN_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_37"
  op: "Add"
  input: "training/Adam/mul_61"
  input: "training/Adam/mul_62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_63"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_33/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_39/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_39"
  op: "Sub"
  input: "training/Adam/sub_39/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_12"
  op: "Square"
  input: "training/Adam/gradients/AddN_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_64"
  op: "Mul"
  input: "training/Adam/sub_39"
  input: "training/Adam/Square_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_38"
  op: "Add"
  input: "training/Adam/mul_63"
  input: "training/Adam/mul_64"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_65"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_26"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_27"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_13/Minimum"
  op: "Minimum"
  input: "training/Adam/add_38"
  input: "training/Adam/Const_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_13"
  op: "Maximum"
  input: "training/Adam/clip_by_value_13/Minimum"
  input: "training/Adam/Const_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_13"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_39/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_39"
  op: "Add"
  input: "training/Adam/Sqrt_13"
  input: "training/Adam/add_39/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_13"
  op: "RealDiv"
  input: "training/Adam/mul_65"
  input: "training/Adam/add_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_40"
  op: "Sub"
  input: "lstm_2/recurrent_kernel/read"
  input: "training/Adam/truediv_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_36"
  op: "Assign"
  input: "training/Adam/Variable_12"
  input: "training/Adam/add_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_37"
  op: "Assign"
  input: "training/Adam/Variable_33"
  input: "training/Adam/add_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_33"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_38"
  op: "Assign"
  input: "lstm_2/recurrent_kernel"
  input: "training/Adam/sub_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_66"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_13/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_41/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_41"
  op: "Sub"
  input: "training/Adam/sub_41/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_67"
  op: "Mul"
  input: "training/Adam/sub_41"
  input: "training/Adam/gradients/AddN_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_40"
  op: "Add"
  input: "training/Adam/mul_66"
  input: "training/Adam/mul_67"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_68"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_34/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_42/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_42"
  op: "Sub"
  input: "training/Adam/sub_42/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_13"
  op: "Square"
  input: "training/Adam/gradients/AddN_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_69"
  op: "Mul"
  input: "training/Adam/sub_42"
  input: "training/Adam/Square_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_41"
  op: "Add"
  input: "training/Adam/mul_68"
  input: "training/Adam/mul_69"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_70"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_28"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_29"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_14/Minimum"
  op: "Minimum"
  input: "training/Adam/add_41"
  input: "training/Adam/Const_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_14"
  op: "Maximum"
  input: "training/Adam/clip_by_value_14/Minimum"
  input: "training/Adam/Const_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_14"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_42/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_42"
  op: "Add"
  input: "training/Adam/Sqrt_14"
  input: "training/Adam/add_42/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_14"
  op: "RealDiv"
  input: "training/Adam/mul_70"
  input: "training/Adam/add_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_43"
  op: "Sub"
  input: "lstm_2/bias/read"
  input: "training/Adam/truediv_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_39"
  op: "Assign"
  input: "training/Adam/Variable_13"
  input: "training/Adam/add_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_40"
  op: "Assign"
  input: "training/Adam/Variable_34"
  input: "training/Adam/add_41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_34"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_41"
  op: "Assign"
  input: "lstm_2/bias"
  input: "training/Adam/sub_43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_71"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_14/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_44/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_44"
  op: "Sub"
  input: "training/Adam/sub_44/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_72"
  op: "Mul"
  input: "training/Adam/sub_44"
  input: "training/Adam/gradients/AddN_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_43"
  op: "Add"
  input: "training/Adam/mul_71"
  input: "training/Adam/mul_72"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_73"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_35/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_45/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_45"
  op: "Sub"
  input: "training/Adam/sub_45/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_14"
  op: "Square"
  input: "training/Adam/gradients/AddN_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_74"
  op: "Mul"
  input: "training/Adam/sub_45"
  input: "training/Adam/Square_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_44"
  op: "Add"
  input: "training/Adam/mul_73"
  input: "training/Adam/mul_74"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_75"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_30"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_31"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_15/Minimum"
  op: "Minimum"
  input: "training/Adam/add_44"
  input: "training/Adam/Const_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_15"
  op: "Maximum"
  input: "training/Adam/clip_by_value_15/Minimum"
  input: "training/Adam/Const_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_15"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_45/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_45"
  op: "Add"
  input: "training/Adam/Sqrt_15"
  input: "training/Adam/add_45/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_15"
  op: "RealDiv"
  input: "training/Adam/mul_75"
  input: "training/Adam/add_45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_46"
  op: "Sub"
  input: "lstm_3/kernel/read"
  input: "training/Adam/truediv_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_42"
  op: "Assign"
  input: "training/Adam/Variable_14"
  input: "training/Adam/add_43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_43"
  op: "Assign"
  input: "training/Adam/Variable_35"
  input: "training/Adam/add_44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_35"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_44"
  op: "Assign"
  input: "lstm_3/kernel"
  input: "training/Adam/sub_46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_76"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_15/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_47/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_47"
  op: "Sub"
  input: "training/Adam/sub_47/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_77"
  op: "Mul"
  input: "training/Adam/sub_47"
  input: "training/Adam/gradients/AddN_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_46"
  op: "Add"
  input: "training/Adam/mul_76"
  input: "training/Adam/mul_77"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_78"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_36/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_48/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_48"
  op: "Sub"
  input: "training/Adam/sub_48/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_15"
  op: "Square"
  input: "training/Adam/gradients/AddN_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_79"
  op: "Mul"
  input: "training/Adam/sub_48"
  input: "training/Adam/Square_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_47"
  op: "Add"
  input: "training/Adam/mul_78"
  input: "training/Adam/mul_79"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_80"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_32"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_33"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_16/Minimum"
  op: "Minimum"
  input: "training/Adam/add_47"
  input: "training/Adam/Const_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_16"
  op: "Maximum"
  input: "training/Adam/clip_by_value_16/Minimum"
  input: "training/Adam/Const_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_16"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_48/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_48"
  op: "Add"
  input: "training/Adam/Sqrt_16"
  input: "training/Adam/add_48/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_16"
  op: "RealDiv"
  input: "training/Adam/mul_80"
  input: "training/Adam/add_48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_49"
  op: "Sub"
  input: "lstm_3/recurrent_kernel/read"
  input: "training/Adam/truediv_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_45"
  op: "Assign"
  input: "training/Adam/Variable_15"
  input: "training/Adam/add_46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_46"
  op: "Assign"
  input: "training/Adam/Variable_36"
  input: "training/Adam/add_47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_36"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_47"
  op: "Assign"
  input: "lstm_3/recurrent_kernel"
  input: "training/Adam/sub_49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_81"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_16/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_50/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_50"
  op: "Sub"
  input: "training/Adam/sub_50/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_82"
  op: "Mul"
  input: "training/Adam/sub_50"
  input: "training/Adam/gradients/AddN_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_49"
  op: "Add"
  input: "training/Adam/mul_81"
  input: "training/Adam/mul_82"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_83"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_37/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_51/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_51"
  op: "Sub"
  input: "training/Adam/sub_51/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_16"
  op: "Square"
  input: "training/Adam/gradients/AddN_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_84"
  op: "Mul"
  input: "training/Adam/sub_51"
  input: "training/Adam/Square_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_50"
  op: "Add"
  input: "training/Adam/mul_83"
  input: "training/Adam/mul_84"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_85"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_34"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_35"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_17/Minimum"
  op: "Minimum"
  input: "training/Adam/add_50"
  input: "training/Adam/Const_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_17"
  op: "Maximum"
  input: "training/Adam/clip_by_value_17/Minimum"
  input: "training/Adam/Const_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_17"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_51/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_51"
  op: "Add"
  input: "training/Adam/Sqrt_17"
  input: "training/Adam/add_51/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_17"
  op: "RealDiv"
  input: "training/Adam/mul_85"
  input: "training/Adam/add_51"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_52"
  op: "Sub"
  input: "lstm_3/bias/read"
  input: "training/Adam/truediv_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_48"
  op: "Assign"
  input: "training/Adam/Variable_16"
  input: "training/Adam/add_49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_49"
  op: "Assign"
  input: "training/Adam/Variable_37"
  input: "training/Adam/add_50"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_37"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_50"
  op: "Assign"
  input: "lstm_3/bias"
  input: "training/Adam/sub_52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_86"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_17/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_53/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_53"
  op: "Sub"
  input: "training/Adam/sub_53/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_87"
  op: "Mul"
  input: "training/Adam/sub_53"
  input: "training/Adam/gradients/dense_1/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_52"
  op: "Add"
  input: "training/Adam/mul_86"
  input: "training/Adam/mul_87"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_88"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_38/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_54/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_54"
  op: "Sub"
  input: "training/Adam/sub_54/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_17"
  op: "Square"
  input: "training/Adam/gradients/dense_1/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_89"
  op: "Mul"
  input: "training/Adam/sub_54"
  input: "training/Adam/Square_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_53"
  op: "Add"
  input: "training/Adam/mul_88"
  input: "training/Adam/mul_89"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_90"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_36"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_37"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_18/Minimum"
  op: "Minimum"
  input: "training/Adam/add_53"
  input: "training/Adam/Const_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_18"
  op: "Maximum"
  input: "training/Adam/clip_by_value_18/Minimum"
  input: "training/Adam/Const_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_18"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_54/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_54"
  op: "Add"
  input: "training/Adam/Sqrt_18"
  input: "training/Adam/add_54/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_18"
  op: "RealDiv"
  input: "training/Adam/mul_90"
  input: "training/Adam/add_54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_55"
  op: "Sub"
  input: "dense_1/kernel/read"
  input: "training/Adam/truediv_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_51"
  op: "Assign"
  input: "training/Adam/Variable_17"
  input: "training/Adam/add_52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_52"
  op: "Assign"
  input: "training/Adam/Variable_38"
  input: "training/Adam/add_53"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_38"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_53"
  op: "Assign"
  input: "dense_1/kernel"
  input: "training/Adam/sub_55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_91"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_18/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_56/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_56"
  op: "Sub"
  input: "training/Adam/sub_56/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_92"
  op: "Mul"
  input: "training/Adam/sub_56"
  input: "training/Adam/gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_55"
  op: "Add"
  input: "training/Adam/mul_91"
  input: "training/Adam/mul_92"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_93"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_39/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_57/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_57"
  op: "Sub"
  input: "training/Adam/sub_57/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_18"
  op: "Square"
  input: "training/Adam/gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_94"
  op: "Mul"
  input: "training/Adam/sub_57"
  input: "training/Adam/Square_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_56"
  op: "Add"
  input: "training/Adam/mul_93"
  input: "training/Adam/mul_94"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_95"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_38"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_39"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_19/Minimum"
  op: "Minimum"
  input: "training/Adam/add_56"
  input: "training/Adam/Const_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_19"
  op: "Maximum"
  input: "training/Adam/clip_by_value_19/Minimum"
  input: "training/Adam/Const_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_19"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_57/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_57"
  op: "Add"
  input: "training/Adam/Sqrt_19"
  input: "training/Adam/add_57/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_19"
  op: "RealDiv"
  input: "training/Adam/mul_95"
  input: "training/Adam/add_57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_58"
  op: "Sub"
  input: "dense_1/bias/read"
  input: "training/Adam/truediv_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_54"
  op: "Assign"
  input: "training/Adam/Variable_18"
  input: "training/Adam/add_55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_55"
  op: "Assign"
  input: "training/Adam/Variable_39"
  input: "training/Adam/add_56"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_39"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_56"
  op: "Assign"
  input: "dense_1/bias"
  input: "training/Adam/sub_58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_96"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_19/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_59/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_59"
  op: "Sub"
  input: "training/Adam/sub_59/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_97"
  op: "Mul"
  input: "training/Adam/sub_59"
  input: "training/Adam/gradients/dense_2/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_58"
  op: "Add"
  input: "training/Adam/mul_96"
  input: "training/Adam/mul_97"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_98"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_40/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_60/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_60"
  op: "Sub"
  input: "training/Adam/sub_60/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_19"
  op: "Square"
  input: "training/Adam/gradients/dense_2/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_99"
  op: "Mul"
  input: "training/Adam/sub_60"
  input: "training/Adam/Square_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_59"
  op: "Add"
  input: "training/Adam/mul_98"
  input: "training/Adam/mul_99"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_100"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_40"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_41"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_20/Minimum"
  op: "Minimum"
  input: "training/Adam/add_59"
  input: "training/Adam/Const_41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_20"
  op: "Maximum"
  input: "training/Adam/clip_by_value_20/Minimum"
  input: "training/Adam/Const_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_20"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_60/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_60"
  op: "Add"
  input: "training/Adam/Sqrt_20"
  input: "training/Adam/add_60/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_20"
  op: "RealDiv"
  input: "training/Adam/mul_100"
  input: "training/Adam/add_60"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_61"
  op: "Sub"
  input: "dense_2/kernel/read"
  input: "training/Adam/truediv_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_57"
  op: "Assign"
  input: "training/Adam/Variable_19"
  input: "training/Adam/add_58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_58"
  op: "Assign"
  input: "training/Adam/Variable_40"
  input: "training/Adam/add_59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_40"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_59"
  op: "Assign"
  input: "dense_2/kernel"
  input: "training/Adam/sub_61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_101"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_20/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_62/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_62"
  op: "Sub"
  input: "training/Adam/sub_62/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_102"
  op: "Mul"
  input: "training/Adam/sub_62"
  input: "training/Adam/gradients/dense_2/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_61"
  op: "Add"
  input: "training/Adam/mul_101"
  input: "training/Adam/mul_102"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_103"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_41/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_63/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_63"
  op: "Sub"
  input: "training/Adam/sub_63/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_20"
  op: "Square"
  input: "training/Adam/gradients/dense_2/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_104"
  op: "Mul"
  input: "training/Adam/sub_63"
  input: "training/Adam/Square_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_62"
  op: "Add"
  input: "training/Adam/mul_103"
  input: "training/Adam/mul_104"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_105"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_42"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_43"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_21/Minimum"
  op: "Minimum"
  input: "training/Adam/add_62"
  input: "training/Adam/Const_43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_21"
  op: "Maximum"
  input: "training/Adam/clip_by_value_21/Minimum"
  input: "training/Adam/Const_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_21"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_63/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_63"
  op: "Add"
  input: "training/Adam/Sqrt_21"
  input: "training/Adam/add_63/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_21"
  op: "RealDiv"
  input: "training/Adam/mul_105"
  input: "training/Adam/add_63"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_64"
  op: "Sub"
  input: "dense_2/bias/read"
  input: "training/Adam/truediv_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_60"
  op: "Assign"
  input: "training/Adam/Variable_20"
  input: "training/Adam/add_61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_61"
  op: "Assign"
  input: "training/Adam/Variable_41"
  input: "training/Adam/add_62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_41"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_62"
  op: "Assign"
  input: "dense_2/bias"
  input: "training/Adam/sub_64"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/group_deps"
  op: "NoOp"
  input: "^loss/mul"
  input: "^metrics/acc/Mean"
  input: "^training/Adam/AssignAdd"
  input: "^training/Adam/Assign"
  input: "^training/Adam/Assign_1"
  input: "^training/Adam/Assign_2"
  input: "^training/Adam/Assign_3"
  input: "^training/Adam/Assign_4"
  input: "^training/Adam/Assign_5"
  input: "^training/Adam/Assign_6"
  input: "^training/Adam/Assign_7"
  input: "^training/Adam/Assign_8"
  input: "^training/Adam/Assign_9"
  input: "^training/Adam/Assign_10"
  input: "^training/Adam/Assign_11"
  input: "^training/Adam/Assign_12"
  input: "^training/Adam/Assign_13"
  input: "^training/Adam/Assign_14"
  input: "^training/Adam/Assign_15"
  input: "^training/Adam/Assign_16"
  input: "^training/Adam/Assign_17"
  input: "^training/Adam/Assign_18"
  input: "^training/Adam/Assign_19"
  input: "^training/Adam/Assign_20"
  input: "^training/Adam/Assign_21"
  input: "^training/Adam/Assign_22"
  input: "^training/Adam/Assign_23"
  input: "^training/Adam/Assign_24"
  input: "^training/Adam/Assign_25"
  input: "^training/Adam/Assign_26"
  input: "^training/Adam/Assign_27"
  input: "^training/Adam/Assign_28"
  input: "^training/Adam/Assign_29"
  input: "^training/Adam/Assign_30"
  input: "^training/Adam/Assign_31"
  input: "^training/Adam/Assign_32"
  input: "^training/Adam/Assign_33"
  input: "^training/Adam/Assign_34"
  input: "^training/Adam/Assign_35"
  input: "^training/Adam/Assign_36"
  input: "^training/Adam/Assign_37"
  input: "^training/Adam/Assign_38"
  input: "^training/Adam/Assign_39"
  input: "^training/Adam/Assign_40"
  input: "^training/Adam/Assign_41"
  input: "^training/Adam/Assign_42"
  input: "^training/Adam/Assign_43"
  input: "^training/Adam/Assign_44"
  input: "^training/Adam/Assign_45"
  input: "^training/Adam/Assign_46"
  input: "^training/Adam/Assign_47"
  input: "^training/Adam/Assign_48"
  input: "^training/Adam/Assign_49"
  input: "^training/Adam/Assign_50"
  input: "^training/Adam/Assign_51"
  input: "^training/Adam/Assign_52"
  input: "^training/Adam/Assign_53"
  input: "^training/Adam/Assign_54"
  input: "^training/Adam/Assign_55"
  input: "^training/Adam/Assign_56"
  input: "^training/Adam/Assign_57"
  input: "^training/Adam/Assign_58"
  input: "^training/Adam/Assign_59"
  input: "^training/Adam/Assign_60"
  input: "^training/Adam/Assign_61"
  input: "^training/Adam/Assign_62"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^loss/mul"
  input: "^metrics/acc/Mean"
}
node {
  name: "IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "conv1d_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "conv1d_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "conv1d_2/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "conv1d_2/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "conv1d_3/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "conv1d_3/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "conv1d_4/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "conv1d_4/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "lstm_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "lstm_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "lstm_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "lstm_2/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "lstm_2/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "lstm_2/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "lstm_3/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "lstm_3/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "lstm_3/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "dense_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "dense_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "dense_2/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "dense_2/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "Adam/iterations"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "Adam/lr"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "Adam/beta_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "Adam/beta_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "Adam/decay"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_28"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_29"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_30"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_4"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_31"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_5"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_32"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_6"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_33"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_7"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_34"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_8"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_35"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_9"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_36"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_10"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_37"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_11"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_38"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_12"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_39"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_13"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_40"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_14"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_41"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_15"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_42"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_16"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_43"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_17"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_44"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_18"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_45"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_19"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_46"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_20"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_47"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_21"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_48"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_22"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_22"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_49"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_23"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_23"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_50"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_24"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_24"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_51"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_25"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_25"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_52"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_26"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_26"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_53"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_27"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_27"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_54"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_28"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_28"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_55"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_29"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_29"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_56"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_30"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_30"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_57"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_31"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_31"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_58"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_32"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_32"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_59"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_33"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_33"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_60"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_34"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_34"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_61"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_35"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_35"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_62"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_36"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_36"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_63"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_37"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_37"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_64"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_38"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_38"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_65"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_39"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_39"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_66"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_40"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_40"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_67"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_41"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_41"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_68"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_42"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_42"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_69"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_43"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_43"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_70"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_44"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_44"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_71"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_45"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_45"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_72"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_46"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_46"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_73"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_47"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_47"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_74"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_48"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_48"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_75"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_49"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_49"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_76"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_50"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_50"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_77"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_51"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_51"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_78"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_52"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_52"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_79"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_53"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_53"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_80"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_54"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_54"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_81"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_55"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_55"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_82"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_56"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_56"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_83"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_57"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_57"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_84"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_58"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_58"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_85"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_59"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_59"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_86"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_60"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_60"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_87"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_61"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_61"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_88"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_62"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_62"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^conv1d_1/kernel/Assign"
  input: "^conv1d_1/bias/Assign"
  input: "^conv1d_2/kernel/Assign"
  input: "^conv1d_2/bias/Assign"
  input: "^conv1d_3/kernel/Assign"
  input: "^conv1d_3/bias/Assign"
  input: "^conv1d_4/kernel/Assign"
  input: "^conv1d_4/bias/Assign"
  input: "^lstm_1/kernel/Assign"
  input: "^lstm_1/recurrent_kernel/Assign"
  input: "^lstm_1/bias/Assign"
  input: "^lstm_2/kernel/Assign"
  input: "^lstm_2/recurrent_kernel/Assign"
  input: "^lstm_2/bias/Assign"
  input: "^lstm_3/kernel/Assign"
  input: "^lstm_3/recurrent_kernel/Assign"
  input: "^lstm_3/bias/Assign"
  input: "^dense_1/kernel/Assign"
  input: "^dense_1/bias/Assign"
  input: "^dense_2/kernel/Assign"
  input: "^dense_2/bias/Assign"
  input: "^Adam/iterations/Assign"
  input: "^Adam/lr/Assign"
  input: "^Adam/beta_1/Assign"
  input: "^Adam/beta_2/Assign"
  input: "^Adam/decay/Assign"
  input: "^training/Adam/Variable/Assign"
  input: "^training/Adam/Variable_1/Assign"
  input: "^training/Adam/Variable_2/Assign"
  input: "^training/Adam/Variable_3/Assign"
  input: "^training/Adam/Variable_4/Assign"
  input: "^training/Adam/Variable_5/Assign"
  input: "^training/Adam/Variable_6/Assign"
  input: "^training/Adam/Variable_7/Assign"
  input: "^training/Adam/Variable_8/Assign"
  input: "^training/Adam/Variable_9/Assign"
  input: "^training/Adam/Variable_10/Assign"
  input: "^training/Adam/Variable_11/Assign"
  input: "^training/Adam/Variable_12/Assign"
  input: "^training/Adam/Variable_13/Assign"
  input: "^training/Adam/Variable_14/Assign"
  input: "^training/Adam/Variable_15/Assign"
  input: "^training/Adam/Variable_16/Assign"
  input: "^training/Adam/Variable_17/Assign"
  input: "^training/Adam/Variable_18/Assign"
  input: "^training/Adam/Variable_19/Assign"
  input: "^training/Adam/Variable_20/Assign"
  input: "^training/Adam/Variable_21/Assign"
  input: "^training/Adam/Variable_22/Assign"
  input: "^training/Adam/Variable_23/Assign"
  input: "^training/Adam/Variable_24/Assign"
  input: "^training/Adam/Variable_25/Assign"
  input: "^training/Adam/Variable_26/Assign"
  input: "^training/Adam/Variable_27/Assign"
  input: "^training/Adam/Variable_28/Assign"
  input: "^training/Adam/Variable_29/Assign"
  input: "^training/Adam/Variable_30/Assign"
  input: "^training/Adam/Variable_31/Assign"
  input: "^training/Adam/Variable_32/Assign"
  input: "^training/Adam/Variable_33/Assign"
  input: "^training/Adam/Variable_34/Assign"
  input: "^training/Adam/Variable_35/Assign"
  input: "^training/Adam/Variable_36/Assign"
  input: "^training/Adam/Variable_37/Assign"
  input: "^training/Adam/Variable_38/Assign"
  input: "^training/Adam/Variable_39/Assign"
  input: "^training/Adam/Variable_40/Assign"
  input: "^training/Adam/Variable_41/Assign"
  input: "^training/Adam/Variable_42/Assign"
  input: "^training/Adam/Variable_43/Assign"
  input: "^training/Adam/Variable_44/Assign"
  input: "^training/Adam/Variable_45/Assign"
  input: "^training/Adam/Variable_46/Assign"
  input: "^training/Adam/Variable_47/Assign"
  input: "^training/Adam/Variable_48/Assign"
  input: "^training/Adam/Variable_49/Assign"
  input: "^training/Adam/Variable_50/Assign"
  input: "^training/Adam/Variable_51/Assign"
  input: "^training/Adam/Variable_52/Assign"
  input: "^training/Adam/Variable_53/Assign"
  input: "^training/Adam/Variable_54/Assign"
  input: "^training/Adam/Variable_55/Assign"
  input: "^training/Adam/Variable_56/Assign"
  input: "^training/Adam/Variable_57/Assign"
  input: "^training/Adam/Variable_58/Assign"
  input: "^training/Adam/Variable_59/Assign"
  input: "^training/Adam/Variable_60/Assign"
  input: "^training/Adam/Variable_61/Assign"
  input: "^training/Adam/Variable_62/Assign"
}
versions {
  producer: 26
}
