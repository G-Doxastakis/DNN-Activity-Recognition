node {
  name: "conv1d_1_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 200
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "conv1d_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\t\000\000\000\003\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.09975093603134155
      }
    }
  }
}
node {
  name: "conv1d_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09975093603134155
      }
    }
  }
}
node {
  name: "conv1d_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv1d_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 6939815
    }
  }
}
node {
  name: "conv1d_1/random_uniform/sub"
  op: "Sub"
  input: "conv1d_1/random_uniform/max"
  input: "conv1d_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_1/random_uniform/mul"
  op: "Mul"
  input: "conv1d_1/random_uniform/RandomUniform"
  input: "conv1d_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_1/random_uniform"
  op: "Add"
  input: "conv1d_1/random_uniform/mul"
  input: "conv1d_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 9
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_1/kernel/Assign"
  op: "Assign"
  input: "conv1d_1/kernel"
  input: "conv1d_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_1/kernel/read"
  op: "Identity"
  input: "conv1d_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
}
node {
  name: "conv1d_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_1/bias/Assign"
  op: "Assign"
  input: "conv1d_1/bias"
  input: "conv1d_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_1/bias/read"
  op: "Identity"
  input: "conv1d_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/bias"
      }
    }
  }
}
node {
  name: "conv1d_1/Pad/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_1/Pad"
  op: "Pad"
  input: "conv1d_1_input"
  input: "conv1d_1/Pad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_1/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_1/convolution/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_1/convolution/ExpandDims"
  op: "ExpandDims"
  input: "conv1d_1/Pad"
  input: "conv1d_1/convolution/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_1/convolution/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv1d_1/convolution/ExpandDims_1"
  op: "ExpandDims"
  input: "conv1d_1/kernel/read"
  input: "conv1d_1/convolution/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_1/convolution/Conv2D"
  op: "Conv2D"
  input: "conv1d_1/convolution/ExpandDims"
  input: "conv1d_1/convolution/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_1/convolution/Squeeze"
  op: "Squeeze"
  input: "conv1d_1/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "conv1d_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_1/Reshape"
  op: "Reshape"
  input: "conv1d_1/bias/read"
  input: "conv1d_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_1/add"
  op: "Add"
  input: "conv1d_1/convolution/Squeeze"
  input: "conv1d_1/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_1/Relu"
  op: "Relu"
  input: "conv1d_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "max_pooling1d_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_1/ExpandDims"
  op: "ExpandDims"
  input: "conv1d_1/Relu"
  input: "max_pooling1d_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "max_pooling1d_1/MaxPool"
  op: "MaxPool"
  input: "max_pooling1d_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "max_pooling1d_1/Squeeze"
  op: "Squeeze"
  input: "max_pooling1d_1/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "conv1d_2/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_2/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.09682458639144897
      }
    }
  }
}
node {
  name: "conv1d_2/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09682458639144897
      }
    }
  }
}
node {
  name: "conv1d_2/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv1d_2/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 7396330
    }
  }
}
node {
  name: "conv1d_2/random_uniform/sub"
  op: "Sub"
  input: "conv1d_2/random_uniform/max"
  input: "conv1d_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_2/random_uniform/mul"
  op: "Mul"
  input: "conv1d_2/random_uniform/RandomUniform"
  input: "conv1d_2/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_2/random_uniform"
  op: "Add"
  input: "conv1d_2/random_uniform/mul"
  input: "conv1d_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_2/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_2/kernel/Assign"
  op: "Assign"
  input: "conv1d_2/kernel"
  input: "conv1d_2/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_2/kernel/read"
  op: "Identity"
  input: "conv1d_2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
}
node {
  name: "conv1d_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_2/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_2/bias/Assign"
  op: "Assign"
  input: "conv1d_2/bias"
  input: "conv1d_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_2/bias/read"
  op: "Identity"
  input: "conv1d_2/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/bias"
      }
    }
  }
}
node {
  name: "conv1d_2/Pad/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_2/Pad"
  op: "Pad"
  input: "max_pooling1d_1/Squeeze"
  input: "conv1d_2/Pad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_2/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv1d_2/convolution/required_space_to_batch_paddings/input_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 108
      }
    }
  }
}
node {
  name: "conv1d_2/convolution/required_space_to_batch_paddings/base_paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_2/convolution/required_space_to_batch_paddings/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_2/convolution/required_space_to_batch_paddings/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_2/convolution/SpaceToBatchND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv1d_2/convolution/SpaceToBatchND/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_2/convolution/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "conv1d_2/Pad"
  input: "conv1d_2/convolution/SpaceToBatchND/block_shape"
  input: "conv1d_2/convolution/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_2/convolution/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_2/convolution/ExpandDims"
  op: "ExpandDims"
  input: "conv1d_2/convolution/SpaceToBatchND"
  input: "conv1d_2/convolution/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_2/convolution/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv1d_2/convolution/ExpandDims_1"
  op: "ExpandDims"
  input: "conv1d_2/kernel/read"
  input: "conv1d_2/convolution/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_2/convolution/Conv2D"
  op: "Conv2D"
  input: "conv1d_2/convolution/ExpandDims"
  input: "conv1d_2/convolution/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_2/convolution/Squeeze"
  op: "Squeeze"
  input: "conv1d_2/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "conv1d_2/convolution/BatchToSpaceND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv1d_2/convolution/BatchToSpaceND/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_2/convolution/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "conv1d_2/convolution/Squeeze"
  input: "conv1d_2/convolution/BatchToSpaceND/block_shape"
  input: "conv1d_2/convolution/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_2/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_2/Reshape"
  op: "Reshape"
  input: "conv1d_2/bias/read"
  input: "conv1d_2/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_2/add"
  op: "Add"
  input: "conv1d_2/convolution/BatchToSpaceND"
  input: "conv1d_2/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_2/Relu"
  op: "Relu"
  input: "conv1d_2/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "max_pooling1d_2/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_2/ExpandDims"
  op: "ExpandDims"
  input: "conv1d_2/Relu"
  input: "max_pooling1d_2/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "max_pooling1d_2/MaxPool"
  op: "MaxPool"
  input: "max_pooling1d_2/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "max_pooling1d_2/Squeeze"
  op: "Squeeze"
  input: "max_pooling1d_2/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "conv1d_3/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_3/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.09682458639144897
      }
    }
  }
}
node {
  name: "conv1d_3/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09682458639144897
      }
    }
  }
}
node {
  name: "conv1d_3/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv1d_3/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 4716285
    }
  }
}
node {
  name: "conv1d_3/random_uniform/sub"
  op: "Sub"
  input: "conv1d_3/random_uniform/max"
  input: "conv1d_3/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_3/random_uniform/mul"
  op: "Mul"
  input: "conv1d_3/random_uniform/RandomUniform"
  input: "conv1d_3/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_3/random_uniform"
  op: "Add"
  input: "conv1d_3/random_uniform/mul"
  input: "conv1d_3/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_3/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_3/kernel/Assign"
  op: "Assign"
  input: "conv1d_3/kernel"
  input: "conv1d_3/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_3/kernel/read"
  op: "Identity"
  input: "conv1d_3/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
}
node {
  name: "conv1d_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_3/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_3/bias/Assign"
  op: "Assign"
  input: "conv1d_3/bias"
  input: "conv1d_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_3/bias/read"
  op: "Identity"
  input: "conv1d_3/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/bias"
      }
    }
  }
}
node {
  name: "conv1d_3/Pad/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_3/Pad"
  op: "Pad"
  input: "max_pooling1d_2/Squeeze"
  input: "conv1d_3/Pad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_3/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv1d_3/convolution/required_space_to_batch_paddings/input_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 58
      }
    }
  }
}
node {
  name: "conv1d_3/convolution/required_space_to_batch_paddings/base_paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_3/convolution/required_space_to_batch_paddings/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_3/convolution/required_space_to_batch_paddings/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_3/convolution/SpaceToBatchND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv1d_3/convolution/SpaceToBatchND/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_3/convolution/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "conv1d_3/Pad"
  input: "conv1d_3/convolution/SpaceToBatchND/block_shape"
  input: "conv1d_3/convolution/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_3/convolution/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_3/convolution/ExpandDims"
  op: "ExpandDims"
  input: "conv1d_3/convolution/SpaceToBatchND"
  input: "conv1d_3/convolution/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_3/convolution/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv1d_3/convolution/ExpandDims_1"
  op: "ExpandDims"
  input: "conv1d_3/kernel/read"
  input: "conv1d_3/convolution/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_3/convolution/Conv2D"
  op: "Conv2D"
  input: "conv1d_3/convolution/ExpandDims"
  input: "conv1d_3/convolution/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_3/convolution/Squeeze"
  op: "Squeeze"
  input: "conv1d_3/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "conv1d_3/convolution/BatchToSpaceND/block_shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "conv1d_3/convolution/BatchToSpaceND/crops"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_3/convolution/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "conv1d_3/convolution/Squeeze"
  input: "conv1d_3/convolution/BatchToSpaceND/block_shape"
  input: "conv1d_3/convolution/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_3/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_3/Reshape"
  op: "Reshape"
  input: "conv1d_3/bias/read"
  input: "conv1d_3/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_3/add"
  op: "Add"
  input: "conv1d_3/convolution/BatchToSpaceND"
  input: "conv1d_3/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_3/Relu"
  op: "Relu"
  input: "conv1d_3/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "max_pooling1d_3/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "max_pooling1d_3/ExpandDims"
  op: "ExpandDims"
  input: "conv1d_3/Relu"
  input: "max_pooling1d_3/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "max_pooling1d_3/MaxPool"
  op: "MaxPool"
  input: "max_pooling1d_3/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "max_pooling1d_3/Squeeze"
  op: "Squeeze"
  input: "max_pooling1d_3/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "conv1d_4/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_4/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.125
      }
    }
  }
}
node {
  name: "conv1d_4/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.125
      }
    }
  }
}
node {
  name: "conv1d_4/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv1d_4/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1312428
    }
  }
}
node {
  name: "conv1d_4/random_uniform/sub"
  op: "Sub"
  input: "conv1d_4/random_uniform/max"
  input: "conv1d_4/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_4/random_uniform/mul"
  op: "Mul"
  input: "conv1d_4/random_uniform/RandomUniform"
  input: "conv1d_4/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_4/random_uniform"
  op: "Add"
  input: "conv1d_4/random_uniform/mul"
  input: "conv1d_4/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_4/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_4/kernel/Assign"
  op: "Assign"
  input: "conv1d_4/kernel"
  input: "conv1d_4/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_4/kernel/read"
  op: "Identity"
  input: "conv1d_4/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/kernel"
      }
    }
  }
}
node {
  name: "conv1d_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1d_4/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1d_4/bias/Assign"
  op: "Assign"
  input: "conv1d_4/bias"
  input: "conv1d_4/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_4/bias/read"
  op: "Identity"
  input: "conv1d_4/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/bias"
      }
    }
  }
}
node {
  name: "conv1d_4/Pad/paddings"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_4/Pad"
  op: "Pad"
  input: "max_pooling1d_3/Squeeze"
  input: "conv1d_4/Pad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_4/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_4/convolution/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "conv1d_4/convolution/ExpandDims"
  op: "ExpandDims"
  input: "conv1d_4/Pad"
  input: "conv1d_4/convolution/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_4/convolution/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "conv1d_4/convolution/ExpandDims_1"
  op: "ExpandDims"
  input: "conv1d_4/kernel/read"
  input: "conv1d_4/convolution/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_4/convolution/Conv2D"
  op: "Conv2D"
  input: "conv1d_4/convolution/ExpandDims"
  input: "conv1d_4/convolution/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv1d_4/convolution/Squeeze"
  op: "Squeeze"
  input: "conv1d_4/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "conv1d_4/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1d_4/Reshape"
  op: "Reshape"
  input: "conv1d_4/bias/read"
  input: "conv1d_4/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "conv1d_4/add"
  op: "Add"
  input: "conv1d_4/convolution/Squeeze"
  input: "conv1d_4/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1d_4/Relu"
  op: "Relu"
  input: "conv1d_4/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.10206207633018494
      }
    }
  }
}
node {
  name: "lstm_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10206207633018494
      }
    }
  }
}
node {
  name: "lstm_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "lstm_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 3103753
    }
  }
}
node {
  name: "lstm_1/random_uniform/sub"
  op: "Sub"
  input: "lstm_1/random_uniform/max"
  input: "lstm_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/random_uniform/mul"
  op: "Mul"
  input: "lstm_1/random_uniform/RandomUniform"
  input: "lstm_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/random_uniform"
  op: "Add"
  input: "lstm_1/random_uniform/mul"
  input: "lstm_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_1/kernel/Assign"
  op: "Assign"
  input: "lstm_1/kernel"
  input: "lstm_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1/kernel/read"
  op: "Identity"
  input: "lstm_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 512
          }
        }
        tensor_content: "\317Q\324\2741[\020=\234\326\013\274e\344.\275\315J\356\274\272\361\357;\225O\206=_N\244\274\214|\n\275\006\305\237<\027\332\014<!\330\013=\264\003\276\273\363\022\212=8\003\226\274\347\377\031\275\302\247\335<\202o;=\310\334\020\275\356\342\340\274B\215\201=\204\240\220\273!R\302<\365h7\275\356\346\233\275]\006I\274\0177\321=\331\003p<\r<\014\275\374\326d\275g4K<z\000\325\272\361\374\353\274\362\'\254\274\031l\253=\274\203\331;\327\2129\275d\0266\274*\033\250=P\325\333\274\023\365$<\220V\243\274\315\365\210\275\254\304\332<P\273\250<(\201\231<6\203G=\224VB;\312\362\254=m\260\273<\215M?<\344k\203=I\225\242\275\277\360\254=\017d\031=\0033X=\n\201^<\302\242\261=\227s\234\275\276\336\035=\351W\236\275\204W\313;\265\324p<S\035\211<\3108\201\275\025\t\303<<\255\245<\227\316\004\275{\006\350\274\024\362\220=\310?\300;\004]\200=\010\252K<_\224\263;\325UH\2737\254R\274\013\020\264\274\234l\306<#\014\t\275\2005\037:9\267\027=o\310F\273\300\221\004\273\025\021\035<\376\263\231=`\t\252\274\223>@=\333w\361\274\255l\273<\270\233\206=\224Hx\2740\027\037\275\017w5\275\323J\217=T_p\275\221\252q\275%T\027\275\301\345\264;\307\245\023=`\246\325;\263I\344\273F\013\221<\271\250\344\274:\274\341\274%D8\275\023\363\252\274\005g\000>%\215E=\270&\206\274b\243\335;>\037\251=\202\330\'\274)\376\221\274\001Y2=\347C\205<\320\207\374<\213\013\207=i\230[\275;%\222\274\347\367r<\275\347\217<\2424\341<ax-\275\264\031\013\275\277\344p\274A\027\316\274\254\316H\275W\346K;\333\354\255\272pN\037=\317!U\275O\330)\274?v\034\275\336\221F=\\\311\341\275\255\3700\274\273e\233=;\340R\275\245Z\202=\240hV=\275A%<q\215>=\274P\316\274\005\3039\275S=,=\023 h\274F\374\203\273\016\235\223<\020\024\013=\371>\n\275\240>\345;?\254\000;\277C\227\274\255\253\352<\374mh\274X{\261=\341\255\204\274\203\233\250<\226\022\034=U\245w=\271f:\275\211%\033=n\270d<l%4\275\376P\351\274\221Q\216<\324\032~=\253\367\260\274\023\314\257\274\233\230\210\275\014\245\213=\025\202<=4\355\272<\274\374;=\3362I<\335\322\010;\036\322\"\275x,_\2754\300\352<\355\374\177\274z\341\023<\347\347\225;\224\340\326<\215~\226\274\364\321Q<\342\027\311\273\001\352\300=\304\230\303\274Er\273\273\323\231\246=\221\355\030=\032&\365<\2032\201:81\247\274\263Mp\274K\027\235\275x\343\363<E\327\327\275i5,\274Y\3045\275\024\354[=w\366\234\273\212\236\243;\234wv=\034\251\312;<\022\213=\272\037\363\273\013\207\301\274\375\246\267<a\033Y=\322|j\275l\251\013\275\253R\022=\364\311\321\274\325\002\205\275\"\005m=}\016\200\275b6\032\275\203\3166\274\343z9<3\256\221\274=x\237=\217Z\267\272\362\221\023\275?Z\232\274\376\276c\275\210\020x=\'\204I\2752\262\203\274b`z\274s?\344;\332^F\274YMI\275\252RC\275\210\251\203<\327\325\304\274\234\312<=5\3271=\363tF\275\013\314\353<\347L/\275*~\301\275\300(\003=\317\316\216<\003\216p=\032\250U\275\2148\223\275se\\=w\340\275\274*\327\361<\351\2420=I\022\"\273\300i\225\275\243kN<\3671\226\274\342\363^\274^\375R\275\331\356~\275\"\314\n\274\"\\{\274\301\341\212\274\304..\275\326\300\023\273\317!X\274\367\356\331\274\031J\002={\020\225=\0256}<\375\252&\275\341\324I\275\237\270\025\273M\304\302=\334P\226\274\207\242\036=%\223l=*D\222=h\360\200\274\313[^=/d\237=\206>:=J\210\366\274\317\026\354\275\003\022\314<\246\031\003=\205$\351<,\274\320;,wy=*\376\335=\002|\375\274/<\257<\266\340\003<\327\t\355\274\352p\025\275\345\340\347<t\253\370\2740\334\250=\007QI\273\246\"\237\275\360\322w=\254\244\260=|\371w=~\030\2309\252\210h<\177Q\016=Vn@\275;\372\000=@\246.<\351\3274\272\213<F\274\365S2=\244\302\311<BI\226<\363\210\027=;\370\005=o[:=\245\366\007<\364\2373\275vX+\275\t?G<\216Q\253<\325\361\004\2759\211]=\345\377G=\355\222]\275\356\360x:\371}f;z\010\360\274I\033\314=\377\300T\275\242S5\274\305\350#=m]\205<\310\375\305\274\337n\211\274\316t\327\274\322\002y\275ZT\231=\272\321\300\274\362\261\025=\362\330\331\273\260\337\010\275\325\304\220<\036\227N\275XMj=Q\035c=\013\233o=Zm\310<c?1\275K[T<\370\367]\275\206\3061\275\371\013\300<1\371\255<7\276\'\274+\203\023<\323!\037\275\210\372\014\273\265\256\354<9E[\274*g\204\273\201\035\246\274\001\203\206\275\\b\215=_\252\240\275\357\334\254\273\376\214\305\273?+\244=j?[\274F\306m<+\215\223=\3076\317\274\315\361k=i\327\376<-\262\257=\265\003\252\274H3\030>\317\321\252\275\311c\201;\262[\027\275\362\027S;\321q\005\275\t\226\001\274\342\025\003\274\021i\275\274\246\210\'\274%\246\031\275\345\350\002=w\036h=\330am\275\277C\270<x\310\343<8Y\245<\225\303\363<[N\212\274\013I\213\274x\265\234\275\325\013\361<#C-\272\r\276\371\2745\025\375<\260\320v\275\360\256\223\275\375\010\302<x\016\001\275\222\365p\275\004N\362\275P\374\274=Ul\002<\211\315L=\242e\267\274#\201H\274)\024\327<m,I<\365A\353\272c\241z=\256\252\313;\341Y\006<` \t=J4\177<\007p\013\275\205\262\237\273q\024\014=\032}R<X\327\200\273\001\346\023\275&\270\013>S\307\360<\303\316i\274*+\224=\323\372\232\273\001\213K\274\313,\004<\344{\210;\r\235V=_\002\234=~\367E\274!QD=\007\302\005=n\010^\274\034sL\275\\\202\\=s\371R=\020\347\327\275\246\022\177\274\277\333\300<\026T)=\205cf;5\330g\275;\'\221<\002I\022=u\'0=t\254\202=>\327\027<\226-\003\275\r\215p=\367Q\237\274U\353L<\355\273\303\275S\240r\275m\233\301<a\013\\\275\354\016\203=\252\364\325:\301d\024<\361_:=9\307`\275\362\021\207<U\005\275\275\"\010\301=\323\037\367</\227\210\273\273\310X<+\251\n\275\365\337N;\364\360\351\275\010s\236<$\\\264<\002\310>\275\373Kc\275\236\001y\275\356\354Z\274\311\324\014=\262\3672\275\320\r\260<9\3419<=eu<\027\033\323<8\tq\275\026\245\342<\274\262\002\275\352(\214=t&\000=\200N\202\275\265\221\037\274\024\321\006\274+\300\036\275:X#=Y\213L=\263\377\302<H\017/=\3332\222\275o\363\217<\300\014\306\275z9\010=\001\216\034=\373\014^\2757\234\r\275\230\263\203\274\254\342.<\372\216\235\275\207\250\024=\323\273\327\274\000\333\343\275S\324\002>\224\263\004=\"\346N\275\261\225\253=\371\262/\275\022)\232\273_4i\275\226\177\373\274at_\274P\327\t\275.b\333<\006\014\304\275yV(=\251\240I<\363\312\022\275T\265W\275^*0\273\340m\375\273Rq\205=\272\352]\274\322\347|<\375\247\037\273\336\344\033\275v^O=\031\326\257\274\2129\344:d\032$<\327\2509\275UK\334\274\303x\316<\2523\267<\263\210\227\274\035\340<\275\00526=k\221\024\275\267\276\355<~s\247\275)\373 =\256\210a=\203N\t\276\207\002S=8\314$\2759C\324\271gj\302\274g\244\020\275\010\n@=\337\244\241;1\005`\275\225@\033\274\304\244\027\275rJ\216\273a\202d=\371W@\272\247I\r\275\236\346\345;\311\366,<$\351\373<\305(\003=\253\255L<\312\315\206\275\016\215J\275=\013\263\275HE\333\272\312\271\226<xd\301\273\371Y\253\2744\2417<\364~\243\274\310\2275=\277\005Z=\354\003\252;Q\372\026=\214n\030=vN^=}$\263\274\362\037\246=]\325\027\274\2316\350\274\\\024\243<\211n\257\274\002\243@=\234\025j\274\223\333$<\240\032\022:\002\303\230\274|\324\301<\276~A<^{\243<\005=\343<\207\r\305;\317 x=\211\333\036=\276\351\023<\346Z\200\275)\000\206<\2621\235\275\310\246V<\317\235C\275\224}\263\275\001\n\262\274=\346\253\274~\230\321<h\235x:\225 \035\274\277\177\205<\234\344i=\351%\220<E\033\304\272H\302\227<,\345P\275\025KC\270q9(\274K\037\361\274D\315\221\274\250}?\274\2716\033<\374|\001=\365\236\034=b\257\020\275\3729\243<s\204\205<\034\037\020=u\374\243;\356\013o\274!\276\337\274h\242\314\274/R\000=h|\224\272\256\3146=\233\351\324<\236;$=\304^\375<\204=k=S\305\334;Z\351\000\275\206\331\261=LGP=&\330[=\272&\006\275\204\256?<\232\003\226\2755VS\275\264\332\240\273#\244\302<\213\276S;\000\016e=;fO\275!\265\000=\006\217\244<vx\235\274n\246e=\271\262\021\275\r^\200;\200\026\346\273\003\356\003\274\320\260\334<72\320\274\326\233\034\2757\227\210<\2577\236<n\344m\274<_\256<\351W\207\274o\322l\275J\3473=\346.\311<\240%\212=\242D\372\274\341$\224\2736\371\257<\\c\205=\205\346\027<\370\221\344\274:!&\273\231\205\026\274\336\0165\275\212gz=\326\177\376\274\356\347#\275\324\251\031\275\261\026\000\274\240\302B\275\225\224\220=\347-\337<{\372\325<\272{2>j\004\027\275\203\3048\274V\201\317\274kn\004\275\210\270G=u\035\341;jX\321:2\033\201\275\324\276\276\274q\326k\274E;\363\2732^|=\345\004\001\275\276\017G\275\260Y\213\275\254\313+<0b\312<\315=2=Q\317g\2737Kg:\266w\021=y\010\204=;\215\007<r\327x\275\312\226\200;\343\323\347\274\310G_\274\315\374\373\274Y\252\"<\302\351\231=\221\361\237\274\245\2012=&\377\006=D\273\372;\241\377J\275H\247\210\274;$t\274i\021\371;\255\004\n=px\326\274\214\2034=6v\367<-Q:\275*\300\232\274\311\207G:\314\300\003=\2221\025<\324&\365<(=\224;9Tb\275\221\034\013=\223E\005\274\216\300\327\273q\346\323\274\'\312\220=\301[\230\275\352}\354<\036>t;\251s\243:\"\rN=u\346d=1h\204\274@\021+\2748\003\200:j\321+<XO\201=\205\3452=\241\3460<\202e9\275iR\016\274\227z\242\274\370\".\273\211\033\202\275\326\"\247\273\016\257\241=q\330\035=d\213\334\275\\\373\245=\312\010\224=Z1\020=\240\322\225<*\320e<\240@\215\272\305\203+<C\331y<\267\263\247\275r\220\006\275\360a\017=\327\360\310\274\370\370\263\273\266,\260<]\215]\275\177\027\006=\'\237\243<\266\177J\275Q>\025\275f\3772=w\244h\275i\212[\275\321gI<\024\224S=\027\237o=\037\223\007=\"<(<\233\201\351=q\024\273<\n\020\210;R1\240=\276\265\306=\314~v=\360\333\206<\276y\343<\365M\000=\273\272\277\275\260\n\334<\207W`=\363h8\273\362\326\362\274b\372\014<\205\016e=\255\227\242\275\370R/<]\353\206=F\254u=l?$=\\\256;<\"\227\225=\312\326\207=\234,\312=C\r\342<\201\353\354<\362N\003\275zi`\272\304\260\227;\212\217\234\274\014\236\223\275d<\377<\005\215\245\274\230-K<)\344\237=\n\345\013\276\303+\t=\261\331j<\321br=%:%<\310({\274[\316\033\275L\301W\275@\335k\275\204\315\376\274C\336\227<!\215\251\275G\362b\275\370\307X\275Vr\254\275\'\350?\275t\233\254=\2608\330<\326\352\000\275\211o\204=\217\n>;\246)K\272\216\210\325;\273]\035\275(\203)=\r\312\"\275*.@\2754\217\314\274*1N\274\32646=\277D\210=\264\376\r=\342\373\005\273\000\324\365<\303\301\322\274\033T1\275s6Q\275!\330\310<\240i\\\273\223\240\274\274\330\253\252\274\231\353U\2738_\245\275\323W\317\275\177zX;J\036d\275\\\034\274\274\367\005r\274\216+\266<\2675\364<\327F[=x,M\274\274\212\257<Q\226\224<\031 \\<\007\345\t=\211\353\263\274q\221\367<S\330\256\273\016\353\017=\217M\205=\363\346\242<\014\321f=\211\324\030=7(m\275/S\t=\222\366\211\275:\216\217\275\366i\020=7\374\255\275_\353\244=\232p\027<s\035X\275\370\237\274\274\026\341\330\274\377%\031\274\315\267<=\366\021)=^gM=S\264!={@=<\271\003;\275/\030\210=\355\267\221;U\262\026=\357\023\033\275\214>i=_\250\022=\337\206\361<\341\004\306\274\211\230\210<\024n\373<}\363x\274\271?+<\037\325\033\2758\324\211\275\004\022\215\275\367\223\232=|\312\231<\317\274\255<\257D\216=^\370\253<\203b\250\275\334\361\003\275\333\322W\275\217Q\016\272Y\363T=&\203\005\276\206]\222\273\300\376\221\275/Ux<#\265\036=v\347\"=p\234\201\275mb\022\274m$\035<_b\257\273P\023\000\275Tu\301\275\'C\263<\352=\335<I)\336\274$\366s\275\346\265)\275\251\357\241<\017\373\023\275<\232h\275\361\356\370<\337\376\231\275+\014\227\275\267Te=f\347\226\274\244\272,\272\330\246Y\274%\206\333<\306\242\352\273\274\366K\275\214\276\325\274\251#\330;\n\331\255<\320\302\240=\325\232\3537J\360\346<\305,\352=\323|\010=\177\206\272\274iT\354<\327g$\2752r\257\275+\340\027\275\202a\007=6\271\241\273hB\022\275\321\017 \274*\350\300<p\202\277<\311\245\214\273\023\023>=\352M\201\274m\237i\275\305o7=\360\002\374\272\245\270\327\274\3456\367;w}\346\274\356\350\"9\013,\330\2759\252\212=b(\270\274~\365\337;\311\001\216<V\321\236\275\205\321\006=@m\240<\000\r,\275\205n\213\273\224\243\002=11n\274bn\003;b\230\316\274-z\314\2741\202\007\276I\266\312<>\253\324=\357\243\326\275\367y\334<\327\264\035=-N$\275fQ\375;x\022\242<<Q\375;\234\343(=\3204\035=E\t\324;\2275\001\275aIj=\007<E\275\n(\257<#\201\027=\360f\326\275\027:\035=\333\370\207\275\',\332<\230\265\301\275\342vH\275aL\230\273{\025\010\275\243LO\275H\2159\275\276y\230=X\326\363\274\214\345\262:<>(\273\357\260\210<Qx\216\273`\244\210=\227\031\t=\024\323\336\274lk9\275\250\\\212\274XB\246\275\n\226\225\273uE\323<\324\274\317<a\003.=\245im=\2539\021\274\027\'\261<R\216%\275\222\246\363=\260r\224<t$\321<&!\226<\370\312H\275\207\366j\275\375\346\365=q\275o;\r \245\273\264K\325\274\350\027\363;\304^\272<\316=\001=\241\310\360<\343\341\027\275P\002S=\030\253\001<\346\372\243\273\305\210S;\230\367n<\217\376\325<~(\376\274U\355p=rE\016\275k\010\224<\010H\232=)\255\377;\330!\351\274\243\367\377<\017j\243<fR\267=1\000\207=\307L\212=\330{\245;j\304\\\275\220}]\275\265\341\276;4\004\000<\232\332\236\275\262h\234=,~-=t\333\337<H\246\213<^\326\250\274\326[I=\023G1<W\377\247:\207N\240<\357\366)\274\303G\273<%\224\023\273\367P&\274s\237\253\275\032\341x\274mES;\266\361\356<\346\243\024\275.\205\337\274\004\205?<\"Q;\2757\024-\275\371\371\237\275\314\262\342<\231\002\021<}%\033=]\004\366<\025\313X=\213;2<Q0\036\275\226oJ=#\212Z\273\036\305a\274\303>0<\016\370\3419\027\364\373\275e\177\016=\252\270U\275\304\230g<\251\221\375<;\273\203<\254!Y=\276\306\353<\314cv<\177/\031<\305\306r\274M;v\274\210P]=\315u\235=\333\315\245=)\200\355;}_\307\274[\375\016=6\310L\275M\021}\2747{\032\275\333,C\275\351\230\035=\327\364\223=\002\211\257=\001\021\376=\024\372n<\277\317\237\273\325\204\233\274\1779\227\275\337\000\311<J\322\232=\323\356\335<~J\002<\336Xt=\233m\'\275*\206\356;U\257\r\275\307.5<Qz\001\274\320\214F\274\"\340C=1o\242=5\004\201=\377\321\242;*\267\236\274|\323\027=c]A=\023\366\026=\271h?\275\261\003\007\275%Z\035=]E@\275 T\207\275\002\263\025\274\035U(\275U[F\275\271!\352<\357\336==b\325\252\275\243\rB\275o\276\360\274x\344%=f\026I=\247\236\034\275\261\331\347\273\370J\360<\265\"\256<\0132\220\274FE\374\274\213E\240\274S\312@=\312`7\275\220\"\014\275\370\200\203\274oj\326\273aY\014;\312\255\351\273\303\226\213<\236\222\307\274\257\021\203=\350\230\306\275\036\033\257\274a\376\214<\253\310\213\274\357Q\023<\027\272\010\275=\325\260<VH8=\366\312\305\274\25789=02(\275\374\324\373\274t\002-\275\307\257\351\274\"\347\333<\275K\207\274g\355p\275\371\305g\275\037F\032=\244\001\335;\255j\205=@i\032\275\334J\275=\250Q\220<ZR\354\274v\320N\274\356\273u=\226%7\275\003\345\265\275\276\001\021\275Fx/\275s\r\035=\350\252\242\275f\2054<#|l=\333ux< w}=\260\320K\275t]\3649\330Y\202<\220RS\274\247\220\022\275\276S\255\272\"T\335<\024(\241\2740w\024\275+\035\203\274,\364\337\273\3428\341\274\233\027\265\274\377\265\244<m\206\016\275\372\2450\273\223c6\274n\313\302\274=y\005=\006N~<\366\224 \275\337m0\275R\'\006=O\201\2229\004-\210=\220\257L\274mkK\275:C =\336+4<_\266\314\274\361\004f<\227?d\274Y\304\274\273\241)?=\3370\007\275V\r\361\274`:\267:\330%x=\n\205\213=6\201\r<\343\006_=\020\224\007=\336\212\267=\201}\017\275I\326\026=\3450?;y\203\000=\207\025\r=\330\231\002=\232=(<\347I\202\274\271\361E=y6\\\275\016|\313<\343\354\032<\245d\223=4\026\220<\376\343\226\275\201\354a=\252\336\223<\010P\250\274O[\247\274|\346\010\275p\'\n\275\364\314T=OW\217\275\014\213\207\274\360\007s=\202\276f\271\373\362:\275Pm\245<\005\373\344:\006=\350<\236\215\222\275JAQ\276\033_\274\274\014\321\360<yn\217\275\2712u=\365m\021<@\222u\275\211\035!\275\302\nL\274\203\234v\275\0272\376<\266\315^\273?\250\027\275\025\222\354\273\345\3014\274\267\2146=\034\306p=]\275\235<\262\346q\273\364\341\241=/UW<0@\367\274\315\'\233\274\262\266W\274e\265\372\274_9\345\273&\300\214\274D\226\323\274M\227u\275\263H4\275\345\217\222<O\323\274\274r\241\010\275\253\367U<\270\3475\275\324\016<=C~<=ck\226;E\340\353<\301\310\340\274\375\0346=\260\306\326<\213\210\202<4%\334<\205\214\303<\030\006\244\275}\275\235<\243~\300;\374\371\261<\371ES\275t\"8=\266\361\264\275\326\245\300<\212\377\301\274\242]\300=\312x\216=\363\207\311\274`D5:\254\030\206\275\221k\021\275\353\3353\275a^[;)\2709=s3\372;\020\253\207\274_\r\014\275\253\226\024\275\262\314\302;\206e\213=\376Lb=\316\327\244=\345XB\274\332\346V\275\006\021\177=}\242\305\275\374W\333\274\205\210\364;va^\275\030\366\277<\273\226\245\275\301\245\351;\325\367\177=\t\323\026\274\\\013I\275\002D\302<\r\302\027=\275\210\024=G\321^\2753j\322<L]\001\274\337\374\200\275\002{\277\274\321\327N=\302\264\r\275\367\343r;4!u=K\347\207\275jZ\352;yN.=\027$\350\274&\2633\275\352\334\224=\207\241\006\274/2%=\227\314\211=U\341\021<}\323\331\274\274\377_\275\032F\240=\265\343B=2_\310<6F{\275\315z\014\276\030|9\273\347\200\257<p\257\220\275\361G\021=\342\230C=\320\204u\275|\030k;\341\315w<x!\007\275\211\375\240=\303\234\022>c5\352<\375\035\301\274\013\312\022\2741\307j<(l\230\275mc;=\207\326\260\274h+f=\r\330$=~\\\020\275\254]\022=\206tW<\356\252\013=\202\323w\274(\316\302\274E\230q\274y$\002\275\'*O<}u\242\274\355,o\273+\000\355<\216?0\2758\rR\273\201X\222\274\211w\227<P8B=\242\217\r=\306D\351;\311v5=\326s\244\274\331g\372\273\371|\222=\227\265p\275\213\235N=X\202\316\272\367\274\314;\355]u\274!\325H=\021\r\300\274Q\033e<\323j\230\275m}\251<\007\257\213\274s\211Q\2757L\276\273\304\363\215\274^\216\017\275L\275\027\275\377g4\275TM\214=q=\215\275\260+^<\311c\033=\271\223s<\031\033\n\273\t\203\202\275\307\240\335\275\227\262y=\000v\372<{\005L\273\214\213\247<\231\021\241=\262j\245=\2168\363\274\031\303\212<\276`\314\275\213\006\242=\331\035K<\365\033\223={L\222<T\033*;+7\256\273\204!\215=z\323\216=oo\004\275^\004\032\274\220h\334<\302o\205<\344\021\020\274\203,S\275\304\324.\275\262\252\227\273\240\351\310\275J\261\006;\005\t\206\274\0353\034\274\325\t\314=\327\243&=\000Y\014\273\352\277$=\324O\037=\350\315M\274ZW,\275\322s\013<z\247\316<\335\352)=(G\302<\246\322\026\275\311\023\316\275\322\223\233;f\206R\275\345\010i=\251\245\341<H \263<!\005^=\350\257\362\274\3643\006:\'\301\204\275\241F\301\273\272b\010=\345\274{\272I\341R\274a\257\210=3\3359\275j\260\023<\303\316Z\275\274A\024\274\324\376\016\275\261<\252;\315\247i;4}\275:8\357\031<\274\361\214<G\261?\275\212\251L\275\031\207\002<_\232m\274]\354\263=h\214\200= \255\250\274TL\363:\260\242\213=\277X\226<\026\340\365\274\224\205+:\tu&\275\312F\322<|k\030\273\"\2675=\027\021\005\275{\'\017<0e\353<\017\253\036\274*2:\274#\252\222=\032\317o=\224\2218<\275.\340=Eh\031\275@\376\275\275\211\264\254\275\341u\224=\326\026q<\241\t5\274\336\342r=\2522\327\275U\335\257\274v\020;\275\007>%\274\010]\255<\014\027Y\274\203Z\003\274\035\265\007\275\2653\226\275\225]\201<\316\347\222<p8]=r\347t\275\334j\212\275\371\355\202\274~\331\204=\227\321\034\274\240\014\250\274\235\336M<\3223\036<f\246\245=\362A\272<I\013\334\275\"y\020\275\312\205\353\274,\237\233<\365J\037<\217\316#\274e\330G=,\033\210=D8\273\275\262\353[=\335\034\213<\376\346\246=6Z\030=\027%Q\275%\325\327\275!\313\335\2757\177\347<\314Ga\274\362\016\'\274<X\236<4\351\304:[\307\271<=g\201=\031\016c\275\314\016\023\275\213\036\004\275\207\036\310\274E`T<\004\363[\275)+m=\257\364\210\273\206\322(<\n\336\222;/\020\244\274M\244\213\273\225\016g\272&\220\334;{o\017\275L\026*=\337@\021=\3721\017\276\255\017\376\274Y\315h=lCP<%\2105=gd\226\275!K=\275\213q\354\272\204Gb\2754\0177<\005\342\301< X\034=\037\ti<*G\t\275EbT=W\263Y<7\324\033\275p?\007=\341\236b\275\317&\216<\342^\316\274\310\201\262\275x\266\274\274\r.\237\275\245G\363\275u\325f\274\245\371\343\275\006\221?\275\240\374\027=3I\224\274\337\207\261\271\356\003_=\2504\277\275W\234m\275\251\234\347\274\263\311\306=\003\200?<\260\033=\274\024\251\224\265M\370\026\275^\031+\275\257\357\374<\\\255\325<\271\277\363<\310o[</\367\234<\371\366^\2759v[\275LzJ\274\251\347\346:\010\352\332<\202`\222<4\203\006<\337\370\313=Tb\264\275\022\372h=\3554u=v\023\337=\241\2533\275\236\324\177<tB\217\274<\377\225\275\341\016\271\274\303\225\030\275\314N\177\274^\006\037<)\005\220;c\2447<\252*\355\274\002\363\222<H:\n\275\024.s<hY\013\275\013\323a=\302\355\"=#-\225=\306/!=\236\337\004=#\240\243\274\262\341\001\276\373\227\277=s\235\304\274\2040-\274k\020\244\274\237w\035=\024\320\247=\205\020\235\274j\275\200\274\036\3702=\301\027\226=\002p\317:\tF\205=N+`\275rq\205<\203\'Y<0\031h\274\342\201\226;\351\252z\275\227\342\206\273{\332\020;\236\362\242;\374\2235=[,\277<L\2560<\330\256\3329\024W/\275\204\313\207<$\321<=4\235\304;\376(\262<\206\300\020=\356\234d=\205^\223;}uV\275xc\002=T]\202\275\226\232\037\275\325\230!\275\313\341,\275?\025\024\273\002\323a=V,H\275\276n/=\321\207n\275\250\2220=\342)\357=\263K\"=%.\200= :\355<\306`\000\275\362\034\364\274\360\240\007;\341\260\261\274\027j9=:F3\274@72\275Ja\352:\261}N=\346\305\215\274\311\212\016\275\305\020\302=\307\266\014=\253\220\021=\037\273\314\274\337\321\361<\233\025j=\311\270o\275R[\236\274d\023\267<.4(=\315v\305<\342\267p=\327\373_\274\230\305\215=\310GF=\330\332\025=$\340r\274H)\202\275\257*\231\275\362\361\251<\363)\231=\240\245\225=\214\214\007\275]T \275\212\273\376\274\322\212E=\360\244\262\274F\270\021\275\254\304\033=\316\310\2139\311\255\204<\267\341\033<T\022\357\274\336H\267<\326|\347<\002c\217\275a!\205\273\2772\006\275*#\223=\330\206\225\274\332d\215\270\367\300\177=\220{\226\274C7\263;\373\233\371\275m\002\370;-,\335\275\331\351\210\275\364\210\271\274\234\321\276<=\357i\275\243x\201=\207\027\004=x\276\034==@0<\'\346?<c\300\002=\373H\306<;\013:<\001\233\307\274^O\245;\005(g\275\314\304\247\275\362\320[\275c\357\273<M[\025\275P\312\255\273\320:\247<\200\003\240\272\341*\017\274\264n\360<S\204\243<2\023q<Ev\032\275\023\037-<\241r\205<\350@/\275%\347$=D\224\222=f\214)\275\341\204\261;\364\2458<D$!=\331\353R=v\233 =\231Z&=Z`Y\274\342v\026=\321\022t<\306f\354\274%\320H\274v\363~<=#\032=\365CD\274&t\204=\256XX\274\264S\226<T\235D=L\226l\275\317\265\275\274\020\023\226\275\266\244}\275 \035\210\275w\016\220=\235d\355< 3{\274\r\354\220<l:\315<\325\317\230<C\266\352\272\232y{<\3173R<,\375\304\274(Q\311\273\320\242B\274\313\201\303<&\224q=\216\276\242=~\252\260<\0264\221\274\311,\220\275\023\363\250\275JGy\274?\036\206<<\244\233=\016\340\025\274\t\276\262\274\316\323\372\274rP1<G\343\240:\002_\n\275\372M\265\272\334\020#\275\311\274L<\373\222Z\274\033^\217<\2540\013\273\324\303\237\275\274\330\353=\036\310N=_\007\232<o3\211\273<\362\320<\036yr<\316\351p=y\350Z\275\031\027\370;\005\223.\274N{(=B\307\022=\225\035.<\027\353;\275\rX\230\275\371\037@\273\345\203\260\275\253\330\213\274\350\365\227\274\306\322\227\274\261\230\270=\304\0145=E\375\272\274\301\336|<\242\014\030=\303/\264\272f\233\220\274\307\377\266\274\344\177\014=0\022\004<\335\025\033\275[\033\361\273(\205\004\275j\242\255<v\375\234=T\350\234\275s;/=\327iD\274\311\3678\275\211\212O\275\261\242\247\272\305\350\227\274\274\314S<\020\267\023=s\377\257\274\275W\240=M\231+\275z\002\223=\ri\026=\323\036\226\274GFA=\216H\327\274\363i,\275_\214\215\274\213\3226=\252\370\t=\003\257}:\255\200\365<\220^\214=\207\202\275\273\020\274\'\274\026\347\367<B\034\273\273 \004\256;\205\213\246=-L\r\275\213\207\016=E\303\257\274\326\365\\<\310\030J;\332q\221\274C\266K=\361)\326\273\356\027\036<iJ8\275\215^f\274sC\234<\272\373\235=\337\003K\275\003\264\023\272Q])\275*\330S\275J\210\253\275ER.\274H\347\023\275(ZP\275`\205\207\2756\265\030\273\274\214\342\274*\334\275\274\306\233\356\274\357\361\234<+\002\373;\215\255\200\273\255T\027=\t$\216<^\244\221\274\034b\316=_\353\003;W\216\217\275\256R>\274\223\336\352<\216*\256\274u\016\\=l\003$=V\021\250=\020\202\023\275xp\005\275\024k\2148PUi\275^n\355\274\220\254\257<y\\\275\273>\331\013<\271\303,\275\013\207\235;9\306\262\275p>9=u\236\021\275u\006\274\273F\2178<\246\334\235<\362\217\003\274,\252]=\002\r*\274\247\0336=grS:\r$\024\274oa\254\273!\245q\274\203\225l\274\344\026\247\275\250\211\270;\375+f\273\256[(\275\204\372\307;\270~\254<\324+\355;&\026\243\274\332R7<\277\035\273\274\2721\232\275\372\2155=)\267\235\275\0379-=\213\201e=\353\373\324\274qPm\2747\321\306\275}\344\204\274\003\374\000=9\355\006\275\020\374\267<O8\233=\277\230,<\023Zk\274\312>\342;\\&5;\021\240L\275\234\334l\274\210%W=?\024\275=(\302b\275\250\031\277=\233X\037\275\207\204d=6\212\264\274\375\031\002;-K\033\274\371\2570=\225]\305=\224\231j=\222Yd\275\371\332\277\274v\234\002\275\t\323R\274\213L\237=\013q\022\274\303\222:\275\206\341\245;\300\224\227<W\r\277=\257`2=\255\366\"\275|5\216=\347\024u\275PfA\2745\007O<\322\265~\274*\206\202\274\226z-\275H\321\002\275\263\316c=\357_\235\274#\372G=\246\372<\273\037\233#=\214\300\300\274\305\237\n\274P-:\275 \230\236=S3\270<\034\007Q=\246*E\275\345\354\315\274\000L\024\275v\364\350\274\321\355\032\275\336\021\374<\375^i;\364\3707\273\236\304\214<\334\210\204\274\232\006\306=\326\230\365<.\215P\275-v\006\275\0007[=\022\363d\2742\000\'\275)T#=\356\207p=\022\226\352<\357\2228<$H\321\275\037U\273\273\306\ng\275Xi\205<\251\352X=\367\205\010=\311\\\271<\347\262\220\275\262\330\231\272e\t(\274t\013n=\254]\302=\266\233)\273d\000d\274\\\273\202<< \367<\216\303p=\237<\311=\234\n@\275\267[@=\326E\203\274u \353\274\204.\010=\211r\255;\276%X=\310\216\022=\326\321\363;\317\\6=\027\325K\274p|}\2753\307\005=JY\300\275\337\236\275\273h\\\367\274\210&\373\274\3442<=\2174\317=\272\000\240\274\342j3=w\377\217;fP\326\275\336\217\201=9\352\270\273\r\243\332=7OR\2753\220\314<\345o\240\274\352\031\027=\016\\\363\275\034+\276;0:\007\275\220\365\361;\035\2740=\276\025\034=\332%\272==\367&\273\004d\302<)\r\321<\336\351{\274+\007\223\274\003\245\032\275\2553\003\2758qG=r4*=\272a\362\274\377\336\242<\222\224m\275\032&\340\273\035\203\357;\303OT=\315\264h=d(P\275f\346z;\365\252{=\\\240\265\274+]>=\303\323\264\273\226\371\325<b0\254=B\220\035=cZ\303\274\374?\212\275LG0<F=\014\275a\311\273\275\212\243a\275[\316\236<\322+\205=\200\316\335\272\004C\262\2745_\233;\271F\304\274I!\342\273l4\340;\311\333\205=\303\261\025\275\006I\304\274\317\337\n\275\214\271\034\274\014\263\275=\2059\n>+\372\005=\277\364\303\274\277\242d=?X\000\275G;;\275\325\275\324\271\300c\313=\261q\355<\017H\362<\241\323I\275\2610I\273\253\037\227=\321<$\272)\256D\275%>\236\274\002f\022\274\266_\033<*@f\275[#!=]k\356;B3\210\274E\016\256<\352\013\242=\275Z\246\274\025(\206=r\232+<\351\314\306=\013\177W<w\220X\274\352D\022=\215\240F=Px\335;\205\256\265=\027\026\237<\202E\226\275\374\2620\275/\365\223\275\374\374?\274\232\270\005\275\202\233\321\274\365\355\266=Q*k\274m4\027=\321\302\277<\242\345~=\004\025z\275\252{\216;|8\202=\353g]\275\030\300\302<\335{Y\275\326\372Q=eJS\275\242\362!\275\022`1\273\310\214[\274\357#H\275j\311\371\2740\017z9\020N\232;G\332\\\275\270\320o\275\217\304c=>H\305\271qy\303\273\353\324m\272^6\037\275K\313\\\275\036\344^\274y\023[\274p$~\274Y\347\024;a\371\303<\362\301z\274\372E\010=\246\255\177\274\250\224\217\275\372\355V=\030\000\224\275\023\315\213\275\006\345\024=C\307\004\273\211#\326<@uI=\315+2=-\023\363\274\3546\266<<.\374<@\225\327<O\251\030\275\312zS<\257\275\356\274R\002A\275eD>\274\302\314\022=(Z\270<QK\237<\371\230\246<B\202\221\274;\213/=1&\220<\365`\356\274\220\363@<\022\003\211<\321\311\353<\242\254T\275>\333\207;\306S\014\275\344\367z<\223\t\260;\241\316j\275\365(E\275\245\207<\275j\260\004=\326A7=\230\377\001<\016$l\274\355\332\027=A\233\243\274z\226\013=\346\317Y=3\374\204=\221m\354\274\346\272\311;cq\026\275D\002i\275\331\302]\274\034\r\270\274^?,\274:*9\274\210\261\200\274\343TP\273\262\361\216\275\t\177\036=d\360\312=F+]<\'f|\275i\206\026\275\337\232)=\332^\346;\211\020\007\275\357:E;\206w\261\273g\241\327;\214\255@\275\245\263%\273\274T\307<\221s4=\363\355\352\272\330wA<$\253\257\275s\025+\275\204\361>=\325\246\025\275\201\374\224\273Zh]\275\367(\226\274\330\224\252\275\014$ <4Z\252\275\221k\017=k(\341\274uT\202\275\233\030^\275U\331\262<x\201\270\2743\233\003<\0309\031=L\2707\275)\376\310=\2453\346\273\271(\300<\234\233;<#\345g;\336\226\200;\262\233`\275o\347\225<%Dy\275\363\361\032\274p\277\006=\244Vq\274y^\224\274\016\327\032=R\022\006\275\255T\030\275\255\275q=\376<\371\274\335\337\241\273OZ6\274\236\215\346\273Pb\026\274\307\264l\275\342\330\"=C\361\373\274\rb\320<O\003{=\200!{=n\344$\275\356\321\277\275\001\265\374:\014\221\025<\245l\002\275\352\227\275<\245\344;\275s\300]<\202\034\374<(t\343=[\340@=n\032\331\275\024s\252=\035\325\304\274\243>\332;1\302 ;n\327H\275\324^G\275#o\203;\217\215\336<R\331\030\274\200(\374\274k\321\207=\211>\300<\034\200\024=X\005\225\273\237V\225=&\264w\275\263\340p\271\357}5=\000]\n\275s\234\207<\324\021\252\274\221\305\271\275\203h*\275\032wi9\004`\326<\346+\204\275\2401\244\275\032\231\203\275\311\226\302\274d\360\274=\013\013\220=\364=\262\274\271\202[<\211\344b=\231zL\275}\351\331;\031\366\001=3\316<\274\266\216\365\271\271\310-<\017S\212\275\032Lt\2756\213Y=\335\222\372<C\273\235<1\034\213\275\271c\337<\034\211\240;\254\346)\275\223\275\222=<\023a\275b\034\254<\300L\030\275\240\032\215\275\241\241,\274\001?.=IL\351<S\373C<\254\302\035\274\177\026O<!H\346=\226/\027\275\335\363\203\272\226E\245\275Zq%\275\021hb\274\'\225\026=M\335\377<\351\262(=eO\030\274p\350\216=$\252\022\274^\260}\275m\320\252<y/ ;\014\307\374<\200\3437=<u\270=\236c\222=\370\335\252\274\242\350\003\274\310\037H\275\235\232\016<N\033\203\275\275\244\020\275\356{\320=\315\377`\275\235\203\272:\335\276\227<\032.\373=\233\027\252=\323\367\247<c\314\231=I\177\323;US[\275\335\270\237\275g\324\004\275\271\356d=Pu\226=0\021\346<7x\222;\2250\302\274\376a{=\344\332\240\274\373\202W\275Ij,\275\266\343\263=;\017\327\274\232\272\250;GR\343<Cv\370\275?\n\257=\010=C\274\014\360(=\306\205\317\274\302v\252=j\241\343<\224[\314\275\300l+;nd\335;\022>c\275Pa\260\273\\\261\320=\361\223\303<\312\253\202\273\252\275\217\275V\321*<\374\264#\274\375U&=\274b\006=V\314L\275\246?\237\275\013\256\234<Z\265\333<\035\272$\275\032\205\356<C+\317\275\365\022\342=\223\313\377\274q\305m<%q\006=\013\335\236\274Q%\035=[\241\253;0\332\346<G2\304<<\203~=\001\244\202=\203\266C\274\3773\375<\034\345Y\275\'\307\031=\025\034>=j\t\213\275\224i\334\273:5\r=\344\2222\275D^1</\363\336\272V\334\353\274\r\343\200=\024\000d<t\311\270\274\277\276\235\274}\261G\2755\261<=\362\000\304<f\230e\275\241\304}=T\360,\273]\364\220=\020\365\r\275SgO=&\346\301\275%JG\2755\2139\274`-z\275J\232\271<\022d\354;*\213\300:\256\276K\275z\307\204<\222\363\"=\005\377k\275\223}\203;|]\326<:\233?\275\r\272\331<>\317\233=O@\236=\376?)\273\032Zo=]\321\246<g\204<\274\352F\250=SA\020\2757Ca\275\362\024W\275\332@?\275$\265\032\275.y\206\273e@\220<;1\n=\306\353\225\275B\360\312;\212\004\203<\364&s=\377\017\004<>\347\247<\267\371\006\275kI\375\272\236W%\275uwn\274\276\"\022=%S\004=Q2<=R\366\003=n\3172=K]\305;Y\026\021\274\001\347\227;\306C.<\265r\355<&@\031\271\274\034\353\274\3308\375<Q0\355\273\366\361\223\274d\250\207=V\344\221<\004a\032\273\214\037\374\274\216\006\206\274\315\017o=\nUn\275\352\337Y\275\353\014~<14K\274\270\366p=9a\221<6\351\005;\243\022\220\275o9_\273\362\317\203<]\032&\275\353\314\220\275\215\3625=\343C\000\276\312t\014\275v\257\202\274n\326\235\275w\247\356<;\307\014>)R\324<W\237\357<\210bj\275T\236\354\274\373\252\327<\235\2022=\204w\244=p+\364\272\373#\337<\237\367\021\275\034\310\372<\255\216e=\024K\204<\270\027G=\371\t\352<\377\325\n\275\234|\030<\316F\271\274\312\375O=G\273\331\275\032\214}\275\377\206\267\274\313X\001\275\022v\020=\236\324\367\2748\352\004=\367G <\203\210\362\275x\377\024=3\257\207<\353G\326\273\367\370\331\275,A\201\275k\343\213\275\261@+=>Rm<\242\306\237\274\225\217\334\274\'6\244;\315\003!=H\r\316\275\366M\276\274Yj\020\274^+\024\275\000\376\365<\272X\351<\303\316\000\275\250\366\223<\345\3145\275Yt\257=>\031\200\274}Z\241\2748\325\034=\023\017\033\275\375\235\r\273\205\344\310\275\024\326\306=\252e\210<L\2327;\271\313\231\273g\264K\273\341|\250=\0301\225=\232\364\024\275D\006=\274\327\2663=\343<F\275T\307\202=\035\347\'\274&0A=\251\007\317\274\363\313\310=:V_\275F\276\227\275\277\013\247<&\246\311:\347\371W;\261\317\"=\3727\021\275\276\375\351\273\007\206V\275\323n\177\274\211\033\311<d\267\266\274@\212\260;#\017\300\274\225\"\n=\344\224\320<\341\224\235<\327\227K\275>I\237<i{\233=\030\212\270\274l\313\205\273`\376\014=D\377\230\274\'Z\270;r`\211\273\355\370\034\275#\353\375;5\257+\275\004a1\275\211\n\220\275@\253\267\274\363_\222\274\373lp;\252\260\201\274\203\033\032\275\247\205\226\273m<\205\275\264#\312\274\234\034\237\273\254\035u<\275v\213<#\3162=\300\206j<x\273k\275\032~\016=\024\320\200:\371\010\021\275\243\376\235\275\003\352#<\233\330\273\275-\317\027=\347\250y<\374l\242\272uD\020\274\213\033\n\274?\217K\274\357\211n=\374\3101\274u\013\314<J^\217=\220\363\303\274\373J\005=\024\251$\273t\223*=3\266\263<\341\271\266=\225,U\275|\334h\275\237\326\303\273\362\235L\274\244[\233\274\010\344K<}\202\247<\020c\226<}\r[;\244\032\262\275\262.9=\274\227\241\275X\275\356<\247[\":\213\236\300=\034\367\233;\031\267R=\330\325\022=\302\224/=`1 =n\016y<e\235\315=\372\236\n\2751n\274\272(\013\237;&\223\355\274\3210\350<u8b\273\277\376\t=\336 \231=\363\226\201\275\343v\315\274\3112I=\010\364\304<u\021`\274\005\220j=\321\343\274=\316\203\014\275N!\013=\340\205J\273\245D\200\274\321\001\016=\222\3470\275\034\206\341<\303e\204=\342\242`<}\370\"=\3529\274\275\354.H\275\2752\205\274\317\205\"\275\034c+=\375\034a\275\033JU=g\3412<\323\006\245=\367\337\237<f\033\t\274\313L|\275\346\251B<\247G\260<\357\273\356\274\214g\213<p\344\000\2752\3027\273\255\3033=\222\333\027\275\177\343\252\275I\255_\274\272$\217=\301\272t=\305\'\004\272]\305\257<-\247d\274\027\271X<\362Oj\274wq\331<\230\301\030\275pAp;\324\277\302<\365\311R<\260\275\213\275\337\223[9\036\324\327\274\360D\340;\220\\}\275\210\262Y\273\344\017\'=\017\266\354<\n\265\305\274\322\202w\275\"\000\277\275M\314\251\274\324\032o<\234\177\013\274\223m\264\274\316I\204\275\204\r\205<\257~\213=-\021~<D\"\260\274\226{\037\275\3251\332;?dD=\354\370\n\2759M;\274\374\246\014\275\261\014\316\275\257\337\377;\022NR\275\021yO=\004\241\357<\263i\002<:;{\273\266\270@=\326\204\275<\337X\320;I\246[<:\263x\274\331{\204\274\214\327L\275\024\253\216<?\255c\275,\302g=\364\030\361\273]\2136\274\224\306j\275\270a\021=@\322\004<l\245a<h\213\':\261\364\212=e\264\206\275\025\312\227;J\344\216\275{\265\033\27593\273\2752\335\310\274\312%\311\273\256\334\002\275\213=|\271&x\227=}\325\362;dL\005\275\345\023\005=\273\250\274<\313<\345<9t\342<\341\021\035=\374\007\312\274\027\253\226=\373#\002\275P\270&;\351\227\243=\273\354\177<\306\3219=\033C\207;\272X\215\275m(\211\275\377\337\327;\375\017\322\274\217\244<<\312C\030=\347}\230\2745\2423\275\355S\234<\240y\350<=\374]<\355D\r\275\232\355\007\274\301\351q<\027\2547\274\026\275\r\275\201\376\270\274z|\245\274j\350o\275\307\273\236\2749\344%=|\261\236\273\027l)\275\330\251\036;\315j\205<-\025\'\274\336LS\275\313q(=\244\237\236\274\204\223\315<Z-\025\275\204\266\215=\203\204\370\274\241T*=0\302C<E\337t;\312\203\357;\376\257\247\273\350~\021\274\262\230\307:(\372\204;<\250\026<(H\364\273_K\251\274\230\223\276\273$n\216\2757.\352\274;\332f\275\214k\225;\267\255\335;\r])<\371AY;\2524e\274\017\r3<q\005o\275i#\251\274\373Xh\273\214t\232\275\023N\237\274\356i\021=;!\024\273n\351\341;\356\214w=\357\342&=\353,W\273\000\316\\\275\245#\025=K\271^\275\2765\220\274\266\3235\274\322\356\270<\332U\312=\322\260\313=\221\210C\275 \277o\275.\375l\274\202\203~=\177\n\255<@\037\244=\216\331\007\275\032\270\013\273>\245\024\273\315)\300<\305\273;=xj\310\274\025De<B,\314<D\365\361\274\256\363\230=&\313\231\275lT\237\273\220o\027<oF\304\275\272$\367\274\204N\266\273PO\212=\253\206\225\275Ii\025=\226d\303\275\207\033\240;k\227\273=\204\240\265\274\236\026O=\000\357\021=\243\006i=nq\334\274\316\216\001\274\333\325\t\275\362\253\227\274\230q\031\275C\221\376\274\222\261X=\026Z\342<O\331\027\275\314\273R\274\253\227)=5\003q\275\233\200\226\274\277\261\014\2758nz<\275\207\310<\251a\360=}\036;\274U\211b\274\277\026\247=\303\276\261=\333\365\305<@\027\371<\031\246\303\275\3327\360:\360;:\275\017\335L<G.\177\275\017`\241<]h\234\275\000\372\023\275\030\005^<\205\315\316=\355S\026\275\366\340\227<h\372\r\275X\366$=\276\276\240\274\377\0145;\252A9=\342\201l=\351=>\272n\262\311=\310\352-<H\000\364\272;\347_\273\316\252\225<Z\265\245=\032\033\247\274\360\235\032\275\211r\017\275_U\367\272\364\nL\275\036\225\211=\002\220\010<(\215\t\275\034\215\236;F\213\366\274{=G=\346\351\021=\225\010\231=\236\205\005=H68\271\274\3365<\270E+\275$\342\007=B\302i<U=\321<\252\026\t=-\313@\274\353\245\360\274\334\300\224\274\253\341v\273\003V\207\274\213\252\236\275\257&x\275\207\263D\274\3432\300\273\361F\340\274\327U\252\272\016  \275t\275\331=\340\312o\275\014\264s;p`&=\331\214\201\274.\351\243\274Vo]\2745/\203=D\250V\273{.5;\335\234\221=\315E\210\275a\320\177\275\007\342\225=\215e<\275\236\322 \273v@M\275\0135\222=;Bt=\231L\375\274\205\313\007\275E@%\2732\361\340\274~<\026\275N?\247\273!\020&<\301}\355=\260d\017\275n\356\250=\026\007\3359\347\222\007\274\014\201\313<aK,\275\356\n\323<c\372q\275\354p\321\274uj\251<\016\345\244\2750LE\275S\317\016<\350\337\340<\321l\027\274JJ(\273\342\3101<|\350A=#\271u\275\3010A\275\242\313K\274!P\353<\347\221@=\250\214J<\0019\346\274_\231\203=\374\027X\273B\034\205=\206\274\225=\216q\267<[\245\033\275pz\212\274_\311\216\273\375<\202\275\005)>\274\020\272\n<*\020\r<\332u\372\274vx\346\274\2165^=\320\330y\275\262\377\025\275]\277&\273lb\242:\323\264\215\275\332n(<\223\373r=pn\324\274*\242A\275t\321Z\274\267P\035\275\321\"\024\275\306<{\273s\250\374<\254\237\316<\321#Y\274\230\303\260\272j\206\305<\r\217;\275\262f\374<\331\036b=\307H\242\274\251\036\366\273\363\376\226=(9\033=\364t\204<h\343[\274\213_\247\274\250!`:\031\363\005<9\320\003=\021\323\'<\351\277\375<\372YN\275\020v\332\272\352\016>\275\354\231\277<\333.\177\275}\023\024::\271\002<\241\256\332\274\2171o\274\303\010\037\274\332\245|<#\307\020=f\265\222\275\265\0074\275\321&\013\275\025\357\225\2756\325-\275K\266\333; \025\235;\036\366z\274P\202\311\274\375\360\277\275\212\005D\275\260\2444\275\373\241\373<\207\255/=\204m\252\274\3133\026\275I\336\017\273\200\250u<v2\244:+\360\037=k\234\322<\256j\223\2731?\252:\222\223l\274C\030\254=Y\3614\273\312*m9\261S\243\273\324\216\243\2751\204\246\273\331o\204<\201\353\234\275\312\013\205<\314y\251\274\362\317\350\274\327\246\236\275B\235\234<\003\212R\275\354%\007<\240\017\031\275\350\222\010=\377\373\027=\245\202\210=n\370\002;\303>\204\274hB\371\273\251q\214<(`\007;\2709*\275\2720\344=\370\225D<\2102\271=\363\361\215<b\250$=d\265C\274(\032\203\275\327\221\025\274\241\031b\274\354\3063<\262Y\033\275\200\325\352<\261Q\014=p\336\225\2741A\361\274(\310\245\275\202\002\205=53\365<\324\3360\275\226\3764=K4\365\274C\007+\274\000\235\025<\362{^\275\016[\222;\357\377\221<K\252S=>\031J=do\013\2741\257\303:\201\014\231\274H\343\340\273p\2627=\313s\330\273\335\216\023\275v\324[\275B\261Y\275\322vY=Q~\316\273\246&\001\275L\2122=|v\307\274\344k\316<\177\305\245\272w)\252=\355\267\231\275`c\035<\360\214\003;`s\223<GC\306<3%@\275/\245M=\373\3176\275\254\234\204;\203\376\217<\346\343\027\274w\353\177:\177i[=\304A\n<4\330\272<\265\240\255;p\234\275<\005\266\213;\216\233\212\274\371\227\223=AU\031\275\260\211$\275:0\021\275\263T\305\275\335\272m=b\364\252<\360\366m\275\002\305\257=\261\351\026=\347\371\246\273c\215\207=I>\235\275F\202\247<\256\026r\275\004\252f;/\330\020\275\346\320\017=\3065\213\275+\2349<\221\214\222\275\376Ap\275\026\017\224\275\205\371\224=\310<0=s\303\363\275F\234J=I\352T\274\240[\021={o&\274\027 \350\274[\354\024\274e\272\201=\330>s\273\302\347b\274\347\276\r=\020\364\022=\337\367\020\275R\222&<\333\333g\275\374#\020=l\360W\275\351D\250\275\215\345\302\271\355\013d=\033;\010\275\274$\365\273\317\334\224=|\347M=.\'\001\276\215\365\205\275\205\352\327\275\273N\225=_\262i=5U\217\275w03=\3366~\274\204s\210\275K\253\327\274\376|\304\273\315\267z=-S)\275E\217i<\203S\202=\014X\031<W_\264=\t\240S\275\024w\014\273\037\013\222<\n\037\031\275\240\213\007\275\340M\256\273\356\261\250\2742\232\340\274\202\037\004=\346b\270\273\244\365\301<\217i\034\275f\266T<\314-\311=\030\354\003>.D\001\275\000\247|\275\'\312h<\004e\267\275\216$=\275ti\307<\313$\232=i{\r<\370\207S<\205d\273\275Vx\373\274\347\217H\273\257\342o\2751lZ=\017fo\275\313\316\204<ho\211;\032F1=\246ZM=5\036\334;\227\342\003=m:\377<Y\346\341;\243d\351<\353\023\211\275\206\277k<\304\0372\274\326z!=\004g-\275U#\311\274\262\277^<C\335\t<=[\205\275\255\241\230\274\255Ea\274\257\300[=\302\024\210\272\261y\033=\276\254F<\211\313E=\017\316\r\276O>\304<e\315\024\275yi/\275\202/\255<\341\022C\275\211..=\013\277\210<w\364\237\273\225Fo\275|g!\275g|\242\275\267\212^<cB\'\275%\341\261=|\261\202\275\221_\237=\016\271\277;\244\037\256<\212\320\320<\023R\001;\355\020\263\273v\032\341<-\340\222\275\206\345\373<v\233!\274,2\235\275\236[(\274\344\202\002\275\344*\226<\322_\000\275\320\214\021=rpC=\034\353:\273\237\014\217\273\271\2518\2759IQ=g\260I\274\021\362!=\035\265m=\335Qx\274\304%\247\275\372R\313\274\331W\207=\255\270\253<\255\373\237\275\"\227\000\276\331\024\314\274\024X\342\274\014\"\337\2732\220\016\275x\311\201=#P\247=DN\222:\356z\242=\360\203\013<\237\253+\274iD\277=\360p\200=^`\263=\024,%\274\336H\222\2747\310M\273`\026\265<\005fO=\024%\017\274\340\347<=lQ\364<F6y=]j\332\275:\266-\275\000C9=d\350\374;\003\375\230\274\360\322\337<=\210\317\275\30022=\331\266\305=\262\370\316<F\017\207=\263S\001=\202\207w\275\334\247\232<p\220R<\347W:=\007\321j\273\010\206\213=\341\227r\275\351H3<\017\030\000\275\307>u\274\305:\200\275R\334\007<5+,\275#\346\r\276K\241\t;\343\346\002=w\322\304\273\327\347\301\275iE:=\364;\255<\013\340\343<\310\233\034\274\341\205I=\005\371$\275\230\263|<ZG\215\275u\232\336<\215\362t<!\232\220=\371>\334<~&\206<w\271\275<\345X\006\275\303\031\251\271\270\244\310\274\030d\377;\365.\205<\224p\255\274%\0078<\t\356p:\305\353\002<\211\323\241\274\251\262.=\200v\213\273~\304\005;x\213\033=\312\301\230=0\200 =\203\233\224\275\000\274\203\275\250\340\224\275\377v\240;\231\310\303<\254\"I\275^\266q=\2436\000\275(\364\336\274\371\237\227\275\202>\'=\255\313\243\275o\223\013<\262\340\205<*\001\267\272\263\377P=\310\264\031\275\350\207\212\275\014u\020=\313\"\310<2\344\322<\277\020b\275G\265\360<f\206\006\274\313\305\344<^\202\250\274\352U\016=\253\001\n=\353\311\300\274\354!\263\274\312\261\347=b\230=<\214\020\210=\346\231.\275\360&\223\274\371H=\275M\275\302=>\204\021\275\024KW<\035\254U\275q\001\001<\230@*\275i\333\244<\377\274\026=\234\330x:\336\271F\275m\033\377<N\356\366<\224\001\373\274-\007(=\215\235\205\273\013V\252\275y\207\224;\353\311\177\275\007c\214\274VR[=\257\372\262<\325\243\264=\372oU=?\251\005\275UP1\272\255U?=g\213#\275\021\210\207<\r\213\021=\270\266C<%\223\\\275\272\'\336\275(&\276\275Q\272\200<@c\254=\375\361-\274\373k1\274\005\256\337<m\313\307\273\231\263M\275d\222\252=\356\322U=K[+>j\030P\275\364\351*<.\364<\273\304s>=}R\n\275B\307\206\2750\"`\272\356%\'<\237I\177\274\212Q\314;\303t\2639\323N\200=}0\324<\342\371\340=qVM=\037\t2<\022H\215\275\376,\260<Vi`\275\267\200a=R\030\332<\235\2738\274\304h\251=d\ns<\303\335\003\275>k\210\275\375\024L=\231\0236\275)fb<\263\332\242\2745t0;\333\270N\275\032Zb\275\'\353\201;\313W\235<_\026\277\274\t\246V\275\242\2760<\216\305\330;>\335^\273Nr\265\272j\3313=\257\362\203;\016\305*\275\242L\017<\361xl\275\370UJ\274u\362&=\0371f<\216\236.=\226_<\275$\256;\275\341-R\275\352\352\310<5\300\024\274]\2066;\346|\314<c\260\236\273\230\240\253<-\222\031\2737r\242\272\327\230\364<\230Vs=\001\224\003<V\226\n=\253l \275\320[&\275f\212\226\275\265j\224=5)4\275\365g\263\275X\373\333\274q\\X=<\234v\274\217\316\313<x\341\303:\014a\332\273\031\035\245=F\230\t=y\204X=\333\016;<\377F\013;\337\014\326<\2723\037=6MC\274\255\231\'\275:\255\352\274\231\374\016<:D\230\274\272\r\225=\352DR\274\221j\345<\300Zz\274\216\204\021=y\rX\274\353(\272\2733\314\215<rx\372\274~\360W=\361\202\260=\362\354\214=@\305\231\274\210\177u\275~\226?\275\365{\221<\374\303\276\274Hr\026=\223\232\036\274&\340\037\275\203=K\275\252\370\030\274$ZM\274\214\031\211\274*2\n\275z8p=>\273\022=\031c\013\274\201\223$\275=d6\272\303(6=\370\3403<\227F\323\274\025;\231<aN\244\275&q\027;UK\355\272\261\262u\273\3625I\275\304;S\273W\354f<$\023\322\273!\236\026\275\373+\252=\007\027\251=[\314-<\212\005\233\274\224,\336\271\316\003\233<\2245\036<b\365\353<8<\216\273\344\363\234\275U0\375\274\300\026\031<;q\007\275\005\017r=\301\340@=OW\035\275\361\366\n\275\205\347\241\274W\205\034=\005g0<\376]\237<(\321\254<\340\237F\275\376\222\013\275\264\353\202\275\320\202\251;.\367\332\274\364j\246<\"\353$=iip=\014\263\'=\375R\240=\301\002T\273\211\037\306=\337\313\352\273\262s\003=\237\004\366\274e\033\212\274\347d\245=\241R+\274\342\236e\275\312\200\265\274\370\311H<\177:\216\274\035F.=\213U\232\274*Z\233=]\370\223\274\014\305\202\273\316j\034<\335\234\005\274\030\317\017<\240\270@\274R\3153<D\251\246<\031\272F=\026\nq=CJ/<\037\263k9\3621\314=\222\260j\274gCN\275\373\010\347\275>U\330\274\230\334H\275=\277\033=\240\'\017<\206\r\200<\223\016\001=.\261$\274E\220\226\275\322N\271;[\277z=\246\253\356=d\230L=\277\372\004\275\364@\233<\352\244\036\275u\200\014=\021\025\035<\320\031\204<\305\263\002<\rQ~=\307\234r\275\005F\033=\234\004\277\273g\326\024\275a\350\205\275\321\177\024=gS\271:\362\321\365;`\216\317;\365\245\361\274\3607\256;\211\220\023=\211\275O\274\2035\235\275Z\256\227<\005~\200\275\332\004)\274\322\203v\274_\335T=I\033\032\273\013AC<\037\264\371\274`\247\034=\227\021\202<\346\233Y<Q\211\252\274\305\344h\275m=\241<\347\317*<\247\205\023\275\270\320A\275\261\241\371\274\277\007o;\236\270@\275\001+\001=y\336\327<0Fl\274M:\247\275\333jT=\213\341=\275t\004\313;\305\267\354<\234\032N=gf\216=\006\342+=Q\304\241<\344H\007=\333KA;\364~\016\2754O?\272\002\\\025\274O\334\372\274u\341\350=\002z\010\273@\033c=\\Z4\272`\234\000>\263\367?=\320>\301=4@\257\274\365\2072\274/u\332\274\251\337\231\275k\340\221<B\213\222\274\270\030\265<\201\322&\275\226\311_\274S\270\272=\322\na=\353\223\342<\227~\243<\231\330\337<\233\323#=\3732\010\275T\334K=\257\352\031\275r\336\200=\177p\032;F\016\314\274\303\304\034=\245L5\275\252U\303<~\025\024\274d\343\354<\311\342\'\275\016j2\275\n\356a<B\272\334=\347\020\210\273C\234}\275\325w\373<\214\210\307<b\204\202:!\007:=\351\277\222\275\002)\026\275\203\t\321<Q\220*;,\344\035= \322(=\035:B=\326\030\230=UB2<\245\017}\274#`\245\274\357!\036\273,\272\335\273\037/\233\274\306f\355\274\242\330\312\274\357\007\'=_\216R\275F\213.\275\'$\003\2755\237B=Z\304\207\275\303\210\224\274\2518\032\272\2621\376\2743x_=\007\'\245\275W\030\031=u\372u\274\215\335\t\275[Q\271=\"\305t<\256\026\232<V\264\212\274\240\233\323:E\250\037=\203\227\254\273\236+\204\275\244Zh=\"\254~<\335\224\340;p\366\205=\232T\277\274\354\030%=\243\023%=li*\272\302\240\365\274\264?\356<\305\355\315<\\\277\002>n\213>\275\261\2054\275.\023\003\275j0B\275\327\027\013\275(,D\275i@t\273\317\031\366=\3518\265\273<\236\220=[S\217<wX\212\274\272dc=T\364b<P\236_<\212\226M=\332\342\212=jX{\275\323\276c\275r\213\033\275l\033\317<`\247\013=\274\354\237<\006\250,=\2736&\275\030\302\t\275[P\t=\222\215X\274\356\367_<\334\310\243=e\311%=CLa<\034 \306\274\022\365\207=m\343+\275\362\210\303\274Q@]<\327\274\216<$\323\340<\026m\337<8\207Y\274\205\241\240=:\365-=\000Z\006=\363\204\314\274\256\2379\275\250m5\275\250\256h\274\231\253\314\274V\301\201=\330\275a\274\233\033,\275\2474E<\374W\002\274=\t\006=\260\245@=\356\310\201\274\225\251\016=\226\336?\2757e\305=\271\251p=;%,\275G\037;=&0\'<\360\202\222;AH\207\275m\330\026\273{\002\207=\261N\355\274m3\3719\032\356/<\340Yl\275\2662n:\271\241\352\274\004:\372\274pB2=Z\220x=\255A\220\275@\331\026\275\224\252\367\274[\312\322\274\316\341\001=\204\3574=ETp\273t.\353\274z\356\010\274\316\034\247\275\304,\210=\333pH<\264a$\275CSP\275\203\332\223\273\230\226H\275\354\023\020<\037\254{=\030}.=6\3545=\247-\215=8\323\037\2743\nd\275G_\343\274\275Q\003=yE\321\274mC6\2758G\214=\251\207\t\274\240\360\026\274\033\230)<\232\354\373\274C\027\202\275\200\003\303\2729Y\026=\224O\003\275E,c\275\005N\235:\352\267\324\275\307\000\"=\331N\021=)F+<\300\207e;\361K\307\274C\210\361\274\246\320=\274x\024w=-s\354\275\335\177A\274\323\371y\275T\221\225\274\361\326\205\273\215]\354\2745\261\025\275}\'\342<?\341\211\274\376\246\007\275r\266\n\275>\001\256\274\202\304\324<\225:\203\274\301\030\r\275:\312D<\266\211\320<\316LM<p\212\231=\242Sc\275\267T3<f\356!=\341\347r<\343P\022\275\377\014\205=LJ\235\275+@\313\274\026l\005=9!\365;\253\243\261;u\303C\273*\237g=\027CR\274\n\241\213\275\377\242!<\270\263Y\274\005\007\324<\260]\"\275\372\273!=\367D*=\r\014\t=\316\325\221=\361\"Q=\204\270\r=\t\315\276\274\262x=\275\222\262\013=9\245\312\274dM\021\275\243\363\245\273\324P\t=\331T\321=\366\3656;\222\3370\275\272\306\325\275\301X\254\274Q\236\211\274\313|J\275\033\316\034=\221\211F\275\255\307\213<c\324\301<\306\265-\274\236n\234\274\334\245\216=t\030 \275cPX\275Q\355[\274\335\272\312<\333\022\002\275\202)0=\007N\035\274\223\177\026=\223;b<\247y\243\275\026~\303\275[f\317<\213\017V\275\263Z-=h\253\251:\356\252\207\275\3537\371=\303WR\275\325\275M<s\2239\275\200\272\270<\225\373I<I\013\255\274\1774\240;\030>\013=^\262\005=\307\216&=\362\027-=\340`\025\275F\262\260\275\013\343V=rp\005\275f\311\274\274O\365\023=C\207\274\273d^\350=;\372\352;/\342\377<3\306k<\006|d\274]\372\225=\032\235\252=\333x\305\275o\347D=w\237\362\274\227\002|\275G\214\277=\323l9\275\240\216x\275\230-M\2754\261I=e\202\236\275\203n|<;c\234\274\312.l\275\272\322\001\276\027Gw=\372\335\227\274\360\355\003\274\205\r\262;\237j\224<\tev=\266\263\037\275\013\377\245;\276H\023\274f\3310<\306p~\274#V\277\274oE:\275\334\256\232\275XJ\262\2733\330J=Xu|\275D\355\201\275(\272\275\274\244\201\361\274-\005\203=,\311\333;R\213\250\274\275\303\253<\017I\327\275\203B\255\275\210o\304\273\302&6\2755\023\270;oy*=q\232\225<\265\n\223=s-3=\010\020\244\2743\000\307=\336\000\"<\320\341\221\274\211\377\356\275\030p\013=I\023\t\275\237\177\211=\252\2774=*o\261\273\350>\266=S\257\356=\241\310B=\246\017\206;\226\222?<E(\207\274L\231\300<f\207\201:\276\244\345<\225\035Q\274\353\332\027\275y\004\217=\262FC;I\322V<\034\205z<^\236\022=j\366z;cL\251\274ld\214\274\217\273\3368\230\232>=\270_\312\274\300\200\025\274O\nT\275\363\247P\275\350\304+\275\322\\x\274\2314\240\275Q\017\276\274\210\037\036;\331a\013\274\227S\315<\274\330h\274y\240\"=\226p\245<\310\321\023<\023\345m\275\263ww=\024\007\016=.\023\"=\021\270\336\275U6\227\273\243>4=\365\314v=\'`\002=S\351\023=\306E(=\340L6;.N[<\247\t\036:\023\354\t\2741ua\274\242L\347\275jp ;\230\2077\275\212\350\350:\307\312\315\273\010\311F\275\010W\267\274{A\'=\253\205\321<g\3634\275N\226\216\2744]\246<\251C\232<YJ\201<\304n<\275\270\341)=\202\321\325<h\362\337\273\001\276|\275\354\343<=L\333#\275\224\341\220\274m\177\370<\333V\024<\213\362g\273\036\177\000>3\313\322\273}\021\177\274z\0076<\264S{=\277\311\224=\375V\212=$\211\241\274\366\303A=\303\265\241\274\351\341s\2752\313,\2749\312\025\275\\\216\264\275\227\371\231\274\312t\003;\001sh=\244f\224\274d\220\001\275+\304\022\275\210\331\330;\rb\271\273M\361\034\275R9\357<)\235\357<SO\351=} )\275\360\332\340\274\310\360\030<\257\016\r\274\224\214R=\223\233&\275\255\352F\274\034\343^<,\316k\274}yN=\330\214\222\274G\351\250\274:\311\235<u*n\275\213k\335<M\342\200<bAy;{L1=\224\023\367=\201\360 <\300\217b<\353\221\005=\206o\\<]\327\026\274\277\222Q=U\244\321\274\007p\020\2753\3103\274\376 F=M\333\016\275h\275\275<O\341\226\275L\314T=\315s\007=*c\317<\221+\352=\350\265\212<\002\"\323<E\014\340<\377)\247\274|\376?\275\366w)\275I\020%:d`\324<\n\263\035\275\352)\236\274y?\360<-\344\364\274\036\274\261\274\235)\301<\2714\250=\250$\320\274L\265\361<\327OU<\333EL:\255\250\013\275\025\355\233<\365\267\317<\350\037Q\275\203\3150\275*\024x=S2\214=\200,q=\302fx\275u\003\370\274\357\353\000\275\030V\007\275\313\315\277<\324\342\231<L\220\244<*\375\000=v^&<\002l9\275\251\344\024=]p\334<\251)\216=Tn\315;-w\203\275%n\246\275\207\361\200;\253\272a\274\310`\254\275\271N\236<\350\033\250\274s\343\031\275\367\235(\275\027l\206\274p=\305\275\267E\010\275[l\024=\030$\255<\003e\305\273\336\3255=\260\337\263\274A5$\274\3579;\275\334\203\237\275\245k\010\272w\'g\2740\270a\275\316\231!<\361j \275\355y(=\341\217S=%\006?=Q\274\022\275\224wn\274\343|5=69\036\272\364\237\234<\330\023\016<w\214\230<\310\312\273<\034\242\024\275\201\240\272<\324z\342\273\256`4\275C\032\273<\3563\n\273\216\007\345\274,\315\257=\313#\016\275Q\333\222\274\217M\347;\373\302\253<\342f <lz\244\275\260\0040\275d\247\267;\345H\006=\357z\266\275\325\367K\2752:\035<KB&<\030\233d\275\267\303\220=+\272*\274\214\327s<\256v/\275\200\351\031\2746\276\377;\272\004\204;\364\036\t=\322\341\014=\272\'\004=\222$\213<\376d\373<\325C\272=\023\325C\273O\010n<\020z\205\275\363\354\032=S?i\275\243\372E<\200^\361<\245\211\010\275\360+\273<\034\320}\273\224F\214:\203Ar<\225\207\2367h\034\027=\375\206y\271^:\243<^\243\217\275z\327\312=s,\324<\227Y\013\274`\222\'\275T{\306\273f;8<\267*v\275PiO<$\251\032=\306\370\001\275\223|\367\274xh\030\275\317\257\372\273\351Q\007;f\212\270:\264\0161=>#u\274\346:{\275^\362\025;\2474.\275\377\242w:\'\334\306<\337.<\273qG\353\273\336\346\'=\327U\250\273:.\203\274\205\301\307\273\277\313h:\2708\034<\353\252\210\275\337\236\265\274?\215\221<\367m#\272c\315\177\275p\r\341\274N\240[\274>ZZ=\264\3567\274\325H}=\276x/=\000\037\305=\330\377\276=?\034\267<\332\327\236=l\023\221=\220\036;<\023\333\374\2730\347\002\275\312\207&\275\353N\321\273\213W\371\2741X\203<[=\261\275\311yX\275\303H\234<\335<\034<\002w\270=\323\332\014\275\211\033r\275\245 \205<\342/\265<\034t\334\274\211\3622<\266\361\';z<\375;\325\211\214\274\244+\277<HCB\274\226\241\375\273x\363\237\275!\330\230=h0\037<\2154\317\274 \305j<\t\027\202\274\340&\023=\202\203\211<d;\301\274\310\247\214<\354\226\210=\024\226\024=1\034\215\274\266\"\335=\027\214\306<T\260-=\3101\246=o\364\226=\311l{\275\253\177/\275\272\304G;l\0075<\267=)=\224]\257<b\252\023;\013\334\251=]sX=\266\202\300<\242\276\272;\275\r\033\275Y!f\272L>.<\341\275\037\275\364\320\236\274\301M5=\037\334a8\007\255u\275j\245\212<\237\327\014\276\032\325\257<.\330I\274A\322\255;\252\r:\273\267,&\275\351\275\266\275\340\347\330\274\002\310\225\271\224\031\354<\315\234\317;tP\314\275\337r\214\274\241l\235\275\025a\005>\372]\327\274.\340\231\275pwY\273[;\371\275 \336\321\273\322\210\347\274\225\0340=\343[\350<\321\245\257\273^\036\251=U\354\033=\n\367\271\2744\246\305\273\376\013J\274X\r5=Ie\250\275\214\231L\274p\363\221=\037\341\033=\232f-=\235\2624<\255\274\016\2752\311\230\275\013g\215\274\026\266\020=\210\272\221\275\273\346A=d\225\226<8(M\274\333\241\022=\2264\232\275\210j\311<Ojc\275\320\314g<\345/\027\273\226\337\244=\034\233\014<a\274\236<SD\201=MCe\275\002\2717\275\000\014\242\275\"\270\020=MK\206=h\t\025\274D6\210\275\22523<\363\272$\275\024\263\022<lU0=&\314o<\255t1\274\202\305\340;\343\0100=\023\305b=\025j&<\200\227\235=\307 \031=\304i\276\274*($=\352`2=\216\204\247\274H\214\366\274\274\255\335< \326\274<B\2163=?\333d;x\t\205\274\206\272S\273\262\3441=nG\277\274w\024\031\275B\274\007<\233\307K=V2}<\317\221\212<\202\200z\275\207}6\275hT\217=\357\2632\274\322\206\016=\267\2152\273\316!\311\274\"\024R<\365\364\033=\023k9\274\r\252\262<\007\314\235</\253R;\001\312\003=|&\256=]\320\307<P\331\250\274\002\376\010<\355\001*<\222\230&=\340{\013=\367\327\314\274\034\"1\275l\307\030\275\233{\356\273P>\275=\321k#=\"\016\026=\224\r\252=\345*Y\275\255\301D=\300Da<\261{y=\014\354\\\274\254\032\023=#\210\377<\260\006\216=l\213\241;\014\020s=\023\363\200=@p\021\275\nj~;\256\312\325<J\000M=\376r$=\\\243Z<\373R)=\313\215%=\017\253\202<l\222\244<\244\275y\275X\362\221;Q\227p<\275\301X=Jm\227;\270*`\275V\320K\275\224G/\275w\225\203\272D\251\250=\264\373\037\275\256\241\245:\210\215z\275z]+\275V\260\024=\347+\013=\264j\207<\377v\343\274 \022;\275\231\317\027;j1\373<L\300$=\023\'E=\220\362\234\274%\222\326\2743j7\275\0328\354\274p\264\005=\216\2254<\332\361\277=6q\235\274\373\372\377<,\375\033=\232.\306=(\373A\274 t\322=\024\300@\275k\023\220\275,\001U\275\336~#\275x\243\311:XQD=l\215\273\275fK\204\275V\"B=\275k\222<\014\341d=79=<+\003\"\275`\312&:aY=\275k\013\007<\210\240\370\273\275\271\024\275\256\257(\275H\324\006=\330\302@<\266*\"=Ck~\274\017:\260\274\016\201U\275u:\241=\312J<=u\204\n\275\366}\250<i\230T\275\320\205\254<\322_\201\275\316\232\030<\234\037\302\273\370mR\275S\035\t\275\335\2573=\344\345\236<n]W\275\311\001\272<\351\335!;+\033D\275\313re<w\007\374<\302\211\340<\'\336\233<e\312\007\275\244\031\352\274\025\375*=\263\222\263=\003\333,=\245\352\316<,<\250\274\262\'\247=\220\374.=\365\353a\275p\355\215:\253qi\275\244@-\274\226\373t\275\245\361\225\275g{b\273\303(\330\275r\264l=j\t\203<]\3408=\t\351+\2742\373]=0\302\203\273\327\007\346<\340\025\036=\004\030\346<K\345E=\373\377\337\274\316\206J\274\025\014\251\274@\224\001\275\247\\\024\274\277\222\324=\037\304\030=\320M.\275Y\016\034=\300\013\010\275\303\235{\275\250\375\033=\215\347\327\275\022\302D\275\370\231\311<\225x\235\275n\325\032=%\205\335\275\224\021\036=\377p-\275|\267\226\275\266&\013\275c\226\211\275>\355\255=6\254\025=\315\327\317\273{\211\t=\342d,\274~\373?=\320\026\362;\000\326/=\237\355#=3\263I:\203\273\245\271\344~Y\275\013\272\013=\314\016\315\274\322/\347\275r\343V\275\347S\300\274C\304u=\340\203\311\272\345\214\342\274J!\'\275\225\331\336<\2551\360:\366k\324\273\033\214\220\274s\\\240=\017\223\023=\346Q\007\275pg\002\275\010O\364\274\026Y\n=\225#\251\2757\361\021\275\036\000K=\036\253\005=\252\353\000\275JX\220=\317\323w\275zL\177\275\316\324P<\361\233F<\353\213\323\275\213\363\313<Y\'::\213_\246\275\230\275\352=_\323\340<\332\232\252<*c\326;\\\031\211\274>7\302=I@\243\275\032\002\031<\3066\226\274\271Q\006=r\212\266\275\254 \213=wKw\275R\r\370\275\033\263\027=7\353\203\274\374\332\242\273\374\345\214=\377\377\250<\177>\035\275e\017\351\273k\351\215<>v\215\275\276\340\333<F\257\016\275\017\351\206\273HH\336\272\214\322\375\273 .\241<\017\230\006\275x>i\275n\366\346\274Y5\t\275O0\027\271\360Z#\273\2558\206<\356\353/\275\234\341\262;\243\337\210=2W\350\273\001\336\232;\225|\343\275\273{1\275\242Q:\275\306\222\263<3\327\364;D\235\233<&GY\275\353\260u<\320A\345<\014,\262<G\251d\274\300\300\n;u\260\251;\252\256\211<o\310D\274\340?\323<\025\025z=\r#\221\275\035\014}=`\255\201\275\370bq\2741\240G\275\347A\000<\027\372\255\274\215\275\020\275\005X\257\274nw\207=d\375(=\316\226T\274j\213\241<\3663H=\213\226\036=\370[\\\275\330\007\265;\354\355(\275\201\214\225\275(d\213=,\006V=\320\236\321\274H\254\374<\032\010\203\274\327(\366\274\224\026\\8\2032V\275\007\305o\275\267\263v\274Cv\227;\001\256D\274\302\330\205\2750\235\006=\005+s=F 6\2757\212\304\273\221X\224\274\276\031\025\273\014u\205=x\375\224;\033\353r\275\245\370\031\275zm\017=\355\234f\275\366B\216\274\230\313j\273J\036p=\302U\216<\276\254F\274e\024\275\272\215W\246=d\\c<\223\031a<\377\365\241=\326Eu=OB+=*b\006\275An\200=\327\005\033;W\336\243;Md\335;\002c\256\274N91=\206K\233\275\257\264\262;\342=\030\274\242\n_\274z\307:=\246\243\212<\002\366\300<\016\306p\274\221V\007=[z<\2750i\252\274\\E\326\275Y(0\275\323\243\210\274\027dN\275{u\363<\220\254\013\275\302M\353\274\017\225@\274\247\233\346<_\310\316=\363\276\241<[\231(\274\031\315!\273\003\310\221=\2679\366<\210\277\201\274\031\307\262\274\360\335\235\275\'\343?<\267\311\265;\263\327\302\274\235F\031\274\014\307[=\035\025\013=7$&=\016)\254<\226\212\023=\332\202o:\265\345\335</\252M=\237t\277\274\212\316\234<\262\356\256<\010.\365;]@\177\275\334\305\216\275\'\320%=\241\266-\2759Tu\275.Q}\274\245@\224\2757|\226=5\216\031<\033\363f=y\000\024=\233\263\346\274+\373\256=\345c\361<\374\031\223\275\226\031\025\275H\242C=x\356@\274\251\270o\275\032\327\203=\366\267\207\274\033\004\007\275r{x\275\302\024\356\274\315\020V<\346\256\357;\321\277G\275\034\376Q\275x\320\030\274\345G$\275\342\3116\275\001\023Q\274\313\274{\275\030Y\032\273\365B\3719\243\232,<\202\323\255=b\271Q\274\234\000\216=?\273!=/\266\220\275\326H\017<\315MW\273\345\254Y<\347T\345;,)!=\326\324\275=\241\n\211\275y&\021\276\215A}<<\245&=\341Z\232\275\322Si\275,\325\212\275j\214\220\275\3531\220=\374\313\302=cFP=\013.I={\351\255\274\021\277T\275buu=+\232i=\205\020\247\274T\346\014\274\200\031\213=\340N\360=\021{l<\035\032g\275]}T\2757\222\252\274SRT\274\232V\223\275e\020)\274\006\203\021=\224\244$=\276\232\242\275r+*<y\271A<XH-\274M\216\312<\210\344Q=v\335\362:\327\312\025=Z}B\274\024+\310\273C\030B;x;5=L\0250<3\346\236<\240`\312\274\000\365\253\275;\256n=)\264\003=\027\310\031\275R\332\037=_:8=\266\001\225=\27568\275\210\266\245=B\376\230\275\237D/=\3225\333\274\313!\321\274\332\3147\275\316\354D= \276\233=B\340\216=Y\253[;\222]\023\275\267\356\t\275\257h\244\273\037H\214\275!m\207=V\204,\275\252\323@\275\325\273i\275\330(\303<\246\331=\275\253\016\377\274\235\210\003\276\376q\206\275\256i\206\275aK\252:\363\026|=2\215\230\275V\311\213=\324\331)<\363\311\034=P\376\025\273\242g\233=r\001h=\335a\307\274\021\237\204\275\334\214:<\256\215\275\274\311#\013\275N\014\246;H\223\217=\316d@=\276\013b=\307/\251=J>\235={n.<F\207\331\274\204\262\017<\232\024\221\274\305\322\220<6\251_\275\243\247\001\274\326\237\025\274\315\311\023\275\264\357\n\275Z7b\274\226\230\223\273v\256%\273`\301\205=\267/\272<\256(\023\275\323\371\021<\276\345 \275=tt=a\204\212<\350*\223\275\033d*<\223JQ\274V\265\203\274\335\343\230=o%\377\274\035\037X\274\024\274\310\274\026\013\235<f\261\260<\273\303\222\275\343\002\361\274\300\334\233;\324#\216=\001\020\266=h\320\220=,\350j=t\266\254:\370\005\'\275\255\030h=\350\377\002=\034\030$<\376\273\035=\322-N\275\220\177\306\273\030q\354\273o\025\220\275\n\034\005\273\262\362\037=yRT<Y\316\243\275A\211\235<\304\357\204\275\325\207q;R\240\327<\326\340\201=*\355m\274\303\214~\275\001\375\017\275\352\034\001\2751XL\275q)\235\273,6\375<\033\350\310\275\023\272\233=4\313l\275\360\3201=\3439\037=\341\225,\275\362{T<\312\271\222<$\233\205\273\256@\"=\026\3746\275\340\252\036\275\020\274\350\272\327\025\364;\334\005p<`\251\'=%\267\252\274\220\222\244;\366A\332\274\330\305\302<\021\242\342<\2107\007=\213\307a\273\276\223\361<S\350B\275\3409f=\222K\204\274$\345\323\274\256z/=\351\240\014<\353x\032=\234\207\025=x\354X\275\356\264\341\273\240\022\233\275\303 \014\2742\364_=j\255\352\274\361N?\275^\233\356\273o!\347\275\211%\224\274\260\217p\272\257\354(=\317\375\333\274T\034:\273\373\366k;\324\n\246;Bk\003=\353k\024=V}\215\275=kG\274;Z\210<\243\t[;\221L\023<{1\373\274F\270\204\274\365lK=\206\013\266<\314[&=h\257\330\274\032\327\364\275\220\326\344\274\234\367\226\275k\244j<\036ac\275&\031\256\275\240\270\320<\302\357\255=\260p\\\275\203\005\177;y\2648\270/\001\013\275\315 \027\275f\305\317\273)\211\222<\2749M\275 W\255\274\266H\'=\313\360\257;q;]=<?\270\274\306\354\353\274v\266Q=J\272\207\275\376\305J\274`!?<rpf=\355\325a=R\374;\274 \301\351\274\351\372\242<X\315\016\275\2621\004\275w\206\031\275\256\013\216<\306B\025\275\363c\260\273\266\001\216<$\262\307=\n\346a\274 \336\233\273\220\240\215\275\204\305\206=\262\300\252\274\344\375\037\2755(\300=\207\376\303\274\365\r2=B\023Y=\335\206)\275\340_\226;\345\245\316<.\330d\274\226\217\315\2743\313t=\332:\264;2\t\027\275=;\"<\323\303\024=\367i\201\273U\212\274<.\031\336<\250\227\233=\322\331\203;}\000V\271z\025\327<^\016\251<o\240\313<\266\035f\275t\265\211\275\031^\377\274\333[M\2741\347t\274j\014g\274\027\342.=|\020\271\274\213\252\370<\363NA\274n\360\255;0\235\004=\2553\n=+\360\t\275\236\254\255;\226\240\315=\3772\210=\313\301D<j\242\361\274U\371\363\274\261\354\351\274M\n\225=7\324v\274\217{B=\213i\213\274\004`\025>\267\300S=e\002Z=` @<8\325[<\030\264\n=\336\274W=w\\^\274\242\3354\273\365\344\002\274\323\032y\275\211RS<\256{\331\274=5\354\274\246B\006\274l\252J;\007F\020\275\023\332\257\275\204\365g\275\022\027^={r\t=\313\253\310\274\337\2520=\313\275\222<\373\217\035\275\nt\235\275\r\261O\275d\261\317\274\277\205\217\274\'_z<\000\237&=\004\333\302=T\337z\2758\357\370\274\0337B\274\241RU\275H\216\226=\262\360\376\274\020\345\341;]g8=\235\330\207\273\273(\'\275\326\257\n9\004\361\000\275\364\034\016\274\330\020\240=\361:\303\275</{<b\232N\275h\217\023\275\216qf\274\225\014T=\324\275\006=<\346\221<\027-\322<\010W\342<\37531=\255\340\267=&\263e\275\306\360\017\274Tm\r=I4\247<@\262\'\275\336\242\2019\331^u=\315Y\001\275\327t]\275\351o\323\274\2000#<\014\016\007=9\363\235\273\306F\301<<eM\274\355/D<\022oS\275%\033\207\274\014FJ=1p\037=\244\247\265\274\345(/<\340 \002\275\022]\005=\2506\366\274&F>=\035\350c=\250?\337<Q\024\252\275\024NN<\034\026\362\274\241\306<=\317 h\273\020\001B\274\320\031\236\275\252t\252\274V\006\347\273\3437\265\274Fw\014\276\203\031G\275e\375*=E\323\245\274\335L\277<z\003\271=%\007\204\274E\231\263;\372.|\274u\0215=\r\017\200=2\\Y\275^\251\212\274\350 ?=\307\261\211=\275\020\014\275\315/\206=m\373\032\274\032\3263=j\360\221\275\335\365\306;\204\340\034\274\337\356\366\274{D\237\275\223\223\310<\254\256=\274\227\002\256\275\263\310M=\006}\341\273G\262\350<\213K\003=JS}<\031\237\233\275`\211\276<\200D\204=r#d=\200\256\350\274;\236O\275N\334\247\275Q\307f\274\302t\225\274f\377;\274QB\322\274\031\032\255;\200HZ=1\025\032=\270\252\302\272\024Z$=P%u\274%yN=\253\302\252\275\255|\313;\224L\016<W]\361\274LU\254\275\202J&=>:\214\274N\236V<\270\304r=\010\236\003\274@F\006=I\234\026\275\214\210r<\nb\014=\225\353d\275[S\276\275\022pf\274]\275\251\272zd\216\275O\376\347<\230 \021\275\341\243\"\275\030\021h=Z\357-\275k\312M\274\260v\375\273\035\370;\273k&\270<&v\207<\200\207V\272\270\231\315;%\234\257\274\221\252H;\235X(=\376\203\231\275\310)\307=\301c\367\274V\313\276<\005\374\230\275xM\030=\017d\224\275\35684\273s\226p=\365f==s:\177\275\243\207:\275\221\274[\274?\026\370<5\324c=S\343\013\275\000)\254\275W\274\254\273$\345/\275\252\247\250=\'b\326\274\010Q\323\275\016\340G\273(V\331\275\371\034@=N\245\260<\363\005_\274\204\302\036=\254\320\240\275\317p\021\275\325\311\232=\314B-=+\007\240\274FB\036\275)m\237\274\320\365B\275\231\242\223<\3343\212\274w\036\021\275s\242\253<\333.N;\243\231\032=\303\322(=\265\2564=\026\307\365\274\030\214\023\275\312v:<\312\3260<c\267\215\273\302s\223\274\341\267e=7aE=\322\255\213\274g\277\252\274r,)=\223\274\354;\346\216\021\275\017k\334\275\3278#\275%B]=\177\256\307<\032g\367<\374\205}\275\025F+\275\340\007\334\274\2275\255\274\245T#\275IUb\274{\261\034\275\257\032\353<~\220@=\020\357\371\274\002Y\202\274\026\234\215\274\332\231\024=\032Z3\275\271z\3629\013|,\275Ad\304<\022\253\273<\022\312\000=J\310\260=\030j>\274b}\231=\333}}\274el}92H\367\274\022\007H\275\215\362\033\273Af\214\275?\240{\275\023\237\261\275\227\033y=\033\323*=\332\032I<\035\030:\275\310\002\376\274y\250`=\372\n\351\274\220\035D<\030D\276\274)\253\204<\247\250\311\274\222\272\234\275\'\016F\275\222\"\306\273E\227\313\273=|\262\275\306\036|=A\270\311<\2704\033\275\325Y\246\274D\323T\274\331\345p\274\350\200\n\274\301\'p=\000pC\275ls\321\2754\024\265=\340\261{\275\241\227\230;\250\213L\275\363_\371<N\246N=\206\301\241;LP\035\275\346\304\232\271\370H\'\275\222\353&=\366\266\000=\345\330\210<i\237\017<\376f5\274~w\264=\014\216\226\275\322\237\207<\261l\204<\234\346\036=w\010\203<\222\246P\275\251J\013\273\322\226m\274\0311\276<\311\034g;\300\3277<~(\245=1jx=x\026\250\275\330\235\264;q^M\275\037\024\246\274uU\025\274\376\016\201\274\332V==\2102\201=J+\212\275\341Y@=\235i:\275v\020\231=\211\267\375\274X^=\275\\X~\275\351\340\013\275\213n\237\274\340\333L=iq\353;\357Z\342<\334\306H\275A;\371\273\036\016\013=\013s\035<\302\377\010\275?\306`<\270\315\340\273\005eh==\202\013=\325\353\223<\021,\357<\254\213\276\272\305j =\302\360J<\035R\006\276\333\212\361\273\004\026\340\273\203\234\217\274p\361 \275\236\177\027\275\215^\341\2727\024\013=\254\315\007\274\355\367\032<_\202\273=\037\257\246<\311j\374<\\\243\343:\203\322E<\226Q\231\274E\320K=\267N!\274#\354\364<\263\317\262\2743\355\222\275t\326\321\273\217\274\250=\345G\321<so2=\213\005\027;(\010\224\274u\2341\274S\253\357= \373\221;2\023\005=kS\352\271\276Y\216=\2037-\274/^\314<\362Z\335\272n\215Y=^\321\032:}\366\215=\306\326\362\274i\250%;e\325\242< 7\224\273\264\314r==w}=\335\217p\275\332\274\365<p\251\236<W\336X\273s\341$<\253\364\317<\303\313g\274G\033\320;Y\3779=Q\233\254\275\374?K\275\362T\212\275~BG:\364^\222\275\225\302\217\275o\370\210;~\036\345<\225\337\357\274\272w\310\273\362s\371<\350%\344\274\224\267\223\271\226\374E\275G3\360\274\341b\033\275=\372\217;\267\3576=KRD\273\310\242\325=E\221$=\246\337:=>\002\032\275\2610\251\275\016\305y\275\235\002\311;\332V\007=\001\"p\275\246\366\271\274=\362\227\274\371\212\202=`B\r\273K\273\207=\301k\337\272\312\375)=\355\007+\274\355\204k\275jw\006\274\326U\206\273\375a \273Ef\257\275\362\352\242<x\320\207=\357>\017=\235H\316\275\343|\203\273\254\340w\274\\e$\273\025F\021:\003\331\032=Y\334;<I\373\264<\371\307\003\275|\342s=&k\257=S\332(=\361F\360<<\3366\274\326\341\264=\037\222\360:\223e\225=a\250g<\215~\235\2735\341\220=\236\354\330\274\000\313a=\\\t\'=!\347\361<O\t\003;\215O\310\274\276\346\177\275\304\224\270\273<nW\275\315R\234\2742>\247\275\257\241\274\273\226\021\232<\254\234\021=s\263\205\275\277\302\002<]\227\033;4\310\017<\364\3215\274k\333\010\275\372ut\275W\263\\\274\306\205%<\271:_<\233\206g\275\270/\306<\336\215\261=\206PV=\214oG<\031\220\301;\376\343\013=\034\341\017=q\027%\275\221\270\354<5\222q\274\246_\254<\246\362\344\275 \373\372\274\232\360\026=69\252\275\341n*\275o\027\245\272\"\235\211\274\243\251\r:g]R=\330\261\231<wN\231\275\0005M=\365 h=`0\365<\305\317\013=\211\243m<\354\374\335<\275\343\230=G\352\312\273^\232\013\274\311\372\262\274\203\344\270<\221C\341\272\\*b<\224\376H\275\267\364\316=\020&V=\350b\260\273\244j\016\275\036\315)\275\2641\303\275G\317R=66\325<\356`\214=\301 /\275\253\0272=\205d)\274K\360\261\273\006\261c\275\027d\360=\033[8\274,j\362<\375\246\034\274\343]|<\323\376\232\275p\005\034=oI\320<\334<\241<\332\200\272=\374\334\006\275\255\247\007=s\177\004\275\016\233\275\274\277\222x=c@\013\274\004|j=Fc\336<\020\251\252\274\024p:\275\3472\036=\202\251\343\274>\3011=\350\224\341\273\374\356\237<\'_\\<\357\000\002\275H\t\004=\306\313d\275\373\307\273\273\257\375\232<<-\343\274R\002\277\275\377\376\215\275`\267\264\274\000\002\t=_\035\331<\214\"D=\346\241\366<\363%\276\274\233Nl\274\241\267\266\274\364\231\264\274\027sw\275`\332H\275\260\266\227:9\214\027=\341t\336\274\235\336M<f\215g\275\273U\375\2746\334\035=\244\372\226=]\346i=\324\241 =\302UD\274\'\217\223\275i%\215\274\234\230\254=}\236f;\262\235 =\007\326\322\275b\277`=\205\307\233\274\023h\205<\261nG\275K]\226=F#\025<\027\332\261\275\270\372\313\275\006:\341\273\360?t;\213/\020\275j\032\035<\261\033 \274\377\375\327\273\300`x\274\316\337I=R\213\317<`\262\233\275\373\315\261\275t\300Z\2758\"e\275\364\226\263\274\320\323\\\273\036\355 =\370WY\275M\253\317\271\372\223z=\276\256\217\2744\326\r=\222\332\236=\315HW\274]\227\233\274\306\362\032\2741GW<\270\014\032=W\2623\274\200\005\030=[\216\002=\203\307\200\273\352\213\332\275\260\237\256<)\252\220<\340\365\234=w3I<f\374\276\274Oe\225=\313!\256;!\003\325<\377\002\246\274\314\324\271\274\263H\020\275~\311\264\274M}U\274l\371+=\337\313\342<c\204\006\275W\367\331\274\330[*<\244U\261\275\324tq=\304\300\001\275\\/\342<u\343\250\274c\032\256\275\335\362 \275\243W\223\274\344qb\2754\275.\273b\027\346<\010\362y\275\227\035\347\274\272b#=\354r\322=?\227i\275\257S\235\274iHd=\356\363>=\033\366\254\274\302\337\346;\334\2276</\220^\275E\276$=\361\027\247\274\376\3453\275M@i\273\366Rc<h6\216;\207\'\314\274)8\025=\2641\206\274\035\3015<\t\260&<\360\037L\274p\310?=0^\233\274D\020\005\275{\363\344\273\305\310\243<[\377f\275M\367M=\305\304\341\274x\3109\275{;\367\274\255\016\311\274\216W9;\307e\014\275\256I\206=\321\233\361<\200`%;@g\246\274\206\311\313<\266\275\037;Y\223R=\342\302E\275\257{\036\276i\374\245\274\253\304\271<\0105\247<\355\362\230=\264\024\217=\241\034|<g1\262=\t#\022\275\212#l=\322\237\340\274\033o\014:\2143\340\274\346\233\233=lU\034\275\253\256\320\275\306\032\363\274\265\312\001<\032\351\014=OF\027\275\336\240\332\274\376ro=\273\345\340<\240\335\013\2751RP\275\207\347\036=\325\234\210=\210\220\034\275\271\'\006<\267r!\275\353\'\251<\331Me=:\341\373;~2?=6+\200\274\224\224\214<\273r\336\274j\316~;\211\377\025=]\273\364\274\327\271=<Ta\213=\005`\2309\005O\234=\313N \275\361\026\265\272O\356R\275K\237\350\274\375\236>\275\302\237\214\274\311\202\370<r\366&=\361\335+<\221]\221\273\247IM\274S\363\351<\223\n\277\275\021\317u\275\005\234\320\274l\303\327<\343=\037<\313\346.=w\212\216=\022\367\031\275\360\236P<\025\234e\273\240\013\306\274\204\2056=U<^<\376\301\317<\371\254\250\275B\004\331\274\257\254?\273\023J\202\274*\003h\275f\203\321\274\213\364\317\274\221y\257<e\307\247\275M\372\320=\252\305\311<(t2\275\224\353X=\3148w=qO\225\274\201\0174<\345\303\330\274\361\016/\274\332\023\037=\275.%\275\014\372\243\275\361d\004<\271\344\213\273~|\367\274\262{E=\353\322\376\274i\355\313\273G\027\270<\263G\274\273\2708\202=\314\306\217=4\035\r<=\272\204<\341\\\r\275!v\276<\310qp\275H\375/\274\262\357\341\274\225\367\305=\243%\267=1P\332\272\233\213c\274$\315\222\275*\'\361<\024q\352:8\360\026=y\t\260\274\254;\323=%5\r\275\020\307 \275\204\'\304\274F\353==\361J\335;\326\272\351<\025\3673\272\'{\262\274K\373Z\275-\266\025\274\312\346\240\270\216\304A=\025\337\202\275\337\233\271\274\256\232N\2756p\236\2746PH=\364/\371;\212\036\342<\233\357/\275W\357\256\274\014\324>=\276\010\255\274=\356:\274\367\007\010=\313 \322;\234\355\370\274tH\022\275\000\275\223\273\352!\261\275$I3\274u \376<\347l\330<\350\240\354\275\357\303\266\274\363\327\217=\203)s=\007\353\325\274\355%\221\274;\266\313<\020\020\r=\206\371\002=)m8=\244\310\206\274j\203\313<Yuf=\342\362\334<\331\234y<B!\335\275D\236\036\275\263\252M<z+\260\275\232\020\207\274#T\257=\002\254\365\273\320\266\307=\262\313\037<\203[:=\365\255\234\275}\005\010\275\340\r\322\274s\246\254=\252\364\207;\243\205\352\274(En\275\020\272\226=\017\361)=\341,\277<\243KA<\377l\001\273$R3=\035aP=z\207\027<\374\322\013\275\265\207B\275l\r(<\221T\375\274p\374\271\274\346E\334<Ptw<Ofk<\340\026\336<\350\275\251\273\207e\216\2753+J9\035\307\301<\177L\253<\330\376+\275\315B\014=neT=\002\023\005<1\215\r\275\302\002\211=\253\201\342\275\000e<=I\177\236<2\033\n=\t\316\353<\246\002\212\275\313\367\000\275\260\326B<$\033A8\215\235\352\274P\221\036=\230\303\261<\036\314-\275W\320\003<aj\210\273\033\363\021\275$\022Q\275\316\004\342;\npb\275-\201\030\275\026\226\177\275\236\261\243\274\360b]=\014\2311\274\037\251\r=\010\2526=\260\\\207<Vw_\274W\235\221<\003\371\240=\303\226\023=Z\323\323<\"\304*<\272p\022=)\023;<u\220y\273LG\247<9n\210\274H\266\007=H\242\215<\334\253\217=\356\3225\275\211\216n\275\333\325\251<h\260/\275\301\266\024<\224c\000\276\201\256\273=\230\331\214<\277Oh=$\022\002=6\375\314\274\336\303\363=\373= \275\351=\354<\356I\013:\343\004\000\274\025Z\234=\215se\275wB\375\273\306Y\333;v\245\360\273\277\331\033=\r\002\313\275\203 \204<\312\025k\275\266\267\021\275\301$\243:F\341\025=z\2409\275\361\345h=\002\353\275\272\242\020\256=\033\213\227\275n\364\245<W\214 =\031\034)\275t\367\340\275\003\027U\275y\2560=\3736\007<6\341\"=\250\261\362\274>\241<=\333_\010\274\322\277\336;\312AH\275<\002\337<7\270*\275\326B\320<|-\341=i\301d\275\010\356\344<\364$<=\316\013\213<R\210\232\274\301\321\206=\2675\303;:\330>\275\316g8\2742\372\253;\221\214h=\235\225\303\274\226\227Q\275\000\035\2309\263\027%<\2628b\274t\333\221<DJ\235\275)e}<\021\347)<5v\356<;\351\270\273@\213\206=\026\3777\274\037\024\210<\341\026\232\275\274\323\263\274j\374\222\275\035\232\230\275b\211\033\275\316Z\007=\366\300\375\274\346\023\010\2765\340\270<~\235b=v1x\275\354\364\020=\327R\205<\364 \373\274rz\037:\312r\376<\300z\322\274m75<\312H\220;\367\240\236\273\207\271b<\301\211w<\301\210N\274D\210\026=\365\331J\275#\254M=\241\321\370\274\033Ix\275\316\335M=\316\351\363<\310\260Z\275\203\\K\275X@\231<6I\225\275#Bo<\340\200p<\352\245\023\275\245Z\003<\253\327\276\273\323q\247<\312\004\321=\177\312\326;\"f\307<\363\345\217=\016\336\224=\261a\037=\230\367\355\2743\377\314<\231\000\254:\342j\222=\021M\220\273\310;\274=1\232\027\275\303\217\346\275\327\256\216<\335\313\002\275X\267Q\275\232n\026\2755\024\354:\271\027&\27315><\0257U\275rPS\272\332N\240\275\341\005~=B1\347\274u\225Q=$\376\220\2736\347r=-\200:=\212\300\207<\rN\036<\246\006\000\275\202\265\333<\247\235\034<\336\375w=d\366\350\274`l\254\274\016\327\266<{:\316\273,jo\275\253\374\377\273\243\266+=n\366\330=\231\324\367\274\233X]=\354\327Q=\027\005\223=\377^\370\274\230zC\274f\241q=\244\007l<{\265\243<S\r\357<,\367\344\274&\273\023=z\373\204=\325f{\274\325\364\224\274\031t==D\277\346\274\254\360\001\275\373\320\236<M\t\003\275\375%\270\273\252\224\276\274AX\241<\227l\257\274@\001\364<\237\307\345\274kbJ\275\302BA\275eDX\274M\260X<a\230W\273\377\272\311\274]\037.=pT\273=\227\254\220\275\371\225\341\271\306\346\n\275LN\260<\253\220:\273\304~\251<\243\"\025<J\307\262;\345\254^= \250N=\1776H=\277\355\035\274T;+\275\013\337\030\272\346\265\322<\303O\017=\267k\363<\313\374\330<\215|\326<\035\020\037=\317\tX=\375g\301\2751\354\326\274b\337\377<9\275H<X\031\023\275n\203\355<G\360M=\305?\221=}\037\205\275\303\213\025\275\004\034q=\260\263\234=H\"1\273\261-B=W\021\217=3\331*\275\0302+\275\203@\275=\257\210\221\273\021Y-=:\240\252;g\300S;\"\274\220<\024S\005=\024\3331\274p*c\2748\225!=\325&\023=<\352\262=\261T~\275^\334\004\273\262>)\274I\367\377\275\302\017\201\274-m\365<\000\206\177\274\026\265\010\274T\267Q\272\307J\026=W\313\251;\334\r\t\275w\250s\275m\325\312\274\3310r\275K^\330=\335<\366\272l\331\345<h=\247;W\253\210=\256\317R=\177\301\301\273\234v\211\272M\334&<\332\254\205=\0161\007\275\357)\330\274\243\222\204\274\364*\005=\355\021\313<\356A\004;\222\004\220\272\013\212\200\275\230\030\337<\006\2231\275pZ^<\355\213\200\275A\274\"\275id\266\274k\177\256\274]\250\344;\022h\240\272\271\n]\275\205Q\331= $\206\273\350n\254\274\201\0033\275_\327\270<\345\361\232<r\357R\272\r\310I=\342(\242<u$\r<=\\\302\274\270\376\246<\231F:\275\013T\305\274\270\321\236<\316d\207\274@L\330\274\224\314[=w\010\230\275\r3\354<\225\013\370\274o_\250=\3240E\275fh\n=\273\273\'\275\000\206\336\274s4\355\274\256\216\224\274\2179\324\275h\337e=\251b\272\273|#L=}z\203<\320\241\312=dg\025\274g\201\304<`9\210\275\323\255\032<[\032h<\3312_=bH{=\027\356e\275\220\235\234=\032.\362\272\307\320b=\341\014 \272\206|\373\274\356.\234\273r\014(\274\0362L=\241\354h<\253\236\310=\"\210|<\352\370\021=\234\331\305\274\342\'\204;\216\007#\2750\261\031<LQ{\275\355\004\036\273\336\267\307<\231\014\210\274\341\217\253\274\343\204K\275\232\226@\275\356+\235\273\224\302\242<\263\327X=\361\302\336\273\350\004\213\274\264x\232\274 \366\312<\306E>\275+\336\n<\323\202\273\2753\277Y=\013\302Z\275\222\000\207=N\007\327\274\036\016\n\2744\216\275\273\251Q\032\274%\036R\274;tA=3\265\274\2743\235t;c\271X<+\n\300<\243\274\354\27328\317\274\325\245N\274\315\356\351;\220\370\375;\353\351\274\274\226\372\032\275\346\270\333\273\"rG\275\365\023\252\274\373y\374\273\271\375,\275\376\230\231==\326\204<\305\227\263=\347\000\261\274\227\235\220=~\311\032<\322\363\300=\005\037\340\273\241IM\274\233\276h=\326\326\314\275aOc\275\312a?=\371\344\030=\030\345 \275\007\016\314\274\277\260\370\274\347\234\335<\360.\\=\350:\026==\330%<\357\266k<Y\217\215\275\000p\\\275\271\0042=\352(\244=RO2=]\263\372<\367\365\222\275\345x1=n\345$=8n\270<Mn\227=\253\274\266\274\306o\007\274\"\277w\275.^`\275\330\276\312=p\340\276=}\354\r\2748.z<Z\363H=U\357\036;\307\303\321\274\226\347A=\211\rD\275\2140\t\274s\246]=\204\024\006=\232U\013\2742e(\275\003\274\254\274r\256\027\275A\262,=\352K\310\274\331\214w<\247\277;\275\207\373\375;\210\013-=\212\217K\275>\367\321<\244~\324\274\254\341\266\275{\024\371\273\301\315x=S\233\377<{T\247\275\'\321\241\274\331D\355<\266\003\302\273\001\357r\275V\200*\275\0135\376\274>\217\247;\037\361\036=\242\003=\275,\332\t\276\020\227\316\274\214\247b<\006,\271\274\263\350J<_\224\260\275_\264\306<\177|\035\275\376\"\323\274\356K1<\316`Y\275\357\241\243\275\357\361\177\275C\n*\274\255>\010<X\227\030\275\035\316\243<\214V\026=5\217\347\275\26406=\0042\241\275#s\212\274\203{\202=\007\352\002=\212q\210;\277\364\004\275L:\240=kK\000\273\355,\215\274($\376\274t\307\035=\212\357s\275-\022\321\275\207\262$=\362<\035<\325T\232<\220\365\274\274p\204\026\275\333U\'\275\367O\204\272s\232!=\224\027w;\3514\010\274\216\3171=\256C$\274^\347b\275>\026\206\273\242+\246<\322\2222;\265\242\322\274\345\202\2129\215\367*=\262\262a<\255<M\275\340\033=\274@\244\223\2754\007z<\353G\007<\274x\240\274\327T:\275Z\357\022<|\201\234:\3326\037\274\030\210\354<\254\214!=\372\016\220\2751\342\240=\204\354\210<\342L\245=\336\333\177<HI\223\275\001\030\213\275\370\217`=\303O\014;\031\250\036\274\215\002$\275o\277=<\334uY\2753S\330=\233e\311=~\320g=\264\236\202=\251\365\240\274\376y\233<\353\216\351\274\26248\275\3639\327\274\316mC\272\252+\341\275\001\005\337<\030vT=RN\031\274\242\215{\275\017\312\341<~}\364<\037\t\241\273iM-=\361\177\'\274D\364(=Y\027\336\274z\325\230\275\264s\331\274L!p\273lcZ=\034\213\372\274]\r\325\275\250#\205;]\225i\275L6\253\275\031\026+=l`\230\274\"XS<y\2429:Le\000=\330\272\345<\002\010i=\027\313\260\275\007\312<\274a\251\201=*[\217:\'GJ\274\306\310\020\274\no\375;}\341\213<\365\005==\311oA\273\311\223D=HQ\202\275\324\363\344;\034\337\031\274\332\234\234\274\304\006\366\273\n\001\340<sb-\275}\247\203\275E\027\003\272\007\210\271<\025\224\020\275g\253\177<\204\r(\275\005/\362\275\345#\265<\306^\326<\"\257+\275\226\323W\275\340B\317\274\210\302\237=\366H*\276]\375\245=\026\177\217<\312\261\225;G\204\376<\315\034\331\274\033\257\244\2751\357\014\275\274\366\003=_\303\227\273\337\305a=\300\370?\275\034\275@\275\226o\262<\303!\345<\246:\221=\357\240\025\275`=\226=\272\201\007=\314a&\275C\302\223\275K\226\230<\000\243\331\2748!t<yC|\274H\037A=p\022\n\275|\221W\274\177C\332=\343,:\275.\222\322:^\ng;\373\311\231=\314\214\200\275\273\224\200\275\357A\216\274n\300\321\274\353\342\323;\243y\n<\337\372\r\275Si\n=m\210\037=\207\363\345\2747P\200=\n\320\327\274j\2506\274ir\271\274\302\252%;\211tn:\372\000d\2738\322\004\274T`\264\275\177A)\275\336`g\275\037o+\273\276\332\004\275\301\362\300=r\242\302\274>q\225<w\200~<\306\'\245:5\027\267<\320\244\020=\267\347\365< \226\365<\225\355%=\3720M=\016\274Y=KQ\316\274+\360\264<\025\000\360;\034\374\206=\020\377\303<\032)\273\273\3275Q<\230\235\026=Wi\257\274Aw\212<\224\\\201=\031\"g\275\272\266\322<\324%\307<\323\003T;\2724\017< \317\014\274<_\204<X\345\220\273!\010)\275\266\225\273\274\373A\274=\347\361~<\3159P\275\336WJ=\000\033\215<\r\343\026\275\375!j<\377\217\334\275|\223\212<\364\376\r=\276\246\337\273\001?\031\275\306K>=\355\321\213=e\007\300\274\2213\270\275<\201\204<\031\204\251\274>\241\016\275\300.+=\314S\005\275.\206\200<\343j\212\275\247]\323<R%E=\351 \312<\3415\013\275)\2303=\250N2< \224\272=l7\361<orZ=l\370\277<\24065<x\355\326;\356\3003=PU\231\275Pi2\275Ym\2519\222y\232:\222[\220=,\331\267=t\t\206\274H@5=>\262\030\275`\3524=c8\336\274\312\rR;\300<\231=\257\010\201;\320\005\007=G3\351<\254%\311\273\214\2667=\301\177;<V\272\327<\373\001\315\274\032\202\253;\324\343\357\274\333\016\037\275\265H\245<\363|s=s^X=\226\337\007<\252z\307\275YU\026\275@i\243<\262G\205\274)=7\275Ab\014=\367\001X<A\017\251\274\227\374\263\274%\200\316=X=\233\274\314\274\337\273\025:\341\2744\317\367;+W\365<\000\002\256\274}\357\316\275HNf=\'\226\257\273\\()\275aGZ=\200\305\001\275t\326><\n\'\246</\234v\275f\246.\275\251\004A\274\244pC=K\343\025\274,%\025=\222\300L=(\035;\274\032\350\253;!<\034=\205\307\201\275\264\270T=\271\005\243\274\005\311\013=4\2572=\334d\022\275\234\273k\273\204\376\017=\257\221\220\275T8w:\004\344\354\274|\026\032\275\201\261\230\275\207\217\342<\326\313l\275\371\216\202=\235\254\320\274_\222F\274\215\021w=\3710\213\274j\333W\275\371LR\274-\211T\275E6s\272\334x9\273\234\327U;\234\255\355\274\277kO\275\231\0064=~.\271\273\344\010]\274Z\033\262<\033I \274K^b\274\200\360N=\353\025T=\375\267\251\273U\213m\275\003\212F=YbH\275\001\366g=X\350^;\215k\252\275\325|\000\275{.\213=S\211\312<\254\000\035\275\212\\L;$w\367\275\\T\001\276\215\345i<\357\376\201<\327\211.;\3144\273\275\353\316\247\274\361\327\000\273\264U\335<\334\272\247<\023|\230\274WB5=\363o\003=\330*\363;\024>\023<\211\277\276<.Y$\2754\204]=\336\366\240\275\030\336\367<z\322F\275[Sp\275\021Af\274\357O`\275\206\n\036\274l\0219=w\310j\2758\330\315<\323\216\n=N\374\235=5\324\207\275\026gs=Fk\254\273\006\037^<)\266\243\274\365\311\241<\335\366\371:\310\202\320\274\254\021\216\274\301\253\266=\273$\276<[I\n<\220\033\311\274h\300]=\016\003.=%3\234=~\334p=\004\300\253=\224\212\"\275\236\334R<j\330\356\274\317\301\255\274q\306\200=\216\213\276\274n4-=\333\243c=\223\217\273<\360\037+<\\d\244\274KS\227:\022@\213<\306C7=\016\344\213\275U6\000\275\225\302\031\274v\253k=\205[\027\275\232\351\335\275`_\275<\003\000e=\304\331w=\225\3009;\243\263\255\275r?-=\237\252\004<n\3331\273\305\345t=\277\203\367<5jw<\302\316\004=\016\345\206=Yoo=\022x-=\025\324,\275_\010L\274+\345P=\324iD\275#\2371\275<\264H=\033#\035=y#?<\3776\376< V\364\274l)\2769\324RL=\024\312\367\275DP\001\274\222\372\311\272m\337\207<\257l\251<o;\321\274Xt\242\274\250\240\343=\364\234\367\274\300\220)=\226m\255\274\271\331\375=pF\354\274CdK\275\3569\220<\"\273\242\274K\376\"\275#\377\307;\026i\032=Lir\275\264\000f=\363df\275yr@\274\331G\334<\340s\314\274\353k\204=\350\005\007=\210\232\367<\270\022\014\274\306k\316\275)\220\335;\350Y\261\275wJ\234\274&$\330\274kw2=[\036W;\276\3234\275$\224\252<\177\322\252<\0344\303<\025\372z\275\270\214\266=ME\200\275g\375\356;\203\351Q<\377\340\260\272CO\277<\305\223J=}j\350;\300\361h\272I\264\244;\300\010\220\273\tE0\274\226D\341\274\340\323\027\275\274\007\025=\\\264\272\274j\311w\272\010\262^=&\277v\2753\2215\274\273m\023\275\212\341j\274\342\205\241\275l\337m<\230\312,=\220^\024\275\267b\023=\235\245\332\274N\264)<\'\327\026<\221F7\274\277\355@=\245\031\003>\'\273!\273~\324;<HR\244\275\327\267l=;\273\220\274;!#\275\210\243}\274\254>\336\274\036\354\240<\325\354?\274\035N\212< l6=\033\316=\272\271\0069\275\272y\312<c\216!\274\"q\203\275\367\332\370<\233$\352<\'\3239\274z\215I\275\203\302\035\275\305\030\243\275V\350\\=\215p\304<U6^\274)\367\204\275\037K\003=\315B\307\274K\177\224\274\353\001\266\275\021\241\221=\276G`\275`\337\005\275\014\206\003\274\374II\275l\376\341\272\324\361\001<\023\3312\275=6\010\275\020\261%\272\022\272#=\203\354\363<-$2=K7N\274\3274\206<[M\240\275\037\373\327<\225\036Q\275Y\023\347;\233\324\010=w\262M<\314yt\275\007\007\033\275P\3243\275\035\022\272<R\377\211\274\334\tZ<\200\232\245\272\265\316\006\275p\275\371<\200\215\005\275\236t`\275\223\313\253\275X\317\025\275\367\201z=D\203+\274\254C\325<n\243,<\310\265{<\302\025\245<\235\302c<\266\202\362\274\002\237\036<\257\305\315\274W8\'\275p\302m\273\373\302\232\275\377\277\307\274\332_\313\274\016\357?<\347C\n\275\341\315X=\177\332\241\275an\244<\027\343\375;nU\'\274\320\313\257\275\235\203\204\275b\266\036=\':\241\272B\021g\275\014:g\274@\225M=\247\306\310;f\246U=\322\346\220=\260]\233\274\314\023\320<\246C\232\274\263\224\214=\237Wl\275;\365\246\2754o\220=\n\230\205=\237\006}=\362\251\241\275\035p\242;\032\273\253\274B/`\275\270\204e\27475\363\274\206h\336<\3352x<\244X\252\275\342\324\240=2\2522<B\372 =m\202?\274J\311\222<@\347\'\274\3160==sQ\255\274v\\+\274<\037\203\274X:w\275AC]=\027A\\\273\315\276\\\274\026\031\004;\311v\000=<\260\330\273\232>\250\275\214\032\317=\320%5<\242\340\353<\332.\276\275\272!(\275\231I\035\274\313\365\351<\345\240E\273\270r\267<\245b\263\2736?*<\202Z\343<\340\307\236\275\231\346S=)q\223\275_\361q\275\004\031\244<\253\316\202=\346M\010=\361\210\023=\201r\327<\226W\215<\220E|<\370\013\270<fe\025<2\372\321\274\325\\\034=\005m\340<#s\020;5g\313\274V\344\236\275\343\304\202\275\213\215B\275sU\030\275\031\013\303<\017\310\217=\002\250\221\275\202\317\325\274\240\361\261\2742a\205<\201\215\355\274\177\351v=\331\022\302<\237 \024=Lb\345\273\3772V=\212/l=\307\320\207=tx\251;\213\363w=\001\270H=\021LE=\340\221\202\275O\263c<Km\233<\022:\016\275tgF=\305\231\010\274\"c\232=f\210\026=E{P=6QN=\256\272:=\237\260\266\274\250\\\002\275\254\206\232=\342\316l;\333<?\275s\261w=e\231\211\274D\'\367\273Q^A\274A\311\007=\010#\305<\321\214\373<\262\227\301<3\264U\275gF\215<d\350b\275\325\2577=\331\222\355\273\203,\332<\032}\024\2752\217@\274\\\327*=\240u\345\274&\262X\272 ^\317<.\266\016==/\260<ttc\275C\224!\275\035~\206\275-\200\263<>\270N=\021\376\303=\202^\"= \213\323<Ye]\275\370\217\350<\177\237M=\245\334\226\274Q\027\322<\304\364\n<\361\312\305\274\tP,\274\331\t?=\325\254j=\rD\330<\224\203\003\274\340\231\231;|#\255<\007\235Z\275JN\023\274*\211\260\274\252&L=\343\345\343\274\005\215T\274\313}3=s\t\334;\325\205\374<w\3522\275\246\006\241=\327\035\'\275\356\301t\275\304H.\275C\2004\274\324\\\250\274\372\212G\275C\007\337\274\243|\200\275$\006\314<\274+\255=\235\311\220\275S\202\317\274#L\320\272\034|[=9VN\275\216]\032\275\323\212\014\275\206n\244\275\303[\257\272\355\350\354\273\232\257\022\275\347\303}\273\340mD=\023\207\003>\177\363$\273\234\302\021\275\346\037\306;_`\345\274\200\005\017<\256\323\t;;X\337<\271,\344\274\366\261\276\275\016S,\274\361b\255<\001\222\201=\245\225>\275\310\272\224\275<\"\211\2747\2143\274\250\013F\274\324\014\036=\311\331\006\275;A\342<1\3737\274\031IX\275|\200q\275\024{U\275\037t\205\275\020\026G<\001<0<\376<\212\274\222\377^=\315\244\210\275J\375\233=\035\271\230\274#\037\227\274\013\003A\274X\375\221\275\271S\274\275xW\246<\262m\263=\013\373\200\274\265\346\034\275\324T\211\274\201H\375\272\214\037\'=1\264\346\273\005o_\274\372\023\336<\221\206q=\364\367\200<Qh\326\274\332c*\274\336K[=\363\361\376<\356\037\242\275bq\251\275*f\000=I\326\311:}Do=\202\270\200=\256\351\222\275\306\254\245\273\361\262D\275\372Y\377\274\017\036\201<D\353\201=5\303*\275\035\260\010<\337\247\347<\014d\035=\337\276h\275\007\203\217;;\301\204\274Y\006\275<\3221\255\274\005J\250<#X\022=\305\211\217<K\345\210\275\247\316\316\273\323!\241\275`h\002\275\204j\217\274\3314!\273\\\273\243=\014\3541=\325\273\274\275\005\302g=\361%\205\275\275\010_=\003|\016\2747\376\027\274\310\3720\274_\220q<\314r\023\275\252D\236<\222\267#<\267<4\275\331\025m=\250a(\275A\337D\275\217o\360=\200\205\366<\263<\202<\".\301\274%N.=\010\243\313\272Rr\225:L?\342\274\324\031\310<\306\274\251=n\230\t\274\037l\203=<Y=\274\020\366\010=Oy\235\275\2666y\274\335\334\326=`~S\275(\252\247\274\331\344\"\274g27\274\306\312\256\274\376\000{<\341\3257=\324c\327\273\337\232\231\275\230\236\3309r\000r\274\374Y\211<\371FD\274\203\355\n=\316:\222<\325}V=F\235\312<)\213\204\274{\021\270\275~\017\036\275\272G\200<1\363\373\274\006\010\022<\200\2344<\177\302\320<|\366H\275t\347\232<\364\262C=e\336~=t\340\032<\027\330Y:\265rE\275G\336\256\274\267\260\213\275\327\276\n\274\244]\237=!i!\275\257\251\306=$aH=\002\275\365\274_Z\237=F\303\242\272\347\366m=\273Jy\273\240\344\025\274m\211?=p\276\211=\204\257\264=\324y2<\034\004\002=+\330\327\2747\366\034=\273\362\370<)\271\244\2757\366\006<d\2161=0\315-=\025\344N<\212\027\333\273\341\035\252\275\314wg;_o\313<\017\303\306<#\246\016;#\024{<t\224\267=s\027g\273\351\221\252\273\t\254\352<\261\275\007\275\021Q\023\275+\2701<\003\002i=\332\271\331\274\225L\221\275m8\214\274\304\001<\274\030G\313=\023\033#=\016\356\033<<\233\213<F1\326\274\363\300}\275\224d\030\275\004\252\254\2742\362\262=w\001\330<\331Z\222\275\230\333=\274!\021\242<\343\332?=\350\221\276<\233\344\374;\347\277\343;\372\203\361<\247\013\t\2749\274\234=\371\356)\274\356\314\263\274\235\201\215\273\347\010\033=\205u\314\273\243\211/=?\033\374\274\323\3577\275\253\037\247<w\212i\274\247\343\271\274}\216\202\274\300W$=O*c<\005\375\234<\342\264\336<\226\024\334\274^OY<\002rM\275B\234W\275\236\275\177\274vy\247<p\223\r\275y\231\205=\036\223\033\275\326\273F=5\250\312\275\t\335\004\275\t\276\243=D~L<\001\360\311<\214\316\n\273\321S\270\275%\316\231\275\345#r\274\256\250\003>b\367\036\274/\304\264<m\003\324<\317R\214=\253\003I=\340\202\276\274\350zX\275\027\303*=\250n\\<h\232\232\275\342:*=\203\334L\274\377\004\307\274Il\n>\300\004\003\275\253\254\234=\276E\306<\370L\036\274\371\221\332\274\"\317l<\374\263\t\276W\210\231=\225\311\033\274\233\377\3249\r\276\375\274g\207\301=\364s\372\275\201\324:\275\315\252\344\274\214\255\252\275\227%K=m6\322;5\177.<\342%\025=d\366\020\275`\003\215=\305\365\362<Z>\343\272\n\t\252\275\376\273\230=\264g\275<K^\256<\010\365\242=\031\035J\275s$8;F\241N=\230\326\004\275\n\323a\274\352\251I<\336\353\336\274\251\366\215\275W\362\272\275\216\346\226;\357\232\001=;\264{<1\030:\275\024\2427=\366\027V\275\271\341\220=\324\211-\274\234T\227\274\223\230\r\275\376\247\332\274+:~\275u\363\013\275\354k\t\275\233\'\311\274\272\356\207=\022\316%\274\335\203\000\2759\217H<(P\274\273)\202K\274\204\237\025=\245cm\275\340\251@=\344t\032<\2239\002\274\010S\314\274\373\203\024\275\226\310\231=\025\206\351\274\372;V<Q\017_\275\244&\330\274\004t2\275\214KC=)G\002=\345\305r=\300\322q\274\200\361\375\2740\302\357\274z\034\237\274\305\3372<\210c\257\274kT\035\275gT;\275\333+\241=\014(R\275\225\361 \274\017^J<\013\337\256\274\270e\256;\371\347\004\275\014\351L\274,\311\361\274#\010\332=V\244]\275\\ZC=\201<[\274\210\275\352\274b\033\251=K\311\203\273\214\027d\275\220e\220\275\326\273\222<\330\317\314\275eG8\274\'\250\365<\tQ\235<U\033\324=C\272\205\273\277p*\275/\002\242\275!\177\007=\r\005\305<Y\364\340\274n\250\023\275\253\3517\274\2329\207\272{\271\303;\340\255\t=\0160\225<\335p\355\274f\312\030\275\367\262n<S\364>=\277\247\277;\213\032\022=CN\216\273\261\031\226;\321S\316<H\004\016=NP\220=\tx\360<\276 \000\275\217Z\222<\202\360L\275\276J\250=\353\205u\275\004X\007\275)\236_\275\374\263\205\275f\027\n=\304\0017\275\333\221\361\2733\251\274=\220O\000\275;\333\325=\366&Z\275\306\327\277<8\323r\274\3001 = \231y<i\324e<\326\336M<?\223x=\224?\222=e*\224=/\002\216=\304\334\323\274\274])\275\030W\314<\371\251\\\275\303c\000=m\321{\2758\372\207<6F\205\275FJ\332<\316\351F=v:t;C\353\341<<\023\177;\000%\320;\266x\255\274S\264\236<\235`\027<U[\020\274\013N\262<\227\263U=\302`\250\275\362\371\367<x\024\235\275Q\267T:\363\275/\275xQ\230<I20\274\361\265\036=3\236\260\274\211\001\214;\224\020\026\274\370\336\007=\317\350\217=K L=}i*=\232Z\316<\202:\363\274\215\246\344\274\213\240\250\275\325V\272;c\253b\274s\201\002\275\225h\203\275c\034\215\273\205V\256<\026c\343\274`\310\254<\006\226C\275\3239\211\275\263\277\223<&r\314;&\263&\274-t\353:\251\371\246\274\'R\213\274ZU\273\274uL\017\275\254$+\274\014\037\232;w\321\023\275rC6<\262\3049=\311M0\274zI\262\274\246g\210\275\311c\'\275%\353\224=\306^S\275D\024\233\275-\212\352<\001qM=\323\\~\275\245\245I\275f\010\237\274\021\267\222=lx\205\275b\251\343<z?\216\275\013#\n\275\317\221\363\274\335\374d;,uO\273\331\370\031=\241\0328=\030]v=\363\352w\275\315\3057<\271\006\311=\247\332B=\222\017R<\313\'\\\275\013`D\275B\374O=\235\250D=b\017\371<\237\320\331<\343\260\202\275\217s\037=4\217\257=>/\265<\307\276\014\275\321\262\243=\331\327\334\274\323\353\037=\273\"\274\274\035\324\340<|\310\336\274\251\362\336=\260\275\231=\020\252O\274\372\374\005=\253\t\027=\262\364h\274\303}\030\274\326\240\r=\220x\260\274\020`><\324L\376\274\304s\313\274\313\242\261\275/N\230<\033t^<\205\234\354\274\037\021\357:\256NU=\217\352+<\221~V<\360\301|\274m\331\370\275\\#\316\274\037Q\316\274\343\021\251\273?\202\216=\3672\343\274\311j\310\273\010\027\213\274\212!s<Ag\216\274\202,U<\2208\351\2732~\247\274e\375\374\274\321z>=\272}\234\275\014\267\016<\003_M=\272\234*\275\303A\351<i\272\035\272\323\250\230;*\315\316\274yd\n\275\003\301\014<-\207g\274G\024\230<S\211\026=j\260\235<}\222y=@\271D\275\006Os<\307\013\327\2734\331\025\274\270\222\247\275t~\237<\266\315c\275hjL=\214\030<\274\327\315U=-\265\027\275\027\321\323<*|\245\2746]\243<H\304m<{\314\321\273\n7B\270\364\322\"<\373\"\200<\211N/=@3\317<4\217\252<\002\250\236\273\267\261\374;|\234\022=\273\355\035<\010\301\303=\340z\207\275\257\010\"\275Q\323\260\274\234f\237\274b\3223\275m\020\021=\327\255}=1\211\305\274\243\342y=4P$<\346\312\017\275\033\3252;\244\273\354\272\224\246R=+\237R=03\306<\030\335\237=\237o\356\273\257\270\313=\2023\227=\024\244\377<\354\003\242\275\375\326\211\275\361\'{<B!\205<\214R\'\275\351]g\275\034\273\313\274R\330\356<\037#w<Z\004\306<\316o\327=\302\331i=f\253,\274\3426\312<\251v\320:\0340\233\274\005j\202=\177\265\330<\026)Y<J\314\313\274\325:D\274L\304\341<O\275\272\275\227\0077=\365I(\275\034|\236\275\274\366\217\275\276C,=r\343\260\274\264\3035=\347\240h\275\201\200D=\r\345\330\274\t~\"=pD,=\006~\006\2758#q<e\2472<\215\373\330;G\240\245=\326(\376<\252\264&\2757f\320=\326\351\310\274o\t\237\274\375R\212\274\321\315\226\274\350\316\302<\344e><V\007\207\272f\305\201\275\357a3\275\361\315\356<*G\245\2751\300U\275\353\347\254=W\003\257\275(\035L=\264\010\377<H\361\204=\201B\233\274\363\372\370<\004\213<=\317\347\267=\350\005*\274:\217{=\376\323\215\275\365\216\201<\020\377\223\275\352\321\262=\364\356\327\274\317,\317;\205\364\252\275^\265\027\275\374\266\332;J{\204\274\233\225\020\275D\312\013\275\033\3510;u\223\031<\021\000E=f\355\304:\300\264-=;..\274\353\333D=\345\032\244\274\036Ch=\2276\333=|\317\221\273\345\341E=w]\323=\027H\354;MS\313;\343\2718=\365;\303<A\261\254<o\314\240\275S^B=\336\236o=\231=\315\274F\023\273=\311\360\270;\255#\271<\344\220\037\275\205\230|\275mC\216\274~\035\262<7\336\021<\227\303\226\273T\024\025=\331\347\256<\203_\277<9\311d<\013\201B=\222o,<$$\334<\231$\033\274\022W\034\275\260I\221<\360]\224\273\222\313\020=:(\371\274\207\"\t\275\r%M\275\227i\024\275\213\327<=p\200\223<\350\356\236\2744G\343\274\314n\275;\277C\211<\231\033\213=\003\334\242<e\225\006\275\357\005\034\275,\351\007\275\360a:=\n\0173=F-\246;\365\372\342=\225\357B<6\225\220\2748\223\276<\260\210\013=\201\236\205=v\353\257\274\312\317\366=B\300.\274F\221\202\274\204}\200=\010\367\025=\347\230\210<\022\001\215\274\336CI<hh\275<+?\312=\343\014\204<b\301z=\003\355\211\274\335\322\022\275(\3639\275ga\217:\353\227\034=\254\245\t<\220p+;IO\031\275\215\230\365\273\247A\360;B;\363<\024\2618\275h|\364=\213}\346<\374\"B;\317\203x=\275\240\207=\335\316\264<9>n<\276\210\004=|(\221\275\215a\374<X\237\302\274\352\240\312<\002\273\204=\327\354\374\2748!\033=\235\r\033=\005\034^=\301\272\320<^\206\254<&\006G=B\260\243<@\306\206<\314\217.<\340\026\244=\331P\253<\022\325W\275\n\373\322\273\207\243-\275\354\320\022=\241\375\035\275\331\026B<\356\3402\275\004b\200<\355\336\365\275\177Z\213<f\357\356\273\347`\272\274\2459\030<\223e5<x)\207\275\350C\334<s\344[\275\326\013\310=\342q\206=3\216c<\253yK<\353\320\304;9{\222\274\3533\006=\220p\374\273er\200\275\300\204A=\366\360s=v(\363\274\316h\031=\2260\246\2758SE\275\205\230}\275\265\032\205<\303R\307\274\277\367\214\274\271@\200<\365\001\371\273\242\222D=\014\316z\275y>\207\275\363\024\275<q\355\210\274\322\312\251<\230|\235\274\250\204\256\275\222\223\017\275x\2668\275v)\\\2752\373\201<\335v4;i\257\377\274\250,4<\260\201)\274\253\331\014\275\303\312\004\274\373$\t=t\016;\274.\336\231\274\234\275\177\275\3222w=Q1p=\216\316\031=\356\032\255\274\304\337\207=\250f5=\375\004k\275s\246P=\033,\233\274\264>s\274\t\265\021<\223F+\273Wry<\021\355B\275\216\312\270<\350\245\r\275\020\'\246\274P\2215\275\014\223\\=^3^\275s\261\270;\365\324\250\273%\366\035\274~~$=X-N\274\0144\344\274\253\275\\\275\014\351\307\275Z\316\275\272\312w\345<e\327\246;\211\001\302;`W\"<\202\345n\274\231\343\345\274)\3371=\224\343\305<\355\'\010>\215\"\241\275\202\230\207\271\014\033\317<\335u\224;P\241G=VV\000\275\200\232.\275\217\022\342=\331\355\202\275B\260\367<guF\275\254\2706=Q\376\027<j)\003;B\025\247=\252\241\226\275\014\375m\274\032\360\004\275b_\343\272\212\2600\275\301a\'=s\2502=\246\210p={\352\006\275\225Pg\274\263%\335<ttM\274\311\316/=\317\262\020\274US\352\274\243\367\213=\330j*\275x\005\261<\001\016\245\275\235]F\274\227\324\251\275\234()\274\210\225\312\273\314\253\021\275\266\367\373\274iX~\274Tf\0239y\244m9\037\301\354\274\214\351\356;\334\302\225=\272\200\244<4\347,=\225\231\n\276\227\376\233\274\021\366\'\2737*\202\275\321S\324<\006\032\215=\320m\202:L\366\001=%\254Q<\215\242\347<S\265\236\275\217D\006\275ak\001\275 \331\320=\020\355.\274p-=\274\031E\261\274\245\2453=\336\027\231<\030\251\213\273\217\370\200<\000\272(\274\202s\351<!\375X=\343B.<\215_\325\275Z\325\306\274uY\016\274\365\300q=6\243\330<\231w=\275mJS;\200W%\274\177\037Z=U\017j=\r\360\027\275\'&\245<_W\226\274\347\306\312\274\026\305\001\274S\237\331<\267\256\252\275\227\222\031\275h\222l\275J\335\275\274\'\241\207=\t\037\203<V\371t= \024\206\275\304ON\274B\351\327<\021\361\217\275;\361\\\275\240\026\233<\023C\021\274\255\363\341\275\357\tO<-\327\023<C\250\257=c\020]\275\203Mt<\227v\340\274\250\214+=\271\211\373\274\271f\246<\026\336\305<\211\353\032\275\240\232\021=\002\223\274<R\200s\274u\007\255=L\330\023\274mK\025<W\240!=\353\272{<\3216\364<L\304\036\275\245QK=\t^e=\001i\330\275\246\301\250\272\200\r\213\273\0135\224\274v8\023=\035\rt=v\210\210\275\224.X9\241\367D=7\374\306\274\336H\005=\20552:R}\244\273\306\007\270;\260\267\n=\254\245\021\273\275TT\275\007\257S=\224\230\331<6\252B\274\240\035\325<3\017\024\274@\374v<\352\330\321=\371(K\274^\320F\275\304=J<\213@\013\274X7\347\273c>\032\272\326\242\323<i\342Y\274k\303\372\271;\364\302\274\344b\247\274\315Di\275Y\311\243\275DSk=>q;:-\030\303\267\347\370\267<~\2731=~\341\263\274\376\356\251=\031\336L\271~tI<;\037>=\237XM\275\\kl\274\240\351\210=w\0037\275*H\301\274\034W\205<,\240\3059A\300\320:\330\337\022\2743\n\224\2750\020g\274\363\215x=\326\014\273=o\333m\275\026\1773<*\340\210=\261. \275\316\255\257\2750\t\231=^\216t\275\304\\\252<\306\000z=W\225{\273\231\3521=\013\372!\275*\037\237<\003\347\033\275\325\023\205<e\020C=:\367U<t\272\352<o\000\260\274\317=\214\275Vy\267\274\227mM\274l`Y=w\250p\275\022\306\327;\023\256\267;\374\351\213\273\023f*=\252\032\031\274JX\272<\342i\266<v\233\266\273b+.=)\003\333\2723Q\345<F\367p=\253#\275=\217\206\302<,z\357<b\217\014\273\026\036\003<\352\352\t=\335U\235;V\374\000=\324w\304<\265\240\336\273-\033\255\274e\361\r\275b\230U\275\275\220[<z\237\331<\014@\241\275y\031\306\275\206/\203<zT\206\275\377Hd\273\036x^<\026\226\004\274\314\225\323\275\373\255\217=\276\335T\275\017\264\207\273\272\330\267=\251oP=\021\017C\272h\346\203\275\367\315^\275d\241\210\275F\365\262\275\014\t\245\275\271[><>\236\227\275v\230\030=\327D\t\275\001C\302\274\244AW=)\203\344=$\341\373;\234\227\017\275\302\033\307\274\225\241\016\2756\343\262<W\214\357\274.\033a\275G{\224<\262\007\336\272\367%\217=x\342R<\225%\233\274\355\321\222\275\\5Z=\260\307.\272pL\312;B\\\246<\344\237I=\245Tq<\241\"4=\023V\244\273\213\211~\274\010\024~<\003\241W\274]\265\030=\r]\037<\010\364\030\2752\273)<\330\371.\275\221\323\211\274\221\331D\275\013\277\255\275\346\240\264\274\276\232\"\275\324\025\275\275\005\221\322\274>y\t=+\257_=\224y\234\274\2512\210\274\375\3144<}1\020\276~E\246<\212X\271\275\227\r\270\274\235\312\005=\177\364\252\274\331\333\276\275\200\227\234= w\364\273Z^\017\274\032\227.=\276\016\354\274\264\216c\274\tf\025=&\025J\275\r\004e=\343}\245\274\224\336\016>_q`\275\261G4\274\\\210\260;\334<\250;AG\216\275a1I\275m\312\017<\033\261X=\332\2702\275\367\201a\275\200\376\200\274\275\305\037=<\317\302=\240\n\207\274\272\016;<+H\017<\023\222\236:F\301J=\027\335\206\275i@\242<\351\304\005=O\273\241:\375\203\177\274\215\272\325=\202L2\275<\311}\273\370\245\321\274S\207\264\274\313G:\275bq9=\353\252E\274\242x6=%\255\370\274\2541\026<\353\022;=\030PB:\035V\031\275\262a\330\274\212\275\224\274\207o:\271I,d\274\016J\013<3\323w\27479\211\275N\032\021\275\241\266\226\275$\014\037<X\211*<\354\333A=`(\212\274 \331P\275\007\032\215=\004\224\352\274\362\006\022\275\331!2=\237q\003\275\344u\023<k\247\202=&@\223;b\335\302\273L\275n\272n\333.\275e\322\022=\205~D=\332\270E\275\352\032\254<!\202\377\274\305\004:\275\244F\257=\313)\345:)\336C;\214\234\"\275\367\321\211\275\2550\373=5\231\343==Y>\275\025}\037<G\355F<D~\004\275c\350\330<r>\230<\316Tk\274\026{\277\274\022\220\032\275y\325\234=\323\362t\2750.\232\275\001\334\346<\223}\306==\'\t\273m\r\215\274\250\266\213\2731\354B\275\227\364\225<\360M\313=\0001L\274\335\233\002\274M\225\261\274\251\324,\274\024F9\275i<C=L\026N=\365kc\275v\223<=\276\257\3379\267\213\r=\366P\316=\030\'\276\274^\177|< /\242\275\320\r\304<\251#\204=4\216\005=*\203\225<bT\327\274\347\3432<\314\036W\275{\023\032=+\305\037\275V\254/=\370l\033\274\251u\257\275\221FD=\260=$=k\271\236\272A\200\354\274\316\207\035=l\000\213\275\016\263x\275\303\035\305=\356\376f<\027\3709\274Z\356\306\274\031\235%\275\256\030\213=?\255\322<e\2570=\322\250!\2750\213\215<\301k\215\274n=\232=\346X\267<\313:\235<\351\3060=\206D\375<\032V)<Q\024\r\275\356\325\350\274\221\300\"<.\265\202\274\206H6\275o\222\036\275A\210l\274s]-<J\371\272\274\322s{<l\212\256\272\361\203\260=59r<MR\207\274\376\256\220<\317\242\231\275\2240\222\273\210\2453<\313\340\260\2747?\304\274\257:\214=\236V\266<\225\210\267\274b\240\275\274{\340!=\236\211\357\275\224\312 =\215+\030>\237\376\005=\314b=\275q\244\010=\361\252\376;p\366\356\274\202\017\237=~t\270:\214\262\236\274\220\237e\275]\021\365<\326\262<: \203z\274\353\355t<ebV=k\023\006\275\320M\234<\035\220:\273\226\036\357\273h\036\361<\016\273\335\274\007\223\225=w\215\351\274\302\327\242\274\3020o\273\204\313\221<\",\002;\022\021n;\300\017!=\350\322\236\275f\360\304<J\251\221\274\3173\320<\364\020$=\322\364{<+\343\006=LD\270;!\257(<\t\303%\273x\322z=V\337\000\275U\213:\274\332\035\227:[g\227<Px!=V\330+;\004\252F\275s$\331<\022\017\275=a\345\255<\230M\216\275}\265p=\177\035\245=\202@\006\275\355\225!\275\325`\247<\342\241\023=s\214m=\263\377\303=\273\224F\274\037\331)=c,,\273\030mi=\232\024f\275\325U$=\347/\312<\016AC\275\037\315\232\275t\214D=\212\000\267<<\332L=\236\361\315\274RP\345\273{\267\035=H\3325\275)\3274\275\235~\220\272`&\253\274o;`\275\262\221\000\275\375\376>\275\003\260\302<\'\241p<\022\333\226\273\203\n\266<)\256\245\273\030\022\212=c\005\030\2758\203\310;\254$\245\275,G\314=\024\374\272\274\225\361\230=\347\200\177=\243\302\205=\271N]=\322\030d\274\366\374\232\275\250%\025=)g\365<\234t\263\274\315\252\320<\307\336\231\274b\206e\275\361q\354<:\353\323<9\234\220<\202\246\223=\002\311\311\274\274\242\3729&\345\022=\013\366g=\201\274\316;\271}U;\031\234\317<\026\331\212<W\317[\275\376\211~=\231\'\333<\377n\223:\224e\366<\363\355\'\272w\231\372<A\036X=\263Y\251\274\372~\207=\275|-<\232\240\277<\025M\255<\014L\205=\337\320\332\275\304\0354=\023}\223<\353H\214\275_\354\231\275\035\323\231\275\260]\004\275\016\271\365\2742\354\200<o\227&<\211U+\274X\255\006\2747$\001<\313\355\002=\342\306\214<\023s\310\274:F\202\274\265\035\006=\rN\235<D@0\273\333\010\r=W$\\\274\311\204\021<V\370\300\274\250\334_=\331\217\377<\360\\\316;\t\002\236=|^3<\255\214\327<O-\023\274\202\361L<9\3251\273\335\252E=usr\275B\202\017;\005\325\334\274P\014];@i7\275\270\033\263=\326L\304\273\010%\247\275t1\332\275\0337>:3\'\334\274\\\347\n=\257+\306\272\037\322\221<L\203\240\274\030\244a=\031=\022\274\275\177@=\271\373\227\273~\200o<\216\241\344<\362\241+=I\026\"\275\347@q=\264\310\235<\341@\304\274\304\3049<\305\246\001\274Q\377\217=\235W\225;\223\220$\275\036\0164\275\025\343\200=]{\227\275\244\376\364<\355\035\265\274\235\275\201=V\223/=g\341\003=\014\357\014\274\212\262\220\275k\245\010\275\177w\023=_\026\204\275Gm\210=,\024/=&I\037\275\340W\253\274\347x\275=\323\370\206\2751\365\327:\242>Y\275im\'\275\255R\350;H\225l=\273PM\273\341\232\271=\304k\335\274\321\277c\273\332\215\216\275\013\274\334\274\000\223\025\274\352dG<\313\261Y\273\"BN<\250\360\202=\367\022\237\274\351\"\243\274F\274g\275\253}\225;;\324\243\274\372O<\274-&H=\225h\243\274J\013/\275\226fo\275\020s\016<\346\371I\275Yw\200=\005\305G\275\'5\265=c\343\231\274\022\270\236<\242#\014:\232q\'\275t\260\320\274\226\002\002\276@?\365\273\002w>=\340uD\275H|f\274\033\242/\275r\023\231<Vi\230<\326\031s\275\253Y;=\276:\234\275bMy=x\327\227<\360\003x=o\221\331\274\3005\344<\344M\245=_\223\267\275FF/=EF\241=\212\332\250\274\264)#=\013sN\275\274\376\340<\364\010\370<\336\345\264<\031t\372\274\372\t\337<\256\'1=M0\223\275b\3776<{\021\210<#\253y=\220\352\r<\2356S\275\361E\267<l\2744\275\247\243\371\274\312\370\264<\316$]=\220\200\364\275\257Zp\275h\024\335\274\027\252\014\275\215\006\036\275`\3321;)va<\231\346\341\275\262\3616\274\261\227\007=\273\032\260\273B\250\222\273\026\353\234=\022\327\036<v\001\302\273\234\207\210=T`\310\275R/\235<E\250\331\271\024\344\314\274\255\220\275;c\222\254\275R\010\036=a\t\201;\344\362a<\326\202!=JA\321\274\316\310h=\251\353Y\274\013\250\222\274\334\204|=P}\242<\367\214R\275\265{\333<}N\363\273\262\336Y\274\252\247\240=E\221-\275\035\231\264\273m\324\005\274V\'\243\274p\363\213=\273u\235\275\030\0004=\230PM<\201p\033\275\257W\245\275\213i&\274\2057\242=\375\300\342<\202\326\223<\215;\374\274H\002\023\275\315\206\001=J\341\032\274\253\250\\\275iG2\2756j-\273u\230\304\274a4q<\376\022\003=\351\0363\274\342\027\275\274\366T\213\275?\3211\275\320\260\314\274\341~\027<\360Y0=\240\203q\275\242\263Y<\373g\357;\200?==\t\3035\275\265\0143\275k[F=/]s6\256K\353<\0303\265<\353\027\366\275\366:5\273\3647\306<M\022\000\275\223\312s=5(<=a=\333;\177\245%=?\334\271\274\276\376\366:\210\220\032\274\3144\225=9\315\300;s\016\202\274\340j\r\275\265\213\202;\332\251\'\275\366~\200\275\020<\222\274\321E&=\235\243P\275\300\272\334;|\374U<HX\327<iC\304:\212o6\275\337\322\332\275\004&\316<~\201\372<\212\014\323<\303\215O\274\303$\t=+`\231\275,\271\247<a\230%\275\323\010\353;.AH\275\037\342\272<\266\215\334<\316\315\216=\306\346F\275\372\331\022\273\360X\036\274\367\357\262<@t\242\274t0\351\275\217\034\215\273\225\002\010;\362#\030\274%GJ\274\245\372\035=\215L\031=w\255\263\274\260\031\220\275`\201\002\276r\351\024\275\201\215\253;\332\226\027=\352\017\327;\367\031R\273\373j\250\274%\030\025=*\347\245\274g!:<K*\036\272\033\177\262;\355\355~\275\355\260\325\275/\000\272\274,\"\221\274t\362\300<M\013==\306a`<\232\233{\274\203\373\224\274\032_g<\342\202%=QI\013>^\202\304=\335\351\250<\307\241u\275\275\212\256=Y\260\301<\023\0273=;\321\260\274\261!\006\275\217\"d=b\200\022\274=\023{=\234u\223<\312J\024=\210h\244\2748\235\247\274\201s\326\275~\322\002=\037?\260\274\377,\227<\323\310\231\275\357H\002=\377\035\330<\203\307F=.\341-=\203|\264<\247\363\370<\310\244h\275%\226A\274E\301\362\274\232\245\331<\244\344\226\274Ak\371<\270\2241\274\335\000~\274\3316\016\275Rl#\274\265\321\225</\260\250;k\266\350<BP\245\275\246t\326\273\313z\202\274\205\030\262\274\246wQ\275\004\200 \274\230F\303<x\177u\275g%\323\274Z\200D;\0242\212=Yo\314\275U\344m=\241\322\250<\331\354\360\274lm\010>\257O\272;}#\342\273\025\232\227\274B\223\367<\002\025\362<ya\224=\254\034s=\360n\332=r\344,<\271\225\024=\022\014\t\276:\301\246\275\000`o<BA\253=\336\007\005=\241\324;=\2465{\275\014\020\027\275?\036\305<_\314o\274\'W\276\274\203x!=\313!\t\2756\201\277<\2208Q=\035\270\246\2751\031\001\275p\356\351\274\316L\177<kW\306\275\365j\317\274\366\235\000\2743I\205<#-\235\274\002\2244;0\222_\275\032\234\273\2749\010/\275w\330:\274\3572\303\274F\217\255\274\002\360%<\217l\222\275\031\017l\275p\267\004\2755O\273=\224l\315<\251T-<}\224M=?7U<\234\254p<k\240\233\275\371\235\023\274~GY\274%\033\361\274\024\337\014\276\037\342M\274C\207\373\274\225\1778=Y\017\215<`\375\355<| \232\273\03657<\033S\271<\014og<\250f\265\273/\"\027=09\030\275[\314\216\273%z\030<\365w\334\274]\355\367;~\341\320\274\317\236\t\276\331\345\023\275\304\252f=\206\254r\274r\211\214\275Shc\275\260\243\003=\277K\021\273g\371\207=\340w\224\275\254\327\372<N\333\324<:hW<\000>\\\274\035\" ;\223\032S=\347\361\355<**\225\274\263\257:=\"\341\307\274\2110\374\274A\234<;R\266\316\275\356\263\250\273r\2454\275\r\246:=~\3628< \242\375\273\357\242N\274\246\253\274<\'\241\310\273\032/\212;\027\001\244\275\310\343\265<=\300\"\275\022\302\225<\204j\240<{?\247=\341\321\212\275Z\305e\274A\005\240<X\325\206\275\014\002\311\274U\3626\275sAo=\t\366\023<l\"\036\275)\311\006=x\226\303\274\245\327\r\274\321\344\004=\2166!:\275\333t<=\010=<\224\354#\275\373\260;\274 \206\\\2744\274\216<\231\372\t\275x\230\'\273\021A9\275\367s6;\366\341\235\274}\020\032<\274\362*=Rj\025<\277D\000=\026\324\034\275A\022U\274\307\'[<\020\233{=\271\336*<\317Z\361<\325\267\376<\333d\321<*9\017\275m?\317\273ai\215=\272nN\275\027\346\226:\324\001.\275\234\310\024=\265\357\000=r\273\t<Vl\026\275\261f$\275\333\016\203=]J\005\275\266RM=\254:\271=6\274\241<*~_\275\322\340\344=\312\357\241\274\240\000E\274\300_r\275\236\013\243\275-r\222;\327\362s\275\016\273t\275!\206~=3.\333\273\204>\223\275\343u\326\274)\341\314\275B+\300\274\342T\203\272\037J\037=\001pu=\252\310M=\026d\004=\022\003\212\274\350\333\276\274\3705\242<D\237\351\275\213\315%=\212s\372;t\265\264<5\336\316:s\247o\2755R\177\275\2001\253\273:<\222\275\375#\003=EE\034=`\254$\272\277\265\201\275\023\302\227\275\353\232\340\274Z}\356<\357\020\345=+`\240\270A\327\256\274\003xl\275\236fq=\275\254\235\274cD\336\274TXO\274\037xs\274\217>\345<#\271\252\274\376d\270<\\W\227</\222\013=\230\305\002<\313\213#\275`\032\\=\tbb\275\320\004\243=F\275(=\007\357!=\000Mp\275\221\001\024\275\374\020r\274\372\271!=.\335N\275\370\3767\275F \270\274\274l\207\273\334/\013\275 =\003\275\342\211b=]\357\005=\002\377\344<8\377\270\2751\036\277<g\364e\274\366\357\251\275\344\016:\272X\257\371;\027\177%=\266\321\304\272lR!;\243B\346\2722\344\311\274F\331X=*\350~\274j\367\344\274 \265\203\275\3104\177<\250V\226;of\211\275o\252\000\275W\257\n<\01339<\302\221]\273\373\224\204=#\217\014\275\025m\252\274\014\251\203\275\034A\315\272\376L\r9\211\320N=\014\317\202=e\365O=\273\321u=n#\254\275E\277\254=>\224P=\264\331\255=hB\333\271\003E]=\371\201\303<\0302\336;n9\037\275\330\230\257\273\216\027\235\275\340\031\303\273#\341\225=\233\2468\275wq#<\n\266A\275 \234\207=\032\330\345<\366\204\033\275\003b\207\275\255\277\036\274\222\362\177<\233\2201;\351u_=E\272\014\274\307:>\275\007|\177\275\346dP=\300\016\"\275\325\261\223=(gC\274\272\372\341<\303#\231\274!\221W={\317\336\274\177{\021\275)\013\246<X\254\275\275N\301,\274\254\032\007=GH\t\275O\036\324<U\345\301\274U\264\327\274\271W\277=!\271\022\271\220S\226\275\242\007b\275\302\235^=\227Z2=\335\324L=y\377L=\233\230\311\273\222\247\024<#yN;\365\223\267\274J-\213=#2-=\177\272\365\274a\377\220=\217\252\014;\'3\230\275\202X+\274\360R3\2745\302c=\360Y_\275\017V\004\275\nM\362\274\214\202\354\2749C\252\274y\202\3349Y\372\013=\222\362\211=A\307\221<\017f0=D^\247=\207\334.\2750*\371<\234\342\354\273e\177w=f\371\023\275\362\260\304<\201\362a<\222\207W=\325\026-\2759Z\302\274)\334\243=\345Il<\250\001\323<\304\243\254\274\005\203\205\275\361U\006\275\304N\\<\353\325z<x\225\027\275\321\022\022\273\217\214$\275\202\301V\275\345\253J\273]\313\251=#=n=}\025\372<.t\017\2755\310;=|\265<=\034\265\200<\363\325$<H\264\314\274fRX=n\310.=rld\275\244\000v\275!+-\272\334\271\354\273o4[\274\351E\311\274ZD\327\274\304\201\263\274p\177\246<1\323\253;^\017\345\273\300\207N\275jE\226<\313\325\214;|\024b\274\372f$=\310\235\212<O\376\270\274\207\256\013\275\305\317I\275TO\212\275\326\372{\274\364=R<\346\3468=]\303\265<\352\235\014=7h\220=\316\013\261\274\207h\017\275\026K2\2757\333\226=\360C\232\273\204\206_=j\354A\275\037\\f\275@\303\376<\002\341c=\206I\332\274\035\222\312;\320\034\254\2748w\236<\211\242[;\367\324\310<:\177V\2755\277~\275/#\230\275\246M\212\275\224\276\377\274H\315J=&\001t\275\204\217\221=\3229\367;\037s\222<A{\027=\001i\243\274\271\205\325\275\377\373m\275<)\276=\323\306\n=r\020\244<\272\260>\275:\311\363\274U\325\217<{OA=\027x\334<\377\213(=\253\257\t\275\207xU\275`\263\225\274\"\250\263<\t[\317\274\027M\347<\"{\005\275_\322u\273D\262(\274\026\'d\275q\264\315<\3503=\275\247\371\272=`\nD\275\243j\372\272\202\236%\275g\343O\274\351\266\217\275\261I\337\274\346\314\332<\352\260j\272J?\356<F\203\003=X\300\371<\251\220x\274v\017\307\275\302\034\313<\330Q\001=:N\330<@*\307\274\341\215\257<\263\265\231=\350:\320;u\274}\275U}\272\274\205\241\326\274\014!\n\274Ps\226=W\213!\275\260vK=s\206\256<\035}\362\274A\002\344\273B\033\301<d@$=\333\007\034=\000\2553\275\350i\361\274\3575:<\274\362U\274\020\020)<x\266\036\274\244\037\264<\217X\211=\335%5<\213\033\225;My\205\275\211i\243\274\265?<<\033\270!\273-\302\316\274\232Hw\275\007\304I<2yf<\357\250\000=\0276\212\274\365#\325<\275Gm\275|\n\320:\304\331\305\273\231\tg\275\253\353::_\271g\274\221\275\n=\342\014\037\275\311\230\212\274\304\304\367;\343?F=Q\376\262\275\026\301v\274\372rB=n1A\274\316!$=x \204<\301\\\273=\232_\331\274\263\212\000=\336\\f\274)\251\310=plb=\232\354U<\210\003\275\274\317\006\201=+\022\3269\202\020\201<\253\032H<\353\243\215\275\245/\346<\027S\322<\007)\242\274.n\350;B#\025\275+\224U=\311u\245\273\273\3643\274\271\311\017=\212%\303\274\234\223\261\275\005\026\230:\272\3425<\254\3056=\204\033@\275\000\272\270=UQ!<\035\375\r\275\242\356\346\273/lK=N\004F\274pwA=4\271\254<R\377\000=\003!\217<\010\313\220\274]6\230\274\301\267\225\2745\t\341<\325\025\205\273&\315\250\274^\310\235<\264;(\2754\342v\275\217\374\000<T\240\001=\366l\263\275CpH\275o:\341<\220\352\264<\351+_\275\354\372\263<\340\204I\275\217\016\222\274\274V\221=\324a8\275\030T\231\272\215U\211<A\301\000=Y\231j=\210\021X=\226\017\352\274\367n)\274\362N\211\274<\211\357\274\253\266f\275\345\217\313;\202\267\027\275\027\322\326<1\326\235\275\230\216\253=\304\325\016\274w\020\372<\311\371\037=\271\374\230\275\177U8=\377b\236=,\301r\274\360\017\305=7\331\207\275z\027\375;\237\342#\275\272a<\275\215z\210=j\266\304=\246\315\222\274\001Y\240<\005K\035\276\001\362 \275\3740T=>\260\001>n\314\320\275L\247><\020\217|\275\320#\027\275?E\021=x\316\206\274q*\026=}\3737<i&\360<\253\261\226\274\203\354\000\275\334\027\217<\301\213\006\274\021\031\340\273L\271\214=\334s;=\343<^<\274\270\033\2751\017\310<\271-|:\354G\267\274K\335\033\275O\027\325\274B\246\227=\213Pt\274\225\347\200\275\004;(<\213\t0\275u\251M\275\355\237;<0\217\013\275\013\264\334\274\361&v\274\314\310\007\275\270\030\022\2742Q\340<\332cr\274\247\373\371\274!b\'=\366,\t=r\277\235\274\321(n;\376Fa\275\214\364\177\275\206\212\226\275jU\237\271ji_<\365CO=\020\200\235=M\256\014<4/\034\275\200\257[\275\205\203\246<\326\335-=\233\014\277<\330\273U<\273\271\200<\016\326s;\360\261\227\275|\244X<\365dW<-7\370\274tV\244\275\2652\n=J\214\213\275\22654<D)\320<\346\227\252<M/+\275S]\022\275\'_\222<\326\177y\275\255\362n<*Q\210\275:\207]\275j\212\275\274_\353\250\274\236\306\274;\372t\300\274\244<:=b\333\241\274\262\302\363<a\337\007\274\031\213\317<\235\373`\275a\310F\275N\340]\275\025.\220\2746\315\232<\\#v\272\002\312\014\274\324\017P\275\035o\002=\303\304\257\274\354\235,=<X\351<\213\255\221=\324\312\036<\026`\017\275\216\026\230<\030T&\2741\362 \275\200\371j=\020K\362<t\223\223=\267\253\340=\240\313w<\0345\341<2\247\340\274\277^\004\275S\340\247\275\340\301\337=\364M,\275\223\211O=\004\353\246=\214\277%8Xp\214=\245\253Y:X\331Q<\345\032o\275\025?\242\274|\301\211=s\260\301\274>\234\227=\331p\214\274C\006\366=\206\242J\275\20502\275:\346\024=\013\344\260\274\372\326\211\2757\366\305;b\230Q\275\252\025\275<#\253\205=\310\230u\274\250\016R\2751\372\314\274\277\3269\273>\224T;v\354)=\367\"J\275\301\215\272=\213\245\3378q\014\212\274\2274\203=\360c\034=\326\340Q\275\264<\202\274\214\255o\275\360N\035=\331.)<\225\332\033=\013)\211<kE\035<y\216$\275\241\032,=\227\237t\272V\311\327\275\266\315\033\275wiq<\014\352\215;||F=#d\347=\337\030\300\274?\331v\275^\034\007=\373\346\344;+\376?;\317\272\221<\231\341\035\275a\203\216\274\200\307\035=\233\035\273\275!\266\344;KX\033=\022Dv;\027\035\022=\213\317\003\275\035;j\274\363\037\355\274\013\240\005<\246\314\334<\265<\002\275\255\355\354\274!\265^\275LrP=\261\365\300\274\301}:=5e\262\2743RT<\350\006\203\275\370$\242<\310\007\026\2740\177Z<\363\210X\275-\331Q\274\333\341X\273+\343\346\273\207\207\007>\'\022\221\275\3121\352\2743\265\367<\265\254(\275\214\036\252:\253m\225\274\010\001M\275\201n\014<|;\371\274\ri9;\014\305\267\274\004\017\201\275k\223\205\273\36552=8\215\371<J8\303;n\\Q=\271\244k<\312\317\336<\023p\031=lwX\275\rpr\275\373\203\023\275\273)\004<\334I3=\232\205\304<$\251\305\274\353\nL=\235\231\353<d\355\277\274\335(D\274\340\212\326\273(T!\275\335#\271\274\265?\270<Zq{\273\002\260~\275\217~M\275A\004\273\274\3151\221<1;\377\273\215X\316;\216\022~<\314\234\226\274\251\020\230\275r\005\203\275\313\227\331\274\365\245\240=|\250\313<r\255\323\274!\374#;\306\201\256<O^\252=\243\377\352\2754\002R\275c\354\004=\347\036E\275b\355\220\275\345\366\211=S\326\036=vr\252=\350\303\250=\313\362O;\020\006\245\274\331\246\220\275,\035\342\275\221Qu\274\265\026\031\275\262IL=R5U\274O%\272\274i\256#\274\200H\205<\265\'l;\030\326m<\345\023\353:F\266\026\273}\300\326=T<>\275\003\307B=\375\311s=u\315}<>\323\316<Zv\250\275\270\352\215=\177b\003=\215\350\006>\363\024\356<\325q\264<\000H`=\254\251\207\274\211\226\354\274\253\276W<\345\347\237\274\243\020\273\274\335\032\034\274\3711*<5\001\037\274\306w\"\275\370\320\177=\331\022K\274\210\036\221\275G\324[;\t-\177=\245I\004\274\272\370\212<\311l\330\275\323\002\372\272\021\371\025\274\001\200C=\250.\223=\360q\221\274\003SI=\0261\366<\212\376\032=\027i\351\274S\331\217<]*\331<\031\255X<\241\277^\275\214\277\271\273\326\207\004\275\263R1\274\266\303F<\250[\216=\375\200\336\274\246\265\203;K\276\017\275\370_\020<3\246\302=\177\345\013\275\317\327\202=8\335\275;Q\370i=-\261N<tH\017\275\251\233\316;\177R\005=\234f[:E\006k\275N\231s\275\020\272_\275\233{q;h\353\223=\347|T\275\334\207\337\275\244\244L=X4\004\275#Ln=(!\237=\336u\260\275\342\356\224\274\346\003_\274\017}\332\274\372\261\331<\226~\226=\342\307\342<\271\233\'\274\356V==\257\251\201\274\371\363S=49\333:\245:\244\275q\256\240\274\'\374\274\273\306SK=\302\266\222<T\361F\274\262\205[\275\014\213\027<oDM\275\000\366{\275qX\023\275\276\256I\274\270IZ=\365T\224\275u3\233\275O4\307;g\300~<\303_<\274Q,\n;\246<;\2746U\317\274\266\302X\274\234\006\034=\270\034\017\275\023\226`\274o\3742\275\363\326\030=\237\234o\275`\022 =\010\346\002\275\366\002\032\275\350?\362<\267\351\216\275K\357C=/\265\332;!4>\2746\264\344\274\340B\301\275\014Dt;e\2542\272\366\322\207<\263\024\306<\213\223\224\275\301s9<\356a\220=_\237^\275Nrm=\321\005\273\2741%\236\275m\240\301<\342\\\034=\364\265-;\354j\364<\326\341\"\274Qh\256:\317\367\237=*\317\250<D\302\001\274\213Y\177\274%|\306;\022w\206=\327U\204=\014\014W\275\014\331\224<\177\262\"\274O\3575\275\254\371\025\275\032\317\217=W1\246=P\220\211\275\017\253\244\275V\3645=lL\001\275\212\205[=\232<?=\005y\301\274%T\347\274\206\023c\275f\014\310=]n\036=)6(\275\200\357\207\273\037\240\016=\332\354\006\274\020\330I\275\227\346\023=E\256\022\275\253\330\325<\177)\251=\271\325N=\352\027/\273H<\327\273\222\343\335\274\312\263\340<\354\355u=\315/\204<K \023\273T\031\303\274BS\016\272\010\021\265=\270;\002=\243e\t<\023\005\205=\305\353\216<X\315\016<\361\256\005<A}\331<I\301\024\275\242`\334\273Z\014\255<?\013\030\275\372\245\234<\275V\236<\203*g=\215\262C\274\223\234D=\351\273\014>\263E\024=\265\236k=s\032\033\275\326\353\013<C;)<!lP\274\211\375a<\211N\232\274\002\337\321=\303\\\332<\320\273\243<r\207\252=\211\222\265\274\373p\232\275c\375C=F\346\025\275f\365\334:\315\234q<a\033\007=\021\002\244\273\336\3542\274\227)\207\275\r\206\020;?\347\232<\215\212[=\036r\027\274\332*\031=\230mL;\327\366}9\374]\337\273k\372\337<\002/\361< i\004;Q\3439=\2535#\275\254N\260\275A\212\247\274J:\035\275h-\252<e\303\230\275\333\246\252;\213\311\207\275\215\374\321;sw\273\274\032\247\236\275>\360r:?\202\3259\221{-=\374\366l=\311\236O\274\373\342Z\275\253\276\213\273#\355`;\261y\263=\2578\354\273\202[\377\274\261\330\237=\366c\035=\374\321\244\274\266\267\376;ie\351\273x\272\252\274\t\014s\274s\367\"\274\033j\237=\204\356(=2\327f<\246\351\342\273S\220\261=\3135\306<\220\032\017\275\322sF=w<\303\274 \312@\275\344g\240\272\353\301\"\275|c(=\017\226E=\210\3514\275\314W\023=\340\r1=\034Z =$\361#\274^\306\334\273w7\303=\354H\253\274|\307(\275\240GC<F\251\264\273\n\366M<\261\366\310\275\376\330\265<9D\343<\035\213\021=\205**=\001\366\323\274:\032\341\274\n\006\322\275\341\232\n<-\322\025\275\245%\234;\335 h\274\354\334\274\274\225w\231<\266U\335<Q\243\013=\300(K\275\270#\002\275\311\221\022<n\222\027\275\362`\204\275\231{X<\272Q\203\275\321\262\236\275\005K\313\273\371/\214=\230\257\230<\344\272x=#\2753=7\035e=I\323\020<\364\2179\275,\335\250\275{\354\230\275G\231\316<\225\323`\275V\\\0039\020A*\275\"\251\301;\302\377\233<\\\274\271\2741<Y\275\013\nh\275\300\265\033<\271RY\274ctc\275|RC=I-\021\275P\254\223<\370\206\004\275(d\235==\025\005\275\313\024A=l\035\214=\274\266\243<\204-%\2743\027\220\275#\301a\274\370\377\341;\316T\304<\327\211\350\274n\205\307\275\367\343\t=\013\366\024\275I\266r<\377\334&\275\316\303N\275\224\261\257\275\227\341\r\273\337V\037\275\215\377<\275\254{\263\274\030\032\254\274`VA\275c\t\357=A\200\332\274_\222\313\274E\240G\275g\252V9\321\366\261\273\007\271\307\2749\266\267\273\371\022\207:P\343`=\364A\347<\210\265\203\273\334\010Y\275*\210c;U\024-\275\316#\216=\032\211B\275\006N\224\275\370*\017=\334\214\000=\310\037\r\276-\324\206=\364\330\335\273+\362w\275\177?\224\275\342}\346;\270\310\217\274\305\363-\274\301\366\360\274TR\203\275/\362\311;B\305\264\274\3269\201<\370\017I=\035\312\200\274t\342&=\351b\202\275\2249\237\275\263\237\375\272\272\363\212\274\214\357P\274\361\326-\275j\325\302<\254\243\036=\3010D\275\226I\253;\211\262\276<\216E%<\306\317\335<~\301U\275j\223\352<\367x\263\275\234\024&\274\374\016\200=_\307-<\\\372\000=\245|\243;l\237\364\274\373\032\001=\273\246\232=]\366P\275\\\t\234<\\_\300\274$\306[;\213\345/=\267\177;=\377\331[\272\370 \321\274\361E\001<\311-c\275UVj=L\3546\275+\244\361\274\247\361\377\274\333Lc<AY\303\275\273e#=V\243W=\317\211\327\274\022D\001\275jx,\275\356U\345\2742\034\016\275\030\217V<%\344~=\340\033\005\274L\363\262\274x$\024\275n-\336\273\272\242\275\274\000\007\307<k}\016=\307\304t=\017\252\362:d\351G<\323(\033\274jZ?\275\317\\\310\275\332\252\354<h\321\205\275\017g\177;\226\271\320<\336\370\261=z\t\237;\335\264\226;\367*\004<\255O\240\274\242\007\235\273\302=\023=0\304>=Z\205\341:\025\371\252<\222\r\210<)\347+=q\316\356\275q\225\r\274Y\363\210=E\243l\275\026o\273<\021\341\213\274\265\304\006\275\230\377\253<\251w\365=\003Q\340\274\232wG\275\262M\216\274\213\003M<U\353Z\275\345\3148=R\346u\274l\034\013=X\235\025\275\205\251J\275y\235$<\304\304\372\274b\266\240\2752\006\206\275\361\027n\274-\000E\275W\213\215=\177\'\032\274,)\241=\017B\002\275V@\262;\370\\&=\024\342\361<\365\221\227=\316\226\213\275\303x\227\275+\241%\275\032ok<2\220\007\275\261\206\004\275cq\201=\006%\254<mi\246\274\311\360\227<q0\037\273\010t\217\274\304\342\030>!\306\306:+&?<\344\234\355<XH\274\274\021D\205\274peE=\250\351&\273D\250\204=\246\346\350\274B\037@\275\363\324\245\274:7\316\274\355\301E\275\246\221\007\274\035\327\244=\215\336o\275\220\023\250\273\250\335\262<\3547T\275%%\200\275\0210\307\275\313nx=\335\231b\275\341\006\253=c\346\311=\276\257R\275\356\264\226\275\200$\324\275\217\237\035=p\343\317<\220T\214\270\250\2730\274\2528H\272\227s\245\273\235\252\206=i\026(=\277x&\275\363bp\275\004\234\315\273\271\000\201<NJh=\223\262\257<\354\200?=%\3635=\215\347\203<\271?\334<\205G\223\274\305\tf=\273a\223<.@\003>\267\213\216\2742\362\035\273K\353V;\242\310L\275\313\010\273\274w\003G=E\013\001=\202iF;t\2052=\306\032\236=*Z\260\275\2121\236\273r\034\312<\265\021~\275\010\260!\275\rF\001\275\242\034\246\274\243\2413\275)\032\005\274\006\223\031=\322\277P=R\227\274\273\202\256K\274q\2315\275\307\266\337;|\363\237\274HOo=\310j\n=\212\037\357\274~\\\223\274\354\317m\275\223M\'\275\277\333\302=\345x\302<\355\255\306\274\313\270N\275n\202V\274\311\221==\273[[=\031\275\r=5!\024\275\'\353&\275Tt\226=\007\010\361\275<\250\315\274d\235\205<\020\320&\274\232K\335\274\202>\311<\360\021\340<\312\300.\275Yp1=\305^\273=[\247\201\275\265u\337;\216\351>;\014w\226\275\212|,<\243l\323\273\265\032\354\274\272;\240<\272\227\317<Dv\000<k%N\275e\245o<\373\322,<l\027\260=\254\017\245<u3.\274\272.\216\275\377\245\022=\203\025~\274\375\223\226=\2660j=-E\236\274\211\367\205=\205n\302<{J\035<\271X\007=\242\2675<\312u\335\274\373\216\251=\204\316]<\320\337\022=\345Rr\274^\210\370\274\024\237\234\274\003\2737=g\017\251\275\"]d;[\036\275<\26353=\035\352\t<c/V\2755L\025=\021\274\352<\304d\233<d\243\244\274~NO\272\\\270\262\274\333Z\232<\366\311\225=\265\276Z\272nr\226=@M\324\273\301y\206\273B\242\361\275\013A\220=u\275W=\342K\021<\340&\341:c\301\263=\345\212d<9\253\200\274y\'T\275F6\256<A\333\007=\'\220\365\274\351\020\"\275\262\0341=\006p\n=\212\374\374\273C8n\275\241\265\221\274W\356\230< \361(\275\342\352==\374\225\202\273/\362\003=\373M\202;\363\33379]O&\275\'W\233\274P\277\376<\370\374\265\273\311\210\004\275LL;;\254\223\314<\273\232\215\275\346\214r\275\003\325^\275\301K\205\275S\237\236;\371\251N\275p\321\341;\177\327h\274\340\204n\274%\256~=!q\205;\203\370\245<9x\004\275 \257\034\275(\232\333\274nck\274-L\037<\304\202\022\274\226\346\314<1\216\347\274R\274\t=\262\337\320;\362N\336\274-\306/=\320O2\275\352\323\303\275\253\024\270=<3\306\272\265\363\"\275\341\326_\275\037\351\326\274\256\374>\275\027\210\241=\362\336\246\274\270W6<\332\327\263\274f!\037\276\371o>\2741\377C\275\307\271\366\274\317g\373<\264\367\200\274\271\362\321<\366\004\204=\351\300r=\341\351\304:4\277\000<\027\353A<gN{\272\023r\213<\370\220\016=\016\0273\275&X@\274\200\020\232<(,\214=x\343\024\275\004\246<=\004L\023\272;\335p=y\310\006=\27682=\341\261\261<\364\036M\273\347]\330<{|$=r\235\004\275\301\212\325\274_I\364;\372#A=\321\024\370;xR\007<\300\337\001\275\224T\363\273\330\264\224<\320(n\275\232*\221<5\203\207;@.U<\333@\204\273%\033\036=\271F\003\274\255\300\022=\022T\217=-\342\212<V\262\221=\365\304h<\202\317(=\257\t\222=\212\352\206\275\030vH<9C\267\2759\025\336<\240\347D\275\177R\'=\334x,;\254\345S\275q5\263\275\300\243\305\273\220\204\213<\207-\260<\233\371\n=\177\206\376\274u\274\202<\332\'(\275\210g\220=\321\337\"\274\272\032\373=\355\003\266\274\376,:=\213^\027=)\225\371;\320\334>\274\331=\205=\344\370]<\201*\266\274,\231\300\274\266Q\334\273Qp\023\275\251\227U;\363\326l\274>s%\274\237s\007\274\261<,\274T-%=V\256\377<U\230\231=\313`\211\274\034\3279=@0\025<6\270\216\273\307\007\030\275H\213\020\274tM{=\030\026c\275#_\245\274R\274\021\274O\374\210\273\307:\373:\346U\001=\260?\211=\310\267\207<\370\254\234\275\216\215\202\274\375\3438\273\032\261>\275%\202\265\274\367\243;=O$\221<BqC\275\247O\302<\274O\330\274[\307\236<\260\2013\275\341\255\202\273\2446y<T\316\n;\227D\340\274\302&\246=}\371\236<Ko\227=2\231\023<d\366&:,\200\t\275\361\372\024<\315\361\030==\037\000=\267&==\374\235\244<A=\253<\275g\274<%\017\022=\344\335\276<\241}\240\273\363\200D\273\244\023>\275\317\357d\275E[\347\274ph\000=\322\273\013=\250\005\226\275\337\023C=\261D\346<\373:7\272\374\016\325\273-\374&\275\264\303\003\275\354\341-=Me2=\343\266\"\275\273\247B=<H\017:\302z$=\305\037v=\024c\023<\254\306\200\275\334\365\242\275\273\246W=\260\336\226\275\001\2411<\274O]=\366g\022=\233\256 =\377\316[\274{|\026\275\346\345z\275\025\250Z\275\362\210O\275 \247\300<e\026k\275\251)\375\274\210\245\252=\242\276\304\274$4\224=\323\010N<G\034\350\273\215\0327\274g\355*<\327\324\206\275\271O)<^\203R<|,\374<\300\301 \274D\217\262\274\204\2005\274\207\231\000=\323R\213<\240\320\202\274\244\255\213\274I\244\366<\314\211\336<,\n\341=$\n\324;\253\331-\275\007\376\220=\352%\206\275\257\332+=\344W\215<Q\345\212\275\200\235\210\274\365\031\326;\n\320\305\274L\027\242\274\021\274\230\274\233\2629\275\267B\220\274\306s#\276\321bs;&\245\310=\003\235\035=\201\270\231<\313#s\275\321\235m\274\236\205\334\274qI\332<\030\276\264\275#\331\331\274\337\023\034=\366z\303;RP\217=F\314\260\273x\001\272\2745\361p\275+\"\371\275\027\353&\275\373L7=\352U\320:K\316)\275\3063\037\275\227\261\357<8\373\245<\332\3522\275%\322F<yc\352<\000GZ\275\206.x;\364y\021=2\324\261=h\254*=\000\204\342\2735~t<\251\232=\275h\332\365<w:[\274\035T\031\275,&j=1\301[\275\255\230c=X\2101<8g\204=\313\300==^\215f<\020m\271\274\014\017\024\275\022\026\225\2743L/\275$j\037\275\357\263/=\247\177\214\275)\222o=\312\\\201\275SW\226\274\267\032\036<\211+\274\275\367a\300\274\200\213\204=\007H\212=7\372\324\275C>y\275\005\\\274\2745\334\254=\216}\223\275\215\272\233=\231\"\323\2749\372\r<\375\270v\275Z>\214\275Y\005\034\275b\300\222;\321_><2MG\275{\267@\275\343S\214<\335\232c= \024\313\274\007{\021<O\304$\271!\206\324\2751r\t\275\350U\252\274wjr\274\315\214\341\274\206W\253<\001t\225<\331\375\325\274\267\001\264<\356\001\022<\345\264P=\224\337\307=B4\272\274\037{\277<0\354\200<\316N\275\274-C\274<\363D\352\274x\304z\275]\257\000\275\225\235O\273\242\027!\274{O\201=V\2265<\255+\336=\371\246.=\221\177v<\030\244\221\274\272EI\275\226\215\375<\261X|<%\026\377\272\357\322\332<F\034X\273\275/Z=p\025l<\312\341\211\275\2613\217<\360\276\233\275y\250\253\275,(j\274\223\026n=\316w\206\275\003\216\203\273\333-\325;\023\223X=\000\373k\274\311h\224\275\253>l\274(\344\256=N(\020<\357\2543=\222\227\323<\257\332m<\016,2=\2560]<\337|f\275PU\350;/\023\t\276S\t<\274\3739>\275\261\331\362<\337-S\275\234R\201\274\004\226\225\274\372\337X\273\303/\211\273\016\037V=\353\217H\274E\307\374;\371:\234<]\241I=\245\310\200=\257\330 \275C\034\237\275\252W\211\275\n3\200<\021\005\236=\245\220\316\274\220\371/=:\034}=`z(\275\340Zl<\265Z\353\274\305AY:\216{\303\274v\236\020=\177\367\007\274$\202?\275\177g==w\232\325<8\226\314\274\204\336\033<\223\"2=M\2371\275\271\005\201<w\253\342<\210S\276\274\206\351.\275\213\302\224\274Z\016\033\275s\251\247=\255\025\226\275\236\013\357\275\023\345R<\301\3017\273\354\331\370\274I\353\222;Pd\023;\'\346r\275\240\251\325\274,[\224=\271\2675\275\267\021\000<\024\224\226\274\334}c\274\346x\340<\226\267\242\274@N\274=_c\230\275jj\335<\313\024\037=\205\361h\275#RQ\274\331\242\331\273\212L\312<4\351\245=\\S\314\274~\360!\275\356((=\344\002J\275\023L1\273h\010Z=\0261{\274u\244\205\273\210\215\254\274DS\355<\353r2\275>\246s\274\020\335\035\274\356\230\344;\335\253?=\265\0337\275\322\342\r\274\231f\005<\214\273\"=\252.\271<\216\210\274<|0j\274\237\266\254<D\347R=l\354\346<>Aa\2742\245\264\274D\366\222\275\304\276\037=\350Y0\275L>k<\361\037G=M\271\363\274k#\205=\305\346X=\326\346l\274\254\275D\275\037-\246\273\207u\300\274\031\035\346<\306\214\224<\335\030\276\274y\253E\273\345\t\000=\256\231\373<\355\261\265\275+.X\275\\D\035\274<k7\275\360\235\020=\026\257\374<\345\301\240\274Z\352g\274q~\235\275\266\n\226<\021d\205=\0279*\275\335\240[=1\344\224\275S\225\211\275\001\315\214=\333\304\326\275\026\247\367\274+\3061>s4\365\272\234\222\275=\357\354Y=\243{\353\274\222xV=\014\215\307=\021\372\030\274\273\004^\274\326.\207<\016\371I=W\316Z<\376\247h<\356R\221=R=\242<\353\t\204;\005=\004\273\214\244\2209\272\210a\275a5]\275\330\2352=I\2362\273wu)\273=W\264<\202N\247=\312\337\243:[j\374\274e\245==\0048g\274O\347\326<\330\364\324;\342A4\274<Q\211<\035\305\364\274\036o\305;\360\321\201\275\236\223\261\274\023\264\200\274\342\303\351\274\276W\323\274\255fE;%\250\214=eC6=k\006\233\275\214\376>=\211\034(\274\261\355\354\273\277xf\275\335\264\220\275\200\022\244=\274|\003<O\031q=@\300\336<\333\030\360<L\341\001\274\004~\263;\377\366\007={~\312;\265\027\365\275}\362\243\275#W\023=\217S\357<(\0278\275~\356\023<d\320\213=7\342\267=\242\225u;\236,\244\274\326\322==\253\201\207\274\276S\260\271\367 \254\273\236\032\316\274\334\306D\274\360\376\264\270\027L1\275mX5\274\306\005\177\274\034g}=\002\200\243=\007\004\'=l?\252\274\023\002\205\275b\371\211\2741\346\330\274R\024\013\275\255AU\273I\003\246<\030\257\177\275AH\322\275`\237h<\300\263;\275R\306\373;\022\027\013\275i\245\300=7\207\311\274~\272n\274~\347\213=\327e+=@\353\227=\355+(\275#\n\217=\240\304k\275\212\372|\272\014\010u\275M\253\220=\327\230\215\275\275\346\204=\363\377\371\273f\310s\275\244o\251\275 ;X=\324#{\274\223\253G\2752x\312\273QB\027=n\226\000\275\343yt\275\317X\301\274\273P\033=gH>\275\022v\022=*\341#\275\177\337\301\2746\244\007\275k\211\000=\024\300 \275t)\307<%\307\t=\t\034\014\275M\267\363\274hY\207\275n\260~=\017\373\354\274\213\\\276<:)\373\272-\351\331<>CN\275\240\227`;k\375#=\370\206\021\273F\351x=\226\014\366<\326\263\006\275\224\353P<\265\276i\275MDp\2745\323\032=\225\307\031\272\224n\206=\000\232)=m\242\214=\247\247\376:\327\221\212:\0100\030\275\276?c=\353\271\244\275\354\231\010\274\215\234\367<kb\271\274\217\272\223\275\361\232\250\274\241a\232\273\201\001\304\273~\\\240=\305\211\332\274\0075\220\275Nv\200<\255\222\221=k\'R;\310lN\273kD\255\275\202c\020=\342\206S<\345>\251\274\262\262)\275\016\370\254<H\243A\2757\376\215<\004*2=1RS=x\331C\275\367\002\251<\236\320\275<e\332\201\275g\356\204\274\020Aw=\347P,\275\262\355\251\271sJB\275\334\022\032=\027\016\263\273\337NI<_\324\230;\332|/=\017\233<\275\205Q\025=\344\207*=\356\260\013\275d\300\376\275\342\372\021\272\235\270\220=\030L\315<b\333\n\275\345\216\225;\031\327\214:\311\210\252\275\337\236\017\2755P-<\356K\030<\207\n\227\275-\371\r\275o\363\315<XL\337\275\374\241\212\274\303\227\245\273\270.\250\273\332\262\200\275\"\367\250\275\206\316=<\212\005\275\274\254P\276\274\320\215\321<\247\362\356<\003\366\t=\261\242\304\274\215\263\211\275\335\202\362\275f\332c=\177\241\032\272!\356U\274\036\351)<Ba<\275Q\234\n\275\260\300\215\271\370\362F\275\334\002\007\275\035\213\242=}k\232\273tTW=\356\314\016=\215\310\367<\201\246\326;\366\365+\274\037q\343<\230\006)=\003i\220\275\346[\270\275\236y\306\274=\200\020=\n\032\014\274\252w\363;Z\374E\275\266@\304=\213H\031\274S\000\021<\372\014\311\274\002\231\223<o\342^\275\002\006\365<\216\255\017\272e\020\345<\277_\315<\274\374~\275\026\0023<~mo\274\005\343(\275%\302s\275\334\350\216\275\236\213@\275\244\216$<\r9\250\274_\002\326;\272`S\273wd\227<)\247C=\' \\\274\240\026\207=#\230\036\275)9j<\367,r<\027=\202=H\013\017=s\310<\275 \221\235\275\305\325\332\274\0241N\274*\330I\274n\245`=\375a\250\275\237\272w=\313\034\361\272`?\312\271z\333E\273\320\257;=6\003\206\275V\255\237\274z8\036<-\031^=\257\362d=\262\023\220\274\364T\000\275\326\365r\273\001\207\356\2725\365p\275\024\235\314<\276\204\221;4\004\237<\006>:\275\307\257\270\2740\227\304\274\217j\323\272A\255?=\024H\315\275\000\004\240\270\217\233\003\275qp\201\274\241`\236\274\375\314\227\2750wV\274\032\247\336\274\320L\201=#f\226\274^i \2750\277\217\273\313\330)=\226\377\225\273_m8\275M=\324\275\231oh\274S\201e=xw\344\275;g\251;-\305i\274\203\001\232\275\313\213I;6#\"=O\313\205\272)\202\234\275sb\311<\2013\351<1\255\316\275\243\210+<\0008q=+\246\315\275\026Mp=\027j\"=1\345\223=\366\034\233=$\032t<\300\375T=\216\\p\275\361/\225=\\\332!<g\233+\274\247\253`=6\304i\271\233f\215\275\316\367\302=\370\320\304\274r\251\355\274Q`y=W\317\222=\346z\260;\032\250\261; ER\275\214\234\352<J\301\330\274;]]\273\346jE<\327%g\275,\233\232<K\212\343=\'p\001\274Ma\206=\262\275\222\272\253zH=\374H\244\273\312\032\355\274\353S\254<\354\342\033\275\220\233\355\274\034\362\367\275H\303\036\274\210?\021\275\226\220Y=\t\374Y\275\325\"$\275\326\212\275;9\274\002=\013\245I\275\341\310\247\274.B\013=E\'p\275B\206x\274\301\\\225;019\2751\036\200\275`\305\331\273\332y\344<\013bD=0\213\3609\312O]\274\335\274\360<\202P\032<\005Y\233=\265\311\274\274\027\307A\275\002\007\273<8$Y\272\365\351\266\275\200\373\203\274/\t\226=\323\311\217\274e\207\240\274Z\312\304\2742Q\036=O\364\245\274\262l\264<&j\231\274\324k\320<\226\360^=%6J\275\221CQ\275\362\026\223=*\274\242</\243\033\273\272[w\273jhB\274 \222t=\313h\205\271\006\223,=`\022\305<owb=\341\201\001=\352B\230\274\341{\355\273P\260\034\275\271\017\360<\234:\276< \230\177\273\306\234\246\274\240\2341\274sm\304\274\027k{\275k\326\274<\211\337\226<\372\204\202=`\376F=\352\200\324<y\232\177\274O\351Y\275\276R\261\274\211\312`\275F\337\244<\256\216V:nqH=\037\326\375\274\300\202\201:l\230\367\274i\232U\272\035\320\014\275J`i\2749\005\255:\300M\334=b\372\356:\t\244\213<\305\305\014\274\3458\003\275\335\326\270\273$\024\223<\277\006c\274w\324V\275u\374\236<\322x\257\275A\361\221\274\260\377\313<\271h\245:\367\303+=&S$=\275_\235\275\374\270\265<\210\256\261\274\311\346\006\276ZO\311<|\230M\275\266g\334\274t\345I=\347\205\222<\201\371\376;p\350\361\273Oi\272\274\003\3379\275T\031=<s\372+\273B\2577\275\331\235\366\273\327;\367<j\212\347;s\371<<\265\255L\275\016_{<\324\t%\274E\204w\275\366\2173;\215\242\201\275\313\355\305;A~\360\2743\r\266\272Q\371\330;\234F\256=\\\344\226\274\0230\n\275\036\226\006\275J\272o\274<\205\t=\367\002\227\275p\240\374\274~1\244\272\331\220\034=\033?S=\346\273m\274\031%]<&\213\313<I\226\006\275H#q\274r\337\014\274\354\206\206\275g\264\344\274\033\036\235<rW<\2752\236\037<\'\244S\275\261A$=\236\\S<WB\013=\032:.=8%\205\274\370\007\302\275\364\360\000\275q5\"\275\360\374\207\274a\016G<\362Z\245\275J\244\025;A6\227\275x\003K=\271\267k\274\200\335\350<\376c\261<\333\205g\275\\\341,=\3312<\274\201~\223\274(\343s=\320\221;\274\037H\235<cD\251<\261i,<\244N\301=\355\013A;/\373\233\273\315u\253\274\277\270|\274\342\000x=\272y\204\274\320\307\337\273\321\204G=4\264\262\273\345\326\\<@\036\n\275o\221\261\274\250\344\030\275\022\354\030\274\252<T=\272*\360\274\300\233)=\301\341l;\265e\311\274(\232\241\274\353\344\214\275\372t\263<{*\343<\217\304\030=\001LX=9\002$\274n\354\247=\341le=\221\316\347<\220\016$=\022\213\361;\201C\\\275]\242\024\275S\031)<\226&\024=\255\1770=\364\007\334;g\375?<\030\322!=X\230==y`(\274\375q\337;;\\\246;p\263\370<\030D\202\275-WD\275\010\226F<sd\231<\343\224\376;\245m\335\274\022y\201\275&\310g\274\327W\246\275:\273\210=\023\245f\275\365\356\013\275v\t\n<\341]\255<\233\271%\273\224\351\254=\204\361\001\275\001t\245\273\017r\273<\240up\275\364\214\210=\r\224\024\275=L0\275\017 \274\274\234\237\317\274\303L*\275\276\321\034=Aam\274\376\245H=\207K\n\275\312%\306<\362}\022\273<\"P=\355\234\247\274\243\202^\275\n\177<\275\035\014{=n\331Z\275\301\247\320\273\201\255[\275\246\320\201<\245\330\361<\220\361\302\274\256\234\263=\010\025\001=\333\014\017\276\266?\321;\254\227\353\274#\\\227=\003\302o\275\235\342\023\276N\322G=\322\270\337<\375EA\275\220\315A=\250\276\025:\377\026:<tWa<8m\320\27432\206<F\306W=\016\3252=\207\027\030\275\317Pt\273\320\317/\275\n\341\211<h\027\033\273q\215\301=M\237s<st\372\273\255\241\221\275\035\217\"\275]\016~:;\310\213=\356\254h<(\235 \275W\270g\275\301\211\307\275\240\200\331=g{==\241\233V=\257\273\225\275_\223\226\273wD\215\275\366lX\275z\265\315<&\354/\275\243\346S\274\030\rh\274\275\206\335\274)Q\331;i\3466\275\303\334L\275s\267P;\374U\225;JE\214=f\357s<~\201\311<\276{\245<\260\224\306=2bv<\352t\203=\257\260N\275#x\036<\341\306{;\313Z\220<\362tI=\232\200j<9\022\246\273\242_\314<x\202\366\273\324\302Y=\307\241$<\021\340(\275\312r\233\273R2U=\345\375\032\275i\261\276\274\t\271\002=\312\226\010\275a\216\226\274\210\215\211=\377\311\240=\036\373\310<\263=\022\273\341z\001\276\001px\273\273=\010\275\0178\317\275pB5\275\220P\210\273^\343\200\274\213!\326\274\250\267\177\2747]\022=5\316\036\2741S\200=f\270\242<\356\233\253=\000N\017:\311F^\274\257\317\014\275\216\275\351=svi\273bt6\275\355dC= *F=Z\374)>mo\003=\314\242\231<\321:\036;\276\014\221\2745\202\266\274\235\214\365\273G\2216\273\003gp<\332$\032=$\266J\274\252C,\275H\254!=l\363f\274\204\340\251\274\3419\r=f\217\324:\302\375\357\274Hx\210\271\244\377\207\275\211\002\032\275\010\330e\274=\224\032\275Y\200R<\225s\255\274b\002F=\372\267\220;o\213\203\2754:\212=\271T\211\274}\210\231\275\272-\207\275\r\0259=S\302\"=%\356\205<\341s\221;3e\363<tO\324\274`\344\223:\231l\333<\206\036\353\273\315:\006=\244\377+\275\2021\377\273\2354\351=\370\035\235=\264\014\352\273.=&=\240)\203\275\333>{<\264\255@\2753\246\026\275\255\323\314\275.\344;=pmx=\223o\205\274UX\373\274]\223E=\272\246e=\t+\336\274\244jx=\t\005\200;\330\002Q\275\366\027\004\275\207\205\201\272a\306\006\275R\316U<\037\036\201\275!\024\233<\273\200_\275\334\210\035\274L\353\025\275zMo<X+\211=\335\334\014\273\316\211\247<J\336\255\274>\334\357=|\016\002=1xJ\274\212^\030\274\036%j\275\271S\021<\335\340J\275\362/\005\275\241\244\242=\367\3663=\352\277U\275\242,\036=\030T\326<\361\262\254<\346\343\003=\036\227\000\275\350\036\254\274\345\232\366;\343\256\240\274 \351\023=w\250\361\274\\\373\024=\341\206j;\361W\177=\351\023\273\275\207!`=:!O\275\233\362\341<\352\035\252\275\246G8=Jy\337<\232DK\275\341\r3=\254M\025<\363\033\020\275\020\356\267\274[8\357\273\r\265w\273\254\272\204<\270#\001\275g-\326<}\266\235\274\274\270\024=\r\023\206\275\305?g\275\252\213k=(7p<i\004\232\274\231W\223=\267a\204;\360\024\201:5*\351<]\273\323\274\203\024;<x^q\274D\205\253\274\n\0161==y\010=\363\345\027<\333<F=\3753R<\3275k\274Yz1=,\201\265<\312\217\200\275bS\320\274Ci=\275$\030\221\274\360!\017=\320\333\027\275\243\300\276;],\306\274\335N\331\274tC\206=\210\216\263<\252\202\325=\206\"\004<\301\006W\274\215\315\304<\333DB\275[\347\021\275DP\360\274)\350\230\274\370q\220;4K\213=\005\330.=\204\376\251\273\021\014\325\273\0178\260\275\r}\206= \017I\275\256F\320\274\004S\236<\327\271\245\275\347.\203\274\274\312\014\275S\220\371\273<k\031=h8a:\224+\246\273v7\317\275\263\0001=\t\005c=wu\206\274/\345\206<\035\301\366\274\037\366\014\274R\206n\275`b\'\273\323\037\304\272\005\020\211<e/\263=U\363\254<\250VU\275\322\321\307\274*\364h\275Y\314\240;o\366\n\275V$n<\237\234x\275d\333\236\274UZ\260<\311C\024=\351\366v<\342\213i=\177\317j<&\010\031\275\2357\217\274\200a\253=K\253C\275\001W\200\274\316\264,=\237=7\275\200\t\\\272m\3612=\272\277\225\274\310\311\236<x\006E=\300\212,\275s\2139<\026\267\230<[V\245=\325N\034=\265\034\242\272\014\303(:\250\344C\274iB\014\275\005\331\230\274\0204\325<\341:\335;V\037\360;\030\227A\275xw\365<0\tC\2740\206\202=\277\257\300\274\233j\304=uo\244<\262\014\013\275\223\340Y\273e\372$=V\3568=\234\032\236\275\271\217\312=^\2412;\'SI<9\262y=\374OE=O\004.\274\310R\203<\032`\365=/\217E\275_f\341; \321\"\275\016\036\034\275\2465\217\274\252/\247\273f\244u;\306Z\354<o\317\212=\0100\303\275\227\221\033\274\307-\331\275\007\240\347<\007\217\307\274\212\353%\275\213\005\324;\234\377B\275\034\201\023\275\356\030O\275\233\377\211<\231}X\274o4f\274\035 \315<\022\227\304\275z\007\r\274\034\265\037\275\002\345\177\275\206o)\274\357\313E=\213\237\023\275\345d\"=:\026C=I\335\010\275.[\302\274\262\331^=\337q\017=3c\232;\346\376\020\2753\006\363\274\272\334\220\275\253o\337<\024\223\273:\214B\364\274d\271\232\275\212\337\264=\033W\264<\314\276K\275\353<\232\275\221\274\306<\261\214\036\275Dn[<R\227\300=\2733!\275\267$\207\274\311\201\013\275\343\2751=}\366l\274P`\377:\2111\032\275\014i\3138\343)\220\275\024\375\332<\210\245\027\275\213\353\001=\027\310>\275\315\n\270\2734\201[<\267\376.\272H\263F\276\027wz\275s\016\365\274\037\2501=z\360\234\275d\224\317\274H\332\317\273\234\021\017\275\2155\226\275;\234\277<\234\377\302<9{\032\275\246\223\330\274^he\275\234\354\220=\237\\\023>\017\n\227\275\257uh\275xW\222<&Y\302<.\303\026=C\301\031=4>\222\275\306:\316\274\247\265\"=\t\377U\275l\"\205=\3129\210<?VY\275\301\013\021=w\370c;P;\245=+$\203\275\302\035\236\274\360r =`\221$<\364\002\323\274\253\325Y\275\352\330\362\275\277\201\032\275\331L\243\275\3020\214<$_9=>nT\275\320\375\250\274\t.\205\275\300\225w\275\244f\022;=\361\206<>\310\356;\246\340\322\275\247c-\274\177\014+=\020\243\202\275\271l(<\323\262x\274\376$\214\274\002YJ\275\221\333\353<J\277y<r\027\230\275P\326\207=\230\023\013\275\245\022\r\275`{\263\274\314\362\037=\241cB\275\270\256=<@\235\335\274\363\230\211=\214\231\030<\370ZO\275\234\210\372\273\342J\220\274oK.=\023Un<\024 \200<\254up\275\247\305\001\273\323g\004\275\327\344\301=5\363\037<DZ\220=\316\342\200\274\352I\213=\031\364\206\274\315\370A\275y\202,\275}\323\363\274`\352\n\275\2634J=\377\253\212<\342\347 ;\010G\010=\300J\235;\370v\340<0\t\267=G\267\'\275\035\3463<\231\017\242\274\376[\032=\353\373\310:\230\203,\275\323\305\335\274\007>:<\023\307R\274\200`k\274\316N\201<\324\024P\271\341\370\207<]\367@\275\0366m=\303\3434\273\216\243\024=\242Hr<\221\306g\273I\024\304\273KD\272\2747\007\021=\361\023\312\274\274\204\026\276\344\267\244=Dx\220<r\316J\275\261\250\343<\241\3048=\226\310B\275o\017\245\275VR\365<\200\253\201\273<\267\207=\272P\206\274Z\027\233=#\031-<\270\215\310\274!\323\235\274\3642\312<:5\202\275j\345\223<\233\177\265<\201\225b\274\272\230\254<\230\263\222\274\340\027\215=nf\324=\272\000\r;\261\037\330<\346C!\274+\r\332<L\033\202;\363O\033\275\330\'\322<\315#|\275\313\232/\275\330 \315\273k\337\346\274\'\310r=\346>\347\274\024\244\261\275(K\351;\010S\211\275`\003N<\265\262F\275\332\026\265\274\355}b:]\253^\274\317uI=eb\315;l\222Q=\255`X\270dX-\273\202=\351:\203\032\036=U\203\177<\306*o<\355\006U\273]R\003=\267{c=m$9=\274B5\275\320-3<\232\177\273\273\274\224D\275\262\343A<@xY=\207fp=\006\327\240\275KI\024\274P\003\253<\363/\333\274\034\342\021=\225\327\302;V\340\000=\032\244\206<0`2\2758\3121\273\014H\246\274,\237\356\274#^\025;C\204i\274(\224^\274\261\360\325=\371\334N=Q\317\336<\233C\320=#I\226\275\001V\246\272c\351\220;#\212\004= 0\014\274\3148A\275\347\377F\275\321S\214\275\377[R\275\t\220\252<\351\003v=\237s\304<\271\246\215\274J\331\244\275\325\027\r;I\010\303=\022O\004\275\245C\335;V\003\377:\035\227\214\274B\026\032\274\r!N=\3533d\273\t\005\313\275\270\222\317<N\317\242<l\271\201<\273\271\301<[hW\273\214\235V=\250\223\222\274\343\215i\275\313\370\267;\2001\"<\303-\020\275\366\202\226=n\234\225=\224\335}<(x\020=\321\202_\2757\251\270\274\364t\030\275\r\r\237\274D%\035\274\006\327o=\300R@<\003\234K=;%\204=\244\021B=\334r\036\275\355>\225\274z\331\207<\311\373\321;\344\240_=2#\224=\326\356\370\273\262\3047\274%>\242=dD\210<\352\252\007\2741\230\347:\324\217\003=\000u\200\275bF\256\275\023\2605\274j\222\271\274\352\022:\274)\2519\275\244!\360\274j\230\372\274\211\3014\275\366\272\t<\025HI=\006\232}=u\2465\275\265\312\013\275%\371B\275\371\276z=\023\255\370\272\226\272\341;\0307\225\275L\375,\275\277\222\022=\026\n\216\274\355\263>\275\216e\035\275\326\235!\275\330\007\374\2731q\024<\036\373\223\275+B(=\352\237\263\275\025\025q\275h\350==\010\236x\2742\032\356<\230\316\273<@v\335\273\n\371\000\275g\362\275=\252\247\224\275\242\032\330\274\322\271\251\274\006A\244=\233\3330=6z\211=\002\344\016\276\212\317\230\273\257EX\273\246\203\306:~\017\200=\257w\265\272u\255\240<\020\255\t\274-\352\013\275M\261O=::D=I\274o\275h\017\000=\207\375%\274\030\307\';\215y\200;\311\376\014\275\r\277T=|\353>\275\272\254e\274g\357a\274\362j\242:\336\245\240;\322\251\334\274\324{\177=\231\224%\274o\320\002;\321\022}\275\2764\226<\305\325\266=\330\270\207<\013\254^\274\260\327\017\274p\020\222=\tV\305\275L5\214\274O\2030=\225\231\220=9p5=y\227Q<+\003\245=\t#\317=\001\000\216<\223^5=\001c\t\275\005\007\222<\260U\n=\254\240\324;L+\223<\014\302P\275\344\017\234<\312v\304;K\221\234=\220\355\337<\334\031\206=\261a\215\274\014or\275pog\275\211\256\210\274\0267t\274W\"\002\275\350W\327<\025!\273\274\232\021\372<e\3320\2756Qn\274k\"C=\016H;<L\004@\275t\254W\275\3620>\275\374\317\020\274\335y\344\274\3714\230\273\"\016T<&\003\003\275\235\013\277\2739\226\264\273<\254r=\212\357\253<\367\373J\275\246\301\272=\n\267\254<:\313P\273=\232\261;D7f=\275X\034=^.\271\274\030\000f=\201@\203\275n\234\032\275\206n\370=\032h_=\020\312\001\274D\357\275=\377\021~\275!\316@\274\022\212\335\274\242\376\265\274^u\022\275Sb\246=]\004>\275\352,\203<\245-\315\273Z~n\275\210\235\215\274\337\222\317;O\330\236\274o\215\005=x\372z\275\320\306\023=\205\037\206\274\251-R<\202\226\003=\306y\034<\034\307\225\275\337\220\214=\264\005\251<\001\210\027\275\314\224#\275\375\355\226=\"r\343\273k/\362<\004\360e\274\270Z\254<\220\230\251<\026\244b\275\310\"\330<\211P\010\275\276\006\r\275E\372a\274\303J\274=X\300C=d}\275\275\000|@\274\272N\363<\016\361\234=.\362\211=\253\177\002\275\221\245\230=!M+\275\205\304\3019Z<`\275\010\244\024\275P\377\206\273\242\000\231\2753\301b\2756t\353;\251\377L\274\025\007\030<\254Q\216<\3537C=\312\324\211<\024\036+=\"\333d\275\317\375\306<\261\214{:8\360\220=\340\325\031\275\n\345_=\373\016\"\275\221\317\240\274\206\257!=\225D\341;\025-\274\273\032z\205\274\230z\272\274\267\373\312<\367\300R\274\000$\002\2744\330E=\t\017B\274\275#\201;u\021\017\276\343bM=}\224\n\275\355\203\026<\021\311\004\275\264;\322\273\253\034\211<\0105\006\275\235\203!\275\222j7;\301K\030\274\001\240;\274\013C\205=+\255\303\274J\2115=\263o\212<y)o=\201\rA=\256\225\001\274\372\014P=\337\241\332<\332~\300\275\214\302\305;\300\252n\274Ql4<=j\304<b\354\220<\235o\205=\350\367\236=\277\357\333\272\307q\014=f3^=)e\364\274\203n#<\216\353\240\272\316\240\025\273\242\235\307\2742\361\336\274\344\266I<\3208/<\3509\224\275N\343\376\274m\032~<\0179!=\'\037[\275\337pT=\343\216\017=\364\254A=\206=\275;A3\001\275B\255\255\275\312\367\031<\2333\226<o\371\243\275*\225\000\275\020\237f<H\020\206<\372\330Z\275wl\026=\255!\027=\272\241\3559`\2279=M\364b\274`>\220<\"\026z\2748\244\375:\343\240\300\274\023\3015=\272\324\242\275\3239\354:J-V=\273=x=\265kg<\003\205\216\275\303;\r<\270\"\016\275;&\242=\255b\201\2755\347r<\336Z\001<\234I\224<i1\340:G\"\024\273\362\275\002<\237y.<M\034r<\031\236\200\274\022\351,<Zhx<\347N.7L\313m<\367cU\273\223\340\2319P\225\306</R\203;I6\n=\322\276\257\273J{\333\274}L|\271\276\262\367=\230\336\036\275\t\250\006=\342\'~;\300\363\210=V\315>=\333\2303\275\260}x;X=\023\275*\227\274\273F\240\304\275W?\261;\252\344-<\376\345\277\273\027eh<[\373\205<\016\n\036=\024\324U\275#\0328\274\371\331\236\275\303\267\325<\177\035$\275\"\216u9\017\337\020=\264\213\361<\013=\266\274\003L\364\273\245\207\322\274\343\207\216\274\310S\211=k\353\225<\214\264\036\275\350\223\354<1\014\322=\201j;=\206w\356<6.4=\306h\221=\327\317\256=r@b=\361\3666\274\243%c\275L!/=\214NO<,R\251\274\326\324\'\275\352c3\274\3513@\273|\274\021=\204a\026=\257\262\207<\326\3751=\367\037\272<\260\323\365;\033\000\016=\247\226}\275.h\210\275\027#!=\367F9\275\223\t\325\275*\374:=\200\305\271<\010^\036\275\371^%\274\312\357\231;\243\2003=\320\322\276\275E\373N\275\305J\r\275\214p!\275pq\216\274\355Q\230<8\223>=|x\351=n\226\336<\256\250U:I\026N<8\013\257=Ul\037;v\307\327</}a=qT\326;3#\024=p\355\355\275\307\301:\272\001\177\n\276l\3005\275Oi(<E \203<\315\207\237=j\272\204;\203\013z<\204\373\262\275)\331\207=\222\025\"=\302\333\240=*[\372<\323`\340<\323#U=7\306\035\275f\224E\274\305\255\253=\027\205\262\274\274\344\244\274\224\010w\274g\317\304<\203\243\240=\254\254\037=W\276\263<I\314\250\275`\213\274\274\034\356\333\274\242hH;=rB=S\352F\274\226\271\273\274\354\243r\275\272\252h\275\325\207q\275\031L\244\274\243\023\007=\363\250\202=\nyG=\376R\247\270\020p\226=f\204\366\274\233\275\353\274M\247\036\275\377\240\367<:&\214<\305\327]=\345A\036=\027\016\317\274A\363\225\274\367?\231=?l\255\2751\266\237<\341\312\343;\301\035\260<\341\232`<;=\036\274\200\"|\274.b\355\273\0104<==\301\345\273\031L\234<8D=\275\366\310\321<\364\300\372\275\2255\222<\021\013\307<=\0147\275\030\t\014;\242\315\022=~Qh\274q\"\t=z\276\354;\233N\227;\217P\202<\261\254\355<W\256\013\275`\231L\275\217\013\241<\214\212\244=\303E\310\275\250\t\241<z\240\321\274bp\220<\263\330\327\272\353\2768:\256Ui\2741\004+\275\244\253\245=\266\234N\274\265\212\370=\267\322E=@\3526\274\330s7=\361\212\004=U\3167\274Zeq;W\301\240\273\305\211\341\275\252\331-\275\375\0049<Gl\256<\223+#\275\025\314\363<\331\345M\275}\034\226=DA\315\275\337a\325<\364\331s\273\377\267\017\275\242\344<=i\337Z=c\233\004=\265h\216<\326\3414\275w\300\306;\241\365\336\274\036O\230<b\250\314\273\305X\2129L\201I\275\256\266!\274\245\204\234\275\nV\375\273l\321\305:/!\341;[\202\362<Q\331\240=\373\033\360<\221\325\235<*7\216<+\022\t=\267\342\237=\022\032\235<\375\203\315\274\243\205\224<l\332\212\272o\341%=$*\307\274\26447\274b?\014\275\225<\302\273\374\r\302\273\350\263+=\362\016\005>\\\353\007\275\202\001\025\275Q\022^\275\317}\247=?\263b<\344_0\274]\376\245\275\241\310\267=\037P4\274\032\340\205\274\337tk\275T\344=\275\022\371-<\346\035\274<\311J\211=\357F\001;,\tV;\345q\330<a&\241;.\346\244\275\207V\272<\252\267\307\274\340\255\335\275\371\223\276\274\306\000\221\271\014\313\233\275<\215\036=\266\203a\275\\\345\001\275\\\232\214<\244E\021\275\223a\371=\177\315\203\275-\277\010\275=H/\275!\356\242<\356/z\275\361g\r=\242\t\010\275h\227\364\270W\2665\2751q[\275\000\033\345\273\364w\337\275\377\366t\274\330\002\352<\256\366Z\275\264:(=x\034\344\274\r\332Y=\320B\342<\001:\220;\304\210-\274D\251\346\274\245\243\311\273\250\257\024=]\341\220\275\231\340\213\273\350\026\236<\314w\036=\025\231D=\t\276\367\275`*t=pg,\274\035Sn\274\234\036\367\270s\236==)\007\215\2740\375*<\025;\315\274U\214\264<.{d\275\371(\232\274,x\227\274\271$\242<\026i\003=\021\370\035=\345\330\224=\013\034\021:w{\031<.|\200\275\277\253p\275\3710\026=\210\265\211\275\3741h=\345J\035\275\364\020\214=\2250\010\274\361\000\325\274\356-/\275\235\376U\275(T@\275{\313\244<\357&\253=\321\305\211\2748rb\274\353\251\327=\274[\006\274&}\211\275\364dM\274\320\036\301\274\230\321\221<TyA\273}u \275\230\333\021\276\230\210\221=\372\013>\274\025)\010\275n\374\207=\362\nX\275\256\347\241\271R2\357<\347\026\216<\264\021\024=\276\361u=\022\231\220\274\003q3=\352R\317<\274\306\223\275F5h\274U\210\257\275\004\272\022\275U\032\006=#v==\363\305\354<CsY<4\326w\275\305{-\275\237]\034\2738\267m=\021\3248=\206\300G<\312(\320:v\342>\275L\020-\275Y\002\261<\262\374\032<\3537\214=O\265\233;\022\310x<\357n:=a\017\217=\212\006:\275\314\005~\275\260E}=\241\370\020\275\013\330\211<\350?n<\271I\311=\3212s=\301U\345<\327\361&<\271^\016\273\321\267\230=\336\235\312\274\332\327\032\275\272\234H<`\262\326\275\263\247\327:\331\243t\275\r\220\036\274\262\345W< >V\275\264:\222<c\365\373=~H\r\275\'=\327\274\344\315A<\274K\276\274Q\351\246\273\361\205}<\273\343*<\272\333\344\275k\225w=k\371\303\274\342\tR=\013\320\316\273N\007\010\274\346\001\250<dy\213<\201\357\304\274\024TG=\231H%=[,@=\027Z\200;\224MQ\275\325\263\030\275\250\243\002\275;`\262\274G\326\005\275\357\266{\275\253\361\310\274\343\354P\272\r3\223\273\177\320\017=\330B\367\272b\326\246\275\034\2263=K,\\\275\224\310-=\256\036{;2\207\212\274\0337\313=\347\'O\275\364\262\361<\277\271\372\274\275\005&=\275\247\230\272P\240\327<\313\325\020=\245\027D\274\241%\361<\237\204\227\274$s\212\272:D\212\275b\336I\274\022\332\376<\264\214\033<L\205t\274T\267\361\274{E\254\275i\377\225=\236\031\255\275\376\253?\275\\\275_\2743d\332<\225\031\234\275\255\251\274<3\"\324\274L\216\255:B\007\036\275,\212.\272\273\016D\272\206\035\372\273\222\242\371\274\207\245=<r|S=-\r\203=\374\215\317\273\330T\262\274\226=\350;\350\2101=\242\035\205;Jf\236=\272\214\004\275&\026+=\354\033\257<\260^\234<\241q\325\272\371}/=>:j=\340\031j\275 =\005=\376Y\366\274\207y;\275\025\311\233\274\002\025\205<\367\261\371\274\373\316?\2740\"\014=}n=\275\376\336\247<\021rm=\0229\253\274\344\313W=\341:\326<L\2718\2751S)\274\177\326@\274\376\001\000>\200\334\221\274U\031\217\275\344\212\306\274\201iI\273\245]\004\275\341\215\326<g%\276=\203\307%=\260\270\235\274\250\340z\275\374\017\223<\345\267\'\275\315\301(;\277{\243<\037\215\240<\213\010\r<\356$k=Y\274?=r\347\300\274A\370\014\272\337\302\010\275\265a\351<\363n\007\275\216\237\323\274\030\243\245\274)\254\035=\020aP\275W\220\031\273\003\241q\274eDa=\256,-=\332\\(\275\017-G<o\324\020\273\032\211T\274\262\1773\275\265\201\300\275\024E\367<\177\201\000=._\3367P\226\322=O\010\242\274a\367\273;\357x\023\274\237<U;CD\312\274\357\030\022=\2021S\275\223\030_\274wK\347;\222K\352\274\307|\376;\233\270\032<\231\027\320\274\245\315\355\2747\234\002=\n\225\233\274\032^\254\273\322K\320\275j\367\007\275\230\031\201\274\273\225F=(\361\320\275\255z~\275Q\201H<\265\270\201<\301\251&<\030\312\225\273\2104L<\235~\263\274\263\364\370\272%]\277=\273\271J\274p=G=\n\311?=?Z6\275\207z\304\275\333B\253=\372~\306\274\t\007G<\006f\006\274q.\270<\263R\343\273]\275C<G\000\237;\246I\207\274f5$\275,\306\201\275\346\316c=kIX=\372\217\007\275Q\345\350;@\205\307\273\014\265\253\273\352\260\353\274\212,Q\275{\352\217<:\r\005\275\326\021`<\200\017\202=v\3542\275\3173\212=\257\347\256=\2604~=@\366\260=\3705\242<$\366\r\274\361\245\002=}u\222<\342\337\026\274:V\210\274UZC<\205K\036=\224\237\365:\366\343\366<\251e\025:O\264\\\275\004\213\234\274\243\361\263\274-R\227<V\335\316=\n\317]<\003\003\003\275L1\246\275v\221S;\201\370%=\226\373\245\275 ,\036=\312\274\302\275\322\3142=\265\216\203\275\n\024\230\274\216\271\027=\251\237A=\373\350\355\274\252\250\350<\246\237y\274=`\036\275\371\320_=v|\032=\3727\006\275q\360\225\273\220;\321<\021U+:\360\276\004\274y~\265\273*\3102\275R\221\017\275sI\016\274\267\322\314;\313\017\337=o?\365\273\360$m\2756\373J\275+\365\r=\257\272&;\210\271\014=\02343\275\t\252{\275\207b:<\207S\030\274\217\251v=\217W\200\274\375\263\305;\026\371\034=\311W\000\275\340\r_;\333#5\275TF\240\275\2435\211<\322\302\014<\271\177\323<n\375\024\273\225&\200\275Vz5\272\370\264h\275\261\265\240=pS\221<\367\335\n\275\213\214\354=\306a\365\273\350\016\005\2755N\340\274i_\037<s\361\023=\013\221\246;&R\204=6\236\234\275_\3301\2755\010\212\275@\3769;\222\2139\275_\312\237\272\313\021D:\363\351\325=\225eS=Niq=%\244C=\025/\n=\343\013>\275\361g\312:\275\\\351\271\362\230};\311\\\240\2759\001\341\274M\300U=\375\311\030<\313\304\365<\265![\274\363\003\213<\276\333(\275k\025e\2755pu\273#s\317\274\303\275#\274z\214\215\275\324\311\245;\301w\364\274\307@\212<\3614\263\274\"e>\273H\236\222\275\022\350\\=x\222\343\274!\310\367\274v\311_:\001\025*=<V}\2759\225\342=\007\001\030=\221\035%\275\020\202 <\365\240\034<\357\242)=\205w*=T8\210=\221ut\275\353v\202\275\200\2048\274f\231`=\021\3423<\243\232?=(\030\344=\r=\232:SJ\005=\254\265\353<\361\240\006=\262s-\273E&6\275\256\226,=\302\240\346\274\363c7\275\236\314\220\272\357\032\355;L\373\222=q\223\224\273|\243h=U\216\024\275\216\014\247=gOP=s\335\177\274\277\332I=\301\213w\275\340Y\262;\373z\205=IL\274\275\367\362\302<\2528[\274\247\024\r\274\332\210\010<\035?\245<d\360\305\275u\344O<\211\325\261<\303\252\372<l\362z\274\243s\006\276rJF=@\273\353\275z\2476\275M3i<\255\0251<.Q\336\275\224\336\242;/\"w\275\374o\266\274\307}3\275G;/<\327\256\231=\340n\025<I9\020\275\233\360]\273?\233g\273\013\300\307\273U\321\316<\344NB<\366F\212\274\031t\007\275\201\220w=Ro\006=\273\303N:|>\352<Wk\250<\303\261\246\2748\301\313;\340\356Q\274G\354S\271(\257\273<\303\326\014=U\357-<|\233\007\275&\270\303\274V_\324=\315\016\022=\030OC=\262\203\235<\253\226\"=F\371\367\273\240\246~<\250\352)\274,\006F\274P\224`=d\320\346\274\031?\357;w\317z<\311(4<\002vl=`m@=\331\317\322\275q#9:\307\177\t\275<T\270\274A\231\202<y\346\206=\272\0226\275)\343s=\234\000\357<\302`\374;\020\363\266<\010\014Q<V\276\242\274\237\272\177=d\002\326\273iw\236=/C\344\274\345\335\033\274~\365\006\275\255\231\037\275\003\233\016\275\262U\t<\304gf\274C\333\003\275h\002\320=\251U\274;x\225G\275\334\357l\275\222fM\275\343rh<w(\307<V\320\022<\226\201\324=\321~\300\273\362\265K\275\377\332#\274\227\212\253\274X\221\313\274C\002\235\275DW\372<\024\250\211\275\325o\031=K\205\250\275\365\326]\274m\233\200\274\362\234X<\322\265`=4\037\247\274\205GB=\001\237H=\210\316?\275\304\n\226\275\303j\266\275\362\225\t\274\230\033\003<\236\337\334\274<\322^=\311\363\342<rm\205<\0073\'=\350\255\365<\341\365\006<\207\360\331\274A.p\275\301\203\002=o\376\235<[\324\307<\354z\246<\324\306A\273i_\r\274qJ\275<\233L\262\274\207\013\275\274o\031\323<4z|=yog\2756\254\207=^\341G\275\233$\253;,\236|\275l\323\303<\206\377_=\326\371\016<\334ln=\177l|=V\354\013\275&\243\310;\250\213\210\275\034\277\221<4\311\323<\0008\010\275\002\266\002\275*s\000\275s\364\334\273tB\376;9O#\275\304\314\037\274\315\226\030\275\225I\024\273\ty\273\275[\331_<z`L=$\026\216<I\324\177=\274\324\211=I\023\352\274\361\210\212\273\313|\261<\223\220}\274mv\n=\265\032\006\275\237}\r<\217\377\223\274G\356&\275\254|!\275u\367\005=ZI\273=\353\353f\274h\232\333\274*\005\223\275z\203\336<Z\262\n\2751\3721=VF-\275Gg\205\275l\352\317\273+\311S;\241^\275<\000Gx=\222\274j<T8\305;!\037\321<6\262\203;\243\253\262\275\257\311~\274\323\360*\275\200\376E\2759}\036=\247_j=\251\225\314\275LTP<\377dH\275\'[g\273\0229z\275J\214\266;\022K%<\003p\215\274f\211\251\274m\232^<\336kf=\272\020\323\274&s\235<\n\255\255=r\201\r=\033|\342\273\207\212C\275\020\036\031\2758e\332\273Q\211z\275\n\0271\275\014G\364<\241c\271=\320\367\276:\371\336\264<\351\224\267<\262\302\217\274\020\241 \275\003\026j\274\355\203\n\276\262\240\025=\006\371\305\273\256\355\027<._\037\274\344r\233\274\340\330\314<}h\034\275~kr\275\333\340\034=^^\205\273/`C:L\\\027\275\356\353\316\274\326j\322<\236\256z;2c\032<\033\214|\275\364\2446\275\264\343\031\275RI;\274h\376Y\274p\003\001=\365\211\n=\331\034\323\272;0\216=T94\274\232\006\270=\203\310\203=\244\325g\2751\216\026\275\\\006\260=\376\3365\273\024\350\312\274\005\254k<\275\301\354\274\245\246L\274q\367\020\276\025\312\226\275\221\306\266\274\210\202\225=\246\023\265\275\375\027\330\274.\006\261\275B\375f;MA\215<uh\305;\336\350\212\275\177\247\262<C \032\275\227\005\033\274\006\212\204<\224\212\217;\017P\212\275{|\356:f\303;=\205\245\222;\220l*=\264cX\275\205K\003=>\223\224<\240\221\255<j<*\275+\254/\274\252z\320\275o\344g=\242\322\254\275\314\0135\275l\377[=\223$7\275\254\276c\275\260\2361\274\242\270\273=\356\264\201\275\363\347\276\274\300\212\271\275\255\010.\274\307\224\372\274376=u\256\312<\303A\343;\211xf=\352\220\003=\342\305\270: \274\013=\263\337>\275f\003T=\377\325\200\275\221\330\375<0\233\312\274\303f\250\275=c\340<\342\300=\275\207\207\204=w2\251=\254U\365\274(\301\301\274\026A\253<\242)\326<F\032.\275@e\240\273\010\234\260\273\313%\265=?V\261=\277\363\226<\235y]<\247\346g<2k(<\214\237\335<\202\320\"\274\013\337\376<\317H\346\274=1o\273\324{|\275\177f\253\274V\231\021=h3b\274\035O\215<v\212\331<z\236\246<\351vF\274\211\255X;\2629P=f\035\357\275\306\326\320\274\243\351e\275\0364\240\273)\372\367\274l\007\207={\244\230=.\261;\275\335:\306\274k\272u\275\244\016\023\275\253\326\256<\203/\264<\341F\221\273\317\263\205=m\352\000\273\004`\345<\245\210\350<\361\270\004\275\300\262\006=4.\267<\2538+;\020\233\367\274\000t\027=\223\227w\275\231?\240\274W\371\223<!H-=@\2470<\036\030\303;\245\300l\275\210\371\340\274\254\376\250\275\2533\213\274\376\234\037=RD\003\274\235\311&\274\272\313\210\275\271\227\007<\211\346\314\275U\352\222\275\366\351m\274O\257\233<U\230^=\306\362\203\274\3304\253;i\375\013=)\340\226<\346\024T\275\254\2176\275a\'\205<\326,\210\274\244l><\363\000\021\275\002\021\232\274$\3677\275:PU\275\r>}=\337\010 <\021 \034\275\270\207\021=\364\361\006\275$U(=\276j\246=\010\314\367<*\372\"\275s3h\274x0\345\274;\213\032=\017\210*=.\230\254<\252\240)=\361&\214=\024:\322\274a\021\014=\247rJ;\304\346\032=B\321\270\275@\310^=\201\024w\274\203u\270<Q|,\275E\360\016<\314S\257\273\023\005N\275=B\346\274H\027\251=\005\000\347\275\232\036\n<X\276Z\275X\224\363<\234*p=\1772\227;\\\230)\275\360\342\263\275\320\005Y<7\210\331<\026-\273\274\373\2445=$\225\245\275\263\375\033=PX\"\275\355\003G=\321\275G\275/un=\n\337\365<\006p\236<*`\352\273:m\200\273~\2332=p}\270<\334\2015=Q\351>\274\342\310\014=Ky::\211\326\023\275\262F\007=\005r\240\274\037o\000<(\316\265=\304t\274=4(\204\273L\273t=Y/(=d\332\263\274\2256\350\274\254\226\256=\3222m\273u!\201<-\310\301\2740\270\362;\202$\235\275\370\023\263=\361X\236\275\020\265&=\206\237s=:t\020=r\016\314<\351x\331\274\332\014\377\274\355)\023\274\365)\304<yF\000=\256\023S\275\033o\r=\376\226\003=<\373\206<9\376\230;58\024=\243\303\327\274\255z\366<\\\257]\274\371d\257\273\327\264s\275\"\024\030\275m\367\021=\372&\352\274^\353_\275nH\334\2734>K\274\246\300\\=\226\245H=F\022\034\275v\n\326=l\033F=D\\\366\272\017\224\210:\207!\346\274\240\374X=l\261\346\274\033S\353\2742\022\331<\014\204\223\275\265W\321\273\300\033\234<ub\275<\275\232\235\275\356\r\003\275\217\337&\275\312f\221\275\022\217_=\226\305\207\274\324\2733=\364sz=\n$\261=\033\n\317<\332\352\023=\223\t\373\274\347s\264=W\350\311\274\353\000N<\223\351\322<\337D\221=\346\241\356\274\316\272\310\273\267z\200=Q\347q;)\343\027\274\\\252\217<\236g\327\274_\215\312< 6\341\274\355A\n\273\253\232\252<\007#\365\274/\226p<w\212W;\034I\r<v\233\026\275\244S\024\273\000)\020=\366Y;=\226\374\013<\273\007\306;\021rT\274Od=\275(\004\007=\355\024&=\206\310\010\275\365)R\275\323\007\277=\250\'\314<\232b\243=>K-=Q\206\231<\022+\007=\371U)\275l|\024=\032=\360<\010Z\005\275#\2665>\313tZ\275A\263\330\274(\364\363<t\243\211\274\370e\256=\346^\216\275c\252>\273+=\304\272W9\245=\232\212\305\275\344$g\275\363\224\325\2749_\341:\224m\336\274Yi\364\273w\255O\275%\377O<\261P\001\275\246\230\017=\3320g\275V\323\212:\3576\216\275\254\251\365;\326\340\355\274G\207\246<aO@\275>0\336<>\266\233\273C\253\007\273>\335+\275\315c\232\272\254\333\270<\302%\356\274\332 \025\275J\000\024\275\237r\254\275\341z\004\274\355b\324\275\251\277;\275tb\314\275\200L\023\274\376\361(=JT\273\2745\221t\275\035M\270=\311\275\t=\021\211b\274\026\234\320\274\376pI\275\357j\201<\010\215\222\275\2633*=\035zJ\275\356\350$=\024Kp=\242\367\360;7\357l=[\374\037\275\254\0130=\007\000\001\275?\311\006\275\220l\010\275\341\330\205\275|_\272\274^p\371<m^\036=\371\031\021<\341\235\271<P\334g\275\363\276\202<oCu\275[9\300\274I\350\230\273(u\321\274\204\227\225\274\376\363X\2746\342b\273k\225(=\275\234\325\274)\023t<\036K\307<%\0330=\013\331\217\275\236\003\004\274U\247\036\273\236\274(=p\351\342<\3545\256=lBk\275\355\342\227<\244\311\004<j\355\315\274\253\3752;>\260\342\274P=\300\275\035\275K\272\346^\025=\277\312\245<\350\214m<\345\332B=\006\022\367:8=\372<\221\345\270<xG\026\275\247OB\274\300\212V=(=\252\2747\375\226\2747\247\"=\312\315\355<\246\304\010>[\3574=[\317\035<o\314\207=\312\013\206<\313\035\374\273\316\002W=\031\265\261\273\357\251s=l\026\004<6\213`=}\220\376<\027._=\262E\372<\223\367b=,\'\014\276zs\302\273\003g\213<13\007\275\371\250\200\274\376R-=\340P\220=\005%\203\274\025\237\223<\005\304?=%Z\303:\t=\024=.\276#\275X65\275\2539\317\275\031@\014\275\021\312\013<l\353\330\273\345\373\025\273q\341\335\274E7[\274\337\" \275\017@\023\275\331a\352;\334\310M=\017\370_<X\222\332<=\232t\275\267z\275=\312\334\275<>\351\n\275-\355\310\274\013\235\017\275\246\246\220\275~\204U\273\243|\241\275\326\026\017\275\307\247I\274\023\345y\275-,*=\220\021\251\274w\\\017\276T\232\177<\275\277\201<g\344\312\274 \242\261<\265\202\331\274\336\263\231\275\334\026p=\364\230e=|\\\237\274\026\211\010;m\034\304\274\277a<\275H\302\244\273\335By\275\321\251\336\274})\023<\332\332\013;\030\2738=\243d\301=p<\2059\030]\276\274\335\267\177\274]\2209<x\026\005=\020$9\274\214\357\206\273kg\\\275\251\320B=\234\236\357<\317\236\226<\366\024\215=\177\\h\275\364\3252\275D-\357\274\267~$\274[w_\275\031\332\263\274G\277C=\311\201t<\310\355\003\274\316\307#\274\346r*=\033\205\014=\247\204\214<4\351\217<i4<<\002\0370<\344\010\342\273c\n\334\273\033\216\251\274\343+\336\274\241*\"\275\310\340\262\274NR\241\275\037\004\034=\246B\336<h\340 =5^\305<\352up\275\210$0\275<\306\245\272-\260\224\275f\017@\275\362\022<\274\037-S=\306\245\331;yV9\275\251\247\253\274\314uD\275\244\006\270\274-\303\027<\320\312\317<\244\353%\275\264X\257\275\303\206\027<\3725s<\0148\275<\253\023\032\272i\262\030\275\343\036\351;\2723$>\'~\327;\274\tj\273\006o(\275\267\325`=\010\267\337\274\340\250D\275`\007\374\274`\376{;\202\353\025\275\267q\203\275F\002q<\234\342\305\275\035\371\275<\224\257P<\314\230D<)\375D=\260\353\254<z\034\325\274\362\271D=\037\241\253\274\225\200\222<Z\0324\273qR\361\274\t\224y\274I(U\273P\315\"\275\220\346R\274\301\007\202=\007\276\311;l2\022=\363\207\206\274X\030\010\275\345\030\000\275C{\210=sl\343<\211\347m\274;\376f\274\r\221\t\275{\220\033=\276\347\247\274\002#\013\275\232\316C\274\233\323\016=\315W\346\273iGC<\215\337\333\274=B\362<RVr=.\375~:\310\177W\275\310\221u\275\276\324*<\347O\202;xj\2419rv/\275\334\343\224\275\307\254\033=,\305\022=\2356\244\275=\265\270=\234H\265<~l*\275\200\n)\275\376\366\212=\265g\215=\r\245\340<\314:\227\274\374\363\267<q\225\275=5\315\203;\3019q\274\2559.=\241\374\234\275\353\r\260=\231\360\202\275\001\335\240\2758u\220\274\270YV<\"\320\004\275\271p\356\274\"\205\'\274`\n\265\274\033\000\251\274\241\254\337=\326\333\230\274\227\355\325\274\327o\357\274sT\211\273s\030\365\274\372]\204\275\264\356\203<\243u\364\274\347\247\251\275\352r>=\356\325\337<\\7i\275\315*\350\274\373D\254\273\343\241\272\275\301\247\275<I\242\000\274\237D@\274\275\"9=o\177\017=\354\336N\273,y\211\275\332\232z\275\302\032\':\322G\000\275\374\317\204\275\020\200]=\177\352$\275\006|\335\275\024\233\206\274\201\363\354\274\215\244\332<\372i#=\323\377|\274\017;\265\275\2628\251\274\244\2541=\013\201\037=P_\326<m\217\240<\343\220\352\275\217P\262<\004B\006\275\trB=\353U\311<\031S\222<\306\232,\275\217\375\225<b\360\347<\344c\000\275\322\332\363\274\320<\246=\037\271\330\274\354\237\373<\306\026)<\305|Z\275\014\003v=f\331X\275\374\\\242=7\312\217\274\246m <u]\212<\342\032F\274N\350\250<\013\310g\274\310\316\240<\035\330\244\274\034\253\025\275\252\314\327:\355R\014\275\"W\246<`\367\267<\376>\316<6\264\312\273m5\255\275A\306?\275?\234x\2753\306\"=\007\237&=\266q\233\275\215\360\201\275\371\016\221\275gm\221\274\352?\231\275PR\247\274\221\317\317<\247\376P\275\374\334 \275\003\377Z<\266o\267<\222\257:;\021\000\202:\306\377 \275\231\244E<\304\'\031\273\304\247M\275d;\204=u\"\223\274\2565\330=\260F\253<\025\254\010=|\r\231<[\006\235\274m:3<\017\273\343\274\241r\302<7\236a=\373\264\204=\334\211\201<\352\0342\275\031:\243\274p\006\323\274\037\371[\275U[\245<1\232\253\274\323Y\314;\005\220F=M_*;Lt+=\213=\005\275Kl|\274m\351\005\275\212\302l=g\333\341<x\274\367=\251\006[\275\306\000\\\275_\343\024\275\233d\262\273\220\373 \275\325\025\354\275\333\024\212\273\225\026\247\274\306P\034\275;\2104\275\336\034\227=\340\311\235=\031z\023\275\260w\212=8\303\006=Tc\306\272oL\364<\232_A:\251P\022\275~1\014\275\304=\314;\256Ha\275\363z\002\275\021V/=\255\370V=\r,\232\275\213\326?\275\347L\215\275)\357\301\274\205e\214<:4\030=\'\326p\273B|7\275\014\310\r\275\371\204\240\274\237\212\241<\353\227\203;\233m\232<|gu\275\005M\016\275N\r\321<P\274+\274\374\315\017=;Fn=\275\307\246=\326\275:=!\317D=\304\343,\275\235gZ\274T\243`<\321Q\016;\326\233\245\274\027\326\3749\321*:\274\244\032\240<\246\220\234<\325\020x\2756\361;\275\212\013\201\2734\325\270<7O}<\307\355W=\317M\206<\036\335g=\324#\014\275\007\3634\275\2477\261\275\320\300d<\244\275\246</\330\021<@\t\355\274\365Z\250\275=/7=\025yJ<\251B\t\275\212\005\214\2749\224F\274\034\217m\274g@$\274\350s\313=E\224\205<W\032\305\271$\302\014\275\t\201\232\275\321d\020\275\320.\215=D\277\001\2745\3375=\275\235\315=\333kH=\322\232\274<O`\n\275\035\360\234=Z\375B=R\355\211;\277\001\036\275\326\001)\275\262\315\372;\242m\336\274v\210\031=\006\347W\273Tl\225\275t\316$\275\341\342\320<>\316\014=,\007!</\276\267\275\261\375\"=\'pO=\024\215\225<\220&\003<\270\360%\274\304\232\035=\241D\225=E\350\313;I4\026=@F6<\342u-=\262\246Z=\013\2447;\2045\t=I\022\020=\307\006w=\376\302\264<\n\201\305<Y3B=/\033W\274\213\213\357<\265\333\361;l\332\'<\022\262\367;\311\3213\274\376Y|;\364cT\274 ?\320\273\006\263_=\333\311%\275\002\224\001\274\002\014\201=Q\350\006\275\001\313\301\274\230f\265\273\274l\337;~K\270<\276\3147<\302E\n\275Z\006\007=\375?!\273w\305\236\2747\\\'\275\030\333\023\274\200#\212\274r\200\201\275\0233%=\317 \027=\205\nC<\252\007L;\305\317\036<}\323\030\274\200\200\235\273*\2736=1m\233=\317\322\'\274\261\255\266;\323g\002=\376gK\275\010&\023\275\261\353;\275\031\200G\275\374?*\273\032\324\357\274]\357\005\275\316\021\023\274\014\252~\275\3656\207\275\005Lg\275\307\006H\273\215\020><\251\017\202<\361\026\215<x9\270\274\321\277I\275\261\275\003\273\206\256\035\275\326R;<\3603\024=\262\376\234;\177\246\035<\310d\250\275\004\025\262=\331\313\321\275d@\267\274n*1<\360\375\335=\241(\263\2743\273h=\001\245\036=\276\310\035=\235\221w\275\250t\027=%\270\020=;\013W;\300B\334\274\031G%\273P=\373\274\023\315\026=\363\340U\275\320J\017=:\344\311<\276Jd\273\201\367m=^\302\245=\n)Q\274B\200\217\275@\343\221=\025N\251=\025\375\244;\001\366\014=a\220\360<J\321\362<\016\241\236=c\260\004\274$\0219=G%5=\270\245\346<\254\370\213\274Q\035\347\274G\312\271<\030\323\355\274M3\273<\256\302\031<ifa=\010\216\221\274\033#\232=\270Y\214<\345\370\016\274\274\327\216\272@Uq\275\207c4<\365I\306\274\342\276\370\274\337s?\2751n\253\275\247\273?\274>\007\210<\245\367\235\274c\264i<k\314\001<\3512\305<\265\252\217\275K\220[=\245\344\216\273\243\001\364\274\031\200\005\274&\275\363\274\354x\003\275\350\377`\275?\345\025\275*\210W\274\257\365A<ZCi<\007\006\364<]m\246\274\251\334M\275\377<=\275\020\206,\275\350\310\242<\342\324\216\274\334\016\016=ir|=\"D]\275,\274\355=\266\371]=\005\002.\274\233_\034\273A\n\225<\275\344;\275\360\343\033\275\235\303,=\003G\233\273\031\243\233\275X\331@\275\213\331\272;\217OP\275\336))=\236N\264\274)]\277\272\304\243\260<\020\340v\274\302\326\373=u.\264\273O\306<<F\250\340\275\337\372\223<\340\250:\275\351\327\310<\222\361\262;\303\212D\275V\273\236\274\314\236l;\344\372\351<\311g\212=jG$=\r\324\3339\2313\243=E\365\251\275\305\331\320=\306\236P\274\013\300\267\274\032%\321\274\335\255\300\275,5q\275\314\202\250\275,@\263\275\230\211\227\273\203\320\203=\\/\246=\304+s\275\214u\210\275y\006\275=\0326\244<\366\025K=\316q\203<\212\315\206<\367\016\341\273{QY=\007\035\210\274\200t\273\275\357\223\251\274l\322\271<>\3226\275\250O\r\274\354\322\000=1\335\353\274\307\312\276<\301\031\350<D\'\022\2752\005\007\274\356\204\313\274\027\346V=k\364%=\367)\033<\312\326\006\275 \311\036=U\373\276=zD\037=(\351\345\274_u\214;\342\024\377<\372\365\007=\0144.\275`\026\214\275~\3724\275\341\332\231=k\370F\273\r\223\025\275\357&28\317\271X=qz\215\275\355\342D=\314\320\031=\037\306n=\326\033\222\275\251\335\251\274D:\365<\234\014\306<\023\034\221<\247\016\204\274\331\\4=\216\264)=\205\2428=\337\235\311=\215\225\317<0S\232=\202\374\351=o\317\350<\274\023\264=dK\220\274\211\350\200\271\203>q=\330\233}\275\t\177+=\301^P\274\336\272\021<\256\036o=j\3275\275\267\255\200=\276\217\302\275\253Q\217\275E\313\206=\037\\\001\275y\302\333\273T\302\t\275\305aj=\314zL\275%\351\220\275\001s\366;\376xX\275;6Q=\234\226\333=\202\311\342<\223\\\234\274\275\207\032\275\3358\216\275O\277\372<\"\216\016\275\274A\004={\314\232\274@]L\275\253\226\202<\304\372+\2750(X=\215L\213=\327\304\010=\250\300\366<\031\255Y\2756oR\2745\256@=n\3662\275\037\300\261=\336\030\346\273\375\266\334\273W\257j\275u;\217\275\032\340\320=\233 \223\274\371\332\265\274\313\212\265;\305NF\275\345VG\2754A\337\274r2,\275\2246\256\274\341\344%=\000\311\344\274\021\315h<Z\336\363\274Cc,\275\005\311E\275\035\313\246<\244\033\207\274\247%\030\275H\300\026\273y]J\274\023\372\251\2756X\007<%q\273\274\271\225\2309!\027\316<\3067T\275\365BJ\275.\262\343\274\035\2056=\003R\005=PP\326=w\255 =\245\031\255\273+N\265;\'\244\240\274E\337\240\275\362\326\265\274\223\340\033<\277\257\224\275\252$\277=\334\004\207<\232\317\n<\375\322\365;\263a\236\275\2759\201;\216\213u<8\325\276\274\216\213\321\273\023|\003\275\335$\014\275~V\037=\363\230\277;,\270F\275\0331\271=\004\230\237\275A\016\203<f\365\372<d\001_=\274\210\'\273\203\002\321;\njQ\273\264#\003\275\313+\203=\315m8=\337\275\224\275\t\331\\\274\261G{\275\202\010\211<&\3151=\004p\000=*[{\2751W\340\2748\261^=o\220>=\347\230\023\275U\365\007=7\246\021<]\r@<6o\036=\"9\300<\243\322\004<\212\300\210\275\275\357\273\274J\330\252\274\247mA<\332\371\001\275\031q8=\347\257{=[\350\206\275\276X*\275\013\315\344<\376\224\001\275\243c\240<\340i\266\274\242\005E=\216\242\032\275\336\036g\274\315`:<\247\034\027\271w\214j;)\030\326\275\222\332S=\204.\217=#\rL\274-vY=6\223\242\274\225\330\214:\216D\256<\221\277\212<\274\344\332\274t\024!=\355\353\271\274\340\244\376\274\373\363\362\274K(/\275\277\251E\274\230\010\313\274\272\002\322\274>B\n\275\225R\016\274\274\025\322\275\355m\264\274\245\212.=\310\307\345<\031\253^\275#\204\301<\177\000k\275\224\267\002\274xt\020\275\266\311K=Pg\027\275c\311\037;\207\377p;\020\376\013<\017%N=a\"5\275s3*=IiZ=\362\016\364\274\026&\256\275\354\224/=\371Y\236<\037\320\310\274K\276\203\275\031\227\335\274Ut\201<y0\270=\335\376\216<\223\000\364=\245q\242=;\\\273\273\273|\212\275Y\364\217\275\345\317\267=bP-\274\016\201\236\274\224\350\376\275\215\365O=\035za=\323\263z=2B\t=.\225\327<X:\273\274#+\\\275`3G\275\211\203\321<\376A\324<\266L|<\010z\275\274r%u<\325\313\376<T\361\333\274P\237\220\275\361\376\260=\257\357\311<\254b\204<1\276\252<\364\237\214<:!V\275\272\247\350\274\277\325J\273\244\346)<\005\343\365\274P\254\215=\307\317\215:\217\341E<w\247\253;!x\252<kE&<\326\340G\275\215\373\243=\225\310\364=I\202t;\325\203L<\353\246-\274f\331i\275Y\271_\275\306\205\203:\366\346\241\275\266\020u\274\371\217\264\274\365a\233<\005gM\275<\322\003\275\360\037\344<h\361\256<UV!\275\206\033\374:\355\261\354<\016W\2149\\|\026\274\310\360\035=\3378)<\245\034x\275\267|\213\274\204d\231<n\nk\275\276\274\003>\265[\205=B\240\216=\0239\241\274\357\303\'\275p\353-\275\243\2119=\2330\250\274;H\267\274\303(\177\275[\316\275<\007\235d\275\rf%\275h\362\203\275\274\376\034\275\354\225\307\273\237jD<P\000\031\275\314w\256\273\216l\\=\367\277\201=\277\250\030<,l>=\203[\336<2$\201\274I\022\301\272a\242\236\275A\027\033=\271\305\t=\306\272\005\273\237)\022\2758 \263<\013\231\365\274\263\t\250<.Y\250<\326\256n\274\253\366\351<\242\236*=\362\033\336\274\001\370\237=\277e\335<\216jT\275\217e\357\273\243\205\307<F\363\341\274[\273\010\275Z\002\024\274\3466>\275\263\'g\274\000uM\274R\r\254\274\342\021\333\274P\'6\275\261I\246<\222(\214<\257w+\275\366Np<\327\331\006=m\243\363:1\235\326=\227\223\035=#\213\001\275\322\366\233\274\340\254\305<=pW=\003\024\272\275\226\036}=rm\214\274\203\267u\272\271\245M\274647=\277\231\305<\201u\315<\364\373\241\274\230\251c<\255\264\264=2\233\304<\202\n\207;\335\245g<\034\314E;\354\321\356<7\301y=\204\370\036\275\002(L\275\325\034\325=\241t\323\274\'M\337\273\331\377\020=Z|\307=K\246S\275\362\251\357\274)E\251\275RE\004\275\317\331n=_7\032=`\037\230<W\320$\274\026\020f;;\006\244<MU\326;k>\263\274\342~1\275w\3643\275\357\347\027\274;\2122\275\001<p\273\265\242y=\217\261\037\2750\360\224=\211r\231\274\212\025\307\274&t-<}\330\031\2757o\257\274^\010\001=d=\365\275\nJ\216=\256@\344\274\350\310\334<GE\301<\302\343U\275m\305\206\275\265g\024=\376b\036=Ut\317\274\266a\267\274\201?\263\275K\231\271<w\376\"\271Y\214\244<\220aX=tVi;\234\2628;\375va\275\347\254\206\275g\352?\274hZ\272<\002\241\316<z#\253\275\232?\034<(\rV\274\235@\273<j}4\275\200\275\262\275)g\340<\340\227\242;\200!\001<\226#t<\343\005\240\275}=:<\314\340/\275\361l\237\274\232\010\001\275\032\360*<\371\334\247<m*\347<\241JK\275(cb\275\266\367|\275\254\200f<\211Uj=\232\256>\274`0\007;\005\006\345<\026\323\326\273t\276P\274s\016\204\275\324X\276\275\255\314\364=r\205\027\274B\235+=\215\207\017\273d\335\022\273\314AH\275\335*\265=S\377M<\274\364M=\003y\316\274C[\353:\263\350}=\277z(\275[7\3779\262\245\357\274\027\277\300<\306\201\253<\274\357A=\262\237\341\273gc\032\274T\327\214<,\340z<\332\246\250;\324/0=Y!\363\274rW\244\274z\362\001\275\002)P=\353P\305=\246\222\243\275C\331\342\274ts\205=#\376\200=/>\316\275\242bX\275\333\0026\273}\316d=S?\035=\264;l<\253\304H<\273G\003\275\002\032\007=\250\325\322<\237\346\230<6\311\217\275\364g\365<\263\327\310;\300\222Q\275\001K\224\274\365\265\306=u\nk\275\020\317\001=\222\324\272<\003\201\203=uN\203<\177\320\014>Z\241\217\274$\272\337<\222i\2729\217\3052=\335P\003\2756i\246\270\377\276\025\275g\377\232\275\236I\277;\024\001\276\275#\211\210=Z\356\337\272\205\256\025\274\331\341~\275\266\227\010=\326,\203=<m\2629\234\030}=m\307\242\275En!=\334\312\365<\270\217\266;\210\377\245\275#%\013=\251\216\266\274\346\354`:\214|I=@:\260<\227\262e=\245\372\241\275\237\035@\274\214@d\272\001\251\232\275\2264\220<\361s\214:\030`\027=\371f\316<\305\265\323;G\253\315\274Q\022\003=S\226\366:5\006~\274\001\220\216=\033\0251\274\325e\262<T\251\323\2749\244\240=\242\024\213=\300S\303\274\356\375\241\274I\240-\275\002Y9\274\344l\'\275l\370\230\275\037\013O\274}Z\241\274)8\t=Mq\305;\022\317\335;==\035\275v\374\204<\n\247\022\275\340\377\206\273\022j\177=\234l\036\275\323\361\362\274\243\314\256\274\303\253\240\274 \326\247=\327\036i=j\237\n\275\347a\247<8\022\321\274\263\330K<\277~c;\225r9\275\305I\270<\212e?=\020\310\005=qV,=\202\225\264<lu/=\375\020\342\274ro\032\275{\214\271\274\216\273\226=\314.\234\275\235\362\205\275\226\030\213<\247\323i=\274m\2249\301k\276<\037\306\371<\360\2663\275f\306\020\275\313\240b=\016\245\233\275\211\027\031=8\253\006=]<\223\275\314\262\027=S1{=\022 \207\275>\010\031<\352v\365\274\311\006\362\274tK5\275\032k \274\203\000\235\275A\302t=\325\212\243=q\375N\275Ic\247=\256\306\377<\037?\255=\266\264)=\315\355\253\275F\207-<\2351\201\273d\3106<\361\347\n=\221\343y\275\347\213\340\273)\267\"=Z0F\273&\237\216<\211\226Z\275\332\'\005<\255\374\343\274\301jb=4p\242\272\244\260\325\274\'\344\374=\352\th=\324\035)<Mq\270<\024\241\013=o\266\203=,\225\352\274XDK=v\355\001\274CG\002=\324n\265=\024\247\352\272\266\332>=,\\n\275;>\025<Ym\"=&C\233\2749\322\363<\377\025\010=\357\252\213;\010\202\350\274\245\206\006\274\202\302\323<\302\233\202=\361\373R\274h\346\242=zeN<\244#\010=\270\211\000=M\271[=Z\275\360<fBs<\005\234\337<\306\217\214\275\245\026\205\275\272\247\024\275\231\2463\275\247\016/\273Zg\251\275\277!e\275\265\352\031<\247\355\231=%\334\226\275\020\376\362\274\275-\265=\370V/=\036\340\240<\336\346\227\274\307\230\274\275J?\340\274/4V=4]\203=\251\217\301\274\3214i;\017\017\026\275\347\022\241\274\240I\220\273\203J\031\275\323\303\305\274y\035=\275\356\\z=\211\366-<\341\030\326\274\327\'{\274\304\032\276<\007\334\256\274\214\314\240<O\335\226<\317\327\350:\374\222\002\275t^E<\214\3732=\265O\005\275\305\207\254\275Ja8\275KT\013<\023,\023>[h\200\274=\346B=\273\017/\274\227\005\353\274\220\014{=8,f<\332\230\320\274\001\004l\275\025)\010;\022\245\014=\032\242\312\274M\240\014=Fz\200<\372}\025=)\201\303<\312\304`=\343&-\275\030S\334<\031\265\201=6\301\301;\035\271\022\275\016\345\364<t\367\024=z\217\200<\226.\021\274\244\310\023\275\010X\023=\223\364.\2750\t\n<\370_\235\274ck1<\377\263\330\275\017f\307\272R\254\376;(\021\216\275\010\266\031\274\367\3051=X\364:=\003\373P\274A\004\233\275\243\212\213\275R\274\023\276\371\366n\274$\3759=B4&\274\356\344\377<|\216\205<\030b\337<\356\361\335=`\'\r\275\332\350\223\274\305\'.\275}\365\243\274\204\020g\274\326t\212<\312\275c=\362K\250=\352\035\342<\204\t&\275f\376\017\275\252\343\277<L7$\274\0319\225<\002\312\201\275\331\277\277\274\307\266\237\273\270\003F\275\007\351\026=\364d\r\275w\373y<\345\025\005\275+s\365<(~\260\275A\253\035<\271\300\274\274_\036\214\274\004\352\225\274t\304\325\274\313\200.=s\235\222=m\021|\275\343\272d<\372\270#;jT\204\275W\374c<\361\270\030\275W>\347<\364\366\253<\366\303\314<\3433\003<\207\3673;3\272\000<\223\334\313=\360\326\305<\275;\271\274\002\247\366\274\035x\236=(\303*=\232\324L\274o1\334<\251o\022=\213\356\215\275\373p?\275;\2141=P\274;;\350\007\035;@~Q<c\030\001\275\022\270>=\215\357\235;\200\366B\275\240:\273=\312W\317=\'\351M</\'l<>\366\231<$\201\031\274!\035\002\275\330\357\224<\303%6=\203\025,=V\303\002\275g\332!\274o\366.\274\214\021\'=\224c\033\274\232\007\323<\266\241\224\274\213\235\360<\364\247Y\274\227p\347\274F\341\225\2746\025E=ga\203<\375&\031\273\257)\254<cg\245\274\024,\034;\304\361e<\223bC\274\367\357\006\275QrS\275\1774:==\n}<\306\023r\274\013!\032\275\331\214\024\274\031\303v=v\323\276\275\3038R<\"*\274\273\207\275w\275\323\006\254\275\315\345\311<$:\036<$\013n=\206W\207=\013\2018=\333\342\254\273\347\026\365\275\226\306`\275\006\366\023=\233\025b\275\317H\032\275\364\014\005\274\374\260c\274\017\317\n\274\256l<\274\224\220$<T\302\320:\005\373\230\273 \357\340<m\034g\2752r\001>\260\2537\275\236O\267;\265\037\027=o\327\213\275\371\336\273\274v\306_\274\366\000\354\274\271f\226<Ptr\275\275\244\023\275$\022\037\276\223\364\027\274\313f\217<\003y\375:W]\264\273\033u\263<\303\272{=\255Lu=\037\021\024=lH\007\274\346\312\020\275\0230\r=\345\362\343:!0\253\274\325\337h\274ah\345\2740\217\346<\320l\024\275\244\305x\275(\333P\274\371\037\016=(\252B:\"\006\216\274\t\263y<:+\"=\032\377\240\274\262\331\014=C\376\205<\260\272S\275;\334\037<<\3669=\301\336\275:\220\337\275\274n=6\275)\275\001=\352\257\235\2741r\253\2736\n\331\275\2023\274\275\303\265\203:\207\3647=kE\020<\340\034\'=\351:\311\274\252_\267<w\003\230\274\313o\367<\327\027S\275\325\323\204\275ibK=\347\233\000\272\310\213\210\274\243Ob\275\033\243\210=.\247?\275>\357\276\274o.\272\274*N\005=y\310`\275}z\226=j\257\237\273\323\341\031=\226\360\255<C\034\n=\377KP\275\225\n\004<)9\274\274\341\267J\275\177+\013<`.\204\275\202R\227\274\177\345\261\275\3562\255;\275\333\020=AS\357;\344`\307\275$\276o<\034m\002=nej=\320W ;\242\241\022<*Z\231\275TeS\272\344\343v\275\312=\254<ki\267\272\257\227\003\275:.y\274q\'7\2744\367\324;[S\302\275\374\216\r\275\247\356\254=\364k\222\275C8\026\275\n\200@=K\340i\274 \212\344\273&\344\334\275$\273\377\274\214\257\260<\214\tl\273~\024V\274t|F=\005\202\257\275\305\3705;\224K\352<<#\304<`\312\237<\016-\213=Yw\031<\203Ty=\037/\r\274\326\361\205<\305M\214=\013)\233=\271h\325\2733\021\230=\253V\217\274\026\354<\273d\355\356\274\023\325\t\275\273\347\006\275\032=)=\23435=\374\333\271=\315\320\277<H[\307<{\333\342<\301l\352<$\316(=\374\004i\274;\210X<\036=\272=\235\302\361\274t\311\203=\241&\260=\272\0350\275\242\023:\275dB1\275X\366\347:6\227\252=i\205V\274\010a\224=2\372\034\275\234_{<\032U\213=\316!j\275T\026\316\274NHk\2756\'3<q\177\236=\037\220\006=\244\240\325<]9@<\370\211\271\274&\361\025\275\321P)<0\366\020=\272\241D\273D\350\031=u\203<=}\316\353\274\002\034W=\273#d\275\325\024\200\274I\030\345\274\220>\375<\217W\322\274 t\016\275O\240\242<j\227\331<o\034-\275\265Nt<\025\203&\275\340\004\201=L\274\262\274\372u5\2745\354\016\271\334\341\236\274\363\321Y<c\023\333\2744\2759=\r\331\024\273%[\315\273\232/\r<\265A\206<\342\222.<\221\244\013=\310=\206<Pn\255;S\352\321\274\331\204\013:\373\320a\274x\372R=\367\021L=BsW=\347TY\275\212\024F<\230x\331\274\3250\245=\266\340\007\273p\3252\275_\266\370\274c\343%=\327D\265\274}\006f\271`\017v\275\233`\035:\327\216\232<\377\014\177\275\t\021\005>\256\3549<\303\313\341=\n\224\344\274\031W\202\275`\335j\2759*m=\201C\341<\257\341\251\274\2222\000\274\323\317\006\275\237ug\273\002\222\264=\232\267\264\275\266\237`\274\371\205+\275\372\002\204=\364\354H=\212\"\265<\0353\006\273\312\036y\275\023f\235\274\225d\024\275\244\177\003\275y\261\251\274\305\004F<[\241\303\274J\"\354=5\2008=g@\311\275\367\030\217\275H\364\225\275\364b\204\274]|\'\273\317\204\033\275\241\366\004\275l\223\363<\230\210\222\274c\254\333=\371R#\275cB\030=~\211\027=S\375\311\272\270\213\036\275\315S\202<\323\303>\274(r[\273q\261\250=Y\261W=DS \275w\3568<\264\3636=1\271^\275\376\005\217\274(\033$=k<\220=\365\030\303\275\357\302\3139+\001v\275_\316*\274\0176]=\033\211O=\342S\003\275-\246\240\274\3570\355:\301?\376\273{M\000=\346f\016=\322\234\300=D\232@\274\3277g\273]\"w<\255\374\215=+\0103\2754\264\301<\005\271m<\306\274\005\275\006\376I=)1\300<(\370}=\3226\270=\226\241\003\274\001\375\345\273\237 \235=\002\341\003<\215\2532=i\323\227\275E~U=0{=\275\'r`\274s\214\253\274b\313\241;\300+\341<@>9\275\301\351\223\275\263\355\'=jp[=\252\324\227\274`\231l\275\372\010\352\274\020\304;<v\352\376\274V\372\233\275\346\342\000\276\236 .=X$\035\275`4\\\275\366\2636\275\013\361\306\2735\207\014\275\336\336W\275\247\376\n=\021f\344\274\366\2173\275\207\037I\274\364n\260\274\254\341\031\274\362\0069<\207E1=\203\206\036=$\306\034\275\212\204K\273\341x\311\274G\2068<\330\271\324\274\260\351\312=\030\205,\275(?\273\275\223h\302\274\315\310\230=[\006\271\274\313\216\001<ba\250=\2649\003=\\\037/\275\373\203\341<\335\355\027=*3\274=Q\277:=\177\363\032<\301\311|<\255f\270;\004\357%=\204p\030=\371\036\'=\310\271e=dn\034=\035\271\325\274\027g\273<\310\277`<\022\222\354=\212\022S=\255}\031\273\317\023;<\007\277\'\275\317\241\'\275\032\223\211\272>\322N\275F\021\226\274\365d-\275\333\270:\275z%\341<\262TS<\212\272\257\274&.\214<\037\010T<\277SF\274\027\343\213=\241\204\023\275\203]\377\274\216\203\306<`\177\207\275\353\220\364\274\022\326\322\275\027\023\033\275\373\205\t=&\344m=\035\215w=\303\3040\275\334\366\317\274\325\377\202<$i\212\275G\202\226:h\377\213=\326\"\013=l\000o\274Ad\231\275c!\200\275\240*\245\274\345\021\214\275\267\376\357<l\032\023\275$\017d:\200V\376;\337\360\016\274\005+K=\234as=\n4\"=\344\255\025\275\240z\323\274\221\341\233<\211\r\371\274D\027W\274\313\330\235<\256q\270<\004\365\t;\t\262\r\274\3303\344\275v\221\352\274\376\233\262<\247\023\000\274\367\334\032=g\345<\275\341\333\003\275\272\014;<\004*\236\272\222\310\324\275\315\333\260\272\203\240\225\275\337)\301<\225\223\227\274\360\202>\274\2156[<\0315W\274Y\003\020\275fF\233\275y\301\001\275\256\240.=\n\2311=LuD\275\232\371m=\251\274D\275\334\201\242\275\t\226\241<\262\016\020\274\302\326\177\274M\211|\275|Z\346\274\207n\005\275B\265v\2749\211Z\274;\n\016\275\227r\216<\306SN\275\365\277\274<{\346I=E\005\300\274Mu2;\255F\177=\3175\302\275\327\304N=\251\326K=\217\211\304<\315\000\226;\336[u\274\210\235\022\275\342}\300\275\303pv<\220\313\204<\244\347\261=\335\367r\274\216N\306\274\346lu=\321\256\016\275\272\253\026\275\375\030v\275\206&\021\275}F@=\224&C= \217T=\177\315\242;\005\276\006\275\321>\241\274\02185\275o\213\010\275\212\271\206\275\256|_;\267~\262=\215#\374\273O\365\\\275\331\206>;&\"\237\273\275\302e\275\261\206\036\273\376\017\354\274n\020Y\274\360\371\t=\262\366&<\352\001\327\274\013\004\260=\201n\004\275\013\264\215\274g\0345\275)|\320=\033U\272=\247\320M8\0047T\275\037R\013\273~;\245\273\022\233\230\275\351\245\035=\031\236\311\274+\226\234\275N\235\202; A`<\017\333\321<\010CN\274:^i=\023p/=\036\000\375<a\331\250\274R\236\322;\260^Q\274t:v\275\030\204\302;\337\302\002<Q0w\274J\300y\273\014\351a\275\032x\220\275X\'\224\275\3330\343\273\303f\277\272o\313\221<-\371S\274\247\347\033=\260\300\236=\303\024Q\275O\266L\273\345\316\211\275\330\333\204<a\t\030=\266\022\214\274\0337E\275\261\243D<v&\\\275z\262\003:,\020\277<\205\361\216<a\234.=\215\355\263\274Q\377\021=,\031\205\274=a1;\341\260\261\274\364\370 =\240\236\303\274\006\232\032\275l1\311<\333\360O=\264SI={5k\275\277\254\345\274i8\034\275\247[\311\274\2319==\317\025\266=\262\026\301\274F:\335<\000Jd:e\273\204\275\322\346C\273\244\255\355<\342\267\307\272W\251\326\274\241w\314<@\224\357\274L\342u\273\350\322\334<..\207=\370\253\253=_\357z\274\007\214Q\274\312&\302\275br&\275\232\002\236\274\237&]\275\247\341\273\274\324\262\374\2744\217\271<\364\236\203\275\203\\\344\274yr\375\273\315\247\341<5M\262:4\311P<\332u\036\275Q\304\222;\203>x<\225\357\027\275\377\002\203\275\246\023\271\272\377K\332\273\003R\231\275\305\t\331<7\351\202<\206*\366=\3573\225=\027\214W=\022.X=\230\275\014<\366\036?\275\366\276\321<\265\220d=^\332.\27548\024\275K\254s=\364\260\227\275\304a!\275\036\357\002\274\236\202\274\274\230*S\275\022\324\374\274\220\000\002\275\2148\243\273\267\237\2247B\222\211\273\257:\270<\376\216\t=\363\030\036<\360\2657\275L\225\r\273\234\006\363\273\325;\034=\227\010#\273\022\345\212=BY\265\274\303a.\270\333\023\024=\251\035\306;{\364X\275\203L\261\273\210\217-<\266~\327\274\245m\370;\320^\026=#\023\365\274\354\000\236<\nq\331<}\301\213\2754\027y<\340\365\262=\026A]=\035P\022\275\277\363\007=\220\243j<|x\227\274K\263\361<\222\353\254\275\252\027J\274\261`\306\274\375\326\004\275\301\336v\274\032%\234\274Zp\221\275\367X\201\275P>#\275Bb\213=\266\234\256=E@\213=\377S\n\272\033\337\016\275\375\314\026\275\273:\345<\223r\217<\234\312\212\275\305\350\366\2736l\003<nr\r\275\014\323\301<\234=\212\274@\222O;/\202\360\274\013\326[<\031\346r=`\013\t\275\311j1\275\354O\200\275V\333\277\275\351\305\360\274\006\221\214\274P\036\017=\r\344\221\275\255\257*\274a]9\275\035\261\264\275\357H\037=)\260\217= \'\317\274\001W\351<<V\017=\234\027I\275NC1\275\317\367\324<\311\344a=\023\215)=:\024\300\274EQ4\275J\245\237\275\260z\206\275\302\234\254\275g\"\\=,\205K<v\352\300=\264\241\n\275\205\267\024=\301\\\005<\324i}=\337\256%\275.\255\251\275\360e!\274Yx\314;\271\216Y\275\246\244\312:7\213|;1\371\344<\221<\336<\264\327\214\275\023\256Q\274s\346\233\274 \315\236\274\033En<\017N\257\274\304{\013\273V\3419=(\362,\274N\271\023<\000\376\241\274\325\355\333\273\363p\240=\330\026\216<\212\'\322=\242xR=\225\340\321<>[\344\274\034\351\302<\360\263\237;\034\261;=\340\316:<\234\356d=\263\230Y\273\311\322\226\272TA\267\274v\366\016=u\r\350<\350\325Q\275\242~?<\036\301\001=\360\020\224=aur<\224h\303<EB\307=\025\271\305\274+<{=\223\343\027\274\346]\211<\004\307\212\274\252\2261<\267N\242\275\302\353\237\274\217g\204\275\25244=\342?O\275\350Af=\003c\220=\036\253\363\275UD\355\274\215\'\000\275U\236\014\274\363\201\013\275\346\257>\275\302\245\210<~\364\276\274,\363\311=q\341\210\274B\030\231;_\211(\275\2508Z<]\274\"\274\306\2409=D\272\035;\367\325]=\315\202\n\274f\374?\275I\342\205=\210U\336\272p\301\241<D\302\227=\226l\335</~U\275\227\233\036\273\312mJ\274\251\n\247\273,\214\303\275\264\014`\274\251\351\211\275\341S\017=+\307\241\273v\363\275\274H\261=<@6>\275\032\242q<\022\'_\275!\227\003=E\310j:\302\244T\275\352M\032<d\307\273;#eu=\021L\361:I\2575\275:4|\274[\006h<\177\235?=&\305\203\274\332\250\267=\200\226\353\274\240\317\006<C\014B=\313\277\257<Y}/\274\352\014\241\273\261&\031=>\340\361\274x\020\027<\313\003\267<\247zD\275\202\343\357<\211y\027\275\331\231\231\272\223\336h=\207\023j<P%\350\274\345\335\244=E\017\202<}\010\013\275\r\017\371<)\036)\275L\301\220=f\242\022\275vq\'=bw2=\032\026M<\247\236\303\275A\256\266;\204\346\235\274\205\315\t=\245\355\376\274\325\226\200\274\306\375T\275h\231\322\275\035\207\003<\301:\206\275]\223\205=\237%;\273,\274l=\260\2345\275\236\2118<\266\265\206=\224\316\224\275\360b#\275\207\357y\275R1\227<\301\016\321\275\250\375&\275`\216V\275\210\322l\273\005\304\023=\022\037\367=\331\256g=\324\222B<\3321\001\274\007C?\273\024\226\271\274NRl=\014\016U\275\300\020\000=}c\254\2749\365o=7E\357=\031\346\223\274\231\r\201\273\337\020\377\273\r\200\023\272\354d#=4\271 \275\271.h<\006*\324<\231\217\000\276N\221\030;\271{\317;\230\207\003\275|\270\212\274\360\350\363\274\2307\362<V\323\345\274\203\354\177<\240Rp\275\030nm<ke\256\275\033MO\275T\203\006<\331\323==GM\370\274\277\034D\275Va\245;I\025q\275u\026~\273|m#=\203e\237\271\267=2\275\212\206\231<o\323=\275\025\207\327\273y\325O\275K\306\277<\216{\226\2756\026\023>,8!\275\220\324\256<\226\376\035=\003\273N\275}8\035=K\203\240<3\251\322\274Lr\276:Z\250\034<\234\000\303<\246-\303\273O\350\222<\340\037\302\272gd\214\2744\276\024=$i\241<\372\274\211\273\355F\244\274\221\024\211\273Xm/\275\235e\266\274\320vQ=\363\023 \275\304`\027\275\346\333\272=\320\260\353\274\313\255\207\274\210R\212\275L\245\034<\227y3\275\306\317\243;\272\342\350\274/B\263=}\t\241:\030\226\305;\003\202\344<\270\2449\275|\222L\274\031^\267\275\013\344#=\007\203\233\274\t\033\343<\2103\024\275\323\266f=\222Q\321=j_>;\027\352\030\2752c\367<\206\366\336<\217{\217\275$l\354:`\277`=\007\212\253\274\177t\366<W_~\275\340\001\213\275\224Xn\275\3360t\274\236\275\246\275:\253\023>\0217_\275\354>\r=\240\240\202<y\313\037\275\305\211\360\272\235\177\316<\267\003\310\273c\252G=\247g\273<\r\225\027<\3153%\272\334\031\315\274+\227\243=\227o\"<\244\355\341\274\311-c=\\B\212=\200R{\274\211\367I=@`\010\276\340\035\364<\253K-\275\001\n\243<2m\312<2(f\274\252\315\003\275\333\264\'\274=_\005\275!}\320=\035:\367<\234{_\275\023$\234=\276uF\271\274Q\n=\261F\365\274\tUk\275H\213\212=\220\205\205=\241q\254=\010\305\352;!F\004\275q<t\275\254\324&<l\005\235\275\203$\212\275\3024,\275\271x\213\275\226\247\261\274\246\315,\275\274\225]\274\302<\014;u\274\337\274I\2219=\034\213\304;\255J\373\274\nT<=s e\274\241\037 \275\255\"\303\273}\256\231<d\336\256\275Z`\260=K\375\362\272\006*\031<),\023\275\350\004\220\274\234\032w\273\262\236}=\334\230\033=\203\376\357<H(\261<\303O\204<\346y\377<\200\331r\275o\317\256=\223V\004\275\363\2161=\316\300!\275\027\005\002\275\336;\310\274\'/\001<\306\r\304\275\345\016\n=p\312\005\275\'R}=,\001\266\275n~\316\272\337\342g=\"\350\030\273\013\034\377;!^k\274c\201w=\335`G\275\017~I\274#:@\275\207?b\275\013(]9VB$=\030&\270\273\206\336X\275qQ\317;\nb\212=Z\332\306\274\270\354\301\275\336\'\230=\020\222S=AB_<\257\\N\275\305\364\205\274\305sA\275J\223\204\274)\265\r=\217\351\n=\010@\300\274\t<\220<\034\232\377\274\026H\303;\327\362c\274\362\223\344\274a\315\230\275\353\332a:\214\000F=Y\3162\275OT\364=m\240t\275\311\253\005<\004\347\203\275\323\215\344<\276\273\265\274n\177*\275\3578C=\016\332#\274\336\201\257\273-\276\031\274\201\353E\275\'j\t\274h\212W=\242\304G\274W\366\235< \224n\275sC\'=p\371\021\275\250\203I=o/\350<\253\220\223\274\307\325!=\"\231\374\274\205\263\233\274\2618\364\273\024\271\213\272!o9\275\374\341\356<\2509\361<\007^:=\227\340Y;6hF<\326\032\351=,\263\230<Z];\275\014{\327\274\270\006\214\273\331\361\250\275\321\337\341<\244\032\025\275UF0\275o\322\246;\203\3077\275\003\245:\275\210\212q=.y\262;s\254>=\316\320\026<G-\016\275\016\272\006\275\206\371 <z\352@\275\034Z\301==\000,\275\007\"Z<&\022{<\202-\201\2753\354B\275<\334\010\275\332}\260\274\023w\032={\206=\274V\304Y=\246\2461=\314\252\273\273f\372\267\275\225X\247=\257\271\360\274\222\211\240\274\311\273\251=\205\000^\274\320B\n\275*h\006\275\016\236\357\273\033\355\306\2751T\210\274\001k\207\274\nvJ=\35319\275\006\321\313<\226o\031\275\367I6\2743b\202=\214;k\272\272\004\371\274AN\201<\217\200\315\273\010$\303<\305\215\021=l\006\232\275\2177\316<\233\177\215<\346_\236;L\365\302\273\202;\277\273}\354;\275\244M\367\274l\004G\274O\217!=+p\234<\347\247\321\274\3356\315\272\214]\373\274\215\023c=T\266\327\273s\237\n=\250\317\020\273\212\234\007\274\204hL=2\"q=\316\267s:\244\245C\275\207b7<(\210.\275\210\344?\275:\217\232=\242\233\241=\007\361\310<\363\262\036<K\317\377\274\244#\267<I\177E\274\177\2625\273\325\0145=1\253\030\275\226\372\274<\034\262M<78\273;C\342\201\274=\363\361\274\332\313\346;_|\213=$_X\274\227\235K\275;\325\026<\364\204\265=\351$\274\275\364\274\266<\263S\242\275\021G2=\020\032Z\275\016{\242\274a\222\250<\370\337\010\275\371\260+\275O\022\337=\030\207\240\274\243\361w=o\022&\274X\244\200\274O#\236\273w%\025;\371\232v;\300\231B=\021\"\010=\311\242\007\275\240Cz\275\362G)=\205\350\231;\2263\204<aA\316\274\213\360\227\274\325B\201=\370:\201=\301\205\345\274\341\"\243:\247P\275\274g\314\224\274\202\275\275=(\307\263\273-\231\023=\271\237f<\357S\014\2746\245N\274\001u\262\275\260]k=.\274\017\275\276g{\274|IJ\275\305\227\032=\313\317\376\275\326Er<\375P\000=\350O\346\274\035\257!=\344\035:\273I7\003\275\222\n\001=0\335`<\356@\251\273\'\334\226=Z\024\037<|\240\033\274>\335\327\274w\177\'=M\271/=[\243\326<\374I\354<\206>\257\272\030y>;*\346\n>V^G=\276\031:<c.Q;\337\255\250<\215\256\312<\353\250\245\275\013\341P\275}\277\246<\340\272_<\300\321\355\275\203\364\342<\301\316\342<\004\370\201\274\215\300\232=2\311\001<@\211\237\274\'x\352;\206\227\222\275\034\333\265:\202\356\310\274\254\361C<]\375X=\345r.:\3706@<\273\004\220\274cY{=d\240\376\273\035\022R<\373J\303\274\264\333\370;\367\2667=s\257\354:~`\326=D\017\025=\262\363Z=^w&<Nf\304\273\275\321f\275\321\251!=\332&\241<\312\207\025\2752\022\353\273\217\005\307<\261\343\270<F9,=\206\323\313\274G,\373\272<\370\312<%\247*=~\021\027=\334>\220\275 \246L\275\220\210\376\272\010\016O=\013\222\013\275\363\030\216\274\014\240\363<\342\314)\275?\306\240\273\005\227-<#\230\004:U\374\244\275\r\206\026\275\373|\000\275\375\\\245<\2738\200\273=\373\323<\262B.=J\347\227<\376\020\373\274\340\017I=\320E\242<\234\r\277\274 \332d=\307\327\242\273c\327\345</O}<6J\225<P\340\314\275\230h6\274J\014\230\274\306S\336<.TK=*^\373\274\266\031I<b\263s<\304\r\305<\302&\226=\264\313\336\274Y\350\232<\301\005l\274\300L\226;t\360W;_Qq\275\215e\254=\202\264\023\275\0136\245=\245vI=J6\000\273\020\3344=\023\353U\274\333y\005\274\332\303\030\2753\204\202\274e\215+\273q\302u<\272\270|\275>\302B\275B\324\010=\003\231\206;\"1\240\274x\312\276\274\357f\263\274H\256\022=\002\216\243<\241\212\363\274\230\320A\275\315\335\324\274{p$=\255\020\263;O\205\226=\244_\231=\232\035\027\275\036&\220\274\363w\304\274\326\372\215=#\274\230\273\220\t4\275\225\311+\274\356i\246=Z\303\206\275co\252\274T\244$<xX@\275\251\025A\272\340P\226=\323\271\374=J\210\020=\303%]<)\200\r\2747p\"<\032\365V=q \223\2749\0035;}..<\001\001\211\273\232\323\006<\324D\307=\016\377\301;\265Q\'=\303?\034<\266\273!=\377D\262\275\367\237\364\274\311\353\004<g\224\330;\257\367\227=\351(\032=\002\003\202<q\317\252<\212\373(<\022]\n=R\356\376;\362\3470<\316\303\032\275\303\272j\275\013`\217=v\264\227=\321f\346=t\264\236<\272A\217\2754\207\203=\304{]\275v\244O\275>R\001<\002\301\301\274\304l\367\274\\{\311<\360\347\002<9\004\270\274\355\036\255\275\267\255\352<C(\256\274\306I5=\210D\360;\306\250p=\273\326v\275>\313O\275\245\254\363<\300\352h\275\356\246#\274$\017\206;\\\366*\275\214C\365\274\333K4=3N\266\275N!0=X\032\230\274q\353\366\274tA\305;\372\311A<\255\017a<Eg\272\275}\t\314=hM\374\273Z\271\002<\310Z\r\2755\020\332\274\226\336g\273\347\220\316\274\220?d=r\337\021=Fm\240<\302\220\000\274{\"b\274\332*\001=Q\227P\275a\245$\275\215\263\024\275K\2661\275Fw\335<IMZ=\254\026\242\275X\000$=\353\"\277\274c\221\016\275f\323\264<\254M\021\275j\033,\273|VK\275!\346\254\274\300eD=\277\034\013=21\273\274\351\216[=\0229\000\275Z\355\267;$\207\032\2742P\256\274\226\215\270=\000\236\026;`\177\247<\316I\244\272\226\374|\274t!K\275\300\215\220=\304\230\263\275<\324\267<\242\216$=\374\352\220\275\274,\261\274\201\336\360<\031\n\024\272\315R@=\005\tJ<t{\\\274\336>\273\273 ?\263<\372B\021=s\022\014=\343\005\"\274D\005\030;\032d\322\275C\253\034\275\255\004\206=\316\022\002\275\206\223\016\274\021?\234=\271\001\277<\302\350\304;*\333\215=\002y\"\275\225\333J\275>\362!=D\337s\274\324\312)\2755z\370<\025\336\227\275\320\244\234\274qe\253\274\263\270\322;\022\363\t\2758\276\242=9\357\020>\237\251\362\274\224\200g\275\363yb\275\321\256\350\274\271\374\271<\310j{=?\305\301\274\233\235\207\275*f\210=W\353q\274\205\350\223\273\374C\030=\334P\202=\021\033\345\274\333\236\346=&g\243\274\342A+\275;\202A<\321[\366<O-=\274\343\245Q\274\213_\232=\246r8<6w\336<\350\357\003\275\251\t\267\273\216\300\275<xt\366\275i\335d\274CT\255\275\311\036\207\275`\241\202=\270R\325<%\032&\275\022U|\274B]`<\354{\r\275\307\306\251\274\037r\341\271\007\374~\272\336n+\274\0208G\275\001\245\223=\202\276\021<\374G\031<\217N\216<:\230*=\313\362\r<\3573{\275\235\025\226=\2015~\275e\002\347\274\353\262w\275\025\324^;\276\265T=\321\327\331;\315\215\216;j\004\301=\246\204H=\305\256\030<]\273s=dL\031=\031p\345\2735\362f=%\347M=\254(\027=]\014\323<\326\034]\275\301\321\010\275\013\037\007\275C\305\036\275\223\332\303\271\177`t\274\327\265R=p\014\215\275\300v\300<\367\201\321<\235\357>\275\036\320(\275\336\231\006=w\370\247<w\2460=\351F\250\275~v\251<\312?\275=0\272@=\240\tH\275\316\304\251=s\320\177\275y\250\"<\313\314\235<K\020v\275\320\0359=\274\264\035\275\272N%\275\023b\234\275Ti\033=F\353`8\214\301\265<|Dp\274b\326C\274.a\250=8?\204=\345-\004\275\347J\327<\2263<\275j\317\255=\325\240\023\275V\255\013=P+4\274u\366\202=K\'\205\275=s\360;7~\247<q\345\210\274N\026*=d\277\274<\245\335o\273\230K\264\275\351\251{<\017\307\256=\307\025\237=\000\351T\275\207\275\301\274 ?\035=\365\257\205<\260\251@=\337\300j=\310G \274b\357\313\275Avy\275\243.q\2742|\225\275\220\315.\275\251\335z\275\032\032!<\302\221\016:n\316t\275\203\373:=\334\222\000\275\251\266\264\273\344\017J=\321\233\023\275c\037%=0\263\246;\246;\001\274\302z\351\274\330\253\350\274\274\227\360\274hMQ\274\241-X\274\340\375\224\272\377_\305\274\034\206\314<\361\334.\275\2655\252<c\035\377:\201\237\273<(]/\275\373C\315\274C\205\201=J\263w=\2570\311<51\277<\372\245>\275\232\317>=\337\250U\275\226k\270\275\'\372\242=\265C\277=\2209&\273\001\177\035\274\032\237\004\275\306\034\306\273\216\303R\273\304\352\364=\t\257m=\357Q\200\274\270d*\274\254\221\277=\221H\267\274Ec\016\275\200u\233<\030\326\334\275BvP=\256\243\024\2751P\222\274\266r\347\274a\307\027<\315\374[<\251\216`=\226\351\231;T\363\204\273\302\221\013=J\274\202\275\361\236/=o\014\353\274\324\024\206\275\274\204\232<\\\207\204\274?]\375\274+mM\273\241\240\213\274\364\231\200\275J\317T<\013g\004<\276A\373<\354\365\256\274_\227\350\274\2410\225<P\313D\273\206t\342;K\273\005\275W[\237\275|\245\213\274\275\020\312\275\353y:\275\r\'\206\273\nx\365=\365\356U\275\235\037W\274\304{P<\242\375\254\274\364\376\366\274\023\214h=\206\271\336<Q(!<}9Y\275\243\330A\274F\334\334;P\362R<\334\315d;R\0134\272_\002\257<e\215\024\2759\r\303\274\313[\022\274\203\362\300\274\017\306\235\275;\227\364;)\303\r<\221DC\275\277eJ=\341\362\211=\365\272\004\274\3129\311\273}\001\343\274\226\261\321\275^\317]\275R!2\274\237\225\350\274\340\235\004<:\227\216=\256@C\274\223\000\020>\201B\005\275(\347\212=\024Z\204=h$\031\275\335\246\321\273\262\373\007=\204\2253;K\255]\275\377\\\236=B\220\014<\276\261o=\204w\201\275H_\226\275\261\026Y\273\255\314\221<\212\251\2179TG\001=s\337\375=\271s\277\275\262\275\310\274\265\035\277\275\322\203\363\275\027{\021<#J\007=I\343\217=ge\307<O\307\306\274\331\377<\275x\326o:\032\t\221\275v\322\364</#c\275\2565^=)\273\254<\024\310:=\001\275\352\274`\335\240\274 \231\340<q\325\022\275N\215\206=\336\262\217\272\323H\\\274\241\360\246\275\250\360\301=\331p\224\274~Kt\275\366@\010=\325\322\036=n\221\303\274\254\326P\273\266!F<#|\245\273\317\275e=\272\306\216=\251n\211=\220\036\224=RV\003=\203@7\275\211\347\n\275\225S\206<\2004\207<L\236\244;\033\263y\275\205Ls<\202\267E=]\013\373<\215\237\350\274\277\271\220<\325\340\234\275@{\310<bwa\275\036\263\005=Z|\303\274\372\250\000\273v%H=t\334w=\025\3067=W\336}<\365f\033\275x\213v:c+\227<\375jD<\032L\202\274\361\r\240\275\034\337z<\363\211&<\215/]=)aS<\257\201\231=\252_\203\275\310\217\261<\326M;\275\331\264\310<\177\247{<s-B\275\216D3\274\225\370\201\275\325\341 =\272s0=\241\377 \274\217\252\234=\360\263\245\274\3054C\275)\316/=Z\202\247=`5\274<[\377?\275\n\260z=\257H\363<\211+R<Zi?=\014\021\370\275\326\337><\220\225\227;\371l\026\274\356\013\337<\213%\003;\257L\030<\341\271\212\274d2\354<\261\255<\275\372\346h\275f\330\211\275\3447\230\275V\317b=\340\367;<\302>\202<\327\372\007\275[Q\213<5K\243\274\311\006\365\274\245\032(\275\273l\037=\206\035a<\277\025$=\227Re\272\252X\264<\264x\234\274\211\\l\272\3307\256\274i\306{\274<\371\023\275\222\005\'\274\257A\3179\311\277\375\273]\247k=5K\035\275\024:(=U\255\367\274\310\0346<\025\3176=O\242\374<\236\004\327<\316,\033=\004\316\"\274\212\224\021\275\202fW=I\0250\275\326\376\255\275\317\223\033\275\242\266E=4\351\237\274`\275Y=\223\326\367\274\273\230W\274XE\214=\337!$\272#\206P=8\246\245;?\342D=\320c\331\274Qx>=\241<\233\275tc\332\275h\207&<\220v\257\275ktl\275\341j\230<1\226\006\275\205P>=E\'j:\010\215L<\314>\222=\020\0255\275\326\036\212\275\234\233\356\273\343\250\264\274\353\275b<J=\374\274\350\376T\275\306\260K=\372C\321\274\354N\003\275\207W\302\274gA\013=\006o\355\274\311W\271:\354;\035;\022\335\027<\362\273\324;\361%\036\273\245Qw<\004\340\235\274\002\003\367<\001\220u=~=w\271\234\260]\275\026\275\241\273\251U\347<\016\313\354\274\275\201{\275\330E\254\274\364\201\211\274-\370%=\241\263z<\257-\210=\214F\323\273\201q\320\274\215\216\260=\350n\337\273;\312\346\274e\374\034\275\223tX\273<tm\275\240\264\215=1\032\253<+\360\366<#\307\273\273\261\205\301<\321\3255\273\330\272\367<{^\022\274\342\232R=\2526\254<\247\004\333\274\355\3109=[\373)=l\2330=\3006\222\274\301\325\323<\375ks=?\013\247\275\250\300\235\275\366\3366=\271n\237\275^\336\314\274\264~\222=\2120O=\221\306\267<-\007|\275A\334\023=\356\221\017=\204!\310=\323\356\353\274\\&\247\273\375\372\310\275\020\007\200=\207\305B=\362\211\325\274\306v\034=\311\024&\275/c$=\316\202{<\236\367\220\274\007\345\206\274\214\025\027\275\021\303\275\274\331\256\310<[~1\274}\000\217<z\265\036\275\223\352!<\344\266\006=\264\260\032\274D\002\311<j\004\237=\326m\013<\376\3636\275\314\0167=k\026\277\272-\326\231\275\357~B=`H|\274\352\333\302<\364\347\024<M\327\007=f\001\273;\"\332H\275T\337v=\310D&=\240\260\265<g\273\304\274E\024\374\274\371\2447<\2632\037\275|d\354\274?\250D\275\2716!=\336b\027\275\217FK\275\361w\010\275\027{\016=u\305\207<\310\301\334=\231\256\203\275\370\331\266\274\253f.=E\305\360\274\004\366\235;t\021\377\274\374\374\t\274j\276\217\275\362\350\302\275I\361\233=\344\363)=\247\231\307<\202\261\335<b\230\306\274\005\177I=\305\307\242<*\273\221=fI\203\275\023\016\250=\370\214\225\275K`\221\274\306\301>\274\340H\177\273Z\250Q=]\275\327\272;\022V=-f\201\275\022\031#\275\326\312\350<1\351C\275+\245]\275\374\030A=\316\353\233<\263\210\206:\036\031X\274U}\021=ht\250\274\177\002I<\344\r\261=\322\324\304;~\356\n\274$\n\020<\315\366\200\275\350s\"=\222\340~=\372\337\276\274:\337\261\273\370\232\241\275\327\350\016\275\331\232m\275\3024\216\275\306\361]\274\251=*<\023\324\231;\270\233\035\275p\027\273\274\225\225\025\2732AA\275\201b}\275vU\247\274n\361\231<\241w^\275\004\302\231<}B\n=y\362B\271H\347\016=f\'I\275\226\367\220<\360\211b\275\2323\031\275\363\350\232=:\350&=\322\033\017<\323g\207<\245\250\036\275\202~H<\334\265\010<\221q%\275P\206\360;]\013\307<\376\0005;2b\347\275y\021\021\275AA:\274T\214\374;\226~x\275F\312\313<\\@\332\275\263\212s\274Be\177\274w\202\'=\212J?\274\355\023\261\274\033\210w=\205\375\371<8\3539\274]H$\275\007\200\233\274\225k3<\235n\264\274h8\354<\233yc\275e\3539\275wE\253\274\322\243\231<\354\014M<\226W@\275;\353\241<6\372\272=\373\271\363\274\343\241\357\275\273\246\314<\233\254\035<\331\277\363<\347\203\014\272\360\0138=\357p\013=\024\020,<[\240\206\274\347>X;\202\240\212=\322*\230;\250K(\273:)\332\274\314M\023=\251v]\274?\010\010\275\007\352\324\274rIQ=\221\360\t\275\335H#<\240E5=C\370\025;(h\242;\320G\030=\222\362\024\275.\3619\273\025G\023=\313\263W\274\032\341L=\370V^=\267\316\017\275\352\306J\272\253R(=\216D!=8w\034\275.\266\344\274\223Rv\275Ifl<\320\342\203=\265a*=JO\001\276p\027\367\274\213rT\275\334]\353\275\304\372\270<6(\252=\276\274\035=\314}\311=\373\277\024\274Z)\245\274\005IV=Y\034\250<\320\323\206=\234/r=\260\261L=\327\361\005<\263Z\323<&O\336<\324\324-\273\300\373\270\274\364~\262\274q^\316<\235w\301\2749m\335=\345\230\200<er\\\275\2443D=\276\377A;\306;\243\275\220\337\254<\\>(\274[\351\235\275S{#=/P\252=\360P\247\275,\254[<\255\252\'=\234q\277\273\303\r\250\275\310\235\224\275sn\256\275\264+*\275\000\220\210=]\263\260\274\210O\323<\300n\216<\\\023\206=\200\000\201\275\003@\354;\3478<\274\306\346\307=\352\361\260\274\327\025N=\200\354\214\274%}\021=#Q3\275\243\322\255\273\264\013c\275\273\t\201=\217X\302\273\226\027u\275\344{\362<\013\034w=b\220\334\274\346\301.\275\016r\r<\312\320\274\274\031J\205\275\000s\001=\007\302\235<\t\n\351<\350\275\245\274E\360U=\232|g\273\205\'\265\275,\246\017<:\260-\275by?\273\\\217k\275~sY<\254\325q\273^\3015=\302[E\275\215I\020=\307\372\330<(-\263<\234!\003=\325\031>\275jT\207\274\303\026\270\274\007\244w=\220L\347\2741\334\236\275\021\233\203;Ye\244=\301\377\t\274\277\264\232\275M\216\001\276!\334|=\364M\217=\030G(<\224\014+<\263\241\017=\274T\214\271\334\235\354<\"\002T\275\200\314s=\340\013\334<\2315\253\274Tz;=\330\034\371<\245J\366\274\354uv\275\017\'\321;\002(\000\275\357\"\265=\022\020\"\275\014\217\255\274\345\257\271=&\n\223;\222\227\351;\235\035\367;\310M`<\013\024\254<\351\351\303\274-\273\207\275\234\254z\275\276\2249=\"\r\334<\363\200f=\326\354V\275\300\230\023=W\202\351\274f\203\365\274\363\014\274\274h\2076=\350N\010\275M\377\360\274!u8=\341\252\252<\n\206\242<?\273\007=L\231f\275\251\346!=\270\376\223\274\240U\322<#}\343\274\305\270\337\274\203\2526<\323\375H;\006\345\263<\273\324\320\274Th\326\274\215|%\274\220\307\206\274\370\256\361<\007\221\321\274v\300\224=j\263\250\275\255+\266\274\340\240\"\275\270\217i<($J\273Je\213=\243\"g=\376A\312<\273\360D=C\275\022;\273\"\337\273\0101/\275\000{\202=\337\027n\275\216\375V=\245\375#=\356\344\335<\313\3079;)/F\275\341\305\235\274k\341j\274\034\036\010=\002\310\213=}&\220<\245\337\016\2753\330\244\274{M\253<q\275\220;\027\237\323\274d\350\013\275m\203\327\274\375O\006=\332\353-\275-\335\224\275D\005$\275]TN=\243\367r\275\263\272\017\274\024=_\275\212\r\217=CM\022\275\004\266c<\240q\304\274\345\253\007\275\023\311i\274^*\307\274\215\257!</<\r\274\007\371\306=\020-\t\274f\244C\275\020\370\335<\310x\203\275\261\317\002>=\204\206\275|\217\256\273ywB\275\317rN<q\033\350\274\342G\362<\275\025W<\267\177\247=\303\242\227\273\000|)\2758\222\307<\027\332\031=\304\330|<\322\017\304\273\205\362\313\274u\254o=iw6<O\325_\274\272\014\023=\345\000\334<\025\004\203\274\214\250\236=\276%d\274\205\360\016\274\323\271\345<4c\353\274B\350\241\275\363\336\222;2z\022\275&e\242\274\216z\323<\264\tG\273QO\224<\256?\007\274\\\034}\273%$!\275\277\352#=\360\217\235=i\\\214=\370o\001:\341\3451\275M(\204=\'\263\264=\343I\004\275\326\321K\275\220s\343<|:V<Z\216\221\274\020\003@<\266o.</o\033=\276\231`\275\220\363\330<O\341%\274J\236\221;\3674\005=\257\361\216\275\267D\203\274z6a=\253F\251=\320B!=6\264\010\275\020\205\037<aq\200=\211\340\205=\317\357\205\274\266%\235\275\273\003\034;\212\023&\274\'\235\231\274,M\310\275\005\026\n\275\212U\234=\2007\232<Nb9\275\261\350\274\273\256\361\272\275\276\000\017\275E ^<`\254V\270\304~\250\275\324-\273\274\360\272\366\270De\016\275m\014l\273\243\245\356\274\022\364\'=\002\261\236\275\rP\353<\376\262\316<_\346\312\274dA\254;\215n\025\275#\254\323<n\024\311:<D\023\275\343[\024=|n\244<O4!<\021\351\206=\200F%\275\374b]=L\266\304\274\201\362\004\274\310$\274<BM\205<\210\013\033\274\025n\204=\032[\220\274\255\030\336<\022\021\036\275X\241\202\274\004u\327;\033\332\231\275\246\366S=c\001\023<\267\227\201=\336\354\311<\305m~<P\256\216\275\006\342T=\254\374D<\0270\272=\312\311K;\263\036G<\373\306\315\2748\321,=\332\225T=\350\322?\275d\032-\275\353\013_=\\\217\017=YgX=&\256y\275~\241e\275N\224;=\253-x=\226y\317\273\013\3674\275\272\0101=\303\237\334\274\206I\325\271kv\307\274Hu\275=8WD<\376B5\274S\255k=\221\315\236\273&\035\261\272\361c\211\275\231\205\234=!\261Q\275\r\002\275<\331\273\023<%\263I<H\241\352\273WO\'=\033)\243<\010p\300\274\213j\273\275\232\034\225\274r^\021=\262\341}\275\020\317\216=\266u\325<a\251\032=\254\362\230\274\370\363\351<>\217\223<\315\233\347<-\244~<\352\363\210\274\323# \274sj\016\275@\322}\275>?V\274\264\001]=\302B\023=\364\342\037\275\356\366\243=\273z\211\273\262[\231;P\345\032=\001@\200=\3066\255;s\215\017=\245\364\024\273\351\317\213\274\360\024\303<~\211\025=-\0267=\373\000\014=\225\3601=-x\313\275\346\000\344\274\n\031\221\274\332b\340<\035\302-\275\020\364\246<z\337n\2752\224\003\275\367\205\216\275<\275\302<\347\202\252\274(\224\324<)\003d\275n\252\235:;\2738=X\257\\\275v\036\350\274cx\';y\254\000=S5\226=\304\207&\275k\307\330\272\236(\020>\364\223\236<\364T\275\275\300\242\330\274\337t\032<\007\347y=pS\340<@\220^;\235\240\016;,Fn;\334\240[=s\314\203\275\345\\s\2758\227\257\274\217\263\246=\n\322\200\275\260j\223=\341\312\260<B\314x\274\351\321S=\262\204\376\274K\tf\272\373\nc\274\030\200/<s\316?\275\t\\$\275\347\335\322<\212\016\361\273z!\202=\245\001\327<Y\265\014\275Z\366\230\275\223XI\275V[/\275\217D\\\275F\311\256;L\231T;\270\250\257=0D\230\275yzX\274\361\000\023\275\2648\236=3\314y<4\277\216<\360\322i\275\333\353B=\207l\036\274\327\030\215=\010%\021\274\326\307\"\275\372\2173=\032%\362\273\030\014\356<\313\367+<\303)7\275\321TD;\333\261L\275u\253;=\341\244\353<\217\206\344=\322\304\201<\n\321\272=\311\307d\275%\236R\275\017D\274<\313\257\212\275\211\356\001=!\323\247\275\336\376\205\270\242\017\024<\36257\275\277\023\253<:\025\351<\356\222\037=o\207K=\251\311I=\201\357\261\274\372w\223=e\252[\275\033u\341\274\331\3754<\345!\217\274\376\212\222=\356\010\313\275\252\323`<\260C\335\275\317Op\274-A\206<F(\003<\233m\200\275k\325\255;R\322\030=V\035)=\265r4\274q\312\201=\311\344\273\274\342\231\030\275\236\307\275=\n\321\021<P\232\001\274\313ny<C\273\332=k$\367\274N\266\340=0\326\213<\371=\242<\254\330\n<\260\231p\274\233\007#:.\325\n=\243X\257<\314\262\262\275\0302w<fU\254\273kM\276=s[\222<\004\334\021\275V`\214<\231\361V=Zy\336;\334\032\031\275\376\223\233=5&[\275I\302\211\274M\304\204\275\243\271\371<\243.\267\273\\U\023<W\312\302=\020\n\303\274\342\237\273<\243\315\026<O\231<=.g!\274\250G\327\274\222:\334;\201\347\211\275p\247\024=MP\242<n\004\342\274\261\371i=2*\366;;T+\274\256\340\206\274$\234\207\274\270H\001\274mZ\266\274\307\377\203<\021\216\013=\202\367(\275\3413\227\275\327\005\356\274\357\265\271<\262\3708=\242|r=\320\370\014<+\243.=AW\220<\261\361\037\274\223\357)=0\3244\275\215\271\223:\326\007\216\274\360A\370<$\'\007=\346\2755\275\025^V=\230\350\207;\004\276\003=\235\\\226\2759\020\212\274rr\324\275#\250\'\274\356\300\033\275\000Y\305\274\217\230\235=C\333E;\261U\227;8\300 \275\325\211 =1\0000\274\3729\023\274\206\246\256\275^\224*=\221\312\202\274E\313\316<\316\314\001\275\034\277.=5\255\246=\353\302\243\274\243\226\035\275[D\351\275\203\305\311\274O\342@\275\361\304\016;\201\233`\274A\315d=\356R\254=\227B\313\272\346yO;\216\350t\274\010\324\371;\216\233-\2744\307\202\275\356\r?=\200Q=\275\321\025\237<jK\017=\0379):\335\364\262\275\020\271\315<a\375\212=\350\024q<\331t\315<\265\236q=\246\020p;\\xU<\231Dd\275k\177\265\275S\014(\275\234\2668=\030\n&\275#\305T\272\n\262\021=\370\037)\273(\302\227=\205\263?\275\353\350\227\272\3349!\275p\026.=\017\244\036\274\256/\203\275\003\373\315\274F\200\r\275\266\2633\273m\371W=\323\340#\275}y\023=\334N\370\274Z%;\274v\313 =Q\271\242\275\n\363\256\275{\200|\275\207\014\020\275v\313a=\356#\325<\307\0140\275\347\301\256<\207Q\013\275\375y\210\275\215@L<\025\314!<\320\370\t\275\230?}<\301\371\245\275}\036\000<\252\367\024=\247\350\205<\233\037;=\272r\177\275aO\263;\313\001\010\276B\322\237\274\002\347\001=\362\177\361;?#\227\272YY\337\274d\032\032\273\212\367-\275\3556\265\275\0014\212\275\2223Q\274\262p\243=\345uX\274\330\241\217\275q\301\317\2743\3517=\242+\007\275*\n\002=p\343\002\275c\036+\275\332=[\274:t\307\274w\247I\275\332\335\016=\251\342\273\273\031z\320\275\035\024=\275F\324\201=k\347\244\274|\307n\274{?\264<\266\022m\274c\227\026\275\373hL=\021Z\206\2743\025T=\024\265\307\273\215\030\212=\006<\027=!K\212=\356\357\265<\365TV=\020\342\224\271\350\2254<D\352\034=\177\023x\275\377\216\231\275\214Y\006=0wT\275\374\232!<\342\346\336\273\276\r\343\274\207\204Z=\346P\270\274`\024\316\274J\323@=\362>\'\275\316\376\022\274\272\234\244<:\320\206=;\035\261<4\t1=H\354M<\352\306\014\2723\232E=\235\347]\275\305\356\241=\"Bc<Gx\357<peV=sAA:+L8\275\004\223\'==N\003=J\363\361<\245OY\273pT\214\275\330\261\312;\365\235\304\275\"rb<\344\021\\;9\007\362<U\371E\275\351U\377\273\020\363\375\273s\241\027<\213\307\323<\320\372\034\274<\264\204\272\373\254\231=\"}M=\240\031Y=s\330+\275\024\240\350<\004\005\032=\030\370\277<\234\262D=\250\241\350\273\362\310\251\275\303#2\275\306j\276\275\250\213G=LB.<\373w\024\2755i\231\274\022qN=\377i6\275\237W0\275\354\210\234<\266\001\252;_\r\372;k-\325=z\037\\<\320\221\266=\273j\311\2742?7;U\020v=\022\372e\275\26464=\250\303\317:\331\266`=\031V\234\274kYI=\031m4\274\024\210j=\353\225m<\206:\320;\322\373\351\274\215%\006\275\262.8<\023\2255\275\203\364]<\374\254\237<\354\0143\274\371\330\r\275\355.\260\275\003 \205;O\343\277=\037h\223=;\324\322\274\362\373\352;\360^\177=g\231\000\275\027\313\021\274/\334\274\274s0o\273t\003\345<\262\205#\275\336\224\007=E\356\320<j\331T\275>\244j=\344\334\305:\265\344\204\275\006n{\275\265|\317\275\266)m=\265\337x\275U\367\342\272\024\246};a\020o=yi/\275?\030\372<\260\323\005\275\247:\\=\257f\332;\263\'\356<\363\260\352<Hi\n=\335l\210=\257\t\007=\374\374\332\274Hu}\275\243\371\222<\032\010\250<\245\225!\273\0334\010<\331\322\034=1\204\311;\374\237\273=\257\350C=\224r\233=\212\345\242\274\232\300\r\275\336\315D\274\325ig=\365\273\271=\246(7\275\2558\034\275-\341\020<\345\306S\275w$H\274p\301\225\275\250\276\273=)\324\023\275\001FS=R\275\357<\362\313a\275\005/\245\274\247\213\005=\357K\'=\034\224\355<\0374\277\274\r\371x\274\354`\357\273\325\376\237;Bi\005<\254\347A<\275\007K\275@f\355<\023\000\202=\210b\365\274*,_<\006\361~<\203\3413=$\244\2229\342\000\000\2752\327N<L\262\016\275\335\335\031=\240|h= \003\346\273\231e\253<\014\327+==n\005=U\367\225\275\365)\014\275flA\275\370\301 =\326\252Q\275\177\207S\275ZH\231\273\000\200\007\273\264\210N\274D&\221\274\024u+=\370\255#=\372\"\250=7\003\234<\265\276\267\275\265C@=\2669\242=\340\323\324<SuU\274\317q\253<\032*\'\275\236/\210\2742I\014=Y\242\344<\332m\035=&\013\335=\301\265x<\363\234\244\274r\203B\275\344\353\257=\302oE<\007\332v\275\230\232\"<\226\261\303;M\222]\275\2405\235\274\246\231\2649wNn=\002\177\315\273\333J\203;{\371\022\275\325\344\236\274\n\217\203=\350\207\261\274\034:\"=a\266\262=j)\375<\002\265\202=`.\270\273\265\354\213\274]{\234\275\033\024==\315\304\223<\370\273\033\275\200gU\2757\352y\275\307\3036\274Y\335g\275\252\3473<\330\243\331\274\256\376>=s\277\267\273\013\236\376<\367\355\003\275\306\3262<\007^]\275\233>\262<T9H<;\240\256\275C\364&\275\2472g\275\003\313\357;/\036n\275\013\032\227\273\271\030\212=\215\331F\274^\244r\274\255\330\3759\242\307\264\274\203I\210=>\362\274<\274\033\231\275\034\210\313;\304[\030\275\347\2750\274R\221O\274\264E^\275%7\256\275.\271\361;M9\235\274\307\002e=\312lo\274\\E\242\273Q\324\221\275dS\273;Ew\224\275\233B(\274\013g\211=8\203\020\275\352\207|\275\325\347\204\273\214\r\336\271\017\260\270\274;\227\255\274\310d8=\241\376\020\275\202\265\226=\214bg=\367!\245=\211\"\202<V\210A\2745\345\027=d\010a<)|\300\274v<\235=\337\026\213\275\364}\207\275\030\212\316<1\016\356<\221\364E=\223\340K=\032\202\277\273\201\314\023=\222\273m\274\327\034\036\275\374\364,=\376\006\252\273\007m/\275x\351\245\273:\250\211\275\344\324j=\234\367\372\274tc\005;O\034\347<Z:\034\275\203\240\013\274\346\332\371\274\t\316\272\274\351\2139=\005=\250<\222}\217;r\027\352\274\006\256\251;\3070\266\275\200\276L=0\352S<[\023\036\275Oi\204<lC\342\274\026s\324\275\237\262\303\274\334q\204<S\213x\275\236\224\033<\335\325E\275`V\036<\026[\352;\274u\t=\245D\271\274\372j\207\275\372\372\021=\233\026\370\274\253\016\254<\327\216\236\274.\274\313\274\276u\177=Ue\242\275!\207\310\274I\002\014;\370\273/\275\344\262K=\215\337\306<\232\201\327<\226\235\325\274*\365&\274\270\325D=\"\031\265\275{\230\207\275\017C\250\273\336\031\031</\357\036\274\246|\321=\213\3266<\001|\207=3\2467\273O\2115;\360\214\026=j?\265\275\216\253m\275\037\014\003\275\372\305\364\274\331\341\221\274\r \224\273\312\320\306\275\321\332\373<\"\263\304\274*}\372<\303,a\274\034\036^<>\254\210=\210\005\326\274+\305\260\273\210\2470<\231\305\211<y\r\353:\331Ze\273\360\317\251<1\026n\275(<\022=e?\032\275c\n\020\275\022\332\317<)\202g\275/\274\303=_\362\222<\333\016\214\275U\377$=\216\244\215\273\222z\017=Y\307\277<\221\342\025\275\350\210\357\273?\346\226<\026tK=U\322\203\275sG}=&\203\204\274\202V\3309\376\236=\275\006\213\001=\226\361\250\275\311\213\\\274,N\305=\020\252\314<\277\305/=W\010\000=\361\350\277\273\333\367\004=\324\224l\273m\266\223\275\257\375b\275\322\3024\275\030\332\222<\225\267d\275\342`B\273/8\230<\245!\223\273W\267\021=r\321\353\274\265]R\275\256\307\013<\262\226\305\274\177=\355<M\240$<#\320\035\274]\002\300<\010Fv=\177\2736<\266\016\270\274\361\315\264\275Q\200\221\275\223\177\211;\r\205\000\276+\237J<\222\337b<\375H\001<R\244\361\2742R\036\275<\331!<\225\3404\275P=\003<\366k\214<4|\225\274\357P\264<\360\3431=\363\310\337\272\315I5\275\267\270\264\274{WN\272\250\201\273=1\271\222<\241\356\203\272\306Gl<*6Y=D\214\304=\035\314\017=WG\330<\250\237\215\274\317`O=\2213\233=\240R`\275\306~3\275YN\244\275~\345\001=\022\312X<\016\313\270\272{\356L\275\215)w=\271|\227\275o\037\010>\260e\272\274\024\177A\275 W\227=\305*N9\345\253==\032\t\323\274<\222!\274+\316(\275\001\003\375\274\310\302\t\275\026l7\275\227\251:<\r\370\202;\251\240U<\307\0050\275X@\000\275\200\027I=\356|H=\303\017\355<\305M\247;\347C\036<n\325\207\275W\260\2509[\306\270\274uh?\275Ho\005=\216\351{<\243 \323<\255\275_=|\033Z\275\036\207\025=\247\020&=.\330V=\263\316\257<2\021@\274\342\313}\274\304:\036\274\014#\203\271z\322N=\304\205\274:;.\261<\215\362\260<\034\241\206\274o\375\001\273\213\366\252=0SA\275\022\373\234\274\351k\204\275\227#\022\275\004\247\210\275o\241\201<\217A\307\273*\265\314\274\226\220\307<\321\352\t\275\"!\275\275Bi\264\274\rGu;+1\351:y\340\223\274U\267\031=\277\371\013\272\023\332\306<=6o=\240\353<<_+\224\275\334\212h\275\305\027;\275S8d\275Idb\2741\013\021\275\205\325P<\313\266\001\276\\\024S=\027\363\271\275Wi\232\274\023\024E\275\356\206\221\275l?\304\273\227BN\274\364L\r\275\004\024^\275\254\234\r=#\345\247\275\237\340\314<\337\360\250<\256\230I=\222\210\234\274\020\001\223\275jj[\275\260Co;\374\300X=\317\347\030\275\355\215*=V.\320\274\202\030\216=%\266\371\274\2776\234\275\361x\004=\260\200P=\013$,\273\004,/=\030\001u\273\324\347\243\275\263\010,\275u\214\302<\032\244c\275\346\025p=E\202M=I\027\203<\370Hh<\253\256\213=B\247\367<\225V;\275\274\034\303\274\337\033\024\274\254\030+\275z\343\n\2752\333\221:$\226\273\273G\002(=\254d\331\274\320\251\207\275\320\017Y:\026\"\'=\021\363S<VzN\275\200\037\016\275\357\361\201<\207<2=\210\310_<\210\342>\274\344\311\365<Kz\316\274\246I\377\274\254P\207=O\037q<\252q{<\r\373\305\275\022\355\033\274\330_\273\274*\257\010>g%\340\275\027\327\334;\002\227\221=\231\217\205\275(\177\210=\221\342\374:\265\223\177=;\023\303<\257\243A\275\221\317\221<\343\002\377\273\250\322P=3c,=;D4\275r\340\221\2757\364\200=\225\277\224\274\203\301\255\275\035%\214<O\022\247\274\002\330\205\273\260\374\303<\265\3375=7\007\231<\0163*=\207\343|\275r\367\353:\231\357\261\274\321\323T<\0218P\275\026\002\220<\001\244~\274]~/\275]@\233\274&\335`\275yG\203=9\342\"\274\224~\223\274;\271\317\274\021\206\275\274(,\356<\331\324-=\356\250\320\274d\367\374;\257\212e=\320\017h\275\354\275\242<\'\266\3209s\306\335<s5,<\007\265\350\275\202\361\335\2759~]\275\252oF=\315V\272<\302\304\304<\223\345\350\274:\000x<\036\036\256\274\260@\000\275\342\327\212\275I\274\275<49\247\274\272\002\376<\357\354e\275\206\367V\275\242\273\245<\336)3=a\331\010\276d\300\004\2750%\313\274\270\216==-\231\260=9\214\217<\021*\032\275\350\277\203\271r1<=\274[\002=\311`\223\2744\027c<\360\3365=\274\344Z= ^\330<\227\333\321\274\225\357\023=\376p<=\345\267a\275\201\377\215\274\023\2707\273n\330L\275\206\321\031=z\024-\274\266h\234\274\345\352C<(\331!:B\370\006=<s.\275\274\314\274<R\363\307\274\245\225\225=p\222\246<c\231\332<5\3047\275G\311\207\275\003\276\303<\361\241\036\274\333H8\275\013\275U=\321\210\261<\320B\315<\357c\017=\037F~\275\313k\r=\311r\353;=\226\031\275\345\026I=B\266\001\275FTR\275\027/$=\377\374\307\274\364&\035\275\t\224u=\024X\001\275\220\242\300\275\017\037\262\275i\357-\275\362\026\370:\341\330\212\274\373\216\212\275\3767\277\274v\340\316\275\333f\233\275Nj\257;\320$_;\326\3114\275\220?\253<\\=w\272D\351\352\2746=m\274$\016\256\274\254\375\240=`\304;\274\177,W<r\025\237;\324xh\275\225\016\351\274\214\005\305<\037\024\260<\236J\307\274\265~\277\275\\[\365\274\201\324\214=\246\022\202=\034>\357\274d\325k={\211\207\274q\205\374\274\270L\321<\337\322\311;\366\3462\275\373JB<\236\t>\275)\260.\275\243b\021<\346\363\337\274\320\367\330=\204,-=?K\350\275\362d\332\274\224\270\323<\222f\333\273\323w\367\274r\223\026\275\225\307S\275\317\001!\275_\327Q<\306\"\001\275\177\240@\275,\320U=w\317)\273Z\252\235\275\032\2028=\007\256\232\274\205nN\274lp\r=\273\233\237\274\225\221)<\246\037;=\245\320\036<B\304\206;NK`\274\247\022\274\273\227\2154\275$\257t\275\264\200\271\273R\202\215\273\265\032\034=[\000\t=\2226I\275i\251\356\275\235f\235<A\2513<\347\335\033\274\013\307\300\274\365\340]\275\306\333\353<\037\365\017\275\311\034I\275]\271I=\225\214\002\274i|\032=\374-\026=t>\216;\025\032\001\275pw\322=\320V\343\274\354*\216=\251+z\275k\240\013\275E\306\2079?]f\274OO\277\2758\331\237<\006h\r\274\276A\245;\320\014\312\274\211\025\216\275\365\343\'\275\035\246\'=\032\227I=\261\362\272\274]\000b\275;\272\351\274\267\217\017=\230\261*=\202\201\010=\337\033L<\377;\212<\242:\263<\250n\230\274-z\000\273T\n4\275+\231 \275\233\250\235</g = %w\274\033\245\240;8~\215=D\232!\267z\314q\274J\224\232=\372\021V\273\004.\014\275\323j\240<\202\317\026=\373\217\340<\217\007\351;\304\271[\275\357\005\336\274\303!B=\347G\236\274YA@<\3540\331:\036BG=\260\375b</\375\317<\232\304\240=\342\277\246\274\272a>=\273X\177=\177\006\205=?\212\211=\231O==\351gs;\361+B\274\231\t^=\001\324\240\275\247\\\361<77\316=\007<\231\275\003y%\275\206\020\211\275\006\2013=\330\323O<G\354\025\274\233s\"\274\006\016\345<A\361(;rm\"\275\335\330R<\3215\010\275\224Z\224\275\351\336\t\275\317^\036\275\n\r\020\276V\206\262\274\333C\240\274\021\262\024\275d\320?=,\230\346\274-\000j\274=\024\244<\024\r-\274\276n\032=\360\030 \275Z\030O\274\376\352&\274H\246\036\274\014\247\021\275\262\356V=i^S\272,U\227<\346X\325\274\000M\304=\rvX\273\232=6\275\222\215%\275\302\021D\275\242n\030\275D\003\340;\371\230\371=\034\360\365\274\031\322\353\273_\037r\274\237?`\275\352\341\251\275\304Z.=gM1=1F\202\274\014\260\002\275\336AQ<&\211\\\275y\341[\273\244O0=\362p4\274\276gZ\275Gfh<8\236(\275\220\301\231\275\264/\272=\034\225\277<\271\341\207;3$\177;\2727\374<\020\202\361=\357A\264=7M\205\273\003\004\301<\222\031&\275\261[\032\2745\203\207\275=\365\371<o\274\264\273\255\035{\275h\230\002=\211\245:=\241j\005<\221c\215\273U\277t=\007\265\357<\340X%\274\266f\314<\275z\036<\177b\264\275w\300\037\275\273Kd\274\005\234\253\2746o\020=\255\355Q\274\"\306\264=l\007l\273g\027\\\2758\364R=\177\362\n<%v\004<\315\241-\275|c\313<\033\213U=_x\212\273\314?\267:\337\272\201\275;z\331<\002\0014\275\355\3454=\203\352\312\274\014w\361\274\371\353\345\274\315\031\"\273)+\333\275==\376<\177\322\310:\230\321\216;\325k\325<\010o\271=\020\347`\274\332\220\004\274Nn\"\275\027\2606\2745\301q\2721\343:\274f?J\275\352G\010\274a\312\264;\343\340\r=\320\255\236\274\024\232\205\274\032\236c:w\347\226;F*&=q\000\031\272(@R=\246\332\221\275\214\r\204\2759G\257=\276!T\275\212\374W\274>\315\322\273\000u\035\274\244w]\2750l(\275\3322\215\2756\\\327;\356\212\267\274>\367*\274\240\220B;\254Q\267\275MR|=\324\005\017\275\331\200H=R`\353\274/y[;\266\024;=\253\315\002\275\016\003%=>!l<\317\034g\274/?>\275\024\220:<{\352\202=k\363\326\274\216\203\017=E\203\271\275\203\000\306<rm\376\273_\003\237\273\036\214\212=\263\037\262\274\351\022\245=>\033\230<\325 1<!\023\034<\366`\226<_\352\003\275\342\2170\274\316Va=\265\177\312<\025\333\017\275\013h\023=2\030\013=\241\313\020\274F>e\274\233\371\345\274O\250\216<\024\213E=\340\356\035\275\261#\227=\330\t\"\275\310r\020\2756\267\222=\346E\214<h\0264\274da\245==\321\036=p\273\205=\252\234\026=\226\240\214<>o\224\274\354\035\230\275\372\206\344<\034B\250=F\031G\274ZU\036\275\375])\276\3603\033=\271\362b=\332\351\317<_\'\306\274\204\3066\275\272\210/\274W\006\210\275L2(<\364g\360<a\302\370<N\026\302\275 \361\344<?A\234\275\203\377*\275\225\376p<\021?)=H\245\344\274\337\317\272;\367\276~\274\206\333\355\271\321\356\005=\350\317\311\274\0001\352\274R\006\220\273\3541\003<\204\371-=8s\213\274YL\351<a\\\034=$\032\221;X0\017\274>\275t\275\313\336\240\274\261\013\232\274\217\206B:[\271\342;\374c\002\274\330T\t\274\226\234\236=7\241\274\275\203\302\212\273g\332]=A+y=\331\236\221=]\2735= \027\325<\266\010\022=\322\205\022\275ia \275\345\215>\274\207U\371\274wN%\2758\260\017\274\362\013\007<\217\007\307\275\334\243C=\270\023\013\275U\246P=\211\242c\275\017\2652;\023b\250\274j\224\200\275\030\2662<\255\372S\275\010\233\017=\353V\343\275q}K\275N\362\221=[\364\204\273\2559\274\274\032\237\260\2749\330\233\275\260\320\271\274\337\210\005=c\'\353\274\027\204~\275?s\330<\214/k\274t\375\003\275[\247\215;\315#\266\272\345\376\006=\270\350\346\273\275<^\273\220\244\225\275g<\004\2768b\222=\377\022>=\201\210\020=\236X\253<t\246\2678\2451\306;\2714\241\275\243\340a;\234;\2279\366\223\252<Iw\021;P\232\343\275cs\250=\326G\274; ~3=Vv\325:4\235%<\2475\037=\240\323K;-\2675\274FDl<\260\'3=\3557\r\275]V\001>^e\201\274\0174\032<b*8\2747v\200\275\215\327\231\275v\003\230=\rX\224=\006B1=\367\277\226\275l\014\260<\236n\364\274\375\262\'\274bYn=\036\306\001=\360 \022<N\254\314<\323\250W\274\323c\004\275\003y\300\274\231\325\375<\2438\\\274(0\025=f9D\275ra\222<\373\376\237=\014N\217\275\021,P=\234\201\222<dA\220=\224JD=\215\244\201=\013\337\250\274\216D\036=\030\036\244;\346\366\201\275\213r\230\275:I\335\273\233{\324\274%\300>=I\024\212=\r7\313\274\275\260\016\275<,7\275\356\253g<=5\343<M\365\253;\025\306\217=\034nx<\234sx=e\270\001=/\307\202<\02781\2759N\203<KS\n=\036\222\243<rQs<\270\326\320;\"Wr\275To\354<\363(\262\274\245\276\037\275H\270x;\342\324x=\004<\361<\374\271B<\014\276]<|E(\2748\321\364;\277\210\001\275\233\005\351<:\254&=N)r<\233\324]<W\010#\275h\0050=\025\331i=\371\210\253\274]\323\026\275$\321=<+\244$=\336\"U=\025-{\275\250\321+\275S\261\023=\213\336\034\275\350,\242\273Y\361\227<\014\250\313<\257\237[=\374\245l\274\272\334\265<W<\331\274:\2435=$\215i\272\324L\376<\332\262)\275\345\030\347;\336\332\027\274%5g=\362\270\372<,\207\216\274\316\361;\275\302\267\013\275\001\343\334\273Q\344}\273tAO<@\345\270\273\206\373f\274vc\347\273\021\027-\275\277\375\353<W\317(=\370\010\224<zx-<SZ\004\275\202\217\302\271\356w(=\t\242l\275 E\327;0\226~\275#\304\360\273Y*\035\275\202\317\037\275ec6\275\317\215\"=\370\257B\275\367\345C<|r\371\272/\224=\275g\331\230<\003o\030=\243t\325\275\320I<=-s\003>c\004\326\274\364e\240\273\352B\245<\226\245\321\275\t\330\036\276\311\022:=uV\255\274B\240\224=\365c\030=NCA\275\334\021+=\\\321e=-\314Y=\205(\031\273\230\372\004\276\363\215\360;oi\242;t\245\300\275\316\215\035\275\207\005\203=or\327\274\024Ry=\245n\025<\225A\371<\014\302S\274\313\241\240\274\344\204\215\274\215\032\256=\237\"\210=\261\030z\275\t\327r\275\2469\244\274\341\030\345<w\016\023\275l\267(\275q\030\341:&\026\276<l\220\272;\336\'\362\274+\260\231=\365\213\232=\251\003\034<\237W\213=\217i\251\274p\3352;~J\236\273\364\007\201\273\363\250\223\273\306\320\235==.p=\273\234w=\0346\000=\033;}<E\211^\275\371\271 =H\227\367<x\306\304\275\211\013\024\275\014\350\317\274\377\216\260<\300\031\315<\034sf\274\312\264\322:n\337\013<\306\344\010=\305[==n\222\226<\224\376&=y\206\225=D\365\231=\306M\325\274rLB=\225\273\037\275\324\244\301=\001\211\000\275n\220-\275i\244A\275+\307w\275Y\320\236;\010T\204\275\354O\347:\347\301\336\274Vl\233\275\237lc=b\\\251\275\224f?\275q$#\275\345VC=\312?\234;\235\327N\275\273\323\254\274\t\010\343<)\362\224<%\251\306<\253\264\350\275\023+\206\274g\026\331;\303\311J\275\362\031\231\274i\363%\275\013n$\275u\001\030\275oyP\274\276\362a\275\241\211\004>#\250\204=[]\024=\n\377\225= \212\032\275\231K\246\273\325\226\033=\014\227\266:\243\246\202\274AL\3639\032|\r\275\352\003\364\273\2674\005=\027yO\274\230\262}\274X\362\365\273>\356\243\275\270\034\216\272\255\220\301=2\214\237\274\274ZI\274\307<h=\021\363\004\275i\237=\274\013\376\020=\017\021\257<C\013\n=\273\251d<\374zY<8\302b=\340\003\200=\206(\301\275B\337\353;\257a\034=\332\025\323\274\005\350\274\275\010E\375<\345\270H\275\342\300\210=\270\035\027=a\237\357\274\031\3779<\0065\r\275\315\254\036\275uH\202=\300\346\274=\013Q0=\2710\274=\254\207\202\275@\363[=\247\333S\275\327/\022\275]\373\213\275qTk\274\333\355\376<\243\216X\2755+a\274\363\321\027>\177\'2;pb\227\274\taX\274\314S0=\270\035\004=Z \311\274\314\307\007=?\250\234\275A\375\272=\204\262Y<\233\303^=\204\250\244=j\274\251\275r\030\013==\302\355\272\274\222&=\330\227\203=\247\315\270=\253i\263\273c\364\372;Vw\013\275p\212>\275\0368\264\274\250\336\025=S\320\016\275\372\344\262\275\316\014K=\207\005\373<\376\275\251<\207\016}\274\345\202\216<\263=\206<f,\232\275\267K#=\263\317\305=\023f\234=m_(=\n\202\'\275T\251v\275\355\365\243=\351\313\025=?(4\275\223$\305\271\216~\213\273-G\353<\017\273N<\316\036w;\231\000\253\275\034\005B<\t\303\312<\366xv;\372]\202\275x\032\376<\3642\316<\262\016\3729l?\375\274\222\242/=\252}?=\314[\315\274\361\246\257=\375$\305<\345?\347\274\261\275%\274\223b\030\275\013\277\021\273\242\357m\273\02250; \344{\275Y\226\357=\'\323\234\274`(+=\231\\H;\302jh=Yu\351<\022:\210\274\354\217I\274N\345\010\275\204\332\243=K^9=\311<\361\274\353+<<\004\300\222\273\364\325\342<\257\000T=\241\230\312<\3232\214\2749\016%=;n\263\274\204Z\222\275\035\226w\274\221\371\003\275\300G\033<\267\t\t\275\231\204P\275\221\'\007=\240,z\275\322{\366<\347\035i<\233\000\000\275\324\212F;\277/\370\273\330\354{\275\024$\206=\270\2259\275x$\334\271c\202c=J\367d\275\334\312\033\275\377\334\211;\226u?\274\0050\253\274\2669T=\311\244\031\275_\357B\274\262\220{\273F3Y\275*\000*<I\306\205=$\337\352<\275>\272<\231\214\257\275$\r\001\274fZ\326;\351\323\013\274\031.#\275&qP<\275\002\006\274XZv\274\230\333\250\274\331\'N\273\376\3709<?\321\204\275\271\216\363\273e \336=\343\255\022<\336oi\274a\333\203\274Ry\372<R\272\240:D!\034\275\356\006\364\273@\r\225=\311\350\017=F\272C\274\004o;<\231\261;=-C\021=\226\250\267\274s\264\361<\265T\335\272`]?\274\206I\374\274LM\"\2751A\272=\035\217\371\274\276\270\205<\222C\016\274\033/\260<\336\362\373\274\346\232?\274\350\231\n\275\205\342\310\274\275\376\265<6\266\206=Ck\213<\327\337\t\275\366\346\340<\351\257\226<\225\203\232<Z\342<=O\372D\274eN\025=\253\202e<\334gY\274\307\335\314;\242\360\027\275\302oZ\273f\321\352<\324\376\363\274\200X\373;\"MY\274\031\267\336\274=p\000\275t\245?=Y\000P\275\351\227\031=\234q==\270\0204=\345\244\216\274\261)\026=\245\034\353;\0059\240\274\217E\242=#\250\301<\366\233\361\275{\206\226\274\201\337\265;\216\215\263\275+\372X\275\212,\033<4\313e=\263\241\032\275\022/\2349\221\200Y=\352\225i\275\214U#\273\302w\276\2741.\036=W[\336;\035\312\221<gr\023\275\364\314\220\275F\240\376\273\332\260[=;u\213\275\'j\024\275\253W\332\274\313\037\351<\211\245\210=N\003\023\274\341\001x;\311ur<\346n\214=\354A\035\275B\230(=\340+I\274lU\031=X\3476\274l/\016<\344\231\r\273\273\203\024=\206\246\r=\236\372b=\256U;\275\233J\211\274}\213\203\275\352\315\323=$\250F\273\261`\302\274\204\236\332<\322o\n\275\200\210\244<\266\241 \272\234e\337\275\013\025R=ML\336\274\212\250f\275\243\010,\275\256\223\365\274\257ql\274O\326\027;p\335\256=\034\325\r=\373\257\225\274\240~\332<M\201\272\274\225\000\344<\032\201b<\331\315\317\275\351o@\275h\377P<),p<\231\262\263\273\363Y*=\362\366\017\271\303\355\004=\226\205\312<\0246\312<\373I?<\251\326\243\274\257\"\205;\020\201@\275\013\240\004=\3265{;\201^\231<\374\013.=@\336\333;*\033u\275a]\217;\307\3003\274}Q\210=E\212%=\251\034\035<\013\"\025=\2654\211=\276\207\253<H\230x=\307\200\t:\376\305\362;[\273\276\275\0333)\275R\351\206=\267\002\320<\253\354\226<\327\270>\275p\035~<n\223r=S\020\356<\007lG\275I\0013;\300\352f\274\201Ic=\006\277\016\274\223\"\201\275-\372j\275(T}\275$\030\340\274?\246\341=q\361w\275X^\345:{J\320<<`\237\272\265\007{<\325Rz\274!=\026\275i>\370\2745Sy\274\345\327\205\273\037\256-\275\200e9<J\314\"=\337t\214\275\252\232\215\274\253\204\001=s\222\221=\242\223\240<\034-J=\022\312\207\275a\376T\275\233\326\277\273\360\357i=>Tb=\343y\231\274\r\377|=vj\005\275\246\376\254=\250\\\361\274]{\032<\302\251\315;\300\243_=\017\244\224<&t\033\275\352\034\206=y\322\256\275\312u\'\274\350F9\275j&\234:\025p\210\275\303\303\373\274\031At\274\301\322\255<U\007U=s\336g\275\001Nj\274\005n\237=5\321\027=F\007\030<\332\211\003=\001\004J\275\030\016\360\274\002\257?=jE\223\275R\006\\<\317\327\'=\256\240\024\275\024[\217< \003\235\275\331\221\271\275\244i\360=\327F\334\273\333\352N\274\356\030==\311\367\030=\3672\272\275or\270<\271\254\002<6V\316\272\221E\214\2742\372)\274UW\336\274\017\310\206\274\022G\342\271\001h,=:\007:\274Y(_<\030\240\344\274\301\n&\275,\264]<\002\315\n=r\234t<\225g\021=\270:\356<l\236\310<\377V\202\274l%\010\274KAF\275\370\006t\275-\013E\275l\327\014=qF\210=\036x\206=\201\355\n;\314Q\230<{\016#;S\010\354\273\031\036\223<~\351\234=\211\363?\275\022\r\316=xb\254\275;\177O\275\370d,\275\220\322\253\274\257\377\177=\372V\221\274\026\260\237=A\0055\275 R\363<^7\031\274\334\262\220=o6\020\275\366n\372;\304]O;TF!\275\267(e\275`o\225\2737\362\224=Dj\227=\324\241\212;\"\354Z\275\317-F=\251\ra\275B\257\240\274\267X\375\274)\220\357\273\177NA\275\322\013\306<\355\274a\275\247*-\275l\324};H\r\021=\371\341\324\275\356P\247<%\2278\275&\3110=*b\241<J\316\307;\276\206\007=\263\244U;g\324;=W\320\340\274\013\345\002\275C5\t=S\317T\275\336\037B\275\372j\356<\363Z\226\274\351\r*:\021w^\275g\260\217=-\356\206\274\361\002\213=\024\304\300=\013\333\001\275Qo\267<\257\364\177\275N\331y=I\326_<z7@<\233>\n;\0249K=\217|\231\274\356&U\273Os\232;[\354\333\274\242\227W=\213\273\375\274PE\374<\242\265\021\275\344[\360\274\034\304\023=P\214\210=~\203\217=\024\032\244\274\327\213\027\275\363xb\275\336\2029\275\270\345\210\275T\032!<Q\330p<\177\365\010=\265\022\253\272\001\264)=\026\036/\274Wc!\275\014\326\030<i\000\223<\304\217\276\274\246\003\202=\247\262\225<6\235\000=Vb\256\271\325\272\312=\213\332\235\274 \345\250=\275\301\233<z\3738\275\241\212\272<\352/\356\272\t\211\227\275\235\036\247\274v\001\224\271\345\364V<\221\031\243\274\202\376\363\273\347RH\275\276\366q\274\032\323\325\274\327\3160<\224\374\220\275\354\010\362<,S\351<\264\031\205\274\365&\300<o\237?=,}\315\275\243\257\320<\202\224\264\274\307\033\262\275\301n\272\272\030\035C\275\302\344\212=0\036\372\275N\026T\273\204M\230\275\327g.\275\253\251p;Q\350(\275z6N\275\204[\255<F_2\274\035\256=\275\0370\264<\004\225\005=f*v\275\034 \030\275\325\274\257\274(\r\216\275\234\246\217\274rY\236;W\347I\275\033\007\362\271\200\374\200\275\327N\254<\014\211\236\274*\277\260<0\006P\275\357b\034\275\210\342\270<r\013s=b\036`=\r\370\257<\225\010\017\275!\240,=\2437\226=k?J=vBe\275Z\253\350\2739\314\366\274\254\263O=@\201\327\274\343\3434<\351\347\210\275~\214\235\274-W[;]\301\226=\017V\274\275\275\257G==2\225\274\234\275\307\274nT\005\275\013\274\217=\323\322\306\274\2776)\273\306#;=|\277\365\270\353\022>=Cq\324\275\210mW\275\"\033\316\274\232\t\246\273wO%=\261\2419\2756:A\275q\3761=\004\322\314\274\361\235\242;Ap\221\2750\275u\2753.\212=\013q\253<\225{(<\010\250\024=\312Ze\275T\276t<\026z0<\360\311\026\274\232\"\343<\037\273A<\246\337z\275PEm\275\256\362\003\275\347\340:\274[\013\300\275\241\320$\274\371o\003\275\352n3=\360\200\250\275\351`E\275\016\r\210\275\322\213\240\275\377\t\264\275g\302T\275\307\337\002\274\200\204\306\275\242\001\306\273&\2270\275\275C\262\273ZW\t=3\200\250\274w\351\266\274\020\217o=\r\031E\274\177\2064\275\020\214L\274\215\360\205=\301\nF=\026\316\231\273\277ed\275\030\363\031=\002u<\275\323\257t=E`\333\273\330\034\024\275+\265%\273\341S\225=/J\224\275y3\357;\026\222\230=OP\"\274\205\274\003<\3538\010=\203k\264\272\231\260\354<\220\211\346\274K\226/\274mI\222=4t\010=AV\\<5\004\025\275\324\352\356\273\020\231a\275l\321a<\317m\213\275\214\223f<\000\373\024\275|\301\032=\372z%=z:\264\275\032\364\007\274U\344?<\341\260~\274\217fB<\\\254&<\242\204\354\274\024^\371<E\353\221=\357Q,\2750\363\355<\311S/\275\037)\372;\245\325\347\274\212\255Z\275\252\341\351\274\364\202i=7\261\260\275:\203|=\347\2672\274\356\016\001\275\r\271\203=T\274\227\274\276\255\363\2733\026\207=O\232b=C\013\007\275\0038\032<\022\033\210\275\204\315\217=^>\224\274r\231\303\273D\343]\275\177\017y=5_E=\251\277\236\274\333<T\275\017\')<4\272\224=\232\271\337=s\261)\275\342\251\031=\177\207\217\274-\224\270<\3645\340\274\3672\"=\014\317\326\2738K;\275\224\013\265\274\345\250\260\274\023\267$=\367-==\0041\362<t\304\343\275\253g*\275\003\216\031=9\364\225<[\201\\\274Ra\177\272\364\301\027<kv\3349!\321+=\310\360\235\274\232w\037<\232\346\336:D\270\220;\310@\256\274\264\264$\272\313\311\322=\365\270\241<\016\0220\274e8\230<\362&\301;\r\372X\275\243\334\276\2742\226\260:pGY=n\216\023<[C\3769\275\2631\275\024Y\273\275\250M+=yZo=9Sq\274r\266\215\275WG \275\024j\371\273\366\342,\275\007\013o<\212\325n\274\315U:\2754A\277\275\023\247\370\274 \344*=\247\374[;\276M\r\274:\025\301\273\354I\251<\217b\r;\t\364f\274\2334(=\213$\231\275j\036\006\275\217\331$\275kk$<\245\376*<m\027T\275\212\034\307\274\016s\013=}aC=V\322\210\275\273\'\372<\261\356\224\273\277\3051\274\260f\333<\367Q\276\275b\302\246=\331\362b;\357_\333<l$~<:\236\242<\033\005q\275\'0\022=\340\003\211;\375\2108\275\315:\205\273S7\364<\'@\305<_Cs=\022\224\005\275m{\337<\224l(=I\007\033\273\361/\213=\326\373\374\274\003\274\020\274\276\027\224\275\321|\216\275l\326O\275\021n\326\275 {\333;^\275v\273@\0276\275\305\030\216=\371\3341;\014\234\017=mg\232=T\333\324\274\3775e=\200O\014;j!&\275\260\356\003<2\026\206=&\357==qB\201;\345\321\033=r\234\212\275\036\237\324<\347\355N\275\317\341\'=\233\004\177=\177\312\230\272=\352Z\273I_\210<\263\215\312\273\035\2659=\361AJ\275m\256\r=\267I\325<nZV\274ls\246\275\237\200\346\274*t\243=d\214\276\275\361\336\224<\027\306 \274\353\201\204;X\3749=\240\315|\274\365<`\274?\263T\274W\361\241<\261\276e\274\236\031\031\276o\230\022\274\313u\247=G\035\333<\314]\014\275\217\"0=\365\225K\275\341)L\274\331\274\'\275\370/x\275\'q\202\275|\333\343\274\036\030\307:\207}\261\274Q\320\357\274\300<h\273\312\247N=si\007=M\3125=\034h\237<\350\377\206\274\035\350\373<\021\227a\275xP\277;\036\346o=\001\2260<\222\r\300;\330\206\255\275U7\376<\022:\376\271K\254\301\273\336Q\263\274l\234\330\274\204\0103\274\327=\316\2740\264\"\273\334\211L\275h0J\275\215>I=\255\214\024\275\266\271\326\274\220Py\275<\337\036<\277h:\275\021b\346\273\210\367\206\275u\207V=\034\273\220\275\266U\270=:W\252\275\354\354\220;\202\203\247<Z+>\2758\344`\275/\322\005\275\027\335\017=\002\244\223\275\231o\222<\034\207\017\275\366T#\275\003\345\265=r\024\030=\307L\007\274\376[\355\274\036z\221=s\215\3569e\257\300\274\263!\026=\222\237\262\273\353\235\374<d\320G\275<\357$=^\345\224;\253\314!=\027\334\257=\225\036\036\275\353\2004=\035\257\227=\312\321t<\354\000~\275\000\\D=\366Zo<9\276%\275k\330\220\275u\370B=\222\300\240=!\010\036\2757\2163\275\201\321\376<tN\366\272q\313\264=(\331A\274\004\374\202\275L\3313\275\010\365n\274\351,\032=\321o9<\007\242\037=\355x\210\274\367\2706<\361\227\030\274\037\221\323<\336L\035=B\007\223\275\255\324\374\271)@\343<\240\t\233\275\350\253\266=\346\330\251\275\353\306\355\274b|\247;\021\367\231\275d\233\250\272\004\217\347;&\370\256=O\312E\275\247\262\235\274\027\322u\275v\277\277=\222wO\273\3542\000=\202\222\257<;\333P\274\2444\224\275\230\252\204\273a\316\236\274\010\005\307\273\227\221W\275\003*@=O`\270<\002\252\364\272\003T\021\275\244\357\354\2741\277\251=\376\373\353<\2366\r\275v\236\350\273.L\025=\022X/\275\364\254\207\274\342\236\354\274_\003\254;m\'\030:\364\221==\2268\030=2\221\\\272L\342,=\362\260\205<\035\314\240\275\253m\327\274R\212b=7\036\362<\272\347\031\275Gn\256\274\334\317\244\274\002\3123\275\013U\301\274\213\246%\274\365B\215<\227\316B\275\\\240\227<W\362[\274\253\367\010\275\226\342\245\2750y\217\274wQ\225=\n\255\037\275\355r\017=&\257\002=9\257K<\n\032\232\275\246\366_\275\332\"`\274\371}\321\275g\004t=|[J=},\310=\235\223i\274p\342\337;\312\310_\275n\263\355;\016\205\242<\026B\022\275\347`l=\023Z\234\275\321EY<\345iV:\342\217\331\274\237!\362< \255\357\274\202\350\317;\'\314\245=\216\241\274\275,O\033\275\265\342\314\274\315\010\203\274\363\335\274\274\351\021\355=n\0161;\321\037\321<#YK\274\375\220\316<\276\376\350\273\317\340\243\275X\303\214<\241\275:<\375\254\273\274\275\013\370\273c\221D\275\333\257Q=\32736;\0056\362\272L\264W=/\347\334:!$\372;\314\204\201\273|xC=)\037\177\274\274;\230<\233p\016\275\"\224\341\274\367)!=\021\326r\275m\2132\274\330I\335\274/\245\317<\027\275\256:\254\377q=l\373\222<\037\021\034\274\335\363\252\274\177a\307:o\264\341\274+&\236<\256S\212<\354\001\371<~-\262=\026S\235<q\305\321\274\214\254\204<\255\022\210<cj\220=\244\216\217\273q\372\203\275\024\274x\275\224\270\304:\3421\206<0\244o;\305\261\244\274H\002\307\274\322\244\364\272{\034\245<)\377o\273\321\244\324\274\343\377\232=\033\257\206<\223O\346\273\377\237\321\273o\031\303\274\207\317\331\273\303(\236\275X\310\002\275.F\016\275i\362\027=\266\004~\275\261\000R\273\367L0\272\324\267\234\275\214\264\'\275!5#\274\020M\364\272\332\031\204<\306\32069 \251\271<&\234\016\275\264G\276\275\023\006l:sg\027\275\255Z\262<\301\024\304\274v\023\311<\374Fg\274\340O\037\275\346\033P=\253\277\344\274!\003\227\275i\t\260\275\325#\260\275\335\316e=_\210V\275W\262H=\032\302\271<\370\036\350\274<\202\016\275Z\272\016<\367Xe\274\202\360S\274\266\310\271\275T\352\216\274\366\231o=\257\022.=JP\037\275\003J\304< \001\031\275\335\026W\275\265\213\000\275V\211\273<:#;=4\t6=\207j9\275\242\t\205\274\307\022N\273p|\010\275\371\2017\275:O\317\267\223\215c\274%f\271=\273&\357\274\220\372s=2\277\017\275\305,]\275\006M\343=\272j\202\274Yt\307;:\322=\274\353d\225\274@\261\263\274_\200\212=<\2078\275\230H\004=\255\347\356\274\010_1\274p\275\231\275\252G\342<\321\215\224\275=Q%\273ba\336\274\311>\346<\325m\246=\316y\345\274(\243\246<\335\216`=P\302&=k5\336;\351\036\023\274\226(\245\274\323\333\373<\333\301\354\274v\002\271\275\335H\016\275\377\241\261<\007\352\227\275\347\030[<\032\331F<}\376\317;\014\323\215<y*\222\274\224G\303<b\315H\274&\246A\275U.\020\275S=D\275\r\202\205\275\302H\"=\010\014m=\201\022{=\371\3447\275\326\320>=4\321\212\275)GD\275\204s\277<\275\3105<*|\274\274\306,\216=\225\204h<\334t\373<\275%\236\275L\273\025\274\221#\036\275&\203k=\244\001 \275\335\220f\275r\325\244\275\nJ?\275D\016\210;\305\317\261\274\024\004 \274<G.;7\246\243=\307\215\212\275\326f\374<[\200!<\252\325#\275LJ\211\275\000U\010<\337\263\246=\332s\271\273!,\264;\240b\373<\317\342\250<\227\n~\275\023\206%<5\302F=\377\021T<rCV;\246\235==\3338\317\275\367\276\231=O\325p;E\355\006=\242\036\255;\022(C\273\265i\025\2755r\273<\207\034\221\275\330\366\017=\324\014\t\275\372\016\310\274L\023\336<\245\274\260\275\341n\304\275_\3325=\221\3267=\360\310\t\275\244\247\240\275\223m\377<\370\223f\274\250x\323<tV\367<\263\320\330<\"\246k=%\177\270;\023\350j\274\n__=\014s]\275C\336\212\2753\353\177\273|\251\237\275\302\202\222\275`\341\320<v\001\221=\211\004w\274,\377\322<\013\230D=\373\277\344=(T\\\275gi\010<)\033\333;cy\212\274\230\3304\274\021\256s\274\360\201/\275\2728Z\274g\003\024<\302rk;\351@8=\\\250e=\357\037Z=\323\264\000=\275\270\275\274\251\345\232\274Z\007\350; \345\252<\371[\274\274\347n==\374\206\005\2769\375\335<\331:*\275\361l+\275\271\325\246\275\247^\331<\014\224\025\275\232\211\275<,o\267<V7\352\274l\337\327\274&\264N\275\341c4\275\224\027\177=\372H\242;\367U\372\273\214\274\n\275w\t\005\275\017\2025\273\221\021\367<\370R\257\274\370\352n\275\023\306\022=\341\224i=\300h\234\275a\004\215\273ko\212\272\2652@=N\314\354<S\330x\275\224a\256\275\306\316\267\2737\214\267\275p?\343<\271\355\220=L2\320\274\326\325\261\274\247n\222=c\"n\274\267>\177=\343%\241<4\027!=\024\361\274;P%\327<\356i\344\273.F\374\273\343\276L=s\327\342\274\200\267\230<\257\014\361<g\035\332<\273\323\332=G\337\006\275\370\2273\275\313\016\221<\301p\000\275\312.\206=\216\324^\275|\333\203<\003p\377\274\014\371J\275*\337\030:A\237\001=vn\252<W\317F= \212\227<\330\316\372;\202n}\275\325\006`\274\3042O\273=\"(\273za\364\274\201\n\003={\t\324<c\241\351<=o\r=\347`W\273\352z\"\275\212\323\307\274#\312g<\003\354\212\275\0003&=\210\241\024\275\315o*\275\302~<;\364\025\224<u\342.\275\265\301\227<\2310\020=\000\307\256=\253&\005>xS\317\275k\305\273\274\000\"r\275\317\337\245\275\231\307\004\275RY\253=3\366\"\2756\377g<T\253==\013%\231\273\r>!=\366Z\220;\037\307>\275.\221\226=\232\303\323<\005\337\r\275\237wr\275\005\257\234<m\340:\275\263\rO\275\277\177t\275J\330\001\275h\032_=\230\3476<>\333\027\274\304H\256;-\225\024\275\035S\010\274\033\364\000==\261\262;\252\260\363\274\354\340\261\274\331\353;\275K3\277\274\300?\373\274J\261I\274i\362I= \007\340\274 \204\221\274\311\031\024;\212\224O<\r\226/\275\371\177\334<\021\037\210\275\313\nh<\026\262T=\224\340\206=\227\273A=7\023\271<\331\242\331<D\360\365<N,2=\367\037\371:d\202%=\253\363\236\274\376\317\371\273\014\352\346<g\245^=\261\242&=\316\0345\275\236\t\024\275\272w\271\273\031\364\354\274\273R\326<}7\246<\273\260\201=\324\342\241\275\224\270\222\275\333\311$;1\032~\275[\264\217\275\013Y\222\274\371\220\243=\226\204\026=\366\032\231\274\237r\275\274A2\217<\314x\275:V7\240;w\274\353\274)\247\017=A\000\025\272\335\234\276\274\216\312\005=4\340\364<\345\226\263<\214%\020\274\0371\343<a\216z<*\247\232\275\325iU\275\032j\202\275\364\234\311;\264_.\275\233\204\'=YB\013\274Q\377\037<\266\365\n\273R\362\244=\026)K\2740E\366<\277\301\326<\242\364\316:\263\260\"=*\030\216=8f(\274\207WC<\027:\226=\200\311!=\221\316\326<^Y@\275bf\204\275\200\331I:\275V\311<3\315\352<\014`@=\3761\251\275\227\225~\275P\322\317\275\202\311\337\274\270\177\204\275I[Z:+\023n\275_\317G=\322\301\254\2716\017\315\274\302\306\325<\036)V=g\340\323\274W\370\244=\003K\037\275\351\016\226\275\375\235\243;\345\330*=\024\021F\275\030\3570<\n(y\274Qoh\2757\351u\274\241\250\202\275\217\022\002=+\022\031\276h\237\212=\'ay<2\203\220\274F\241\255:\227\233\215=\303\2323=\242\270Y\275_\361u\274\236.-=sm&\274\256Q\003\275\007\266\232\274\247\3067=Z\027\233=HJ\200\274\336R>=\375\233\202\275:\005\374<z\031/=\036\031\376\274\270\315\003=\016\350\201=\217\017L=\320H\251;\016\237=\2752\014\251\274\274=F=\337G|\275*H\\\275\316\036\302\275p\301\274\275XG\326\275:_\237=\021F\263;\035b\351<U\273\"\275\377b\003\274\355M:\275&\337\241;\305X>\275\177~\025\275\307\013L<\264\277\236=\267\263\004\273\226u\263<\242\313\325\271\221\031@=\027\265\367<\315\305\347=\340\264\262=\010\275o<\230\366\236<\333)\357\274+h(<\231\200\003\274\215\275\030\274\370\032\031=N\364a\275\365\021\237;\325\330\365<{3\243\275\270\260w=\370\001\t\274a\251\217\275\031\275E<Mw\330\274\177\"\031;\360\3550=i\331v\274\037E\271=\263\242\002\275\370\255 ;\333\004\227\273\033p.\275\013\001U<e\371\212=\222\177\211=\026\261m\275D,\273\2744\001$=`$\266=ez\344=\243\\\362\275\225\277\237\273\'\2456=\352\374$;\335\340\223=\322)\026=3_\022<\227\235u=\212\273\314;\212\207V;\206L\030=?&\025<<\262\023\275N\312\031\273,\002\031=\t\022\306;\313O\217=\324\364\332;\250\326Q<\317\034v<\211\225\236=\003\303I=T\'B<\262X\013\275W\333&=\237\271\013\275\207A\246;\225\365\031\275\223\271\017\275\230\255Z\275\356\261w=\006>\212\275\244\345\034<#\225^\2734\010\303=X\'\377\274\325\313\340<\217\301\254\275\251\031\335<,E\255\274Yd^=\215\006\244<\316\2631\272\224\275\200<\361G\247\274>q\214=F{2\274\241\212V\275\265\370\213<\034\264\331<\323\031\270\2741\007n=6R\310\272\371&\202=\025\266\373<\335p\201=U\272&\275*\207\321::P\316\274\366\023\022\275\273u)\275\001\207a\275\002x%=$C\235\275o5\216<\034\206e\2742\247\302\275g<X\274d\3374\274w\363\261\274?\330e\274\311\205\231;\332\275\200=c\347\235\274\372\245\\\275\347\225$<\231\366\325<k\316\335<\377\361\346<\317D\201\275\320\236\004\275\263\3405\2737\211\005\275\033C\272;cN\207<\271\207x=\357&\034\275:F\020\275O\255 \273\254\314\311\273/\022\202\274p\335\322<\366u/\273\357\311\310\275NX\245\274\305C\273\275\242\244\270=\237\240\264<\002\245\\<r\346\212\275\212\204\030\275@\032\251\275\032\324x=\303|\272=h\3209<\346:\332\271,\256\363\275\234\025\030\275oZ[\274\277\033\224;\254\236\240\275l#\273=K\255\273<\020\261M\275\000O\005=\274\236\316\274\2143\242\274\026X\350\274\225\027]\275\320\335\n\275\005\212:=v\235\336<\312\021\257\273!\t>=\347\3076=j\005a\274\323jX=x4\020=#\3771\275\005\310\242<\005*N\275\266R\036;Tx0\274\2077k\274\367#\251\274\016a\226:V\350\217;\364=\366\270\'r\345\273.\260\244=\370\3251=\345\335\251<\303M\206\275\365qF\274\007U2=\370\261\222<\214*\314\274\262pr=\033u9:Z\355\356;;>\020\275\277\225\320<\256\367g\275\2223/\275V\257\002\274\036\001&\273\336\372\233\274\226v4=\035\243\026<\255\253U\275z\307\216\275\360~\211<\313\277\357<yi\014<\240\3168\274\344Fk\275\r<\206<\010\240@=\336\323?\275\351\017\245=[\216u\275I\031k\274[7\225<\036\314p;\337\277Q\273\277\202\016=\306\255\343\272\255I\246<\303\026\366\274g\350\310\273D\035&9:)\235\274\031\224\374\274\206uh\275\3778\201<RL\374\274\006\325\326\273\367TM<C\2220<\210AT\275\357%\022\275\300\225\243:\351\2147\275\334\272\033\275\366\265Q=\312k\304\274\266C\217\274\3306f\275y\035\025=\314^@=Y\342t;Q\2229\275\220\374X=\376\351\307<W\005\316<\032\177\n\275\310\200\323=\025\203\255\274H\260\004\276f\357\361\274\277\337)\275\331\t)\274g\374\215=\205\244\212<v\223>\275\375\312\246=\221\262 \275$\375\252;\323\022\013\275\214C\207\274\356h\310;\212\252\253\275\303x\330\275x\177w\274vb\271\274X\375\357\273\216\230\376<S\326\344;\335\202#=@\344\237<\234\303+\2756\213\226\274!P\227<\2406\006\273|\337\274;\275\342\361\274\340\245\217<\322\312o\275`D\"=\026\021\365<\307\371t\275\0305B\275\252K\233=\206\034&\2752\214\277\275\206U\210\273?\207\340\274kM\240\275}\016/\275\004\273\365\274\332\257~\273&^\330<,\263!\274\177\364#\275\254\316\215=\221\251_\275\014\3034<{\031\310\273\366\002t\274\n\364\243\274\326\314L=<\024\034\274\201\' \275\025OS<vV\r=%/\351\275\036\257G<\324jn;k\n\246;\032\234o\274\017\327g=g\035\366<\275\346\264\275\t\322x=\211<\373\273\306|\000\275y#\243\273\031\200\241\274y\316\t\276;\370\036\275\246\272\246=\032\327K:\234\264:<!\266\333<~\275\262<\274(\240=1{0=T#\t\275\306\253\266<T\377\365\274\363+R\274\322`\241\2750a\020=\225\'\203=\371M(=\3204>=\0202\330<\371\330y\273\306D\253;\217D\273\275\004\243\336<#f\346<\231u\371<\351\202\201<\274?\251;\213\026R\275N\034\226<\325\t\004\275\263\210\026\274\353\240\033\274\255W\315\274\225}C\275\203\316\340=E/\224\267dF/=\323_9\274P@5\275\021\346\024\273xpC\275\3376S\274\316\365\256<\000q\222\275\253p\237\273\312\005\022\273\246\234\351<\315EK\2752|;\275\330\355\010<\307\\\212\273\344\035\214\275\032\363\031=\332\326\025\273\333\000\033\275\360\365_\274r\033\203=\267m\207; \262I=\306\263\241=\247\016\034\275\243&n<\376x\000\274\365g\201\274UNf\274\246\302\263=u\223]\275\035\251\226\2745\207%\275\363\252\210;B\013W=g\362}=I\263\201<\\\303\220<W\256\375<\351\233\325<`\207\264<\304\214\022=\300g\363\274iS\205<\036\\\202\273\223\210\212;\312\304\002<\010\374\263\273\256\210T\275\201\364\303\274L\200\340\274DAi=\322\241D=H\316F\275\234\250Q\275\244\222$\272\267\317\r\275\225\220\013=Z\222\351\273\213\333\354\274X\006\225\274\307do=\212\n\206\274\247V&\274@\000z\274\003%\365=\347\346\212\272\222\214\'=\231\213\277;\014\266>\275\226,\t\274\203\373(\274\346\374U=\273u\226<\036\241R=\277\304\317\275\030`q:\335\241]\275\376\243G<]\035G\275m\257\006\273.\370m\273\256E\235\2741\rg=NO\004<\020\362\277<\355_l<\024\303 =\2564\220=\002~:=G\347\250=\205$F\273\255\\\034\275Q\216\211\274\340\317e=\254\337d==\036S=\031\n\335<Ab\021=F\205q\275\236\2111\275\307\2323<\177\211\034<\254\330\236<\217\355\363\274n\017\207\274\004\373\375;\233\317\353;@\351{\274\213\310\031\275r\313\023=)g\220\274P\330\017=1\215Y\275d\"f<\360{\250\273\244\324\255\274\005}\236\275\371,\233\274\340\024I;\226\201R\275ii\274<\374.\251\275V\334_\272\236=0\275i\307S=\027j\217\274>\347\230<%\346\t=\340de;>\331P\274\267Y\255<\271\'*\274ZU\031<\002\355\321<\017[/=\\\302\224\275W\312\201\275\364\022n<\345H\007=\232\014\257=\033-\301<\365\023\262=\3445\222=\305\272\035\275\026\177\247=\334\347w=VZ\016\275\002m\205\274\021ny<7\320H\275>\361\301\274\036\352\344\274\004\264\236=w\020\205\274Z9+\275\314\316\007\276\274\223\352\274\305\027\244\275\252J.\275{\000A=n\"`\275\274\310:\274\002\034*=w\235\027\274\207\365\212\275\245@6=\215J\311\274\216\340\\<\301\305_\274TT\212=\002A\346\274\273Ah=\221\306\025\275Y\312h\275\361!u=\033\272\204=\016J\212\275&\336\246\274\2515c\275\210\2767=z\351\275;\307\223w\275\027\331\207\274\005\016\226\275\271\013\013=\353$\253<Ld5<[#\261\274\335?\354<z=\212\275\200(\302\273\221\215\233<\2345\'\275SX6=#\246\266\274\\\2035\275\030\002\001\275\010\355\246\275\033\263]\271S-\273\275\340\373\024<\2728U=\301N\275\274\215R\302\274Z\2637\275\221\363\"=\245%\352=\r\374\264=\306\215\003=\206\242s\273\302E\201\274\244\375\360<}\027\217\275\025+\020=\236<w\275>\227\030\272.6\201\274V*t\275>\345\346\275#\233:=U\266\361:\377\317o\273\251\007\005;S\305?\274p\207\224;\214\315\302\274\337\211\207\275\314b\214\275\317\334\267\275\323\3311\273\220\\\024=\267\312\027\275\177A\031\275@\020\r=\306\342!\2731,\203=\327\251\013\274-d\033=\200b\021\274\211\254g=\236t8\275N\247r=\320\033%\274\013|c<I&\376<\220\303\233\273\274M\224\272\312+$=\222\350(\275t\373\000\275\311P\007<N\005\311<\025\363\272<\205\320\032\275\005\353&\274!#I=\024\212\225<z\214\257<\322\301\254\274\013\342,=\213\007\261<\357\235\310\274\356\373\336\272\236)h\275R@\036\274p\005\267\275\034|o<@\220\330;}\031\317\275\321ad\273\270\315;\275\\\350#<:\243\376\274\302\0105:5L\323\274\316\323\255<F\235\237<\342\205\034=\202\345c=\244\233\236\273\210\274\017=\020\031\343<\267\204\024\275\261\030\341\275(Wd\273x\337\221\275\375\260\364<\216,\233=\313\221\032=9\322\021<\200\302\034=\241/K\275\341\321\000\274i\352\021<\226\223 \275\264\267\222<\007\256m=\235d\256\2749nY\274\277\226\204=\233N\227\275\260\201q\275x\344\r<\207\374\302\275\370\263i\273\212\317O=)\277\366\273AG\244=\262\313\203\275\033\0279=\234l\310<rD\200<Yy\216=b4\203\274\0052w\274\342\235\000=\225\310\266\274j\277\023\273s\025\305\274\2676\255=\260B|\2758\251\237=\366M\001\276\327x\217=*7\200=\023I\230=\004\374\326\274\205\304\200\275G.\220\274\304\026\327<;\210+\275\017c2\274a_+\275>By\275\336\330\346\274\351\327m<\316p\236<*]\021\274R\354\264<\270\304\037=\007\205\203<,\274\226=\2445\273;\340\223\377\274\373\357{=\330`\031<\221\020\377;\243\035\202<D\020\021\275\3449a=h\250$\275\314\rY=\'\322\035\274\242C\244<\325\210\265\274s\234\376<\221\365\333\273\r8\t\275\242x><4rW\275\361\310\237\275\376\204\233;\266\332\265\275\362h\027\275\241\316\311<9\010h\274b\037\336<c\274F\275<\345\317\275\253\344\345\274A\352\302;\n\nd\274\264k\310<\275q\367<\375o\312\275\303\245\247\275\224\213R=\004\343V\275X\272%=\326^\347<N$\305\273\304\351b\275\202\r\204;X\326\226\275;<\361\274\242\321\270\274\330\344a=\022\333\241\275\2119!=\343\3357<\354\243\227\274}\3314=N\227k=\275\005\213\274\257\243\222;\n\265\220\2744\341\210=$\302\334\274BZ7\275c\365y\274\245\243\262\274\200-\013<\245F\352<\005CW=#\037w=m\230\"=\256y\206=\236d\233<\321 \207\274mu7=\304H\241<-pT<\303\"\212\273\036\307\332\275\302\243\212\274\023\260+<\374\245\267\275\322\226\275<\031\204\302=\357\366\010\274\215\227&\275X#~=]\231d=Y\340S\275\024\261=\275\244\303\252<\201\372#=FV\262\275J.H\274R@h\274\361\276\006\275\366\353=\275\277\344\001<q\241\'\275\204\027\247\274;\374=<~9*<\331\275\270<\200tv=~\343\213=\270\2415=\2313Y\274\004\361B\275zr==^\273\225=4{\006\274\213\351\341\274M\325\252=Lf\205\275\332\207\210\275x\'\335<l\374\367\273\036L?\275\0228\213<Z\2561\275T\303{\273\235\250\027\275\320\202\235=\272\2446<AE\361\272\017\350\200\274\215`\314<\327\031\031\273ryC\275\360\352I=+\t\373<\361k\333\274\035\206\321\274<\\\355\274\324\350\002=\345W\353<\252W$\274\020$\212<k\323\242=\275V[\273\335\213\210\272i\364\262\273\302z\272=\001\332\376</\006\273\274\247((=\274\245\347<k\353\223\274\3529?=(\301>=;\245F\272|E\344<\016G\310\273x)h<\327H\273<.{<\274\267\353\261\275\216?\201=\221\235\033=vp\200;\226`\241\274ax\007\275\375\001\241;\372-;=\273q2\274\215\377X=\214\256\215<\240\314+\275\224\014\202\274wO\312\274\345\r\032=b\210\0169@\324L\274\367y8;q|\235\275\257`\214\274q\376\377\274 \206\216=\221\320\205=\223|\263\274\342fm=\264\231A\275A+\213;\034\300i\274\301\303\227\273A\325d\274\300\352X\275%\n{\2758N\004\275j\216 \273ji\256\273)Y\222<-\000\367<\2313W\270\004{\350\272\353\232\363\274\177\347\237=x\031a\274 \306Y=\304ZA\275\214F\035=\265\016C\2746X\033\275\352{\221\275\357ts\272\236\226\275\274N\200\275\274<\234\361\274\264\215\233;\305\347\023\274\343\332+\275p\225o\274\314Y\303:D)\240<\317\264V\275\271\353\370;\260\370>\275\"\"j=\021*\323\274\212w\347\274\344_Y\275;\243\230\274\253\331a\274>\302\314<\353S\300\2753\212\253<\316\204.\275-\277[\275E\032#=\311\216}=2}\354;\1774\002=\210\357\272\275\327u\247=\216\251\317\274$Z)\275\265\324\321<VL/\275\035Yx=\224<\020\274\357\\z\274\350\nk\275q\224{;\234\303\270=P\252-=]\013%=\004\372F\275s:\004=\346\366j;\005\316\037\275\346\265$\275\323p\347;n\265i\275\341J[=\200r\006=\343^\330=\371M\035\274\013RC<\221T\200\275f!\242\274\244i\026\275\337\235q=\321\334\010\275\201\252\255<\277.\326<\226\004\364<\014\340&\275\207\312V\275\002\"l\274\013\312[=N\334\272\275\337\217\022\274X \257<\372\r*\274\033\346\023\275\252\230\215=\233\266\222=\007\025c<w\374\\\275\300\210 \273p\222L=\033\001\360<\375-\264\274\253z\346\273\030E\263<\205\341W=v\t&>\335i\256\274\020l\"\274\231\244\213=\215\215\275\274\277m;\275RA\362<\315[R=\356F.<60I=\375@\257<.VD<\215\251o\275\357\003\313;Vk\202\275T\0144\274\211\355\236\274\215\275\225\274\236V\324<<T\300\273\327@<=\t\262\201;\006\202\251\275`\322\251<\002\347\314\272\211\243S9\256\333r=\246\302\363<\370V\345<\354\341\323\274[\365D=\244bO=\270\322c=\263L\004<\236\'\357<`\0319=\305\305M=\311\245\254<\361&\027\275B\325\335\2747t|\275\237\257\235\274\300\230a<^Z\224=\246\342\034\275\301i[\275\\by=\327\322\024\274\007\244\377=\362\310\277<\377\303x<!\235\225<D\316\373\274\236#-=\027r\204\272c5o\275\376JM=\025\265\366<;\2322\274\335)F=\363\031\n\2756y\266\274G\251\234\274\005HR=\315\321\206=\240K\006=\336\220\370\274\270*\257\275\n\232\220\275\310p\333=\310u\014\274\267V6\275M.\216<0?Y=\036\334\235=n\tB\275\000\363R\274\030\240\003\2746\331\007\275\340\t\204=!^\266=\244|\007\275O+\234\275\3636Q<\312\300\274\2757\215\365\274<\221%\275\356E\260=\324\002J\275L\016>\275\273P\330\275\316\315\337\271\255\034\205=\241\276\200<\021\266?<5\022\301\2746\321\335<\244\233\214\275\305\261-\275C\351\026<\225\007&<:B\216\273\270+\201<\350\314U\275\200\212 =j\260+\275.H\216<#EV=\302o\333<\223b(<u!\264\275y\007\224=\211\026\r=\245B\205\275\232^\231=S\035\211<m\003V\274\2502\336\275\265\234V\275\204\360\215<S2\323<O`\352<\250\363\324<\244\r\205=B\025\245=\212)\210\274\256\272\017=#t,\275\273K\346<\3153X=\026\032b<Uo\'\275((\217<\231\323\023\274\026\335\200<s3+\275\273\023\264<\207\031u\2754\326\241<\253\231\376;\263\0268\275\224\262\203\275\252\002`\275yR\276<\212`\266;\034%w<~\255=;\001\306\263\275\'.\242=+\r\006\275i\330\016=\020\215\363<\310~\010;f\0235\275\251<\364<:\272\204=\322A\302\274P\256\351\273\022\025\351\275\233\025\200\275I\363\221\275g\352\017=R\016\027\275i\262\023\272\205Q\034\275\367\253\\\275\004\362\001<4\346O<\\\004\203=\313\221\351:6z\225;\014\001\362;f1\017\273\220\313}<\276K\337:&M\301<>;k<\361\320\213<$\337s\275>\326h=\204\326\364<\027\000z\273\250d\233\274L\232\006\274G\203F<\213T\177<\020\330\251\275\220l5=X\230\252<\265\005e\275\235\357\364\273q\251\257\275N\245\250<\035|\211=\316c:\274\235\252\324<n\364[\274D\037\332\273\005|S=<\306\215=\375\202G<\342\253\236<[Y\026\275\325\265\n=\r\004\227<D|\244<\217\260D\275\311&\000\275ot\031=\341\033v=L\356!\275N\306\037\275u\034\235;\214\234\331:\310j8=\310\234\214\274 h\217\275O\025\225=\357\006\257<2+\030\275v\300\024\275/?\311<\325\242\204=\365\361,=\303[\357\273@\301)=\332N-=\344>g;50\'=\335F\214=\225\242k=|\230\361=\203z\003\275\2269\276\273)\350\310<<\331o=\254\327\022<\306\0348<\336AN\275}!\233\275\343\320\032<\017g\021\275B\236\366;E\246\354<W\001\266\274\247,\376\275\005`\253;\0149\031\275i\254\311\275/\360j\275g\004\346;f\000a\275a\253-=T\272I=+a\317;p\251\300\274q\340\'=hE$;\364W\225;5$\034=\335l\331;\263\276\222<\014\020=\275*\210\205\274\233jd\275\373\"+\275(\026\270\274\266\273\253\274\307\027\343<\266~\202=\321(\357<\022\t\272<e%\215<O)Y=\274\327\001=\301\332\220=\312\354\236\274\254Y\203\275KxU\275l\377\014\274\255E\262\274\235\353\340<9B\354\273z=\255\275#\'\271\271jk\230<\230\352\310\274\364S\n\275o\331\034=!\"\337\274\200u*=\204\0376\275\343\n\035=9P3\275\266j\026=\336\371\215\2747*d<v&\371\274\300\351 \273\300W.\275\234\205V\274\365\377\204\272/J\025=\034\352\244\275\325\275\306<\375\307\217\273L\262\031:\372\335\002\275\217\217K\275\277;\327<\373]\337\275\206|.<j\037>=e\365\214<\240\321\256\275\305-\177\274\314g\022=F\255\241<\221\362g< \354K:#\353\000=\353\304\226=y6\327=\367\255\032\275\006(\316<\023\376\215<\371\340\312\273^\322\254;x\021\240;\365ly\2759/\001=Z\014\027\275\355h\306\274\207u\320<:\022m\272\251\244\226\273|\306 =\311\2713\275-9\204;\004|\240\273=\325\307\273\230T#\275\3136;\2749&9\275\310\370\350=\301(\210\275\303\370}=\240\313\263<q\376\245\275\232v\272\274\203\"d<\243\'`=6\0242\275D\343\225\274\374\'\242\273\350\350\037:\3341`=\224\246D\275\006\013c\275\017{\374\273\000B\231\274\315\213E\275\030\026C=\004\351\013=\333w\362\274\331\360\227<0\365n\273\307\225C\274\030J\214\275\r\245\227< \316V<j\325O=\347(\\=\300\'z\274\027\\W<\273\235\023\275\216\321\007=+\342\263=\026\253\025\275\266\"\014=\357\376\223\273\221\350E=\373\256#<\233<\371;\301\324\212=\365\365\241\274\272vR\275\333\365)\275js\277\275\223\327\'\275O \374;31\344\274**l=\236hn\274!\357\313<\003\261\214\272qX\275<\201t\301<\307\333~<a\002\354<\027\004\226=\267m\260\275J\035\213=B\036\016\275=D\241\275\016\351\335<\204P\242=\352$E\274\236\006\210=[\254\221<\000\t\377\274#\036\261\274Q,\003=\327\010i=7\302\030;\250C\016\274\210-\264\274\222Ix\275xz\313=B(U=#d\n\274!\2263=\336\252\003>\310\217\305\275>\224\236\274\010u\'\275FN\006\275\361C\315\274\020\034!=\215\207T\2752\204\033=\376\n\320<ZT\243\274\t \215\275F\202\023=H/\207=\021\300G\275\223k\034=\234\315H\275\225\212\217\275\221\313]<64\204\275F\311\037\275c\315\213=\212 \244\273\362f\260;\201\"\267\275`\251g\275\316\035b\274\370=i\275\023\274\205<\270^\224\274\276\331\023\275\252Z\355\274\334\240\220=\034\327\036<\357\363\005=\274A{\273o\004\017\275\317\354\253<P\250\302<\273#1\274R\024\273<\323\273&\275\035\000h=\310\360\360\274\325\312m\274\261\177?\274\230\206\034\275\206q\206\273\367\311\310\274\023\366\310<\200+\202=\001\307\327\274\003\227:\273\230\001\034<2\262T\2753|\002=\244u\272=\227X\013\2754\377_=\2237\014\274\334\255\345<\307&s<\331F\177\274\"r#\275\373\337\352;>\251\272;\344\311 \275`\272\305;)k\305\274\366\207\037=\223\252\r\274I\"o\275\237W\265;7=q=n\342\177\274PdH<Mi\237=5<\222\275\273aL\273~\010\201<j\233H\274B\231\274\274\265\371\201\275\0057\243<\tV\037\275\206\271\022=\014\261L\275\350/\214=\261\302Y\275\273\331\037\272o[\014\275\032\204\246=\370>\275\274IMa\275\023\235\236\275\211\2328\275\270\360\257<\210\307)\274c\262&\274\220\241>=Lt\217\275\252\222\210\275\346~\257\275\305\0100=T\r\370<\020W9=\301\226\\\275;w\021=f\364\234\274\247\321\367\274\237\350\244\274\255\240\203\275Iy\221\2753\315\237=$\211r\274\002\262k=\317\256\003;\203\177\317\270\372w?\274\020\026\233\274\363f\330\275\332>H\274\022Y\252;Q\"\372\274\364y\201\275\246\233p\275\203\242%=\242\245/\275\314i\377\273L\344\\\275`V^<\277i\312\273\352\177l=Rb0\275\\\241\215\275\322\371:\275-fs\275\341\377\241<\343\275\212<\3173\325< y\223\272\351!5=\241\303\007=\304A{=\222\356\032;\233\364\\\274\345\2271\275U\245d=\026\030y<\036\344\217\275A\303D\273|t\200\274H\335\214=\n\333\245\275\250\030\037;\004c\333<\241dz<\257M\305\273L{\332;\341\306\250\272$\372\202\275a\241\272\2722\255\361<\323\225\227=\201d\242\274\356\320\243;SN\277=\336\244\200\275\200\014\371<\r\007\324\274AY$<\266\354\373\274\030V\273=\325\232\330<w7*\272\025@;=\346W^\275\330\210\007\275\205\312\250=\333\3151\275\366\326\032\275jE\266\2754~m;^*\311=\026\334\340\274\016\013\303\273\"\263\312\273\257\223\003=\362\t\302<\233\241[\275\010V\272=|N\252\275\322\364\251;\273\025#\274\342\371\201=B!\'\275qCm\275\r\346\320=\023\335\034\274-7\364<m\231\213=\264\177\227\275\203>\236\274\n\n\353<!\230\244<\261d#=\276\250\201\273pB\301\275\207\204\227<\240\377\212\274!cc\275P\343(\275B\026{\275e(\277<\007\374\202\274C\315\241;\351d(\275\332*\366<\227\256\214\274u\261\273\274?V\322<QH\304\274\006n\213\275\367l\205\275\275\275\214\274\260.B=?\303\034=N\024\233\274@\026\201=m\032l\274\252m\022<\263v\262\274\236\216\306;\315)\314\275\311Y\017\274\306(\216\275\274X\226\2754\331\\\275^AB\275\323O\177\274\224D\337\273C\037.;m\013\277;\340\301H=U\233\357\274\272\304\214<Rg0<\204\025\366<+M\315\274\271\004w=k\255\307<\035.}9|\233\031=7Jy<%\341P=\322\013`<\230\310R<\020\263\013\275X\241q\274\353\022C=m\335\n=\243\007\331<\031w\253\273\275o\2215\316\225+=D\337\267\275g\322i=\032\'o=\377K:=x\333(\274,u\371<\010\347\241\275=\246\032=\022\214\340\274\300\235\252=\260\241\227\275_\365O<\236,#\275\231\253\250\2748e1\274w\371\355\274\2763\213\274\334\360\000=S\031\304<\246\227\303=\343\357\322;\201\202\247\273W\340\333<\341\303\367=\017\265\030\275F\230\005\275\221\325\256<\201\276\330\273=\301;<|(\030\274\020\371\247\273\321\032\310\2754p\307\275w-\371;\t\311N\275\314q7=\320\000K=\2775\323\275$\3028=N6G<g\264a=\253&$\275\021\242\250\271\241Pk= \315\341\274\365\316*\275\376\\D\275\226\022S\274\266\027\202\275\303\204i=\252\025\033=\252\205h=d;\364\273\371\3316\273*\361`;\245+h\275+\353\313;\264\371\240\275\333gZ<\032X\225=\275\320\310\273\2414r\275\267VJ<\356\326?\274\016T\313\274\234\264\322<\312\327\352<\275^\005\274\005=\333<\375\306\366\274\tnf=p\353[\274\203\2266=\340\017t;\325\002\331<\233}\\=A\340\231\274;\343\242=\010\2742=Qe\022=\340HE=/\025\215=\320\021\343<\323\237h<\0211\222\275B\272I=\353\340\007\273\220\326\371<{s\023\274\007\354\016=\370\202@<\327FI<<\223n=L\2612\275<\354\356<\303\256\'=1tz<\016\342\217\274\265!\305\274\372y`\275\237J\223=\3021\272<i@Z;\354\236R\275{\275\211=\203\370\r\275\250\320?<8\356\301\273\330qk<\333\336\2339\021\220\300\274Ar\010\275\273\303\001=\361Xz<[(\r\275\347gI\275T=\2739\313 <=<\360\006=0fo<v%C<\357\277\214<@\231\024=\215\267g\275\314\343\207\275\303\261\351\273\215\005\3479\203\277\343;\000\313U\275i\270\312\274.ws\275\0172\226\275H\317\262\273\311\330\325\274\371\322\342< \305:\274Xs\321\273R\366\004=\336\340\230\275t\311\311=\000S\275:\r[\002=\2349_\275\361\321\\=\'\353\227=\025\272B=\242\013u=\263\243\231<\301M\n=\225p\271<\324\272\n=1\270\361=`\266U=\275mY\275\321\213\016=\251!5<\034F\215\274\361\031\n<N\207\311<\177(\355<\302s\210;\345\321\322\274\027\316}<\253[\357\274\255Z\374\270\177\334\240\275\202\256n=\343\217\014<p\2416\274\210\034\002\275Cs\n=\013N\r\274G\333!\275\377\034p=\212\205\227\275\014\017\220\275\302\246\376\274\025<\267\274_{\365\273\243*\343<M\ru=\234\253\027=\037]-= \000\243=B|\003>\006\376)\275t9\024=\365\345+\275W\021\212=\271\027\203=\360[\270=\n\t\276<b\004\230=\020\314G\275\010\335\r\275\315\200\244\273\272\216!=\216\026\037\275\'z4=\302E.=,\304\364<\306X\376\273EK\224<n\347\036=\013\320\214\275\271\346\354<G#\026=\263s)\275\203\333L\274Y\342\200=r\'\006=\223\nk=\240\320$=\034W\r\275T2\276:RQ\033<\313s\032\275K\026\244\274\215\005\234=\207\217\231<B\275\254;\201\237\370=\225\342\270\274\263\020\232<\255\337D=a^4\275\270\257\024\274\334Wi\275\217f\246\275\030\237\356\275\2604h\274\314\342\256=\037\376\314\275\303<\212<\033\013\020=\205\020\026\275\303\223\242=\024|\215\275<\354\317\274vK\013<u\037\027\275t\312\373\274[\326F\274\227\216v\274a\206\025\275R=\223<\r\005\t=i\247\305:-\232\341<0<\365<\034\276\300;\301>I\275\306\332\026<\315\035K=\227\230\247\275\207[%=\007\237N\274\036\304\037\274fl\245\274\'K-\275\037\247\003<\177+E\274ScR<\220\240\206<\207\234$\275\204Hp<EU\246\274\313\215\335\274 \022\264\274\356J\312<\003ZM=\301\234\037=\302LS=#\200\340;\t\331\206\274\032\251\204=\331\355\207\274\266\300\240\275\211\271p\275\272i\301<9\017\231<\342v\210\274R\347@=K\262\002\275\254\034\351<NN\372\274\343\340\340<\277\352\t<\321qe=\'SX\274\203\334\347\274\362\243H=\243\263;\274\246 \007\274\224\327m=-\276\203=\320\271s\275\014\357\305\274\366\2403=j\200\233=\357x\234<\010@\016=\210\227\360\273`.\254<\372D\271<\273$A=vy\017\276&\373\255<\\\260\001\273E\006\014=\310\322b\271\214Ni\275(B\231<\334\334\020\274\214/\016\274\366\002\n<~I\n=\\ri=z\351l\275\214\312\235\274Qh2\275\220q\005\275\205\032\013\274O\351\213=\256`\032=[\227\3459\315\253\344\273\003\305J=\316e\024\275\256\371\316;R\033\221\274\335o\004=A\352\323\274\256x\200=P\330q<\031\010,\275\320zf\274\202\343\370\274\364\324\t\275\265\234\226\275\353}\322<\347\240\300<1\234=<\243\004$=\243\017\307\274\'0\237\273\251\240\254<V:\206\275<\354\271;\230\025\347=\002\215\226\2749\245\215\275\312?\244</\000\216=<!\316\274}|U\275\323\265P\275\207d\341\274]}1=\027\346X=\\\200\000=\264\350\027=\230\'8\275\035E\264;\3321K\275;I\212\275\374\347 =\020\220?=Z\017\273<M\231\002\274\253\246]\274_\340.\273\023\363\342\274\205:\251\275\t\374n\275,\\j<\r\341\206\275\014x\"\274\257= \274/RK\274\242\274\203\274n\177d;\240\2171=\240\0206\274\223\262\025\272e5Q<h\203\352;;z\037\275E\347\261\273D\356\022\274\265@a\275\324\272q\274m\370\205\274j\003`=I\022\203==\216\242\275\"U\033\275\221\nl;\377\016B\275t\302&\272\034W1\275\260S\375\273\tJ\200:?7-\275\234\365\200\274\001\223\027\275\354\006\274=\244_\322\2745\\\212<\025\032\277\273s\002^\274\357\225\023\275\244\255\212\275\014[\267\275M\237\024\275\317\267Y\275\373L\033\273\312\030\\\275\017\235\361\274,v\215=\331#m<\000\035.\275\253F9=x\363A\275\330w\216\275^\003\346\273I`\362<\265\000\371=\230\340D\273G\347\204:\265\031\216\275\307\3710<b\342\322\274\355\"\342=?S\006\275\010\206u\275R\024\t<[Q\201\274\256\234I<\326T\264\275\026X6\275Rd\255<\340\360\370=\216\212\206;\020\026\331\274K\036\025\275\027\235\216\273g\001\215\274\243#\210\2740\343\204\275\224x|\272b\372u=\244\204\315\274\204\206\224<\373\343_\274\'\013R<S\203`\275\361\350\301:3\356\373\273\354\027\314<X\357\344=\360\240 \275\0338\243<\242\307\204\275\236W\031\275\274d\310\273\332|\301;\242sX=@\352\200\275\203\263\t=8\270\263;\321\377^=\016\021\036;\260?\030\275tt]=\342Z\220=\016\000;=\203\377\213=\360\375N\273h\202\"=5\356\377\274\246;]=\016\254\341\275Z`\005=.G1\274/\\C=\366y\n=\256f\311\274U\377\200:\272GJ\275\177\332\247<\002\234\222<\334&\242\275\024|h\274\023\212\210\274\237\312W\274\273L\221<\223#\302=\024u\030\275\213\027O\275)D\362<-=\255<]9\266<\261\277\\=\345A\355\275@\023\250<\263\254\212<\362\2010\275{\235<\275\273Y(\275\356\234M<\334\014\216\274Y\222\245\273\223\205\276\274\271\275%\2758\355\022\275\235do<\357$\275<v\0246\275\300\325\354=wT\343;\2278\301<\375\231\020\274\340\350m\273\262_\'\275$B\274\274i\243y=O!\247\275\003$\311\275\227\361N\275CwF\274F\205\263\273\260\262\215\275\002I\202\274\211%\275=\232\344\013=\270m\376\2749\347\262<~\313\002\276m\234*\275\272\314\244<\177%\201\274\005\223\r=\235I-\275\320\367z<lp\032\275A\205-=]\324*<\001\206q\275J:\254<:\350\375;.Z\225\274\365L\212=\254B\323=\035\2125=\212\361v=T*\201=\253>\355\274\215\202L<\205\'\212;\300\240\347\274\336\305\267<\003n\273\274&P\031\273{\307\234\275a\360P=P\316\007=\202\374%<\177\255\025=\310z\"<2\335\310;\251}\304;\210.\200\273\326\372+\2757\306\223\274\234\226Z;,^q<\276SX=)\366\376<>~\366<<f\024\275u\255B<\020Q8=\221t\217\275\007\275\202\274\350\265\366\274\247\233/:g\003\202<br\365\274\215\303Y<\003\210\214\2747F&<|SC\275\315\353\256\275.\364\013\275\201\305\026\275\317A\227=oD1<\2064\006=\262Y\371\274:\242/\275\305\356\252\275?\253\300<\233\256\205\274.\025\\\275\031G\330<\rE\032<\330\305\210=\253\037p=]}\261=)\315n=\217\372\336<ap\201:7g\240=\rO\227<\243_\267\274\303\271\361\274m\024\257\275\264\016\256\274I\037\256\273\243\306%\275\250\221\023<\202\353\334<\245%\241<\004\313R;v\340\211<K\376i=\373\225\345<V-\271\274B\t\t\274\210n\036=3\211\330\275\335%}=ndL\271\350d\277\273\255\376R<\n-=\2755>@;\362\235\021<\005q\354\274%\240\307<\213\234d<d93\275\266\006\237\274)}\207=\205\340\214\275\277\t\321\274\325\3543=\251\355\200\274N\346\204<\326&.\274`\374\033\275\016\246\252\275]-P\274d\323\246=\226\210\244\274aD\347;\361\264\316<\340\323\271<\266\025\354\274Q\005\254\274\220\036\206\2755\256\242;\365L2\274{7\313<p\367M\275%\260M\2758r\267\275\006\316>\275\035\222l\274\210[\236=\321\350\013\275a\331\245;\362\333\021\274\312\\\241<\t\001Q=\370\304\326<\234\274\212\274)W\036=\2201\"\275bg\002=zEk\275\250}\365\274\215l\304\274(7\201=\261\225\324\274\315%+\275\026\304\253<\211o\034\275\362<,\275n\325\312;N\'\240\275\032R\022=i\r(\275\335\226\227;4\313\223\273fe\020<H\225\210\274\311\247\020\274\261Z)\275Q\347\373\274\253\244m<\003\014\017=\321\323~\274!%t:\014B\246=\366\342\013\275t\366\273<\004G\374\274D\352\302<\0008\341;\002\347\361\275\361\316\325=\246\024\234\275\214\227\025=c#F=\331\267Q\275z\260\226\275K\315\305<fTQ\275\216\312\311<0\211\217\274KM0\275\326\340\206<\202\253<\275\246\177\376\275\275\337Y\274\366\002l\2749l\035=@\321\034\275e\ty=o\275\030=\313m\363;\302\261W=\016\027\017=6E\334<PV\323\274\264\212\215\275\314\256\230=\227\0169=O\034E\273\322GS\275q*X\275\\7\261\272,\\5\275o~g\273\030\266\243<\273/\365\274=_\205<\007\274v\275\316F\262\275\333\2106\274;\310\222\275i\207i=!\237\005=F\254\344<A\307\201<\270C\221=\331`\227=)\372\r<\207E\03092k\317=\177*&=D\253\363\273y\\A\275W\326\177=\037\320\232<2PQ\275\002\3510\275$\207\352;\272d\014\275\276kl\275\\E\031\274\221\300%=\347\035\270\273\213\023\214=j\361m=\360e\326\273P\013\204\273\365C\025\273\003h\217=\275\347\014\276\251\177c=7\014\021=&\364\027\275\302\245\202;\357\236\315\274\372\017\231\275F\260\276=U\242Y\274t\0166=\210jO\275|\332\351\275\250\342\030\275\373\237&=\222:n<\307o6<\320\206y=\356F\336\275\227\347\213=\367^\030=\030\375\017=W\250\247=\3323\204\275\037\217\210=\334\236\226\274Z@E<XJ5=\206\272\231=\2675\033=\235\022\030\275\254\364\003\275\006\301H\274\2631|\274J\274E=\355\360\235;\036\375\270<\321\315\310=\201\212/<\214\220B<\343\241\252=\322\177\322\274\300\203\244\275\354\250\257\274\336A\305;\2360g=g@\036=\006\031\037=\377\036x\273\035 o=^\220\365\274\036\212\024=\245\343\301:\336\"\232\274\016\305\241=\245\204@<{\327\031=\354\320\314<\036\243P\275\273\'\200=(\007\233\275r\276\264<\244\"\017\275\"\311\002>g\002.=Gs\036=)_\211;\237\t6=~\211\036\275\022\352\337\273\"\323&=\360\272\370<\345\347\376<s\232\034\275T\264\251\274\370\313\304\275\332\377\372\274\262\017,=\342\274\241;\202\276\033\275\243\000\207=!\017P\275\2242\200;\362K\253<x^\356\274?0c\274\017H\375;\321$d\274{\221\355\274\005(\n\275M/\352<\006D\270<$\tE\274\360\315\341\274\204\272\273<\374\366X\274\334%\014\275{\313\317\274q\304\341<\234\322\300;\273\230w=\020\023\035\273\300\261\323=@j\227\271\267\032\\\275\227:\356\274\335\005\274\274\363d\r=\002\\\235\275lZ\241\2753\341D\275\250k,=A\267W\275\272\2437=z\262\201<1\3617=<\375\364<\217\230_\274[0&\275\346\017\n\275\212\247\324\274\323\233\244<\344\006\246=\034\n\304:\210\364{\273j\'\202<2\231\337\274F\0053\274m\000-\275\337Z\016\275\225\306\304<\026\240\237;a\020\253\273\001$\310\275\362/N<\210\245(\275;\255\262\275\216=\204=\240Y3;J?\230=5\276&<#\300%;\205\240\177\275\266\373\010=\270\331\032\275\2412<=v\"\021<\234\325==#\314\243\275\253}\207=\033\016\376\274\rd\000<^}\014=\232 \361\272\360T<\274\036nF\275|\344\244=Z\3444=\310:\226\274\310x1\275\026[\354\274\242\254\224<\313\373\222<D\374\347;\230\2645=5u\361\274\316i\347\274\027\0163=\203V\204<\026\357@<\303\357\327;\306\375\277:\340\246\204=r5!\275y\333\207\275\023\264\2359\313\326\n\275\273\035\216\275\203\317I=C\373\013\275\265\374$;<W7=6`\004\274\314=\314;/*\215<\232\226w=x\377#=\216\371\350<\245B\332\274\311Re\275\352\024_\275}\001e=h\204V\275\323\\f\275\321J\017\274\361\276\206\275->\014\274\215\310\237\272\366T?\275\002\274P\273\314\200\215\275\276\227\032=\350\264\367\273\236\260j\275\345\300#\274\233(I\275M\302H=\352@;\274w\312t=.\331\007\275f\215\256\274\026\020\001=t\372\005\274\005c\t\275\226\035\336:vF\230\275?\315N\274\023A6<\204\352\265\274\255]\263\274+\205\r\275\022\215D=\032\354\235\274&p\317\274\275g7=\003\255`=G}\275;\367\010\007\275\'XQ;\2320/=\361\021z=\223~z=\274\252b=X!%=?=\017=\331G\216= \217\n\275|\r\200<\217\305\356\274\010,\335\274\010\352J\274)\355\017<@u\200\273\352\002\003=1\203J\274\20044<\273t\264\275\3015\023\275\354\342D=G\025\330=\007\335\352<\253\237\211\275\347I\003\276\357V7=Y\013f\275\303 S<\033\317;\273c\277[=\201\302\224\271\221t\237\271\312\327\345\273\322\3716=>U\205\273\227\001v<\002#<=\334\233\210=\254K\226\274L\217\022<\224\341/<C\314v=\223RQ\274\311tm\275\251 \215<WS\306\274\000r\207<\310\201Y=\231\246\256=\272P\204=\035\'0=\3133o\275\206\352\375<\262b\230\273\033)v;h\376\276;\004Fs=\177}\235:\2612\247\275\354\035\325;\244\3067<\312\235y<2\232i\275|kJ\274\260\334\304\275@\263M\275>\374><\323\201\230\275z\n\307\273\030\264\202\275\022\261\032\275\342\220L=\034n\206\274\373\304\314\274f\226\245\272V\203\225<(<0=f\316g:bS\013<\207SS<\356\321\275:~\035<=ZU\344;e\365\352\273L\245,<\336\t\351<\322\021\242<\371U4<V\245\214\274\277\221p\275\274\274\362\274\245\236\002\275\300\322c=N>\331\274\2058\334;s\034a\2740\006\263\274\311\356.<\357\003\004\274,\r5<\237\3631\275\344P\356\275\013D\013\275\027\306Q\275{\262\201=\343\000\212\274\367UQ\274\247\022\356;\270\241\236<\"^\343<\004\354\000\274km\216<W|\250:\254\267\216\274|\3653\275X\260U\275\227S\023=n_a<\023\260\006=\205\224\004\275u\203\\=\027\206\020=\377\204\036\275\3515\306=\200\022\t\275e\345\032\275\256\205\016\275&V\305\273\035\242\272=\3666\212\274\202\303\220\274U\037\252\273:\216\311<\211\263\031\275\177\014\014;art<Gr\202\274\351\264\227;\202\0313\273\327B\241\273~6L\274b\274\201=\355\330z=\0023\232=\n\233\t\273\273>\375;\014M\225\273-m\027=S;\360<\034\031\263\274\356\221\353\274J\216m<\212y\331\274\243\272\300\273\364\320\226\275\351\270\346\274\225\242 =M\362\274</\236i\274\211\225\307\274\303`\216\275H\221\001=\037u\013=\207z\325<@N\314=\356\036\232=\263\341k=\315\tf\275\275\207s=\203qU=]\035\206<\017k9\274\377\246\271\273\311nm\274\301\201<\274\023\325\301:\024?.\275i\346\314<\344}\262\275h\027\004<\000\2013\275&B\263\273\232/`\275\341\237\267\274\014\034.\274\227V\365<\362\200\330\274\300\356W<:l\237=#\241D<\353\370\222\275\254\372\275\274\241)\227\275\345\'U\275\303E\371\273\266\036u=^\274l\27592\221\274\243Y\275<o\234\273=,\203\300<\267v\323=\300\342p<\374\317d\274\025\024\307\274#@\017=5\367.\275\324]\224<\347\005 =\022\254\375\271\304\362\306<(\235\036=\373ue=\343SQ\275&\277\321<\026D\254<z%\334\274o\243\216\275<,9;(5\364\274L\n\033=j\004p\274\356\013A=\343a\200\2744-7=9\212\035=\337\201=\274\302\335\240\274\036|\026=\254\006[<\361\325p\271\356\361R\275\374g\021=\317G\014=\035o\230=n\232\325\2752\006]=\300\272\247\275\325\240\322=\212\371D\275v.%\275\336\324J;\211t\223<&\202\037\275\310\222\010=\024\211\t<\207\017\327\275\227\211\000>\352\3546\274\331\\\275=\202\273\303\274\007\000x\275c\321\027<\206\277*\275O\213\016\276kH1\275\365\236\330<\316\357\252\273\301/\204\273\207\027M<\212\346\265;\240\332B\274!DD\275#P6;:]\"\275aC\232<\314\332`\2758K\322\273NB7\274\260@\020\274J\314\004<\024\0042\275Mf\263=kA&\2752.#<%i\376:\357\353-\275\346)\003>\366\274@\275\r\205\361\274XC0<\257\340\035=\251\350|<\355\327\023=\310\2636\275z\343\275<\376\331m\275\343\027\316<me\361\274\317c\303=\177\'9=t[8=\307V\243<\314\223\267\275\313]\225\275ZK\023=j\236\376\274\331\230\355<\271.%=\001\323\';}BP=L\177\346\272\346\0162\275\304\236c\275\000\204\272\275X\277\234\275\232[@\275\307\256\247=\034\234\232\274\033\334\232;\007\257p\275}\020\272\274\3234\001\275\0237\2269\0325A\274/\315\002=9\206\214<\016\2652\274\240t\201<\030\3653=\033\312\261\275\356sw\275\177\010I\274\0325\t\275\342\'[=\2604W<\234\213\215\274\305/u<\351\314\005\275\275\312\317\274\351\342 \275\220@\316\273\260#\254;\025:|=o7\324;\306\216\313<\016L\234<ue\023\273\201\377\t\275\272\307\t=\013\022\330<\006(C=K\021@\2755,\202\275\262{(=\013\325%\273O\0104=0j\270\275\202\334%=,\372X<\273\3017=Q\341\303\274\333\0203<@\276>\275\275\027W\2752\363\327\2725%L\273l\331\361\273\212\270\322<5\'\201\274\2436\t\275kA~\274\177I6\275\351\017F\274\177U<\274\271\243\233\274\257Q\264\274p\022c=\322\247\246<\306\330n=\207\"\203\275F\252\223<\304e\036\275\36671<_7\305<\240$\374<Y>7\273\273\250`\275\255B5=\222\307;\274,\013\250\274\230\234\301;\026\344\203\273\261\315(<\274\225@\275\244\312\216<\247b\235=\245\350\204=\244Z\305\275O\t\237\274\274\ns;\014\224X=\234\331K=<C\337<\303!\237<\257\230\277\275\201\r\013<\354\017\206=>\327\266<\2459\021\275\350-)\275\362\010\206=\275\031\365<\027\243 \275\007\352\325\274\213v\322=\275\343\225\275\223\016^\275\213\022I=\374\244+\275\022d\264\273sX\356<[\206<=\'&\212<\367\336%\275\266\361\301\274@\364\302\273\325c\216<\177T\272\274J\002\223\275qAz\275\266\016\323<\334J\266=i\223\023\275\343\'\033=\214s\250\2758\277Y=&A\343\273O\316Q<\023\022\257<\362\321V\275.\353\210\271m1\213<\020\201\017\274\261\363\255<\260\334+=\020\036\202=\036\177\005\275&\310y\274\320x\n=\277\212.=\315g\263\274\030\032q=\027Me<\225Y\353\274\300H\221=7p0=\242\273\361<\362N@=\013i\253<C\025\253\273v\353\206<[\024\241\275\327>\033\273\006}\357<\263\032\353<\313\202R\275\262$\364<\217\222\027\275t\317\332\274in\364\274)F0\275W\242\226=\235\274\321\275g\226\210\274\263\324\355\274d\\\003=\027\362\206=g\023n=j\014\331\274Kk}=\361\275#\275\317c\201<\303\240\375;\022y\302\273(\267\010<\323\033\n\275\323\307\017=-E\301\273\307]\033\274I\323\002=\262h\027\275\'v-\2743c\232\274\021\262\230<9L\241=\000t\\\275\271\037(\275Z~\014=\212i\257<e\032B=0\222\013\2752L\030\275\340\201\316\274\270\376\006\275\212\210/\275\025G<;G\304\235\272k\t\033\274\032H\013\275\347\023E=B\327\031=\274\250Z;\366/\273=\367\232\231\274k@\235\275\013\304P=\002\264\243=VA,\273#\371\317<m\307R=\036\271\'=\241{\251\272\213\327\234\2759\315\230<;\227\332:oF\361<\017&|<\323\244\337\2751\000\020\275\222\353\005=4q\304\2742\027\005=K\272\n\275\252\211I\274\212\010\322\273\262\324;\275t\361\030\275\226\324\027\275\020\r\210=\014\025)\275\373\025\371\273*s\234=S\251g\274.\265K=\323-\247;l\204k\275\377j)=\255\225\361\272\351\326\312\274T\234\003=\032:\002=\203\271\272<\330\032\000=f\356\346=\233m\231=\033\377\234<Z\3473\275\2047\372;\203\223(<\205|\t\275\2536\370<kY=\275\n\200x<\036J\321<\211\r\032=\360\252\336\274S\346C\275\025\327\325<y\264\002\274\331rU=\226Q\276<\300F\337:!\250\014\275\227s\374\274\306\323\211=7\254;=\352S\213=\366\372\321=A\242\224<\030\000n\275z(w=\223z#<)\360\230\273\334\377\206\275\275gb=\210L><%s{\275=\0170\275\332\340\222\275/\341\277:\307\201\255\275\375\202\013\275\362_\337<\351\033D\275\000O%\275g \010=\347f\313\274qIC\275<\0207\275Dz}<\325=\201;{\207\250\275\005P\337<\030\275!\275\026\005@\274\266\177=\275!\316\222\2750-\327\273\\\006\r=\241D\207=\344\3335<><Y;>\253\231=\306\025\246<\222\306R\275n1\346=7d\271=S.O\275B\325\313=\021\212\254=\006\004\210:\331\031+=\370\324^:\227\250\276;\256$#;\362\201\035\273w$\001=`R/=<\270\'<\274N\3209\315ml\274,\345S\2757\333/=\\X;;=\n\214\274 \214)<\214\037\311\275\220f\321;w\222\207=\346D\250:\225C\255\273\"\364\360\274.\376I\274_\275\034\275\034\247\034=\360\372e=\201^\375\274)\363b\274B\373\374<\\\035.\275\to\235\274m50\275\361yC=\204\361\016\275@\271\213\275\003\311\007\275H#\347\274\207J\273\275^\326J\274\337\273\336\274\247\211\033\275\000\000_=\264\034\320\274M\207\023=\246E\227=\362W\371</\';\275\302Rj=\314N\020\275M\317\310=<\200\031=\357q\r<\252\216\270\275\235\230,\275\211\001\222<\352\013+=(\342\204=f\254\203\275\347\010\217=\233\301$<\356g\263=\036\177\000=\331\017\t=\321\324\337<\241.\034=\230\240\216\275\0076\200\275\3072\272\274\034\246\364\272\342\211`\2745-R\275\034\216\243\274\262\345\252=5\234\210<H\324\007<\327<2<=d\334=sCz\274\365\262\020;\264\000\260\274\270\206q=\331/H<\345\226\271<\224H\205=\300\271\023\274\023\034b<\236jN<\002\353\362<o\350.=Bc&=\'\335\300\274\224\220\350\273 \251 \274\346\235\233\274+\260\240\275\016\205\213\274k\335A\275&\r\334\2740F\261\275\210\\E\275?.\216;\211\373\031=NE\253=\337\261\025\275\000\3763=\306\\\240=\367\372a=\362\216\006=\243\005\305\274HE\335<\352z\376<3\252\010\275\343M\023\275J\353\212=\030\220P<\016\006\233=\256\034\312<\212i\233\275\203\242\372\274<f\365\273\376^T=z)\023=\306\332\224\273\005tH\274\330;r\275|\000\220\275\'a\242\274\006+\225\273h\347\317<K\227\267\274\312$\377\274\326Q\014=\262\003\223\274\030\\\t;>\002:=J\014\223=\027\270\265\274\001\222\315=\352\215\223=A\367\341\275\311\355\207<\024n\271\274\326cX\275\246\026\244<\201\301\000\276/\005\362<\375DZ<G_\214\275\234\026\212\274\344\032\t\275\371\035K=\020\225[\274\213\371\316<);\274<#\031\231<\363C\021=l\036e<Z\374\264\273\242\352\245=\035\274V=\317\373\003=\223~D\275\177\333\"\275\350\031\235=\207#;\275\376W\013\275\303A\032\275Q\373}\275\230\312\"\274\353\350\366:\025\222\'=\315\200(\275\024J\225;+\202\202=\224j8=\313\344;\275\t\022i\275\\\222\340\274\251\235<=\233\0326\274\271O\002=\204)V=\r\\\000=\315\276\013<\007\345\n\275^\346\260<\201Tl<\200U\326=\035q\221<\312\014[\275\263\337\245<f~\246\273\337r\227\273|\030:\274\252\256\360\273\367\355\370\274\273\216\260\271?\316\030<\n\271\311\273\374\023\032<N`\321\274]%@\275\311\240\021\275\346J\023\274\nz\007<as\227<\321}\333\274&m\232=c\240\033\275\356\350\264=X\331\022=\327\037k=\007\244\274\273\003a\n\275_\205\021\275Q\203R<\253\342:\275\255\270\251\274h\324\361<\253\340\261=\274\006\200\275CP%\275\263\2401\274ii\244=\005\007\235\273\010\363A\275\343;\225\273\251L\303=\334\021\255=\205\223[\2748\335\243=W\224\3019<\265#=\005?\340<\200\303\344\274{\376\367\274\0133\207\275\370(\3129\014G\000=\374Q\366\274-\347\353<a\037\373;\374\230\214\275G\266\016\2755\363F\275\256\370Q\275\361\212x=\003#\367\274\024\342\027=gF\367\274\024\204\037=\276\3206=\274\001m<\314_\275\274\203\010\031=\371\277\311\275\341\357\177\273\214r\036\274\026*\261\274\374\357Y\274\361\261\203<R\016\212\2741~7=D\003/\274s\241\240\274\363\035\211;\236\237U\2729\001\216\275\223<L\275\362\351\214\273*\327\313;\tfA=\205cU;AD\225\274[v|\275\007\326a\275\267\303\270<\255\277~\274\024\234\030;\336\006\202\274m\326V=\210e.\275l\206\332\274\275\\\207\275\345\255e\275?_\215<\252\311\000=\000\026\204\274\2719\264\274\274Q\230<\310\264\001>{\003/=\'\212~=j\240_=>w\014\275J\200\214<\372\364\301=>\243\022=\"\005(<\242\222\212\274\000\253\030=\330\342\220\275\320\202\377\274i\217\264<~\311u=3\215\254\275\016\231G\274~\211;=\024\240\357<\017\026\271<\302\314\332\274z\033j:\273\336\010=\376\005D\275RpN\274\037l\224\272\352\033\215\274\303\251\234<\025\315\255;\352\"\265\275\265\224I<\313t\026<t\025\317\275*\317K\274-\340\375\273%\016\270<!\021\231<\314\034:\275\255H&\275rV\212=uCX\274\177\273r\2731\323O<VE\221=n_f\275\2567\224=k3\345=;C\177\272\245A}\275\313\022P=\177x\320<2\212;=\302q!=\343?\375<\243\252F=\013\222\307\2747r\324\274\324PR\275W\003\267\271\206\227@\275\\\033\243\275\037\353\021=\332\205\002<\235\315J=o,W\274\221\273\006\275a\373Q<_M\002=;M\342\273\357J\264\275_\024\313\272*\234\226=*(\200\275t=s\274\312P-=7\264$;\311Bd\273\262J\234\274R\275\323\274\275\357O\275Q<+\274\333\242\306<\013\312m\275T\260\206=\312.I=\351\314 ;R4\205=\311\303\020=\234\274\'\2758z\324<\373:c<\230\274\204;o\334\206\274\r\007W\274\307\313\\=\366\340U\275z@\026\274\327\333\200\274@6\370\274a\"\271<s\212\205<\200,\247\274\2723g<zS\365<\336\'O\274JQ^\274\223$T<\273\376\016=\243+W\275g!\340\2741/\303<S@\200\274\313\204\036\275\347\242\205;\276\022)<\322\327\036=a\202\225=\274\373}=v{\310\274j\267\327\275\245!e\275\370h\025\2751A\326<\313\262%\274\230\304m\274\336\236\312\274\322C)\274\205Y\304:\322\031\342\274\022k~=\363_\310<\270\260\005=]Q\026\2750\021N<J\242\014\274\345pw=\324\214\022=\210C\273;\340\310\301=a\367\357<0\360C=\367\0318\274\330\302\350\273J\374\n\275\304\273\272\274B\214\220\274\026e\325=@\3648\274#\356\037\274\236-\023\275\231\006\335\274\364\334\303<\343\0271\275h\232^=h+n=\333\253\"=\341_l<Z\346\006\275\001I\200\274\335\n-<\274\266:<e\346e\274\'\252W\2759\276\234\275p\2276<\327*\010;\216\347\245=\353\251\231\2747\327]=\224k\214=f\362\247<\003U=\275\"\215\342=\032\344\255:@\2351\275*\367\342<!-\003\275\005Y]<\370\317\215=\232[#\275\005\274\020<\331\3246\275\374\344\207<\021\354\241<P\037\n=\330\315J=w\031\371<\257\034\303=135\273\362x\305=(\002\001=\205W\203=\316Tu\275)/\377\272h\230\311<\365c\234=\275K6\275k\336\013=\233\243\\=\331u\214=fJN=\302!!\275\265\020\232\275\307\347y;v\271\365\274\tI\000\275\005\241{\275\013\227\315\274\225\177\025\275TN\230=M\217\026=\004\3009\274:wq=\346\266S\275R\0272=\314\356C<>L\227=S\r\215=\200m*=\362\025A\275\223\207\322<9\340\n>\347\320f\274\334\'\322<\231\350\214<eO\315;H\031\037\275\340yE\274\233\324\227<\264W\365<\027\260\225=k\226\004\274g\240?\275\301.P=\334Q\251\274\006\232\307;#1\236=WEL=\231(\001=\235\344\355<\274\333w\275\r1\236\274\241Oy\275\310\307\320<\226\200\305<\374\263\306\275p\001\262\274\337\010\014<\006\307\225=9vh=\346]\305\274w\205X=\355\306\234=\205k\254=\364\301\264<\233\220\313:<v\033\2752\250\003=\t\014\320\275\253\032{\275u\235e<\235K\031<\003\375-\275\024\270f=>\265z=$\255\036=3I\272;\203!z\275\363u\251=X\323b\275\300;.<\013u\320\2757\007X\275~o\222\274\257\333\033=d\244\360<\023\225\315\275\323\341\265\273y\372\332<\300\226}=\316;\363\274\232OG<\201\263\330<i+\247\275\327\253\237\274\026\324\313\274\257\2074<,\025\200=\223],=~\364U</K\233:\001 \204\275\177-?\275\264\222y=\353\313\177\275\211:\207=+\214\255\275\326\256]\274*\030X=w0\226\274-\373\021\2750\336=\275\374\310f\275\230\217;\274\010\031\007\273,@\257\274%ph\274\036\023a\275\373.^=\245?\326\274\301\363\214=\232\253\034\274L\035\001<w\271S<\262\360\006=t\303#=bAb;\022\034V;\220,x\275DN\306\273\302ge<?\233\312\273\3717v<K\003\233=\177Dr\275X6!;\t;5<Q\316\371<\371Rb=\324\3637\275\331-\203=\232\216\001\275\354\335\036=\014\233\016\276.\245\354\274\0053)\274\334Mq=\370\013\316\274g\205b<U\032\263\274\007\337\224\274\325\200\256\274\014YP<\204\235\363=\312\305\3479\246\377[\275\250\021\244\275\370\345\013\275=\200\006\2758)\237\275\226\335\366<\364\350\004\275\320\3266=\326\215Y\274\'h\216=\337\002\272<$\364P\275\335y\224\275Y\270\241=\313\2009==\356\"=\236\351/=\342\225\'\270\363\333\215\275\361P\346\274d\366\370\273\301\032\014=C\214\252\272\266\202\354\274\313\320Y;[q\250<\241\000Y=\252\353q;\377z\003=y;\250<\006u\001;y\370\0049I!\320\274b\0242\274\247TY;Ur\257; _B<\221\215\271<E\322#=\354\344\205\275\007r#\275\267\221z=\026\232\250\273\351\363==\307\002\241<\0225?=`PF<\033y{\273\326zr=&\237\220\275@-\033\274\225D>\275j7\226;kz\321;\337z;<\326\216\350<\277\312\244<\366\336\250=\316\211\206\274\306\246\307<3/\027\274\270\r\021=\226m\204<\240\351%<&f\003<\007G\331<\333a\t\275\3670\252\275?\330\340\275\343\003*=\323\352\007=\006J\336\2720\351\025\275Gt\251<W^0<\222\313Q\275\312\207A;/\033Y=\244Z2<\253$h\273\214:f\275\372\360\225=\266\275p\275\256\250\251=\017FD<\0013\205\275\337\031]\275f?\315=[\005\350\273d\303\274=\202\0166\275\225\356\376\274\004\026\266\272\370b6=\226\210\206\275\3522\313<\364\301\016=,=K=\272\tm=BN\037\275Eo\317\274\212%\206<\214\031I<\325\020_=\316G\303=\344Ol<|\246\245\275\217r\002\275\2658\347\274\013]<\274~\223\\\275\276?x<\362\346\241\275N\316\220\274\376\034\277\274\372&v\274\211\003w\274\203\027{<\271\206\224;}\017\265<@\276\002=\2637\004\275L\021[\275\271\355\220=\024\214\"=\317\313\000\275\213\356\3269\362c\240<\252\363$\275,\340\220\274\031?\237\273\013\353\300\274\310\\H=P\366\027=/\350\222\275\225\334\253<+\341><\224\373e\275\031\255\324\274\325\037\340;\034\264\030=\177\371V=~\034\035>m\245\261<\245\336\232=\210\'\220\275]\231\007;c\3117=\367\027\377\274\302\013\354<)\212J\275\016h\362<.e6\275)\3642=\001\2266\275\306\346\224\274\004\355\004\275\021\010\300\275\006\312r=x,\304\274\310\215\335\274\262\221\330;\361\264\240\275\227\324\203\275\033\214\300\274\330\246d\275\230\262\231\274\313\317\"\274\322\226p\273q\306r\273\260\212O\274\336q\r\275\253\225J=6m\216\2741\370\217<`\212\001\275\224D\311<\022EG<\007\307\302\273\203\372\351=\310\304u\275\304|v=\206\207\002\274\023\210X=\2477\017=t>\203=\267!\n\275\303m\236\275\374\330\330\273\013\022\024=0\210\312=W\013\277=\177\0021\275\244\000\222\274\\1G<\214z\373<\217\305\257=\242\1778=[\235:\274\351\n#<\202k?\275\361T\200\273\224\212c<\031\321\375<x\025q\275V%\261\274\323\357\225;\246ow\275\001L\204\275\301uJ=P\326\226<\201\001\302=\300\372\251<d\2407=\370d\372;i\224\274<\216\036\343<\232\030\344\272\252\366\210=\221\324\344<\037sB=\201\342\372<\304\234\315\274Lv\004;o\240\030=\215\032\223\274\273\017\320<\314\016\341<\266_:\274i\0147\274>\021\003=\027\372\036\275\212\234\337<\353v\253=\330\320Z\275\355\206S=\356p\205\274\223\237\251\2747\020\017;>n\213\274\333\310\245;Yx\351<*O\362;\377\321{:\214I\200=\010\215]\2737\343\226\275*\314U<\221+\306\274\225\200\200;\351D\240<\366(\223=f\252\310\274I\345\235<\3256\216={\246\013\275\020 \207<w?v<\257\315\231\275L\221\314<\375}\250\275\350\025\005\274gwd\275\372kE<f\271`\274yT\017<K \213\274\3053\272=-[\245\274\027\333\014=\244\222\223=\311\0231\2742w\312\274\216-\244<\026_\350<kVq\275\310\240\257;80I=\224yj\275\307\302\232\275\353f\033<g\314:=\236w\353\274\033@x<\347\215\233=\233m\272<\021\020\312\273\204\366\002=\340\'8\275`\027\006<\234\201\264\275\367\243!\2739=X:\n\201\272\274\025E\273<8\036v\275\030\250\362\273\334,\031=\010\226\344\273\347\351\324<0\205\013\275|fR\275\315\036#=\tY\211<\303\t_;,\340\336;\347\247\243\273\236J|=\376ZV\274\013Ch=m\363H\275\\\371F\275F\257\200\275\323\337F<\014\260\360<\034\230\000=G\301\267<\005w \275\005\217\366<K0\334\274\027\211\037=\030\377<=\206\005\030<\230\335\001\276\010\271\377<\217\247,<\020a\023\275\212\375B\275c{q\275\361\336\241\275\211\016\232;\371\344\323\274-\017\007\275\301\224\313<\324\033Q=\2722\022=\023\357\331<\033\247\235\2725\303\023<\377\202\266=L\303\336\274\334!\217=\0133\017\274[\232/=CD(=\222\211\024\2751mI=\020F\361\273X\373\242\274b\217\267\274\027\372\242\274M\366#\275e\250.\275\345\2305\275]`\327\274\333\325\317<\373e\371\274\211\025\001\275\323r\010\275\241\347\007=.\242\220\274|\037\364\274\264\2465=\265)\302\273k|\360\273(\003A=q\207N\274\027\360\250<\343\203\370<M\020\254:\346\205Z\2759Y\t=\201\3116=e\321\'\275\275\216T:\346\203\017\275]`\211\274\226\262\252=\003x\335<\365 }\275\275\314\331<LPM\275\351-\321\275\205!\223\275Td\252\273\204(\360\274?\271}<Pw\032\273%\230l<Vs0<\203\306\000\273X\302\013=\033\254f=\245\327j\275\363a\237<\014\207\024\275\232t==\215\331\215;\014)\306\274!\300\204\275\335[\010\275\307\372\205=\245LH=o0Z<\210\222\247\274G\031Q\275\312\221\233;9\323g=\277n.=Y\343[=\346\372\227=pzo\275\315\016\216=\177\2710<c\006\253\274\226w\031\274jR$\274\006\251\221\275\020%K\275\226\362k=*E\333:\034-\235\272\371B\372\273\355\n\343<\021T\315\275\326]\221;\244s\221\275Y\202a<U\252\231\274\364\017\241<\223H\233\274D\t\205\275*\032B\274\233\227E=t\271\243\275\007\324\032;\\\271\202=kHs;+-T\274u1\315<e\242\236\275\332\307g\273\321\352\034=\234U%=VZ\356\274n\024z=\370$\226=/O\266\274%Q\363\275\367\266\270;<xT\275BXv\274\327\tD\273zG\325\2746\033\254=.p<<\006=&= \210\210\274\010\030\261=\374(\035\274\223p\243\274\223\343\202\274V\201\226\274)\322y\274\223\222\262\274\346\300\236=\265\224\276<u\350\353\273\310#\010\274<\371\234=\264\033*\274\016x\215\274w\024\214\274T\307h\275\2257\232\274\035\342\267<\355\010\227\274\024\300n=\232(\244;\241\240\322\274J{\322\274q\375\016\275\327\214\000=\351\341Y\273M\021\030\273UME\275f\355\236:\243o\037=]g\213=\t\033\'\275N\376,=\325\332\342;\211L\013=]\230\367<\\\306\014\275>E\234\275.\256X=\261\207\302<\237N0=\t\246\240\274\371\r\377\274\361G\361;\333\354\263<,S8=y\024\2238\356\":\275\302b\261=?f\236;\276\345\003<\021\014\022=\013\237\016\275\2149\321;KJ\023=T\312d=^\365Q=1\321\342<k\231\260=\223\304\363;\271+19\230S\204\273\275M8<Z&\213=O\321\241;\006\202\273\273\207\2608\275\344\375[;g\301\017\275`\035\213\274\266\310\005<\256\361>\275Z\254\006\275m\274\275<Jt\033=\005\340\227\274\322\013\204\274\177\331\317\273s\252\304\275\350\266\252=1\014k=X2\316\273\027\365\371\273\020\256-;\250\353\325;\221\310q\275FvP\274\202Q\202=\177K\025=<\376R=2\370.=\013^\026=c\021\006\275\023}\237;\322.\211=\025\201\223<\326\263\234=\343|\214\274\323X\252\274H\021\333\275\336&Z;\263\271\022<g;\366\273\216\377\246<\t\020\303<C\\\274<\265\251\370<\222<y<\373\244@=\335\020p=\2676\235=\332kC<i\213\020=\234\017\246<\330\242n;\002~d:&\265\031; h5=\325\032\230=\345\324>\275\025\016\013\275\363Z\310<\341\214c\275\031\001\212\273P~M\275\301\275\356\2746\027/\275`\373\275=\263\330@<#\345\246\274\220>G=5\224J=\375\013\375;\017SV=\233\250T\275N\217\013\275\035\257G\274\3159\"=M9\247\274h\261\303<:\205A\275\264\353\034=\336\351h\275\350\335m\275\373\244\323\272h-\002=0 \201<\361\273\376\273~\323\202\27581J\275\214\322\257\2739\1770=&\252\005\275\017\350w\275J\276\r\275R\275z\275=9\227\275\031\2008\274\346\024\213\275\351b\361;\003$p=\203\023\325\275_\331\220;#\323R\275\206@\311\274QD|\274M\337v=v@R\275[\236\307\275\277X\201=\277\033\223=\215\354\023;H\277\005\275\325Y_\275\r\020\227<\034\276\204=\262\246\276<\330\331\263=o\024e\275\304K.\275\345tF=r\014\007\275\001\243\224\275\376\202F=O\345\033=\200u\322<\000\300w\275\332\347\220=\302\371\013;\2158z=C\206D=\263\271\206<\264\3645<2\337\253<W =>\212\231w;\244\277u=\205\002#\275\317Hv\274\037\232\004\275\351w\336\274\276\210&\275h\235.=`s{=\3234\t\275\223\254\203=\214\261\013\273L\311p\275\027\260\260<\305\367d\275M\017\210<f\022&=\214\265P=\343\017\001\274.\025\375\272\242\266\221< \031B\273)\333\027\274\307W9=\266Z\010<\322\022\370\274\370\213\322\273\221v\246\273QR[=`\266\242\275\227EK=\3147\200<\352P\344\273\242\364.<\202\032\215<i\217\373<^l4;\270D\213\274\342L\244<\202N\251<\271\354\251\274\375\327\340\273\034\035u:`\224r=a&\016=kg\271;\306\200\023\274+8\362\274\316\317\255<\265\261\324<\242\241\216\274B\246\343\274\327\217\357\274\347\320u;l5r\273\211\354\320\275N2J\275-hw=\201k2\275\246\272\025\275\314D\221<\000B\334\275X\252\350<4-!<\223\023\310=\313\341\257<\231\232:\275\207$\240<\373\375\242;\362\027\023\275f\364\r9\243\205\037\275Iy\345<\n\253y\275\023\331\324=\003\364\301<\235\300\"\275\327\207.=\373\310N\275\020\327&=\300\240\332\274\203\274\207\274\302}Z\274)\036\303\275t\032R\2754\321\370\274\232\226\\\275\343\266:\274\363\241Q\2759\235\367\272\3471\313:O+\372<6I\301<\'J19,\030\235\275\376#\370\273\346\240\371<\245\3779\275\317d\006\275\362\240\351<\210\233\202=\350\275\r\276h\"\'\274;\363\262<,bc\275\014L$=\335\002\2529\205%\013=\010\366\024\275\264\325\367:\200q$\275\370B0\275\206\3570=\300\030\326\275\345\240\331\274\300\252b\275\355\375\274=\332G\326<\237\213\020=$R\351<\000\344\004>\2423E\2756\313\260=\320S\355<\207\357J=\352\034\010\275\302\311\022\273s&\001\275\3604\266<\342Nh=\37048\275\237h\252=\302#-;R\020\n=oe;;\310k\221\272q\030\025=\363|X\274\276\310\255\274G\302\220=\362\356\357\2735\025\330\274BK1=\325\331\030=]\234\030=N\215\212<:G\231\274\267\370\230=\324gc\274+\rg=X\327\203\274\331\"\221=L\356\353<\376\316\202<\274\373\341\274\254b3<\026{\322<t\301h\272&\222\257=\"#A=z\271\356\274\262\363O\274\025\021\302\274.\002K\2748\336\201\2743Ey<\201`\021\275nQ\027\275\350\325\355<d\016\310<\307\272\342\274\265X\217<96*\273M\010\'=\375\216\202\273J\216\210\275h!@\2738O8<A\235\327<]S\256\273Z~[={ O\273\222\276n\275\220aY<Of\274<\244!\212=]\237\262\275\246\025*\275:e`=\335\302\234:\305\377.=\336fO=V>\212=H9\017=\344\246\242\2750!\331\275\2154>={t(\274?\364\311\274l\206c=PS\203\275\177\250\351\273\310\\\275<\246\250\337\274\3173z\274\371\231\313\273\201\207\251\272\024\024\350=\310\314\264\274\373\022\021\275\247\237><Q\254k=HBN\275\r6\305<\323K!=\333n\356<Jf[\275\203\262\204\275\025\222\003;\24339=8\242\267\274+=\220=i\031\223\274D\352\335<\3347?=v\020\020=\356\346\213<\006\310@\275\263\336\023\272\303\373L\274\205\207\370\274\315\367\"<vF\313=\331\n\312= \260\010:\263\227\242<\340\2360=\304\200\001;-\030\215\273\2628g\274\227\273\331<\245ia=\022\306\224\274S\220Z<\2076\225\275\021\020S\274\220\361\200=4:T\274\353\2376\274xEG\275P\261\362<\013\211\204\275\354\212z<Jt\025\275*\007\324\274X\270\364\273\252\367\210\275\224j@\275[8\313<\n:\375<\035\222\234\275\375O\243\273\343\373\300;\021\2539=b\272-\275E\023\257\275\036\337\007\275y\355?\274\032`\214;D\021\225<\031\214\241\271T\247j\275g\031[<\341\375O=\243P\202\275\372\227\270\274\373\270\341\2738T\322=\252pk=Ly\232=[\370\205=HM\331\274\2550\210<\242\351\344\274\274\022\332\274\317x/\274\223\257\372\273\273\005\365<n\017~=\314\222\306\274\342\204\333;\372\255\177\274\270\245\221\275B\323\372\273\027\363\306<C\316K=!\252\033\274\242\010\032=\217T\247\274\267\220\002\275\322\343\004=s\232\036\2750\211$=\223\252Y=\271\326V<\233zD=\236\350\245\275\010\001h\273j\234\277\274:\354l\275,\263\315\274\201\3208\274|r\254<\032(B\275\302^5\274\211>\221\275\3353\264<Y\340\201\274&g\220\275\337J\236\273\371\363?<\326\373\022\2734\251\347\274\r\265\254;\037\004\020=~\242}\275\344\232+=\352\320H\275p\336\r<g\273L=\320\352\230<\031\013\376\274\351\000\324=v\254X;\365\255\025\274\214p\321<\004\007$\2753/\225\271 k\017<\356\\\244<m\201\r=7\357\215\275B\256]=\3154\001>\223\236\301<j\270\307\275\233\332\222<\231\355\230<D\366\213\275\253W\034<\361\3510\274\007{\351<0Z\236\275\345E\"\275\237\013>\270\370\215\261\275*\340T=\tJ\315\273/\002\267\273\346\034%\275.\372&=\350}\024=\031\233\363\274\237c\t\275M3\316<g\267m<\320\225\223=\335\340\r<1\3418\275\035\363y;{c\347\274d\306\003;\323\220\222\275\014\230\024\274\233\223\216<\036u\320=x<\353<\222-\361;&\276\313\274!\232\010\275~\334\237<\220\236\316;\326M\350<\361L\252\274!Y\203\275\261\034\327=t\330\224\273\337\031\373\274K\232\335\274\325*\037<\014\203\006=\252\200==,\270\336<\260;\250\273\334\301C\275\267n\017=\264\276\207=\010 \330\275lxH\275<E\262:\253\357\220=\365\t\031=\2202\236\274\336\376\276=\365\t\247;<5~=1\307\021\274y \317;be\233\274\\\212\330<_4\226;\013$\311<\257?\223\274\222\340\242=Q>\332\274\260d@=\235\362\275=P(\244=x\372\204<\217cA\275\001$c\274\257\251/\274\332\230I\274\324X\006\274\324\002\340\273\232\300\021\275/\305\005<\216\241\236\275\260\301\232<\374\205f\275[#\203;\033\215\231<8\361\026\275\374P\255\274Wv\260\274\322\206M=\r\033f\275\252\252\007;\334v\226\267>\235\255<ED\245<\361\317\233\275<l\315\2742\2168=\246\274e<\014\220N\275\271D\030=\362q\234<\2730\235=\2039\240\275\366\241\'\274p\016\203=\224\236X;\372h\033\275\304^n<u\307\321\274L\250\001=\321\3546=\247\231\002\275\323\215\203\274p\235\027\275\003rV\275s\370\203\274g\247 \275\024)\251\275\250\357\201\275\353\246H\274\204/\227\274\022(\220<\322\r\337\275\222\313\252<\027ax;\237\177\235\274R#.\274\214 \227<\267\361+9\030\371\033<>H\003\275S\213\016;i\263\241=U\006\375\274\330\363\377<\337\200\024\275\304\310\222\274L\266\276\275\035\240\351\275{\234X\275\267\351\221:\005S\351\271\233#T=\334\033\225<\030qN=\335\026\177<*k!=\025E\245:B\\*=\"9\035\275\010\367\213=p\223\245=K\307\334<\315s\374\275;\315q\275\263\342\262\274\204J\252<:b\306<\255\013\005:\374\347W\275[\301\201<\2324\037\274c\246\346<\336\361;<1\201\301<\001L\331\274C\227f<\367\300\314\274\377*\014<\031\313\311<\277\374\371\274\350\307\275\274\212\303\324<\026\016G\275\277\341k\275p\233\254<V\004q=h\374-\274E%\010\275\034\2268\275\n\365\037<\370\367\036\274\017\372m\275JJ]\275B\202\204\272\300\222\215\275\362\210\t=Gf\223\275)p\376:\023\365p\275\\?\214=9\037\324<\305\210;\275\215\300\237\275f{\263=\200\177x\274\004\365.=\337\004\355\272&\341\260\273Y\362%\271#IS\275\\\\{=5z\261\274\350.0;\310\227+\274lj,<-8\324\274UBx\274\000\030\203\275\033\336x\2739\202\027\275W\356\342;\257G\2119\023\365\246<\331\363r=\324\3143\274\265\222\313\275\322\220I=\022\332\330\275\333\314\236<\032\003\213;-\315\207\275\007q\225\275\206\202M\275\203B5\275\244\014\373<\347a6=\336\326\202\274\316\272\000<\300\306\001=\271\267,=\237\"[<_r\027=\035UO=^\312\020\275\326\276X\274U\375\213;\370\362+\275\306\211\"=\330<\030\275py\232\272\366 Q\274\315@\343:\005\343\300=70/<\333\035\037\274D\300\201<\362(\332=\2002\243\275\2424\023=?\014\021=\362\271O\275ZF,=5\300\002\275\324\313\373:\211\353@<Hx\033=\335\367\035;\211r\331\2756\241\036=\243\243\214\274\361\237\021\274~R\333\274.\016\325\273PR\016=\3365\023\275\202\023\003\274\200\253;=\251>\337\275c\304Y=\271\255\017\275\2502\305\274-)\302\275\360\033Z=\201\261R\275\n\316\007=\232\365\035\275|z\233=@\372{\2744\351\202\274\212-\005\275\273s\n\275\226\214\014=\223\345\351<\005\3756\274bk\017=>\031<\275\3354\003\273\326\270\313\274\233\303e<\253\334^=\237\303\311<<K\2378C\212t\274^\352\313<\031\310\361<Q[\031< \017\"\275\2270\241\275\221(\214<\267\3351=\276a\300<\031\203\226=8\212\004\275v?\347\274\312\006^=n\365&\275\020\346\246= \372\211=i\2622\275+\376\314<G\200\212:\234c$=\357\223\260\274\035\223\230<\345:\207=R\342\000\275,\\\212<\341\372o=Zv\204\275b\336\024=`\337\311<\3279\370\274/\037\201\274\034\307\222<\177\354\200=\305\300\274=&\344\272\274\226\030\340\274v\224\001=t\275~<\"<1\275J\373B\274\241l\003\275\261\352\202\273\n\263\321;?||\274\201\3636=uYK\275$\262\022:\340\242\024=w\346o:\022\363\367<\314_9=\026\316P= \220\233\274\300\r8\274/)E=\177\335\226<X\220i\275R]\315<V4\222\275\256\3374=X\346\263\274\361\255\005=\007\337o=\025c\213:\270\014\213\275\267\r\203\274\322\220\024\2733[v=,\304\257\274n\032\275<X\246\017\275\212\006\230<4\035\375\271$\005$=\364\202\004<38b\275\177;0\275\013?^\274\377Y\351<UC\224=\245\350\343\274\0027 \275!\314\377\274\276\276\004>\203\231\214=37\220<\310\243\263<\370\325,\275\230\356#=w\215a\274\322}\002\275\303\036\024\275\013\340\007=\250\t\216\275\301\202T<t\034)\275`.\367;\214N\006\275\245r\314\275\030\361]=6\335\343\274\260`\253\275\245\226\223=\2242\370<\007\264\002<]<\210=\010\301\032<\300\220R\2749\032\264<\335E\016<\367\217\370<\317[\022\276\3403\227=\\:\233=.\303\340\274e\361\013=$z\351\275\026\026\305<9\357\264<E\313|\275\311\024#\274\344(\271\274\250B\\\274Dw\356\273%g`\275\323\\\007\275\035:$=\254\021\336<\0254\340<\360\004\003\274\031\230\243=\2613a<\314\003^\274\031\t5\275\275\006\353<OaY\274\205\347\330<\374\205#\274\364\342\250\275\221^\336\274\301\365\303<\037\224\243\275\036\346\210\274\244X\347<\27038=\224\345\337=\222\253\331\274\356\333R<\036\014\002=\217U@\275\367\375\026\275zH@=\263\016\245\275\260\3440<m\032a\274\030\021\201\275\277!4\274n\357\216<\264\036J=\246Mt\275\016\0230\273\001gD;\235[\027=\r+[\275\005G\322\273\260\305Y=\311xp=,\035B\274\260J\212\273\023\343\206\275\0107q<\307\303\204\275\362\207\r\274\377\372\322\274/\206\\=|\'\210\274\001TA\275\362\036\022\275\213\326\210\275^\251\205=\357\324\370<)\220q\275\223\3130={\2721:oY\215=I\347\230=\242\204\330\274\314O^=\263)z=XG5=\027]\223\275\304\250\376<\354\213\207\274\351\036\025=$E\016=\2125\025=H\246\240\273L<E=U\240\231\275\205\210r\275\313v\252<\273\032\274\274\304Kp\274\204\256\257\274t\300\032\275t\315\202<\340\203\251\274\337\3528=\223\305\370<\350O\255\272\010LL=^\261\207\275\262NC\275\231W@\275\207\037=\275({_\275\204I\201\274&\345d;<j\254=Zo\260\275[\226\354\273\365\257\311\274\035\303\016\2703\254\235\273\360\260\344<\202\231p\275\010\001H=\265\2339<\211\375\006=+@\001\275\242\355J=/\006\326<d\312Y\275x\363s=\177\0331\275\353\243\202= \037\007\275u\345\357=\366dB=\2632 =\304\210\n=Z\310D=\244d\205\275\370\271\343<\313\302\342<\022\256\337\274\004\332\007\275\363Y\204\275\350\010\377\274E\323,=\216\373\270\274\343\263\036=\234i\254\274\334\362R\274\037\035 <5\3259\275\006L\370\274H\333R\275\242\362:<\305\025\313=_\207\030\275\006+}=k\375\225=e5C\275v\315*=\220\212\031;\036/\301<\312my=w\034\252\273\366\261\005\275\333\333\374<\027\365`:hS\270=\255;\240<Fz\336=\311\301\010=\204\033\022\275\336\344\276\272\254\330\305\273Zh\004=,!\241<;n5\275@6\212=\334Iz=f\025*<H\215\333;\277\350I<\257J\364\274\267\336\026=h\202\267<\276f\243<\335(\254;;M\241\274@\315><\300[\360\274\215\005y=\206\341\016=G7I<\"\205\227;%7\237<\356\010\277\275\026\243|\272\220\375\366<L\334(\274\326\3743\275\317G\332<\020\361\340<}x\204\273\350:\334\274#\340\212\274(\372\233<\242`\271<\276\0268\274\202\265\t\275\341H\"\274\330\026\367\274\320\241\242<+\'H\274\240\232\224\270\302\211Y\274\344\254\360<\177*b<\204\336)=Y\211\342\274_^T<SqL=\241o\375<\003\377\004\275\036jW=\335\252\003=i\272\004=\247\034w\273\221y\333<\332\220\325\2755\000\211\274\010\357t<\030\3175<\030c\307<\274\034\212<Rm\271\267\272\272\374:\360)\257=\031N\232\275\377\243\236:\302x1\275%\002\234<\246B\007\275\373\321\037\274/\234L=\313\245\223==\316\252\274\336\257\222\274\365\312\003\2759\014\003\275\360\351\252<K\361p\274\212\204v=\264\010\325\275\201J\247\275\006\242\306\275c\225R=%\206\211\275Y\356c\275\253\030\202\275\277<|=\2660 \275w\n\313\274\367\356>\2754T\007=\0208\016=\347;\020=\254\250/\275\240\314V\275G\227\246<\240l+=\277\326j\272l\324X\275`\360\243<\252\3327;\276\370\206=%&\212\274\204l\217\274}\355\037\275d\231\345\273\016\335\001=\026\023\253\274(\202\246;^\375\204:\216Q \275%\223\253<\022\246\014\275\372\252t\275\177\222\370<\003\335\201;\337\022\'<\306}1=\352+3\273\326m\210\274\361|g\275\274!\250:b\370\024=oZ\322<i\220\217\273\322\363\332\274_\'\326\273\0336\200:tU\230\275\343&N\275\301\362\245;\005c\333<\374\347\323<\261gl\275_\223<=\350b\344<Nf8\275w\212\223;\372)\213=[\322-<\2509\372\274\242\330\330\270+\242\322;\026\347\224\274E(\331;d\024.\275\340f\252=b\323\210=a\035r=%\312\366<b\030\234=\016\255\202\275*\214\262\274\370d\324\2745\037-\273\267\262\023\274\341\022y\274/\315\244=\202|;;\355\251\005\274\324\360Z\275~\370\243=<\204\237=]\312\333\274\261\360X<\tP\007\275\327x2\275\224K\373;-ny\272B\214\210\274\"\277s\274o?\305\273\367\367\340<\200T`=I\210`\275(\312\353<6\275\231\274i\024\275\275Z\031D\275\256\020\245=\'\341+\275\'`,=\031\006\221<\014\235\355\274\345\376\221;\335\315\271\274A\232+=\204\215\204\274u[p=\3242\023\275\345\325\327\2743\334\006;\035\016\373\272OdW=\200\211\355\274~B\252\274\240\330\220\275i%\331\275\320F\306\273L\237\200=\206\276\375<k\034\347<@\225i=W\230\365<\364t{\275\343\203a<<\261\266<S\231a=C\002\023=(X\226\274i\370\003\275\nb\242\274\314\343=\274\002NG\274\303\376\363<\343\264\233\275b\375\345\274\230g\274\275Q\245B=\276\207\224\274\201\222\035\275\034\260)\274p\205\'\275\220\365==\206\315\323\274\373\376\r\275{f\226\274.\r\276\274t\337^<\203\035&=my\216\275*\356\357=\240)8\275\220\013\007<a\n2\275DL\206=B\002{;=%\264<\331\202\333\274\344\274,\274\215\256\274=~3\250<\220S\202\275\226h\253=\210\263==\340\371\233<\360\013\324;\022x\033\275\025\017l\275\313\230\334<\245\320\312=p\276o;\261\315\001=\177\204\201<\275\217p<\032?{\275\3038\215\274\304.\243<\265G\003\275\347\203f\275\321~\222=\261\273;=\375\'\340\274\t<\214=\257\3523;\n\330\211<\177\241\300\275d\177\252=\252A(\275\247\222\265\273\'\217\r< O_\275\245\321\025=\023\263\037=\211\303\037\275\243\2472<\200\337\353\274\324?{=#f/=\t)\277\275s\226\231\273\337\033g=^\020[\273\331\020\002\275\315{\200<\250\270\001=2W\220=\202\256@=\304o\303\275D\230M\275\352q\030\275Y\364\243=p\353.\274K\355\257<A-w<w\246(=\220\354\320;\270\312K\275\001\326\"=\210\010\305\275_F\225\275\230E\355\274G\336C=.}\271<\025\016\322<S\t~\275\375Jc\275\214x\356;\234\363a\275\355\326\236<^\225!=\313\232\267=q\352t=\316i\265=\346\024$<\2647\256\273\377\334[\275#\376\004>Z\363\200<\204\264U=I0\211\270\310\337\'\275\000\224-=\030\177L\274\0106\020\274+\272\223\2738\311\220\274\323\317\204=\032\333\262:\336o\002\275\347\370\270\274\'\262#=8\262\200=\010\312\271\273\223X\277<\003\344\255=\372\263;\274l\021\274\274o\r%\275(w^\275\301\2040\275\275\307q\275\363,\321=\264\004\336<\2321\027=}\236V=/\237\n\275\rH\230<N\235\027=\327\244\"\275\245\304\331\273?\215\006\2758\317\275\270\256\250\270<m\217\337\275*\027\225;7\301f;\222\227w;\355\372\331<Q\326\313\272\370\326\234\273\347\215\317\275p\320\305<t\243\333\275\344\033\353<\245/\341<\377V!=\323\036\273=\216\260\177<2\240\254\275v\215\202\274\330\344M\275\352\346G\275\021\024\032=\331\314&\274\354\016r\275|\240\353\2727t\004:\240\021\261\274\226\0177\275G\304F\275\366S\034=[\217,<3\320\005\275\375\350\003=#\033\323\274\240\317-<\330[\214\273\2168\034\274\260rH\274a\363\354=`W\035\275\035\007\226<\3117f=\374O\365<\002u\371<\001\207\003>eeB\275\360\0207=\210W\304\274\232\231g=J\032&;\365\333\263\274\240\255+=}Cx\274\307\231u=\343\303\240=v\300!=\355\360\216<aH6=\035\373\253<\021O\232<\340\"\000\275p\207\242=g\nc<\320\'7\274X\363\302\274\004\034\265<\245m\353\272f\303\217\274\251\331\274=\r\373\026=~\335\210\274G\017\337\273y\254\207\274\201\331\023<|\333\r<b\244\327\274k\241\375<\241\264\356;\226\002\366<0m\031\275\331h\335\273\340\273\014=\274eW=\204)\365\274\206\344`\275\251t#\274\307\230\230=\263\034&\272\245\335\267<\304\361c\273\207z\233<\357\367\275\274\373*k\2744\207\225=3\031n\275\276-;<\223\031\202\274a`j\272\251\211\000=2\177;\275\034\2126\274>6\005\275\021Q\226=\005\343\200\274W\377\223<\352{\031:\337\377=<\322\372\256\275\035\345\277<v\341\020=r\377>\275+\276\004\275Y\024\177<k5G\275B\014\216<\2702:<\357\363l\275\223@b\274\266\304\033=[\307\330\274\035\322\024\275X*\245=\265\242N=\353\204\225<\254\221%\275^\330\300<a\033><\371_i\275\264\234\020\274w\320a<yQT\275\276r\203\275\003k\212\274\253\217\335=D\323%=\206\306[\275\312g\256\273\006L[=$.\363\274\000\365}\274\274\031V\275\243\344\013\2756c\215<\237\225\264\274\0166^=\221\310h\275\251\313\023\273B\211\034\275;\2440\275Ms4<r\335\346\272\030\301\206=\r\204\025\275\335\027,=\336 3\275;\255\361\274\\\313\216<T\032\006=\020\223u;$\030,=`e\240;\315\363\005\275\247\246\227\275\017\255\202\274`\260N\273\t\254j<\371D \274\364(\327<=\206\013=\321aL=`\204\210<\315@\326<\t\374\202\274\356\322\314=,)\230\275\302\027\205\275X#\260\273\315\267\253=\353\na=D\311\364<\222\2727\275\021B\356\274\257\352\312\274\377\237b\275$}s<Cy\221=\244\270\322<y\3360\275m\366\221<)-|\275J\352\016\275\035\235\354<o\3669=\\\023\235<\365\014\202\274o\303K\274)\225|=\201Mq=\360G\024=\200X>\275\324\263k;\352\216&\275\277\314\337\274\303y\324<<\230\212\272\210\261N\273\273\001\337<\271\324\031\2755\024\"=FW6=rAB=1\340\034\274\r1L\274\3266\242\274\277\227\245<\'\022\021=\335\231\316\274~\332 \275e/\\=\224\002 =\211py\275\373=\022\275\2079Y=%\030\262\275\253\371n=\177p5;<\202\257\275v2\210=q:\320<6W\335\274\215_y\275\240!\031=\273\262\313<\362\252(;, \275\273\232f\204=F\300\000\275\300\2135\2746\027\253<JC#<_\024F\274lE\314<\256-\215\275\344TQ\273\016\214j<\372\343\324\273\315\034>\274\002\026\022\275w\354\202<\230s\360\273\026\013c\274\0040==TN\315<]\260%=\3327_=\026@+<\"\355\266=\241Q\003<\010\224\241\273\226\254\364<\273\347\254=\302\272B=p\013\314\274\033\266\311\273-\300\306<XU\274:\356]\317\274e\333\210=u$\272;N\352\230\275\233\332S\275\340\252\307<\326l{\275\022\237\007\2746\240\212;#\303\341\274\230\021\347<`\207\235<\252\\2<\304\0371=Y\356\324<\035\220\215\275\207Om=q\234G;\014\017W;Q\177\242<m\217\027\275\304\300\313\272\317z\213=\306r\264\274B\304\333=DW\255<\006-[\273X\371{\274X;\257<%\207\220\275f\\\234\271jZr\273\344\301\033=\317\226\264=\210,\037<\311}h\275\320\361\262<\333\023p=*5W\274?7\343=C\316|=b\356\030=\311j>=;_{<\306\207\327<\200\3023=\263n~\272\300\355\226=\302#\220\274\017\243\230=\234(3=\345\277\234\275l\321\261\275\370\261\234\275\325o\260=\333H\357\274\032\005Y<\356\364\010\275\2451\374<\241\300\310=6D\230<\3576U\273\335JP9\001\'\217\275\372\374D\275\361\353\022\275\370\336X\274\346\262\005\275\2731P\274Q\207\242<F\210)\275\277,#<H\346\255=\245T\026<h\215\000=\262\265\007=\273\362 \274\026d\211\273\340Ee<\2173\230\275\200\rv\274\"n29(\304\255\273\313Z\342\274\231\252\035\275@\256\001=\301\342\034\275\237\345\023;E\252\010=\212\017\257<\252\211\005=\374\346\000=\201\0308=m\2076=p\241}\274o\316\026\274\271S\261\275\263\254/<`\035\177=\tr{\275\375\232\345<)\226\207<N\307:\274\002\267\"\274\262\217\206\275qv\'\275Le\215;l\n\266=+Ol\275\327.\261=9\n\276\274\030i\276\275\221<\2219\230\2018=|\240\017\275\242;\227=\313\342\333<\207\\\023\275\276\222\300=\340Ai\274\223\256-=\031{\025\275<\200h\275\2040\243\275\224T\347\274\312!\233=\360\316\347\275\220\305\005=\001\345\001\275\021\255\313\274\255\255\353\273\345\016\341\273\275\347\257=DJ\345<\312x)<R\231\245\273-\022\253\275\302\273\366<H\210\215=\016\242\033\275{(\010\276k\002\227\274\203v\325; \234-=g\377\245=\007\316\220\275\236\225S=\202F\002\275\366m/\274\365\275\254\274\205!\205;\266>\314\275\030\013\367\274\232\3639=E\r@\275\315\225<\272\256\323\234<\2154\333<\346\271\361<f\022$\275\222T\264;\330\030j;\303\336O8b\231\302\2741\214U\274\220Q\337\274\345z\271;tI!<\262\217\213\275\006\300e\275N\302\324<\352XF\275\275\002a\275E\240\027\273\224\t\300<\345M\212<\035\251E<P\222\236<\277\353\326<\271\314a\275\\\232\241<qY\236=\022\237\265\274\035\034\017\275bkI\275\237\226\204\272\336\307J\275\001)\374;\024\265f\2753\261*\2752z\022\275\3760T\275+Z\225\275S\tn\275%\212}\273p\347\243\275\313n1\275\216}\365;\241)\370\274\263\246\327\274)\257e=\033_\224\274&k\305<>yo;&\211\004=\017\025&\273\344k\214=\253\3007<\310\200\'=\003d\230\275\006\212\225\274#\211\020=c\255\033=\230/\003\275\346:\256\274\021l\202=\016\317\013\275f\3702\274\026`#\275n\006o=\271\202\205\274h\035\330;\273\327q=\277\313F=\023W\227=~\200\254=\205\021\242=\337\006\223=\2455\007<\356\207\226\275\343.8=b\206W\274\332\325G<P\326\324=\274\355\203=\034\246}<\014yy\275\255\226\217=t\266\005=\033\007\265\275\246i\224\274\351p\t\275\222Xs=\246\366\352<\267\317|\274\2267\231\275&\333\032=\347\315\320\2744u\220<z\372\000\275z\213\311\274\375\332\230=\356\231.\275\323?k<-\010\204\275\335a\376<\2517\033\275l\203\213\275\353(\341\274\236\255\323:S\333\347;\021\257\300\274\215{\200\274B\220\254=\212\230\217=\276\337\206<\3308\273=8\370\241<\335\202:=\336\000G=\361U\033\275\244\307\262\274y\002\342;\315N\336<\210\355\373<\245We=K\026W\275\232\316\n=4G\221<h\341\360\2748F\347<\036I;\275T\250]<#\335\002=\216\314A;%\3429=/\216\247<\265\202\220\2741$0<8}.=|Y\234;\026\260\261\275E/\203=\365&\373\2746\330\216==\340\367\274\270\312\302\274\\q\037\275\234\323F\275\014\301k\275\\\310c\275\243\352\215<F\036\371<t2\'\275\224\254\257;~L:=\276\302\300\273*\306\216\275\237)\273;<\261\357\274\276I\203<\254\314\354\273\274\201\351\275LI\344<\250s`=\363\342\211\275\036\r\227\274\343\244{=!\244;\275\035\337\265=l\')=\320\335\300\274\036\200\215\275m\225\222=\263\227\313;\231I\240;\036Lv;\365$\324<\362\022\273\274\320(\n\275x\201\016\272\367\3110<N\301\t\275\244Az<2=\003=\177\305\264\273#\211\322<\242\003\312\275\023\022\326;\211\3258=\016%\262<8\240g\274\204\'|\272\244sz\275\003\371!\274\314\366i\274\334\366M\275,\335\314:\355\030\023\274\315\306\303\275\327g\346;\243\023\227<1\262\217=\357\367\372;\030\307z\274\364\002Q\275\030\340G\275\013*\231=\312 x<\0372\177\272\236\023\005=\266\037\"\275\347\301\215=5wF<\225V\245= \274\005\275\262,\245<\363\217\215\275\211\227\274=\236\334\034\275v)\232<\262.\326;\275\\\257<\024?\257\274R\354\227<e\034<\275\014\261\232\274\025k\034=\3757\274=(\3057\274p\341\334\275\361\220W=\260\022\r\275f\231\204\275\337\331\036\274Fg\366\274\213\247\254<\322L\016=\274\377B=\036\227\337\274\035\030\230<n\346Q\275\346^(=g\245\002<QYn=H\260\027=\252\370\021=\032\254\333\274+\333\'\275\231\350C=5\201V\275\267\352\032=\365\224\t=\207l\317<\333\006B\275\026\233?<{\347q\274\345\262\310=\2447\304<\356`6\274\334\207\207\274^T\037=$\215\340\274\277\007\347\275ThZ=\216\310\032<\267\374\220\275\261\303\240<\247M>=QU\027<\"cJ<\374\254\365<\'\316\257\273\343P)=\371\3162\2757\256D=\264\316w\274P\274\014\275}\214\207<\237\220\006\274@_\023\2753\356\\<\302\331\t\275jh\0059\026\2146\274\362\254\034=\370\002N<\302\340\230<T^\017\2750\332\000=\275\217\033\275\326\205\332\274T\t\010\276\364\014\013<3\242\216=vm\261\274I\257\206\274x\256\016=\'\264\357\274\345\261)=\353\352L\275k\213\003=\330\213\t=V\022\241\275\276\016q<\217\\r<BS\036<\342a\314\274\255\320/=*4\350\274\025-\032\275%\005b<\250\0307\275\372\023\327<\257\243$\275\301\376=\275\321\273\241;\347\036\336<\267\017\373;>Xr\273\351\016\217=\033\372\253\274\246Uv<\023\232\273</CF<5,Y\275\331I@\275\007s4<m\242\305<\261\332\034=!\014\021<\226,\216;\302\230\034\273N-\313<\021d\244\274G>\230<\"UA<\361j\211\275lN\357;\343\350\034\275\n\217\021=\004\223\254\275B\205i<\224t\360<X\255\367\274\346k\267<\306\017\225=\230\353}\275\223\226\032=]\302\204\275?\304\232\274\362\371\235=\305vf\275\261\2160=w\372\235\275\343\340\237\275\220\007J\273\371j\213\275\303\222\264\274\226\244\273\273\345N\204<E\354#=<\255\310\274\001\250|\274\024\314|=\342\035\255\274\027\230F\2751\"\005=V\356D\275\247 c<c_n</j\232=Ip\377<\022G\215<\346a\252\275\275G\217=\325C\357;>\350\233<\342\004\336<\n\022\t=\336?\007\275\255\325\233;\036i\002=\037\304\t\275(\243\324\274\007_F;2\203\177\274$\275E;\2041\243;\257\t\307<G]T=\014P7\275\301\030^=\021Jw\275/\3676\274\025\030\337<\312\227H=\334\357\331<\265\311\000=&I\200=\340\372o=\264(G\275Wh\252\274\321\023=\275\354]\004\274v\177\301\275\201\030=\275\241\263j\275\\\371:=\222v\016=H\274@\274\267\023U\2754[\037;\033\326\204<4\356k\275\323\004Q<\2225\235\274\320\353\206\273e\230\021\273\344\351\002\275\362\364R=@\355A\275\004L\037=\032\256e=\313\342\006\275\004\005\347<*\202\327:\375\002i=?\3066\275i8\000=\227C\025\275J=C\275\303\006S\275\234\356\t=\265\353\346\274+|1<l\306\310=\360Y\277\274\005--\271\024d\341<G\267\347;6\347[\275&3\256\274\222oc=q\226\037\275\032\000u<=,\272<\255b:\275\017\036\275\275~\367W\272\274\334\202<\267o\223\274\022\3351=\353\235z:\266\007\372;~\321j\275c\337\371<\021K\350\274\272\213\210\275a\231%\275\344{-\275\270r*\274\014\204\231\274F\247c\274\227\314\261=Y\217}=\2355\304=*\032E\275\227\360\025\275\357H\336;\233\250\274<\207\343\n\274\245\311\225<\200\311\233\275\343f\200=\253\217\350\273/\t\026=\201&Q<\352\236\037=\330\321\213;\267Ln=\302\237(\275\234\003\340\274\346\323\204=\241\3721=\355\272Y\273W8]\275\342\360p=\2363\305\275\220T\025=\0333Z\274N\343%\275\260\242\010=\254l\347\274\365$&=\353k\215=&\036\225\274\007\277\265=\006\210)\275\213{\275<\235\340\235\275r\255\211<\336\244O=\321\032V:\020|\211<\264\361C=\233\247\320=\300Q\257\271&\035(<\235\274d\273\356\360\204=vX\264<\024\020\373=s/\331={\203\023\274\366\272\213\275h\201\023;k\341\037=\344?\264\275r\3270\274\000\270\355\274p\221\014\275;\027~=5\013\010\275IpO<`\377\367\274*.A=\225\027\204\275\202{\036\275\227u\361<\3227\227\273\303\255\016=D\376\323\274\035\020\030\275\241\016\032\274\255ee\274\333\216\225\274\254\362\241\274r\001\324\273\223\374\216\274\205\262\261=)\312*<\211\377\305\274\037\316\266\2756\327\025;\313\3071\275s\265\"\275\014\000<\275\231\004\026\274\207\2579\275\227\036\005\275\002\356!\275\202\037\272<\342\031 \275\262\225\336\274Z&\241<\251\331\016\274\321\013(=\346\274\333\274L\037\n=\257\006.=9\361\r\275R\303\262=O\273\271\274m`N=\017\316\207\274\302\226\212\275\242v\033\275\264\302,=\037\206\212=\201\021\241\274\252\025\230:\23019\275\255\244i\275O\336\275;]\010\315=\006\037-=\004+\207=\r\014\271=I\274\274;N\021\346\275N\031v<>\343v\272\021\374\006:\204-X\275\271\370\220<I:(<S\220B;\020TO=TE\234\274S\245\332\275\013\034\257\275\214\266\351\274\013\344\355\274\256\202\036\276xr\t\273\257\271\205;\3375\225;s\261\023\274G\312\333<\257Q\326=\204s$\274\271\227\256\274L\234\231=\001\327\226=\334p\320;2:n=\275\n\325\274O\375\211\275\211\335B\267+\341\335<5e\207<\245\320X\275\206\341\236\272\317\303w\274&y\t\275r\264\263\274\355@G\275Wu\211<\236\034\255\274\376\314\004\274i\323\273\273\302\242,\275\221\344\272;\237\231\353<\'\223\020>\230\177\337\273\262\'\351\274\306\243R\275\320\327\224:d\345\315;-?\206\274\033\237\214<h\373\267\274\312\017\207\275\377\336\303=\377c\223;\010iF=\307!\314;i\312e=/\013\\\275\344\n\225<\275\301a\273\333\366\235\274\214W\251<\215\362\004\275?\3150=\255\313b\273\215\347\302=\324\020\244=\033\340\247:\260\375\250=n\177\021=\260\205\006\275\002&\225\2743\203\233=A\252w\275\253\256A\275\313o\014=pq\224=`\224\204=\005,\\=)\314\342\275\016\031\t\275\271\322<=\342QQ\274r^k=\307z\317<\025x\013=\261Q\350\274X\371\037\274\3255\235\2733\266C\275\331T=\274\301n(:Sw\224=8\367\261<;Yq;{F\207\274B}t<]\343>;\007\001\320=\324\252C;1\351\252\275@#\300\274r\034$\275\237Y2\275\272\363A=\024]%\275\273Q\222=^\333N<\354}*;\277VJ\275\030\367\374\274\010]\224\275\267e`=\277#\320<\264\214\313\275\2677,=o\023\246<;\\\023\275\202\r\276\274\r\2635\275\254h\275\274\334\323\302\275\256\276}=\r\245\240<0\322\233;\004\275+\275W\240\213<\361M)<\017y\275=\236@\226\274z|\243\274\232V\306\275g\313\225\275\360\300\351\2733,\213\274\032\364r\275\250\252\251\273\245=\326\274l\356\355<~=N\274q`\225<Dsn=\302\235\337=\305\\\234;\324\3505=\201d\277:P\t\033\275Ei\301:9\2773\275\no>\275\2261&=\213D:=\234\010\271\275}\375!\275\234\260\227=}\373\320;\232\013\220<\214\202\306\273l\3550<\352\222\030=TT\231\274J%|=C\000\273<\260v\370\273\247<`\275\207<j\274G)\t=z\023\313<\236z7<\202\217\037\275\372N\331<\215\n]\273\212\321\177\274{\220\326\274\020\201\206=n\230s<\224\031F<\371\366\005<I$g\275\361|\037\275\232\257\235\275\232\306\243;\356\342\200\274l\367M\274Va\372\272\335\247\272\274\375\314u<r\010\325\274\025\364\342\273\2172\352\274|\232\314\2757\023Q\275\252\017`=U\270c\275\035\2745\274\263cg\275\264\037/\274S\363E=\335\206<\275\257\333f=\235n\335=\322\037N=\344\024\177<Q\306_\274\3406\220\274\325*Z\275rDm=\363\314\n\274U\313\375\273\300\245t<\314\277\260\273.\361\016\275\246\334I\274\331\232\304\274V\362\212\274\207\330\337\274_\014u\274\r\210\r\273\365\371T\273\345o\367\274P\206\262<\237\205\307\274\231oY\275?\000O\275\244}\317=\007\377[\275\344\240\230\275(%\255=\t\003\313\274\024\377\223\274\337py\273\324\323(\275\210]\243<\330\346F<B\250\257;\340\035\350\273\2722\262=}`%\275*\377$\275x\201\017;()`\275L\301\324\274YA\235:\n\226\276<\364V\261\275\222z\016=\255\020w\274\375\250\344=\230%,\274\251H\236=\374`\326\274\271\021$\275\277\347\037=T-\200\275_\212\027\275\021\236\013=\200\363C\275M\251u\273\354\254\313<\021d%=T\335\240=\032\202\021=\353\0229<QP\024\275\257\2009\274\323\301R<\373*7=\316Mt<\224\253j=\013\230\341<\313x\234=\214`\226=\234\374\264\275X\345L\274\363\001\261=p\316R=l9\304=4\371\355<\277P\027\275<\016\267\274\240\334\311;\324G\215\274>JK<U\037W<r&\210=\034]\214=\034\355\227\273\214\005k\274D\177s<\376+\r=\332\014Q; ~\240<\344*\306\273\245k\273\274\323\343\337\274\220\236U=\277d \275;-\013=w#\n\274\200\376Q=0\320\030=\357\333\225=m\352\217\275\251-\233\274\323\262\252<T\254\026\274\341\034\r=#\033v<\250g\320:w\226\313\275\353Q\201\273\025Wm;\221b\227\275\003\370&=\002\025\360\272\300\030L=\263 \221\275\376\333;=\212\021w=\207\301\202\275\207\032V\275\206m/=\023\273\264\274\r1{\274c@\330<\246M\201\273\216\265=\275\221*\266\272\302\264y<{D2\273\252\207\331\275\036Z/\275o\202\'<{\004\330<\014\000\025=\214\276\203\274\215^\256\275A\361t\275\204\275G\274qqa=\237\376\177<?W\235\273\001\352\234<26q\275>N\035=\247xP=\310\000\262\275\262\344\036=#W \275e\301\213<\345\236\214=\331\022\r\275\033A5=\211%\332=\\\221\326\274\344\246\016=\357\003\300=l\004<\275t\207\033\275g\345\333\274kr>=I\r\305<\350\200a\275\305/*\275\333|a<\\\"(<\232\033\206\274\323D\020=\332\360\256<\334%3\274\n\270?=Y\021\002<\206Z\177\275J;H\27405\205=\3628G\275\215m =1\213\213\275HQ\217=\330\220\244=H_\211\275}\231\340;\355/\305<v\357\305<\0356j=\240G\207;$\274\347<\322\0310=\200\344\030=M\310\353\274\230F\345<\327\306\363<\004\306\240=\374\232}<\357\005\350<\356\032O=\026|3\271\027\347\312\274\001=f<\023\2730\274\310\371\023\275\200%\317\275\323\240V\275\023\306d=\271\305c\274\001z4\275\006\344\305<\30146\275\177U\272:-q\026=a\365\371<t\234\246\275>\342\236=\273\312\022\275oq\364;\001\236,=\251sA<\005\336\233\274\374\203\230\274H\310\324\274\203\211\022\274$\320l\275\315iB<\314\031\271\274\355\256\275\275\033/:\274\240\336?\275\310\242\312<W\234\252\274-\236t<_E1\275\222~6\275\033\230b\2752\273\264=\361-F;\345\376\377\274\016Q\223\275\036\307e\273=P\033;\360\303\216=r,\354\2740\200O=\263\367\271;\223\365\315<U\033\036=\233\311\310\274\262\235\307\273U\305V\274\\{0\275T\357\t=^\337\037\273\376\261\203=|\000f\274D\271\004<\252%\326<\256\323\372\271\311:\245;!f\200=Y\355\204=I\214\225\275\335U\"\275\033\242\312\275t\207 \275\207\224\212\274\022*\214\275\265\177*=\251\347s\275\211c\027\275\223c\225:\007\016?\275\242Q\355<\215\372>9s\010\263\275\363\022\301\274qR\352;\315\252Y\274\246K\246\2753\032\253\274\207.\320=\365\306\216\274\214\r\216\271{\253}<\"\370\225=}\336\005=\016\232\010=\363k\265<\334\264\n\275\251@c<\217\022t;^\001\023\275;2\233=\361\235\\=\242\222\317\274\377U7\274O\027\237<~\220\031\274\361$\364<\005\340?\274\202\261\206\275\031\376O\275I)8\275\321\207\231\274\361\367\251<F\271\032\275\231\274U=PWD<\020j\224\273\020\0312\275In{=\225\236\244<\206$\240\274\007\313\230<\250\004]\275\236\t\254=\335\020j\275g\'\363\274\377\030~\273\203BC\274\212\2000\275\024\217\002:\256H\234\274\354Q\352\274\314\265\324<\216%\005=U\'m\275\327\001x\274\307\3421\275Y$\272<\257\311E;y\220\354<\334\276\206\274\321lE:\340\201\240\275\023&\023\274Q5\376<\340U\006<H\351\227\274\3237\206\274\361\014\207;\005\254C\274,Q\003=\371\277f;\006\364\310<LM\255<\240p\276=i\006\267<\024@\372\274\000.\031\276\256V1=6T\273<z\272\'=\2155]<\336:\307=\224\272`=C\324\274\274\026\270\001<\312V\320=f\265;<\336\334\226\275\230A\206<?N\245;\270\370\217<\206\310}\275\\\337\001\276\\\273*\274\037\\\212<A\376\230=\ro\023\275v\364\274\274\214\314r<\366\243\221\273M\2578\275\320\242\237\275\367]\006<\275\353\312<1\2348\274\333\010W=\317\364\036=\356f\317<\005\270C\274)\256~\274\244>\373;fa\010\273\331\020)=5\235\366<\302\302\235\274&%\021=\007\027\t\275H\354\264\274\350\376\213\275K\226\364\273\322\233#\274\034\\\263\274\330_\331\274\231\332P<\323\035\t\274\000\312\206\275\341o\001\275\023V\006<\353\030\036=\307k\342<\217\034\217\275\313?\033=\236M\225\275S\275<<4\227\313<6\276x<\374\356\346:\244~6\273S\317\366\274\035I\224=A\256\022\275ox\216\275\224\242(\275PP\223\275L\030f<\207\322\253=N\243\206\275\240\376\332\273u\232/<\241\250z\275g\006\201=\304\273\235\274\014OZ=\214\210}<TL\346<\346\226==,\013\022\275\003\303\226<\301\204!\275h\215\340;\2246\341\273\265~>=b\370\224=\323t)\274\357\224O<4X\230:\213\366\361:\227o^\275\230\273\261<\333\304\241\274\266\372\265<8\260$<\\\205\256\274\344\253\361<\030\\\360\274Z\347\032<w\005\253\274\302\267\270<&\245\322<.\341\031=\311\267\254\274\024\257C=\301\355\333\274\367}\372<\216\340\032\275\207\377I\274\337\270\024=\331$#\275\362g6\273\020t\220;\022\320\256<\270\3300\275ru,\275\317\013\366\274\354\244v\274/\377,\274\204\303&\273\025\336]=\377\203:<\246\220\037\275\021\354\273\275\341\334G\275\234\336B\274\316>\215\275S\370\271<\356\211\324\274j\265\314\275\026\320\217=\220\311\n=u\346b\275\247\226\315\2732?\257\275<\340\255\274&7\351\274\253\"\000\275W\367V\275\004\300\025=\341_\200\274\000m\234\275\234\357\000\275Q Q\275\010_%\275\301G\357\2736\375\315<D\201+;wY\006=\211\030t=\272\343\252\275Z\225\032=\026\021\323\273y\364!=dj\307\274\354[\256\273\031\030\203\273\262\354(=>\n\030\275\352U\302\275\273\202\035<*\364\352<\352\264e<\n*\371\2743\326+\275\034\334\t=O\312\211=\337\266\032=\321V\321\273u\014\266<\375\230~\275\013\010\220<^\246(<\230\021\243\275\360\340\202\273\003\314\372\273Y9\376<\243\177\331=\374i\201=\306\230w=\215\r\202\275\300\263\205=\315\336U=\\\245\216\275\350$$\275\326\256\336\274C\261\007\275TCt\275\264\375\263\273\343\213\237=\302\331\253=\347c\216<\213F\024=\324Q\347;\346\215\177=\260s\340<\325\371\347<\373\212\371=\223\214\204=\257*\343\274>\302g=\225\327\201\275\362OS<\205\260\'<`\266h\275e|}\275R\375,=\200\021\036\275\361\344\206\275l\030\004=\347\324\306=\235\260\001\275\030\360M\275/{X\275\317\333\361\273\304;\330=\202K\222=\202\330&\275\332\327\271=\264\276K=\033\216\206=P<+\275*[*\273\334g\r<\267 \211=\260\\\210\275\003\260L\274-\240w<H\241`\274\271]\327\275Y%\023=*g\023=M\240\221\274t\373 <\233\352\212\274\250\027F\274\354\221\334\2736 \027\275}\355\n<\330A\225=\221Q\250<]\305\030=E\255\010\275\302\222%\275\241\234Y<\344\242\225<\241\322-\273\223\017\"\275\332D\263\274\344\017\360<\266vX=;Fz\275\221K\374<\260\214\005\275\220d\320\275\326\026g\275waf=\013\312\212\275u\005\033=\242\312\207=s\013W\274\321Y\302<\332\330\203;\367\227\261\275B\364\274\274\332\250\323;^Y\010\275\305\270w\275\364\202\213\274\025\030\365\274\370\200:\274\221h\213\274\276o\236\275\375e\"=\211\022\263\273%\267\226\275\301\037{\273\233\202\203=\017p0\273w\315\216\274\375\301\362;8r\t<1|\263\274)F\344;]=\177\274\221cE=\r\215\252:\236\374\2249\376\350\261\274\227\342\036\275\306\221\241\274\240qX\275\266\033\203\274\276\242\025\275\225\346\320\274I\275\275\273\303\\\276\274dD\216=\025=\002=O\000\250\273\257\255\007=\241V\265;?\211\374<\205li\275L\337\267\275\006\303\214\274\201\360\215:\247\240\001=\350\005\346;\315R\347<ai\267<-\335}\275\323\017<\274E\r\354= ]v;\316\331,<3{\222\2752H\201=a\220\211=2\340\253<\217I\023=\037\314R\275\323\024}\275\235\311\032=\270\336\264=\004\334\340<\010\256\034<4\216\276=xl)\275\240\036,=\205\305E\274]T\004<\300\231\221\274\243\363\270:0\032\260\273\t~\261<\217\304#=)\224\262=\006v\356\275\207A\r<\3254\222=\301\r\224;\304\225\231\274\214\222#\274[\272\026<\251\226\235\275\r\"\200=\361WV=\245\333p<\216/\243\275\000\256\317<\036\322\031=\234\304\031<\'\304\031\274\223\rx\274\217\031\237<\210\331Q\275\374\t=\275\334\367\321\274]\337\004\275\013#?\273\323\355\022<\253\265\230=\244\246\320:++}=\216\327L<\321\244\257\274Q\336-<\204O\350\273[\251\264=\260\"_</n/=\301#\357=s\276\303<\334\002\002\275\233R\021\2740\261\026<:/T\275\241s\000\275E\253\035;=Fk;}\276\034\275\0329\316;\2461=\275\007\223\357<j\353\240:\307\001\363<\277\'\270\274;2\212;\031Y\266;=\343q=4V\266=\234\277\202\274\217\037\034=\232\016\223=\245\021\330\274\236XO=3\350\361<<UH<Z\214\256<d\261\220\274!D\013\275\005X\213<\273jf;A\237J\275\340\237\312<#\027\212<\200SE\274Z\326\203\275{H\200\274\007_A<\300P9=$\2135\274\375o}\275_\036E=\270\323\240\273?}1=\336Ts:wz\361;\016~\264\275\335?\017\274\320~:\275\365\213<=\2018\373=9/$=_\241.=\007@\255;\205D3\274\022v@=\324\313\244<V(}<\345\212\211=^\375+=C\315\353\273\221\203\035\274\211\252\272<\240l\255\274;\226q<\313\037\004\275^\311N<\377\010\025=j\205\016<)e~=_\315\322\274b\226\003=\362\'*\274\265;\027=!\216\206\274\177\343\034;UF\276<\014q/\275-\3362\275\205;\325:\225\2034;\235\031\'<\273\371\260\274\226\013\177=\023N\267;\354\322\023\274\257\r\033\275u\221\345\274\210\002*=\036%i=J*X\275mOy=\247\272\304;\003\033}<qX\021\275V\361\024<\226  \275\026\3178\275\226\363\220\275\373\225\342;\037l\354<\274 U;+`/\274\006&\210\274\302\002@<\275I\270\275Y4\336:\320\235\032=\010\315\316\275\310\307\037=\316\332\252<o\0023\275B\006\306\274B\2064\275y\220~;\201\201\273\274\210\300O\275\362)Q\275\370g\n=\t\277\310\272_\371\205\275YO1=\036\034\236=A\035C\275\364\212\360:\314 \030\275\273\261\205=\004\322\242\275\376\210@\275,\320H=Y\216\201;\"\244L\274\0376\351\274ucG=\362\267\235<\177\332\016=\005\374\363<\202>\366=\312L\372\275\315\027<\274\351\243\306\275\377\014\202\274\333\202\310;\340\360^\275\021:\312<\021\356B\275kK\\=e\026\236\275\324\277\231=2\357\376\274\372\350*=\224\311\214\275\315\213\235;;\352\333\274\306\302#<\264\363L=`\363L<\200\360>=2{\216=!\006F;\214wu<GR\372\274\030\230\013\274>9\313\274\310\370\021;d0\277<Zt\033\275\305\202\273=\305\253\230=H\000\002=\004\367X\275\367d\177=\247J\204=9\305 \275\010s\231=\217\232]\275\221%\242;\305\037!\275\370\317\377\274\037\242\336\271\030\033\227<>r\'=\350G\030\275\314\\\020=\036\313\361<>\274\275<\035+\t\275\303\221@\273\270\273\321;\350\267\361\274\257\020\206<v\304\257\275r\323(=\021\273\237\275m\007\274\274\274\302o<j\013B\275e0\307<\200%\200=+\316\225\275\031\343F\275\276\014\035\275=\255c\273)\306\261\274\346\343Q\274\205C\005<\365\252\004<\232\320\"\275)$\004\275@1\n=1\336\217\274\016\307\266\273\225\354\304\274^\234\"\275\2554\007<\377\032\324\274)\217\030\275\014H\235\274\005\200\007>a\352\327<^\207L<\005\360\313<\270\250\221\275\315\340\022=\372\266\025\275\237+{=\305Pf=5\307\352\273\310q\224\275e*\027\275\007q\232\274\326O\002<\266\333\326\274\351S\204\274\253:?\2753\225_\273,\010\203=\331X-\274\013\263\332\274\252\342!=k\364D\274[\302\222=\335\310w=\315WY\275\r\t|=\257C\227\275\254L3\275\024o\312\274\2176O\275\034\331\210\274\245\027_=AH\030\275\256\034\222\274\"\013\'=\320V\206<\244\002\347\274\"\304\246\274!\331m;\206i\203\274z\336Q\274;U,=\217\230\352<\344_\366;\030pg=E\334\262=\254\257v=\243v\330\274\300V\177=2\313)\275O\365\350<\350hR=\350p!<\227\230\227\274Ur\221\275\220\030I=+m\303\274H^\203\273\033\347<=\3039D;\205\030\026\275\022\274O<\367#\n\274\260R\227\275\"\353\365\274\233f\234\275/\007\211\274\211o0\274ED&=\363\326\034=\305\201 \2748^\030=\245\312\214\273\304\307D=\221\000\331<\007g\247=\3241\277=\350[\231<\226z5=\035d+\274(\202\355\275\311F\362\274\367\204\210=\023\363\'=\205\010^\275\014\037\332\274,\2078=\t\032Q=\"\314.=\241n/=\234\336,\273R,\221;w\340\034=a\234\275\274/\263{\273\265\273\025\275gUo<\230O\022=\254\3650;\350b\343;\301\003\274\275\365\006\226=+\231\013\275\361\007\260=\326\304\277\273\372B\n<l\007K=dWs=\251Sm=Fl\n\271\017\347\017==\021\266\274\\\224\303\275\204&\265;B[P\275\233\005(;\004\366%\275\343h\277\275%\227\017=nI\206\275\275\253\314;\336\242\n=\234\337==\274Q\025=&\363-\275\360\t\324<\317i*\274W\217\222=\010T!\275\331\036\334<\242>3\272\334^,<\273\304H\275p\267\274\274\255\320+\274\003\016\031\275xP\000\2756\020\200\275\377\206\033=\303\023\364\274\304\017\351\274f\006\256=\306.\253\2751*\256<\346G\257\274\0218^\275(\247Y\274%g==l`\276\274\300j\330;\250\233@=\217\251\343<\301Di\275\257\255\005\274R(\342\274\2449\217\274\242\335\223<\022+\313\274\263\273\324\274\277<\005\275p\333Y\275\364\033\"\275\032\223\013\273p\360a<U\0135\273\031R\252\274\\\005u\275h[3<\334p\200=b\220\204\273\223S\017=\214s\031<1\214G<\025C/=)\014\263=O\263\026=\333q\351;\\%\006;\237\005\276<\342C\231=\303\026O\274Qy~;;.F=\025\026 \275\020\364\236<G\322\007;\270\243\246<Q&\201\275N84=m\034\341\274\332\377!\275\265\003\250\275\333\352\301;N\214\204=dN\304\274\301\035\335\273\245\351\320;awX<\237\000e\274R\330\212\275\227\225\010\275bap\275\033.*<\t\340\316<\240\275\034<w\330p\273\324h\260\275E\037\220\275\214c6\274I\"\301<\311\371\262\275\307\003\365<\220\n\254\274\007\204z<4!x<@NH;\312)\320\273\177\017\017\275\317)\276\275\364\223Y\273#6\214\273r\r\023=\306\337\357\275\235\254\217=\013\203 =@\326\334<W&!=\265\206I=O\335]\274\356\304\021\275\321|\323\274\212\373\336;\254z+\271\232\367\250\275#\372\232;m\031b=\266M6\275\271@G\274\233\326\314\275\261\035!\275Fs\334\274J2\336;\255B!\275\001h\214=\206\260\210=\372\023$=y?\335\274\224f=\274\266\356o=\342\227T\274\346\362\241\274\203U\005\275,\261\212=h\251\303<\243\327\022;\217\301\275=`c\034\273\333\310C<\331\007x;\315\277\036\274Sw4\274_t\346<\253\320?=\277\230\371\273$\223\014=x\253\357<B\347E=\305w\260;\263\2667=\363\365\"=hZ\200\275\273\361\264=\177\366q<Usk=r\274\307<.\004i\275\024l\251;\230\020\177;|\274F=b\370\267=\346q\034<\266\207\221=\257\346\232\274H\362\330\274\271\215C<\235\276\265=\3052\007\274\212L\301\274\026l\252;A}\324\274\337xM\274=$l\275D\263\006\275a\241\"\275\252\032\207:\313%\210\272\215\266\317\274\024\257\241\273\271\337\254\274\334\315\235\275\202\200.\274\2250\274\275\355K\377\275\226+W\274\311\014R\274\352H9;\333\210\204<\322d\177<X\224\334\275\234\n\341\274\216q\203=\325\022\007\273\234\252\002=\244\340\246\274\254\2021\275\260T\253;\223Kc=f\022\022\275\343\000U\275\314N\231=\201XD\275s\035\223\275\267\326b=;\235J<Y\3572<\003\023%=\333,\010\275\245\2504\275\013\350\212\275\335\242\232;!\234\177=\250@+\271\226\002\202=\257s^<\334\340\\=1\352i\275+\214\301;u=\231=h\344\231=\216]N\273\362\030\200\273\014\371\224\272`vP<\347\270\024=n>\371\274\036\367\215=:\024\246\274\023;K<\2150\230\274G\034\321\275\271\320\206\274\216y\n=\221(\206<4t\211\275\323\260\346\274.\361D=\331\005\263\273O\301\017\2745\335l\275P]I\275}[\177\275\020Zt\274\275\215\217<\021\343\202=5# =\332\323\204\275\246\225\';@\203\246\274\r!\211\275^\337c\275}\323U=\337m\332\274\222G\276\275\343N\233\275\322\274.;O\257(\275,95=\211\210\207=\034\357\007\275o\232\362\275\222\247\341<|\230?=\363\350i=\333\304o=\247\205V9)\314\r\275\006\225\007\272\212\203M\274:$]\275\305\271l=6B\351\274B\347\027\275\350N\006\274\242\206D<gX\006=~\355\234<]0\213\274\330.=\274\326x3=|\272T\275r\337\326<G\271\022\275\265\231\357\273\315D\0339\304G\337\272\2719S=n?5=\223\017\353;\230\014\277<F\032\364<\330\355\321<i`\034=\321~\221\275|Vm<8\005\260\274\204\233\356;5\376p\274t\014\007\272@wd<\377= =\271)\261\274\025\234\213\273\307\025%\275|d\320<\253\200\320<f\214\032;\225\335\356\274pp\021>\367\300X\274#sl=\3172\025\275\2662\320<\200\353\276\274\036\251t=1\333Y=\022\371\017=\037gG\275Bz\370<C\274l\275\262qK\2736\360\353<\275b\027<\332\302\267\274\334\360E\2740_\211\274\245#\026\275\353\330\226\275k\\\034\275r\213\205=\026\243\226<\274%n\275m\r)=\031b\320<Q0\213=:.!=\344\333\342\274+-\205=G$\236=\301A\263;\274\375\256\274*#\221\274,L\233=\\\200\210=\007\r\204\274D\0052=6\320z=4\014H\2755\"\213<\007\347\337;\347\203\276:\353\213>;\304\225[=\226Ti=-^1\275\271\327v\274\326\014\350\274\037H%=h6\220<}\257\311\275\036K\002\274\252\253\037\275F]1;B[\007=\242b]\275\367\211.\275g[\362\274\022\004\362<_Z\363<\027\204\023\275\n\246\027\273\253\307\232;\375\304\264\273\222\034\016;V\242\304\274i\217\221\275\371\212$\274\324?\261\274\\\206\037=\365\247\246<\241\356\230=\264\252\364\274\324\201!\274z>\352\274x?\352<\3204+\274\341[<=\016/\204<q1\034;\023\327\336<\027\310\215<=\321\211=lk8\2754mh<\220Mn=$F\260\274d\311+=O5\033\272\366\200%\275!\211D\275\032\257\200\273s\202\026=F\033\266\275\353A\363:SF\225=k\017[\275\256D\344\272\340\205\206=\267?\343\273.~\"=,\201\202\275\221\243\254\274B\2536;\030a(=M\2148=dg\211<}\263x<\210e[\275\033\322I=&\202X\274\032\377\204\275J\314q<\235\010\342<\2567\022\274\362b\212\275\335e2\275\350\315\'\275{\317\374;k\321\323\274\313\023\025\274\000+\237=\376_M<\233\370j<\212\031d\273!\372\253\275\207{\373\274\3030==V;\334\274\024\242>=s\354\367<\355\374!\275\322G\033\274\212\236\346<p\2427\2757\332y<\221\342a\275G\005n\275\330\334G\275\314P\260=\220:N\275\356\257\241;0\'z=\271p\272:nJ\254\273.\270H\275;\211j=\235\225D\274\231\226\263\275h\236\013=\300f\360\274d\216\342=\024\207\315\273\301\030%=Pj\017\274y \316=\244/Q\271\266\303L\275\347x\000=\375@\256=\0332\027=\324\301Z\275D\240\365\274\265\024\247<\325h\252=\215\276\373;\344\332\033;l;\364\275\223\264:=c\"\002\274\005\260c\275kp\026<<?@\275 \004e<\257u\247\273]@D\275],><\331\027,<G\301\353<\333:\210\275<J\305\274\340\353\336=\266{\031<C\366s\274\225\234e\275rbO\275q\347\r\275\224y\315<\304\310\311=\034\316)\2754g\200\2741\361\354\273\273\277\037\275Ng\224\275O\247c\275\032\222<=\227\2325\275;Yw\275\2632\205=N\232\237\275O6\025\275v\274\235=A*\333\2726\003e\275\242k\231\274\274\2458\275i\272\316<\276\375\021\275\276iz\275\206:\301\274\025x?\275\345\317\023\275\300\026\344\274\375_\252\275s\006\245\275$\327.<\305\375=;\340`\236<\263\323)<H]\030=\000T\355;\312\264z=\317\315\364;\263?\021\274\013\360\205\274.)8=QC\367<>\357\342;o\177\002=\237g\277;\210\002h<\377/\021=\203y*<9\337<=6\243\301<\300\376-\275gN&=\0238\026;c2\030\275,\214h=}&\035=\270\262\370<c\266\347=\022r\260;\231\213\206\275\225Pi\275\321U\235\274\300v\010;\247<b=\365\223G<@\027\210<[\356*\273\216\374z;\027\222\300\273\267\t\264\2745]\345\274O\025T\2759\320\216\275\362\232\301\274\345\241\016=\307\0279<\217\013\027=E\2750=\202\332\357;*\273#\275\200?C<\341[9\274h_\221\274\'WW=\316`e\275:Z\260\273\322\233\222\275\312\277\314\274\356\010\032\274\324\231\010\274\343\207\271\273\267\023%=\277\257\231:W\363\034=\370w\311<\260\033j\275{\324%=\023\">\2745\367\367<\364\223{\274\034\224\257<j)?\275\317M<\274\205X\225=u\370\314<jw\260\275K\217\256\274x\237\372=\313U\236<\327\r>\275\332\004\035\275\303\333\225=\213\203|\275\032}\'=q\220v\274+\355\251\274&$\356<\037\215\265<\343*\237\273[\341@=\304\332q=G->\274\267\3068=\320%\255=B\254\243\275\023\"\261\275\273\t\314=TQS=\230@\316\273A\307\270<\306W\337\274M\227\231\274\272\"\177\275F:\010\275\265\214`=X\305\231=J\003\364<\263\nx\275\370+\243=>\353b\274B%\t=\230\335&\275Z\355m<\254\274$<%\"\226<oJ\214<\324\356\005<\272\323\032=\273\270\002=e\220\243\273\366v_\275\243\3305<,\230\032\275\t\235\200\275\013\322]\2754\242^\275.\335\331\274\022\234\027=\217~\374\275\226A\232\274\005\337g=}\377\376\274\361\317\305\275\302\264P<\257\204\211\275\227\336[\275*\021\205\275\r\202\031<\025VK<\303\225\245=Xb\257=\371\315\334\274\333T\245;\370F\006=\234\325\001\274\217F\332\275\203F:=\032\236#=\356\234\223\274\341t(\275d\214\t\275\265\002\357<:=\251\274J\2518\273\354pE\275\327\212\324<\346e\\\273\303\377\344<\230f2=\262\325V=qD\324<8\006s\272\026>\331:.\333\275<a\376\014\275q\0071=A\227\334;\022\222\020\275<~\\=\363\216\205\274\0305\211\274\263\373\277= \274^=\206\344\235<\317Q4\274\365\034V=)s\364\274\261\271\207=:\321\240<\201:\362<?\2702\275\030\366\230<+\347L=\243\257/=\203\217\243<!v4=\335\221\336;my+\2743\031\241<\036v\224<q\221\222\275\002x`\275eGr\273\251\334\274=l\210\256\2742\357\227\274h\331,<,\334\t\275b\336I\274\316u\247;\361\2638=6xF<\205\216\237;\243\274\027\275n\014\246;\'\016\251\273\265\234\255\274m\204\373\274ZM\267=\020,\021=\324\274\364;\243\035==\212\263B<\031U\004\275\367\201\327\274\360\305\374<\304u\220=\245\372\200=H\000\005\275\213-\243=\003\376>\275\031\360\233\273\256\262\220\274!\352\277=D\322~\275\216\310\032\275\313\223\t\275\363N\250;\364\373\264\274\321\337\336=\361\243\303=Y\272\313\275\233\177\222:m\231\270\274Pii\275\377\006\321<\356\356\233;\'\345\362\274\336\304.=\322\370\227\274\240\264\017\275-X\255=\241\305\"=\021\227J<\372\340\336\273\216s\347\274\205\343c\275\265mL=T\233\357\273\235\272\256=\333\311\364\274\337\345\213=\212\263f\275\035\240\253<\005\225\354\274\207\005P=\3427\010\275\017\005\020\275>Y\352<\252\251\350;zS\272\275\242\362H\274\001 \016<Dp\331\274B~\352<[\273\233<\262\312u=\240\352\023=\007\255B\275\020\036b=\272\344\024\275\306\336\350<\005\367\201\275\3206\217\274\317\245\237;\217\027\007=^\215+<\366\300d\275\227\234\333\273\372\215\216;\274\177L\275\030\221\340<\322\335`=\236!\252\274D\343\026\272vrn\274D\001\255=g\t\256<\224\244\231=\315\331\030\275/\350~=\205\213\375\274o\375 \274e\330\255=\366\035s:\2517G\275IG\316<\277\314\035\274\005km<l\313\212\274Ao\026=F>-\275\2110\006=As\260;\"x\203=\317\016b\273\323u\346<\253(\255\275\202\2212=\316\352\345\274\005\341\365\273^\010Q=\002\202M=V0\273<\037\312o;\256Y\226\275U\333\255\275M\013\022\275\323\306\246=\352\356\307\274\345\366>\274\374\333\330\272\301\336\002=\341\317\350\274|N\221=\341\346\177\2752K\225\274\233\n\355<C-\205\275M\261A=^\177\242<\262c\366;\340\273\335;\220\304\304=\255\006\307\274\246\303\335\274\254\243\3359W*b\275\253b\326<?}B=s6\230;H1\r\275Z5\275<\001\370\330=TLm=F\255\223\272J\220\372<\035\346\026>\017 .=\005!\213<\352\251\350\274[\2008\275\254\207]\275\357\243\216\275\252T]<\225\343L=j\273\024\273\332\2641\275\017\0214\275Y\253\227=\214\033\032<q\310\034=zu\245<\356\315\r=/\231X\275E\323\252\275\372\244\210\274\352^U\275\234v\013\275]\233\021=>[\001\275\362\263\277\275D\024\016\275\002\233\304;W\374\242<\373\205\227\274S\341\203\275\222,\203\275\212\327\232=\234w\323<\365\325\210\274\220\256\275\274\222\264\"<\n\024\030<\205\'!;&Dj\275,\230\354<\311\025\334\275\353\370\211\275H\220S\275_\271%;\252@\206\274[\306^;\257W\366\274\013\320\233\275Eg\256;\2228\357<\331o\222\275a[\371<\277\355A<\355\263\265;\242\013A=\275-Y=\320\334\226\275\200BH\275 \300\257\274N}4\274\274\033`\275C\357\315=\265\322\212;k\360O<\025\025\000\275F\366~\274\346\301\021\274LfD\275\347\354\220=.\030\022\273!\224\313\274\252\360\216\274\371\312\200=~U`\275pA\313\275\344R\023<\266%s<\205\3549\275\362\204\032;|A8<Q\351D<\336\323\264<\273\335\244\275k\340\227\274X\024H\275>\0008<t<\215\274\2718u;\330G\005\275\234\2548\274)8\340\274\260\251e\274_j\027<\020Q:=\034\321@\275E&\237\274\202V\255\274\002R\016=6\201\223\275\331\320\004\274/\206\312<\014\026\323\274/\301\256=\351\1777\274;/\212<CR\312\275\')\324\274\266\037\t\274EC\364\274\203~\n\275\257\304\177<\002\023\370\274\256\227\231=\322\2141\274_%\225<1\305(<-\210t<:\031y=2@\r=\204\214\312\274\n1\262;ps\001> V=\275\253\024!<G\2777\275f\266\031\275\\\340\272<p}\271\274\000\364f\273\007\357\306\272\326\0177=\373\345\307\275\354\247\250\274<p\303=\334\360\250\274=\274]\273\300\355f<\300\034\021\275/9\200=\366\331><\312V\277\275@\231\203\275\304\021^<9!Z\275\222\332\261<\245\0033\274\301\210+=\240\301\210\275Op\244\2750q\010\275\032-\301<D\317\213\275\360\005\341\275\370\260\204\275\000\\\224\274\222}\236<\360\361\203=\207e\333\274&\013\000\275\211\272\317\274\n\276\261=\373\0020\275\tR\224=\037\270{\274w\n?=14\'<\273\352:<C\0014<\241\313\330<\004\247\324<\346Ii\275\201\025\'\273\314f\363\274\r}\235\274\203\202\027\2745e\263\274)\223\237=\233\270\263\274\217I\016\275\220\017\300<\263\250\236\275\210q\207\275\205q\204\273\217\245\263\273\031\016\256\273\344\315\350\273}\025U= \366{\275\0219\230\275\273JQ\275\210\302\326<vMC=\221\367\010\275/!\247\274@\335n\274eSQ\273D\013\333\274\374v9\275\325\332\336\2740\312\334\273\374\266\301\274\261;\021=\240L\227\274T\212R=\363{x=\255\367\234<\306\266\340<\000<\233\275\301\267\247\273\365\227\222\2752\0168\275<ri=i\242Y=\355\300\r\274\013z\372\274\366K7=\365\037\221<\242\206>\275\247\033\014\275\342\003\224\2753\322A;\324Z\235=vo\335\273\343\235\217=\225\374\235\2747\356\242=\300\367\036;\327\367K\275v\330\236\274\247K/<\034)w;\014B\010\275\036\0072=\'1\274\273\004\242\344\273\024q=\275\315)\316\273\2600\377\2747i!=T\205\241\273\257f\000\275\220\005M=\2532\273\275\205\241\301\272\277\311\335\274\261_W\275\002\313\001\275\003\311&\275\310\357]<\'(\342=\027#<\275B\320\342<\377\335\177<\302\353b\266^\203\361<\255\333\233\274\226eF<\322\031\215<\265L\250=}\321F\275(\022\n\275%\225\t=\361\350C\273Y\342\231\2752:+\275\030#\\=\317\036}\275t+~\275\274\206f\273E\264\316<\350\362B=\236\234\367;\321\004\360\273\270\306\211\273I\372\220<\237_\002=l!;=N\253h=\006\004\006=\265\310\010=\312 \276\274\322\024#\275\367(\312<gj\013\275)}\345<[w\242;\247\351\223:\312\017Q=\356\035\"\274\340^\270\272\3424\321\274E\003\005\274\t\300\006=n\0232\275\365m\303;\351H!\275\215\345\205\275\360G\200=\202\327=\275,\312!\274\236\364\004<E\327\227<$q\030=\301\014\205\275\241\221\256=\314\343\373\274x\222\371\274\266X];\372.\003\275\212|\234<?mc=\000\360\362;\362\220\036\2759X\304<\254`(\273<~h=fx\037\275(\354\236<V\305\005\275Ux\177\275C(}\274\351\013?=\246\260\337\273]=\315;\201]\272\275\217\304z=\333\207\300<\226\344G\2746(\265=\375\321\006<\350\260W\275:eO\275\374\247n\275\255+\377<m\206\013\275L\337\275\274\321\264\374:\032{Y\275\345\262\237=4\n\215<\n\027\010=\353\226L=\002;\354<\246J\242\274\321~I\274ow`\273>\260\007=h\327\363;\322\325\255<~O\336\274-x\n=\221\1775\275\023\222V\274L\343\024=\217S|<\3600p\275\323\336\263<\226\014M\2751\307\335\274\347\\\215<GV\320=DN\234;\221\236\353<Qb\014<\356\251\253\272\272\374\256\275_E:<M1&\274\272\300\301=\374\202\250\274\240i^=\360\347%;HIQ\275\215\336\277\2704u\243\275\371LE=\2170\232=Gj\253\274Y4e\274\177\371[<\345\351\216<\0368\025=&\317\301=\010w\244\273\331\263\272\274\035\232\n=\033\211\373<\244\'\033<}m\343\275\201\223\366\275\257\332\003;0\220\272\274b\0256=\016\325\007\275FC\n\274f\317i<\013\002*\274\032\010\333<\367\351\267\272\034\261j\275\205\204%={v\231=\2343\215\274\200\205\370\274,\004\233\274p\204\210\275\007\212\272<\017\'\'\275\'8\251=3\357\332<Sl\256\274\311\032I=\345y\003\274,\215L\275!\235$=\3056\014=M\334\217\275\311\275R<\026\2643\274\204\336\213=RZG\275\345\366P\275\325\303\036\274]\232\246=\007\335\016\274_\030I=\373\251X=\3010\304\273!\363/=V\202\370<\232\022\300\273\260\201a\275\326@\243<\022\243\330<\021\301<=\000t*\275\355\235\303<\247U\345\274N[\246<Z1\357\274`\225\357<\357h\335<m;\270\275\034\306\215\275\247;\257=\256\237\r\2758\355\377<\2146\231:\361\342\223\274\365\3538=\332/\221=\303f\245\275K*\267<m\362U=\276h\265;\021\214y\274{\207\\=\210\244S<\214s\312\274\217f\262\274d2\000=I3\255\272qM\021=\271Q\013\275\tN`\275\350h7=\315\223\306\275\335\334\207=\r\372\017=/e.\274?\211\033;4\267\210=\305\344\231\275\313\t\014\275h\'\227\271\317\013(<\013\203[<\256\036\233\274\332\374`=JC-\274\020\251H=u^f\275\207c\036=5G\215=%\244\013\273\341\374\347\274\216\301\363\272\255\t\305\274^E\217\272\3261\023<\r\263\267\275c\375\020\274\332\016\225\275g\252\323<>>S\275\262\233\307;\325#+=[c|;\366\357\240\275x\372\365\270\000\024\362\274#\353\274\274C\346\r<\271\\n\272\251\361\343\274\224\350v=j\245\252=\324\210\237\274\tm \274\2657p\273\207\202f<\235I\273\273\203\036\237\274k\005\244\274\370\344\324\272VN\317\271]@\344\270IZ\004>\354\267@\274\374\375\271=\200\2632\275\300\267\024=\266\272\331;;\273\226=\373\215\311;\365(\017=g\211\252=\346a\305\274\313\330\025<Sw\247<M\372R\275>\364\302\274\007\3454\275\021\246\225\275\253\nt\275u[\260=F\234W\274>\033Y<G~\234\274\032b\003\2759\3618\275\371R!\274\030,m\275\230\337\316\275\342\024\276=O\352\260\274\345t\260=\225\211\n=C\270f\275\276\372\230\275\2316\231<\006\332\016\274w&Q=\321li\274\324\366_\273\230\366\027=Z1I\274\222\201\221=\327\211\223\275\254\n\014\275\271sZ<P\207\034\275~\223\203\273\262v\007>A\250F\275\372=\273;r\236\004\275%\232:\275\013y\375<2v\337\274\221z\033\275\211\2124<\263_]\275QR\225\274\243zS\273\240\177W\275iv\006=\274\237\306<\005\344\021=\204H\227\275\004\005\205\275(%\260<\335\300\347<\303\033U\275U\365&<\347\256D=\242\256\004\275>\221e<\305RY<\034G\333<Y\350]<\305\251/=\033\213\006\275\243&:<\r\212T\275I\216Q\275t\321\203\274\002D\000\273\245L8\275\206\032\314<\207Tg\275\226=\225<\010\032\207=-\236\021\275@\205\204<\375\034\275\273z(\n=%~\342\274\357^\227=\310q\205<\177R\205\274\337\205\374\274\244\200\311<p\265\023=/\337\254=\323\'\033=v\342\017\275^\3250\274\211\377\270\274\026\004U\274\232\266$<\304\305\201=\302D\254:\200\272\217=\270R\244<.%\t\274\224\367g\273, \030\275\250\311\247\274\266E\351<-\023\352\275\357+D\275X\370\277\274\253Qd\274:w\253\274\237t\213\273mY\250<A\250e\274T\013\260\275^\304\305\273\254\212\327\274\315k\357\274\350E\354\273CK\033=\253g\270=\256jK<<lE=\203\341`;\023!?\275u\000\030\275\255\3308;\235>\213<\324\220\307\2741)\345;[g\331\273\234v\234<:\337\244<c\244M=\371|\304<R\322\005\275\205|Q=\230u\206\275\350:\001\274Ac\362\273\257\235\337;\002x\222\275\313^Q<\255\364\"\275\232\370\202\275\220\221\233=\361\335\256;;\017\331\275\354\035\340=\265\267\r=M \'\275b\020,\275\232\360\336\275\344y\210\275\350T.=\215p0<Z\315\020\275\024\357)<\305Sk<*\t\031=\274\250\205=\010\252Z\274\306c$\275f\002<\275\257*.\275#\371\316\273b\307\201=\231\266\267\274J\233\270\274\364\037Y\273\306>0\271\255Gw\274OJ\350<a\306\330\273 \355Z\274sfa=\317\250\257;\250TD\274\250a~\275\242^\227<\275\343\013\275\315\005\032<\\%\245\274\206,\030<_J\222=\315\336\267=Wg\274\2740U\005\275\025;]\275\3469\222\275\241\376\325<q\347\221\275\177!\224=\357x\256<\270n{<a\315\272=g\202\364<\224\037\333\274_\030t<D\226\026\275jr\013=\212\211\026=\r\246\272\272\372h\373<\014\203f<\260\273R\275\241\032\240<<\2463<\177D\250;\013>\230\274\211b!=\277a\007\275>\325\300<\225C\021\273b\031\225\275ZN\r=\r\206\035\275\347\022\364\274jf\322\274cyV\275i0\021=\362\226\030\274\204tI\275\003~s\274\266\245\226\273\322\342f\275\257+\035\275\303:\214=\327\216\332\274M\027\020\275\355\325K=+d\251;\0348\241=\271\251Q\275]H\342\274\301\217\032<\374d\204=\212\333\273<%\034\256\275\210\212\302<?:3\272\237\355\243=\317\325-\274I\031\365<\037\322\035<\226\240k\274K\211J\273/n&\274A\333\035:\333\014e\2751\2021<t\355E\275\034\027\010=\302\237\n=G\036;\2757J\030<\223\251\\\274\302\311f=\235&I\274v\246P=>\017/=\351\205\270<{h\355<\267\226\220<0\221\276<`\313*\275\315\376\303<\221\201^\275\2338\374\274y\2334\275a,\024=G\231\257\2758\233\300\273w\222\352\274\304\312\322=\007\233\353\274\256`\267<_\302\t<\265\2009=T\373\250\2723x\211<\235\233r<\244.\212\275\262l,\275\251\223\252\274\307\220\256<\336s\251\273\037\352\000=\002xr\275\207\210\000<X\245?=|\223m<\340\211o=`\312n=\035\300\242<d\340\020\275\340\224\334:R\241\316<)\320Y;\020\0135=\004w@<\343\372&;\257\036\207\275\244\243\013=\327e\003\273\354\276\235\274bg\002\275\230Os;d=m=\\\236\237\274w\206-:\252\316\266\275\210D\214\275\357\020Q\275JF\313\274\251\240\274=\025\257^\273\272n\033\275\031E!\273n\220\270\272\237{@;\023^w;\225\335H<\203\002\240=\253$\312<\323\324\313<\020\250\264\275\201\377\323=\212\326\251\274\250+~\275T\227\310\273\220:\321\274\354W\301;\335\262\264<G\2658=\302\272\021=\201\263\354<ch\204=\217\337\007\275\'\260(<\016?\244\273\330\016\254:C\301\230\271u\'\356<z|R<\375\337\356<2\341\257\275\355\036\327\274\341\341\357<\217Y\213=(\212\316<8\231\250<\313\221b\275f\2001=\364\'\251\275\312\317@\275\275\002s9F\353\237=_\207\026=\351\004\221\274\365\206w=8/m=\353\014\"=\313F]\275\327\271&<\236Vo\275\366\033\233\272>\334\241<s\211\035=\321\213!\274F)\246=Rl\222\274\377\363\323\274\000\034\255\275\275\2278=\221]h\274\237\341\005\276\204m\211<\323\210\331\272*\024@=\234\"\306\275\340\254\021>\217\022\241;\356\312.\274\330\265m\275}\265o=\270\311\254<\337\322`=\367&\333<\303\372N<\266\037:\274N\354\'\2754\364\004\273\223\216C=\345\317[\275vw\274;\371\225J<K\241\345<I\020\037;@p.\274\355Y\207=\032\325\030=_\250\037\275\317\210\334\274;\314\026=\315n\312\275\371\"U\275c\305\226=:\324\'\275E\274\320\270\352\275\326<0G\243<\020\253\233\275oj\267<\031\352f=Cu\t=\364\264\271\273\202\307\216\274L\351S<\002\353V\275\261k|\274S\263\240\2755n\200=E\226\246=\277Z\244\275\337:\021\275}#\307\274\322\375N=u\313\236\275\200\377D\275\t\tl\275\014\340\002<~\312\372<\005Nw\275P\306\301<\376\375\265=\310%&\274\336Zw\275\"Z_=\'U&\275zT\246=\367\371\350<\251\374\036=\230\034\277\273\225N\006=x\331\033=\205\014\207\274\006\341\013\274\332_\271<\2764\257\274\312\364.\2757\223\'\274\311\346y=\212\177\321\274\005`\306\273\t\241x=3 \001\275\021 <=(\376\300:\001\311\241;\226I0<@\204C\274\336\224#=#\316F=\301`8<\0108\323\275\373\027\005=\207\262\250\274m\362\006\276\264f3<\234\311\361\2746q\377\274G\376`<\253\\{\274\376\325\357;\252UN\275\241\026\230=\336\210\317\273g\331D\274\225\265\242\274\321\207\"=@w\020=\007\217\232\274\022\353:<\267\n\203={\316\006=\304Y\326\274\247\367\237\274\t\314\204<\356\344Y\274<(\303<\301[\322;\312\260@\2742G\275\273Lw\256<=\344M=Cj(\275V\266\323\274\247\021`;\0168X\274\314\351\244<\232%\303\274\244\345\037=NF]\274E \210\275\006\030\212<U~\311\274\267\317\020\274\023#\033=\257\227\272\275%\253\245\273Ho\252<\374i\253\273\005\343N=\217l\366\274\026^\245\275\013\245V\275\'\003F\274\352\342\006\275\356\327\235<5\345K=8{m\274\303\357\021<w\303\n\274\nN <dF\230\275\226\340z\274q\335\313\274\000\371-=\001\000K=J\233\370\273\036\3467=\010\222\035=\336y\273<\\\230\002=\265\200\360<\t\022\275<y\002\000=\367\020\307<\215\354Z=\020\2309\275C\212\232\275R\377\355<S!\333\274Z\267\020=\\[O\275\316S\340=g\271\246\274 q\340=0\326\263=\234s\207<Bo\277\273W\314\\\275\315~\300<\217\307\245\275\234\331k\274D\353\225=\221\033\r=\301!\321<\216\0215<w\375*\275v\030*:W\336C<\0025Y=\262\243\310\273\245\315\214\275W\231\331<\311C\034=\321\241\\\275\262\014\225\273\r\274*=\203\261\237\274~e\344\274a\"!<\243;\026\273\263\273:\273h\236P=XfF<k\354\371\273{\037\324<y\360\371\274\302\260\222\275\233\024v=\t\334y<\033\313\r=\2600\033=B;\232=\270\336\265<\344\217\222<\356{\014\275D8i=\244\230\002=B\353)=\241\242\225<\341\335\020\275B=\273\272\311V$\275,\343\234\274Z\0166=\276\313H\275hsV=qG\331\274\027\2554=X\201\r\274:#S=X\366\323<\367\361\333\273\246sQ=\257-\202\275:x\332\275\200\264\272<\250\262\243=DlR:>\204\242=\372e\177=\0171\032\276\014\312\307<\216D\353\274\005/\377;\307\344\233\274\334X\024=\017\320\244\273\033\374\214\274\354\217\246=\275\316\r\275\323>\230\275\3711V:\3619V=_\203\363\275\363\334\372\274\354\014r\274\004\t\003<h\340\207\273\272o\244\274\274T\"\275\265\016\022\275_\3430\274\214V\245<y\005a=7O\005;Pk\216\272\254Z\370:n\205\253=\241\037\250\275;\364\302\274\376:0=q\243\001<\252\347,\274T\023\267;zWZ\274\317\236\036\273\242(\220=g\303\311;\014\220\367<\332\n\341=\2054\235\275\'\177\327\273}\365\313<O\325\260\274\355\031\232<\237l\t<\016\262\337\274\221\357\250\274\035\364\272\275\342|\211\273Dk\270;\267\271\272\275\303\223D=\364.\010\276\312\210\303\275\251\t2\2753\031(<\025\005\270\273\324\345{\274\312X\325<\023|\263<1*\226<W{D=B\327[=\356D\263=\277\265\215\275U\304\332\274/\350\235=\342N\314\274\230zu\274\344\032\242\274#\343\217\275C\327\254\275\n\226\315\274<B\251\274\351\344\021=\335\003_\274\024\t+\275\275H\327\274\201P\r\275\273Fw<\207\034\003\272\nF\316</i\202\272\256s\r\275\030I\364\273\342q\226\275\020L5=\347k~\270\376\370\257\275\034\n\315\274\275K\322;O)~\275\347\212_\275?\346v<m\343\005=k\341\234<gB\326\275\275\275\034<gz\237\275\206\376\241<\371\346\007\275\005U\335;\234!\001\275\215\004\216\273\017B*\274\327WU\275O\362/\275\010\'9\275\026\243\332\274\365V\010=p\257e=\215\270\362\2719p\030<$\353$<j\217\212;\201\027\246:\013\262p\275.\364\206\272u\177\340;\325#\025\275\220\237<\274\205\325,=]\n\233\274eq\237<\365\265\003\275\025\234\232\274\032WV=\246h\226\274~\237C\275:\306i\275\371\307Y<\223x\300\274\373\3525<%\375\260=9g\002=a$\223\275\357\002\263=\'\227\326\274\3516t\275\201\0043<\324\2356\275\"WJ=\340\267\326\273_\234Z\275@=\213=G\r\311\274\025d\036=\352\360\334\274/\237\243\275\363\224\216\275G\0149=I5o==\343\354\273U\231\006\275b,\246=M\001\301=\205\341/\272]+\310;t\"\004<k\201\033\275\355\333^=\",i=\246A\205<\244\251&\274\366o:\275\371B\n=\276/\317<\257\237<<\321\027\021=\036\006E\271.C\217\275\212\374\330;\346\224]<\352)\\=\241\370X=y\364\326\275M\377\263<\3550\377<\221\302{\2752zH=\216\026\325;V8\361=\020NU\275v\307==\261\215\235<\315K5=\320O2\274\r\r\334<-\023<<<$D\274\211\016\230\274x\034\021=@\270\244=\205\250\206\275\346v\221\275\243Q\014=OL\004\275\360\370\236\275\2147:<u\326\n=\243\200j\274l\3744<\216\356z=-F\330\275E\005\251;w\"\377<\327\233\204<@3Z\274\032\021-\275s\272\324\274&\213J=M\327\356\274\227&O<\331\253,=\207 \270\275J\242\242=\005?\246\275q\210\214\275\023\264\022\273\027\300p=\374\037\001=\002.\032:\300\3308<Ai\214\273,\323\211=\034\251q\2751\276+<b`\325<n\232\223=^G\205\275DU\304\273\351T\311<\034\025\323\274v\232=<j\313y\275\226[\007\275=V\255\275\021\316\223\274\304\352m\275\004=m<\rU\002\275@\007\214<Q_\027\275(\360f\273\343\004\241=U8\250\274\210\352\216\274g\2407=Eq\214=v\030q;x3\216\274\340\234\307=\266\032\010<\222\036\221\275\034\360\251\275\276P+\275\315\3104\274\33472\275\200/b<MI\253\2733\023\233\274\345\242/=\220&K<\"\311!=/\207\"\275l\r\003=U!y</\211!<M\210V\275U^L<\037\203X<<\376J\275\220\016\201\275rk\253<3\300\021=Zl\216\272\325g\246\274?\"\035<`a,\275\323#-\273\340\365\375\274\302F\235\274\270\323\210<@\332U\275&\206\"\275R\252&\275\270\320\004=8\261\340=\030\227\250<Gr\014=+9\027\275\003-\357\2747\314\003\2755\201\333<\311\331A=y{\261<&i\272=\\\t\341;\341\'=<3\274\214\273UC\362\274\261>\034;M\227\217\274\340y\014>(\326\003=!<\265\272\247A\217<\2552\221<\335\326\367\274\235\2168=\364\335\220=\025\313\213=c\357\206=#\256\305<\341\341\317\274\315\266\326\274\321\233\277\274\017\205\027=\245\372:\274\235\331\275\270\036\343\316\274\322\016?<M\266!\275\360>\203<8\361\231\275V\203\377\274\220\2269=\336Y\306\274\351\310\242\274/,\234<<\360&<h\242\256\273\255\\v=\237\311\375\274\260&\363; \307z<\327HM\274\220\035\344\274\3119\317;b?\254=\263\365Z\275\365\267\231=\337\260\232\272\266<\353\274m\321\332<\200\335\031\272}4\026\275C\233\203\273\031|\336:\347d\034\275\254\000\350\273A:9<Y\004\365<\347\3422=\340\360>=\207\274\263\2752?\017=\304(\313;\025\351A\274vz\330\273\3015\000=\013d\030\272B\002<;\241\226f<`\340\370\274\017\212;=H3\277:u2\022\275\317\023\031<\016A\010\274\330\311D\275vAX\275\203b\274<k{t\275\231\216r=k\240\2259\257[\300=,\217h\273q\260\264\274+\357\255=\276\014\223=\235/!=l\263\212<Y\003n\274m\315\272\274\020\352?=\250\374\361<:i\032\275u\2449\275\325\020\230<\035\316\307;>\240c=<\365\311\274\250\252s=\343\"\345<\336z@\275\274\216e\275.l\234\274\315}e\273\357\316\355<\301\010\315<\315*\271\274\262\341\016=Ar\316=C\246\021\274\235\030x\272^l@=\321\265\253<O\313\026\275\252\343\231\275\233QD\275\375m\275:\370\216n\275 \325\303\274\010\205\201<YE\305\274B\231m\275!t\236\274\024\335\202=}5S<\005[l\2746\206\223\275\372Y\002=\271\002\227=r\177~=L\371\251=\216u\220:\317z[9L\204\274<\263\'\200=bU\274<\205b\252<m\340W;lh8\275\276\330\224=\304I\267\275\317\027\016=~\246\205<\263\023\020\275F\375z\275/\267\"\275\202\010)\275\255\211\323;\027\004\230\275c\302$\275\007v\244=\227o\235<\345\242\262\273WS\033\275z`\t\275\354\302\304\273dk\n\275\024`V\275q\261\001<\216\'\346\275\263\361\257\275`\237c=c\3346\275\003\354\037<\277\335\202=\321\377\234<kDT\274\303\264\014\274QCP=i\362\242\275\341\344\314<\277\331/=4\361\227\275\270T\277\275\312\270\r\274\365m\r=LD\256<\021g\007\275\331\030\006\274l\204L\275\1772\372<\343\313%\275\315C\";\376Un\275H0\324\275\253\312\300\275\tkJ\275\314Zl=\017\272\257<\330p\315;\3570\300<b\tx\275\307\023G\275G.\264=D\340\004=\336\212l\274\255\352\027=wkt=\255M\370;\224w\310\274#s\262\275\025\320\341=\252\262f=\276Co\274$.\'\275\277\020K=\275\267\341\274\341\311E\275\3607\273\274\363\302\020=\212\325\251;\211\223\004=a~!=^\365n\275\220B\253\275\367\365*<-\201\301=L\316q=\222_\224\274\273u\337\274>u\016\275\232\254\223\274Bx\002<\236CP;\235\336K<\345Pc=\254\320S=%\240\217\274\033\001\305\274\352 \362=!\307P\275gB\014=\374\304\345\274M\177\220\275\203 \264\273\246@+=@\243\334=\305\333S\275\320\274\222\275\000\306_=\033\201\356<\340\224\014=\017^P\274\226\204\221<\'\251@\275\314s&=^\r1;\200\035L<\0334:\275\003\324v<\345t\222=\365\265\034<\274\366\\<a9 ;B\235\306\275L\341R\274\336\234\322<\311K\240\274D\217\005<\362~g\274\243HF\275b\275\226\2734\325>=Un\037\275\370o\213\275\346\025\264=\317\177o;\253|f\274T\267\022\275\222\235J\273\211\322F=Y\275N<9zw=9D\226<\364\r\346\274\233x\260<5\215A\275D\256\232\275\332\230\030\274\311\254\342\273\260\377\212=4O\027\274J\030\350;\"\234\'\275(\256\230=\'w\262;-_\325;\3172\026\274\205\247\350<w\232X;\315\222U\275e\2441\275\316Z8=\335\244m=\344\367\206\275\203\324\230=\001C^=\006\345%=.J\326\274\034uY\274\250k\212\275\014\260\010<\216\267&=\374}\036=\237\3756<\225O\335<\202\230\020\275r9\335<\367\277\3728\236O\216=|\030\276\275I\231\225\274\333F|;\337\n\377:\302\246\001\273\017\275\340\274\317\033z=\"B\346<\376:\"\275\345\237\010=\362\306P\275bd\231=Zy\213<\3016\346=\207\030\007=aa)=bk\245=\247\315\227\275\340\323-<\017\017\235\2748\033\377<G\264T=WQ\377<$7n;6\212\035=\355\301f=MH\264<\317\264\357:\006i\006\275\361\207\033<].\361\272@\210\013\275\001S\207<E\004%=\256G^<\260\364~<\261d\265<\330\232\205\274\314bV=#\325\235\275\027\254\000=TQ\020\2758L\300=\n\373@=zN9\275\033`M\274\313ba=U0(=bBZ<y\300\000\275\026\017\002\275\2258(\275\250\005{\274\244\2201\275y\002`=\322\232(=NeY;\265\256r=\340\2249\275\2609\236\2755\007\244\274\334\200.=\206}\227;\325\325]\275\274X\034\276\244\310\346<=H\306;\31688:}\233\320<\307[\250;\375\273\322\273r\204]<r$X=\224N\354\274E\3672\274`\372!\275\2148&=\273\307\330\274Ke#\275\242\320\035\272\221vT\275~\222\234\273\225t\333\274\023C\253=\240N-;\267\340\225\273\361#\267\274\035\327\020\275Z\276\"\275\tWr\275\213KZ;\362v\367\275/lE=\205\251\031<?\021!\275i\\-\274\257\301\267<\006\240+<\327\200\313\274D\243/=x@\303\275~\255\345<c\t\345\274\373p\233\275v\305\210=\264\3237\274B\002C=\025!\305\274\270\220\313\274\"V/\274\214\276N\275\301\237%=\372\300\216\274\361\364\330\274%\252\340<\275\207\343<\213\224\014=Z\362\035=\177\266\352<xsf=\036\210Z=\016;\335\272\257i\255=m\217\010=\263\215\256\275\014l!\275;y\204<3\027\263;\315K\211\274\242=\202\275C\221\216\274\266\323g\275T\222\212<\t-\004<0f\023\272\213\310\364<G\352\017\274\333)\255\2745\320\027\274\212\240-\275\354\346\270<\261\006\302\274Zp\242<\177z\031;G\2553\275\365o\376=\021\362\177=L\017w=Q\037\203\273\222\037l\273\345\205\241<\r\365f=EC\317\275\260\2348=\241\210\017=\353\305\273=\356\323\013<\'HA=7O\227\274&\023\n=\200a\320\274\332\261!\2759N$\275#\372`\275\262\332\305<\275\371\210=\324\361A<l\314\367\274\270\t2<\013\276\230<=\350;\275\033d>=\220\325\224=\362m7<\267\216\304=\247\276q\275=\234B=T\255\301<\340 \241\275\264<\366\274l0\235\274\2249D\274I\367\310\274\302\265y<\322\344|\275\322\030\213<V#l\274S\262\336=\210\237\241\274\374\022\332<\316C,<<\227\004=\014\243C=\002\030\304<\325\323\265\274 \200-=\337C4\275\007\2234=\265m\277<\032\013\t\275\311\217}\275\210\205\356;\263\020a\273I)\227\275]J(\273V\366\017<\320;\005;\373\321\371<\3561\367\274\362\256\257<\256\200\227\274\221T\261<\270\315\234\274o\327\262\273\332\343\261\274\030{\371\273\\\376\312\274\233\257s=\226J\027=!O\371< N\260\273\0053\306\273\225&O<\250\370]=)\003\227<\242~\327\274\316<\314;\004\213P\275\004iN<\367\034\025\274\232/\336<\014,\207\274\013|\030=\300\"\206<\212\335\325\272\036g\241\275o\231K<\301V\330<c\231\007<\245\205L\275X\353\"\275\315\243A=\206\000\031\273\361\225\341\271M\245\010=\\\234\306\274\241\360\311<^2%\275E\033\367\274\330\221\002=\326\254\313=\312+\276<`\227\332;d\361\230\275\356\226\026\275ZS\000;\214b\253\274\345\300\266\274G\211\035=\234\267;=\226\177C=\302\362\266=\274_P;\277\221v\274kN\243\275\327\311s\274\213\211\372;\344\222\224<!\007\177\275\275\200\341\274\017Q\366=Vu\317;*\302\223=Y\322x=\304ef\274\\\316\361\274\270;\211\275\370H)\275 \246\211\275\345c\377<\376\003z\275\255\022\345\274\306(\004=\351RM=\233J\314\2745\351\013\275 \262\367\274 e\244=7\262/=7\267\310\274s\373\341=5q\254\2743\3717\275>th\275cdM=X\323F\275o\022\303\274\377^\317\274\365P\254\274\226\n\271;\03336\275\365\244\333;9_\301<\021\037\266=k\031#\275\254\322\035\273\244\217\322<\275\031\312\274ul\364\274\300wI=\226\223\232\275\230\246\201<\005\001L\275\256Y\353\274L\004\302=\266I%=t\030\264\274\260r0\274\307:\001\275\264\324\222\275\372<\346;\002^\007\275\223\354\246<\002\312\223\274gK\355\274\000\314z\274\365}\311<\305b\215\275\311\016l\274\335\234Y<\220C[\275|\352\005\274F\227\305\275\320\266A<\324b\345\274\003Jc=\263\036\004=\023\014J<\022\013Q\275\277]W\275 \244L<\245\370\271<\346\304\356\275\tx.<\312?\357<x\221\032<\273,\357\274\2271\355\274%\206\352\274\031\341\362;]\272E\275`-{=\0027b\274\177\3672<Y\224\335\273\226|\236\274]\225\242<\362`\357\273F20;\352s\203=#nz\274\222^\313<\003\003p=\305\213C=e\354A\274X\301\223:+\211S\275\026Y\274;9O\217<\310\214\342\274\013k\364\2748&\001\275\330\252D\275tp\350\275\237\373\241\275\215z>\275\330H\264;k\255\300\274\364v\023:E\t~;\315\026\271;r\214A=\222\371\"=\335\323\013\275\020e}=\253p\004\272\225\271\270\274\320\316\373\274\351\326\327<\315a\341;\300\364\216<8\273\033\275\270.\357\274\242X\203\275\010\006\013=\231a\206\275\005B\237=\273\311\267\274Z\202\274<\225\270+<FX\266;\321\373\037\275\320\352\315\274\325\254\';\277\217\003\275+\343\363<xN\255<\272WJ\275\342ab=M\277c\275*\271\002=\220\356\365<j\202\244\274\331Y\221<\314G\270\273\303\244l<\234\321\357\274\3140\204\275a\030\352:\235\217\263\274\315\206R=\263Z\236<HD\232\275\021\025\212=\241\325\341\274\205\315\321\274V8\000\275E$7\275R\037i=jL\276=\320h\207=\026\204\217<\3606|=Yo_=\023\222\030\274{\334\007\275\262\333\032\274\247\352t=w\247\352\272-\035\205\270\006\331\241:\377\356\232=J1O\275\'*\274=\263\036\242=\213\323\002\274\006\255\r\275\177\240\304<Q\255\027\275\213fe=q\206\310\274\005\224\242=O\266\266<\214m\355\2736&)=\222\361\267;h\337Y\275\273\367&<fk\031\275\321\301\224\27438\271\275%\031P\275\211\354\260\273%\257\272\274\031\031#<S6i<\330)\273<\306Wv\272\345\0013=\220\211\005=\342]\246<Q\275E=\241.\257\275\352\367\303\274R\332\022\275]HW<\375w\321\274\317\253_<%\246/\275\270{\231<\263\355\214\274\237\222E=$\206\310<4\243<<\325\017\206\275l\340\236:\325\214V=\020\361*=_\255\013>&\346\030\275R\362\301<Lx\227=\2728\350<\316z\361<&\267\375\274f\363\337\274\350w\367\274*\260U=\300\035\201=\316\222\200\275R\312;=U7(=\253<N;\003L\317<K\014D\274\354(1;%n@=N\262\230\273\203\364,\274\256\226\366\274\006\373)\275\344\205R\274jZd=5\310D\274~\025;=`\241\221\274W\272\301<\374.<\274y\204\242=\360\271\344\275{x9\273\004\226\336<\177\200:<\336\254\253\274^\024\331<\003\321\312\274\234[v\275*\334\217<\263N\201\275\246\220\204<\"\315\362\274t\213+\272_|\034=4\232j=\374\304\025\275\317O\274\275\363\036\316;\270\023\274=\262\365G=\370\234p\275\246\262\241\274{%\370=\032i.\275h`%=k!\250\275\243\t\020\275\242\227\375;M\3532=T\022\300<U\252\001<8\357V\274\031I;\273m\007\203=Ahi<+\350]=\375\215\300;`\205\206\274N\204\022\275\227\203\233<\377\212\376;Y\326%\275\277\032!=k\276N=f`\r=L.:\275\323\322f=&\2742=\230G@\275\320\210\375;\341\001\257<E%.\275\010\205;\275\221oZ=\265BS=\t\2077\273S\370\271<|\014\265\273#\257e<\263=-=\037\271\252=Q\370\032<\327\211e\274]S\235;\022)s\274h\211M\274u\005\213\275c|\013\275D*R\275\033Z\030=\352E6\275\035\016\325\274\017\007\205\275y\330%\275\226\017\r=\300_\023<\264\034\214\275`\265>=N\240\271<\254\257\246<\347\203j<M\3558\275TZ\201=\205M\375;\2222\270<\204Fc\274\370\233\221=\016\341\256\274\213\232f\274R\237\244\275\\P\177\275\205b\r\275\240\255\"=@\2237\274\'\255\024\275\r\302,\275\331i8\275\244\311\317\2740rI\275\250aI=\270~\017\275`Il=\307\324\001\275\205V\241<>\326\343\273\t_\232\275, \027\275\347\354\005>\325\377\266;\226\346\333<\227\"\213\274k\336\316\275\307\032u=F<A=\247B\226=\224\230\025\2750\257\232\274F\367\312;F\022\333\275P\276\203<B\361\343;\362\217\007\275\rV\217\274\313\264z=\232W\342\271\347\333\201=\376|\343\274 VF\274\350\306&\275A\262B\275\006K\236\273U\272p\275\334\251\361=\251=\255\273\035\352\242=\325\213:\272\273G\251=.\367\223<\245\333\301\275mC\001<\036\'m\274\3158\013\275\252\327\034;\245\027\315\273\026\240P\275\242\260D=Y\017\033=\274\252\002=0\332\340<jb\220=v\246\267<\350A\215\274\035\177\021\274\014\010\016=R|\206\275g\270\211<\2441H<\251\016F<\336\0326<\002_\341\274\300\307\243<\201d\344\275\234_\252\274\372\264>=\001\331+\275\204q\241\274\030\317A\275\243?\014\274\025W\353<GJL\275\'\317\205=\353\315\333<rn\224<dr\220\275u\273\263<f\217g\275;\325\202\274\377\273\234=0\245\001=\235\3723\275\260\335\341\274\230~r<A\243\237<.\222\376<\264\250X\273\207\036\031<p\017\313<\377\227\037\275\265\225\';\364W(;\375\234\t;\235D\033=\033Id<cz2\2755\234\230=\023\214\227=#v\034\275\"\272\362<\203\260\340\274\t+p\2752tH;\336\315\001=/\267\267\275\342\271f=\341\245\235\275Z\004\311\274\234\027\'\274K\327\374<\\\337\204\274\204b7<\254\200\215\2759B\270\275p\230~\275\030M\222\275\242\316\346\274\007H\r=\001\223^\275,\tG<\205b|=\373\254\330\274\354\000.<\332\037\351\274\224gN=\250\340\036=\315\346a\275f\211\212\275\356\375\274\274\3609\026\275\031\362\243=\250CE\274\304\323\233;\014/\031=\301#\347<\rC\357<\360\315,\2759\345\225\272\353}\226\275\t$\247<\352X\217=.\017\035=~\035*\275\332#\226\274w\372\316<{\\\241<\207\033\330;k\221\211=K\305.=\207\340\256<\335\n\247\274\366\020\343\274\022%\237=\327\332\215\274\277\264)=5\"\016\273\037\242\227\274\233\312c\275m\235\021\275\355\317\233<\374\251\224=\255W\363=}\006\333;\362\243u=\\\025*\274y\253\204\275\353\360\341\273\276\343\205=\272\300\004=\332R\314\274+\023\002\275\356\331\347\274I\253\007\275\250\001f=P.r\273Gf\006=\223\230\306=\362\232\367\274C\277\275\274\352\255\342:\323\311t=\234\315\270\274\313.\252=\211\316\375<\2422[=I\204B\275\344,\243<\000\363p\275\372\000\'\274\315\207\277<\177\360\200=\272\003,\275\350\177\361\274F!I<q\331,\274\017S\371\272\221\001\227=\376\233b=v\247\017\275w\257M=\010\334e=wK\246=\247\213\253\273\0224x=\324\356\022\275\214\310\207\275YA\210\275\213\220O=\006\216v<\304\307\334\272\0070\324\274\262\214\325;xCw\274\353\245%\275\256\005\322=\351i7=\263\276\020=\314Q\241\275\315\200T\275\276\263\021\275S\206\203<\244[v\272\277J\213\274\271z\371;\364\215e<\304s\230<sQ\002\275\001]\204\2744\341\253=B\020\346\274\233D\013=\032\373{\274\246\026B<\266d\315\274\3271\237\275\000WP=\347\324U\2740\312I\275\\Zb<\233eW\275\207\345\223<\204\003L\2759\0143<\340\324\217=#.,\275\023\036\205==\262<=\271\276a\275\005dB\275D\006\006=D;<<8J\205\2742}\010\274\344\367\013\275\330*5\274\201k\031=*\206\177<\302\303\006\275\031m\240<f\241\303<\246\rN=O]Z<\362f\220\275g\341>\275\336\252\370<\275\t.<h\240\366\2746\211E\272~5\213\275f\267\022\275\204d_=\2300r=\365\014d\274\322@\222=\203`<<\025\'\223=\235\350\360\273f\010\004=\210\365R\274ou\366<j\364\301\275`W5\275\317\211\016\275\331\325\236<\322\005\265:\345o\006\275\270\301\307\273\241\255\233\275\331\034\005\275\217}w\271\213\245\244<%\341\000\275x)\205\275\255R\317:Y2%=U?d\274\242%\274;\033\021\n=K\236\211\274?r\217=\027}5\275j\326_=8\316\322<\007gS\275\010p\004\274\r\363G<6\302\366<q`\252\274\335\037\303<iE\035=i\372\365\273\032$X\275$\271\035\272\357\221&\275\345O\326=\003\223_\275\340.N\273X=\233\273\305\250\267\274hK\352;\340k\214=\376\020\037\275vHG=\375x\202<\255\236\002=\351\336\227\274;N;\275\321\021h=\210x\r=H\263s\275\035l\037=\2010\201\275n6<=\t;\245\274\201\251\242\275iS\221=\"g\1779\032,4=K\250\021<\345}\017\275\212^\312;\356\371\253<YYb<Y\232\000\275tdV\275\225\357\246\274\203\324\211;u2\261;|\335\016\275\334OL\273V\343<\275r\367\001<F\221\336\274&Q\235<x\231\323<n3S=\274\025\331\275\0058i<\344\335>=\251\000\274\274\313\331\312<\353\257\367\275\r\254\260\274\034%\216\274X\024\023\275HO\266<\332+(=\232\031U\274\353\316\200<N/\004\276\032W\014<|2\205\275\235\006\237;X\023\204=\254%o<C_\274<Xok9\363\020l\275\263\323\347\275\214D\000=b\202\220\275\253\3144:\331\354\352\274S\370\"\275<\0002::/\230\275\275\371}\275S&\216;eu-=\211\200\321\274\275\3363\273\324\232\370<6h\326<h\222\225\275\2519v\275\315\356v\274\321\362c\275{\036\026\275\341\315s\271\362\255f\275\241\031\216\274D\033g<\003\2165=u\003r\275D\336\230:\016\n\343\274\245Si=\357j\317<\241v\'=,A\022<\310q\000\275\224!*\274\027\363P\273\351\263%\275\2200B\275,\020\261\271\354\343?\271t\247\325\273\202w\357\275_k\027\275-Y\203\275P:\326<\356:\222<\t\275\207=\355\322\026\275^qF\275m.\331=\315z\270\2740\224\320\274)\250\220\273\021\261\356\274\276\265\343\273:\263\202\273\336\323l=\027\307E<F\222\001=\324\277V\274\026\216\367\274\305d\300\274\201\353l<\372Vb\275\335\305\023\275\272\302/\274\033\314>=l\350#\275\217\n9\274\310\310\224=\014\026u=E\311w<\"7\223<@\231\r\275\304\313x=\244G\300\272\361\301\310;\226k\301<\022\205\311<W\211\013\275\010e\353;\256\333\346<\374\305,\275\265UV=\244\214\371=\254n\204=\264Gt\275\364\271\317;B\034\n=\255r\004\275\350\251\271\274\022\313G\274\355s\350<\202\r\003=\037\353\236=\263\3064\275n\025Q=\177\024S\274\251\272\217<\225\200\203\275<[\344\273Y\036n\275R\022P\275B\335\027\275\006\265/<\207\253\351\274\306&w<\337\\\'\275\261\313I=-?a=%\"m\275\224\316\261=\273g\243<e\207Z\274\313\206 \274\266B\212\275f\006\013<\372/\304\272\201\367\266=a\034L=\277\345\306<\2169W\275\271<\\\275\234kt;\003\213\240\274hn\216\273aOa\272\306\364f\273\207t\306\271\203[X<\3576%\275\026\213\356:\013\017\241\272\001\205\273<\312!\300\273\245\320]\274T\374(\275\233\350\264<HF\025<\220\006\237<*\316I\27526\366<By\206\275O\244\261<\262\337\267\274\276 ~\275\376\232\366\274\273\271\177<\020\2425<aZ\343\273\201\2174=+E\330<\223\327\017=Z\243\245\274\304[%\275.\277e<\t\203%\274\321\005t=\215\234\357=\035[V\273\363~\237=\255\375\000\276\214:\312\274\2344\222\274\242\374\207\273\260\n&;\265\327\355<k\206%=\026\275\024\275\206C&\275\354\322\376<\267\265\250<\363D\322<\206\261\231=\323\250o=]5\245;\0333\030=\221Bh;\207\177\207\275h\324\003\274S\322\211\274G=\017\273 %C=f\375\333\274\331\361\326\273D\024\255\274uK\210=w\2065=\2675\025=\037\230\232=e@\260=@]t<\334{\303=N\337\202\275? \325<\240\213\220\275\023\313\316<\216\ng\275\203Ml=m\320\204<\320\274\347\275\252]\240\274\373y\034\273\037\207\373\2756\350\021\275\335h-=\367\225y<d\177\212\275#/\251\274\204/\304\274dZ\245\275\376hT\273-\304\342<\350\267\253\275\236\264=;\337sR\274\221\230\224;\207D\220;A\014\360\274\336\341\314<.\273\274\274\236\262\036=\233\205J\275\3374\323<9\204\324\274C\363n=\324\222J\275\355\3058\275\232\n\257\274e\213\352\274*\030\340;\265\006k<\260,\035<\275\034\224<\275\2230=1\374\265\274{\370\002=\0344\231\275\264\220 <\223\000\t\275\377\314\222\273XR\310\275\002\233\351\274\255D\305\275\346\257V\275\373\3176\274\261\217\261\275\223\355\215<\256\200@\274c\305Y=\217\252\267<n\234\356\273`\252\017=\237\243>\274\"\232\210\274\346O\243\2750\214\232\2749\2225=\026\247\216<\020dy=\370\2022<n\330x\275\345U\312=\271\337,\274k\220\212\275\006\252\034\275\242\rq;\005/`=j\250\373\274\232\2750\275+9\357;k\250S\274\232\376^\274\314D\342\274I\373\273=\367Q\245\2746;\026=\004U\237<\237hS\275d\202i\275\334\027.=#YG=^\016;\275Y\036\277\275\322\004<=\n\n\014\275X\n\002\276\323B\214=\004N5\275\243\333P=l\r\363=#\345\020=\340\036\030\274\025\230\220\275\372~\230=\224>\303\274\273\024\257<\207N\020\275\312\301\216<`?N=\262\311\306<|\014\203=(\2633;\027\312\255<\345\376\230\275:\236\034\275h\335;\275\306\025\036\274\310&-<a\211Q\274\335j\"\274\350\243\261=B>\027\274:\346\227\274\344\325\000\274\333\036\360\273m\371\360\274\327\373,\276\032\027;<\200S\254\275G\rY=\277?\300<\265\337\334\275\260[\025<p3\254\273\332\276\250\275\211!4\274 \\1<\032\253>\274\231\263,5p\201\316< ?\320\275\027\266\223\275A\266\353\274\014\033\365\273B\2608\271u\201\304\2745\300\264<\177\244@=f\316\010=\352\356\341:\350\0270=\300\335x;0\264%=\177F\325<\3229_\275\t \362\274\274W\346<\\\"u\275\271=\250\274\313J\260\275\340\0029=_\305X\275\266X\306\274^$\265\272\316&}\275/p\337\273&\324\310<\365\307\304<.\022\017=\206}\364\274\363\331\264;\274\304*=O6`\274pA\003=\371\362F\274v\360\367\273\272\301;:\036\336f=Zo\235;j\360\\\275Jqd=\225\236\254<f\024l\275\030\024\236\275\204\021\364\274\020AE\274\211\356\237\275x\274\274<\353\367\315\274r\335\002\275\304\264F\275\254X\034\275g\356q\275\333\353@<\310\217B\275\2642\237=}\034_<m@\001<\257\216\271<\'0\365<\315`\267<\202\231i:\357\177\000=\253f\332\273\035=\252=\222\244\025\275\267\335\245=v\350$\275\0057\021\275$\035D;;\016\350\274\302\276F\272\337z\021\275\325\027\205\274\216\313\214\275\312\270p\275e\233(<\226\325I=\376\'3\275\317\223\005;\314Fb=\346T\306\274\010\216!\275\334)\023\274\250\037Z=\274,\356<\315\0104\274P\340\177;\275\\\n=\204\025n\273\001\323\354<o\361\234<\2006\321<\201v\252<\343m\220<\027\033\375\274\325\373\031=\305\245\253=*\200#=lM\025=\316\277\013\275\201\t\321<\230\250\335\274\254\215\365\2735\351d\273\351\255\360<;\215<\275\311g\317\274\014:\373\2745s\001<\320\3623\274\310\025\016=*e\255=\216\345t\275\313\\\345=\216\021\214\274\321\357\024;\303\023\023=\303\303\234<\232jX=\355\302\214=\234\'p=v;\275\274\370\216\272=dv\321\274\252\304\233=\032\0369<\365G\352=@\"J<!\235\247\275\352\317\356\274D\021A\275Y\255\n=\240\370\237<`\235I=-\2156\274\203\252\237\273\373\366\243\275\274\375\236\274\024\373\374:+\336\\=D\340\177\275\n\000\354;RMJ=\'\031:\275\204\313\247<J\237\014\2756\327\304\275\005\313\276;K\000P\273\311\331\236;7\275\243\275\210M#9\320\254\247\273\221t^=Olz\275\257\330{<\264\237\257\274\272\236\331<YQ\270\274Z\346\323\272\rsp\275\240\322%\275\263iA<\316\352Y\275\001^\317<z{\207=\315~N\272\301\261\206\275\251\'?\274\351\006\341=\203\241\032\275 \2036;\366\317\005\2755\237r\274&<\322\274+\2245=\\&\024\274\3402\277:+\213\347\273\235\276C<\220\362\314;;d\333\274\372\302\266\275\324\036\210=c5!\275\332\024\367\274\274\273*\275iZD=\347\307g=6)\315\274E\375\t=t\241\r=\377Vh=I\337\177<\367d8\273\202\207\021\275\226\351\007=s\201\235\274\244GO\275\217}\323<\332\037\023\273\207U\036=\252\316==75\276<\'g8\274\305\'\020=;\263\202\274v\371\330\274\215\367+\275\027+\244\275\272\212c=\023\002\314\273h+\327;\2061w=\206/\310<z_\323\275\217\251\343\274&C\246<\375@u=VTh\275\246\344M=\266\340M\274\255w(\275\205:8\274\tT#\274\362b\213\274\231\256\331=BF5=\223\016:\273\310pS=`!V<\202\353\r= P\243=\3424z\274\273\343\210=\025`\247\274\372\3476\272\345\017\305\274\327\034)=\036~\n\275\035\204\003=\366\354\212<N\317i=ihh\274\261\t\013\274\242\000\217<\207\346\317<\233G\027=#L@=7g\317<\"\177a=,\335\252<(\352h\275d\335\376\275\360\207\220<S\204b\275\032\330\212\275\347F\235<f_\030=\024\320\n;\030\216;<\215s\254\275\020\032S=0\256\300<CRK=\350)\006\273\354\033\303;-A\203=\310\274S\275J\310\216<\227\355\343<g\037$=\262^L=\002N\006=\334\010\030=]\247h\275\022\177\233\275D\346N\275;=,\275\252\277V\274\343X\253\275\336X\275\275\3425\013=v\350\210\275p36<5\376y\275_1j==y\260;\320\366\302=V\266\260=\313\270\253;\335,>\275E\263\010\275:\325\317\274\023\240\265\275-Ic\275\036\231\247;\016\353\372\274\0255\375\272b\032\337<\002\270\031=\3761\276\275#\301\367<pm7=\017z\007=\30052\274D@\300<_\t\242=\306c\211=\"\341\214\273\226\225\202=<A\254<\355\3254\275\'\364\"\274\205k@<S\266\331\273\262\324U=\250A\023=h\210<=dZ{<\327\327:<!G\032\273\324z\005\275\004\253\252\271\340\276\034\275\030k\003\274\355ry\273r\225\216=\213\204\253=\337\317_\275\2344K\273~q\361<\231\370\240<Ps\307<5\0176\273\020\350\344\274\276)\315\274\005\313\243<\n\223\020<\362J\347\274e\010I\275\233[\326\273\250\023\251\275\233_8\2732\346l=\272qi\275\262n\304<\005F\306=\327\t\311\274\"\342h\275\274\363\002\274\256r\203={ \265\273\020\367%<\300\035\310\272\260\372\365\271\362 \210=\253\221\262;c\312\261<\037\317\021\2759\214\220\274D\242]<\257\242\\\275\331\256<=\312\255\313\275w\245\025\275\246\327\275\274\246$F\2754\014\370\274~+\342\274\3477}<NE\302\275z\225\'\27300\340\272E\232J\275\301.\373<Z\2243\274\266/\236\273\2720\362<\010\003.=G\203\214<\3560\013=\321%\261<F\374?;c\316\031\275\350\212\300\274\330\264\\\274\246\255\204\274RS\013\275\3550\203\275\023\003\232;\376.\033=\000C\312<\353@\245\274\203lZ;\252U\267\275\262\336\205=\252\367\000:\347\366g\274X\324\020=\024W\371\273K\234\2679^7\220\274V\354\257<\2529c\275\346\234\204\275\330\354\227<\205\025\000=n\021\331<\363\'-=a\003\261<f\226\217\274O\220\001<v\003h=I_\000\275K\024%=\226\201c=\303\022w\273=e\031=\315\2459=\252u\224=\373~\235<`\373\342\272w\301\034<\313z\203=5Dc=\'\311\326=\262\310\317<\234\360$\274\323@\211\275\334\327\303<\266hV\275\265S\001\272\006\262\342\272t\312\241=U\t@:c\325P\275%=\334:z\003T;\363\220p\274\017\273\264=\325\264\346\274\337\373b\274:\242t\275J\344d\275\226>\343<\216\\\027<\214{\002\272,T\207=\344\247\006\274\206?y\275\317\036\264;\365^\252<\022+\245\272\037\313\"\274\333\343\275=\323\225\377\273,\373\2569\231\262\222\274\357\300\034=}\332\272\272\236\340{\275\201\373\236=\354\241\033<w\250\236\273\363Q><M\013\376<\214\013\245=\032\376\316\272]\323\005\275;\331\022<\007\223\201\274\n\342\025=\270\360\005\275\240\235\000=o\311\020\275\351\337\241\275\035LV\275.J,\275\277\243\271\274\263\270\247\275\030\362\022\275\346u\270;$\303]\275O\241\216\275\333\275\\=&\377\245<\316\004\205=~Ye\275\315>\006\274\010\223\200\275\317$[<N\311\260=\366\271x\274[\177\204\275{\r\201\275\343\2622\274\371\310\031=\273#\020\275\334\037{=\204\355(\2757\365X\275P\313j<l\014T;\327\214\253< \260\365\274\305jJ\275\235\326\370\273D\305\007=\225\214\000;\210\370\332:9V\361\274\310i\010;Q#\262\274R\244.\275\027\022\351\274Y\352A=\304\031\222=\366\262\266\273\336\322y=\272\264\007\275\22487\274\013\234\316;r)J\275l\347Y=4\010\r\275\245\005\313\274\226\201\022\275\341J)=\242o\224\274\223ve:\352\316\203=\217\234\202\274\350Z\233<\177\331&\275\230\017\262\273j\266\'<8 \257<\241\205\207:3\313\253<w\344Z\275\014\242B<,\327r\275\215=\332<\005h\273\273\373\010\222<\323\001w\275\330^\273<\237J\374;]\275\306\275\371*i\275!\311\320=\202b\203:\034K\277\274!\262P=\362\245X\275J\363\036=e\233\251\273\362\263E\275\000jT\275\0333\251;\004T\370<\252\214\234\274\272h\273=3\017&=\207\261\200:\007\227\023\274\213z\223\275\025\340\004=&\352N=Y\364\364<\333\224\r\275\211!3\275S\345$\274\323\252\227\274x\273\203\275\324\325\220\272\301#\365\275\305)\356\273*\267\"<\247\271\246=!\300M\275y+\260\275\025=Q\274w\254\210\275\227c\307=\237\367~\274\363k\240\274e\342g=\362^\326\274\232\245\347\275,\257B\274l\274|:\233|\201\273\221p\256\275\265-x:\032>D\274i\211\035\275u\365\006\275\316\341\250\274\024\212\340:\217\346C\275\013\352\360<\250\311\027\275\n\242H=\326cT=*\316\321\274\244x\2438\260\270\330<\213\\J\275\266:f<h\352\300\274\273\333\250\275\002\230\206<G\241\241=m\370\353<85[=\035H\202\275t\201\375\274t\310|<{\270<\275q\253X\275sK-\2759\344/\273\242\317\310;\032r\004\275\366\242b\274\301\3732\275\207\347b\274P\354\267\2747\303\020<\2553:\274\271\234\244;9\007\335\2740\211\022=\245\337\237<\323E\337\274\234T\021\274\347\tv=k\346\"=\217\346D\274f\365\253\275\013\210P=e\327\357<J\036\247<\234\232 \276p\337\337\273\337Tj\274_N\303\27306e=\347\364\t\275Cua\274#\276\266=\356\324s\274\346!\217<\325,\300\275\343\343!\275Y\240\353<\245j\267<P\331\331=\037\352\372=\316\006\017\275\230\3541=\356\027\353\2747\3702\275\222\357\017\2758\306\036\273r\007\t\275\347\353C\274#\252\273\274\020k\366<z\364\267<\277\204\262\275\344n$\274\312),\275\030@5=\371\353\204\274\274,\202<Y\347\321={\031\330\2745;\250;Z\257+<\240\206\262;M\375\235\274\371`\223\274\225\251\201\275\355\227n<2\260\"\275\362\003\263=\353m!\275n\331\265\273\364Y4<k\325d=f\314\226<\022q\251\274\007\354\017\275+\325\231<\326\327\216<\201\364\244\275\214\246C=tA\314\274\006Ma=\252\001\030=(\335\343;\254\341\241<\2778\222=J\202\233<|\356\251<d\225\334\274#\357\222\275\224}\347;\t]\301\274\235I\343<\346\331\212\274\321\315\023\275\226\024\034\274\203rz\275`\"\301<\033\3340\275\220\360\201\275\274\026\213\273\177\220\261=\207\325\251\274\247x\027=\331G\316<\374\237\230\275=E\270<\366+%\274\373]\275\274\330\241\270=$T\360\272\202\331\202\274\240!\216=\221\000w=\367-\272\273.\354s<gUk=\305\205+\275\031\340\216\274\276?$\274N\231\315\274{\364\305=\376Ia<\334\275};]\035\355<S\240\364\274\300\002:\273\225Zq\274\356\356`\275\\\303\302\275\225\344\263=@\265H\274\001ug=\215_\257\275\352\216\210=%\024\025=\353\230\331\274\203\373\205=\234\030\244\274\324\263\373\274\014\tT=\233\002\226<\010pG=T{\246<\225zC\274\251h6<f*D=\236\223U=?{\203\274\024l\3638\033BL=\331\350\350\274\210\256V\275\232\\\031\274Y\262\003=\212[T\274\370if\275\270\026\302\273\306\312\222\275\221\321m\274\211\255\257=\001\265\275\274\361\236\202\275\372\212\261<\013j>\274\271\270-\275\272\340\351<\007J\022\275\327\261\233\272\207\001b=m\316\226\270\333f_=\303n\200=\001\321\007==\035\370\273\2717\342;Q!\355<\326\240\016\275\006\316A\275\205&\201\274\362\255\234<\201\3033\274~^\013\273\353\233*\2741B\356<\316\336B<\330D\245;\241\365\300<\271\316\305;\361\210\344=\253.\356;xpQ;:\035)\275@\355m\274bR>\275\332b\007<0sR=\370\000\362\274Yd\255<\205\260\226<M\031{\275\304;\024=\236\305\206\274\014\025\247\274Mux\275Z]\363<\201\035K\275eU\222\275\263\316\223\273\001D\212=\317\264\033=\032\232C\274W\311\225;T9\262\274\374t\325\275\2072\353<\357\216\221<65\335\275W\267\006\272\002M\347;\t\262E\274e\345V\275\245\030b=\327\372X\275\204u\023=V\025\006\275\003\2306\275\231\361\225\274\255&\303=\345Pg=#\234\373\274\'\201[=\370\" =\252OT=\244R <\245\017\203<X\373\202\275F\324\303\275J\215\207\274\341Gv\273\034\277\037\273\026\371\\=\276\337K=\363\214J\275\226\316\245:V\255\022=\264\302G87\274\346\275\313\222W=\301~\234=\331\311\240\274\031g\026\274V\227\311;\035\351\357\274\250hd<=z\275\274\177\253\323\275\205\257[\275p\334\352\274t\375\254\273?P\364\274\304\2301\275\353\247~\274P\000\'=\033\354\006=\233J\006\275\364\217\004\275\356>a;\000\225\250=\014\242\344<\371J\207\275\346\360P=8M\200\273)\377O<\272\214E\274?\007\010=Ev`\275\\`\245\2753mV;\001\364s\273]wz=\335\021\240\275\261\264N\267\026d\220\275\265\250;\275\212\231\177<3k\202<\371\331\200\275\311\207x\273d\345D=\023\366\226=^\205==\025\225K=\306];=tG\310\274\006\036\232=7\354\202;\351\013\316\274e\001_;\263\276\030\274\203\251g\274}\343t<&\311K<\354\317\014<\235W!\272\244M\265:\260\344o;\024\335(\275%e\361\272JU?<{\3718\274\245F\\=\333\270x\275\355z\255=\t\212\237<\204-\035=\314\230C=\375\n\035<\026\361\242<\025\366\320<>\211\272\274\030\277\220;0\257Q<U\270P<\3348\250\275\215\037\224;\227U\346<\322\274\214=\310\002O<\245VM=\244a\320\275\274\212\302<\037\241\253\274\016\022\270=\212\355\007\274\303[\315\274?\2263=\310\271\200<j\013\022=\276\243\034\275$\352\313=tM\240:\031G/=\316\014\321\272e\226\352\273\376nq;RQ=\273y\370\244\274\202\3014\275\310\230m<,\256u\275Z\r\261=K\034\006\274\000\260,\275\253\204W\275\364\022\031\275\225\270D=\3678\305\274\233G\030\274\024\325\215\275J\333\201\275\336\263\341\271\002\351 \275\026\2373=iNT\275yp\307\275\343\016\324<2u\030\274\215d\235\274\031Y\243\275\216\346\362\274H_\037=\341\316s<G\214\210<\350\2139\274\210\274\013\275A\030/\275\316\035|=E\241:=\010\0047\274\246j\221\274\361\271\214\274\344A\301;\262nU\275!\375\246<F\271&=\016H\303\274b)\204\275\331\210\023\275i\262\227\272w\231\213<<?\235=QF\002\275\341\256\350\274\262\211\242<\3102Z\275\206\023v;\206\020\320\274\340\203\036=[+\001\275\373_9<e\036\244\275\334\221\212\275U\311\217\274w\326o\274\266\310\226\275H.Z=\007\3650\275;\257n<\177j\201\275\241+~\274\233\370F\275[*\214\275\277\277)\275/\261\245=\242PH=\253\220\221\274\037\207w\275h\220\321\274&\356\200=!\317\036<\222\365\223\274\326\347K\275)\\H=Gh\330\273\004\356\241=\016\305>=\3047V\275,J\020\275\376{\246\275.\305*\275\022Wo\273\010\327I=\017\020i\275\307\363;\275C\242\367\273\037\265\337\274/<\036\273\004\254\020=^Q\211\274\263Ju\274]\374\321<\260r\013>f\223d\275tW\227\274\034s\033=t|^\275U\352/=\234\202\305<\207\327K\275\343\244*\275u\034(\275\201\201\234\274\364.\212<\350\\\230\275\2473\203\274\002\" \2754\237\314<1 \234\274\234\213N\275\305\253\000=\253\260S\274\204M\335\273\323\341k=\266}R<a\322\036=T\026\316=^\373,<\020<Z\2738\324\321\274\354\027\244\273\376\374\317<X\005\002\275\264]\013=\351\203 <T\301\227\274\371\314X=3\334*\275\256\201\215<Ea\262\275\024\3475\275`Wt=a\205\211<g\235\324;s\322\226\274LT\270\274\014\0346<\370\246\277\274\253\375\350<tM\025<\001\233\265<\324\371\003\272\21606\274\345I\345\274\353\201\234<\3465\213\275\217\261\205\275\270\327 \274\357D3=\037\375\033\275=\321\310\275w\\\n=\243\316\216<\202y;\275O\216\034=\370\203\001\275\n\301\316\274\343\332\300=r\345X\270\375\017*\274M\014M;\013\025 \275\355\313O=\323h\324< \227\221\274\177?\365;\323\345^\274\343\035!\272\350\235\216;S\212x\275\007\241\205\274u\026\277\274\n\260\002=\330N\217=e\363e\275\247C\314\274\231\014\000\275w\366\351<\365\246K<f\302\203<\221\247\016=e\316,\275\3411h\275\205I\215\275\317\262N\275\266\347\250\275Is\206=$\300\022<\330%\223=\215$x=>\n\034\275\346\330)=?\032\271\275\363\346N\275\023_\370<xq\203\274\301te\275\303e\234<\223(\272\274OQ\221\275\331E\354\273\026\350\246<N\035\202=\310\220D\275\315\006H\273\354\224\233<\211\344\223<\007\342\316\274\313QH=V+\312\275b+\272\275?\316\331<q\017s\275\362\354\350\273\003\200+\272\033je\275\216\341\223\275\335hS<\250OD\275]\370\233=\336b\365\274\272\304\234<\360\004V=P#\350\273\362O#\275\356\253\n=y9\007\2736\226\322<K/Y\275G\2742\275\022q\352\274\231\t\226\2759G\302<\317;i\275?)\245\273\3701I\274\002\223\"<\357A\235\275\353[\275<d_\026\275\350{t=\2419\356=\026\002\007;!q5=\033\352\221<\03235=rI\215<P\224F=n\231B\275\017\253\307\274A\250\004\275@>D<\257\221\"=\020\033\312\273\311\264 \276\022\204\346<\231\276_<\373\0060=\250\361m\274\242Y\200\274\366\235j=x\3763=\225yS\275\240|=\274=\226\256;\214\230\267<\302L\212<\2117\321<\256\374\306=A\'\207\274\314Z\234\274\307\366#=\300\314t\275Rq\306\273\224Q\326\274\277\006\241\273+\213\031=\255\304_;\255\010%={\321\274<\311G\234=\243\210\303\275\250\253\210;d\345\267\274@/.\274\004\3237\274\274#!;IX9=G\306\206<%\335\\<\370\362\316<\351B\024\275\326\313B=]\023\200\275\335\304<\275>\014\221=\027)a=\267+\004\274\375\306*=\363\000\221\275\267\t\273=\200\365\246=n\036!=&\363\243\275\345A\360<\270\035\211\274\375\260V\275\2172\247<\r\312\202\274\210la\274\006\364\357=\020[\224<wFz\275\323s\313<(\256\225\273\001\306\375\273^\325\005=V\306B\274\321\257b\275\201\351\017\275\271Y\232=\224\033\253<O{+<F\357d=\212&\000=\232\201W=\017\3539=7\235\252<\302\005\003\275\357\r\353:\221\232\301<F\332W<[\230\003\275\334\033D<`\210\310=1\014\357\274\356U_<X\205\355<m$Z=s\211\263;\027\361\225\275\212)^=r\277\'\275b\257\014=\274\352\213=\330\376Q=!x\203=\365\205\003=\006M\003=\t\026\221\275.f\345\274%\320#<\370\276\201\274f\347?=\311\3019<\007\t\310\275\235\222\213;\023\030\227<v\207\272\274\225\375\316\274\231\375E\273\003S\177\275\350t6;\024\273\234\273\032\032S\275\255\246\302=\003^\023\275\3649\350<b\234\205\275\372\031\356\274\007(\214\274\335\354\031\275\240\027\226\2758Yy=\245\315\016=\224S\256<\313H1\275\301\014 =\305<\245<\367\372$=\322\017\256<\246)K\275\202\363n\275\234h\360<h\310\304=6\023z=-\177\313<(\010\336;\2369\255;w\370\023<N8\243\275\307\030\004\275\267\317(=\033m\246<\232\205\221\274\260e\212;\354\224M\275\001\271%\275\230\201\t\275\315}I\273\3347&\275\372\371A=\335\343`=#@?<g;\204=\r\036\225\274JD\360\274\226\177\213\274\331\352\013=\233\036\216\274\320!I=;\244\240=\"\033==<\351\313\274@\'\234\274\361m\027\275\351\201\004\275\321\020\345;\374\346!<nE\205;&\257\264\274\rb{\275.\352q\274\235f\203<v \006\275\244\007n\275\3771\273\275\255\200\377<\271\342\304\274\225\016?<\217\253\322<0\t\360\273\202I\210<\3661C<\255\233\026;\322iz\274T\263\010\274\360&\203\274~\261\247\275\003\322X<\004\013I=\377P\364<\005\353\377\275\236wR\274Q\034Q\273\034\216_;i\231\304;Q/Q\274\325R\261<l\242\360<\265\210\250\275K\215\020\273\2606!\275\351\205E=\271O\035=o\336\032=)\005\226\274]\360{<\252\017\323<\324\360\237\275\350/\322<\004\372\223\274\364\325\"\274\345/[\274\3416\"=\305\"\314=\211C\203\275\016\000\346<\324]\215=[#\355\275\207` =a\355\212\275w\3716<\316\250\347;\014w_=S\272\266\274`\315!=\263^]<KQ\351\275sE\221\274\013\203\316\274\257\215\240<M5\303;/\035\225\275\323\235\352<\240,>=\007\354\354;\224\312{:\346{\367<\305\351\251<\252\026\306\274WM\236<t\237\300\274\216\226\027\275e\311\264<\212\264\371\274\002\247\314<\277\306\010=\341M\320=\017\357$\275\270Y\"=\346?\227<\213\025{=\276\0060=y\\T<\025\277\007\275\226 T\274\367d\326\274\232\371\\=\013\001]\275\274\240\331;gQ\320<.\034u=\266\303Y=^\014\345\274\256\354\265\275*R\255;\356\3008\274\217\310\376\274\'\023\026<\212\232y\274\321W\305\274LiS=\261hk\275\342\314\333=>D+=\251\243\253\275\2731\006\274-\010K\275\271\305\220\275\354\255\241=Q\376h\274*Vp<\244\022f\275\332\226{\275\\\340\323<*\r\244\274\276\224\272\273J\267o\274Uy\241=\252\306\242=\361\306\034=\360\0165<@\234\016=\245J/<\204\217\272<in$=N?\275\274\333*\202\275\253~\207<>6\313;\357\314\213\274|%\343<\254\231:\275,\0016\2746#8\274\026Y\226<C\373\027\275\213\200\014\275\232\372\255\274=\030\235<\205\204\203\273.\242\177;\242\024\243<\321\371\301\275\352\233\256<\255j?=\232\261\377\274v+\327\273\224p3=\017\355Z\274n\366\001\275,\030\316\273\331t\035=\\\\J=\312\323\325<\316\222\355<<5\363\2749x\277=|\034\001\274\n<\217<E_\371<>\330\312;\340{\271\274\252s\202=\010\361`=3\0240\275\366\024g;7\336j=\200\340\360;\250\377\204:\303<\353\274!.\252<\tO\370<\245\"I=\243L\301=\034\226:<\343\373\325\274[\275\236\273\261$H\275$\233\312<\224\304\005>\370\203!=\034E^\2755\203\366;\222\367\230<\376\033\225\274\303\255`=w**\275\225\223\313\274!\316\236\274\354\352\243<-5\034\275\375u\023=)\005\003=3\245\301<W=\266;\202\341\351\274\363\271I=,\254\214\275\355>\234<*\211M\275\036^\252<t\264%=\333\321\273;i\014\207\275\006\262\225\275\004\356\206\275\001z=\274\247\330\306\274\023o\303\274\245\355!\2750\263B<\177s2;\215\235\020\275\213\252\315\274\247/\206\274\316\205\010\274\177u\022<\014\236\220<\036|\212\275\344\213!<\333\365\265<\303\211\374<hR==\005\244\266\274E\004\215<\207\247!\275\260\214\257\273\030\"\200\275m\370\033\2754R<\274\205\241\222=\031\3714=\022\227{\274jG\000=\252\372\211<L\"]\274But\275\034z\014\275\360\353Q;\307\204\303<p\362\251<\031T\306\274O\035\230\274h*\033=\'\201\035\274\001@M=\252\321\327\274\\\363\243;\3216\235;{\302\256\273\201\360\267<\236\006\250\275\370J\000=7c\251\274\373\362\270=^\014\300\275/+1\275\334\275\212\275l\016q=\340a\307\274C\032\275<\246V\024=\367\026\004\275\366$\211\274E\264\313\274\265\016\204\275\332\240H\275\356\365\000\275<\312w\275\357_G<\220i\253=\233B\373<\0039p<\\?e\275\370\016\277<\275\244\001=\201U\242<\021d\201;\002\214\272<\222\003S=w/3<\265\247\t:\254\225\241=2\346\251<-\227\361\274\270\233\236=\354|\212<\205,3=O\027\325<\371|\305;\247|\250\274;\363\010\274l\253\311\274\231\274\225\275R\333a;\r\225Y=\033\'\302=\345\246\021\275\004\004\200=\272\030.=N\334\217\274 l\257<\366\307\241\274\344\240d=c\264\271\275\\\305\305=\362\240W\275\212\351\364<\341hq\274\262g,=\027|\017\275g\317$=\256z\233\274Y\367\374<|)\205<[\030\321<\304B\206\275\203\254\264\274\244^\227=p\200E<B4\\<\020\".\274v\255\377\274^\3435\275 .\020:Y\372y\2745\202\233\273*5\306<XC\031=\316_\270\273\347C5\275\310}~=\355\200\014=i\321_\275/s\020<\206\333\317<\257\007\213=\375\304\361\273\275\034\016\274\266$1\275\350\010\235\274\315X@<Xz\t\275\r^.\275\360\002\204\275\242\356\021\275\'/\000\275\230\337\300=\306\0320=\352\024\203\275\310\201\215\275\265\'s\275z\2006\275\372x\374<k\017\007=\021;\000<\326\325\372\275\221N\022\276\243\324\202\274\346\305U=\326O\271<\242\r\262=IP`=\355\034\236\274J\010\376<\377$\232=B\2054=\031>8=\262\332\266<\214rF<d\370\365<4\352\217<!1\024=\224D\215\275j\334W<t\227M\275\r\212\037=\013\272\310\274\235\224\003\275\224\177\210\275\214\214\233\274\373\227$<fP\261\274\022\026s\275\240@\r\274\372\204\271=\036Z\"\276T\240\023\274\340/#\274-M)\275j\235H\274\235\024\010\275\3004\210<\021\373\327\275:\343\303<\241\351\201<+~\'<|\222U\2757\362\214\2750\335\254\275\2272\315=\215|\333\2756A\306<\3307\216=\212\362l=\205b[<\036\235\033<\316\363Q\273\022\242==U\t\356<5\273\214=u\350\362<\346\032-<\242I\201\275\265V\313;J\365\030=\212U\346\273\336<\201=uG\303=\263\370\254\275\335\223\363\2744\257)\273\265\212\207<\312\031\037\275\037{\342\273\033\3260=Z\002\353<\036\313]\275F\3637=s$K\275Jt\206\273\200\225\377\274d_d<\313\0145=\017\016\022\275\327\216\001\275\246h\321< \241\351\273\332\2337=\237\321[<tqK\274\037\203\323\274\316\237\343;#~\300\274\003Bi\275\033&F<\360\177O=l\206\316<\322l\355\273\3755\225=4\014\376<\375D#9\036\020\223\275hA\355\273\251P\240=(?\001\275\365\374:<W\001\271\273m\3449=n\267n=RN\212\274\010\021\037=\264\021\300;\\\005\307;\365Z\013=#+\022=\337\302e<\377\033\257<\206\272\205<\2746\247<2\334S=\300\361I=Q\307\326<Z\036\020<t\306\334<D&\n\2735*\232\275_\265t\275o\306q=\272\255\251<\352A\265\273u\343S<R\267\002\275\226\201\224;\017\345\336<J\000M=O\223\375\274\021s\221;\0343\327<\037\361/<:\314\254\274\203s.;\336\304\266=\"\370\014\274\375\273\217\27544\206<\262\207_=\257\023g\274\205\036\336\2739b\215<gN`\275\207\276\177;\246);\275\351$-\275\370\345\013;=\237\245\275\016cP\273\216+\305=t\207\226=\013KI\275\034]\254\275\204\002\273=\364#\035=/|U\275uxg=\032a\245=\354*\037\2742J\314<\301\340\374\273\364\356\n\276l\336\323\274\014\351L=\216a\305\274\257\372\014\274\231u\201\275oZ\r\273AH2\274\022\222\373<\277$\n\274\206\376?=\251\216J=\010\300m=\257\327\316\274\256\212<<\002\000\226\275\232\370\026=\315=[;\354\362\267\274\346\200\266;\255x\377<\336\367\213\275\311\022\231:\352\0305\274\221\010\226=UQ\265\273,\3439\275A\242Z\274\315\233$\275\346M\321<\2206\310<\314\317\205\275\370\t\207=\037LM=+\347\310\274.uK\273\252\230A\275-\361\267\274\3542\341=\017\352\365\274\365<\303\272\362\346\324=Czo\275@,\023\273?\231\036=\352@+\274{.\307\274\264\312\267\273\221\324\275;\017Cf=\263\007\227<U\237\363;\245nx\275\213\004\022\272\362\225\227\274\362u\227<\307\214;\275\3412\"\275\375\346W\275\004\2537\274/2v=\031\223\351\274\335\313\221\274\232\033\000\275{L\201=\002*\336<\322[Z=S\355\010\275\235d^<\302?\223=\354\215\316:\211i\006\275}N\253\274\316_\362\274j\003w=\026i5\275\216\234w\274*R\340;\370\341\017<\307I\315\275~\252\354\274\251\366A\275\220\362S=M\215\025<\330!\030\274\212\377\221\274Hlu=J\264\t\274\305\206.\2750c\335<\221?\010\275+\265\241\274\212\271\236=\354\2505\273h\214\025\275\'\023\274<@~\007\275\351\240\212=\204\262\264=\355\256\"=r\021\026=\356B%\275\033\352\r=y\362\351<\3477\214:\010\330\201=\354wq<\363\231\220=)kG\275\206\320\020\275\361R5=\177\311\221\274\020\314\265\275\257[\277<\332\337+<\232\372\230\275\222*\322\273\027%\005;\022lS<\303+\177\2738:\025\274\331lp;\320\223\016=\351\024D=%\223\2538\314R\017\275-\243M=L\2335\275h\263\245=:T\215\275\025_E\273\024\0376\275\360:\221<\220t\251\275\n\266\301\274W.O\275\211t.=\253\364\t\275\032)\211\275\271\340\\\275Z\300\031=\332I\236\274.\211\020<\324\305K\274\221\367w=\354oq=t\363\273<\231}\236\275\032\347)<\021\3313<\201J\202=V&\342\275\220u\332\2742\366\202\275\032\320\215<Tl\251\274\tW`\274)\353\231\274\004\353\341<\201\306\014\275\242I*\275\nId=j\366\233\274D\351\017=R\347\014=\'\363\210\273\032\034\347\273%x\247\274f=\004==\241\r\2752\203\234=!\315\221\273\2726\371\274\033\245\365;\nd\260\272u\255O\274\251lZ\274\016D\247<S\002\026\275\330\363\222\2750\nN\275\264\0244\275\t=\224\274y2~\274\310\342B<\353\030\222<\252\217\031=^G}\274 \321\352<\233\355\214\273\314\034\000\275\2612\211=,s\354<j\313t=G7$<\037\230\240<r\t\251\275\374\215\223=U\363\260<\021\304+=\003\272\227\274\277\231\377=U\200B\274R\243e=4\253\363\273Z\277\216\275\014n9=\362\261.<\032\366\217<>\2025\274\250^R=\273\023\355\273\306>\216\275\267\374\350<n?o<\244\223\255<\177\313R<\007\243\034=\000\343f\275l\247h;\227\000G\274B\205J<\365\260\230\275\325\206\350=\363\026$;\217\253\350<\350\342\311<P\351\236\274\215\321i\274bk\346\274\267X\272<\351\027\022;3\334$=a.\014\274L \226;\025,w<d|I=\367xN=\021\025`=\306\243#<@y\207\274\010\211-\275\243\362\005\275x\010\342<\310d\006=\261`\263\275\363U\024\275\376\022 =\005\244\037<-J|\275\270\272\010<\276\263\274\274\263\360\301<@z\275\274\370=\324\274\371{8\275\276\207\206\274\344\316~=\221\354}\273\215\017\300<\266}^\274\354\221#=\301\372>=\233;\026\27517@=g\211\256<@x;=Fn\003\275\0302,\275Q\002*\275\320\267\356\273z\343|=\033mi\2743\266\273=\200\270\014<\005\274\300\275*\200\264<\000sC\275\307fW\274\0026x\275^@\212\274\205\342\251<~\234\025\27522S\275LT\016=\247Y|=\034\027\242\272\344%\024=y\311\261=j\313c<\t\033C\273@DK\275-\313\007\276!\367\030=\277\2319:A\254\205\275\241\017)\274\014B\223\274T?\241<`\177\017<\032\271]=\243}\203<+\005J\275\274\233\310\274K\206\020\275>6\274<\357j/=\037\337\372\273l\024o=b\205\212\273\366\210\036=\241\n/\275(\241U=f\243\316<a+[=\344\033\222<[\304\246<:\r\265<<Y*\271I\246\346\273\303\267\223\275\213\311\362=\270=n=\225\r\013;\020E\204\275Y\274T=X\001{=\3778\330=\355 \014=U\370\2328\234#i\275!\366D\275\372\277/\275\336V\247<\"\301L\274k\246\022=\002\2578\275]^Q\275\334\331\305\274\246\035\033\2752\317\022\275Nd\251<\277wB<\214\341\236<\247\362\216\274\315\235\213\273T@\037\275d\374\264;\2639\360<\024O8\275s\331i\274\262\036\375\274\177(b<\207\255\344\275 \003\203\275\300\374\200\275V\257\260\272\374X\376<4J\331\273j\3613<P\227\023=\004\225K\273\324<L<8\007Y;\266\301\177=\323v\200\274\203\250\207;0W;<\177n+=\307\177\314\275\202J%\273k\331d\275(\235\271\274\377\242\274<\324nD=\235l\320\274\022B`=\200M\225<\351\t\007=\276\326;\275\223\361\273=\253\363C=\201\312\250<VC\360= @\323\274\222\355\210\272\244*\263\275\206\344^\275~\362\303<\272\277\254\275\177*S\275\352?\212=\244\372\023=\252\242b\275\023*\014=;\357\014\275k@$=\262rS\275\320\'\034=$wI;\275F\003\2750$b\275\215X\325<z\331\r=s\212\225;g\023\021=\262X\202\274!\300\362\274|\343\016=\352.\200=\362O{<\270\223d=\036\362\206<|\236\331<\025\306\367\274\311dv=\275\311\242\273\262_x=\001`\224\274\333l\364<\025\201\337=\365\023\265\275\016\341\210\274;\326\010=\002\255\236\274\264\215\352\274w[\003\274\307\311\003=\352O\213<\317\353C=\032t\363\274X\250\366\274\241\346-\275\032V<\274\273\240\247=\360\205\001;7v\370\274\221\223\343<\321\255\226;\240B\375\273M\361\235<\314\\\016\275\213\230\376\273O\215\035\275<\314\007\276\365/`\274\025\347^=\'iH=\307\202i=\323\231k\27304j=\326Kb;?\000)\275\327^&=f\264\346;\257\005\326<z\203`=\3113\365\273G\"\347;\324X\004<qmV<\035j\016\275\206\371\'\275\372\341\232;\035\010\336<\331\022y<\301\302[\274\005\200\t=\354\340\205\273\273\001\221\274\207\\\222\275Y\2226<[\0303=\'8\030\274\334\337\265<R\203\021\2741b^\275n)\361\274\010j\210\275\274,\321<2\250\275=k\347$\2744\214\236\275%\312\233=\273\317\354<\276\225\217<j\342a\275\221\251\303\274\264M\304\275(\231\224<\031\357\204\275h\031\201\274\364e\262\274\233(x\275\025\264\214<\256\330\264<\321\034\007<\361\300\271\274\227\244\330\275\323\206\202\275t\005:=\033\274W=!\026\275\275\036\371\031\275ux\274\274O\3261=\356\303\332<\033*\030=C\3453<7\267.=I\313\301\274\375\001l\275\002j\025=K\177\257\2737\333\220;\235\234\223\273oXq\275\251\225\215;%\344G\274\266\323\305\273\252\270\033<7\234\205<\214\265S\275Y\362u;\001\035&\275Z9\246\273\021\021\034=\004/e;v<\026=\344\253A=\276\371\224\275\365\245\330<h\002R\275\204\375\005\273\227\355\376\267\367&\315<\222E\232<n\007\265\275\233\212l=g\307\340\274\320\217\214\275\262\374/=\024\260\027;\327\376\210\274\261PE\275\326\272\275;\032b\330\272h\033\265\275\003\317k=\364\031$=5Tx\275\253\037\004\275K#\333<\353t\210=<\327\252<y\020u=\267\275?=\330\315v\2747\365\355<\2279\257=Z\372\207\275\200\311\025=%\326\257\274\237\n\365<\204d\212\275f\270\256<Q\n\305<;\320\302\274\261\324\225=l\272&\275qB\265\274\275\274]\274\300\274\267<\310 \322\274\261Rd\274\245\232\326\273\271\033\276\275N\314W=\322\301\250=]\213\005=D\177\033\274\337\320\374\275\312\356Q\275~9\312\274l\016\n\275\202\317n\275f\330\313=g3\212\273/\3548;bG\342<\317\210\202=\026\312.=\35604\273\262I\220=\235\223\255=\344x6=\032]-=t\340\273\274\310\372\r=m\002\312:\362:\220\274\272\211\263\275Z\373\2108V\250\312\274\232\363\035\275\202\342\\\275\311M\222<\336o@=\333\234\030\275\374\352\372<h9\002\274\303H\212<\217\334b\275\355\007\245\274\316\002z=\31726=\3343\372=\364\215$\275=\tr\272e3{\275\3771\006=\324\314\320\274\221Q\265\273\2620\233\274\017\207\237;G\364\226\275\323\342\311<x\232\243\274\203\244|\274\322\277\230<\335\r\231<\307\236\013\275\351\203\017\2753!e<^\214U\275\203\022\036\274pn_\275W\n\254<K\205a\273d)\353;.\014u\274\226T\257=\350\260\266\274\005z\213\275\177O9\275n+0=}V\211<\320\330\034>i\353O=\323^x\273&h\007\273\330_C=U&\240=r&+=\034\033\205=\263T\033\274\316|\034=(|*=\243q\245\275\304\335P=\242GJ\275\360\225:=\371\037\347=\351\223U\273d\225\000=a(/=O\255s;\007j==5\026\354<\245d\364=\261\270\n\274T\010?\275\371S\027\275\253\362\353\273y\277b=\353\376i<\205\224\220<\226I\200\275\260\273\214\272b\232\r<.\021_;\261\330C;62\177=9C3\275\205\r\326\273J\241\005= \241\222=\031\361\032:\025\235g=\313\272\254\275\017Ts=,\204J\275\372\n\363\274\223\"\245\274\362\ta;\357\215\001\275\305\303n\274\365\251\n;\002\333\023<\214\001T=\376\373/=\346\313=\275(\361\242\275\237\220\226;)\333\203=s\207\026<6\242i:\017\372\316\274!o<=xt\001=\204\370!=\352\276i<\033\026B;T\032\234;!1K\275\312\252\r;\221y\200\275Rj$<\351\271\322:\211\236u\274\231!Y\275\262\213W=\245\373\213=\341\254C<\372\212*=E\377\263\273/\033\014=\234\t\223\274\317\334\207\275;\0324\275\364m\003\274qF\344<\345\n\324\273\216$\020<\340A\227=!\331\\\275\034\002&\275]\342z<N\325\353\273=\325A\274\276\326`\275\017=z\275\024\275+\275\223\310\004\275FIJ\275~+\030=\327\311\360<%M\203=4\304\266\275x\371w=\314\303\032\275\247!!=\270\341(\274d\334\376\273\034Y\203=L\245?\275z\322\210:\227\3560=\355&6\275\004mx\274\356\236\221\275\252:$\276\337\201\r=\311k\347;\274=\\=o\215\027\275\257\017W\275\312\214\367\273\307\016\036<\346w\214\275\224\213\253<\302o\261\274>\227\222\274|p\022=O[\004=\246\\\233=(\250M=\340Zs=\263\364\010\274W\034^<o\335\304\273\360\244\232\274 \345^\273X\377{=^\205\333\273b\314\"=\203\220Z<\245\367S\275/3\032\275\227@z<\211F\n=t\366\300=\331.\030\275\\\241`\275\337u]=\333w8\275\350\313\330\274\010G6\275\207\256\365\274\032X\257;i\203_=\355(\256=\017\270\302=\t!\351<\256\227]\275\377\021]\275\257(3\275.\207X\275\204q\226\275\270\346\274:\0373\320\274A\336\204;\032\222p;qM\227=BGy<\301!\275\275+K\344\274p\"\336=\310\307$=>a\265\275NL\203=\263\302\263=\251\262@\2751L\206\274G\233O<_\364B\274\271\351\206\273Oc\223<\025\244\'\275\352,\204<\3357I\275e\270\262<\317t\261\274\227\226\002\276\245\026\256<\356zH\274\261\227\220=\024\272\210\275\016\360\325\274\264,\324\275\251\330F=\345\\\220\2723v\223<`\243E9j\353\026<\314\035\264\275\020:\224=\3650\224\275d\333_\2757\217\246<Dwc\275VY.\275\030\320G=\215iC\274\350S\271\275\330\246h<d\256\257;ki;=\377\311m<l\366~=\001\224\005=Z\242\006\275\324!\200=.Dd\274Lc?<S\037\312\2732\212\361\274&\367\252\275K\034;\272\347\251\324\274\021Pt\275\024*\317<\033\373\213\271\014b;\274\220@\245<H\212a<HY\333<\341v\254:@rT=\266\227\023\275\201\355#\275U\026?=\317\2514\275-J.\275\'\353{<\233\253q=\263Y\n\275\261F\206<es\266\275\313\240\206\275TP!\274\352$\222\275\0034\030=5\013J=T\220\364\274\216&\273\274\n\245+\274BN\214\274=\352\235;O6\031\275\275\000n=e\313\251<@\314\271\274\221[,=\220\351\232<\342!\222\275p\237\226<\2129><X%\020\275{L\320<!a\364<\266\233\203\274\t\301+=\027\263\205\275\237\251\201\274\247\334v<1\307v<3\"i<t\346D=\201\004\274<m\253\032\275T\216`=\366X(=~ud\2751p\217<$\n\010<\346\324/\275\345\250\235=m.\234=\354\364\023=\344\002\021\274\371vX\275\027\013\305<\020\200\243\274\314}^\275\252A\n\274\205\005\254\275Z+5=9\224l\275\324\301E=\205m\327<\266\213F\275\205\375\273<\177\037W\274\243\023g=\024\357\037=\223&\275<a\330\226;e%\316\274,\320~<\221\241\244\273\227\n\213\274\026\014r\275{w\024\275h\322\373\274\013f;\274\232UV=\310\247\300\275\004w\201:\236\\P\273\216\207}\275\314\233F<\337\311@\273\026\0347=\355\3467\273<v\332\273\227\343\200\275\315\020\230\275\362.\253<\275p\240\273\217\222\210\274\2712\t<\003\254\222\275\205\014@=\367M\364\274\327\225#\274\227`\031<\021\237\252\274\3078u\274\225\325\026\275b\271\240=x#\201=$A\304\275\344[\372\274\277\033H<\027\377\226\273c\254\020\275\335\231\215=\242\353T<0Y\335<bjX\275\266\345\021=\371\030.=\231\337R=E\345\302;\232\303z<\014f\221\273\237\017\232=5\253\260\274\371\n\033<\325\'\273\274\'\314g=\334\246M;(z\215\274\n\366\210=\020\257\033\275\276G\216=n|;\275\002\000\020\274q\274\322<\353\300|<\307\272\341<Y\215 =\303^\004;\264W\250;\340\334\210=\002\254b=\020\237g\275\234\203\217\2757O\260\275!\234\026\274\334\n\350\274\254y\271\274\211\t\321<|\331D<\377\271~\275\270&==\3731\231=\240\007\263\274\223\032L\275\324\227\307=.\315B=\273>*\275\356*S\275\020F\331\274c\373\370\274\233\031%<\342\330\263<\324\033\204\274\326z\263\272#\256!=\276v\213<\000nm\275\033\357X=\004f\300\275\022\007\316\274\341v4<fje=l\336\025=\307t\314\273Q\303\271=\231\330\241<\352\000\005=\240_\260=4\233b\272\370\035\273<\314\267\355<^\306A;\376\327 \275\240\321L<\343\004\027=o&\237;]\t\367<\353\023\201;\365;\'=O8\203\273%P\010\275\346c\317\274\330$8\274\237\360\000\275\220\020\273<\2739\005\274\330R\220=7C\247\274\243\222\247<\260\227\027\275p\354\244\274w\004\036=\221<\347<\317\2777\274+\022\021\274\363\007\n\275t\372P<\240\010\265\274\231\342\343<y\352\271<\321P>\274\317\221Y\275F\0274\273U\366\262<x\344\214<E\240-<S\301m=1x\315\273\241\246%=\252\336\323\274\001ai\275F\026\224;\275\212\335:\310%\177\275<\3002\274Q#^\275\263\371==\364$\230\271\250W\026<]\274\300\275\256,\263\274\256\025r\274Jl\207\275\261\255$=L\205\013=\356;\232=\322\342\r={K\274\274tB\031\275\022cW\274\025\215^\272m\\\215<\257^u<4[\306\274\001\005\310\275.\271\035;\363\234 =\005\267i<\337\363-\275\364\\\300\275At\345<+vt=\330TJ<Nct\2746\273\255\274\307\351.\275`\210\340;I\275@\275\360\271\300=\326.-\275\333\243\234\275P2\327\274\263\272K\275m\353\225\273\022\035K<\307\370\241<\245\250\206\275]{h<\017\303\010\274\210\216\230\274ojZ\274W\024\005\275\345\013p<j\335(;>\353.\275\021[\211\275\270\253\202<Za-\275\254-\021=IYM\275\003\300M=\240\324\302<8Z_\273\312r\326\273\277\005t=2m}\274\316\304\201<\275D\023=\236o\354\2748\213\034\274+4\354<\312\320T<g\245_\274\317\025\317\273\305\341\031\275\372v\207\275\310\260~\273_\205h\275;$d\275\262i\320\2737\2123<n\263c<\273\277\354\2744\274+\274\275\345\004\275\320\'\316\274\260\362\326\273\253\200\341;\371\313\005\275\324}\257\267\rY\346<\373r\344<\0227\250=.\236\213\275\007\202\354<\367>[\275\346\026\241\274\225\017x\274R-\205\275\357F\037=-O\270<|+\033</\325\262<\035lE<\314/\342;<\224\273<\262y\337;:H-\275\216\244\t\275\\$.\275\002\3376=|s\314\274M\330\211=\033\336\222\273n\243c\275\247*\211\2734dg=4z\333<\240$\321\271\254nj\275\315\216\257;\225\037H<\021\242\351\273\210dS=TJ\024\274\211\216\242<\017yq\274n\'\222=\025\252\202<g/j\274\343<\002>\272\224\202=NoW\274\270\\b\274\366\377\256\274 <\233=\330\017\271\275\366D\002\275\272\276\201\275{\301W:\206(3=4\374\200\274\2411\005\275I@\204;\340\360{\275\327\025\331\272\227x`\275\375V\260<\260\262\244\274O\306v<\205\321\n<\254\3534;\2679C=P\013c=_\346C\273\023\025\201\275\001U\227\274\323\256Y\275\025\355\270\275Z\357\346:\022~\355:\352\254\303\275R\272\237\274\225\356\"<\303N&=\231\032\010\274B_\345<\033rX\275rv1\275x;\276<\344\305\270<7{-=A\223N=\021\237B\275\000\250\377\274<\n7\275\321\225\022;#\367*=\334 <<2\240.\275ZW\203<\016Vz=<\007\244<\206\363\020\274\202\302\255<\354\"q\273\234\314\202<\2378\030=q\270\230\275\212t\312<\373\240U\275\310\2574;\213\004V=\006\221\303<\246\355x=\3239t\274\317K\002=}]\205<\027\271\213\275\306\256\355\274\010\255-\274`\372\261;\217\\\230\274\227\366F=\364\376\224\275\030\206\036=8\216\265\275*YV<l\323\004<\205\377\275\275\263\257\311<\356o\252<\265\247M;\331\253Q=\371\000\230\274Q)\037\276\344\252:\275\004\2039:\334\005\222\274o5C=\303\213<\275|\265\345\274\235\357\226=\267\332,\272\2506N=(Lz\274;\354U<\366\332\247<\313\035\364;@_\237\275\243EN=\260\231b<\347\247s\2753i\270=XaO<o\310\276=2\025\310;U\274\001\275\350,\271\273\206\000\024\275\3410#=\352\325v<\036\343\343\275t-\223\275N\227\037;\203\370\241<c\"\261\274w\324\370<f\022&\275\327\350\214\275\332 .\274\354\320g=p\377b<v}\247<\236\305\227=\0207[\275\326\365\'<>\343\276=\240+\367<\221Ym\274A\335\253\274\365\251\016\273zH~;f\322#;\261\204\002<S\247G=F\034<=\367\212\"\275a\240\203\275\351\254\266\274\0340\204\275\356\027\004<\231&\336\274\225\313\352\274\342\034\204\274\266SS\275\016;J<Oyt=\330\227\271\274\311\030\307\275\363\000C\275\236?\214=f\266b\275\223\274\231<\026\225\247\275\261\312\323;\334\204\262\275UN\324\274\302\213\235\273\336\230\367;t\360y\274DyP\275&\356\016\274\1778\277<\023\tU<\217\242\276;\254\3479\274\310\t\251\272F\243\257\273\336\t\016\275\2251%\273\327\306]\274\315\266b\274\270F,\275\25078<\315\261\032\275\233$==\372\250\354<\356M\030<d\026|:\325\353:=YPH\275\367\264)<\345\325J9\254\321\026\275K\200P=*\360\252\275\300\031\272=8\255\211=U\225\230\273\261/?\274\336\233\030<\254<==\360;\215<q,)<\021\231e\275\242r\215\274H\243R<\203\267\217<\350\364\017\274\006\340\317\275\332\206D\275\204}\311\273:\336\233<\344`^<\344\177`=9B\273=-\2343\274\214;\263;6\360%=\211\327\036\275\262\222g<\323zI\275zW\032\273\203\376\213\275\237z\376\273\224#\265<\266\'\014\275\376\215\327\273<\312\225\274h\"\234=\026P\025\276\270Z\237<\r8\245\274\360J\000\275\315o\325\274\204\037\201=\306\203\030\275%\230\361<n\360/<}M.=z\254\370<\020_\020\274Wt\302\274\247\200\037=\253`V=\245\342*\274\3124k<Z\345\252=\237\267{\275D\327\030\275\260\340\235;\033\231\251;\370Q\347<X$\345\273\000\313\024\275\017\240l\275\357\3700=\340\366\300\275\260\177\215<2dz;\276\021\247\275\t3\274=Tzy;D4L\272\352\321Q\274\201\346W<0\234\020=\360\214\271<\371\"\277=\264\344F\275\272X\225=sf>\275\021}\335\273\304\214\302\275\236\0362;\327,\000\2743\371Q\275\361~\014>Z\2504;\021>\025=\016I\315\273\306\017\235\274\364\240\206:a\0219=\214%\333;H\363\353\274\304\312\350\274\215\016\210;\2238\203\273\270\342\202\274\031\373a=\3175.>xhP<\306^\212\275\336\331\003\274D\206\027\275z]\337\272I6[=UM|\273\203!\255=J\307\007\275\355\014\270;\223\3275\275\231\201*=\346!\351\273\007\035\330\275\237E\234<\276\244_\275RU\346<\235\204\205\275\352\020\200\275\232>D<\362\016^\2758z\235\274`\271m<\242\013\351\274\006\306\024\274\3101\346=\252\032\301\274U!\t\275\033\347\277\273\332w\001\275]\030\220\274\333\347\311\274\210\334\270;\3037\277=\0371\356\274\026\273 \275\354\'\206\274w\350\224\274\222\336n;\030\275\354\274W}\226\275#s\t\2758F)<c\300 =\302\371\251\275(\267\371<\356\036t=\037\265b=\223t\r<\2773?\275\2424{=]c?=4\230\027=e\371\334\274\032\324B\275x8\206\275\001\337\213=(3d=\251\000R=\2523\334:B|R\2759\224\374;\275p`\274\204\257\306<\343\376\353<\204\243\201\274\026\343\273\274\3020==4a\276\274\035u\350\272\260j{=\303\332\232<\036\340\203\273\350\253}\275\t\\\004\273\016\342`<w`I=|\326\006\275\324z\r=\211w\204\275H]\021=kt\205= \032\255\274\357\337\004\276\304\373\227\275\337\327\023=\335 \323\275Uq\006\273\007\"M\275\232\225\360\274\3141&\275i\325\277\274\3514(<\360\017K\275\244\247A9My\022\274U\341S<\277-\213\275\232\033e=m\253b\273\304\263\362<\026I]\274\307\205\231\275j\007!\275\030\326\021=\2026(<Z-\274\273\275\356\222\274\202\227\210\274\035\035\202=C\0254;N\241\031=>\234\232=B\362<=~W\201<\230\007\037\275\307\035\254=\'T?\273/$\245;!\210B\275\272<\207<u\230\365<qR\020\275\0319\261=\177\236\233<\327\026\022<\202!\n=\335IP<\022KR=\353\032P\275\037\346!\273S{\200<\240\361\315=\3129\305=\310U\007\2758\345~\274\'V&\275@\243\266\275\016\360\301\274\"B5\274\372*\004\275\337\2736\274\001\316\330\274\216%\024\275\316~[\274\232/\274\273<\376>=\233*R;\260\256\371\274\272\177\024=\"\340\331\274\302(\023<\001\362\244;\344\302\335\274\203\370\300<\0050\001\275G\010Y\275\321\301\221=Z\266\356\272)\267\016\275\321\224\203=\335\233\251<\023Cp=\245I\316;\274\216\016<L\2446\275\206\211U;\210\276\213\274`\261\030\275/j\236\273OO?\275\205\357\322\275n\325\024\275\314l\225\275\016\224\313\274\234{a=x <<\361N\373;\366q\325\274*\337\024\275zc\367\275\254\276z\274\263\321\360\274;f\202\275\304\357\237;j\212\021<\205\311r<\270\207#\275O\274\242;\007\274\221={\322\311\274\377$\215\275,,E\274X\322\211\274\275K\332<\372\331\343<\303\'!<D\230\016=\246\224\252\275\375\020\366\274}-!\275\217\222\202=\353\277\320\274I\\B<\026\032z\274\304\255\006=\264mp\275\315\to\274z\355\207\274\260\317B<\316m_=\337\357\213;\035&\030= \221\267\274\325!W\275\253\020\234<Q\231?=}Y\007<\034\202\255=\035\021P\274\300b\274\271k\221==\272b\305=:\274\252\275ET\317\275d\330\360<0\257\226<y\365K\275\377\345\"\275!\300N;\211\"\313;\022EC=\257\261\247<\010x\253=\245\3037\2733\240\347\273\241U\214\274r\250\252=\267\210_=`MO=\303W\254\275\326\t8;\373\312\371\274\240W\223<\303\365Q=\037\014\226\274iC\204=\355iF\274\007\017(=\344y\361;\024\257\217;\324\374P=\021UO<\223s\360<Fl\310\274\002\340l\274^M\332\274B.\270=F\342X\2756\t3=K\014+<3+\271;\365gs\274\303\263\360:\230\226\307<\254&i\274{\034\001\275L\031\025\275\214\273\305<t\371Y\275~\205)\274F\344\250\274\350\323\275\274\022\317\017;\226\001~<\354\026\364<\327\360\233\274\326\263\306\275\235\263\236<\006\261X=K`\347=\201\tC<hVO\273X[$<\311\234\244\275\342\341^<f\014f<\350\360%\275N\312p\273H\023\032\275\300|\027\275l-\'=1\257B<;\316\342\275\317B\030;\366\005\310\275@\003==-\220$\275F<-\275\304\230S<\201\324T=\244%\215\275\272W\262\275\325T\323\274l\312\372\273\222FS\273\362\204\204\274\314\033|\274w\214\377\274\324N\000=S\230\227\273\004\227}<e\217\241<\231\253\340\274\352\231\303=\241\312\026\275/\035\230;\\u\271<Lr\343=&p\025=\nD?=e\014\022\275\263\230\341\274b\354j\274(\270\265\274\005p\232<\244\301*;k\036P\275\334\242\263\275\341q\224=\036\300\310=\007\240=\275\020\352P\275\330\004V=\3612?\275\305\345\n\275\260\017\025=\025\'\242=\017\224\274\2750o\006\275\217\343+=\262\276\342<Wq\324<b\207\026\275\233AM<+\341\352\275\014\'\361\274\036\216\212=\360.|=z\265H<\037V\034={\331k\275\002\004&=\274{?\275J\223\224\274\344ik\274\201J\020\274B^\032\274\356\332\257=\266\251;\273\255\221X\275\032\222\243<@\362@\275L\025]\274j\312\004\275\230\0166=\315\351\255\272SO\367\274@Y\177\272\361+\032\275\246\017\016=]\277d\274\350\024O\274g\302\226;\351\220a\273\307V\360\274\202\3534=\302\001\001\273D\257\266\274T\007\203=\004\346[\274\343\375\031\275g\2247=\252\364\333;\337-\254\273\010M\274\274\370K\376\273,v\n=\265T\341=\307\233}=H\375B<\306%&\275\247\005\230<\272\0264\275\004\006?<\360\312\034\275\005\345\013\275!\242w=b?\021=\023\314M\274M\210\004\273\264\341\001\275:\370\030\275\221\r=\275\221\202\203<D\374\005\275m\'3=iXD=u\221\323\273\250\021\004=\353\227\334\274\357\2123=\374\271\337<5w\262\274F\373\240\275|\261\363<\375w\\\275\257\2250\274c!\003\273n\224\231\274\350*D<\305\226\210<\205O\346<\326\200\254<\024k\024=\244\030/;\345\233\240<\232\336j=\277M\206;|@3\274\365\025,<I\010\316<\002\226c\274\263\313H\2747*\230<\007\311I\274I\361@=\273\341z=\026qO\275\0176\230<\333,\257\2744@\260=\200\233\234\272f,\365\273\243\304\261<\2647\256\275M(\r=\354\366k=\376\337S\275\t\365\"<\0213\226=\206y\216\274TU\270<\352\033N=\361\016\350\274{\272*\275\210H\305\274\240\343\315;\237\226\202\274M\3248=\3518\340\274/7\007=dJU=ns\234=\206c\022\275\237\374\266<U\347\022=8<\020\275\005\340\372\2749\177\210=3\204\177=\235J6=R\241\032\275\257\266\222<\\L\252<\302\244\226<\274P\211\274a\356\225\275M\216Q=\2277K=m\036\006<ME\312<\005\032A;\031\034\255\274\271Qw=\240;O\275/^/\275\017\237\212<R\224\017=\226o\325<\240L\270\274\337p\007=\246\373)\275q\277\016=\352\247\373\274\314k\364\275{\3734<\224\006\363<\263\246\377\274\250\303\230\275TH\240<Z\\\311\275{\371y\274\016\227;=\26066<\365\263\270\273\232]z91@\263=\037\307Y<\310\343*=z\234\222<\244B\033\275\230y}=\244\356\212</3\240=>K(<\241\017\361\274\247\232\257;\007G\245\274\376\236\006\275\030\370z<\3671\306;\007g\333\275D\211\025=!\327\035=\315C\025<\335\362\\<\265h\024\275\377!\273\274Iy`\275\222Y\201<Z;];\037<\006=|Y&=< y=\331\243\305=\350v\204\275\014@e=\340\3567=-\270A<\375 \267\274\007\034\201\275\202]\274<\364\2055\275g\324L\273\232\034\362=\232\346\031=|ZF\274\016\212\303\275\207FZ\275\2004p=\201]\026=\252\300R=.\222\006\274+\373\312\275\214X\235=\370\023\177;\0273\213=\024\200\373\274q#\244\274\215\236\307<\266\256\217\275\232{j=\254K\000\273o\365\272<\202;\035\275\027\306\031\275]0\321\274\001U\014<KU\313\275\210k\240<9W8\275R\250\330=\235\024\001\271\023\272\236\274\254\3361<6?\232<\034X\312\274\243\005\024\273A+\325<\001\300\\:\204&\323\2751\257\347\274&\023_\275\327I=<h\327Y\275\377r6=\325Bi9\032\200\210=\270\377\021\274\250\003d:\203I\305\275\277\"%\274\370I\270;m\375*\274\224\204\213\274\270O\211=\025\376\2438\252\273\024\275:M,=\363*{=\014\272%\275\005\205q\273\373\226Y\275\377\255A\2758I4=\006\326U<\264F\317\274\177\370\260\274\336\227\001<\256\222\200=\240\302h\275_t\007\274N\021\234;@\245%\275A%\345<8w\017>\315\273\257\275:\024\014\275\341\262\204<d\204q\275\307\327\327\2734}\337<\226\r\235<\304 \\\2744\371\037\275\324F\244\274\264X\372\273:7\245=$\310\215=\003q:\275\374\251+\275\372o\303<\321\262\325\273&\343\315\274\336\352\200\274\274\304\345;\367\373\230=.CE=\360\251\326;8\350\367;\021\324U8\270\017\374;\353h\242\275\210\243\246\275\226w\237=\266Gv<2\201T=\203<X<Ol\324<\343:\304\273\021w\207\275YB\203<\362\002w\273c\341\373=\010Y7\275oV!\274\010\265=\272-\340%=\345\371s\275\026<\254<\217\203\233=\352\260;<X\260\';?\004\272<N\335\024=\341Z\242\275\177\314\261\275\334S`=\322\246\212\274\354\316\204\275av\261\273+5&=\321I\032=\345\227\243\271\345\032\306\273hX\027\275&\334\214<\225\243\250;\370\264\202\273O\021O=\360\275\250\274\304\357\262=\323\332]<\023\344\255<[\355{<\000\313\\\275P\2464\275\303\273\366;`\325H\274MD\361<3}T<\3471\231<CnQ\275W\3063\275:\345\217\275\310\276\221\275\035\335\004=N=-=\312<\316\274\370\321T=\205]A\275.\025 \274aC\n\274z\256\222<6\024E\274q\264n\273\204Q!=\217\212\275\275\222\330\025=v\241\002=\341\210z\275\304\304\223\275\272<*=\332\222\231<t\276\205=\350P\014\275\202\3703=\304\336\241<\345\340\214;\333Ag\275\300\337\260<J\025x\273a0B\275\245\260\333\274\202\311\010;$L\020\275x\006\263<\237\374\351<\\\347\377;\315\315\257<\313,\263\275\020 a=f\020?=\274\237g\275w\255\036=\004b5\274\257\352T\275y\350+=\250iv\275\317\211\233\275\203\201\212<O\221i=\336\\\331<3\223\345<\246K)\274t\3069=U\200\365<\032ku<\260\211\263\274M\361\277\274C<\232\273\3334\233;\003\204\366\274\315(H\275\237\266d=\242~D=\366]4\275kB\255<\304>\260=\263\025\200=\265\314#\275p\024\013<\366\365\335<\365%\277\274\325\337b=c2\021\275VC\253\275\357\2779\275\206s<\274p\3340\275ue\273\274\203\365\037<\035^\000<+#\376\274t\332\010;\365\277\240<`AV=Sjk\274l\032\202=\246-\255\275\375/\024\275P\3562\273\255e\266\275\231\346W\275\277\304\004\275%\327\216</d\300=%{\357<<\361\236<\277I6<\360N\325;?\003\370\272\300\255\311\274-\202\305\273^\212R=\226\205\302=\351\004+=\261\215J\273\221\300\364;\344\266\226=N\374\200\274\311\366\331<\374\230\010\275=\320\317;\322q\241<\017}s=\027\214\227<\276\205\354<8\032c\274\224I\311<\014\366M;:q9=\260\006\231<\274\201E\274-\260\266\273\311x\324:\216\024\t\275\026-;\275j\213\204\275\224 \244\275\356\271\241\275\307\357j<=\3647\275X\236\222\275\351\021\317\275\226\350\260\274\036\363n=\017\324U\275[\017S=;hc=\216\016o\274\333a\t=\307)\016\275:\2559=F\344s<21i<\240zn\275\222\023\316<&=\242=\212\365<\273\262\3138\275\264\021\036\275\330\220\277=;\253\245\272\316\335.<\372\2004\275\242\036N<]\336\257\274\206Y\241\272\010]\314=\253\221n<\23665\2758\350\'=0\245\313\274\330\340:\274\266w\207=\030\236U\275\223\002\251\275\2434\021=\030v2\275\353]\200=f\006\366<\201n\226\275X\200r\275\230\324{\275^z\321<q\264z=q\301\002=\310\224\274<\022\032g\274\361q\031<\216\263\356<\325s>\275\312(~\275\223\344\306\275\031?\224<\330\326\301<>zQ\274\034\037\020=\305g\225\274\216Z\222<\256?\016\275tG\\;q\205\275<x\241\201\274\311\337\277\275\365\316\251=\'g\000<TQ\237=pxC=\317D\024=EBj\274VS\376\274\022G%<:\022K=\242\360\202=S8(:\351\273\024\275>m\331<P\316\236:\350\272X=\224\346\205\2727\225\205=\266h\253\275\n\177\260<6\346\245<!\207\027=\257TQ;\252|\354<\310m;=\017\205\263\275?d\004\2755\026\330;\014\277\243<n?\271\274\326\r\014\273\314K\347\274\0269k\275\222\254w<\'\214\220=+-\243\275b\334\353<\312\036,<\255\275\205=E\325\024=&u\374<9\025\275=\325Xr<\005.\324<\376g\256\275}z\366<E\352k\275vP\031=%\267\356\274\307q\307;\376\266\003=\004\\\224=h\222`\274\006\037\376<kHW<\255\241\251=Z\364\206\275\205K\344<\315\243\227\275\274\213\301=J\305\353\274\230s1\275?\254\241\275-\243Z=\2101\212\2756\367\206<\261\3654\275\211\375\021;\357\332(\275RM\223\274\377yE\275\0106T\275\203\035\233\274\373$\341\274\201\370\254\274x+|\275\333\365\310<\344/\372\2740\3209\275\200\321\226\273\233{/\274@\037m=:\256\316<\301\235\177<\220\321j\274\331\364/=\314\377Q<\265\231\014<\375\r\256<\273W\r=\312\374\352\274\027\367P\275P\361N\275\272\3660\275\002\340\034=\220\232\010>\3237\206\272\303\346\217=\217\365\270\274j8q\275\323\231\004=\2220\031<\276&\215=8t1=\205\247O\274\305J6=\340\021\026=\374\020\221=7h\264\274\303\245\223=\254\212\330\274\251y\336=\303\331\003=d\371\300\274\020\036\004<&$\261<ok\272<\364\024\246\275\204\276\025\275~\251\234\273|\234&;\270kh<\314\331v\275\241x\212\275\376\367?\275y\037\355\273|\246\\\272U\003\304\273\230\201\334\272\350\014\216=\261F\376;\323\207\211=/f\032\275\310\367\330\274\244*\273\274S\201\033=\351\207J\274s\323\n<\240\347@\273\2560\026\275X|\303\274\277}\302\274\273\r\224;s\366g=%S\023\274M\344X;\300\2051\274L>\234<$3\n\274{\302\361;\354\264m\275\267\250:=T\356\207\2752\223\217\275\335w\256<Z\252\237;W\\\210\275\264\035\374<\363 \217\274\017D\021\274\331\317\203=\nf\017\275\346f\033\275\221\014H\275~y\332<\230\223\330<k\215c<6\374\007\275s)\336<\330\001\344=\324\234\320<aF\000=\344g\317:#\307\303\2737\372\326<\240\306\354\272\363wB\273mX&;O\256\246=\373=<=ot\364<h1\266\275\335\033\302<\277h\000=\226\322\027=iP\315=A\260g\275\354\271\346\274\267\331F\275\245\376\273<\355\343\366\274\244\316\365<\320\017p<\n\210\345<$\002\026=R\024\232<\211\374\022\2750*>;v\'\234<\206\316+<\257\241 \275\003\223\250=\205[\213\275TF\005=\355\226+=\302\340\371\273\241\346\226<B\032\203=\375\327\220\275\256\202\370=\243h\205\274z\034\244;\264[\362\274\331\201\001<t;\217<\364\235\204\275v\307%\273\227\346H\275\004\300\343<\342.\276\273$\372\026<y\326\217\275%\311\244\275\3279F=\334&\202\2750=\241=\332\375e<B\315\234\273\025A\365\274\272d\326\274Q\241c\274.\360[=<\261\332=\213V\220\274x\244\247\274P\376\000\273\016\365\207=\010l\237=\005\367O<|\211k\275\301\'/=\232zD\275\021\352\325<a\316\327\274\"\374\017<\325\254\210=d\201\325\272\376\275\250\274\217\316\016=\310\265\264<\302\365\005=\316}\010=\342\321\024\275\004\036\231\273\0077\314<\317\2342\274\306\233\366<\274\203D\273\030\374\340\275\221\307\370\274Xa/\273\372u\225<@\0333\274X\277\361\272\242\373a\274\rC\261\275\003\032P\274\nM\323<\266+\245\274\t2\201=\344\211%\274\2204\244\274\034B\032\275,@\207<H\226\361\274V\360\232<\375\225\201<L\010\014=\372\225g<\320\326\314<\001U\201\275\030\324);\264\211R\275-\037\202\274\327j\337<B~C;\254\026Y\275\003z\207\274\231F\225<l32\274\201\265\332;\267x\223;\324\002\347<\342\363\t\275\224@,\274\237)\030\274x\252\210=\"?|=\326\001\n=\300\203v\275wfH\275?y\334\2748\306B\275\217W\361\272\314\315\017\275*\271\001\274\017\371z\275]\233\301<\002\344\376;\277}\261\274=\333\251<\\\334,\275}\002a\274\236\371\265\273\303\275%\275\025\367n=\252\311\023=\261\232\005<\203\254\026=\'\033%\275X\247!\274:Z\225=\352\024\036=\225\3012\274\333\372\205;k\332\262\274\213sv\2752\334G<\351k{=\030\034\343<`\214\216=\340\221\347<RR@\275+d\256<Y\233h\274\241\266\366<V{\355\272\010- \275D\217~=\317\r#\274;\352\233<\371:\211\274\002g\241\275@\n\016\273F#8<q\372\263\275\305\374\243=\245\rF=P\330\330\274\351\022\326\274\310\223\325\273\232\332\267<\242\200\270<^\314-\275\255\254[\275@l\356=\215\301\216\275a\357\t<u\357\3627\337\021\203=\022\361\343<\257\374\242\275\001]&\274\2125=\274\253F\274;\035\271F=f\262{\274\2761\202\273A\200\'=\214R\206=:@U=p\254\017\275\316\373\311=\343Oi\275\223\037\223<\212\203\357\274\024_B=\003I\301\274i\266%<>\270\303;^\037\235\275:u\201\275\330\256n=\030\202\233<c\t\003\275\205.\312<\302\326\325;\003\035K\275h\025A\273q\037!\275\216\300\023\275\227\232\006\275u\334\251\275\344\217\302\274\235+q< \t\364\271\204\375\233\275\302\222e\274\"e\034\275\216\320X\275\206\342\336\273\216[\343=0o\275;\316x\217\274\t\n.=\020V\304\274\"\0306\275\313\302\352\274\344\317}\275\326a\307\275N6\300\274q\234;=\274\207z=,\236T=\2229y\275j\370\001\273w\364:\275\233R\032=\021+\222\275\304\364\350\273\343Q\351\275\212A\"\275g\215w<bD{\275\251\2406\275]\272\017<G\037\343<\001\0015=\237\230\007\275B\002\363\274\317`\213<\306\260$=8K\206\273\347\017\250<\nPY\275\327\026\216\275\016\324\365\274Q<\'=s\201\266\275*@\000\276\317\251m\275\364\354\213;\310*\242<\211\370O;\021$.=\366\273s=Y\360t\275\356\341\201\275y\374%\275-\317\030\274\376\355b=\006p\030=R\364\204=Y(\267<\362\376\362\274?hQ<\2107\036\274\340yQ\274\361YS=\242\376\205=\355\372\022=}E\220=HY\030\275uR\240=\004\006z\275\220*&\275\247\350\304\274E\022\374\275\350\306.\275\225 \037\275pl\013\275h\314r\274\274\260\272<\352\333B=\343\370}\274 \254\004\274@\300N<&`\246\274\030\237\325\275<M\262\274\303\360r<G\0027\275\354\353\301\273j+J\275a\273\214=j\'\203=0\376\266<\335\003\202=\247[\300=\311\rE\275\231W\351<I\220U\275\226\374\217;\021\365\246;yH\320<Gb\355\274\t\226\344<\371\230\270\273\001\335\310;\326_~;y\251\227=\234\325\025=\016Q\223<\\\246\364<L\224\247<\'d\232\275\367\277\201\274Gs\013\275\337\364\260\274\177\305\306<H6\234:{\000\362<\236\360\"=\276;\371;\032hT\2750\3578\274:\027\244=_.\322;\n9(\274\224\2646\275\003\373\272\274\247\366\251\2745j\215;\337V%\275\215n\265\273\207\001\'\275\333\275\223<\367\357(\273\306\0335=\307\333\321\274;\002T\274\271_\006\275<\210\203;\246\265\025=\267\340\223= \226\256=\362\354\232<&\003f\274\345\324\203\275\270o\004\273\025v\331<i\201k=\266e\265\274\2503\036\275N:\200\275\013\323\022\275\245\305\316<\267\276\243\273\271\260\027<\0335\357\274h\006\330<\213\232\240<\311\257@\275w07=\254\177\330=\244\217\207<kG\200<F\350\010=\377\320\373\274\236A\327<`\022\022\275&\213\314\2743\220\311<\3125\007=\'\357\373<h\000\356\274\004f\026<\223fm\272\027\351\347\274\265&\224\275\215\300\242=\242\326\265;\013f\267<A?M\274\004\\ <cl\315<\236\361L=O\256\213=\212i0\275\340\021\332\275A@\024>\376\320,\274j\300\205=\204|{\275\337)g=;$\320<\2329\235\273\031I\003\275ZPP<\370\273\006\275\204\341\214=4\360\325<W\220\345<\020\343s\275\324\377\\<:\227-\275\373\224-<o?%=\260\306\200\275\220\330\235\275\345(Q\275\262&\347\274C\371$=RMY\275\335\016 \275\350q\003\275\000\347m=(F\n=U\212\002\276\237\346d<~\205e\275\354\262\\<\010\3448=\312\003c=\372@\266\275\342\027\360;\247\263\260=N\276g;<\276n\2757E\270\275(\242\366\273\026\232\027\275\2479\356\274\377|;<\245}Z=\322\334\016=KL\321<\362\n\210\273e\252$\2713\202\324;\367;\326\274\305\005\017=e?\367\274\3716\203=\313\022\020=\205\250\275\275.>e<\232\373N\275\262\340\332<wh\262;\303m3\275\035\003c<\026\315Q=\315\010\034;6\235\211\274\036\010\244\275\032\362D=\306\351S=\312@2=\300\247\202=\343\254\023\275Rs\252=\344\177&=VC\306:\230\374\320=W:\214;\353\332\213;q\256[\275\024kN=\365=q\2756\341\221=\"(\315\2747\260s=R\271v\275\225x\200\275\221T\333\275\317\360#\273\202<Z\274\024\357\306\275\355W\036\274\002:h\275\232\272\211=X\t\334<J\267\031\275R\t-;l\230\036\274-\351H;\204@:\275\320\350\031=hX\253<\035J\267\274\014&\362<\265\006\334<l\304s=\035IR<*\021;\275pU\"\275\035\tr\275?\010\035\274\376\177\315<Y~>\275\210\262\276\273\310\2273<b\215\306\271`\213%\275\262I\356<\330k\374\274\224\177\321<\311\333\363<+\257E\275\r\334O\273\03057=vx6\275\344\312\232\275\231\030 \275\001\305\005\275\2424\177=r\2605\275g\210\255:V\233\246<\357\304\312\273H~\230\274\321;9=\324G\033<\nC\203=\033\\\177<\260\347\337<\242FH=[f0\272\357\t\326<\212q\000\275\276\365\010\274 \177\007>\300\021:=\243]\315;\035\004\236\274\003\026\t=\361\302\354<\0272\221=\277\323\354;\340d\334<r)\215=\216\033]\273Y=p\274\316\017_=f\232\265<[\032e=\261\377I=\001\032;\275\244\302\345;\217{>\272\3160\t=_\244\207\273[\325\305\273\232\3062\275\271G\025=\236\233\265\274%\322^<\305?\356\274\222y\266\273\211\250\017=\233\243K\275\231(%=\033+S\274s\355J\275n\351\207\275\264z \275\377)w\274\205\000\255\274/\203\364\273\276` \275A1\203\273#u\232<Fp\020\275\037e\035\275\304\370\033=\177[\246=\265\245\323<\225\263\007\275{\226\352\274\275\253\235<A\311\243=\362Qh\274\005a\t\274\362\255-=\037\010f=\274v;<2\326\014\275\006\027\242\274\341\230\005=\215\006\224;\337\324\023=\355_\320\274\346\267\351\274\t5\216=\354\"\314<nX@\274+\177\220\274\"\210\331\274\020\353\026=DTY\274-\371\330<\337\341\230\274\206X\221;\031\253\003\275\nwL=\210\177\203\273\342\366><\345e\241=u/\t=\357r#=\320\300\311\274\030\322\331\274n\023\303<\231\303\354\2732M\324\274\005HB=\355\350\027=\036\035\202\274C\322\267\274O\303\004\275\326\253\216\275\332\376\215<Vx^\274\321\002\037<\327|\216\274\254-\317=L+u\274\316\021*\275\375\203\t=>X\340;\002\303\t;\037\250\232<\313\332\014\274G\267G<A\276\303\273Dp\247\274R\351\300\272\203\324\207\274.&C=\360\241O\275V\344p\275,\214\236\274lS\177\275\207\325\t\274\353\372\272\274\310\"\315\273X\020\345\2741\211\305\275\270\237F<4/\204<u\241\261\275V1\257=~{\351<z\352\371:<J&==\317\312=E\3440\274\304\3550=\217\307t\275\013p\203=\320\341\315\274\231\346\335;5\023Z\273\240}\201\274\376\354\023=-\027S\275\243H\367<%~<<\205\311+=\322n\212\275Ak\225=_\237h<e\207Y\274o\020X<d\312\305<\014\257\224:e\t\226\275:b\336\273\220\317\036=+\272h<\330\321/=Oy\037\275\211\357\355:\275\220\n=JK}\274\336\316\336\274`$\005=\2727Y\275g\310\332<\330XC\275\257\003\315\274,\300\177\274]\013\032<[gT=H{W=ecQ<%\001\360;]p\226\275\234\t\343\275\020\331\360<\207E\343<\205C1\275\033\374\217\275\264\226>\275$\267\006\274)q\343<\363\265\245\275\315\315\222=\373\003\372\274\006\257\220<y\274o=\251\033w=\330\370\333<h\031.\274A\217&\275\344V\343<\313\236\033\275\306\330\235;z\014==\260\376\243:H0\267<\342\010\320\274x\370z<\223\232\262=\216k\313=P\216\035\2740\023\322<\311\212\360;\222\236\023;\202\025\307\273{\243\323\272\266_<<\362\374\017\275M\316c\275\224&*=\035\235\324<\216Z\237\273\3747.\271G\335\307\275>\342\273<\350\321)=\202\223I=\267H\033=\001\006\372\275\265\204\350;\276\035\211\275\334?k\275\032.\335<X\206\000\275\375\001\351\273\367\373\345\272\312\245\240\274\306\023g<$1\203:\367\332\023=\341\312\314\2723\363`;vk4\275\030\236|=*\232[\275\317\310\022=.\270e<\317\034\364\272\250?\234\275\331\031\210=\017\251\205;L\257\277<\320M\224<\242=\330\274\261{=<\230\305 =h\346W=~\336O=L\334\223<\277)!=\353 \273\274\376lT\275\036~\271;:\232l\274\346\331M\274\331\037\000<\335x\253=]`\275=v\331\246=B\316\265<RM\013\275S=\201=\357S\223\275\324\243\010=\2324\231\275\355N)\275\016\232\327\274X\270\227=\204\341]\275\356\247\021\275v\307z\275\2411R=S\007\333;\177\243\241=\371\303\034=\377\301|\274\257=\212\275\365\302O=CS\201\274\006\3503=:N\226;)O2\275\025LY\272\323\333S\275W\010}\275\2013G\274\322\233\340=\246f\201\274\325\224p<*V\211\274=t.=t;\233\274\332@\"=\336\t9=\r\326\000\275\026\350\340<r\315W\275\2546R\275\310\354e=\250\024]\275\316\371\341<{\342\334< \334\324\274t\306\214<8a\014\275\377\200B<\223\000\234\275Sv\314<\376\021\223;\332!\253=\231\257\213;\361\006$\274W\230\225=Q\276\010\274\005\311A\274\220\232D=\307\374\366\274\361\266\230;\354\237\252<,k\271\274\'E\316\274J~M=\032\254\237:\267V\002=\375\027\224\275\316\001\312\274\223\370\253<\251?A\275\005\027\214\274,\300\001\274o*\031=CY~\274qk\216<\370\224m\275$\0279<S3\343<\371\001L=?\312\346=\001B\206==*\017\2741\315\317=\223\234\204<\216\006f\275\3042\246<\340\204\234<W\205\031=\262\377\217=\004\004\240=\272\324\341\275\025h4<\030\371\220\275V3\221\273\033\301\n<[od;\275\364\233\2744Q\253\2755N[=\374\237\331\274; \024=\360\363X;\333)\316\274\225\351\243\275C5J\274nq\000=\244\246\354\274\277\277\265<TlZ=\233\250\004>2v~=&\207\231<\3736\207;H\227\231\275^\320O\275\205j(<\361\251Q<\272\240\316<\307|\204<NW\263\274\263\330\\\275\221KI=\267\316L\275\353\322O<\316W\216\275vc\215=xX\250\274{1\245<= >=\367\304}\275\025\034\033=\333A\212\275\021wA\275&\300\236<U\236\234;D\277\321<\001QM=\262%:\275\034T\n=\036\365\300\274\202\311\373<Q&B=\347\210\207=V\'U\275\360!\315<\247\214\026=\r$\340\274\251\226L\275N\013\335\273j8\254\274\351D\200<a\367\320\273\272jm\274{hI\274\243\317\266\2756o\337\273\006$\353\273\223\213\274\274\252\317\252;OzN\273\017e\217=\354\303\327<R\0350\275\245\270\274\2756\307>\275\025Sn:m\376\376\2745\\\327\273\367s\t>2\363q\274\271\032L=\330bF=\273v\317\275+\225y;\025\250\233=\212\034\r\276\0163\207=%8\\=\2756M\275\316r\t<\235\340\270\274\272\r\202=\036\271\272\273\252IH\275\t\2273\274~\347H\273_i\376;\024e\332\273JW\335<\004O\234\271\370\361\371=_\t\014<\332\340q\275\020\346\206<\205\327M=\016\311,\275\375\252\037=\340\343\271;\240\304S\275\232\267\272<\006w:=3\313|\274\313;\373\275\235\307\203\275\327\021w=\313@Q\275=\351\372<Xqy;\376\344\370\274\270~\250\2744\302\247<\244\035\221<K\330\005=\006\361\344\274p}\000=B\367/\274%\233#\275\360<\203=f!V<\021\005\204\274\260N\202\275\213R7<\215\013\'=Tbu\275\027V/\275\377\304\220\275\231\361\346\275\217\017<<\235x@\275\206\t\242\274>\3313\274\005\034\371\274\376\2165\274\306\032\253<%\323\300<4\004=\275|B \274\017\001\245<\236\212\220<(\371y<\027H:\275\301\243\016=\276Y\376<+\345u\273\004{\247=\220\305E=Y9\312;E\021\215=jL\000=\235\246\330\274\210\250#=\224\321}\273\006\031\221=\201\221O<\330\242N=\315/\211<\327\013\316\2743\361\344\273\224\241*<\355\270\270=\266\261\014\274\354\201\377\274>zk\275\377\375\010\275\004\253P\275\360\236B\275<\000\220\275}\013z\275\232\016\253\274\231\205\'<\303\340*;$<\264=M\355\236=\360PD\275c\3731\275\250*\351<\255\'\027\275\225(\006\275W5K=%\032\367\273\345I\304\275\371\236\217\274\237\264\233<!\311h\272\003:/=H\006A=\347=\376;\213f\351\274\027\004\210<|Y\r\275\014\031\305<C\205\023=\002\224\036=qr\013=/M\201=X\213\223;\226\006g\275\204\200\216=gT1\275\3072\232\274mw\007=QR\274<=\213\204\272\365g\360\2733\277\347\274\347\223\302\274\266\323\365:\216\216\025\274\3427\215=\021Z\245<\335\0173<9\255\277<\241y\030=F\3209\275R\310\262=\221`\242\273\335\0236=\265|\035\275c!!=\231\307\260\275\270j\031=2\324\221\275\352\237\177\2758\322a=6\346\363\274\215k\246=b#\223<\374\025W=\373\265\353<\251\364\230\275g{\216=\347\232\214;\273\003\231=\311\303%=(X\311<\r!\271<0\316\234\275.\005:\275\033\253\220=\375\276\022=U\372G\275\210\315\267\275\313z\207\275\017\367\274;L\357\034\275\335t+=\304\334\314<\322\233D\273\177\364\207\273@\331b=\245\306.=\324\332\305\274\336\000F=\266\361\177\275\374\212\303<*q\037\273V\016\274\273v\013I<0i\351<\303\324\270:1\315~\275\027\310{<Z\215u\273_\222c:\357\024\367\273\013bN=\362\013\337<g\210\231\274~\037\236=1\r\216;}_\272=\014\004\354\274\267\330\237=\306\177\020\274O\001\354\274\336\232^9\003\276\330<\360\234.<?z\220\275t\271\270\275\371=\235\275\022F\237=\331\236z<\307\322\324<\367\332s=\272\322i<v\302A\274\225\372\3409\005\227\326\274g\332\216\273\013\006P=C\227\257=\232\3173\2744B\371\273\0375\256=1\224\342\274\273\014\217=\310~S\275 a\230\275\350\206\241<\301\325\007\272,Q\004\273\016\360\233=\215 \034\275\361\364\317=\277B_<\204S\240<Dmi\274*\213\344\274\201}\276<\006,\3568\361\332\243<\027\365\034=\220E\311<R\240\252\275\347\016f\273\304\265\270=\314uQ\275\310\364\331<#0\273;\337\304L<\233\026\213\274\320\237\216\275\t9k\273\371\300\222\275y\351m<EO\372\274\370]\031=\006\333_<6M-\274?\221H;BS9\2755#?\275\025y;=\306\256\247=\016\262u\275O\255?\274\320\374!=\021U\274<5H\n\275\223\376\032=q\265\307\274\250\236\013\275%\266\234\275\3133Z;G\371\303\274d\274\000=/\177\254\275D\'\213\273\027.\267<?\301\036\275\004I\362=\326tU\273(6\346<\242}\010;\014\021\021=\306k{\275\273\312l<\257ul\274\tVo\275\220=\277\274<5\322<\346V\357=u\021\314<\366\232\242\275Z&\026<\314}\250\275})\315\274\315\263\005\275\'\351\345\273\313=i\275D\371{\275Gt\034=\240\276\213<e\304U\275EV\031<\3320x=\373$\016<\026_\337<\275v\037=\005\001\363=\033\210z;\314\373\266;\316\364\207\275#z\351\272% \222<\304x\324\274\2535\013=\005\016V\275\355\3354=C )=\032\r\221=\036\252\372:j\246\271\275\231$\205=Yqy<6\361\215=\206\316\202\275\001:~\275\014\370\320\275\025\303\032=\311\340\016\275A\324\363;\311\300\206\275\037\271\242\275\216\3474\275\000\"\313;jR\364\274AM0=\345\202\332\274\367U\210\275\207\210\r\274t\305\257<\362\024\212=\226{\300\274X\255S=1\375\212;/\264\014\275\021\250\t<\271b|=\261\323\213<Hr\\=\374\320\256\274!\324\3228\366\271,=z`\017=#\267\235;\235\037\255=~\025\267<\333P\007=\361\326(\275\264M[=7\005w\275\307\257-\273?g\252=\236\rz\275\372w\002=\247\237\025=\363\r>=\203\224+={\230\265<\353!\263\274aE\221<7\251%\275\000\233X<\276*\034=\317a\016\274\216\325B=\305\320+=\251\351\320<\217@\251\274\342\362b;D\307\253<0M\234\274\"/Q<.LF\275~\345C\273\361\026\305<4\005\337\272\336y\020;Z\033(\274N\342\256<ie,\273\303)\214=\363\360-=\013\362P=clW\274\202kX=\311\252\211<\026H\227\274\262\"S<\337\342\237\275\200q6\2755M7\274*\245\310\275f61<\300X\030=?\026\257<\372\250`\275\245\264\324\274<\237S\275\024Q\255\275\200Z\270<\272\247\316:\252\220J<\2307\036=\233\201\231\275j`\352\273\356\006(=\3274,=\353\211\212<;z\213<i\330?<\356h@\274\244\234\232\274v|\243<\0365|\274\271\037\371\273\233\345\267\275B\357\274\275\355q\324=\375\277S\2751\245\023;A$f\274\330\364I\275j\220\221<0\321\023\274L|\346=\223\026N\274\352\325\023\275x\237\373\274k\307\033\275\313\244\226<\016\336\022\275\355\350\261;\273\316$=\036\215\342<\274%\247\274\374\342R=\356*\252<\342\302\020=IT\227=S\314$=\230-P=\323\331\340\273D\210a\275e\2232\274Ao\375;(oi\274LW\207\2744\274\321\274c\207\201\275\224\334\301\274+o\205\274\225\035\371\273\033\212Y=\347K\210=9\337\214\273\315\320\310=i\\@\275\367\007\306<,\3335\274\220\372\026\275\3603\352<,\323\216;\254%\210<\211\003\326<\347\312\261\275l\373.=\3666V=\333\022\263\273\217\306C<M\333\203\274\315\332\302\275\0109\177;\030L\304=j\306==?\361{\275\332\232\245=\223\337\376<\254Q7\274|7w=y\264\240\275\3771\317\271(s\320\274\366G\317<L\\\302\274\025\342\205\275\255y\036\275*\233+\274\345\214\334\274\215\361\265=R\365\226;=\223\247\273\360\271\371\272\203\177\006\275?\022o\2754\357\244\274\266\3319<\207t<=\364\330\333=\311\017Z;\202?\202:!y\020\275-x\022\275\247\\7<\'K\013=\205\"\027=[\223\315<\025\374\025\275\343M\'\275\376\230\206<\254\201\030\274/2\216=\261\303X\275x.c=\257H<\274\036.\025=_t\022<\235\317?\2757\267\030\275T\243\201\275\014\037>\274\264\026\350<:\253\201\273\347\003\305\274\351\211\000\275\377=\230=\310J\207<\204\270i=6\3012;\377\342v\273V\003\357<\\\353\016=\256\3565=\372\257\252<\\0}<\304\005\226<\347:\376\274\317\000\276\274\354=\013=I\253(:\274\277\373\273\205\367U\275\2702\265\275`}\360<\336b\227\274W\270\322<\216\271p\275K\203-\275\325\332 \274\030n\313<\177\343\366;\367\364\271<\311\340J<\243\366\325;`\267\210<\016\220\006=\301\251S\275\211=e\274\310\037\270=\307?\013\275L\355\245\275\232\\\244\274\223H\036=\261^\235<\021\350\010\275\371\3362=\3557i<\336\366R\272\'nR\275\343\325\257\274\237\347\367\274R\rP\275\252+\207\275#\205(\275\341Z\017;\026I\240;\213\341\324=\020\241\020=\273\376\362<\3631\000=\273\034?\274\251\244@=\000\205\206=G\320\266\272\343\3329=F%\'=\035i$\273\n\220\316\275\215u#=\352bT\275\343\226\302<ei>:7\344k:\366\\==\214\360\204\275\334h\027\275&pw<%\257\236<\2003\020=?\376(=OK\t:>x\335\273\246f\036<\030J\n\273\303\330w=:\001\330<\227@b\275\370\274\010\275\332j&\275\243\241>\275\027t\214<f\237\374\274\231\233\302<\\]\200\274T\177\"=\217\234W=\247\212\217<s8\242\274\362\277\340\2748\356i\274m8\314<\320t\353\275\177\\\327\274/\363\032<\321W\003\275K\013\237=\240\"\002=9\257\205\274Y\221\254<\207%\231=i\212\006\275\265\267\247\275\271y\022<(V\002=\235;\337\273\014gk\273\336\314\372;LF\020=\206O\241\273\223n\227=,\311\316<\311\335\002\275vE6=4Y\344<\316\233\224=\254$\201\275W<\301\273<\310!\274\017\257\250\272\'\031\034\274\'\271\003\275z\372\255\274\273\032\024<\313\213D;\223\366\241\274\374}h;\302x\205\274\216\346\214\275\306a*\274iqF\274\261L\266\275\016\016P=\037\213\001=\010\266\226=\020 \255\275\252\017K=\240\323\245\275]\233\334=\'K\225\274\215,s\272\245\201\243\273\'\337\024=\307\265\202\275\332\241\227\275\317\215\n<\303\216u<?\231\213\274\343\220\206;+\256Q=br\032=~\034\256\275~\312\241\275\025\377\006\275X\273\205<\256s\225\274\241\005\311\273\323d:\275\266\352\036=\274\250H<\250>i\275\265\260v\274\001O@=\364@\036=\323\235n\2740\363\371<D\013s\275/\262\345<\272\003\202\275=\245\202\274vSw=2U\227;b\237|=qI\326<\014\223\372\274h\250\242\273q\322\007\274!r:=%v\272\273\367\177\202<\206\213\"\274\367P\231={e0\275@\002\215<8Z\227\274\352\332Z\275\274S\345\274\021\032\272<\233\252k\274\305\022[\274L\030\264<T\013\236\274[\365`\275\023\3777=\255.M\275\021\233\r=\250\342\006\275\024\201\n=\376\314b\275\326Bs\275\262\316\320\273\261F|\275\'\247\033=\343\025\245<oRL=\373y/\275\307\307k=\343\013\310\274ki\226\275\033\367\241=]\255o=|\344\035\275\272\202\242=\257&n\275j\306\223<c\326*\275\\8\250\272\253[\250=\244qz<TE6\275\023W\354\275\200\024\264=A3\261<x4\230\273;\265\207<\330\305\304\2739\370\202<\262\024\216\274\342\250.<\'\332\255<:\352D=O\366\373<\301e*=:\273\370\274w\211\035=\026\354v\274\'A\251<9\223\276<\202\276\276<M\3715\274XP\000\273\001X3=+d\204\274\346\014\364\274`\364\372<\024-\254<\344\343\274\274~\372\245=\360\204\260=n/$\275P+\r<\366)\024\274\034u\223\275\316!\377:\352\351\344\274)\332$\275\230\0242\275\363x&\274\254\221\214<\242\246\214\274\372:\230\275\242\265J\275\274\302\331\274\304O\010=\010\331O<QoI\275B\0073=)\204%=|\005\207;\n\351\335=\334.\'\274\\\r@\275\243\301\311\274;\232w<\277\267\202=\201\362\246\2748U\231=\214\205\006>\352\323.\273;\363\022=\274\341J=|I\002=K\301\370=:Wg\274^\002\200\271>0U\275@T!=\335\362h=\023\023\"9s\347\374<\006\325\276\274e\023\351\274T\237\330\274\302\222j=\235\0306=\260\272\205\275\240\330\275=\252\316\244\274H\260!\275)U\023\274c\271\001=\330\332N\273\030 \333;\243$Z=\234\302g\275{\221\033\2750j\313\274\246|\024\275pn\353\274\326\006\312\2731\034\013=4\306\370<\'\261\232\274\253\231\n\275L\000A<U\340\3449\027!\252=\227X\230\275\036\034\343\274\304h\"<\265Pg=F\205\255<\374\001\320\275\356\217\246<\273\203\336\274\226\251\244\275?L\303<\021\216\t=`S(<\2445\342\274\346\023\222\273\304\240\366\274_\223\336<\246\262\354\274S\326\244\275\311I`=|\272\352<c\343<;\231\257\361\27323E\274f\023\213\274\004s\274=\246\333G<\036y\320\274^*\302\274\017\243\371<Lc\";\370\324\333\274M-\252<\236T=\274\251\265j\275\010\003\210=o\215\265\274\204\326G</u\273\2752\276\035\274\265\\\221=Q\275j\274\211\304\037=\245\030\372=\232I\023\275\216\332\355<\236\201\024=\203\025\024<p\334\024=\215\024\227=\254d5\274\325\026\202=\0019\342;D\317J\275\032\273s=\340lM=b\251\235=\371\023\005=Q\0241\275\202\242\331;\"\302\220\273\021)|\274e\'&=\034\345\021\275e\231\247\274\2424[<I\202\252=\220\020Y\2744\212\346:k`\204\274Y7\272\275\2337\216\273\356d\375\274[m\305;g*\316\274X\247\370<\335 \344<\244o\212\273Af\240\274\260\244\004=\352A\214\275\020\337\277\273\244\013\'\275\267@\215\275\230\240\255\275\315\244\010\274\371;$\274;\271Q=\341\365\266\273\233\222\033\275\312f0\275w[y=\3054\244=\t\\D<\314h\237\273&\302T;\200\254j<\251\355V=\247\025#=\246\265\254\274\361\260\000\274\007\230\314\274o^\242\274%2?<\263\237\244\274\210\202u\274*\010\220<\352V\002=\261*\205<\016l\002<\2370\302=w\320u\274\270\306\025<\333\242N<\376\206\224<\220?\025\275&*\364\274\271c\241\275P\334\003\275\233\027\227\274\332\2069\274\200\220(=\203\224\310\273\275\242\006\275\010\370x\275\210\\\026=8[\020=i\335\033\274#\213\306\273\321v\353<%\260\230==\226\260<\353$\202= >\267\275\002\3065\275\227\326\006\274;6%\275uz\304\273\351\200\031>\247/\270<\334\371\210<\373$)=\247\\\317=\232\000\237=\257m\246\274L\326x\275\316\353n=\305\0038<\261%\033\275\tzN=6\362\375\273\273g\006=\230\227c\275\237\204\272\275n+ =\013\226\316;c\332\251\275V\237U=\352#\231\275U\336\336;,\307\267=\207\207\232=\0074\237=gS\370\273\004\336\230=\330\rR=/\237!<\231E3<\322\276A=M\0258=\2239\367\274X\222@<lS\317<&|\354<\334\277!\273`h~=\005\310M=\037\322\246\274\353\257\246<\203\324\276\274\314R\237<\310\354\001=\223V\224<V\014\030=\202\364\3229\010\367\303=u\254\274\274f\246\034;\331\261@=\366\'Z=c\036\244<5;L\275\362\037\264<Uu\212\274\200\221\"\275\314>\267\274\235\343\035=\230\3246\273\372}r<B\310\003\2740\351\\=\002\346\320<\224mi=\333\275?\275\031\203\034\275\356\\\320\274\333y7\274D\255K\275?\353^\274\001K$\274*4y=\244U\032=\246\304\316<2g\206\273G\277\352\275\222Q\204\275Wx\212<\300\325\315\274\207\267\262\273\305\250p<\031\3462=\270\253\021\275\276\re\275Z=\0357\325\021\032<_\240,\275Z\366\320<\274\016\326<\030\006\265=\253\377\367<MB\014\274\247\327\200\274\033l5\275p`\320<\253(\275\274\307\227\334<\306\312o\275\001DD<C\327\226=\222Um\275\261a>=z\r\316\274jDM\274\004\241\271<OR\245<\341\363`=\315\365\250<D_\257=\002\217\200=~\237\270\275\235\3567=\273\034\365\273}v\207<HC\007\274\021\253\221<SM\310<\"o\204\273jm\244\273\303Z1\275MW)=\315\360\256\274v\237>\275\tw\234=\312)\276<\234\232\261\274\242 n\275\317w\332<\033\216\213\2754\024\006=\240H\002\275a\245\260\274\202U\037\275\241Z\302\274\251\330\325\274\207K\315\275^\346>\275\310o\006\275\345\322\0218\221\335v<\233B?\275&\357\022=P\037n<\2675\333\273C\344\333;\031\333y=\244b\213\275\235kB\275N\327r\275\212c\216=n\334\273<0\000#<\302]S=\216I\"\275\307\356f=\315?\'\275(Z:\273o\244\256\275B\326~<\347\336{\274\317\000S<G\r\221=#\324\332\274\000\330[=eX\260\274,7\336\274 \277\037=?\376X\275v\001\021=sh\253\272\0025w=\266%m<\231\237\352\274^\250\014\274\223yJ=\002\'\264\275\364\251\376<\346\004<=\353y\222\271}7W\274S\361y<\317ES\274(\257\250\274\215t\233<\375|\217<P\216\311\272\364S\032=\364F\014\276=\302\027;\237H\317\275:B5=\014Q6<\355s\"=$\030\\\275\217\245\356=@w\3239D>\227\273\222\332\313\274\372\346\217=\274\306\035;:\345\335\273\357$i;\333\317\214=P\302\260<\217\347\342<N\312\220;\202\301\210\274!\026\026\275%*U\275y\214\332\274\020\323\'<\350\277V=s\"\036\275\261\260o\275$\261\344;Gg{\274\3173/\274.9\177\274\246\340@\275, \"\275\364A#=\3410M\275\"\250\260\275!j\001;\247\020\317<(\3113\275\273\340\000\275=.\220\275nC\006\275\360\247L=\362\273\342<\270\023)\275\306VO\274\230\366\323\274&\223\022\275W\325\203\274\242\223\025=\036\251\344\274\361\225\230=\236\200\244\274\224g\343;\206\354F\2750\376\250<c\371\002\275u\273\351\273\245\272\354\274\276\030\034</O\201=\250\262\371\274r\206~\275\254\335\245=\312]\035\272\337\374\003\275t!\243=>x=<\023\027\246;d9\237=\0103\017\274\317-\377;\251\212>\275\360\252\220\275\211)\006=\320\"\254\274\"\247\010=\233i6=\262^8\273M\303+<\206\266\305\274\214\276a=\007g\277=.\302\023\275+\364\023=\342\200;\2733}{\275\017\010\325;\337\360s\275\203O\305\2745\307k<\177\021E:\r\360!\275\003\351\247<\003\276L\275\350\266\023=r\243\217\272\024\326<=\221r\000\275\330\013\366<J\277\034<O(\014<\362K@<\321\341P=zqE\275Z\023\216\275\010w\216\274\267\317\217;6\213\307;\337(\330\275c\262\001\275\327m\303\273\000S\030\275\326\007\342;\001\221\377\274\306\211\240=T\261\333=m0\246\274\334\\i\275\017E\272<7\244\014;_*\367\273f\227\224\275{E\r<\366\350\033=w\203\325\273\232\177\356;\005\037\226;\312\006\374\274\216\251\313\273VNQ\274\3256\227\274n\335~=\315\322\027\275\332\273!<\371\365\210\275\345\325\375\274\266\332\312\274{\225.;\264\203q<\355\221\211\274\\p\237<\007\275\013\275KO\346\2730\270u\273\\\310\314<F\313\211=\356\r\311<\2263\337\274\214|\220<\300\333&\275\025/U=\215A\033\275\2313\003<\340\037!=\327lZ<\262\023\321<\351\311^=\325\003\237\274\345\200\313<9\016\210\275\357]b=\2201\025<\261%\032<\247\210\377\274\001\213_\275laE\275\032FW<_\023\264<\344\310\255<\304\037!\274h\351\301=\244W\220<\224\027\034\275\026\2457<u\232u<\264\233g\274\360\374\347;\\<\204<z\230\313\274\231\206$\274\321\272u\274\370\272\233\275\201\322<\275\355|\332=\246uw=\235\327d<\324\033\013\274&\334\344\274}\323\256\274\222A =\335\024\016=\217}K\275?\257\220<\025\013$=\242U\007\275\254!\177=g\254d\274sL\275=\250Z\216=rD\335\273\201\360?\275\220\262\"\275L&\273=,|\r\275\335\006\002\275\340\233\202=\3139\320\274[\036I=\220 \224\274\366m!;\337\r\024=\010\005\370\274d@\n\274~\230\336\274\242w\216<\037UO=\201\242/<\257\245\036\275\316\317\010\275\331\222\"\275~\254\231=\021tS=\340\246\314;x\267m=\364\334L=*\360\324\274\247U\n\275\207\376\203;\260*\265=\341[E;\207|\242\275\212R\262<\246\303d\275\276\353\007\274\333\205\315;\261\355\257\275D$\007\275E\242\331<\336\333r<\250s\204<\331\300\252=+=\326<\221\373\206\274s\272\371=\177\362[\275\313L2\275\233\375;\275\372\277E=&s<\275\3568\177\273M\352\316\273B\303\014\275\236\2720=\365\367\334\275W\344):X\301\235\274<V\336\274\001^\036\274\236\355\216<x\"\216=\211\253\354<\034N\342<I\025\211\274bO\227<t\235l;\303\303\252\275\233\332@\2721\345\266=\331\345t=})\336\274?Cl=@$\313<\032\023\257\272\323\306l\274\003Z\242<Gh\301\274\216\034p<4\327\334\274\206\014\342\274k\352\275\273p\014\233\274\024\022q<F\256\000=\336\244\254=\345\375\317\275\324\241,=;k+\274\213\276\312\274\221\224\004<+\247\302<\230k\343;a\213\035=\t\231c<X\332\377<[\241\365\273\370\240\342\275\024dY=h\255\374\274\275RQ=\013\3757\274=\204A\275+z\000\276\223-#=K\206\376\274\350s\354<.]F=2\366?<\334\316\250\274\3579\022=D\344\253\275B|\020=\212\257\210<\314<\201<R\235\3249R\327*\274[]\366\274v\350^\275\232\320\353=\032\275|\275!\262\225\275.\361\200\275\304\203\211\275Z\034M\275@0\307\274JH\253=\231!t;\274\3263<\217M\014\275\223r\367\274t\033D=\251\033C\275\335\211\002=\036\tr\274\224\337\014=\277G\212<=\320G\274\030B\031;r\221?=\225\302\245=\030\305\303\274<\265T\275\026\257\231=rMW\275\247x\210=\025\026\023=\306\2036\275\010\261[=\245\243B\275X4\206=\006\273j\274@:\024<R`v<kMO\274\226\311R\274#\240\345;\321\203\244=\211\331\250\275\201\010\332\274\366<\205\273 \'\303=Kf =\007v\227\273\370}\251\271xp\241\275\361<\232=\242L\326;\353Q\206\274\274B\203;\323\3169=\245a-=D\314\020\275\330\224\245\274\364\026B<f+\271\274\337=0\274\033\234\'\275U\\w\274\342\304m\274\n\310\244<g\231$=7\233\370\274\260\221\341\274\346(4=\235\3752\275\233zL\275\315\326\207=\302\2070=\3106\355\274iE\223=\310\222\357\274\376s\020=\260\205\205\2757\362C\275E\017\242\275!M}\275l\013\023=\276\204\'<ko\347=\352gm<\310\332\233=\360\352\002;\361\351\212\275\321P\004<\001\316\035=e\037\320\275\003\212\237\274kW\354<\212\020r<\357\310?\275(h2\275\226\271\030=\357\016\016=A+\201\275\250\327\201:\261m\315=\256\223\231\275>\316\327\275\032\311\002\274\340\201J\275\022\3643;\017\223\332<R\233\305;|k\222=\236\344\256<\251T\207\274\006\177\345<\233\340\347<\034\273*\275\252\206M\275\313M\234<=\226\270<\\\377#<\035\224Y<\254oX\275\033\376\207=\375\370#=\207m\255;\254Iz;%^\221=\211!\347<\354\027N\274\001\273/=\361v:\275\314h(;\264z\264<\251=\235\274\264\022[\27576?\275C\352\200=ydG=\351Dh=\252_\247\273&\255\021\275\346\310e<[($\275\364+\375\272\016h\317\273\376\005\327\274\233iM\275\244\222\247\274\201!a\274 \216\374<-(p\275IN\342<\263*M;D\257\344=4i`;V\224y=\361\210\210\275\360\223\021\275R\246\223\274\301\246C\275\261\324==\256\351D\275?\030H<\216pi<)\003P\275\320x\221=\240p\347<\345,\362<\253\273\250=\316l=\275s\320\235=y\257\010=\374\\3\272\037\337k<\334\220==\020aC\275o\r\313=q=:\274\010\235w=\220U\250=m\224\023\275z\245\335<\256\336\017\275\332AP\2727*\266<\352:\032\275P\312\323\275\nJG<\270u/=\252\037F=\353\205H=Q-\237\275f\271\245\274\224\305%<\232\036\200\273\241\212*\274\355\317\t\274\337i\n<c\031&\275\037\277\300=5N6=\001\225\200=\312&\006\273AiA\271\263A\336;gr\262;\006)r=\004w\030\275\353W\033=\267Ck\2753\213\304\274n\356\021\274\355\377r\274a\311\035=M1\232\275\272\333\310<g:\221=\376\215\021\275 \245\215\272\362\277\240<\217/\210=Rr\340:\206\\R\274Z\266\364\274C\263\324=\014\266\200=\"\010,\274\2074[\275\357\017,\272\221\203\031=\230\021\347\274\337\322b;\357JL<\034=9=\007dy=}O\'\275\364T\334:s\372\340:H\272\223\275\335R\221\274*\367\271<\250\354\233=L\363,\274\257]\251\273\226\221\247\275\304\307\230\274V\037(=\300N\352\274Gj\r\274`8\326\273\211z\212<|u`;\215ss\275\327OO\274\326\013\034=\260`\217\275{,\201=V\n\366\274\247\037\232\274}o3<\341\304o\273M5\200\274\024\306(\275/Gp;\257+.\275YC\315<^\263\362\273\236\350\241<~.k<_T\205\274\324\260\327<\225\024\013=g\206\226=\306\204\361\272\311\207%<\177\001\262;\215\270[<\220_\261\274\314\014\027\272\350\027\271=ub\203\275\243\013\206=\237u\214=\006\360\343\274\221\260\250\275#\306M\274S\307\303\275\2727\363<\033\t\316<vH\034\275\027I3;\001\\c<\210\254\215;\306\227\256\275VK\203;\375\307J=\323r2\274\362\222\215:\312\252\317\272\031\213\017\2757\207\201=!\n+\274Z\233\252<\037\024\020=\234\016\n\275\350F\035\271\371\211\232=\032\024\275\274+\023\003=\302\216{\274\214\r\\\274\312\266;< \274W\2759n\007=\365?\212=\221\277\027=\264i\020=\356\303^\275\224{\007=\007\236x<\251^f\275\205\303\301\2756\201\260\274\250\\S\274RN\377\273S\250\303;\376\224Y=\255\257\354<\004*1<B@\177=\036QZ=\374\356\220;\356NK<z=)=\\\200\333<\265B\t\273\223\t\251<\347/5\274:\323\251=\3627\224\273\356a+;b\324B\271\347\245_\274\341b\216\275\010&Z=G\022\240=\322Cf<\340\022\342\274\341D\213\2749e\345\274\302*\227\273\221\317G\274\217\331b=fL\305\273\230\224\010=\323\006*\274\311\024Z=\321\271\352<\331\030;=sx&>\233\360\272<\253\243\217\274\240;i\273\031f\233\274\331\340\206\275\300\342\234\274O\033\027\275!\352\016=\300BC\275\r\033\355;\007M\360\274\2055\345\273\272\274\345=:\301\272\273|\235\212<p0,\275%~\014\275\234\272U;\331\234\345<\350b\277<\372\307\254\2756B\007=~:\370;B#\t\275x6*=0\n?=\'q\347\274\266\353\025\275\377\3461\273\026\2734=\016W\276\274\030w\n=\007\312=<I\020\205=\333\356\264<\377%\376=W\247%\2758\276\236=\026zV<\236\272\312\275\377\336\347<A\237\023\275\233\322\226=E\030\336\274\210\345\243:j\250\335:\000\221\222=\205\026\256=)8\025<\025\214M\275~hd\275qf\200\275\255\351<\274\264C`\272\350Y`\275\023\203\333;\005v\031=\213r\311<hKj<\274J\304\274\347\237\335<s\256\356\274`[\246;}1B\274\002\023z\274?\263\001\274\334\353R\275n\340\207\275e\317#=~9\306=\002\266\204\273h\357/\275\202\031\017\274r\342\306=\344&\022\274V\375\375\274\320h\215;F\305+=\221\374 \275\301\273\260;\360_\013<\202S\361<g\237\003\275\266%M=\352\200\334\271\0031\206\273k\215\017\275G#\'<q\220-=\222h\252<\351\025\266<^%[:\216\337\024\274!0\036\276?\263T:\003\000]=\223P \275\372%[=^\232\223<q\3636\275O\363\365\274\364>\212=\217\371\222\274\033\332x\275g\\=\275\300\215B\274\377\256Z=\302\267{<\251\235\322<]\033\\<G\250\367<R*\260<b\362\256\275\325\233\002=\300\213\342=\002K}\275I\004\225<\364\315a=\333\013C\275\027?W\275Xf\203=d w\275\236\356\004=\362t\023=]\347}=~\316\325\274L\226\230<U\362\345\273\363Q\313<L\023\243<|\273.=\322\276\002=R\356:\274\306\240_\274\310jp<\350\333\316=9q\341\274\232m\006\275\213\206\021\274\333\'w\275\360\305\212=\274\376\205= \356\221\275(\002i\274\372MV=b\354\225\275.M\002=aj\215\275\244\240\375\275\231\2050=\335\265A=8\315k;I\360@<\273u8\275\346*7\2754\322\362\274\035iC\274QW\240\274s;\376<]T\024=\324*\310\27459\223=\374\307\003=d9\260\274C\246\017<\242\210Y\275M\034A\2759)\264\274\246.\275=\262\034g\274\000\360\331;\253\265\223\2740x6=\323\2158=\315\375Z\275\370\301\031\275\247\252\210\274\t\361\357\274g\021\235;\341\372\237<1\3136\275\037\343\250\275\273\201\222<\212\275K\274\215\005\312;\005\316]=\003}\376\274\257\214\231\275\005\300X=\2076\036=\260\321\241<\210=(=tk*<<\035\333\275?D(;\331\272\275=\336{\301\274\321\356\222<\334\2305\275r\0100\274\237\201\366<\250\025\200:\222\277\216<1Ie=P\2618=\241)l;\016\3206=>\345\210=\334t><e7\353<c\215\371\274x\243G\275\371\334\224<\214\373I\274^\324F=v:\376<v\276\377\274\310r\014\275>\017)\275pYp\275\026\323\225=>\316\352;\001\333E\274\275\304\275<-@&\275\016(6=iB\254=u\3544\273ro0\275Y\212}=\305\310\024=[\227\"=]\240\355<X!+\275\013&\177;\201\222(=\3165\177<\347\022\036\275\370\300\355\274\234\202Z<}\213\301\273\310\236\000=\353?\201=\372\216\016\275\265\256\207<&\243\020\275\305\013Y=\346\370\016=\324\341\350;^2\036\275\305\342\235\272L\'\232\274\030\214\265\275\337G\335\273)\030\263\275\363\277<\275\221\337C=Qu\003<\310$F=\202\271\323\274\357\265\325\274\303\200\r\275\351\274H=\346;\236<\253\260\276\275\214\3718<\204xL\274\214R\237\274\234k\273;\2415\026<\013[\254\275b\337r=\037\301\341<\200!\t\275\177\230-\274FB\037\275\325+T\275\327\336\256\275\352\'\177\275_\004\021=\273~\315<\265\334J=\255V\270=L\360\233=\237\177v=Jh\261\273`\227\313\273\321\273\310\274\277\223\242:\230\311\276=\203\003n\274\210\202p\275\013-O\275b3!\275\226\242\210\275\243\333&\275\337\374x<\022a\266<A) =k\220\255=\242\301\2269\214O}\275\241J\267\274\\x\273<;\260\371<w\202\t:\251\337*=[\332\010\275\224m\272:[\341o<\3469\371\274\265\212\330<\007\211%:?\301\366;3\356\325:\311\032_=\251\320p\274`\010x=\345\326_<\357\310\343<b$\346\274\362\374\267\273\347V\032=9g\254;\312x\342\275\327\377:=\350j\005=!8\243\275\341T\277\275\027\340\206\274\344\224\241=n\340\203<\344t-=\306\261\220=YV\355\273\303p\366;d\327\352;CP\360;\351[\275\273\372z\215=\207\361\2038\357$\375<Af\013\275\321O^\274\302\331\313\274\335\214\024:bL\251\275`}>=\307\363J=Q\366\250\274\346`\334\275}\207\361;-n\214\275\252\320\244\274B]r\275:\321\250\273\350\362\032=\334\327\"\274\227\000\007\274\002\350p=\331J\203\274\244\t@=\272\253\201\274\337[\000\275\211\253\020\275\216\347\346<\352\020=\275\200\350\n\274\245RN\275\331|\243;\220!9=\236\250F=\003\010\302<\034\360\257;\354^.<\263\016\343\275\017\252\373<\003\206\022=\245m\022\275\352\367m\275\235]v\274_\311%<o\022\350;\235\"\215<$\270\027\275\324b\010=\227\307z\274\212.\363<\222S?\275\363\337\037<\274=(\274\373\360r\274\317\331d\273n\232\'<\343g\216\272\365\314\202<p\375^<\215\323\364\274\307\236\200:\260c\263\273\344\005\264<\372\222\352<R\303S=FCQ\274\212|+\274\375\275\361\275g`\014=\323h&=^{\322\272\333P\331<\254\212k\275\005\347\262\274\213\032\247\273\323pF\275\226\233\256\275\177\361S\275Z\241<=\305\372P=w\023n=\364EF<Q+D=`I\221<\020\037\010\275\320\024\315<a\247\001=\027\347\212\275\326\327\277\273`\230\323=j\254\003=x\370\201<\024\037r\272\246\363E\275\326\372\231\273\276\026\225=;\344\232<\303\020G:\246\301\317;\262\023\227<3\275\220<-?\214\274\344!\250;\3430\034<\321\206?=Z\275\007<~ 6=#l\020=\204\200G\275^\360\\=4\243\267=\243bT\272_TH=f;M\274~ \261\274Ws\362<\2501\222<r]m=$\017M\274\016\331\032<\355\316\321\272\t{\326\274\303\3619\275\325\205\222\275\3032\n\2753\216\020\275W\366$=\221\253\314<\220\263+\275a\360\221\274%\n\255=M G=\266t\214;\325\013F=>\\\335\274\302\007\365\274\230\032\3418)s\201\275*v\234<\352!\221\275\311k\010\275\351lx\274*\355E=C\027c<\332a\254\274\021@\212\275\211\000\316<\203\204\001\275N\252z=\344\276\276\273\200\tb\275\321\016\376<\374\213\"\275\264c$\274t\271%<5ZO\275\352\213\3659\000e\010=\247\004\316<MvB\275\210\275\326\275\315!\200\275\020\000\326<\353!\202\272\214\217\316;\322\227\215=B\257\020<\253\246\246<[Y}\273\240\t\034\275v\001\r\275\030\344\033=5\003\256\275\345K0\275.\270\223\275\236\235#\275\243\364-=\341\312+\274\017\200/\275\034\237\342\274\337\027\221=\226\037\t\274/U&<\363\355L\275\223\376\256\274\3478Q=2\204\220\274\270c\351<\221\310\202\275\345\264\034=%\275\207<\236\303T\274b\260\312\273(\007\327<%R\025=grF\275\250\360r\274\026\002\014\276\210\331\306\275\205\266\276\272A\257\002<Kd\205==\315\020=\032\341\305=\342\016\225<\315\005c=A(\027=\312\342\351\274\363\206o\274\330T\005\275\206\2635=\276{\254\274F\251\235<\014s`\273d\373\002=E\241B\275\213\272N\2747\023\241\274}\353\333<\361g\246=\276jm<\260\263\301<\037\226\204<g\252\202\274\306\300\223\275\314\345\300\273\263\031E=\026\032\030=F~\023<\313\002\201<\337\2706<\257[-\274\364\035\321\271_K\244\275\275\372E\274AW\350\272t\215\256\274#\244V\274*5T<\306\'\266\274\233\221\202=)\"\245\275&\026_\275\026_\330<\265\322\307<t\237\361<\225\2445\275\306\204\333=\035\211.<\205\216$\275\352\214\214\275\241\303]<\224\277\337\2732\206\004<\222@\207=$u\"\275&\323,</\031\027\275\270\336\210\275\232\242\370<\352\017\212<\352\325\020\275K\035\200\275 \305\355<[\006\275\273\033>\233\275b\241\370;Oi\324<\n\324\200=l=\372<_n\250\275\'\200\376<\373\257\365=\240yA=o\330x\275\312\301\017\273SJ\217\274\256\374\333\273/\021\314\274\036\366T\272\330\020\236=\341\005\252\275\272\321%<\323\261^\275\370u\\=c\244\355<\220t\256=\021M\360\274\242\272i\275\254\273V\275\210\366\254=\327l\220\275O*\237=G?\336<\212\273h\275\347\2226=\214\273\361<\216:\\:\036\005\030=m:\312\275\n\357\036=\243&\r=C\3134\274U_\214<\001\360@\275\316\035B\274wCx<kd\327<k=y=\260E0\275\337|\257\275\032\006\013=\321\233\324\274\332\014,=\3649d;z\030\271=UU2<5\276\265=Q#\025\275^\254\304<\036I\330<\253\266\036=\251\342\257\275\244\321\221=\032\260\016\275\025\217\021\275.~\030\275\332C5:\227(e\274c\335\025\2759\336\271\275?{\217<j)Q<\240\375\226\275\316\245\002=d\231\023\274D\250\020\274\345\025\001<\nDe\275D\316g\275s\335\027=\374(F\273\236\035\246=\275P\225<\002y#\274@qG\273\003+\372=>-\243<\266C\265\274\345\360\203\274\247\3343=\226HG<g\235F\273?\335R=\232\372\244=\257A6\2753\247\351;&\314\314\274\307\214\216\274\227\306\247\275cj\231\274\2572g\275e8y\274M\013\314\274\025S\024\275B\377\027\275\002\221\244\275(\330\256\274-UZ\274I4\001=\226\177\003\274?h =E>\227=}\247\215=*\035\006=WF^\275\261v\362\274\201\205\267<$\344\024<D\314\022=\243\352\251<\270{\322<\315\203a\275\264Y\036\275\013\277\235\274\272\023\212\274f|\006=\033\3477\275\001\021\262\275\023\314\323\274\357tA<{\340R<\"%}=\3430\273=\230PV=p\314\026\275[\337\r\275i\234g\275V|j\275\271\021M\274=\203\302<\311\267\013=\326\335\245;\211\002\244\273\247C\336;\237\303\323<\0376\274\274\0009E=\363\363\264\274\201\260\035\275\256<\201\274\002\013\227\274<\302 \275j\004\332\274\217\205C=\251T\207<Y\332f<\314{\351;\0358\307\274%\\\221<>l\262\275\235\362\240\274+\333\232\274\3154\353\274\240<\322\273\213\317\363;`\017\033\275\225\216\207=\013\270F=5\232(\275u\2313=+E\204\275\031\247\244\274\217f0=}\225\212\274\244\367\273<V%\013\275\326\223 \275\t\245g\275\032\233\322\274\006\217\204=\026wd\275\335\220\017\274\227\0372=\242T\330\273\261x\"=\251\307\005\275W)\034=g\375\255\270w`E=\025\262/=\351F\220=)\204\364\274n.\345<\2067E=\322\n\224=`\"\313<\352\266\200\275\257\020\033<\007%C=a\002k\275\375!e\2759\201\363=\313\331n\274\226U\317<\034\274\230\275\305\326v\275\234PZ\275\246M`=!\247\260\274\036\254\213\274\301\377\201\275\325\2459\275\267!\020\275\327\210\010=}f\220=\270\006V\274n+a;\245\326\362;\246\215\237=\037\006\";\300\363\003>r\355)\275\036\257\016\275\250^7=o\245\260</qI=\035\326\314=\010\017\242\274/4\002=r\221\260;S\223\233\2749le=\210\357(\274\373\201\223<o\201\021\275e\332o;\241LL=\226]\271\2748\267\n=D\331\336=\034\354\371\274\361=\035\276(\315\221\275\031\020K\275j\324\351\275\000\250\237\274\276\375k\274\214\005\217=\325M\024<\001\302\t=\264a\000<\366Yn\274\354\323t\275A\264&\273\267\221D\274\237\343\263=CB\227;\253\223\326;}\001\356\274\264\351G=\216\333\347\274o\200\263\275g\376\n\275\025)\025\273OU4=\n\330f=\263\356\251\274\272\246\247\274\201\271I=u[1\275E>l;\274\210C:\255\037\037\275\337\025\035<_\363B=\033\311G=\037\3762<\323\352\035\275I\337\237=\257\010\311\275wN\274\275@5\000=}\240\261<\270\021\215=\026\027\214\274\030K==\264\251\266;R\302\010=\234\346d=\327\021~=\002\033\251=\250\006n\275\262\226*\274ep\331\274\225i\265\275\231\007\200<\213k\255\275\246&\t=xj\274\273\352?\315<\360+\363=z\230L\274+\251\250\274\261\334\362<~\207`\275\205\317\004\274M\255\301\2746\177\356\275\362\304\245=\341\004\344\274\031/\\\275\357L\270\274Y/V\275\242b\261\274\365\204\001<\361\3717\275\007e[=\344WH\275\002y_=\016&\264<Q\361\330\2733\tX=\005\235\203<\3323\270\275e\205f\275\302\3449=\214\006\263\274I\261<\275\251\252\303\274\333\234O=_\232(=\273[\224\275\204\334\000\275\241\ne\275\365\253\246\275\003\306\336<?h\333=j\245\220\275\366Di\274\217\036\322:\207\341\177<\'\257\274\274U>\003\275ITI<\343\266j=\327\002\247\274\247\2562=\232\200@\275(\305M<\273\225\032\275I\324\270<\361\005\330<q\273\300\274\033\374\304\273\031\262\222<\037\342\334\271\226\347\231\275\303\2201\274\336g\375\274\203Q\371\273[`><\204\r\247:\262:\022\275o\264;=\010\177\266\274\035\001\002\275\270J\217\274+\255\203=:\352\2519a-U\275\017W\340\274\254\220G\273\267\231\230\274\ry\300\274EX\n=\230\"\273\274\352\326\375\273\033\364\300\274\236\320\337=z\034\031\275 %\207\274\274\365\023;-a\232=qI\276<\301Y<=F0\300\274~\263\256\274\362wE<\337 :\275\333\226\303\274\356\017q=tZ\020\275w)\347\274\367t@<\024\252\017\275O\331\251:\022\241\365<\030\376\240=4\014o\275\024o\306\274\017$6;\224\324\027\275l\233\206=\221\372\032\273\034\345\234\275\316Bk\275T\343\032\274$.\000>\036\216=<\325\307 \275fcf\274f\221[\275\210C\300\2740]>\274\312\343:=\34027;x4\211\275\262T@=\266\221.>\003\221\r\275yh\256<\001\372\013\275\030!9\274C\320\221=\262)\316<\\\'\026=\372\263\247\274\230c\323<\032\025\244\275\307\242\244\274\353\031<\274&\252\214=\266\317\344;\214H<\275h\177b<\350\351k=P\351\242\275\253\272\002\274\343\373\222\275\251)\304\274=\340\241\274N\237(\275i\377H=\245\273\266=6\340\312<0\177\'=O\205\000\272E\221s<\371_r:G\307\237\274\243\363\000\275C\320$\275Q\300,\275\274\007\206\275\227A\251\275\027\302\003\274\363\261\236\273]\336\023=W\300\003\274Z\016Z=z^+9\033k\345\274\276C\"=d\032\036\275\232\237\203\274\345A\273<@\222\251<I9\031=\373\035r;`u\342\274\354\'\236\275_\335\311\274>\001U:\323\332\"\275\237\246%=Q\305\301\273\036\2635=\200\204/=\327\223i\274\246\264+\274v\211\245=\344\010\025<1\347\275\274\350\223\241<\213\n\220={\271\212=\r\257\001\276\027\261\003\275\237}\001\275\364u\235;\t\374\224<\2428\216=\220\306\263\275?\246\277<\272\333\251<\006j.=7\263\004\275X\017t\275}G\227\274iXq;\017\304\304\275\304\0146\275KAx=\253\206R=l\010\270;\251RE<\336B\212\2741\220\204\274\215\014\313\273\335\233\004\274g\032\221=U\227\243<mh\202=\340\212\206\272\312\256\203<\2126\002;\344j\361<H\216\350\274\274&8\275\203\242\331\273R\310\237\275A3\374;+\275^<\'l\302\274\213\t!=*\223\232;\371p\n=\366\324X\275\365G\r;\237J\234=\000\237|=\211\026\010\275\350\037\032\275Z\324\243\275\332.>=D\250v\275c\300\247;\353\254\031\276\250L\362<r-\350\274q\232\r\275\033\3105\275\203\347+\275m\346[<\202W\'=B7\207<\216\355]=\2669\025=\031]\266\274\302)\326\274\246\217g\275\226\203\234\275Ub[\2746\032>\274@\330\234=F\'w<\264=\033\275Tg\205<i\017\022<\271\352\350\274\2545\350<\254B\210\274\200\0367\275\245\252@\275\212Zx\275\306D\243\274TB\343\274W\214X=aZ\320;\246\212\251\275\004eS=\021\313\007=\335\345k=\377.\214<\314\024\211\274\252\367\350<\353\302\364\2747O\212=EjM\273x\013\017\275(\224\032=\221,\262\275\206\261\024\275\000\020@;\025a\324\275\377\250\033;\251\320*\275\205\264\362;\002V\021\275\313\307\013\275\323\210\310\275\016\357\001\272L)\346\272\336\362\025\275M\351\031\275\244\364n=\340\376(<\325Z\250:\372\325\222\274\367\213\211\275\276p\307\274\304\271\021\275\343\305\t\274\373R\014=\225\216T=\241%\266=\317\272\206<\264\262\026\271\023\307\030;%c\375\274\255\303\272=\034\007p=^C\242;\223\305\007<y\2006<F\240@<\3203\303<\266\354\221=\241\374\206=\177\314t\275\325\272\224<J\312@<\346\362\000;\342\301\332\273\230\207\220<T\337\305<\336hN=`~q\275\016B\000\274\304Ea<\020g\'\275\317\021(\274\256L\007\275\014(\246\2735!\214\275\030\212%\274\375\371!=_\316J\2678;O=\"\261\037\273\304ag=5\014H\274(\024\240\274 t\207;\035\362\327\274\024\325\006\275\031N\364\274p/\026=\355\235\242<Z\224\235\274q`\314<\353\206M\275\206\205\264<\302u\205<-\301\235\274k\213\033\275\307\177\376\274\224kn\275\365\237\325<\326:\024\275K\347\210<\377{\253<\343\214\271\274,\001x\275u\236\376\274\260\372\216\274\246M\022<\252\263\325\273c\350\311=\"\216n\274u\236\006=\233\226\221<\314\204W=\375\317Z<\274\225\353;KX\374<\306sp<\024q<<9\332D\275e\033\352\274z\271\367\274E[\024=\204:\236\274^j\020<bhP\275\036Z\363\274#\244\273;\006\220\000\2758\000X=\251\365\200<-<{\275~\332\322\275>\263\000=\317\275\231=\360\2106\275\025\016\365< \233~:\234J`<\234\372>\275\004\001[<\303b\374<\003\223\002\273\260be=\255\363F=\332r\203<\224@\202\274\230\306\020\275\201\227\374<:\202a= ,\257;y\222\232\274\202)\264\275\367\201\005\275:Z\324<\216\257\020\273\021\215\227=\366\311\272\274w\336\264\275f\242\303;C\0033\275\304\277V;\025\253\010<\367\177\346\273\236\023#=)W\203\272I\025\337<?\217\276<f7\'\275P4$\275\330\007?\275Ep?=\276\356t:R\273\334\274\224R\253<\2331\301\274\217iI\273\330\357\225\275AE\326\274\206\346c=\341\237\346\273\352\225\203\275.[\020=\314\230\246\274|i\227\2730\r\r\275V\207/\275^\234\305<\271\006?\273t\307\022<\t/\321\274I\'\027\273\306v\035<B\342\302;\207\362\014<\250\361\226=\301\257\256:\365l\325\274\225\"\n\275\243|s\275p!\347\273\370O\202=\273[z\274\310DL<I[\240\275\003\215\220\274L\203\025\275\210\234\354\274W\363$<\214\305 \275\326|\234\274\005\220\240;\201\243T\275\306\013\004=\033|\210\275q\370\376\274\312G\002\275\267)\024=i|H\275B6&\275\"\204f\274\202w\362\274\3123\265;\303\307\255<I\326\023=\315<\270\274/0q=g\310\340\273Z\205j=\357/[\274\217j9=\375&[<\312r\253=\252\332\035\275\r\215\271;8\332\234\275\200F\033\275\226\312e\274\342\006\026\275\202\247\032=\202\300\340<I;\231<\276\271\266\274!\303\366<\224\216k\274\350\032\022\274\\\310\334<t\372\245=\023)e=\223\376>=\216\232v;\324k(<\277\203\222\274\300\231\004\275o\357\002;\333\033#=`H\362\273zy\325<\357\204\020=\316l\022\274\352\327\356<\206\206/\275\240u1;\350\n-=6+\n\275>\252H<M\255\316<4\210\226=\372\243\312<\244\332\033\274^9\033\274\254(\342\274KNF\275?Z\376\274\327>\222=\353\210\026\275f\245\205;\'\305C<]_\337;\212\206%=)\372\'\274\310\225\251\275\303b\225<\261=q=\000\020\006=U\317\230=\226\302\323:\3775\014=eD`\275\017p\376\274\331%D\274<\347|<\004\327\300<\353\273\205<\010\005\017<\203\033\220<\273o\372;%\031\206;\314G\230\273\222y-=YU\211<H#\023\275\005\361\252<\303x\337\273\235\264\365<\341,\233\275Q\305u\273}\251\006<\253\312.\274\216rD<J\2654\274\nu\272\274\356\272\035\275\013\340\273\274\300\233\r=\215\241\021<\266;\257\274cB\225=\357bv\274\036\"\021=\007\205[\274\\\237\025<I\032W\275\177\022\032\275\200\'\t\275\227_\323\274\006pc;6\034}\275\257\246\230<\'\001P\274\242\3342\275\223u\030\2737\034\303\274\263\217}\272\247\351\004=\277\200\267\275U\234\273\275\3071\337\273k\255g\275B$ =\345\370\255\275)\236\313\273\344\tz=\275\331,\275\205\362\255<\235\337\t\275\247@_\274\310?&=|\034\n\275vv\266\274\320UD=\371\177\001\275\271\236\211<\266\357]\274c\036\304\274I\272\370\274\'\003\214\273\371Z;\273w\307\021=\007G(\275\333B\005;\022\201\363\273j@\337\274yH\001<*Lb<F\\\334\275\201\203\207<\323)\240\275p \216=4F\202\275\354\377\000=ASr\275%\256\256<\244\201\211<\013\366\215\275?\251H=\225\211\024=\204\333\333<\027WK\275\221I(<\356\003\337;\016\203\346;\365.\207=\211\244\267\275\306\371f=G\r\272\274\332\344\001=\rY\365\2745\345\346\272e\316\356;`\266\223\275\306\307\313\274$N8\275\363\363\241\275]\315\024<\334\205\376\271\331\270\256;(\333\265\274)\350\313\275\n\237P=\360\035\373<z\204\025<\340\236\343\274\034Y9\275[\036\357\274\273h^=\0201\225\275\220\277r<w8\266\274V\354\244;\331\377&=\007\376:\275\262\257\304\274\207\263\207\274H\222\267\275\352R\244<g\320\307<\2103\037\275\270\3148\275\tE\226\274\r\227j=0\247\000;W/a=hf\326\274q\0356\273\355\302\247=\330\005\010=\tN\263=\376\217\260<\024*\251;p\307%\276\364k\261\274\250\213\013<F\242(\275\\B\215\2742\246\272<i\006\031\275\000\204\262\274\251\216\300\275\273\037\033;\210\033\211=\361\014\340\275\247v\222=\347\253c\274H]\210\274\244\330\023\275\\\304\025<\36319\274\n\216\226=\031\366\232\275\020A\252=\"f\352\274\266|8\275\336\207s\275_2s<\221\336[\275d(\225<\367;\251\275\342\005\303\275\2063\"=\030\346\002=P>\223\275\375\007\213\275\002\033f\275\234\030\331\271\352\250~\274\343\371\363<\007\020\253<<\320+\274\361\314\020\2747\205l\275\376\200\375\274R\226[<b\230H=\217\247\363<\322\366\357;\236\353\003\275\202\220x\274D\211\203<j\342W\274\215\357\033\275Q!\302\273\026\327U=\241\3557\275\23260<p\347\034:\000\350\255\275\366[\225=\31143\2745Oq;j\362\254\274\373\267\210=n\t\230\271.\020<\275\304\264\345\273\000\374\330;;;0\274\240}\230\273fy\302\273\014\035\375<cOZ=\241\002%\273\375\022\330\273\202\221\377<\214\330\277\275Lb!=\312\265\245=\376]\337\274Y|\024=\3630\032:\200$\306=z\3310;\234\322\213=+\020q\275<N7\275\304\235[\275[\006\234\275!\262\206=\005\220Q\273\314H\266\275a\247\016\274\007\236q\274\366\344\177\274U\320\272\271\0348\262\274\253\277\206\275\326Il=\013s\206\274r\nH=8\374\006=\374\311F<\350\020\030\275\314\210\303\274\000@\237\274\000\007\306\275\217\350\244\275\330 U<\t}7\275\213\322\035\275\234X\201\274b\320x\275\n5\371\273<\261\321<\202v7\274\037vU\274\0241\204<#\007\204=,\255S<H\372\301\273\223\242P\275\021mR=m/q=\302\353\306<\271\023:\275\006\336Q<\030Zu<D\306\217=\242Z\t=\240v\373;T|4\275\262\322\205=xp\222\274\256\320\n\274\302\357-=&\020\236=\344g>=)\327\264\2759d\245\275%\013y:3\223F\272M9\037\274P\026\020;\251\344\203\274\313\201e\275c\331\344<\250+\030=\212\034\347\274\377\205\341<\352Wm<m\277\352\274?&N\275\276\361\363<^\025\203;\252\246\252=V\025\241\275\007@\343\274\332\201w\275u\277<\275\321\207\236\275\002\n\222\274\332=X\273\372L\263\274]\263T=\"\327)=!V\005\275\236\314\254\272\360\200G<\327\377\276\274q\312\250\275\322\360\376\274\350\322\326\274\236\003<<\347~;\275\252YA=!l\204\275\252\303[=\331\241Z\275^1\201\275\027\223/\274\005\202\325=\374\327\270=\375\024(\275\016\215H=\363\214\212\275#\222\253=\373\324y=w\000\272=\207R\324\274\241?\030=JKI=gj\313\275\371\013\267\274\307\363g\275K\362\260\274\373\314\233<.bK=\220<K=\324zX=\272\355?\274.\224_=\235\3656=\356w\232<\236{\265\273e\263\263\274\211\374\303\275\207\3606<Y/\331\275\230\332=\275gc\312=\362y\316<~\237R\275\177:\353<\273n\013\275\262\346\236=^\035O\273rH6\273m\0109\273\260\256\211\2743\331\243\274\236\031/\275{\200W\275\3271)\274gg\312\274\330.\264<\320\217\334<f\213\027:\357\315\313<y5\254\274P\177\211<F\275\225;\\\272\255=I9#=*\252\320\275\266\301K\275\024\332C\275\304\371\321<\351\005\251\274\324\037\272<\\\305\023=\306<\222=R\326\272:\243\270j\275siy\274QJ\227\273\026\256\231\275\236oD=>\017\334<I\005\244\274\243\273\336\273\375\346\030<\261\023\273<\014T\251<\243\224\367\273\273\311\t\275d\252\271<\3131;\275I\3126<\006\006\327\273A\005G\274\326\2504=\177\335,<\265\347\022>\251\257\361=T>\211<>\277\217\275\224!\023=\266\363\271=\3628\300<\310\330\360\274\004b?=\274\237!\2751\313\335\272\372\032j<U\200;;\301\267W\274\347\033f=\223\301\223\2731\016\363\274\316P\220<\317\254\001=G\"\273\275\270\357\373<Nq8<\265\271\365\273\300U\002\275\311\360\276\273\340\352\n=\263\341\364<\363\226n\275\232\234\032<u\215\017=\333\2774=\204\214\013\2757\363\210\274\020 \324\274\205\364\231=E-\264\275ES7=\242]\035\275\336\217\236\275~\274\232\275f\221H=\271\226e\273,/A;\352\274I<\235\204\r\2750\314\036\273\264E*\275\343E,\273\324\235Y\274)\003+\275I\341\373\274\260\240i\274\007\355\330\274W\t\200\275\276`\035=\350~\037\274\232,\020= x\357<]\347:\275\272=\211\274.\273$=\265^\002=\024:Z=Zy\311\272\235?\252\275\276\360s=\340\254\241\274\027d\237;\034\272\017\275B\031\023\273\002R.\275\t\307\255\274@6\354<\325\010\001=\370\307l\275\310$8=;\013\006\273\360q}=\341\215\300=\023\347\306<\323\366m<\233\020\002=\375\030x<?Yl\275\264\334 =\300\3244\274\247\3125\275\210\030\311:\233\323)<H\224\324\275HTc=\233\255\252\274\2115\034\275\220\305\371\274\263\224k<\205\341#=\222H\245;\336+;\274\345@+\275\313(\330<\231\331\341\2750w\360=\357\243\201<+\343\220<\001\356+<K\304\n<\263\313\016\275\332\225\013<H\014Z\272\264S\'=\006\371\346;\214\rK<\007\316\t\275FD\243\275/\031\241\274r\016?\275\325\333Z\273\252K\243<w\262\255\275\235\300\272\271\0241\316\274B\035\025\275\323\nC=QNb=\272Ta=\374]|=\364c==\034\033\227=\303\216D<z\'\204=\312\364\217=+\373\013=\207\036\223\275\2635\260<)\215\273\275~g\276<d\027\263=\202\254)=\212\037\345<H;g\273b\367\263\274\346t\037<\314\202\207\274\026d\266\275\303\361\034<\231\214\241<?\270\226\274k\177\003\275\202\334\032\274\037\221\010=\252\231\227\274\030\371\242=c9\376\273\230\326+\275r\261\006=1\250+<O\022\251\275\222\363\203\274c~\212<\317\203*\271\371\242/=\\Z\337<\205)\240=\203\002U<\200\345\036=.E.=X\"\217\275z\270\022\275|\237\020=)\356\311\274\223\223\036=\026I!=\320b\270\274\341\251\206\275\356\013\226\273\256\241\t<\3272\337<.!\275\275d\376\217=\352[\034<\261\rD=\2673F=zh?\275\246\336\307<\010G<\274\330\270\325;h\346#;&|\325=\267\307\226;\237U!\275\330\357Y<h\257\000:\345\255\033=\327\255\244=i\317\240<\311\236[=\302p\272\274\235\211\327<\336\356X=\304\205\210\275\202\220\333;\020&\317\274\223\"\t=\177\006r\274\321\341\n\275\2430\"=\220\2704\275\244\007\312\274e\206Y=\335\201\227<eZ\256\274>Y\243<\247\233\210\275/\033\232=\252\021&\275\204\223\233\273\262OB\275\\n\024=\254\350D\275\264\323\240=~\007\270=P\3576\273\200\3713\274\224\020\r\275\212\2515\275WQ\313<\225\t99\205ec=\001\246p=\235\022\215:L\344\321;G\373\220<\037y\206\274\"y7\275\345\374\225\275_@\221<\010!{=\226\261\237<E\362\022<#m\204<1\t\272:H2><D\247\247\275\220F\215\273\310\241\"<\013P\001=\272\332\233\273\371f\246\275\3451\007\275\024\007O=9\257Q;\3161+=R{\276\274\201\346\253<\277\327\322<\345\341\035=1>J\275\265\312\214\273<\240r=\243\312(=\t2v\275\202\312\241;\310n==\204@5<3l!=\222E\357\275\006\211U=\335\236\335\273\300\221\031\273\346\035\027;\313\337(\272OR\346\274\242\023u\275\024\2023<jp-\275\242Az:t\332\"\275R\252\210=\362\206\255\274\201M\252\274\330\325\337;\361\275\244\274\007\261-\275\277\031C\275\254\230t=e\023\023\275\357\261\376\274(M\307\273F\246\037<\302o:\275(\351Z=3\315\342<\024\364\200\275\207\271e<\220\0021<\005S\211<\372S\371;T\026\252<\377\3629\275\274\307\n<]\250n\274\'Cy\275\255\323\010=\322\271a\275\257\340\347<\322\305X=\357\207\275\275\261\266\301<\214\275\240\275\275\r\213\275\376:\201=k\337\225\275\217-\n=\264\317)=\036\224\010<\231\036\243\274\247\244g\274V\272P\275\277D\333\275\247\274\013=\276\273\013\274\031\357\200=\350\316\276\272y\251\233=\235\033\207\274\312\234\334\274e\355\201=\230\266\216\274\222\357\353<\204p\314\275\222k\025\275\r\262\270<d\351_\274~\304\373\274\020\351\347\275\224\235\211\275\314\314\217\274\362\030\3678d\234%\275&\257\200=\300H\257\274\351\017!\274\330)\017<\014\213y=(7\025<\256\222\377;\306\007\002\275\246\352\030=P\013\260=\272]\024=\305a\220<\320\343n=\036\251f=k/y\274\204\250\275<\026Xn;\257\266\021\275\312\262\230=WQ\211\275\321u\206=\026qL9&\\\004=\313n\254=G\363\261\274\360\301\337<g\231v\275d\305\263<<L\305<J:(\274\372\306\313\275\366\301\336<+\032\031;\337\360\204=\"*Z=^H3\2756XE\275\t\266\255=\367\335\245;\335\345&;G\313\013\2749\355\323<\035\3323=s\242D\2754lQ=\036\212c\275|\305\024\275\rj \275\305\243\375;\362\367e\275^,[\273K\216\212:\307^8\275\3725<=\235\234&<D\200d\275\357\303\276<uj\272\275\003\376&=Y\322\242<1E\310<@\234\\;+\216\005\275W\325\017=N\362M\275c\t\223=\241\330\203=~1\275<,\366\310\274\321\200X=%\244U\275\363b\344<Q]\217\273K\364\372<\271\035\243<\376\324\"\274H\314A\274\247x\325\275v\236^\275r\302\002=\233\001\305<\322{\354;V\302,=6\215\203=\345\240f\274\251e\256<\231\313\016\274\247\214\360;\275\253$\275\353\025\212=\336(\247=\340\030\354\274\270L_\275\270V-<\371H\002=:X\202\275\205\330r=wec;\233\236\002=7-+\275\233q\022=\351K>\275\002\200\345<\363x\373<\001R\r\275\300\370\206=\204\364\215\274\203}\200\273f\237]\274\036\256A\275Sc\262<\214\336z;q\260\234\275PS!=\302\360\201\275x%\226=:?\000=\322\275V\274\371u\337<t\335\031=21+=E\230\200\275:\341\360<R\257\340;\366\276\270<\037\320\300<>\317|\275\274i\031<\373\037@\274R*\241\275\n\2301=\3039\212<\374\305\230<s\207\034>]&\204=\371\345\n=E[\255=\360U\031\275~W\212\275\364\357\206\274\003\353&=S\224\221\274\273\023\264\275\034k/=\265\343O=\212\007\022\275\205\247j\274]\355\036;\200\322\325\274o\377\345\274\371\327H=\262\330\362<4\271\332\2754+ \275AY\205=\232\242\305\275V\002\n\275\0146.:\260\177\010\275\372o\345\274S]\211<\236\253\216\274\331*#= 1\217\275&\303\242<\226[\354\275(IP<\267aE\274/\324z\275Qq\001=a\223\361<\340\367\260<\320p\213<@.\034\274<4\211<\013\246\031\274\360 2\275\250\221\031=\234\231\r<\336\325c;s+U<yz\304\274=#\367<\267\372\020=\307i\025\275\034CJ\274M\r\272\274x\331#\274Q\242;=\316-\273\275\201j\372;\020\315\033=\222\306\017<Z\244\000\275\257\216\t=W\361\037\275&Y3\275V#\013<\244\310~<\256\314\374;\310y\256\274\334r\274\2759\r\235\275\351\265\003\273>\020\236<sT\225\275\005E\034<5\021W==\357\200\275\356\320b\275+\200J\275\266\261\032\274\243\"\n\275\275\017\322;\n\270\233\275b-j=@\362\275=\310\210\321\273\0318\005=]\266W;7\267;=\252<^<O>\375;s\342b=\241\3548\274\254\356\252<\0318\357<\274\217D=/\337\025\275\232\257\020=\274\016\021\273\201\342{=@,\317=JH\303=\350\003f<*\251\326\275\236\n\t=\266\275\022\275=\323u\274\376\332\351\274\360\177\343<c\226g=f\300\224=\372D\010\274\024\276v\275\276\256\237<#g\250\275{\260\220<\305_\263=]\357b=[\312Y=\372%\031\275\204\000&<z\237\255\275a\np\275Fo\261={\272\306\274\244\0013\274\274\203\306=\271\206\246<\364\2133=Ul\213=[[\314\2745=\262\274\272\342\276\2741\241.\275\241\2663\274a\374~\275\367oG=#\3508=\261z\006\273(\205\247\274v3a<,\325\271\274\346\001u;\225\331\331\271\243Sg\275\034\007\006\273\334>\204=Nm\360\273\264{5<$\227\371<\276\n+=N\204r=\373\310\237<\177\205\276<\207\'\254\275\204\226\361\274\263\014\251=n\020\244\275)9|\274\267{\372\273\353\224\221<\004\010<<g\262[=\035\300r\275\327`\002<\332\0253=\351\345~\275Mu\005\275\252\316\206=\301\306a=\217\203a\273X^\277;;\377\201<$\304f9\306\261o=\026FW\273\227\336\371<\023\301\237\275\"\025\343=p\374@\274\007)\n\275\031Cz=\275\224\244<M\301(=5\345l<\364l\327\273T\324\317;/t\360=\030\035\277=\360\3416=2\244 :\222U\r=\205\253\004<e\330\277<\303\335\370<\004\370\224\275\352\265\305\274\242\315\";\333o7\275x\320@=\362\035\234\274.\004><\341\276\260<\365\342\343<\342\034\n=\254%\374\274\334\360+\275\220cw=\222\253F<z\273-<0q\002=\343\324\237\275\204Q\353\2729\307Q\273\314T\266\275\214\303\021=\205\267\201<\032\022)=\006x\224=;;\367\273p\362@\275\242m\013\275B\277\320<\246|\027\274\244\233<\275\\\215\301\274\006\327\331<\317t\361\273\302D[\275I\314D\275T\347\'<\365\340\275\274\025\224y\275\255\0375<\271\t0=oDf=Bb\031\275\234\253\321\273\210\272\014\274Y\357d\275\000!\3638\300\202I<\254\241\001=\216\262e\274Y\207\256=\1777\273\274\031\357x\274\247t\201\273E\267\246<\276K\004\275\213tE\275\363\020\357<\361t\314<\004;q\273\212\375i\275\206gb\274\006\303B=O\265K<\305^\361:~\244\210\275VH3\275_SJ\275\331?H=,\325\264\273\212\376\255\274I\364\250\274q\265\377\274\333\246\311\274\027x\362\273\2350\\\274\361\235I\275A:D=?\376\360<\204zf=\307\222\302\274\027\276J=\252\022\302\275\203^g\274\252W\\<\370\226\205\274\212z\261\274\254\2573\274\265\360\247<\027R\301\274\356A\036=(v\021=du\313=\210H\277\275\036l\244\274\342\332$\273\243b\024=0\276?=\211\201X=h\365e=\370B\332\275\017v\356=\312\013\3059\202O\321<\243\316\230<\007w\220\275\242\315k<\372\034\340\275?^i\274a\t\325\274\327\347\310;\334%\222=\003\352\251<\372\275\247<\307\330\306\273\310V\264<\275\364\035<R\352\314\274\327\214\036\275\355@\310\274XlP=\225\033t8\333\223\212= 5\014\275\'\327\352\274\276\230\203\275N\333\215\275T~\274=_\246\034=\263`\203\275\235\221\341\273a\361\243<\352&-\275\306\256\244\275\311\276\266;l@\226<\261\345\033=\001\365\026=\033\210\234\274\202I$<\341\334n\274e\035`\274>\352\266<F2\250\273\312\233\266<fmZ<\215\221\034=\340\215\210=U\245\021\275\315\305^=\2114P=w\357\230\275`\201\217\274K$\212\275\031|V<\006\312\221\275\226\206\200<Ml\373<s\026\330=\035\033$\275[\362q=\261@\234\274\322\261\243\273v\022\327\274\021Z\010=\177\221\021\275;-)\275ff\227\275\346.`<R\nw\274D[\024\275\3270*<\372\213\346<\363\306\322;!\254!=3\250\263<\346\276y=\352&\t\275SY\365\274\202L\006<z\231\t\274t\027\274<\351\265\265\274MxW=\202\365F=)h0=\022\347\346\274\261\203\277;6cl\274\233HC\275x\177\266=\030V59\345F\306<K=\257\274\357\201\306\274U\346\312\274\034\014\211=q\026\221=\2276 \274\257\023\233\275\222\023 =\244\343\241\274u\246+\275n&\322\273\231+n\273B\214\032\273Z\231\234<\251\301\300;\004(}\274.M\250\275\235\332\242=_\211\355<\023C\205\275N\326$;\\\361\252\2741\215\266\273\177\004\207\274\313\370\227\274\376e\014\275:8\005\275\257\3734<\317\307q\274\237\037\204=\200\335\n=I\3376\274\243\2367\275O\377&\275\333\267G\275@c\366< \271\355<\331\006\250\274\246+\021=\357\2301\274\264_\017=\247\367-=Pq\306\2743$\273\274%\342\225\275\260y\027=I\370\221;o>0\274\206LV\275k\024\346<\317g\211\275\002>\222:\361\223\004\275\017Z\350\274.|\017=\257M\254\275\226\230j\273X\211\312<<%(\274\365(w\2751\372\n\275I@\270\274\321\357\344\273z\005\230=\222\365q\274\366iH=\266%9<\3511.\274\355%2\275R\331\304\273\325\241\233<\336\367\227\275\016\t\263\274\313\341g<\335\217\331\274\0346\334<\275\365\036<\204\223\004\274\223\274\256<\215\227\343\275\331i\340;\230u\374<Xp[<\256H-\275\377\022\033\273\332A\006<\037.L=\207\227\026<b\335\222<\207\377\222\275\353\256\303=\343BV=\356\326<\275\346\334\361\274\032C\013=\204\373\337<nt\213=\311C\210\275O)\377=zo\354<\n\216*;\\\217\020\275%s\341\274\266\262\036= \271\272\274\277\277\241\275\264\260\016\273\013\302\204<\253\324\347<`\306\032\275#\341\215\273\215\030.=\220m\312=V\320\212=\001=u<\324\335\277<\307\240\221\275$\003)=\314\242(=\030\331\357<8\r\017\275]\226M=\014\205$<0\3277=\304\375P<\224f2;mI\223\275\230\177Q=C\205\241\275!\216\"\275\322+\212;5Id\272\361\245\240<P\317\303\273\324\345\274\274p\030M\2758\313b=\207\032\365\273\335\017\316\274,\310e=C\263\000=\004\237,\275\032\2031=\3675\212=v\353t\275\272\364\334\274x\253==\017\353\365\274\233\\\214\275C5\335<\r\357\235\274\352\tj\275t\2746=[\335\n\276Z%a=\266 (\275?\t\301\274\357\022\245\275\032\251==\016\307&<\021K\235<\363\031\201\274\254\330\024<\324\020\245\274\004;\344\274\3741\232\274\353\332\253\275\304z\374\273O#\362\273\271\363\213\274~3\220\275=~}\275\264N\223\274b\354&\275\206{\3349]\254\276\274\325\235\344<\351\3317<\221sl\273\230h^=O\325N\275i\226\375<\216V\013\275)\250\242\275\3508\300<Q\363\016\2759i\235=\256\255\312<\325\307\311\274L\307U=(wW9\207*\321\274AA\006=\033\300\256=\343\300O=?\240\343;{ D=\235g+\275w\220\213<y\221\250=\357si\275\233\215\001\275\205\217\324\274\276\255\301\275o\177\305\273\010\362\234;?\311\260;\301\016\251\275\021X\350\274\340\247U=\024\371Y=E\365A\275\020T\007<+\2542\275H\027\245\274\374\257\222\274\024\3172=\212\362\217=\217\374\r\274[7R=\223oM=\250,_\274m\203\372<\231F\025=\260\245l=\201P\247\274)\r\026<\243\346%<|r6=\331\254\000=\344DP\274z\021\014\275l\334\211\274\243V8<l:\010=\200m\273\274e\354\343:\230^\323\274A&x\275\267\032\021\2750\356\313<\020\225\223\274\364\251e=\2231\020\275\251\036\254;x\263\265\2753F\227<\375oe<\324\030\354<\002\323z\274\345$\221:\357\332\340;\276\354\231\274o\013p\275\344I\240\275\343\307\373<nO[=\303$\345\274\350\005\223<\032\'\\=\241\000\312\274\002#?<\0359\215;=;\022=\213\321V\275e\004\251\275\232\302s\275\235\276\370:@N\277\273.wY\275\221$\t\275V:-=x\321w\275\332\367\375<\205f\n\274\336;\330\273\207\021\n\276\177j\013\275Id\357=S\203\311<8\232%\275\210\0314\275\267\242\271: gz;c\230O=\233\221\020<U\016M=^\304\333<\325\030\377;\216\253k<\361\227:\274z\020\340<\036*\210\275\233\333\203=?\027\004=\005\316\370\274\223\251c\275\232\241q\275\232y\031=\200\227[\275\\$z=|\021\206=w\236|\275\025\334f=\352C\234\274H\314\346\273\372\r\315\274\342\321\212=ZZ\232\273\346\263V=\020C\232\273\264\265\270\274\351\270\247\274\233\\\032=\327\360\t<\313\210\204=-G\021\274\304\360\212<\364\336\325\274\260\303\"\275/\227\216<\'\235}\275\r\244U\275\026\235\013>5?\"\274S,\206;\246X\252=\305\302\261\273\272\234\211<\023&\276:x\361\314;U\216\216=\030\320z=J)n<\306\350\016=\\$p=M\205\007\275\031|\323\274\205G\t\275Q>\325=>\220i\275\362\022\301\273!\3636;\344\330\230\275\265\372\252<v~\315\274\203\364Q:\305\031\r\274\3647T\275E\232\365\2740\244\260<\242c\303<&\227\223=\211\321a=\017\206\310\274\213\325\036=\034^\004\275 \351\215\274\330(\307\274r\253\207=\202\231U\275C\032\225=\346\235h<r\272L\275u\326\232<\313\255\n=\351\3378=\010\244Q=1\030m=\320m?<h\035r<_\367T=`\n\321<L\266\300<\235|\213;\2469\325<\234\2228:\235\367g\275\352wn<c\225L\273\010w\267\275\350\340\321<i\252J=\375\330\336<x\326\377\274\334\314\002=\005\370\215\274U\0044\273\376}{\2751\300\031\275\0377<<C\204)<\303x\035\275\363\373\021\274yy\213<\241E5=\357\320\215\275>cg\274\206\304\276\273\2275\003=\034[f\275\375\271\254\274{|\272=Y\013\334\274\232J\216\274B\234\255\275\345\222\362=\022\202\014\275\315e\274\271\347\317\234=\350w\271;\243\314`\275\005Y\301\274\027\001\216<\010\241\226<\236s\321:[\210\213=o?\376<\350me=\273k\177=\240\337\001=}fq\274\2732X\275\377\302\027\273\277\310\264<\334\254\020\275\253o-<\255\301{<`\356\232=\317\273T=\347\031^\275\371\027\030\274\237\235D=\316\2172=\273\252\266\274\303\271\325;\212\233f<|\227\177\274\002\224\253<\232\330\370<Ma\274<\027\220\202<\230\254\270\274\000,r\275\021\251Y\2752!\206=\3758\333=5\257v;q\324\367<F\351\230\275\222\331F=\221~\035<J\033{=c5G\274\377\021\216<wJ\241\273n\213\221\274 \305\360\274\347\004\233=x\236\337\274\205`[\274\302\227A9\303\210\315<1\326\307=g\324\215\275m\337\341\274AR;=\372M\335\2746>\360;D\014k<`\242\242:\355<\360:\273\363\021=\274\343/\275\300o2=DL\031\275\r\202\200\275\224\365\344<|uY=\373\001\232\273\230]\312<![\007<\233\0031=\213\014\010=}\240\026\274\331\037M=6\342\244<\365G\032=\343\247u=\226.\007\275\'\r\213\272\214Wl\273\276fJ\275$\343:<\002@\003=?\204&\275\010\334\226=\240\017\217<%\324B\274\275n\021=\274\003~\274\024\226\007\275\206(\r=\001\315_=\026\227X<S\017\314=\244\323f<\337\240\036=_\2337=w\t@;\210\275:\275\006\010\006=\202^\305<\337d\215\272=\307|=_\275\264\274\024\275k<8\222\322<3\315O=\245S\"<\032\366\327\274\376\353W\2741\007]\275\324\362x<\360L];\205M\362\274x\300&\274\335\017V\275\310F\031\272Nc\026\275 u4\275&\002}=\016\344\336<\221\202\273<\251[\010\275}\315\006=\017K\225\275R\317!\272\001\027I\274\010\\\177\274\315\303\240\273\347\266\210<@\206\347<\244\264\023=\341\257\355\274\213\"\\=\270\r\273\274g\366\203\274\253\005\024\275\332\230\325<)4\004\273\257\270\333<\311\327!\274*\r2=\037!\236<<Z\222= w\252<\346\205\007\275T\017.=\374yR=\255\350\364\274\304u]\275\2157\277;}\201\331<h\231\241\274\036(\215<\357\311\320\275\336]\213\275\256\3457\275\305\333:\275g\344`\273v#7=5w\022\275\373\033L\274\301\266$\275\370\323G=\016\277\360\274?\211\356\274f\025\365<U\237\251=YsJ\274\001\023\237\2742\371Z\275\341\376\037\275[\341a\275~\365z=\343\366\204<\2352\270=\2273\312\274\330\256\240\274\220s\206=\016X\205\275\372\341\327<\305\336p\275o\347\336\274\007\300\302\274\353l\233\275\024\363]\275\234\255\305<\206\234@\275\201\204\216\274\342\350\200\275\216\264\206\275\231\001\324=\027\005\244\275\372\021\014<\306\264,\274L^M=e!\363<\024\035\203;\274E\010\275Z \357\274C\371\n\275)\341-<r\216\230=\025\220b<\2259\"=\210\372\214\275\377=\371\274\223F_=\361^F=\273\243q<\274f\324<\317_\036\274t\243\244\275\353%\331\275\3325\n=d\032?<\026\334\361\274\334\020\273\274\225 \225<\220D\256\275\026\005|\275\340\345\340<\022\342\230=\267\245/=c\315\216=\373\236\021\275\234\247\316\274\252\314H\275\266{\004\274\365[\212\274\203\231\000\274\341\377\213=\344\224\307\274\334\230\017=QD\364<\0203\313<\312\320Z\275Q\242 \275\302\2157\275\240`0=\337\372\307=\022\rH\275\210\271\315<\034\206n=V_t\275\276/G\274p\262D\275`Y\300\274\232\301\352;\314S\023\276\221\200\215=\241\341\t;P\311\372=BU\r=\010\256\002\275\352L\016=\335\n\"=\335\355\027\275\215J\223<\027h\025\275\247\274e\275[\220\201;\266\007_\274\246\273\260\2755}-\275C\201\334<_\346\010<I\375\340;\223\333\203=9B\207\273\337\324\027\275n|\206=\201\333\205<)\330\324\274\0108\351\274 \301\220=:xi\273\345\014\363<\"\233\377\2753\356R=\266W\377\274\201\257\203=sr\230=g3\232;\314<\036\275\007\027\340\272\3126>\274C,%\274T\354\271\275\365\245\254\275\310+\025=I\222\203\2731l\235\275?\360\241<\233\300\221=Ke\321<\210\005\277;\270\250\301\274p}==\274:\364<VD\200\274@\236\332\274\251\355\001=\336<x:\365\230\321<\201\r\236\274\256j\350<\267<\252\275\222\014\211<\'\377I=\030)\311\274\013\020\035>\022\200\230\275\004\310\007\274\367\222V:\014\227\222<\361\356\265\274\331\322X=\004\217\343\273\0365\265\274`F\202\274\377\246\255=\303Z\313<\333\254\315\272\253\007\341\273\nW\032\272@\216|<\211u\225=d\030\361<y\234r<L\366\305\273\252\314\231\2751\374\n=\253zS<G\207\311<V|\255=\334\230\243\274$\316\272\274Uu\003\275\332C0\275\\R\335\274\342\372\305=\235\314\215\271\207\336i\274\274\352\002=i\300V\275\233w\037\275!\3761=\327\305\273;8\227\025= \223\243;\363\013\313=\217h\027=#\320\324<\200\302A\275S\205\205\273\304\020\321\274\245\037\306\274\n\022\006\275\270\203\007=C]\242\275U\246O:\230)*<t@\320\274\nL\201\274\222\033Z=F\\~<4)\004\274\366\354\245<c[n;\022 A=dD\242<IU{\275\200\034w;\327o\342\2746\2611<2\372\220\274\313X\003\275\342H\2149\255<$\274\206U\224\274\367\267O=\342\312\234\274\004x\215=\263\036\"\2746\003-\275\335\263\\;\273\267\375\274T\276\235\273F\213\274;=u(\275i\237\256;\215\276\253\275\373\017:=\354\3262<@\330N\274\220\240\336=\202\313\331\274K\373.=]\271\307\273\2325\222\274\243\216\346<\253\314\331\274\005\335\363\274\017\204\036=\236\345\203\275\245\335\231\2745}\224\274?\246C\275\201\263\000;\206\241\210=\220\360\3438t\272\217<\231\241\302<\335\001\202\274h\030U\275\'\000\235\274\215\344\376\271\303{\321\2756\371=<\271]\212\275\326\264\260\274\021\243^=(E\251=\0204\353\274\374\301\352\274\333\364\254<\336\237m=\367\360\314<\337\037\236\2740}\335<:\025\025\275\330\205\2629KQn<\006?\250<\275\003\251\274O\376/\274/\246\262<\313\266\332\274\302o\310\274}\253\226:`\022\341\274I\3661\275\t,\274\274~\022\265\273\211\246\032\275l\030\010\275+*\005=\377?\035\275x\032\330<\tf\010=\"\303\211\275/\321Y=h\'9=\030#\"=\212k\361\273\321J\017=^\355\316\274\330V\370\274\016]\210\275\304t\036=\371C8\275d0\326\274\244*\263\275\024^\205;w;\245<\331#[\275\313\236\222=\347\357\272<\266\310p<\320ZA\274h\303\211\274\265\241-\275\260;D\273\202\206\236<\263l\266<\262\242!>P\254o=q\3107=Y\236G=HfF<\207q@=C\177\246\274\371\2424=\312\243\312=\2718\223=*\333\324\274d\272\203=^\214\347\273\227\034\254=\017\313l\274[\205)\275\316\013\3568\254\032m\275p/\245\274\312\3176\2746\321#\275\274\222\t\274\001@R\275<\313\000=\331\357\313<\250\333\021\275\312k(\273e\221x=\301\317F\275p\376\255;\347\305C\274\311\326\350=kx\377\274\310\360\"<\211\202\336<\361\014\213\275\324r\002=\\g\002\275>\0177;m\300\022\275\332\2633:s\227,=\023$\366\275\276\307\317\2733\241W=\\\330\252\275\rGD<M\n\374<\033P\273\275\036\321g;j\377\212=:]==6o\271<4\340\026=\2663\202\273zU\013\275\374v\346\274\371v\201\275\032G\206=:6\271<\352\254\234;Zt\241\275,\203s;\000\303\210=\222\224\231=\324\276\354;\313\273\002=PL\234=\373\342z<\256\246O<\330\220\034\275\275\360\002\275\303\357+;\006L,<\277\017@<4\014\031\273\261\"\256=\366S\250=\246O\261\275\317\217W=\241\215\214=\351\260\260;\225\216\312<\331X-\274\2777\230\274\200\026a\275\317\263\247=U\267\030=\213\335g\274\240\372\266=\0356\206;?\355/=\330\2646;\021\325\304\274\310]\223=\023\000\363\274w`\236\273\376i\003\275L\207+;\271\000~\275\017\305\306\274\231\307\336<>\211-\274d\217\216\275\271\200\213\275\320\342\207<\365\251\016\2749\352\014=\2031\240\274\322\022\304=Vy\362<o\241E9\205rl\274Y\241\r\274R\324\241\274\254\245\336\274\201\002\334\274\253\375\251\275\351g\207=v\325\201\272y\226\263<\246\206\225\274\223>4=\370\265\362\273\233!k=\324\225\364\273ij\030\275\\\251\033\275\254\0335\275\003\232\211=\262\273\260\2751\314!\275\314\307w\275\352\366\222\274PR\217\275\000&\344\274\006\030\205\274\265\241\324\2747\212\351<C\212\313<\241K\226\274ZN\r\275a\')=\023\237\246\274\004\241\234<\376\274\3539\255\216n<`o\213\274\372\207Q\274\336F\377<\024\374\222\275\226\200\206\2737\3120=\303a\345\273\352E#\275\201D\320:\317\030\216=\242\246\210<\316!*\275t\034\341\273\343\365\232<)\365B=\370(\265\274\206ze;-M@\274kz\202;\331t\026<Y:\341:\215\313\366;\212I5=\016\356\330\273\032t\356\273\264|\245\2755\246\004\275\377i\342\274I\260\267\274\265 \211<\227\370f<>\350\020\275\302r\021\275om0\275\r\246\362<\321\0248\274\303q\021\274=\026\315\275g\364\264\2743\271\270;>\027]\274I\'\275\275\'\327\232\274\253\260\211\271\004\002\274<\t\343\005\275\2469\206\274\231\r\265=\356\000=\275nT{=HU\204<\202\257%\274\271\024\231:\366jb\272\354\364\212;\321\310\376\274\257`\251<\251\372b=\n\333\203\275B\027X=\372]k\274\347\376\261=\3574\300;\251\032\022\275g4\232\275\204\312\006=e\341\214=\310\357\221<\333\301\272<\203[]\274\357\0310\275\367\250\211\275\261\347\352:\324i8=\341\320\364=o|\177\275V\324\244\274\272\177:\2747a\346\274\210cX\275\321\025!\275\256\354\024\275y6\255\275\006\314\315<\212\274-\274&]\357;\324\024\324\274\024\354M\275\270\222\032\275\370L\261;I\006&\275\372\2057\273\031\301\306;;\365\250\275J\005\r=DYD=)e\001\275\333\374\335\272\255\341\323\275\241\320\303=\351u\332:\360\214\235=\377\354\351\275\3539\256=\013>\037=\0178\306=\357D\343=\017\363U<\317?\224<\237\241\"=\365\335W\273\3227:\275\330\245\034\275\244/\321\274\301\021\177:\3107\363<\3053\326\274(\344\002\275#\371\000\274\rH\377<\2040\200<\243\3060\274\367&P=h2\272<\201ZA\274A\023\227<c\226\254<e\322\250\275\317!\232\274X\320&\275\373\335\202\273\234\250\031\274\022\200\315\275\030\225\347;\304\t\334\275\250TH\275\224\3130=zA\345\274tW\030\275\346}\313<\237\330\321;RX4\275\246\271\262<\220\321\221\274\322b\373\274z\024\321<\240\023\360\274\232\333X<^\301\365\274a\334\234=\315\267\303\275\247\273\347\274\354\264\274;{H\023=EG\017\275\327y\213\275\214\377B\274\220\243<<wKv\274\333\226\033\275g\312\240<\023*)=A0\341<\3306\003>\270\275\207\275b\310,\2745\nk=\355+M<\342\265\213<]\3439\275\034\"\361\274\231\006J=?P\214=a\331&=\240\247\301=k\267\037=\366%\r=\277\374#\274~z\215\275d\375\001=\346\236\017\275\333\036\265\274\306\234\313\271L>P\275~\005\024=\217\367(\275\260i\t\273\203\"#\274\372+\213\275}\306\246\274\306\315\327<\343\340f=0\220\263\274\343\330L=\300\205\030\272/\246\\\275\002@ <\372zo\275\220\177]\275\2704\234<\2406F\275\177a\231<\265\222\227=\204>6\274\224`\030=I\307\236<\353o)\275\364M\023\275\216\261J\273f\307\304\275\311\026\200\273\315:{=\004\331\002\275So4\275?0\000=\177\237F=\353o^\275\271\0348\275\016f<=OH\010=$\226r<|D\376\275I0\215\275\257\312$<\340\246\261;g\035:;\271\277\002=@\037\223<Qy<\274N\204\236=\244_\250;)\276\004\275b\223#<\271f\257\272\334X6\275$]F=\272\267\314\273\300\232W\274o\177\365\275\343FH=]\022\274<]\355\222\275\271^C=\250l\026<\222\362\022\275C\033c=4}Q\275/\326\005\273K\326\316\275\320\"\266=\033P]<;\204\336\274cE\216\275\253r\221;s\227m<\327\317\227\273\231\267\336=\372\0235\275?~\372:~3D\273\273\213!\273Y4\370;\366\227\313<\262\360\250\274\376\306\347\273\250#\272\273F\360\207\275;\220\317<\233\260\314;(\3436\275c\201\370</\352\345<v\220s=\006S\271\270\215\335\373<\320#K<\274\250\223<E\215\260=\3020\212\274\373\243\203\274\014\345|\274\253\203\237:\343\306\332<$|\206=\263\007\230<}\265\203<\310p\321\274\235xg\275n\356\236<\332\244\201\274\"\217\336\275\374\030\313\273x\232-<P\r\006=\275\342\325\274\203\2159=\0144\201<U2\206=\345]\013=\342}\002\275\025B\272<\204\245@\275M\253\017<\310\232\262;/\024R=8\321/=\253\353\215=\2410^=f\322>\275\023I0\275U\0375<5@\2108\206\266b\275g\021@<\351t\367<N*\320<}*\236\273\263Y\374<1\213\204\273]\252\204<\300\323@\275\207\332\326<\357\277\344\273?\340\363\274X.\372\274mL\224<\36418\275<\321o<:\304\024\275\225\253>\275\376\035\013\274O\255\313<\032\026?\274\256\"\341\274\3470\226\2747|\222<\322? \275\300\255\253;\207H\037\2742\362\013<\212\315\204=\267%\263=\024\277\016=\265\225R<\037\0373\275\231\214\207<\224*\025\275\2511\253<+\001.\2758\233\020\275\n\301\247<\207\212 ;\235R\270\274\224e\254<^\204O=2\271\222\275K\334b8\003\0028=.\263\254\274,\237\240=&\251\354<\265\271\0339A\210n<\331\265\234;\024\250\024=|o\210=Po\223<s\205\361\270D%5=\212\344\312\275\303\001>=\261\2029<\250\005\214\275\375!S\275M\251\002=p:\353\274O\277\022\275\t\272`\273u\246=\274X\362\331<\"\371\230=\310\016\214\274\353\3102=uq\004\274\017\353\207\275\351g<\275t\277\035=&{\270;\007\026\036=\'u\205\274\334\305\363\274\257N\211\275\005\2476=\221v)\274\263\3150\275j\031?=D\0341<\364\266C=\311\371\377<\'\241\017=Y0\343<:f\312\274\017c\030\275\374\037,=2n\360\273\332\377\177\275\267\316l\275ST\032\275\316z\262:\346\0374\274\003\305\342<D\005\177:\205\031\357\2738\206\307\275p_\301\273Q\177\230=g\351_:\243\375\214=\350\252T=\211\340\242\273\2171i\275\331\r\276\275\2675\t=Q\360\356\274\r\035X=\316\223T=\237\233\225\273\220\332n=\233\255G=\233\214r=\356\247\264\273\013\017\366\274uyW\273`\021\356\273T\007\264=\210\316\266<\304\030\n=\010\364r\275\302vf=\323;3\274Xdb=:\257#\275\304\210i=\261\360\026\275\332\311\373<\240\025,\275m\304\212\274=\224\003\276\363\336\027>\265M\254\275+\207\331<\303[\r=n\346D\274\204\230\n<$\246\352\274\356\263\030<\'\365\217=h 6=)\272\\=n\022\234\274\232C\232\274TBK\275P\316X=\354\261\374\274[\230\233\2670T\304\274\246\247U=\252\030\245\274\265;\213\274\340\317\223=^\325]\275zln=\364U\213\272\374\300&<\017\200\250\274r\200\334\274\347Y\246\274\262\247\217;]\251\013=\241\361\221\273\366\'\240\275\343\343t=\333iy\273\220)\301\274\257Z\322\275\215^\020=\237\'\244\275RU\257\274\\\340\313\274^^W<\264\236\005\275\007\373N\274r\352\342;;cC\275\370\016\244=\274\300\026\275\023\376\222\275?2\262<\276\212\341\275z\344\334<S-\034=\257\334\370<\020\346c=\032\'1\273YB\016<n]\027\274a\240\377<A\245\303: Lm;!\237s\275\265\177\330<\026\201\027:=\013i\275\302\215\247<e~3=\272c\253=\244\235-\274\335\377\356\274\016\372\321\275l\356\316\274\344\344\214=\013\224,\275\302<\016\275\363\276\"\273\203\031;=\276\246C\275d\306\257\275\314\300\267\275\224>\267;\021\243\343\273\357\202\355=\020\373\251=\331\351;=\363\322\355\270\2265\027=pV\257=\227\225\201=\220G\241<\366\333P=\333\343\013\274!*\374\274Y\2039=\023c*<Z\372\317<F\205\223==M==\324B\322\273k\202\262\275\236\177\n\275b\rl\275\021\310\204<j\"`\275\037\246\215\275\231$>\275<O\201=q\254\212\275\236\346\362;\276\'\231\275C\026\344<\n5\253\275\020\315\010=\303,\301;(\246G\275v\240\n\275\214\037\210\274b\014\306<~\033\234<\331H\244\275\363S\300\274aj\020<\304~h=\354[\210<\366\263\354\274-3\207<\0259[\274\323\'Z\272\204\345\256\274\306\265o;\372\033\227\275\242\r\023<\207\215\312\273\306\340;\275\025\0367\274}\311\325<W\315\234<N\3564\275B\020\302=\301\243;<\221P\225\272b\341\252<\206\020(=\374\017\266<\003\350\005\274O\364\277\274\365\030\211=\035hT\275A4\022=\013J\026=ui|\275\325$\357<=0E=Uy\220\275\325\337\377\274\357\273\235\275\342\016\370<\016\014\336\2734~\321;\3733&\275j\315z\275V\377A\275JI\034\275=O\345<F\367\037;\003\246\013\275\3253\014=:\304M=\037\360\227\272\330*<=\367Jq\2751\211\240;\211\203\203\274,C-\271:\202\221\274*+\021=\326\336\217\275\027\003\003=\272\270\214\275\254:9<\027\373\244\275\214\211\016\275\245E\025<\373HW=\360p\335\274\333\3032;\t\330-=^*{\2759Bm=\021\366\354<f\343\252\275%K\034\272\310J\n<\325/\021\2755`\016\275e\3201=\370=\215<\232\220\203=\220\250\000;\002\033\223<\207:5\275\2160\231\275i\017&<\3455\246=\334\376W=\324\317\261\275\220\214\017=\321@\033<-\225\250\274\013\'\002\275\304\232\017\275\010|\375;\303\243\237<\324A\351<,R\335<]R;\274\367\177\260\274W\344\211<\311\245\204\275\350\205\302\274j\301\030=r\344\177<\267B\014=\027\245{\275T\313\236:J|N=\016^\031\2753n\363\274\301\272\370\273\361.\025\275E_\013\274\205\210:=\031b\320=\260/R=Fg\251=\207\321$<\367Z4\275\253e\036\275\317o)\275\355fa=\354$\201\274\027\207B=.\251\213=j\300\240\275\222\203.=\223\300M=\300\340\247\275%^\326;\363r\327;\336\204\216\275\362\316\364;-\350G=t\017\204\275\216\341\207<\340\360\024\275k\363\262\274g6\366\275\201\264\010\275-ye<\212\226\361\274\244\353\231\275wk\236\275]\231\007\275k\243\314\273s\201};}\227\242=\375`\265\274I \320\274\333\272\026\273@\200\010\275\251\r\271\275\262M\331\275\2516\214=\352\276\277:\2208\355:\024i\327\273VC\264\274\034\014\'<\356\270\024\275COn<C<\243<\003\312*<\205J\352=\306\007)=\313$5\275\2514\277\2747:#=\274\274c;\216\202\221\275\207\230\336<\261\026\031=\2328\004>M\033\267=;\243\274<\264\244\023\274\"\017\250\273\316j5=\366B \275\374\351\226;vc+=\006u\201\274\r\377x=\213\274\273=\374\0000=pW\207<\030\371\327<N\346\n\275\265\010\320\274\267\322O\274\306P\301\274BY\253=J\022\364;`\303\213<\2129C\274\'\2662\275\023_\007\275N\2014=\220\265\'=\235\316\030\275\300b\212<]\277I=\r\341r\275K\206_=\031\3703<\334\r\301\274\360\014+=%t\371\273\335[\303;\341\234\215\274\232\337\017\275Y\321\200<s\270\3309IF\000=\207\202e=\027\376\214;\017\316,\275!\356\264\274\246\357q\275\3252\247<\374\321\"=\241G2\275\271_ ;|\221\330\274\273mq\275L\341\276<\313\270\316<\177\371w<\264\340u=|\264\251\275\370\367\003\275\350\r\216<\377 \204\275`FI=P\346\275\275\000\300\030\274\300:\315;\370\005W\275sK\031<\261>\206\274:\022\355<\343\265\014=\246\017M\275#\324 \275\t\036\370;\276\211\001=\263\324\356;a\315B=Z\340\275;R\343\245=P\330w\275_h\353;\230Q\216=\020Qz\275\346\333\351;\267\250\321\275B\223I<G=,=z.D=F\002\304\274\372\232\256\274\003g\\\275\037A\370\274-=v\274\345\004s\275I\016\003=p?\375\274\217\032}<E\201X\275\3404\367<\374J9==\033\216\275\327\325\241\274 \036G\275\023 &=\205 4<\324\330\313\275\nX\025<\241\311\177=.}\035;\353\345$\275\037J\250=\026\025r\275 \220V<\014\2246\275q\255\246\274\265\367\221\274e\307\272=\261\3606;\371\231s=+\'\014=V\304\211\275\266\367\034\275d\326$;\2338\264=\017\202\252\275\342\316\231\273\335\006\271=\204?\250<`\307\210\275\352\222\353\274\003*6\275jU\254\275\373\306\343;K\363\004=H\177L=\200\001\003=\252\253\300\274\200d%=\340<\021=\206\207\036\274SXH:\277\022,\275\200Q7<\302\235\256<\177\204\271\273\2210\212\275\356\022*=-\010\356\274\326\223.\274\315\201\003\275b\344\025>\203cU\2731&:<\351\034\207\275\312\001~=\n\357)\274\022\217;\273\255;b<C][\274\360\n\222\275\210\241\216\274\346\252\324=\256\270\262=_G/\275\370\315\025\275U\034\224\275\026m+=\330\331!\274\203$F<\231\'\023=\235\245\260;\245*\266\274m\324\013=.Z\207\275\232\303\262\274%\226\232\274\034CX\274Bd\034=\376\020\274<s^\007\275\227\327\246<\2426\370<\205r\272\274^8\034=\312\305w=\272|\034\275\277\375\301\274\357\301~\275S\241\322<\345\272\351;Qx\276\274!\266L\274\340`C\275\202\237y\274\337T\005\275\306\261X<\006\215\360\275&\347I\275\312\023\017\275\022\353N:\372\326\257\273\232\270\002\275\315\266s\274{\027\241=L\302A<\203g\274<\t\224*=\r\354\204<]\307c<w\020\200=@d8=e\216&=\315\236\031=\262\3642=\020S\302<\353\2112=\326$\030=\231\315\263<\277\220\262\274\032\343\372;\201\002\303=\021\253\220\274\335#\037=2\236r\273\250}\225\275~\230;<l,\322\273t\377Q;\013\313\002\275\201(;;Uy\205\275\t\214\234\275b\2544=\316\207?\274?\375\253\275\277\363S\275\006\261\374\274_\271(\275\352\226\347\275:\367\177\273#\265S;m\224\335<\205SH\274\026Q\016=5y\234\274\333wY\275\304\021\223=<=\224;\310r\220=`\323y\275+/e=\200Z\376\274\022\244\351<\0164T=\265\227\n\274L7\213=/\022\230\275\3525\210;\016\364\001\275\304e>=\370\0355\275\235$\035=\262\272t\274!\234\202\275V\260\t=\024\332\206\274Q\005\274:o\031N;\203(\n\274\003(\323<\215E-=\'\ti\275|\320x=\330\253\036\275\275\327\322\275N\217P=u<d< x\020\275WS\317<\234\3304\275gi\233\275\014\235\230\274\233\027u=@s\345\273\334\254\206<X\016\205\275l\2202\275r\246\374<\3122\n\274\272M\036<\256\213\016\274p-T=\230bq=\351G\212<i\321F9/\004~\274\264\310J<\022\3760\273\365\036\265;x\\R\273\030\217\221=\357v =\320=I\274!K\254\274\035\364\010\274v\323/\275\273\0224\274)\000\t=\251;\226=\2362z\274!\016`\275\331\330\026=\321\350\220\274\2628X\275\033[?<\001Xr\275\214S\363\273\"7\240:\342\301@\274\020\336\307=\010\212=;p\334\344\2749~]\275\232\241\032=\200\266O=Q\333;\274\243\266\003=(H \275\335\322\312:q\205\037\274_\242\242<\343\000B;\242]d=\245\013\267\275?\0052<0\323\022\274]\363c=\214\325\203=\316\227_=\271\016\355\273^\367\024\275\023\246\303;\373D\037=7\026\367:\236j\314<\361\303D\274T{~\274#\302?\274\202r\373;z\214\235<\250(\214\272\303\223\221;:\306\004\274\\\2465=\317yE<y`\211\273\014\357\365\274\207\252m=\2163\377\2745]4=c\302\036<9\246]\275&i\000\275q\373\234\275\373k\025\275\273\'\217\273\'s\367\272sJu;\313\210\216\274e;\203\273\261\266.<\250\001\177<\375\020\365\274 \037\370=C\225!\275|X\274\274\234f\241\275%t<\275\234\354h=\322\".\275\345\344\347<\273U>=\277\201\236=\300@\225\274\376\033\002<\347U\272<.pN\275\366\250\251\275*\016g\274L\321x<\212;\204\275)\207\275=\224*R;\037\226\332\2733\340\313=\204\240H==\007\223:9\260\215=\262\206X<s\271m\275E\201\033\275\237\'\204\275\003\177\027\273\203\224<\274#\\\373\274w\376\313<\250\334\206\275Ry\037=Mz\027=[\374\027;\202\340\333=\342\310\265\273\r\210\200=\251\206\317\274\004Mu\274\250DE;v\r\351\2742!\207<\211\276\315\273\376L\250\274\001=\236=9C\305<@n\260:f\303\225\274h\206<\275\032\273\234\275*>\014;\254\361\217\272\305A\226\275\237\217?\274\236\001\237\2741D\363\272!\247]\274\356Sg=\201V\335<\030\356F\274\367\246\000\274\302\0206\275\352\t?\275-\222\313<8\005~=\313@\'=\256\221-\275\351\002\310\274p\273\375<+&\323\273\261\026S\274\336\3256=*\372\022\275\037\216{<\'\024;=s\242\226\275]H\n\273\201&{\274L\245q;\211\262\311\274g\264\213\275#\376\255\275u1+=Z\313\342\274\207\270\017\275yCG=|i;=\201Z\215\274j\320\320<\030\263\005\275#+\367<\201\231\242\273em3=GQ\311;{t\036;5=\204\275\202\0271\274b\223\306<lw\226<~o\020=\306\177P=\177P\200\275\3070\313\274\025\036T\275x\235\226\274\261\355\343<Hp\020\275\213\001\301=\275\n\177<\004u]\273\002\304\300\274f8[\273\354\266\271=\240X\322:@\336C\275\006Cd\275\301\243^\272%\314\256\274\376D\014=\365E\325\274\325y\000\275\304\232\320\274\024EB<$\2368\275\216\023\224=0_\301<<C:=|da\275Q\340\301=\010\243m\275\230\031\275<O\013X=\333m8\275\355:\340<B\350\204\275N+\016=\324q\202\274\034l\220\274@\302\232\274\355\332R\273\244\262\244\274\020\365\222\275\002ND\275@\274\003\274\312\2060\275\251\351\257:w<\226\274cn\202\273\314V\033\274\262w\305\272\024\000-<\023S\272<\220\2500<\211\207P\275;\210\310\274\266\216\252=\267\376\026=\036\310\240=\335\217S\275\355Ig\275\0240\367\275\020\215\021=\225-\244<.\002\332\273t\334\303\275{0-\274\371M\017=w\262u=\301\370\"\275r\211,=V\022z=\340\2520\275z\206\307\274\250\237\"=M\375\035<\020\007\224\274\267lp\275.Q\002\275\204\027\373\274\204\327\234=\260\334c\275\001XD\274s\177\270=\2560\321\274V\027\205\275C\342\245\275vt\277\274\273\2009\274\033\321\223=\334\240D\275\315\265\004\275v_\372\274\037\004\033<E\250\000\275+\005\203<\036\312B=xl\037\275c\316,\274\035\026g<\350\214&\275\277\262.\274\265\237\t\273\374\314\332\274\030\374=\274i\240\312:F\005\003\275\226{\020=\211\350\204\275z\n\240\274\030e\203\275\332J\236;\261\315I\275\201YJ=\322\236%<\272\235\216</\216a\275\335@Q=\006\363\231\274\330\tW= \200\264\274\307m\t=C=\251=\207\010\270=\315\202\346:*g<\274\374T\340\274\252T.=\224S_\274\025\243\023<\256sG\274\004\363\203\275\251u-\274\215\t \275\255S5\274[p\366\274\256\313\036\275\007#\265\274\006 C=a\277\370\274\332\217@=\314 \264<\025\3174\275\326\344\016;\r>o\275=\373\265\275\366\002\214=\245g\t\275\345!6=(W\302\274\252\030\242\274\216\325\202\273\367\253`<R\021\310=5sA=\226\370\354\2748`\356<\362\265\220\275\333\316@=Ay\307\274\371c.=\354\021\226\2740\301\253=*\346\347=\023\234\234\274\261\2361=\334\220\240=\033\"\270\275\3165`<i\327D;\340\324]\274\277\254\274\273g\314 <\330\233\314<\021~\353\2751\356\315\274]\263h=\307\325#\275\210\342\267\274\256*\217\275\351\2041\275\343`P\273L\331i=\227\0144=,\217d<\n+\022\275v\245g<.1m\273\206\313\203\274\367\362$\275\247Y&<~9{\275\r\241\007\275\343c\t=75d\274 \000<\275t}<\274\004!*=\213d/<8\026\010\275vD\225\274;\374\326\275\016\336\363;\032\261\034=\374X\032\275A\007L\274\315\327\202=\317)\347;\326\'\320\274\216\224\245\274\310CW=S\341\373\274s\266\032\275\005%\t\274N[\361\274\230v\332\275Y\202\323<\014\006\014\275o\355#=\0375\326\274\032<u\274\300OY=\303\356\270=\370\005\241\275\254g\304=\022\250P\275ID\036=jnd\275\253\336\r\274\344\317x\2747\224\031\275\202\316j\274R\247;<-\325\217\274&\037\263\274\004\266\277=W{\225\2746z\n=\225&&\275\027B\217\275\321\351\266<\373F\263<\362;g=$g\217\274&\363\005<\025(\024\274B\243G\275C\205k=\254\302\r\275\202\306\354<\330\377_=\261\r\227\275y+\245;w\323\242\2752\201`\274\315\367<\273\231\234\022\273\361&\235=_\220+\275\305\002\240\275\323\270\337<XF}\275^\234\346\274\325\020\301<\353y\025=v\317:=\327\335\217\275\344\255\326\274\302d\027=+h\017\275J*\374\272\274\2125\275\233\330+=\316\200\013=<\324*\275U\242|\275:\235\262\274A\305\204=@F\035\274\032\277\\=\332\016\254=\221\317V\274E\\\221=\304\360\036=\375<\300=\037\304\207<\022\316.=\344$\000\275\034\223]=\276\2238=\032<\016=\\\250 \275\264\354\312<+`\006\274U\355\225\275\364\217\317\274\027$&=\350j\332\274\374`\347<\025Xk\274\312\216\002=\362\013\215=g\351\020<k\311\000=!\220\226<\312\307\342\271N<\350<@\204}\2734A\304;\007:f=\253\024\265\275S\240O\275\277l\301\274Hd\013\275f\217\001=ST\273<\001N$\275\n\001\350=\255x\363<j\2046\274\262\004\"\275NR(\275\234a\360<p\372\360= \177\t:8\324\013\274\241\340\334\274O\330\003\275\210\200\007\274\006\233\310:\225~.\275\341 \352\274_\252\017=\366j8\275\271?R\275V\211\241<\371\346\253;N\237\207<\2335\t<\232\336\021=\262\314|<|\355\260=\231\234\251<\243\314T\273\361-,<\343\274!\275\236\006\362\274\332\376T=\013~\244;p\241\211=]48=\200Z\201\274rh\202=Kf\'\275\327\366j;\364WF\274Z}\r\271\215\355 =\244\345\375\2741\007v=\003\217&=h\277\263;E\263\223<\032\342\230= \214\274<\374\000\n\275q\342F\275\254o\237\274\377\377\2619P\200&\275\211\t\020=tU(\275\265\000\032\275\320\355\265<\301\006\033\275\325ro\274\273\252H=d\301\212<\240+\010\274\340\010\226\275U\330:=-b\035=\032qY=7L\224=FK\n=w@q=\343\276$\275\300\264t\274p3\346<\021\3015=n\026\340\274\017\010\315\27409\343\274\232\201\244\275,\020\277\273\355n\215=\303\001\341<J\024\305;\203\263\263\274\006\013\000=\017n\225=\032\330Z\275\221\017\240\274\223\271,\2730\225\202<:\314[\2747\3206\275\356\265o\275\026\360R<\020\204\177;+Ha\2757\326\204:or\014=\267\266\314;\340![\275\330\345\225\274\316\205Y=@\231\333;\034\017u=!B\242\274\213\245;<\335\306\216<\2677\247\274\177\366\243<\023\362\247\274\266L\363\274\346\"\372\274\226(1\275r\325\263=&W\213;\357\027\366;\320\302\272;\207\230\343<\014\206\225\275\235\345\337\275\003`\31790\374\237=\336\257/=b\347\254\274\333@7=\'\327\201=\3035J<\226\361\312\274:~\342\274\345\260\207=\271c\301<\2015L;\250\344\030=\214\240\342=\234\261\024\276|*d\274\201\367J\275:L\376<\341Ax=b\351O=\260C+=\372\2761\275R\342\212\272r\371z<l\243E\275E~\"<T\375(=\337\250\"=\010\352\230=bB\262<\002\022u;\303\211\207<L\340\243\274\216\000\300\274\367\344%\275s\037Z=H\316\214=\304Xu<\030*\032\274\270J]=\262\304\237<\226\253f=\022\241\204=bd\353<Rd\364<\316=\\;\326\213\274\275\236RH=\375D\\<\016YR\275\355\024\221<\200\362\201\274\372\262\006=}\200\301\275\241P\364<\312\235\227\274:\3746<\367a0=\216\242<\275\004\300\237\275Z\334a\275\315x\357\274\206\376\220;\3416\260<o\363\277;G\353/\275\306\312\221\275\033\3252=\227`\221\274\331D\025\275\245#\252\274\216H\323<\026IH\275\254\237\334<x\301\211\275& \227\273\212\320\263;\367\336\371<\370\030#\274b\001\006\274\344@\037\2754:\266\274\'[\252=\314||<v\372\353\274\213hy<,\260)\275\240I*:\"\350\360\274\332\217\371<\010\nG\27514\276\275\t\026>\275\247\221\213\273\313\371\317\275~m\'\27305[=\215\336\274\274_\350A\275?\332M\272\200\350,=\177\242\222=\254H\272<\177\312\323<\000\025\021\275P\230\326\274\013\267\002\275\230\220\211\2743\317\216\275\350o\204\275\307A\021\275\202\254D\275^\212\331\272\257\\\210\275vP\202<\321?\205<\305\305r;\363\314\t\275\3449\017\275\332\326\342\275\"\312\222=N\315\001=\324\001\"\273M\2767<\005\331\032\275\214\253\014=\314\305\037=\276\216\243<\203A\341\274\257L\347<8\225:<O\234\331=\326G\350\274^\257\243;\203\261b\274J\267\343\274\003\207\213=\035\337\276;\032\276\214\274\325\262\256=.\300\324\274E(I=\221\342\231;\346\362w=k\365X;+\"\370\274s\366A=\300\245\220=\223g\033\274\341\010\320;<V\323=\355\265\035\274\206\006?<*\247\270=\340D\232;\211<\267\2747x\331<:\257;\275)\007\217\275\301\312H=\271\373\251<\225!\205:\253n\005=\203I\"\276+a\275\274\357\330\230;\325\371\366<\223\306\007<\275a\007<\034\324\035\275\335\310\360<\023\003\004\274&c\033=\262/\035\275Jx3=Y\214\340<\231\221\323\273\250(\360\274Mw*\273%\313\342\275g\350\342\275\032\371q\274\323\377\024=\340Z\251\273a\326\"\275\244\215~<7FN=\001\022\226\275\264\207q=\227w\331<\211\0160=\241\201\030\274\036*\336\273\035\241\354\274\317\037\345\275`%\"\275\213\304\272<\361\325 <\310\362\213=\r\373\215\274\344\345.\275\224n#\274J\244%=\247\367\232\274\203_\315\273\220\347>\275&\243\251\275\\k\243<7\031\005\275\032].=\306+\036=}\212M<*\014\305<ww\363<\345\374\016\275\264\354\361\272\3618Q=&\245g\275F\200\212;\371+\'\275\370\333j\275(\226\217=\301\027\212\274\036\231\246\274:\204K=<\322\215<\226\315e<R\237\037=\247\322\236=\277\273\213\275KD^<\034\032\220=0\330@=A\320\360<T\226\363\274\204\346\224\275`\253\317<&\347\236\275\210`\253=\005\333o=\320\210?\275\230\\\216=\223\205\225<\003\351\262\274\242kK\274>G\010=wJ\264\273\311K\204\275*\344\341=\005\240\016;t0\r\275\204\251\247<\374\354v<hk\307=\234\207?=\t\237\031;Q\206\336;kD^\274\007d\215\274\346]\\\275\313\000\245=$\ts\275/\243\221\274<\025r=p/\034=\246\375\237\275\026\320\022\275\333\367\205:w\013\257\274\334\300\025<\251\213\344\274\225\375\327;\351mk<\274tQ=,!\030=\211q\376<\366\330!\273\225\375\321\274\250\301\226<~y\211=\260\177\207\273K\262\030=\310\302\222\275z \376\274\013?\226=\205aB\275\314\002\223\274\350\234\3328\010\264%\273Z\326&=Bb\215\274\027\221\022\275SH\202<\342\005\211\275\221i@=`\230F\275\337\010\240<a\223!<\353z)=\203\363S<V\r\005=\221G\362\274ar\336\274\232\275R=\003\236\332<\210\334\224\274@\217\n=\263\214]=\332zJ\274^\350<\274\027\253\031=\252\r\373\274\316\200\357\275\347j\251;\306\003\263\274\234\310\210\275z\016\342\273\007\202\364<&ED\274\206/\334\274d`i;6\366q=H)\010\275*\0367\275\366\323\024=f\203\006=\333H\232\275\315\026E\275\000\004*\274B\314$=!\004-\274M\316\211=\224\326{\275\323\205\214<ot\314\275\030\203X=B\254\215\275\007\314\245\274\022\376\002\274D\024S;+\004\220\274\221\367\014>\312\257\361;\325j\235\272\267\226q=\336\'\300=\364\307\335;\005\257\261=/\335\314\274\344{\321<\305\357\213\275(\354\271\274\244!7=\014\351I=u\272\016=9\330L=\014H\023=%,\256=a \363\273\311\027\016\275\251\t\254\2743G\330\274]u\300=H:\265\275\363\2114\274v\302h;\261\373=\275\0221\200\275\3367\3449\261}\331;\212\005F\274\2125\360<\2025\316\275^\356s=33v\275\nw#=m\312\313\275\200\254>;\316\320\223=\006\335X<\304\277\020=\306\341\306<e\336\226\272\r\021q<\235O*=\322\003)\275q\2024;^\350\352=\036\247\365;\224P\277\275B\205\305\274\357\314\026<\204?_\275\344\236\004=\204\344\240<\334\t\224\274\325\332\333\273\2337E\275\t\315\312<\206!\020=BHg<\275\202.=\t\020\235=X\310\231:v.\272\274\341=\024\275\247\001\000\275\240j\013\274\337C}<\030n\006=\231]\206<j,\306<`f\t\274\247\273\346<\333\251]</\325\013\275\036\036\345\274\362Y3<Q\006h;O\315\274;\210\320s\275\037\247\212<\rjJ\275,u\316\275Hg\030\273\210\360j\275\367\240\232<Z\353\267=?G\332\274\211\344\014=*\3471\275\234u\025\274\223\375\376\271v\333\t\274\336\344\024\275\365\341\375<\202z~=J\354\250<\361v>\275F8\325<A\002\032\275\343:\027\275\331c\201<\262\222\332\274\321\366\361\274D\254D\275\223\240|<\315\013M\275\307\017\212\275[\347\212\272\347O\364<\035M)\275\344\r;\273\274\273M\275\364\341(=\212\273[=\212u\035\273(.w<\315\337\341<\032\002\032\271\003s<\275\t\037\026\2755{0=\016\201\236;\004^\003=\307\2408\275\316\305,\275\253\177a=\267\370\273=\366\267\204=N n=\252:;99<\222\275p\362[=\306\2610=8Ab=o\336\333:4\ni\275\272\233\021=%!\203<\201\251\211;G\302\225=m\335\210\275\314\333\230\275\034\366{\275G\241e=\246\364&<\027\206\314<\277\n\245\2755\247\206=9\202\036\274`\033\324<\354\347\350\274\235n\377<vyM=\213\371.=\376\200\343;.\004\n=\317\213D\2741\017k\275\005Ts;\263\246b\274\217L\004=\276*\247\274\255\231\213=\035\341\256=9k(9\312\356\274=\35602\274z\267#9.\370M=bq3\274\027&\310\274#P\212<\024g-\275\244\341\327\274\245c_\275\332\242\357\273[\000M<\001F?\274\340\025\207=\355\301z=\033\261\207;^\321;\275E\321\302=\210u\000=\343\204\223\274\3162\320;\r\341\234=1\212A\274\317\221 \275m\251#=<[M=\024m\213;\340\330\000=\0019\363\274\2001N;\364S\256\273\030pU=\362\"2;R1*\275\232\356\326;\362P\226=b\233\232;\303\337\265<Z\374\304\274\244\347\337\274\344\002\017\274u\210\320<T\177\373<o\016X\275-{\320\273\262\317\245<z\200\336<\\\275e\273\205\334\277\274\013\324\036\274\034\333\n\275\224D\203;\001\203\005=\260\005T\274\362\031\036=\376\211\266\274z\034\363\271\372\326\005=\224a\246<\037\017f\274\3638X\273ms\321\273|(\202=\260\023\256=\256x\350\274\255\323)\275\237{\214=tB\016\2734\033\024\275\3015\237\275\025)\351<vZ\231\273\370I\214;\000d\301<\314\n\260<$\327\273\274\312\304\222\275\363`\365\2751~r\275?\300&\275UQ\351\274:\341V\274jGU\275\016!\246\275\014~\020=\366v\264\275\\\020\"=\023\264A:;\351\342\274\240\335\360<F\035\370<\221z\000\274PM\213;\0162\224<o\220\033<\255\024\021\275e|M\272\234\220\366\273\216\271\346\275\217i\210=j\207\336<I%\323\273l]\357\274\000\313n=-\357\200\275\323{v\2741\030\222=\336\235\233\274//\323<\263\231\023=\271\213\"<u\022$\275\225\226\032=\213rP=qI\201\275Z\260\034\275@\241\003=t\215A\275\223\312\003\273\356\222\000=\306\342z:h\2474\274i\226\206\275\327\345\340<E%\275<\346\204\224\2737\215T<+\261\254;[l\235<\262\031\340<^\225y\275\226\010o\2751\026`\274$\223\t=\373YT\275\\\254,<2\327\014\273\025\231\336\273(\035\243\273\267\321\353<\351\300\'\274\273S,<\030\202?\274\227\235\357< [X<u\tl\275\006\336\230=\3039\311<\324\334\014<J\305W=VT\007<+\356b\275n\322\014\275\370\207s<6T\212\275\264\3223\275\255\3208\275\353VB<Y\2003\275-QX=s\350\317=\213\373\211<\275\365\372<\246\326\215=Q<\203\275U\245\307\275\350N\334\274\013\3579\2759D\275\274\035If=\236\305\344<S=\020\275Z\204g<\226\316\030\275\311\310\013=\300\354\207\275p\023\022=\006-\322\273qzZ\275\222?\\=\346\271\032=\233\311\306=9N\300=\331\355+\274_\023\332\274\306\235\273\274(\260\342\274\000\353>\273\243y\372=~\263O=tQ\355\274OYE\275\357\372\255<\354\026\006=\314\206\335<}\017\t\275E66=\034\265\276:\373\030\000=\217I\306\273\363\261~\275\275\350W\274\237\272f\275\252\304\332\274\351\020\356<`)\306\275Ip#\275!\272\210<\275\017\364<\372/O=\316\267\335=\'\353a\275\"=C<\007\330\252<f\236\267\275\274$-=\\6l\275V\327\370;\n\321\020\275\031\036\345;\235\337p\274A$[=\365\361\314<\203\034\234<\204[\254;\266\230\005;_\3229\274c\272\325\274\231\311-\275\211S\023=\212\332I\275r\357\353\273\267\275\323\274\n\275G\275\220\255\022=\314\032L=\241\335\265\273\nz1\275\243}\250=>T\205\274\206\321\360\272\027>j<\021\362\027<{\266\247<\304\377\336=\247][=\253\2177\274/L\037\274\361\256!=\2677\025=\034\202\314<g\220u\275q\337\031=\227\315\036=\260\022\321\272\240(\003<Rq\251\273\231\221\257\274\312%\234\275<\036D\275P\036R\275>\002\362\274 \316\213<\357;\001<\254\347\240=\036 \267;\243\321\251;\366\300F\275f\207`=\036\177\343<G\263\222\274&\232\304\274d\227\224\273\377\352\277;\356\317\316<\036q^\273\302\3602\275\036\035\235\273\225\247\017=>\220\'\274\236\364\350<\2333\271\273\3036\362;\232\216)\275x\034\367\275@AA\275C\t\260\274\230\340:=D\001\235=\223Q\327=Gm\235\274\025u\312\275\270\245\364\275d\346\020\275\203\232\2319\027)M=\333#q\275\006\255T;\343(\320\2745CT<^I\240\274k\017\371\274$f\330\274\035\250\214<\375\036\025\275\362\243\005\275\271))<\330\263G\275\233\303M\273\361X\300=\215%\255\2742m\304\274A\322\364\274y\n#<\215\312\316=U\365\325<\014A\315;\000[d\275t\261\217=\250\014\237=\025\263{\275\306\234R\273\227@H<\202k\231\275\370[\'\275f\364j<\261\345<\274Blm<-\212\305\274\256@\213\275[\251\217<\030\323\317;\327\205\221<\002\211\310\273\235\375p\275S\313n\275\025Yu<\006:\265;\310\037A=06\211=bh\342=\357\'p=\233\303\357<\260\002\"\275\026\330\345;7\223\324\271\244\037`\275\223\250I=\210\314-\275}MD=P\"\202=$<\310<h\340\263<px\222\2741\311\024=\207\231\276\274\204\366%<\253.\r\275i\240\254=Z\035\230\274\317t\022\274\252f\007<\252\014\220\274\317\030\207\274\344P\017=\374\r\235\272i\265\365\274w\267\213<\372\010\251\274\0011|<\237\304S\273~\224\n\275\024\205\352\274p\302k\2755\322\326\274\025\373\213\275e\312)=\016u\242=\217P^<\355\340\237\274\256z\243=O\002o\275\337\345c\275\266\322\204=\245\343\245<0[\225=3\304\217\275\304p\345\274\\\300\257<\226 m\275\036>(\273\334n =\360v\340\273O\n\010\275\235)\367\275\263J\314<B\263#<\242\346\256\274\275`\025=_YI;S:\017\275k\326\254<0Pl=n.W\2755\356\203=\001\202a\275\025\235\376<\341\027\"\275\322{\217<\221\226o\274\340\317_=\'\362\215\275\220\302\007\275\200O\022\273\277\034\322\274)\3143<\273\0374\275\020\354\223\275V\323\210<\332(\373\274\254-!\274Z\256\202\2751$l<\214\210Z<\372\231\320;J$\026=\310\243(=\236\242\245\274\2048\035<\362\021\344\274)\335\n=\216\371\312;h6\037\275\273bZ\274A\357L=\215ax\275\317\202d\274[\256\227;c|\370\274[\231q:\336\262\007<\200\2575<][\357<\202\271\206\274\265\344\031=\275I\005\275[\310\251\274j\201\350=\203\215\256<\224\227\033\275{\314_\275Uk\000\275\034\274\263=\213\204(=\177\020>=\216\204>=\353Q\274\274$\211\346\275\037\340\351<]\331\t\275\000\336\033<;\321e\274}Wq\274\215\217t<e\333<=:U\333\274\342\214\025=\250\225\"=\211OL\274r P<Dg!\275\0219P\275h\377\237<\3100\205\274\346/\205\2746\351\372\274\027)\212\274\362\007\005=\257\337R=\027\253\262<\271N\236=f\t\230\275\356\251\226<lpQ\273\370\325\303;\252s);s\321\031\274\001\026?\274{\311\203\275\345\022\212\273_~\323=\277\317\342\274<\360L\275J\022\332\274\240\303\226<\\-D\274ye\372\273b\362\021=pb,=)\220\307\274 H_\275\234O\212\275\221\232\214\274\014\256\017<\301\020A\275\324\351\226\275\245\245\016\275\026N\203\275-\256\216=\244\226\252\275\246Q\027\273\253v \275\n\224\224\2754\021\273\272\305\202-\275\016\303\t\275,\234-\275{\361\006=e\307\274<\252\331\305<\327\305\036=\341\276\221=\344\016\230=F-\335\273?\302\224=\025\350y=\217\334:\275\374\267\324<\2016\001=Z?\215=f\032\204\275\201<\301\272d\204\237=\030\036H<\2003\344;\203\304\315\273\253K\211=\223\346I;\246\3624\275\017\001\355\274s]\312=|\251\007<\307+]\275\304\r\301\272\273\243-=\t\232w\274\350\014\362\273\002\364\276=5\2111=\210\301\224\2744\275L\275\022\236\362\274\202\"Y=\374G6\274\023?&\275\034[\337\273\204=,<Lk\340;qq\370;\\\020\327\274\330\367m<g\343\233\274\320\345\027=\365\374\227=|\232P\274\351\315\332<\264\204\311\275\276\206j\275\330\254\240<\337kn\275\206S2=\276{\314<\007\357\275=\302\317\371<\244\210D\272\340.\211\274\343\037\366\274\360\023\374<\023\240\024=\311\254\252\275\202\253\313\274Q\367#\2751S\335\274|~\255\275~\303\261\2759\371\262<\345\314U\273\nC\204\274J\263X=\354\331X<\325\000\265\2748\200\023=\255\203\234\274q\331\017\275\260\326\025\274g&\355\275\271\350n\273\205\341\211\274x\351\024=\0319\225=\254\0176\275c\201\021\275q9\321\275\373\374|=R\0200<\027\332\307\273\002\244\n=\230o\202=:\214k\273\376_E\2755\354$\275J\204h=p\333\272<\256\301q\274\311\022K=\032x\030\275\201=\347<\230\306K<S\241\'=\312\342\247<:\031\006>S\317\226=\352\034(\274\246\377\214\274(\305]:\320\371\303<\237\214\242\275}\007\010=\2227\231<\316\016\030=\377\320\343\274>f\031=O\226\206=y\024\207\275\010\324\374<\307\220\347<8C\201\275\275\024\220=\340\235<=\'\305\211\275\364~E\275e7<:\0019t<\355h6\274\350!6\274\322\252\253\275x9\207=\n=\317<\261^0\274\225\361\351=\230\014\307<C\377\217\274\316\251\346\274-\203\221=\"\302^\275\375\350\005\275Q\207\303<\334\336\010\275e2{=\253\300^=\323\232i\275t\355\217\273|g\246<9z\340\273\000\263\205\275+kl;\227n\244\274\203b$\275\370g\255\275\356Nr\274uOA\274\361\333\260\274\346HG\275\026st=4\205\263<,\n\013\274\246\245\033\275\326\216\001\275\373:\215<Jj;<\315\\\310<\001s\014=\277D\313<G`;\275\304L\237\2757\373L\274\246ay\274w\365t\274\370he\274\331\260\221=\374N\'=\247\344\037=\237\222i=\'@z=\325\334M\2744\023\226\275\\vb=\3628X\274\241)\"<\350\036\356<\274\325\211=\203m\343\273\347gb;\303$\3339\033\016\314=gRr\275\316\261\010\275bSt\273E\331\253\274\323\177E\273 5\302<\276\224<\273\032\244\370<I\t\230\272\212\313A=\031\255\251\274B\201\213=g\251y\275$\375}=kIZ=+\3745<s\230\243=#\251\202\2733b[\275\330;F\274\244: \275\205\217\253\275\247Z\016\274\017Jm=\363\356\007=\243\237\263<\232\023\n\275\223J\036=\021\013_\2740\312l\274v_\r;H\244\014\275Q0\305=\205\202\022\274\2611,=\203x\272\275\261m\333\274\254!q;\372C\237=\227\361I<P\327~=\240\225\256\2740\266\023=r#\372<\003D\274\273\030\240\226\274\324\337\261<\2115l<_N\020\275\324\316a=m\205\262=7$\317<\001\221\222<\345\343D=\266yT=\202\371\236<\t\340\227<Z|o\273\333\033\271=\236\357\206<l\217z\275\026\323 \275\3470\001\276\272\n\242\274}\305B\274\013\027l=\206D\200\275\334k\374<\025\263Q=\316\251\212\274{V\352\275\234O4=\205\371\201<\240\346;\275\204\242\000\275\366N6=nS\276\275w,$\275\311V\312<B\371\316<\005%\030\273\224X\247<\216\204\256<V\214\216<S1X=\267\346&\275\230\002\233\275\302\\X=\262\366S;v\2443\275\017`\367<\013\346%=O\323\'=\313OE=7lj<\304\372\333\274\353\342\217\274\206\230)\275n\251\374\274\\\t(\274\214e@\274\303\307\010\275\177\313\323<\334\307\200=\252\217+\273\335\333|=\004\312\330<\2102\016\275\341t?\273\257\250\220;\327\215y<\320\274\265<_\033\212=\222\242\263\274\226w\025<c\374\036\275T \224=*\312\200\274\3378d\274\212\014\247\273w\304\215\2751\263\271<O\277\273<\313n\271\274xP\313\273v\312\036\275[)\201=\230O\226\274\212\022!\275\344\257q\275B\2241\274_xD=;c\234<J\300L\275O\302\317<)c\276:B\035\333<\215_3=S\"\017\275\033\360{\275t[\301<\032}1\275c\014\207\274\375\321\330\274\234\303\220\275\327\336\236\275u\251\203\275<AE\275\247\227\274\274/0M\275\003\223\202\274\223L\001\275\025\010\362< oE\274\306d\277=\215N\001<\000\274,\272\271R\211<Gv\303=\361\3506<p\364\233\274V\377\036<\366\241\350\273\256\367\302<ENs=\224!$=\243p\375;\003\267:\275v\020\335<S\272c=\"\333\305<\310\241\236<[-\274=\276\201,<\023)e=*\004A=\010\t\300<\345\253\350;3^\200\274X\267\014<\255\023d=\246|{<?\253\201=\323r\010\275$8\000=\030\005\202\274\237&\006<\342\347\241=\317\214\306<&\326r<\375\036F\274\250W>\2751S5<(\266\324;/\332\254<\023\310%=\037\037\240=\353\203H=~\255\032=\013\274\215\274Q\310j<\351\363\006\275Z\233\241<#\000\247=\005\377s;\006\032\244\274&E\245\275kK\357<\024&g\274\036v`=5X\256=\223F\032\275\245JL=!\211%\274\3358\014\275$\260}\274\361~V\274\276\271\027\275\327\354\205\2750\235Q\275\264\232 =\177\332^<N,\\\275\016\272g<\221\264\341<\212\247\231=\014\2345=\366ze<92\234<_8\000>\026\331\277<\364\203g<\211\031\211\273\334i9<\347\265\206<W\243\224=\020}\234=\301CF=\026F\337<\212@\'=%\211\320\273\372Y\024\275s\310\017\275\362\367\274=\277\273%\275\300\003\346<0\214#\275xb\010=F\373\016\275\327l\'\274\311\272\230;\024\331\333\2750\366\344\274\262\212\261<\354\355+\275\006\275\225\274\241\177\255<q\317\247<wTk\274\226\222_=\316\373\330=r\205W\275\310\025\267=\033\254\177<\353\227%=d9M=O\243U\275n\320{\275a\302|\274K\031\235<\321q\246\275<\361\013\2750!\204<\344<:=_V\203\273Bym\274*\312\371;\275$J\274Rs\035=I\200]\275YA\n=\257G\207=\n&\3329#h\275<\246\315\321\272Z\376\374<\031l*\275\271x\353<\273\220\002:Y\036\232\274\205\330\244\275\246\245\036<\312\267\030=0o\330\275=\002\366<\231t\204=\244={;\213\326t=9\213R;2z\027;Tw\211=R\363\\\275p\016`=\027\203\r\275y\020\317\274\344g\256;\222\203\366\273}tN\275\246\374&\275\372\341\326\275*\0014\275\254\237\331\272\261\304\304<7\336{\273\321\217\\<\257\267\226\275\234\253T=\347J_<-\332n<\023\\\272=\204jZ=\360\362\"=X\004\037=\r_\303;\326\251<\274\037?#=\245\356H\2745\375\007\275\273\030\242\274\204\022\246<\002\0108\275\\\212\277=(U\013\274\240\241\262=l\271A\275\261B/\275O\274\370<\343\300!\275\344HU\275.\242v\275E\003`\275I\231\325\274\323\004J\274<\316\326\2750\237\037<P\374G=\254\354\025=E\353\260<\265\326\030=wP$=\322\027\242\274\250\240:<\261\235\341:\226\204\321<=\234Q<\001!\236\273<\220Q=a\006\251=\232I\224\272\356\376<<\271f\237\2743i\010=\333),<\325\274\026=Fp\312<XA\264=\223\205\237\274\021\253F=\307\201\214\274\001w\317\274\"#\";3e\036\275\347\320\246\274\330\336\211\274\313\240\004\275eZx=\224p\367\273\3777\177\274:Z\237<\246\3279\275\345\275\224\272\022\3135\275V\214Z< \3115=\314]H<$L\0218\373\250`=\376\321,<\021\010\352\274\262\361\273=f\2030=\274\355\304<&\225X<-g\216\273\361\272\007=\"\352-=mS\321<\331=\363\274`\251\240\274\362\302\244\274_\177,\274\246\271\246\273t\"d;O\nJ=\324\266\330\274\212\275\003\275\234\021#=\364\255\235\275eZ\020\275\027K_=(s\017\2754R\035;y}G=\231\227#=\215ye\275\264\321&\272K\005\204\2751\r*\2754Kz\274\324\365K=\274\372\332\274?\2774\274\322\306\237<\310\374\261<<\314D\275\302\267\345;\033b\365<i\346\331\274A\253(=\233\225c<\353o\300<\256\027v;\010Ek\275rn[=\231\365\375\274\001}\203;\006\215\213\275\265F\004\275\025A\256\2745\357u\2757=\211\274\032\306>=\252|j<!\355\231=\350\"d\274>tr\2732%(=Y\252\303\274\017\206\202=\336\231\224=.M;:Oe\306\274a\304\232\274\326\341Y\275I\375\013\273\2250\000\275\3562\016>\315(\013=o\0246\275\376.\360:<T\216\275\341\363Q=\215Lf=\365\227\023=L\253\204=}\204N\275\366)p=\027\222e=\266c7\275\335\311L<\235\")\274\360\312\343;\355\207w\274\024u1\275\274j\367\274\265\217\370\274\t\013\t<S\\\202<lH1\273\246\371\306=4\364^;\025O]=\006^\256;\373(\270\275W3\327;:s\226=\007\\a<\311:\243\275\326\307\341\274\333\037\257\275\335\247\203<\321lB=U\n|<\033-\023=\\\026\177=\372\006\216=<\273\260:\247\013\204=\334\027!\275\251\346G\275\207\177\032\274\3554\311\275Y\316R\274\214d\n\274\023f\376<\245\264\'=4\237\202\273\260Mv<s\200\327\274!\274\t\273\256\377\354\274\362\032o=sx4<\246Y\373\275\240*T\275\305\030\222\275\247L-=\372\263/<\352\377\330;\303\000\035\274~`\275\274\373xL\2752Ot\273\221Q\333\273\034\250}<\004\355\216<\367&W\275\321\300)=\245!U=\201\362\213\274\355\265\212<dR\033\275\335\372.\274pm\302\275#\221\365\274~\215Z\275\017\014\022=\335\306\227\275H`\201\273\002\333u;V\270\023\274\264p$\274 \3200=]\326\334\274\032\337S=O\213\251\273\355R\245\274J_\322<\211\323u\275\311\274\034<l\354m\274\200G\331\274]\263\'\275F\272a;u\317\365\274`\311d=H\321\005\2745\005\031\275\367`n<-\371\302<1@\204<\254\340\001=\326\016\217\274\360\214g\275\310\'\003<\346\305\255<\027\256G=\227w&=<c\207=y!\234\275c\344b\275\026\255\025\275\334\276\362<\337\022\027=\325By\271\361Uo:\270|\027\275u\356\347< J\310\271\2221\002\275\304\252J=\227^\236\275i\247r=2\261s\275\305\205\301\274h\256\211;\3021\337<D\335\336<!X\251\274c\313\220<\275q>\273\006d\027=\177\317\302\274z\311$<\326x\223=Rr(\275\352\257d\275f\215?\274\364\365\"\275\3752\251\273\032\260R\274\354\316\213;\2432\222\274\000\357t=\007\276:=\230\2202=6\014\225\275\201\356\211=E_\203;\201-\244<8\005\035=H0g\274\320\212)\275\244c\016<\231\311\000=(\213\325\275\n\366f=\217\n\362<4\344\250<\377;\273\274\232\230\214<Q\344h=G\000C=\313:!\2753\024\'\2731\361\273\273\272\375\251\274\220\346?\275P\004\014;\346\331\177<\302\340\260=\222S^\274\317!\"=!\002\003\274\253 %<\031U\257\273^_\237=\204s\000\273Z\346\316;\265\346\302\275\213E\265\271\n\037c<\361n\267\274\201\010_=\250 \001=I%\340;\210\273U\274\001\207\206\274\316\233\233=\024\206\341<\262\3313\275e\304\275\275h2b\274\013Bc\275V\370f<2\013\t\275j\200\203\275\362\247H\275\232\2766\274\363#\313<8[\235=\320P\360<\366\202!=\302\"a\275\355\310\260\275\013w\350;\020F\242<]\217v\275o\255\210\275\216\207$=\275\313K\275,\307f\274\375S\214\274\026A\216\273t\344\211<]\020\201=\332z1=\307\362Z\275CU\367<\200D\357\275\277\331\212\273\3650\276;n\006\r=\333U\326<\016\337\033\275m&\241\275\',9\273\257\037\227\275\300\260\334\273\372\203\245\275\020\244\324\275\236\352u\27478\177=\340v\016=\232\260:=?\366(\274\327\001\371\275\267h\207\274\033\313@\275\265\0068=\243\262\372<\026$s=\265.\255\273\035mW<\271\317\252<@\353\002=)\340$\275\271\362\216=\023u5\275\001\221\201\275O\250\222\274\314\266n\274\242\334)\275\223a\217=\377\201\211\274_<z=\343\264\324\273\306/m=Cb\025<\360\022\"\274\336J\"=\320\317\255;9}\361\275J\217\002\275\177\217\n=\265\030\276=\320\037\311=\306\370\231<\206\235@\275\226\217\004=\312N\263<>\266\216\275NN\250\275\303\253=\274zc\342\274#\000\203=\377\223\231=~\005\240\274\025\241)=\224t\320\272y\017\250\275]\010\030\274\234\330a\274\264\247;\273,\020}\275-nO\274\303\002H\275Ub\365<\263\271\034=\211\366\211\275\257\331\235;]M\242\273\306B@=B\216\256\274\317B6<-v{\274+TK\274\337$\022\274\2648\203\275\356#\311=7K\256=/&\244\274\333\215\225=s\300\031<\210\305\371<\312\\\021\274~N\264=%P$= g@=~\262\367;z\226\317\273;\320<;J+a\273J\010i=c\030K=\002\"\263<\303\377\335\274\234!\017=\3056\031=q\346)=\247\264\010=$\001\302\275\355$\221\273\276o0=C\315:\275\376X\004=\264h%=5\3641=\350\305\n<\002:\317\273\214S\031\2757\363\231\273v\n\225=\232/\357<\300\016\010=\336\006\010\275]\201\343<\233\271I\275+xG\275\340\033\346\274\221t\020=c\375\376<h\2361\275\337\270\240<Q\005\022\274\243\313_\275\002\024t;\032\307\303\275\t\231f=\037_\360\274\001\\\316\274)l\307\27455\241<\344\214\275\274\313m\201=]\332\216\275\301\306}=>\3277<\276aF=\212\307\370;XwD\274\372\220\020\275\212\224\270<b\257\210<ko\216\275\230-(<@\222$=x2\366<s\327\264\274\315\223W=\356\256\013=\265}\211=\346\035\017\274\005\227\341\274a\267\360<\375\223\321=\005\246\230\275\225W\351\275\036<P<\326vK\275?\263\344<i\303\020\275\3143\025\275$\306\253\274\032\244\237<\335\344\236\274F\330\336\274\016\323w\275_\032\"\275\3344\267<N\305\023<\261=\345\273\323M\310\274\3257\317<\370\241\205;g\215\271=\334\257t\275\356r\'\274=g}=y\347\207\275\336\001\225\273Ok\205=>\277\017=\314\316\317<\270oS<\340\271R\275-(v<mi%\274\261\255X=$=5<k\037\212<\204\030:=\244g5\275\243VE<\250\026\236\275\220\032\360<\204!\243<\367\317I=\363T\222\274\361\316\235=\303\307\224\273\010xi\274\r\365`=\305\242\337=\240\005\322<\217\377\321\275\355\252\223\275\005\377\332;i\371\312<\356\233W=T\323\365\274\367Z?\274\362\204\\\274U\016e\275\223\022d=G\364\224\274\014\226\021\275\304\342\364<\235\242f\274}l\020\273\221a\231=\322\200\225\274\217\'\266=\213\225?=\023\224\352<\030\263n\274!\3011=]\334\r=5\010i=Q=\330<\255\335\037\275\261\206\034\273^\270\237\274}\320\337\275m$\317<\014\353\326\274\232\341J\275\354\264\020\275\022\014\251\274l{\322=\210/\233;\027\337\355;j\021\271;\221\264\201\275\330\347\226\274\370\203;\274\346\334w\2748Z\320\273\363n\032=\"\3744=\272\314\026\274.!\212<a\243\205=ii9\275\352\346\207\273\371\332\256\275\354[\233<\362\231\364<\307\277\343\275\271\204/\273\367o\201\274[\"\014<\024\320\350;@/x=?\320\235\274\277\311[\273\354\001m=D\207 =\nC\005\275\204\240\334\274\034\211\241\274k\217==75\232=\277\347&<\354W\332<\355n\034=e9\226=\'\217\310\273\204r\312\275D\325[=\004@\243=\347b\023\273L\307r=\302j\357<Fe\010=\231\320\010\275|\2106=\261\021\"\275y9\340<w\246\234<d:\370\274\351R?\275\232\303\\=\362\313\206\275\013\253\354;FE\340;\270\217\355\275\373\"<=\250\006\231<\267\r\322\274\005\336\371\272\331\265w=\351\340\020=\342mo\275\300\254.\273\206\202\273\274\0356\343;\261i\200=\237\"\035\274\322\315\240\274\341\315\024\273\323\207\234\275\037C\247<B\024\246\274\202.\027\275\027\007_\274\363\365\367\274F\322\322<#\315J=\257X<\2757\315^\272\202\3762\274\004\372\343\275\202\017\034=C\373\"\274\2011\221:\2778\222=gj\346<\276l\021\275\032\333\032<\275\251\276\274Z\315g\275\030IA=\241\265\230=\010\354\261\273,Y\357\274\323\005`=\373o\t\275\\,7\274\0008\230\275l9\271\272\345\203\334\274\346\222\205=8L}<\t\276\217=sI\314\273\335\037\010<9\335a=\240\203\207=\360\035E<\"zi\275r\206\202\275s.l<rb\027=0D\360<\324\206e;=\235x\275\257\235\364<p\342\233\273?\374\322<\334\254\\=\355\223\331<\365\224i\275b${\275\343\322\316=:Ht\275\353G\201\274\237\"k=\246\324h;\206,\'=<\310\343=\205\005\2609O\252\237\274\227\264a<\207I\216=\260\201\214=e\035$=Q\224&\275\356\000\2759#\335\310=\254S\206<h\264\212\275\256>\355\274\2552\302\274*\225`<\324I\211\275D\t8\275\2563\005=\303I[\275\261\344\330\274\272\003\000\275%K\250=\266}\226\275\371\330\336<g\360z<\377\220}<r\362\036=\376\020\343<o\007\035\275\236+\005=\035\324\311=\t\375~:\247Zk\274\220\266\021;\257\261t=\324V\t=\230[\273\274\224\035H=\356\221\005\275\366\017\261=HIP\275c(\206\2742\337\345<\255\023\265\275N1\212\275\263\020z=\010\360\216\274&\250\215\275\243\240\253\274TY\250<\232\353\215\275?\233\236\272\311\022X\2757\303\333<\033\246\242\275\211\375\230\271\271g\017\275\273Oh:r\247$=\371g\215\275\033\266~;\343\020K\275\207\342^\275\230\006\017\273\'\250\225=\376\004\247\274|G\321\273H\025,=v(\211=<\220{\275(a\325<\032r\332<\247\372\n=\210\352`\275\005n\246\275\315;\240\273 \227\254\274i\024\230\274[\355\215<\370^D=\220\272\206\275\260\014\272\274\004\262(=}u\177<\373G\266\274H\375\215\274!c\364<z|&\274\203\\\207=\242`\006\275\005\335\310\274?S6=\325\026u\275\371\257\344\274Ma\310\273 \362\212\275\026\370\267\275\021\'X;D\210\250<\325Q)=\361\301h\274\246\362\371<R\363\177=\264\354\353\273d?\n=\245\203\320<V\rE=\217^\310=\376\017\236\274{;\230<!\214\003=\247T\232<\213\025\212=~\267\225<eP\343\274J\367\306\275\021o\227\2747\211\n=7\241s\274\177`%\274\262\345\n\275e\214:<\362\267\277\274\210\376\271=l|\360;u^]\273\033h+=\211\254\304=B\343(\274\203]\270<l\2070=\305\262\205\273\361\275\307\274\322\240`=(\3009\274Q\263\007=\222R\032=\"H\275\275\310\321\331<f\364\332<c<\305<\037\301\023\274\250\261\340\273\227\265\210\274\242\273);\327\262\r\275+\342\024=\001\364R<d\227C=a\033T=\216\304\000=\337G\226<\252\017\213=\237\240\224=\202r\220:.\341\006=\'Yd;\034\250\237\273kyh=\036q\353\273\016\352%\275k\271\311\273k\226\324=gs(\275\234U\243\274\244\027A=#\375\025\275o\316\232=\234r;\273\377\216\313\271\226\325\260\275\251\263\003;\231\265\274<(\277Z\275\003\3344<R\212\330<\244\265\301<2\360\r\274\262\312G\275\316e\177\275\033\216\037\274\2325R=\2560\324\272\303\335^=Q\245\000\275\245\\\273<\366e3=\356\272\023\274\031U\352<b\t\030\274\2345h\275;\033\034=eTA<\234`\245\273\024=\r\275\245:\252\274\226~9\274\3435T\275L\312}<\266\326\240\2753/\266\274\2106\226<\205\214Y\275\002\032\037\275s\033\217=\232\t\316\273@Y\267\274\003\320\010\275\nE\023\275j\377m=\305\205%\275m\252F;\010\217@=)\"\002\274F\242\223\274:T\321<\312XS\274\326\223S=\"x\307\274\262\314\300\275\322\231\205\274l\200\207\275\340B\221=yR\024\275N\366\340\274]\274\227<\203\206\266\275r\035\\\275~\033\277<\023Xx<\237\215\376\274\201\373\033=%\200t\275\302\375\030\275\032\323\360\274\'\217\337\273>\342J\275k\214#\2753\334f\273\335\364~<w\023\343\273Ft\026=\251}\301\275\367\216\223\275\265\027\362<\362R4=|\036\242<n\220\254\274\371\272Q\275\343\265\272=\033\031\223<\313k\177\274x\252w\274\270Z\225\274,\2378<\"m\251\274\266\235Z=\t\334A=\'e\300\275\306zX=P6=<(\245\343\275d\t\t=\314\261\'=\377\336\023\274\200\006\372;\235\271[=\301\337C=\314\275\016=9\027\n<J\007\036\273\211x\204<\355\206\337\274\255\214\344\274\232\\z\275s\237\335<8/\226\274\255h5\275w<F=\350\214\342<\032\032\207=\274\211\357\275\207\306|=\301\025\323\2732\260\276\275\3502\233<4\371\240\273\240\232\022=\326W\355=\364\014\230\273\215i\316\274\255\017\214\274l\022~\272\337\260\026=\323\r\002=\350\342Z\274\236\223\243\275\255\363N\274<\225\027\274\304\355\214<\230\010\335\275\274+\003=cvy=A\rY=)\372g=Y\332\356\274\224\372\016;\220\327\002=\364\361\000=\217\244\236\275\215\314t=TGB=\365\237\022=N\243\211\274\207w\211\274j7\037<h\245\254<\017\313i\275\343V\207<\223\036B\275\326\244\005\273^L\030<\316\334\035\275\346\304\300</(2\275\250\025\021<xL\273=\323)\312;\346\030\205\274\354\006\274<p\273\037=\nvg\274\236\202\270;\365\2351\274\225\316\t\275D\265\253<\022\254\370\274\020\241@\274\026\227_\274\261\332\237\275\007\207\025\2750}\204\274\242\371\247\275\322\231\n;\024\005\007\274\331\246B\273\032D\004<\002v\376<\032B\004\2757\2408=\033n\314\273U\037\224\274x\203\212\275\000\253\223\274\364\2755\275\006\006\367<\001\300\254\275\324:\177\275\003W/<\224\204Y:\365\253&;*\nr\275\244Pu\274\371\024\314;\206W!\275\000\323\222=5x\n\275\205<t\275\025\270\017\275\2631+\273\234\340\362\273q\021\022<^\307c\275\257\263\271\275K\305[\274?\323Z\274\251\375\016<<\036\240\274~`\201\274\333\022\233;\3748\274<\375(\252=\262\255\261\273\310z\227\275\205\256)=\273\213G=\270v\t\274r\341\227<\260\274c\275\341\023\r=\342dh\275J6H<;\353\002\274\3306\033\275\347/l\274qK\'\274s$\\\275\261Xc=?\313\231\2751\362\263<\266\261\324\273k\376\267=$\020T=w\322\350:\033.\007=\371B\021\273\202\301\031\274\342\331Y</\177\206\275\254\014Z\275\264\n\240<\352B\023=\371\007\306<gy\010=\302;\330\273\035\021\344\2733qB=\321\276\242\275lp\214<3\340\303=\023w\260;\330\014U=5PH=Tu\237\275g%o<#0\363<\223\371\200\274E\371Z\275\245\364~=\220^_=U\3443=$x\277<y\326V\275C\275\210<\237\nO\274h{\244\275\364\360/=\223t\213;\216\361\332=!=\004=\202\322\232\275\256m\327;C\247\236\275ZCR=\314\247\331\274\210\332(=\317\207\303\275\244%\214\275\237\223\335<270\275;\324:\275*\355\261\275}+%\274=q\316\274\206\352\034=\'5\246\275\320\374\n\275Z\3313\274\346\301\004<\372\n\312<\t\016\261<F\254\356<PU\256<L\2445\275\360\013\366<\272/L\275n:*<\215\240~;\262\204\t\275Q\310\243\274\363I\244\274\314\351\304<J\013\321\271\366/d\275\'\332=\275\001\337s<\307\324\360<\013\203*<\3454\r\273h\201\000\275\337o\001=\265\234L=\251\216a\275C\2518\274\233\322\236=\017B\224=\262r\031;M\236\247\274\226\024\203\274U\014v;\306Q0\275\245\366z<\313q\373\274\274\034\232<M\350D=\214\301y<\343V4<\303\373\220<\244\217\210=nwU=1\331\350=\375\252!=\300\264#\274Y\245 \272\024\020\216\274\365jM=\006wX<\253\346\223=3\364}=<\376\325\275\262\212\304<&\265\305\274\256~\222\275\350\222\025=\355\3426\274):\200=\265\227\322<\342E\342\273\316(\246\275:$\216\274Lf\324<\331\362\022\275\300\232\261\274W\255U\274z\274a\275\261\213\352\275\375}A=\263S\275;\3531\244\275\177\274|\274\025\017-<\311)\251;/\325<\274Q\266\246=\251l,=\'\276\023=T\332\207;Vm3\274\362x]=\224e\357<\230\340 \275\220\271\224\274XC\031\275|\322l\275\235@\270\274\253q\347\2736\340\206=\331\312c<\347\337\257<\020\326\323<%C\363;\366\277\301\275?\"\212\273H\360A\274Wb\226\272\236\316\000<|\316_<\244e\014\275\373n\201\274\005@\310<7\233\033=\242OA=`\367\205\274\005\243\272<\330\223u96\002\017<*\365\373\274\271c\256\274\257\210\\\2749\257\324=\363\254\024=Q\030\337\275\240\020\230\275\316\364\251=\002g]=W\262\336<\331v\243\274/\202\266\273myU=\026(\212<\322\330S\274\016\257\0358\002z\220<\261\274/=\332oG=\337\307^= e \275\325\240)<\212Y\203=D\264!\275\005\252\260=\211\306v\274!\273\351\273v\t\215=\240\264\r\274\357\031/\275m\307<\274bjV\274\301\266\227;\355\233\313\275\331\021\306<\323\275\260\275\266$\201\275y\032\371\272l\001\234\274X\245\024\273\037\210\252\275\2271Y=\3403\003\275:\263\270<\230K\212;g\177\311;\262\235\241\272\rR\271\274\334b\023=M\204\207\275\016+\333\274\326f\321<\363\r\334<w\372\274\274\214\031)\275\310\357s\275\355\000l\275]I\032\273\240\305\305<\355\t\014\275Z\211\303<\233\334N:\333\026Q=\356\300\225\275\305$\025=\300?\261;|q\202\275\036\362\220\2743\025;\273\337A`=\311g\313<\252&\317;\344,(=\'\226\263<\202\243\271\274u\263f\275g\252\031\273H\271U\2750V\034\275\320\307g\275\342\314\307\274!\300y\2753\265V=W\336\207\275\216\316\213=\240Q\343;\346\"!=\231p\177=\033D\223\275 kf<\014=\362<\207tM=\300\232O\275\365\030:\274\211\342w\271\364\274\210<e\005\263<M[X\274XV\333<\335h\244\275\262\315\266;\264\033\221\274\230\322h\275\2655\365\271\035@\266<r\311\273=Z\037\\=\336\273\344\274vd\016\275gG4\275\235\306\025\274W~\216=z\337\323;\223\363\213=`\032,=\232\274\363\273\006\203\245<\2334\200=]\366\354<Z\273\367\275\256\253N:\344\376N\275\\\236x<\\A\204\27554\350\275\024\225\027\275\247\215a\275J\273\214<\270\221\020<T\346\032=\274\2177\275\207e\010\275\031\277Z\275CFR\274>\307\270\274\235\272\025\273\014%W=\021=\257:1\221\310;\334\"\020</\016\260\275\236\377Q\275\357\366(\275\214\204)<\223\rt\275\001\230\316<\331:8=\240F-\275E\272\240\275\205\375*=\235Yp\275\241\025\027\275\363\351\222<|\331\014\275Byt<\352;s\275\023\316 =\262p\305\274\301O,\274qD|\274x\017\021=\375\214W\275r8\t\274~\305\217=\336\314\027\274)\351[\275\020t\002=\232$:=hN\343<4\347X\274:.G=\256rw=J\200p=z\334\\=\000N!=\033%\236\274r\324a\274mtQ\274tY\027<\355\373\306\272\006?\203\274\006\357D\275/\327\306\275\007l\271\274\365\033\212\275SU\257=\244\027$=\262T\350\274&x(=1\336\255\274\305\357\340\274nC\337;\226\225v\272\271\026\200<\257\220\227\275\236Q\353\272v-\n=\221:\240<\000[{\275\315\211\222<\360\3119=e\301R\275~~8:iw\252\273\353\212\005=\317\250\t\2758\351\212=\203\324B\274\353\351&\275<\032\250\274.[j\275@\201\014<\337v\355\274\000|K=\363\345\203=\365C\001\275\001\261\226\275\367\0240=\221\307\024\273\026\375\220<@E\366\274y?\355\274\270\006J=\312\345\203\275R\021#=FI482\346\207=N\242h=\261\216\272\275b\323\021=P\030\037\275\361\0047<\010\3776=\360\303\315<\252\376\230<\212\332B<\316\343\223\275\022v\002\275\337\352\366\274\207\233\230\275zCw\275\231\232:\274\355\315\022<P\360\262\274\016\003\005=\002\237\260=\230jH;\354?\251\275x[q\275\022\211W<&\262\032\275\220\352\001=\3310\302\274\253\357\'=,\236\202<@f\201\275y]\311<Zf\034=\243\\\214\275\362\377\362;\315\307\205\274\214\026\005\275\205S\3348\227!v=\233\231!\275c\225+\275(#\356\274s\207!\275\366h{=\220~U\274\312\031\253:\241\3330\275\"\226\326;\305\366C<\234\331\362\273\360j*\275\0170\227\275\334\214l=\307Dc\275\265\026\'\275o\023\000=\333b-\275\031F\300\274;\330l:\025\024\223\274d\007\253\275\007\2426\274]4\234\275dW\271=V\221r\275\360\362\234\274\256\220\t=(\034!\275)Jk\275\025\356k=\265w\325=0\260\021\275\020\235\223\274\222Z\024=\220Z\372\273\"n\263<\277\313U=b*o\27564S\275\333\251\357\274\331\372\017\275\255\334\206\275\345\341\037=\205\035\303<\243D\245\2758\261M<\020D\226<\034u\374\274\322{\327\272\001\254;\275\031\273.=\004zG\275m\\\201\272\027\211\335=,M-=\267u/\274_\227|=\272z\004\275sX\374;\307\361\002=\325\203\331\273\277\342\310\273\211\364C\274~\203q=\334\214Q\275\336E\202\273\243\320f\275\237iH\2724\311\002<\272\n\333<\2169Z\275\350{U\274\335\200D=\247\010I<\216\2705<\321D\271<\025\202\'\274Y\353\215\273\243\316\250\274\244\367\356\274,l\037\275\353\275\030\275\322m\245=\373\264\307\274\340\375\301\275\272\271\023<n\330\365\275m\257Q=3-\016=\263w\223\274%\371\372<\267\353\347\275\214\030\260;w\311L<\360\247\327<\261,\274\274\027Wj=v\255G\274\242M\337<w\366\017\274\327K\307\275\247|\024\275A\303$\274\006\377\224\275\270\301i\275k\305\025\275\267\no=\333\266\031\274b\255\242<\264Y\201=\255\216\231\273\244\315\250\272S$\332=H\340\"\274\005\023\373\273\317\354\212<$\222\215\274\323\256\234\274~}I\273\010\020\033\275\032\211\002\275\273\211\227\274\262\375\300=s\365\337\274[\362A<s\205\355:\276\302-\275\267\r\257\274\375z\232\275X\020W\274\227\212\214\275e=\277\272[\363\352\274,\347\264<e\023\224\273\006\360\003\274K\252\r\2750^\302\274\355\r\214\274\003$\365\275\220!\312<\203\252.\275#\312p<\240!\300<\314\242\315\275c\337\203;V\021\211\275 \257\'\275\366\312\016=(\020\362=\315\364l=\r\207\310<\002\253\212=\335\243i\272\224\321\306=\337\025\264\274ss\211=e%>\273\235wA=\330z\027=\326 \311\272\372\006#\275w\236\355;\360X\\=\217\024\222\275\302\362\355<\201\267\035=C\374\212=\\\342\206\274\375q\024\275Tu\3559\"\207\362<\377\263\207\275\344lN\273\302\034\004\274A\\`=\303\236\253=\330Lo<\227rE\275\340t\020\275\264\327\213=a\250\037=u+\307\274\255(\262=\330\212C\275\001M\334\275\270^3\275\301\035\n>\370\243\222\274C\3117:\"\256L:\222\350m<H\002\320\275/~M=\230\030\366<\374M\275<\006G\253=\207-%=J.x<\256Q!\275\234\316\245\275ae\201\274\375\346V=\324J\035\275\323\204\336;\364\204\337\275\347\305\366<=K\245\274\014\251\3539\301\310\213\275>\021N<\2541\230<\242\305\232=?\253k=\t\024\033\275\204I\336\275\036\237];\300w\376\272R\376P\275\345\237\"=\205o\325<I\\\023\275\007\270\223<\327 \367<\214\212;\275\331\300=<\321\213\331=A\306$\273\"6p=\031\255(=\260\225\261\274\305\264>\274;\013\032\275\014\020\024=\237\360[=\345$\322\274jk\263\274\241\363\013=\365ZT\275\303\362{<\204\304\027<\374oF=\235s\306<8\311T\275~\333\366<\377LC=\024\372h\274\276\257\352\274Z\010\351=\314\035\246\275`{\345\274A\024\305;\n\375T;\335\016\212<[s\356<G\245A\274C&f<]A\274\273\014\356\016\275\375\030\207=\340\257I=\244\037\225\274\226k@<c\217\371\274\035G\367\274X\270\246\274}C\300<e&\031\273Wu\007\274N\267n<B;\247=T\205\356\274\235\nf\275\030\232\032=\254\254\226\275J\025\\\273\333\236\023=\306K*<KdE\2741\024\373\273B\330\327\273\324\365\320;0\213\262<\354\240O<\264\253\363;\277\007\260;\314\270N\275K\230>=\224\355\210\275cQ\t\275+\265G\272\210\266n\274\\yS=\333\260\001\274BNy\275\027\323\026\274\033G\005=\213\326\236\274\277\353\034\275WK\031\274\353(_\275\203\224\221<\230\345\242<\265\251\016=wP\231\275u\216\205;O\317\256<k\303\240\275f\361d\274\\\300`<T\260b\275\242C\324\274\277\371\006=\037\236i\275!\355\350\274\274\353D=\246r\350\274\342d4=\313[N=h\302\205\275&\'\241\275=\350\217\274\216IV=\271\001\321<\216\265\251<\272\330\243\275b\216\366\272W\317K=\005\334p<^\205F;D\0353\275\267V$\275\313\245/<\274k\317\274\277D<=\321(\002=\222l\262;\324\205\255<\241\001\031\275\004\270\344:\'}\023\275Jh\321\275\317&j\274g\030\204;@,\346\274\366#\203;uN\003=2\236\213<\r\207R\274\257\240\325\274[\247\021=\002\227\234\275S\341\265\274S\335\316<a\2031=,\'\030\275\205SC=\024t\214;Ws\363\273\244r\236<\203\036\031<\240Az8{7P\275H\331\227=\373\371V=\010\014Y\275D\231\245=9|\222;\373[\204\275\331K\245\273\343\016\252\275\324b\014=\303.\037<\237\375\213\273\322\236\214=\355s\216\275h\221$=\343\221\205\273\227\300\301\275\035)+\273,=K<\276\023C\275\027\307\317<m\031\024\275\312\232\221=*\206\247=\366\317\312<\217]\010\275\002x\320=\252\032\241=C\021\232<\242PR\275\232\034\242<2\262\027=\213uM<g\310r\274\330\360D;\'\237\351\273\243\255 =\327\025?=\274\014\243;\032\253B\274\277,m\275\246\\\204\274c\226\002\275D\211\344\275\263\226@=\270\tk\275\r\223>\274\034\021\017\275lw\355;\373\214\360<QZ\350<Esw\274p\010\266\275\303\325\"\275\257[\320\274B\2620\275x\350\001\274>\223W\275B##;o)\000\275J\217\244<\250\353\235\275\177H)\2755J\247<%O\353\273\241\234\013\274\271\337\230\275[\035\031;\006n<=\362<\331\274\356H\264\274\031\007\020\275\201~\300\267j\376\262\274\370\221\264\273\311\344\300<\343\234\212=\360\203\225\275_\224\341\274M\036\213=\006{^=\205c\005\275\014\366\214\2754\215\035<\275\350r=6;\272;\016\334\201=\026|\025\275\023\263;\275\2315\002=\357\330%\275\256\007,\275\340\273k<Ai\234<\276\353\232\275o\346\231\274\314\324&\275A\001\200<]\\\273\274\325\216\007\274Hy\310\274\300\260\032\270=k<\275\260\016\217\2757\312S<B\311\344;\022\205T\274\220\240T\274\321\016\272<3!\001\275\234s\023\274\030\214\276\272\206\020\303<\252\234\037\275\201QZ<\020\376H\275l\225\203\274%4\371\274\377i\352\274J\313H\275W\332\250\274\214\214F<\202\225o\275\320\204E=\246\342\277\273\236m\325<\337\003\315<\252\023A<\005k\252=\240\226\225\275\344\233f=6\204\223=k\265I<\236\306\314<\250^\373;f\363\232\274\241Sl<\333}:\275+\211\214\273\030\320-\275c\2511;\205\224\\\273\303t\217=!\312\035=\255\344\206=\376\004\277\275\335\314\207<\326A\177\274\224b+<\312O\366:\220\016\210<\266!?=\325\252\360<\027\256R<\320\307N\273\261\323\360<\332%\267\274&\320\313\274\261ui\275X\222\313=\261=\356\274\2552h\275\232\311\272\273\204i\273\274\220\030\252<\324ho\274\000n\237<{\242@;\334\001\265<\001\277\"<4?\210\275\366_\242<\371\004_=\314\'\032\275l\263\016\275\356\016\245<\275.\231=m\347\201<\265\324$=2iD\2748\346\017\275I\236O\275\237FU\275\376\025E=\356+\304\275\023\255\t=\211\245\321=\032*T;\0031~\274Dj\327<\337\315\206=\302\323\231<\302\361F\2755\272\311\274s4V\275\236\334\376<\245SB\275\211\375\231=67\305\275q$\206=\260\226\231=\'\246\256\274R\001\301<\346\0000\275\236\344(\275\305\034~<f\304\240\2742\032\035=\355\2574=B\207^\274.Q\242<|\006\203\274K\352l\274\345]G<\236\007\257<\375T\034=A\373\240\274\0133\223\274Q\000\340\274d\0351\275\330\220\217\274FD\203=Y\001\230\271C\261E\275\233C\271<\031Cz\275\367V\324\275v\366\271\274\256\177`=/M\360\275\243\n\336<[\274\377<8\\,<\n|\232<Pt\232\273\301_\024\275x(\010\275|\256\352=h~\364:\240\364\205\274y\027\215=7\333#\275\310\2379\275I\326t\272N\212\307;\365\216\032\275\311Q\244\274\005\275*\275\3208\363<k\326\022;\261\016\n<\000((=\376\017D\275\322u\224\275\277\234D\275\353\276\371=\225p\245<i\332\257<x;:\275|\036\306<;C\204\272\007\376\214\275|\274\311<\016\220\361<?\n\225\274\300\210\202\275\014t\324\2744\322\277<S\352\213\274a\\\217=\367p\270\273T\354\230\274\315\247\231\274\345\276\200\275\004Z\316\273.\275z\275\275\324I=\224\231\224<W\377}=\226\311{\275\374\001\214=c\315\236\2748\374\375:\202-[=\273\025\222\274RP6\274\335\253\327<\376Z\025\274\025\324\2019cF\345=..\241;\212\021\335\2740c\243<\247$\021\274I\270Y:Y\274\003\275\022\326B\274@\345\271<{\232!=\035\347\n\275\233\313\325\273M@\206\275\001o&\275\017\231T<\205[\020<\333\304G\274M\334=<\332\000\221;\267z\275\273\034\257\241<l\320u=\347\034T\275\001\336\301\274\271y\354\273\026k\214=\321\354w\274^xJ=\335\035+\274\020\027\357<\337\355[:\201\272\'=\276A\240<\205X\233\275\3317\3259\260\034\023\274\242(\022\275\270J\213\275K\300\001\275n\357\232:\370\323\263\274?o\026=\005\031E\275\311\3569\275\004xo=}\237\235<\314\376\236\273<\362\t\274\225\235\021\275\335\313v=\211hJ=s\336\343<\351\220\224\274jt\211<-bF\275\324\350G\275\022\307\300\274\376\037\340\272d\000\014=\310*%=\335\245\206\274\2057\200\275g9\020=\255\233\225<xO?=\353\353\254\275\344\237n=L\023\025=\323\274\017=\330\240{\275\321\330\256\275\024\321\200=\371\365X\275\377\031\035\274zZ\223=L\r\033=\324\307\232\274\324\243\025\274O\275\024=\036\215\364<\023\327\002=\271j\022=U`L=}l\327\274#\343\034\275\263\233\210\273]\366r=\004\326\007<z\217,=<&];\244\330\013\275\340l\317\274\275Q*<h\204\177=x\243\261\274\311\007\305=\004\205{\273Q2o\274\036\220\260\274\211W\301\274\331\275\226\274\021\256\207:\262h\313<\236B\356<%\377\262=\377\241\374<\334\"\n\275\3504\004\275\222\334\234=\265)d\274\330\226\254<\271\316\225=5!\215\274U\256\317<\250\210~=\324\265\255\275\203\034\234=\341\364\241\274S}\005=\261#\240\275.\377\225\274\325\027\230\272\272z\205\275m\344?<\376\245\202\275\345\365\220<\215\001\275<\374\224?\275\032cB\275S#\215<\353J\367\274\376\225\236\274\235\235c\275\304B\310\275V\236\230=\233\241\013\275\246*`=)\216><y\245\r\275\316r\210\274\246\225\025=\022\271\263\274.<i\275d\373V\274\333\255\272<\225\275\372;\006\367\370\271\300\347*\275\r\301\302;73\264=(Hh;\036\207\352\274\241{\221=\243\247\240\274\177\364[\275\031l7\274\215\332\357;\034\"^\275\330g\274;\344\216\247<B&>\275h\2476:\241\332\002\275\035A\n=\316\332\002>\331\304\234\274\257)\032=\324\207\223=\205\243\245\275\004\333\005\275.\227y\274\245\211\345:\255\252\335\274y\272\243=\037Zj;\007\262\005\274\031\374\216=\301b\324\274if\341<\334\214\375\274E\317\230=\223G\377;\305\351\311\274\220\311\363\274/P\026<\231%\251<b\206\246\274\323\305\362<)\3066\275?\376\205\274\222T\023\274\023\001b=\003qa=p\220\377\274\352\021\014\275r\003O=h\037\242\273\315Z9\275\312\275J;\2312^<\337\3748=\222\276\003\275\355\204N\274\236\0069=\260E\003\275\271/\"=\313[)=\321\340\017=\023\302\007=\222\311\352\274B\242\357<X\222\337:,h\201=;@8=\321\251\207=\256Wd<\267\361\316<Ow\024=u$\212\275\024i\236\275\222\200,=lR\214<\372\357>=D\363\003\276\304\325\234<\364\352\276\275sE\020\275\245z\224\273J\250c\273\316\251g<\351\2160=0\312\020=\254\037\322\274\035\225K\272>\277\000\2734l\231<7\247\024=\3535I=\340\001\323\274jR <~t\343\274\305\361\343=]m\352;Y\005\355\274\014\370\027\275\362\'\326<\344\312&\275\034h\331<B\314\035\275\235\275\030\274\210\233\244<v\332\336\274\344\276\357<\222~A=\237\252\243\275d\021\357\274\276wJ\275&&\t\275\221\305W;N\226T\275{/\264;\317\342e=\017\2226=k{\324\274[\223\320\272\300|*=L_\020<{\t\374<\255\351\236\275\370\340\0169\337\235k<V\332\201<\267u\347\274\0320\220=\021\223$\275\031\315%\275\005\014\214<hZ\033=\351|\317\275\177?\237\275\210:\"=-\253\214\273h\365\301<\031\245\330=\247V\231= \350\353\274l\177\006\273\243M\210<\\\033\355;\0355\220=P(d\275\343\252;=,\301\201\275\346C\317\273\202\310\225=\263\305 =\261\273\303\274\226p\233<>\013\217\274\2452\006\275\334\020\220=P\034\310\2741\277\231=9\224\214\275\257\241\t=nPR<\200\322\273<\217D\232=\326T\243=\365\303\'\273[\311.=<:~=\327\211\016;#\247\"<))S<j\202\210<\305\t\200\274\327\032\315<Ra\342;g\354\024=P\002\244=u\354\023\275M<\302\273\026\253\221\275\331P\204\275\306\253h=\t\260\341\274e\\k=\227T\\\274e\203\242\275L4\226=\271\274Q=\032d\025\275\354\246\256;\310\250\332;\265\374\001\274l\230\340\274v\260Q=s\3252\275\273\245\023\275,\"\366<zB*\274^w\312\274\037@j\275\327\343\240\275M\225\017<\272Q\006\274\322\255\252<\371\330\273<\300q\364\275\022\240\017\275^@4\274-\200%=\200\340a\275\033\315m=\225#\230\273\341\237\004<\323\357\236\275\335\026Z\275o\361)\274~\364\212\2752r\263<Lc\217\275\016B\304\275a\300\257=\277X\364\274}\000\t<\204\274\033<3\330\222\27570,=\3661%=A\330\343\274lZJ9\211\313\210=\366\310\261:\355\216\212=\325\242K=\311\353\223<\257\202C\271\\\311@\273Ao\307\2747\036)=\035\031/<\245df<~\334j= \256==\232a\302\273\337\315\237=\214\334\032\273\"\266$\275\307\214;<\347\2275=\231>\023\274\207\215\231;\232\317\340=\010%\332<\026\325\r\275B9j9\246\363?\275\037A\340<\247\265\300\274\035\207Q=&#i=\242\023\\=\273\2717=v\325\353=V;\t\274\376z\200\275\313r\215=\';S=\227\364?=n\235\266<j\236\364\274\200l>\275r:\332:\213\021\200\275\321\246\020\275i\357\363:6\r\323\275\036\257q<&Df\275\017\263\214\275 \331\364\274\253\0368\275\377\022R<\202\274N\272\225\335.\273\315\rv=C\257\355\274\274Z\200=\312\337\200=\315\372\024;;\213\211\273\320\214>\275I\211\033=\332\001\236\275\346X\007\275\014\273\233=P\343\014=6\260\375<\021\253X=\030F\220=a\246\250\274\266)\356\274{5O\275z\022\311\274Qr\216<<\265H;*\200\024<\3478\220\275\263\362\301\275\353\322>\2751\327f\275\361\247\017=\235\351\227<\352r\342\273\240A\224\274\235\343\210<\277Yl\275\331\005\303<X\264)=\346Y\"\275\273\025\347;\302\361n\274UC\204<b\356R\271\300h\206\274\036\2129<V\373V\274\202\267\262=\351\327\222\272\215\004\205\275\251\373\243=*i\271\274=\371\303<\344\347_;Y\235\234=\377@\246\275[k\303<?#j\275j\021n=\007\352\025\275\350\002\300:\021Y3<\346\001\347<\r\257\256=\0303\214\273B\221 =\377\346\320<\367\205\272<\020&\216\275=\037\222\274\000\373\336<@U\342\273\270+\327\275%\266&\2755\026\361<\210\330\300<\205\226H\274\211\313\270<v\355E<\030\306+\274\3429z\274/\314\213=\305\2268\274O8\245<f^\253=F\233\r\275s\326N\274\300\334\005<\210u\345\274\207\347\335\274\233\270l\275$8\263<\317|\230\274\\Zm\2752$\203\274\217\335\273<\2142v=2\022\273<w\345\227\273\202hU=\305q\215=\376\235\322\273k.\005=\030\001a<\345?\024=\263\205\362\272T?\204=\365\327h<)\r\307\274\204\3569=\177\203\366<\306\223\317==\341x\275w*\312<\354\"\031=\032\020\372<\264\221\323=\343\323#\273\316\244\327<\212\323\335<\215\311\266;\243\3363\275\216?x<\246e2=NB\272=uM\253\275\304x\243\274\3310n\275\016B\005\275\233]\n>\231A\261;\305\206\025\274\223\350\020\275r\306(\275\215\332r\274?\237_<9\352\365\274\251\333\252\275\326*\265<(\300\321;M>K=\236\363\305\274I\370\001\275\017\342\247=\262\241\0035\375\355\260\275\234\025#<\304\006\320<\242\025\001=&\027\362<\013\356}\275\31503\273\023_#=\236\224\337\274\020T\013<\035\002\002;\365W4\275\037k>\275\253\325\371<\236\000\235<i\334\033\273\372A\267\274\250\256\370\271\371\304\177\275C?\247\2743\201C<v,B\272l\030\352\274\253\r\210<O\272\222;\203J\035\2755\274\243\274\\\025\204\274u\313\343\274fZF<\274D[=\345\370\211\274\355\225\336<\331\227\235<\370-\344<O\034$\274<\214\2519\276\201\225\274\377\240\240\275\246\374}\275\0310W=\307\342\237\272K\250H\275\311\013w\275\234\217\333=q\342*\275\342\036\024\275\021\016\\=.2\375\274\221\035\225\275SDu\274\nxc\273l<\032\274F\244\243\274\357\001\035=\243j\216\275\210\225\217\274\245\201(=\350\r\\\275\345G\257<0\032\317<w\333(\275\356\254\202\275h\340\177<;C\205\273_=\340<\203\275\022=\311\246\005=\265\366\030\274\007\203W<_\265\241\275\222Y\243=m?,<\304_L\275\0106\224=\264\013\376\274\326\303\327\274\262\373r=&d[=Nj\236\275sb\337\274I[d\274\214\351\267=\377\232\351<\346\003\371<\245\2366<\177\216\206\272\014\242\312\274\320F\022=\"\231\273\275^O\250\272fP\200\275_L \275_\201\340=\246\021\205<\024\3714<\332\365\277<P\3026\275\300Z\322\2742\245\261=B\231\354=X\371\220<IJ!=\024\374\035<\266\347i=w\260\233\274d\271\227=)q\n=\223_\016<\241W\364\273\354/i;\255\034\356\275|\215\227\275qka\274|\321\213<\276\'6\275[\332B\2754\365#\275\200\350\270=\345Bc\274A\272B\2758&\001\275\027\301_\274O\330\n\273\225@g=\027ar=b\"\357:\210\352|=\027\010(=9\330\243\273\234\367)\275\001\n\253\274T,s\274\347\362R\275\376\247e<,L\260<j\245\202=5\276\002<j\275\260\272SRi\275\277\"\376<\326\273\376<?\271\336\274BY\216\275E\034\003\275,\217\265\275\355\246\204=]\312\210\274\\_\022=E`\206\274\304\214\232\274\360AD=\2010x\275\013\344\242\274\n8\221\274\026\313\227;\245\nq=\364\024\204<\252p)<\365TZ\275dDV\275\247s\376:\303L&<\360=\010=|\313\t\275\326^\205\273&-$<W\254\367;\230,\322\273\275\213\234\275\033^\200;\344\360U<\217 \354<@\355m\274\325\307F\275\201m\250\273TS\200=\243h\007=\030Zk=`\024\025\274\022\341,=\033u\022\275\234\27019\231k\267\274x/\300\275kj\221\275\272\342@<\206\341\237=o\002\322<\340\220;\275h\240\231\275aH\263=gh\252<\251yN\275\347\013.\275\034\343\334\274\002=R=z\313\345\273\327*\031\275\016G\251\275\233\324\211\274\277\2115=\360\032\341\274\242#\234\274W\214\035\273\274*\321\274\357:\'\275\301tP<\240\225\256\274\320\003\"=\255\310-\275\370>R;\025\335\231=\3424:\274\005\246\215<\037|m=\252}\207=\020q\001\276K7\311=\3502\217=\211/\374<\314\327\307\274g\274\242=\331w\264<z#\363\274\006\026\371\274\276\324\356\274\245\362\216<}\276\225\274o\203\267<\037\352\024=W\013w\273y+\022=\213\\\220\274\342\321\260\274\361\246\001\274V\026x=Oq\257\275)\374\240\275o\255n=V\366]\274\325\2070\273iFW=\256\2570=\227\337\217\275S\006O=\331\312]<\006a\214;\0215q=%\210\242\2757\257\215<\222ad=\353\003v<\226\022\032\2756\221\244\275\225\346\344\274\333\017[\275\252Q\257;\206`\377<b/\010\275\241|\226=\265\211\210=\240\214\027\275\235p\n\274J\326\212\274h\243~\275\035g\267\275\265la<\373\252\333\273c\226N=\n\363\034=O\007H={\304J=\264\336\214<cf4=N\215z\275t\205h\274\303\242F<\2556]\275\301\020J\275nn3\274*\036\234\2742\313\331<a\233.=S\007%\274B\355\327\274\224\330\020<z\025\"\275\323 \'=\027\223\242<\247N\000<\360fR=\007\361\265\275\234\024j<qUz\275_t\035=E\367\305=\300\243\240<\276\254I<wgJ\275\331\202N<3g4<f\000\t\274\036\"\304\273\022\230\362\273\34167<S\304\257=\222\n\253;s\274[<\035\326\306<~\255W<A\226@<D\r\005\276\253\344\320;c\337\0319\343U\013\274J\226*=\303@\377\274\266\206W\274\265j\000=\2363\034=\301@\202=[\r==\365)\032\275\260\351\037\274\004\333_\275\254\3771\275\3464\320;\205\344s\274p\360q\274\235\307\217=\276\244M\274\036\370\316\274.\301\t=\372\235}\275\207\370\227<?H\031\273\335%\n=\264\373\353\2740\002Y=L\221\224=\277\336\033\274\337\242\276<D\3176\275\007<>=\326\3623=&\365\007\274\346\237\001\274O\255J\274\247\310k<{\026\230\273\026\027\013\275\217\364\232=\343\326W\275\007(\361\274\255%2\274\014\304\014\274z\005<\274\312\2522\275\215\031F=/,\326\275NB%\274\t\343\321\274?\036\375<\245\255K=\004\2231\275\312\323\024\275\271/\220<\310\330\222</\357u\2756\206\337\273l\036W\2758[\346<\024\206\246\274\013R\221\274\317\255K\274\006\361\276<\267\267#\275\242x\266<,\247A;vg\364<\255\240#\274\376@b\274\265\"1=\263\237#<\351m%\275\316\275\221<WS\026\274\354U?=B\365\002=\001\205\260\275\354\033\007=Q\261\205\275\r\356\215\275\267\025*=\301\351Q=\246\017B=\006\377\n=f]E\275\016\010[\2756q\361=\232(e;\214X\t<>\270\005=s\017\004\275\273\246\357<\352\030\307=s\265m\275\256Q\321;O\254w\275}\267\221\274py0\274\010\035\207\275\320D\275=\231+o=\335\324\304\274K\233\372<\3039E\275\265\261\362\275\017\200\030\275\002[\236\275\354x\356\273\007\332\253\275\235\"#\274\020\322\300=\227\256\310\272\276w\327\275\027YA=\356\2344=\234S\027=\016\306/<9\004k<\230&M<\\\234\233\275\336a\304<8\241\020=\335\267\r\275T\222-\275\327\313\253;KR\221<3\'\304\274r7\305\274H\364\177\275\302-\377\273\276j\225<\236\305\255=\037\373\216<\271G\330<T\023\341\274S\216\267:9\222\365\273Q\343o\275\212F\226\274Az\000\275\033\353\031\274\236x\010\2742\264\003=\271\0228\274\314%\301\274\364\023\256\274H\314\352\272Z\000\277\274\266\343\033<\310~\r\274\306\367\364<\006\013\022=\2633@\275^\004\243=\311\322`=X\340\211=\3668B\274d\020i\2759\233\n\275\306\317/\275\355?\255\274\241\356\246\273\255\243M\274\300\250\244\275\000]\"<\333\207\211\273\377nC=\t\335\255;\374V\232<!\020\000=\3244\205=:\203\036\273\323I\252\275\236\323>\275\274\366\350<\366\246T=\346A\035\275n\341\'\273=:h=\314\375\037\275\334\353&\275\310n\211\273\317\035)=\325\036d=\237K3<#\203b=\210\325k\274\267!T=\037\020\355\274f\356\252\273*)\321=*\344\332\275%\214Y=\370|\271:\214L\334<\343J\321\270LeV=\344\202\026\275#^5<5\'\254=\203wS\275\340%\346<\003\331A=\315\307\257;B\334\326<\361\326R=\237\276V\274]\262\215=\220C\360\275\241}\246<-\350\311;\022WD\274\231\316\325:!)\343<*\252\244\273\330\007\005\274m,\\\275\373\326\\\275\205M\360\275T\224w\275\"\033\274:\240_\344\275\363\265\203<\327^\216=\261\357\347<A\310\312\274\345\322\331\273gKQ9\n\276\356<\203\014)=Oi%\274\353t`<$=\332\274\341\301_=!!\212<\200\227\256;{9L\273\334\312\330<^\245m=\263g\005\274]H\013=\257R\316\274\357|-;\200\314\000\275DGU\275\250\217\235=a\344j=R0M=N\301\005\275D\350\267\273\027\306\204<\321:\317\274\373P\n=_)P\274<\306\223\274\024\355s\275\251\364)=\017%\262<\350\007\036\274F\036\226\275z\252X<\274\376\210=28\274;0\306\377\274\346I0\275w.9\275\351^T\275n\360\211;\216\230\253;\340J\r=\007Q\355;\2356&\275\017\312-\274CW\227=T\0271=#\336\320=\314\277S\275`\226&\275\307\272\177=\335\302i=x!\001;\365\246\367\274\246\223\226\275\373\340\337;\227\226\017=c>\200< \261\217\274l\246\340:\201\002\372;\224z\235\274\362\347$<\034\314\225\275L\373Q\275sQ\035\274U\253\r\274x\216+\274\346s\242\275\t{\274<\021aB\274\252\216\320<\220I*=\255\311\256<+\210\t\276\322\252\255\274-`(=*\223+\275\315#\t=33\276<|\214]=\305\313E\275\303\027\227\274\330\216S\274\3121\216<A3\014\275Ae\313\274:\357\261\275\375\rV\275\354\006G=h\022v\273\206\374\205\275\0265\202<\216\351\241<\222&\361;\357f\017=\211\347\246\274\346*\324<\226-\252\274\035\347\262\274\217\304F\275\274f\315\275^\273\202\274\320n\202\274\375\026\254=\313\240\000=r*6<\203\251\214=st\376\273\032%\023=\342\237?<G\004\322\2748\006\t=\037\373F\274\001\252c<\303X-<P\000\261<v\020/=\276&r=\21632=\220\243\\<\376\321\216<\023\252\304<{\353\202=\355R\225\275p\335\244<\362\303F=\r#v\273\021\377\223\273\336\013v\274\252\220\3148\225G\337\274\317\200\217<\220\277\237=\370\274l=\232\241\347;\025\ns\274,4\005\273\031\336\340<\362\213\342\274\260S\270\2749\354\373\274S\315-\274F\373$<\301DX=\033\353\225\274-\363\264\275\312\327x<\tPa=V3\372\274#\270\220<`\034X<\204o\354\274\344\311\207;\363[\272; \242\005\275\345\350\000<\036\035\201<\3663\343\274R\261\373<ll\271<\317p\033=\271\002O\275\322\252\025\275\\\030\004\275WQ#\275\177\365\t\274\250$\220\274\r1\234=\211}j\274\202\377M\274kn\306\274\340\227M=\362f\350<\214\265\222\274)\327\257\275\374\007\205=\302\'\000\275\376a-=\215\203\226<\033~p\274\354\227<\275?\350O=`\357\026\274\3321\374\273\235J)\275\220\246\210\274\024\204\227\274\257\365\256<\270\036\210\275\345\217\202\275\330{\202\275MsI=\263\277E\274\370 \323<A\326\344\275\344~\214\275\037O\340\274|]{\274,;1\275\364h\200=~\021\001=\220\206\025<\373\255\013=w\000\207<!dd;\304\364+\2755\036\022\275\221\363#\274\257\033\242<&=\345<\343\257\374\274\254\331\356<K\362\244\273\027\250\037=\344\331\373\274\033O\260\274\243\215\223\274~<{\275\337&d=\002\343\322=\302\014S\273\263K\247\274\250\306\030=\247\355-\275\361\225\035=\013(\301\275#\t!=\341>\r\275\350\235\032\275\347\2544<\325\r(\275\242Z^\275\220\265\355\274\034\367\000\274\002g\220\274\266EE\275\tm\212\274wC\315<\267\242M\275y\310\004\275d\271k<\335?G=\362J==\251\366\370<\0107\221\275\037j\200\2748a\371\2741\355\225\273I\344\353\274K\034\023=j\371)=fi\307\275=\205I=XV\022\275\352v)<\274\244\244=\372q9\274\230\t\372\274*\254\377\274\017\030\374<\337\252\310\274\317\264\261;\276\354.\275g\231\367<\r\207\357\274\327\330\254\273t\204c\275\177\337\257=\351\266\022=rk\027=\267\362)>`\216\314<\207O\263\274B\215\034=\276\010<\275\222%\007=h\264\247;\211^==$\n7\275\016\023l\273\250\272==H\252[\275\017\337\356\274Q\262\247=\365\023\272\273\205A\023\273\326\275\202=\264\342\r=|N\'<+\231O=\234K\277<P\034\243\2745\355\342\274\202\001>\274\227\352.=\257\223\371=\236{\343\275A[\220=\315\320l<S\213D=U\250\246<)\205\036\275z1\260<)\036A=\010\264\344<2m\364\275\326\355\366\272\007N\314<\224\t\303\2755\216\341\274\237=-=\"\366*=]\262d;\315-\220\274IG?<\245Ha\275e\246\305\275Z\300i\275\206\360\241\274\346\366\212=\272_]\274%\236\203=\t\356}\272v5\023=\004\030\214\275\220W\370\274ga\271=\242\305E\274\2749{\275\227*\254\275\212\301\252\275\313Tv<\350\235\200=\177HK\275\350\312\340\274Qs6\275L>&;&t\204<\"\310\206\275\251\034\305\275C\370\007\275-l\247<\256M@<\005vC\275:\202(\275\021\201\265\275\355\252\302=\267\020\344<\214\312\206<\256\204\327;\361\206B\274\215k)\275\005\002\020<W\324r\273\231w\036\275\275\243\225\275\363,\220\274b\020\365\274\027\343(=\363\022\352<\250$\270=\304\2464\275\317\226];\r\345\214\274\023k^\274-\352\035=\323\036\000\275/C`\275\361\376\253\274\1770n<\255\206\200=\302/H=T\363Y\274\331\270\303=\261\"p=\305_\373\274\204F\n\276\355)C<\000]4<e\003\260\274\210\362\207\275XIS\273\211\234\320\275\006o\022\275\340kb=\376!.=EQ^\275q>\006=\320\2059\275\374t\300;\005D\014\274H]\026\275J\013F\275\301l\021<V=\t\274\022\306\271=\234\303D=\351\343\363\274\3430e\275\213$\346<\364jm\275a\0321<\270\362t\274\310\n\237\273\0336\371\273@\251\203<\260\355I\275\367\r\311\273\213\325\021\275\342\252,\275\300\346-<\222\365\273<\361\264\211=-\217e\274\360\277\256=o\316\245\275f\262\r\275a\226\376\274\245\260*=\033\370\024<\316[\r\275\236!\214\272\321\325\033=\317\000o;\304\3328=\266\3458\275\303\236\231=\217\251f\274za2<\212s\315=+\255\305;~\230\006\274\"\022`\275\213\253\351\274\351N\326\274\361q\370\273\224\240\005<\232=\342\273\267\375\006=I\221\023\275n>\233\275\035\233K=\273\355\036=\354\025\271\275\370!\322<\212\233\007<\305\"\327<>n\313=\001R\306\274\2739\250\273\353\316\026\275\231;\277\273{g0=\013\240\376\274~\310h<c\370\202\274\237\215\252=\251\330\273=)\320\246\273U\007\001=Z\250R=]\216\345\273KIa\2753\234\036\275kM4\275\315q\220\274\3325\326\274G[$\273X\004\370\274\025\302\211<\342\345\346<\021s\276\274\361\032\216=\254\257\251\2755,\204\274\356\370&;5\367\341<\233\321%\274Fr\036\274\247O\021\274^\\Q;\227\375$=\243K\004=\271#@=8}\350\274:\314\027\274\225~9=s\213J;\025?U\275\310\336h=\243\337A=\337\\9=Z\r\007<\311\025K=\311J\345\274n\016\245\274 \267\t\275\366T|\274\313\220T\275\321\263\314\273\277E\257=o\323\204=\3418\330\272Je*=/E\220=\r\236\364<\317\022\003;\"\327\232\274\221U\301<4\300\233\275\014w\355\273g]\347=\"Va\275\346\275<=\007\364\006=\327p\257\274\337p\202\274\r\025\325\274s\020>\275\353\373\202\275Pu\310:\223\217\3429\307\316\006\272\233\210p\273\345\266\013=cS\227\275\\\321\366;K\nh=\202\314\300<q\303\t\275\006\302V<q[\034<\n{`\274<Rl<\031\343}\271\330\"\332;\331\214\024<\030\2762<\203lC;;%\301<\306y\231;\247k\306\274\267\240\245;\250\234k\274\371KI\275\335\272\214\274\346\001u=;\205\253\274\366\007^<\344pk<G(\002\275d\031\r=8c9;\317\322\255\275\261^A=\273\343\264<\323s\214\275\232\234\242\274\004\216\241=\204\030\237\275I\031\375\274\222]\375<%t\277=\234\204b=\007|F\275x\256j=d\231\223<\335iI=\334\317c<Z\201\020<\343J\225\275\312u\265\273\315\272o\275\250+\304<\014^\013<M\256\001\273\242\033l<\336m/\275\366J\247\275\341\006M\272E\334\207;\204\3739\275|<\346\274]\022\006\275\335\002B<\251\215\321\274y\324\001<\020>\335;\341\306\253\2747\277\253\273\233\327J<j\241M=\271\313\t\275\020\365z\275\3305$\275\023\253+\275c\200\343<g\347\206\274\344\r\021\274br\221\274\372p\237<t\210`\274ULc;S\014\347;,\003\001=\006\341I\274\375k\202\274\272\027\310<p\3530\275\311Ko\275\317z\355\274\025u3\275f\220\313<\021\002\206=\351|\247\274>6F=\372+\364\275+\355e\275\203\017\321\274E\322q\272h\212&\273%\007\225=\362\303\232<\030\033T;\243\222\374\274\031\306\276<v@H;\260\325\"\274=\362\352\270/\\\367\274\372cK=)\321\215\271\032\263\305\273\271\226\235;\372`I<@Wf<\301#\214=\025\346\325\274ty=;\n\274\010\274y\310\220\275\310\234\256=\275e;=k\\\037<S!J=\205\247\344=\226\273\273\275\301YE<G X=\251\025\n<\321o\267\274\326\333m;\367)\\=\327\264m=bC)\2730,\334\274:4\206;\347@\007=\037\006\266\274\307s\337\274\313\344\225\273\006\365\t:\217G\235<\366\214\360\273\335\306\325=\303\334\331<Q+P\275%\302(\274<\343\353\273\373\031\255<\216\277\316:M<\n\275\211\201W;;\030\237=\352c\033\275\213i=<\255_\371<\214`\341\274\357o\002<=^\021\275\3410\316;\252\3429<{\026\304\273\344\0261=9\361\203\274\254\252\217=\243E!=\312\355\r\274\241\254\340<9\227\223\274wL8<U\032\353\275\233\302?\275\267f3\275Y\207\327=!\304w\275\256\206K\272n4z<\310\220+\275\351p \274\023\261x\275\304\030\206\274\014\343g=\037\211\244<\204<B=\25248\275\001Jw=\226\212?;+\341\006\274\tL#<\237\265\200\275\033\334[\275\230\326,=\331K%\275Z\254M\275\257a\343<\033\322:\274\371H\250\275UF\210=\326\221\006\275a\241\267<\303\210\022\274}\254\261;}\303Z<\3614\242\275\304EZ\275G\304\202\275\231\216\024=\244cd\273\3273\024=\344.\205\275^&\313\274\r\022x\274y\211\255\275\371\273\260\272\326\207\037\274\020\375\262=$\311\376\275A\002j<.\246\357<sM\001\273I\006\\\274\234\256T\275\327\364\303\275n\214\254<\037\221\216<\240\327\362;\211N\277\274\205\241\013\275(f\260\273\326\345\310<\3200\315<\244\350==\271Lv\275\036\017\031\275o2\276<\357\2601\275\330\265\226\273l\334\006<\222H\266\275\016\035\335\274|\355W;\356z\000\275\361\005\350\274t\007\341;u\235\2549\007\234\027\275\326\036\'\275\321y\205\272s\251q=i1\212\275\235d\021\275,P\320<R?\222\273\215\317\301;vm\322<\277jP\275\321\260\216=\227t\037\275d\"u\274e0\314\275\206\323K\275\0204H<h\2423\274\210B\024:r\3063<X\200\232\275]z\233<\017\250\221\274\321\032>;?S\n;Bh3\274Lu|=\347\350\262=\276YU=\tz\324<\002\256 =p\001\327:\334{\223=\300\263m\275\241\026\034\274\351\364\010<\330\352\323<\274\035\007=\342t\210=\023\354U\275\232a\306=,\265E={\356\227<#K\037\275\234\243q=\232\373\326<\341\n#\274\203\331\276\274\030\335\266<\326:2=\200gM\275^\336\206<\304\364\313=\2360\023\274L\333J=\314M9\275\216\200\262\274\031\267\016=R\321\264<\347S#=\202\233\t=GH\231<\001q\206=oG\'\275 \rE>N\246f<\235#\300\273\003b}=\020#C\275\371\236\250=\243\3055=\332\341a\275\307\310\330=\266M\202\275\330\014Z<c\362\234\275%\023;=\275\367X;\231\245\r=A0\366\274\333\244\232<2A\256=xv\242\275^o&<\346\021\267<\035\214\207\274\177\2777\275d\321\226\274\321\\J\274\272\221\205\272s\034\017\275\242Qa=\325-#=Nz\366\273\311\217\226\275sW\352<=\256\236<\342\330\304\274\307\330\323=\222i5=\\<\251\275\226\226\210<\243q\202=\264\'\003\275z\371\233\275\351\346\277=\233\274P=\237\341r=4\212\233<[\3707\275\333So;\372\020\026=\275+\202=\374\272\256=\306X1\275*6T\273\372\224D<?\335X=l/\274\273\270Q\245=\331\232\n\275|\255\202<56\272\274oo\312=\230\214F=\262I?\274\3348!<:\202\252\273!\261\004\274M\357J;\204\341p;nlW\2754g/<\326\020\216\275\000\202\375\274\3724\322\2727\245\230\275\\\256\032=\372\215\236<\242\223\235\274\360\362\214<\356A|<h\226(<\0012\344<H\374\327<\016\372\361<\313\303\031\275\252\247&\275vb\177\274,P\221\273\356\326l=\345K\2739{u\257\275+B\030\275\343\005{=\323\327K=9ah;2\225\344\274Z!Q<}!\002\275\340@\025\275\002\233\300\274\346e\241=\321u2\275\036\236\226\274\364/\300\274\336W\340\274j\212\311\274\253`\240\274B\023\245\275\343\330\273<\230\303\277=x\343\331=@;\224<\337\222\032\275\231\222o\274\027\335n=\325A\254;\034\217G=\274<\250\274{\016\242=\321\214U\274\273P\343;\2539L<\210\211\207\275\n\375L=\345\030\224<\223\\\t=%\020u<NC\017\2753i\316\274\\`2=]\351\374\274\362\346\316<\340=\014\274\237\257\r=-\315K=\006\343\032\275Gk\305\274\276^\026<\337\204\n=\323)\355<\312\341\004<\306#\t\273\226H\271<\324G\t<\222\336p<\271O@\275\321\336\222\273\231\232\330<\364\222\023\275\266\371\270\275\234\201\202\274H\030\030\275gLg<\274~Q\275\353V\232\272\211\272\033<\\\366\361\273[}M\275\271\351\262\275\226 \242=\206\234\352<M_\264<\216\225\216=\350\243d=\357\317\317;K\210\023<\3204\351;\277E\327<\224\247\t;\251hO\274\327\026\373<p\236*=jO\330<$\354\222\274\366\222\216<\263\217\203<\210\313\357<\033\355\035\275\374+\320\275\325\006\371;\376\234\354=\267\324\212=>+\032\273?[\334\2740\222\246\274\351\316#\275\351\324g\274@y\345<\246#C\275\270\362\304\274!\254\302<\003;\270\274\342\334x<5\322\206=L\003/\274\312/\237:\037\000\002<\253\025\214<\234\2771<\314\337\367\2744\363\364\274\305B\224=B\276\272<\177\307\215\274\233\033\030=\272\330>\275\274P#<\340>\016=$\021\213\275\262\t\301;\266\325^=`5$<\273\317\336<|:\302\274\360\376;\275\355\377\366\274\231\016Q\275\241\274\250\274Oi\205=\307\251\266\274\340]\223\275\021:\364\273R\315\317<\222/\233\274\320\020&<\202\266\233<\352R8\275tA{=\304\2721<\323\nh\275O\362.\275\374\301\224\274\332\305\231\275\374\370\036=\221\374\002=Lrc\273\337I\006=\216_L\275f\213&=\276\201\255\274O r=\010\344_\274\354/x\2744 \250\275\020\243(=\200M\223\274\tLx\273\340\004X<\270\372A\275\003\274W;v\357\223\275&\304\226\274\035:\217;\340\003\243\273\n\257\365<\214\2152<\3269\272\275[o!=\ru\227\275}\022)=o\201\236\275\345\3326<\2314W=_\n\326\274\253~\017=\347\305\013=\341\203\030=\023)\244<\235\354\312\274\010\372\242=\203\376\262\273i\315\364<5\331\333=o\275\223<\207\333\367;\321\031\317\274\371\350\246\2730*W\274E\323\244\274(\242m\274\333\002\231\274#\343\024\275\337n\264\274y8\266\274\247\016\357\274\262\356\360:\004\344\340\2740CK\275\246\343\225<k\221\027=o\333\251\273A\216\005\275\324H\265=\252bH=\215\320\037=?q\312=\343\250\031\272\347?&=\371\366\257\275\333O\304=2(\004\275\251\020\000\274X`\266=S\323$;IEQ\274\232\302\242\275Y\324r;\263\362n\274K;\365\274B;\017=\r\304\201\2753\206\272\273\373\307\267\275h*\353\273\242\3105\275\1778S\275\211#\223\273\345\375\232\274\354\330\227\274G\224\021\275\370\365\322:7\017\323\274\376 \206=t\335\337<\325\333\251=\316E\302\275\003M\365;l\323\246\274\306\\\261\275\262S\037<\272AB\275\277\213\333<\343\344\300<\267\206\360\2733\322\237<n\325A=\267\200\210=\246h;=\205KK=\275Zz\274\245\264<\274K\003\035=\037\376\333\275\231\267\032=\376\334\001>h\034m=\037\375\354<c\240\222\275e\235x\275\266\201\376\274Z\216l\274\002j\021:\363\326\302<9\356\003\274O!&\275\326/k=\350\2149;\020G\007\275\032t\304\275k \210\273u~D\274UZ\217=\324b\000=j\000\213<\315\372\306\274\314\\\356=r\005\357:\240\276\213\275*P \274{\004R=WF\245\275U\357\213<w\366\313\274Q\225\023\274=O\247\275\035l\263<^\024\216\275a\377 \275Cd\226=`1\243\275\200\310\237=\201\342\255=[\3010\273\304\310\206=Cb\027\275\372\017Y\275f]\367<\256GG=\246\244\023=\205p*\275\207\272H=\370a\267\274F\301~=\340\003\030=@\177U=\325\337\006\275\307\031V\274\374\370\235\275\"\310I=\233\355\352<f\222\031\275\374\225\037<[\350E=\007fS<\226\2452<\240\213\006;\0331\034\273\206\210\231<\223\361\324<\177\003a=V\030|<\334eh\275=m\203\274w\325\244=\242\220v\275y\004J\273\267=^\274\237\362\314;\342\277\312\275\246\264\034=\"\212\013<\363Nu=\246\007\322<Q(P\274\342p\030=\222k\277\273\202\023\262\274\"\326w=\376>\365<\366\273\201\275\321`-=/\006\337\274B\"Y\275\363\025\'\275\237Kn\274\274\342}\274\302.?=\022k}\273\'\346\017\274\251\233\247<j\262G\275\177\253\004\274\232\334\356\274\213{\002\274D~2=0~\200<\247\203\003=\336\\C=\276\372\362;\325\324v\275\251V\236;H\363V:K\213Y=\321\253\212=\237\353\237:\261\273\031\275\257\271K\273<\375\315<U\n\327\274*\263\354\274 `\321;\336\222\031\275}B%\275\353$\240\274\300\360\231<\0057\006\273\222g\234\274\025\031\210=\224\231\002\275F\3217=L\236\201=\227\026\234\275i{\n\275\024\251\267=\310.\244<\022\217\337<\370h\\\275\361;\237\274Z\0302\275\217\371\214\274d\310(\274\347\3372:p<\341\274\211\266\350<\310c_=\233\271N<P\017\336<\275\332\035\275\355^\r\275R\263\204\275X\213\204<\367\240.={&-\274\254\354r\274\244\013\363\274\222\322\021=\261;\251=\2324\243=\204\013\367<\024d\"=\352\032K\275\261\243\323=>\323\233=%M/\273\346\364\213=\004^\305\274A>\277=\265\260_<\323\333\016< \300,=)\306\375\274_\362\216\275B\255\246<\350\265\000\275\315O\036\275\rRW\275\335\020;<M\031\347;8\372@\275y\"\346<\013\317\222=\230\210\255\275\334-\333\274o\004\215\274T\357\356<\026\323<\275\002\t\226\274Y=\305<\372\020\253\274\035\340z<\343b\303\2744\204\226=\362\263\255\274\316\204\237\274S\360-=Y\370\203\273\222\0378=Z\205\375<\375\364\027<\346\355\215=\037\030m=\034\336\322\274m\246\t<\225\277\365<\313q\365:k\2440\275\315AK\274\255\267L=(\325\307<\236\363\206\2759\225\245\275K\234\247\275v\367\004>\262\216\224=\206\315\017=\253\344\025=\032\313}\274q\"\252\274]\233\262\274\373A\013\274OX\277;\t\2344<\225al\275\0365\322\274\202\311\322<\257U\223<]wL\274\001\003\031=E+>=G\333\343\274\374\310\355\275\024\201\361<m\324Y=\243\315m<\014\250\211\274\365x\262<s\226\242\275\375\310&=\275\265\350\274\325nL=\307\3223=I\235\212=\200@\320\273\203\300p=K\277\273\274\030\366\331=\244aL=_\360{<\227.3\275s\376x\274\357D\036\275dh\213\274\345\241\366<\376\177\350<\246\371f=4C\251=\362\313r<b\330\217\275\024\005\230\274\353!\261;{\203:=D\377\315\275\301\324\200\273\226\251s\275\014I\216=\327U\202\275\273\211\226=R\327\037=\211\265P\274\t\"\017\275G\352\203;aE\263\275\305\0300=\352(\312\274\2123J\275\220$q\274\000\242\241<X\016\331<\322&\273\273\274H\226\275\273\257\221\275\252\352\226\275\357<\213\275\346\305\224\274\255\277\236:U\254\235;&\264\315<\275\350\276;\320o\026\274\222\215\245\275\314S\376<\245\257\201\274\3413\027=\366\333z;\363\202+=\314S8\275\251Bv=w\310\303\274P&5=\357\311c=\266pb=\020\3716=@_`\275mSI<\313\013\300;\304\020\274;L^\201\273\263\370\342<\251\202\331< r\224\274\023R\222=h\".=i3?=0\250\274\271\345~^\275\271}\036=P:\344;j\370\202\273\036\223\355\2743\r\200\274\373]\233=\276\306\232\274\032\317\245=\177\310\014\275\372\340\003\274\236\305\214\275\034\230#=\1774\324\274\022AY;\206V)=\317U/\274\036\277\013<\363\035&=\317`@\275\231\246\007=tM\375\274\366\220\311\274~\302\300\275A\201\037<[{\275\274\036\272x\274\271\305\232<t0\244\275\203\013y;z\357\270\274\255\013\374\273y\002a=\262O$=X\361\224=~s\310<\342\303\305\274:\277\t\275;\2173=\034X!=N\000-\275\202P\301\274\357\214\240\274a\277\364<@\241\232<\243\335\250=\0204W\275p\324\265\272\020\366\247\274\nB.\275\320 \312<$E\233<\363r_=\0206\001=\023O<\275Y\315\r\275\034\341\217\275.\337\222<C\327\333\273\222#\300<]\025\034<\311n\224\274j\352\373\274`R\254<,\024|=\273e\251\275\311\203\316<\325\371\326\274\254\177\210;\020\347\002\274\303\324=\275{\261x=\231\367r\275\230DN\275J\276\210<\337\334&\275\323\312\256<^\306 \274^\356\237=\201Q8\275\361\020(\275\336F\350\274E\356$\275\005D<=\013\224H=C@\006\273\026\326\237=1\274\314;p\245\023\275h\340\240\275\332\302\201<M/\303=\234b\265\274u\234\343<\246\260!\275\025\375\271;Z\005\272\274\274\350B<\006\224\357\274\n\276\247\274)dM\274\304O\222\275\036\223\337\273\311\001\213\274L\020\026=\026\250\203\275\364\201z=\302u:=%\302K\275\007\306\005=\324\353\255\275=\224g<TcS=\007sF;\232\006\000\275\234&\207<2T8;&\n<=\025&\000=\0370\222\273\273\377\004<\020(\250<\243\024\240<\364\266\\\275\370V\250\275]\214\301;0\202\017<\210\337g;\037:\200\275\343a\313<\202\363\207;e{`\275\032\262\027\2758\307\035=\253g\307<O\251\200=\226\016d=\342e1<,\270\231=d\001\'\271|\266\204\274\277\002p=!\211\000\273\336\257\013\274\000\245\320;\033\235#\275\216\204E=\376\211$;\304\250\356\274\023\030\257<\0271\301\274\"\t\205=R\270\353\273Q\\\272\275\212\374\236\274\356@v\2758\210\253\274?\204\256\275\370h\355\274_.B\274\267\026\233=\344T\340<i\332\334<\310hu\275t\344N\274\312X\341;>5\242=\307\346\020\275\227J\035=\\ \265<\021\376u\275\014\210\211<\356\365\371\274\323(\311\273\302\321;=\327?\304\273]\345u=|;\037;nQ%\275G\214\252\275.\207\256=\232iu\275\003>\342\274\201\t\256\273}\003\261\275G\024F\274\203\310\254;\271\331\017=UD\363;\372\240\035=h\021\215\275\226T!\275\001\322\214;\301I\310\275\007\006\313\273\323[\213<\020\0254<P\263E=\305\351(\275\257\3104\2752\016\372\273^\031x\272\272\273\001<\327\017S\274\215V\331\274\264\303\010\274\216\204o\275)_$\275PX\355<\362\013\333<^o\210\271 2\013\275t\227\205<\253\237\273=\331,\377\273[\267\244\273F/\212\275=E\222=\376\371\254=\221\272\271\274\333&\211\275;\"/<\226\014\375\274\362\2601\275[\014`\275\266\364\353<\232+6<\363\337\305\274,e\265<s\227\302;\025Og\274\341\224\206=[[t<\'\350\r;[1\010=?\005\037=\204A}\272t\267\347=\316\221\001\275\021\327b<,\213\001<\266\021w=\014\007\314\274\212\034\265;\016\201\177<\024 \216=\362\016\236\274P\253\210\275\324yG<s=\337\274\262\241B\275\021\036\241;\225B\023=\253}\026\275\206\020\340<\340\361\004:\240I\332\275\rbW\275\024\222M\275<\004\260\275\2107H\274W\371\243\274\341\216\220=\324\246\261<\010[\003=\322\214\004\275\027,\305\275]v\016:!\246<=\277\017\236=\021\336\002=G\250\203\275S\277\257\275\001\311\226\275RS\207=n\2707\275W\245\243<\347N\301=\364c\217<\300\033\227=>!\236\275\307\260\005\275m\260u=\334>\346\274e}\332;\260\021\177<\233\027t\274\232\"\002=\317\213\211\273\017\311\r=C\224\250=[)\032\275\274\360\013\275\216\3200<^<\274\274\334\001\226\275\231?\253\273\244\211\332;\260|\255\275\231\361\332\274!\333b\272\274\312\267\274N\257\254\274\345\033\277\273\337\373\213=\257\304U<O;\360\273y\225\275\275_\316\250<\216,i\275\230\221\302\273\230C\206\273\215\330\177<\211Y\343;\236PF\274%\213#=\340\274\203\275\217\277/=f<\023=co\343<BgI\273\022\217^;\263\324\201\275\334y\264\274o\234\236=\203\013\216\274\n\251\361\275\007u\010\273/D\313\272]\026\351;\363\366\014<\3233\225<\323o\022=L\032\177\275*\376\367=\311{n\275\005\004$=\\\021\026\275\301\275z<\206C8\275\200\021\214=\207)\205<Z\211\353\274\211\006\023\275*\322\273<\r\323v=\342j\334\274oQ\020=s\213\014\275\202\304\236\273\334 \264;\332D\204<\225\250\351\274\226\203\027=@`g=\363V\223\275\311\020\220=\360\2560<i@H=\212\214\312\273\360b\332<?0\002\275\337\372\270<\024\357}:\264\234}=\205c\321\274\007\227\034<\267t\200;I\361\270=\0322l=\361\363@\275V\270D=$^\202<\337\3605<;\307\201=\224V\270\274\211\003\372\274\204\300\237\273\273\326\343\273\262\376Q=\214X[=\335\311`=\315\"r\275$\302=\275\227`>=`]x\275\321\225\355\274v\275#\275d\274\014=^\030\325\275,\177\254\275\202d\377\274\"\263\325\273(_\223=#T\330;K\241\255<\2750U\275\354\310\376<a\n\344\275<,\017\275zY\246=N\321\264\272\022\006A=\261\000\221=\333\310\t\275\324\212&=z\203S<\315dF\275\345\357\213\275qZ\313;\367\244\017\275\353\215\035=x\360\314;\272\005\022\275\324\240\353<\004z\017\275\360\223\223\275H\346\215\275\030\376\204\275\222B+=Z\024\224;\360\333\267\274L:w=\324\271\037=\357\017\213\274\233c\240<\006m-\274\2442\243\275\266\226\247\274\215>\242\275\000\262\325\274\036+\007\275\336\220\006=A\317\366\274\252;\026=b\235Z=;\024\232<\005Mg\275B\'\202\274\341\270\214=\017\305L=\030\325N\274y\330M\275\017\te=>?\273<R8w\274,\017\212\275\313\216\000=\3726m\274<b\355\274\214\363\\=\2508\301<\275\3242<\343R\304\272\333\251\341;\247xi=\356`\211<\221fW;55\026=\226&\327\273g\014_\275\301\205p\275\257\334\\\275\014\267\210\275\216/\246=\215\2111\274\367\3730;\030\007\217;~Y\243\274~w\001=;\335\t<\205\036\214=\254\362\326\275\2338\216\273\201]^=\010\361|\273\264^1=\022\253\336\274d\264\014\275\355b-\273IS\277\274\251e?<\t\206Q<\205[\267\274\217\377\361\274+\274m\273\305\263\224\273\364\007\314<\302\013+\275@\374\313\274\222\315\216=b\0371\274\235\3335\274\002%\332\274\310\357E==L\301<\207t\340<\253{\240=\352\0147\274\365\261_\275\361\200\031\274\322\025\231==\374\300=\334\265\310;G\342\220\274\252D\354\274f\000n\274\375\0233\274\270\021\243\274\277\230.=-\\\242\273\272\264\263;d]\253\274\247s\277\275\274r\351\274sL\244\275|6\336<|\250\316;\025\277\001=\265\202S<M\265\200<j\\-\275kRX\275\0079b=A\315\263<P\214z\275\"\007\006=Hm\333\274|\370\277\274e\217\230=\204@j<F\261\031\275\257[><\367\204g\275\306\333#<\320\277\027<\362~\302\274\252\230S\274\025\030\036\274>>\206<\010\235\333=m\333\225<\014d=;\323IX\275Z\t\000\275?^)=^7[<q\2421=\304\277\027=\002\234I\274\245\034\025=\332\222\227;\214[7<\331\365B<\3767\010\275\326\256\226<B\350\t=\307\371\n\275\233\007`\275\351p\262<\263\321u\274i\035!\275\t\353\315=\\m\271<\234\253\311<\376\344\024\276\277y\242\275\257\275\023\275Y\010B<\310%\035\275\315\226\251\275\355\nk=Z\017\246;\264ke<\207:\221\274\252\n\025=%\262\363\273%\246\241=\324\303z\274\327\366\305=b\277:<\371h\261<\277\305\324\272U\210\377<\371Y\333\273\327(\013\276\330\270\243\275\366R\033\275\014\221S=\255\001\250\275\346f#=\\\3336\275\245\203\354\273\315\027\322\274\251\320\027\275\315\252\225\275\244\"I=\322\004\255\274\316(:\274S\356\024=I\010\250\274\322\023\261\274\314\306@\275\243\320\350\273R}\227\274\337\177\335\274\376\307\3668\330zG=?oC\2756\315M=]\325!=\334\222(\274\234\246Q=\225$\300\275\023\2455\275@\354\343<\321\363\021\275\004\367#\2758&\314=r\351y\275\305\305K=\245\007\357\274O\376\002\275\332p]\275\316\304\026\275\333\016t=B\3021<\227+\302<\217\211@=\357J\364;\rk\267\275\3059\370<a\222\207<\313\035\305<\343\2223=~91=Q\021\231;t\366f\274\2307:<\025\357{=J\343G=\362\220\'\274\262M\006\275~\006\202=Cix=\020\331\234\273\034\356\235=\222\345\215\274[\010\020<\016\210\024\275\200\261\303\274\031\211\035\273<>6<\223.\016\274L\007u=x5B\275Z\037\021=,|\324<\273\377\001\274\345r\314\274aL-=\031\027(\274c\373\305\274\217vp=/\021\367:\353L(=@ph\275\342l5\275N\200\014\275S\313\301<\327BN=\340\372\263=\375\003&<\312&\010=\235\346\235\274\364m\355<\216\364{\275P>P<m\231,=\257^\256;FI\264<oN\271;\022\244?\275\033\004\030=\210\242\241<;~4\273\304\367\213\273\233?\326\274\214\250)=\307\300k:H\263|<\356P\026\273\334\246$<\202Bt\275!d\307\2744R\210=|7\000=\\\227s\275\306\230l\274r\305\212;2\272<\274=\322e=\271\206\177\274!6O=\363\275c<\033\005\320;\215\341\360\274\353\3050=\213@:\275\356\337\205\275\272\r\237=e\036T=\254\370\301=\2677\272\274\"*\203<MP!=\351\224\003=+\373\314\273\ra\033\275\236\270\315<\024QO=\320\334d=\370h\334\275s\363,<\017FX=%1\227<\036|\214:8\345\320<W\375\332<xJI\275t\302\365\274\027q\026\274\240\241\037\275\023\313\215\275l\377e<\223\321\205\275\335\331>=\247\tf=\274 \312\274\324\255\\=\345\231\236\273]\307\r\275\370\216\261<\220J\t\275\355\237\232\275\201\241;\274~\362\271\274Z\003q\274.\3372=\037\035X\273_\334\306=7*\261<n\275,\275\000D\244=P\254\002\274\241\273\267\275[\354\243\275\013\245\227\275\374\374\273<A\375_<\333\317^=\300\273\031\272\025$X\274\030o&;\347\205\027\275\0069\220\275\201\305^\275\227\341{=\300/\233\274CIZ<\227*\350=\373\265\027\275\361 \202\2731\002\201=M\t\236\274\262\305\246;I\221\010=\2242,\275\336??\275]:;<y\225\202\274x\361U<:\037\372<\0040\233=}\306\203<9\364\247=\226\021i=\003\362\261:\261b\211=xv~\2749\257c;\177j\235\275\356\021\232\275\376\322\342\274)|\316\274\215\246\237\273z}\364\274E\222\270<NN\312=XJ/\275\270oR\275\304MF=\357\216\232\275\202|@\274\211\364x\275\035V0;\320)f<P9\231\273(\245\215\2738h\206\2747St=\037\306\226\274\360\023\031\275\021\360\325\275\356m2=I\224\"=L\365\205=\355\0131=\207+G\273_Ur<Jb>\273\362\2252\274zW\360\2742j\325<\211\000\025\275-\226\261\274\370-\010\274a\301_=\256,\352<\220I\202=\223\367\265\274\330\200\364\273\305R\343\275\204\277\361\274r\375\010;\014\200\241<\271\337\007\275\204\000i\274\361\347\'=\377d\203\274?\227Y<\t\320\264\274+\016d=\241\025\254<\253\321\341\275\376\242H=\331y\261<\252\003}=;\005J\275\250\251\365<l\003\375\274h\310\350=\177\276D<\207r\010\2751s\002\274\355\005\353<\364\306I\275\354\237\231<\031\326\005\272\211\036\301<3\372\260\274B\350o=\357\304\030\273 u\n<\335\235\316:~\365k\275\226\007\214<\363)`=dh\014\275=b\226\275\231\356+=\026\375\205\275\244\307\334;\322E\253\274\266+\006\275\340\217)=\3061\214==\213==ox,=\343\331*=\354\222\323\274Z6\215=\361<);\357\261\376\273\332C\302\274\225\223\360\273\323ru<\312=\025\275~\006a\275\263[\r<sCe\275\241\211\231=X|\031\275\025\200\277<X)\371\275r\255\307\274)\354\257=\2331\307\274\215-T<\344\330y\274s\342#<a\034>=\240D\260\275\206\331\257\274\327\251\177=\204\267!\274\274\332f\274N\267\362\274\014\234*\275+!\224=\2739\010\276T\251[;7\304\202\275\025\234\353\274\007\207\3029G\367\213\275u\1770\275\236\331\326<f\\\301<\337 \312<D_.<\211\376\303<K/\'=J\375\373\274\252|\275=(\330J\275\375>\037=\305\360y\274t\354\227\274\t8\344<-\213\261\2745~\260;\242.\004\275|\241\030=\245\273\207=\201\327\r\275\371\003\373\2709\007\246\275\222j\207\275\230Z\207\273\252\224Q<\005\031\025\274y\217\223\275\375\371\216=@\275\211\275\035\r\203\274<\274.<\300\246\020=\333 \302<\371\360A=\243w\324:\311\036\254<\237\223\236\274\025\363&<V\312\003=b\304\220=I\273\324<\261j\207;\014\231\240<|\300y\275\350\207\347\274:\016\212\274\343\331\265=\014\356.=,\353\252=\377!\221\275`O\366\273\305su\275\252@G\274n\202\206=\343\255\202\274\235\256)=@S&\275\372\005H\275]L;\2745\\\005\275\037\337w\274\266\315\023=\204I\245\275\257k\032\273\216L\372\273\031\220c<\330\020\201=\245 \247;;\251\215<\026\212l\273\t\233\363\2745\270\277\275\002\350\345<@\267\350<\201}\323\275\005Y\\<Z\233?\273\037z\007\275(\264\010;-\313\302\273K>Q\274\305\310};\341\342:\275\304\247r=\311\002\237\275\034`,\275w\317{\273\337\016\257:\341\311\274<\321\263:=\000\356\244=\243\203L<g\311*:\006\023/\2759\211\303\275\334\r\314<\230\215\372<\2746t;q:\001;\036cR=\035\035\247\275&\303@=\323\246\211=\310\356\215=\305\325\206\272E\320F\275\277\223\033>\362\377\257<\315oI\275\334\365W\274*b(=\000m/\274\234\203\016=\034\232Z<\362\325\203\275\254\002\304\275\312\230C=\230:\365\274\031\244\363<\266A\326\273o\267\030\275\247\202(<$\025c\275\232:\216\273\361\215\336\273x\372\255;\261\177\026<\312\237H\275\017\235J=\203%a<\314\200\230\274\373\211\225\274\371\213r\273nE%\275\017\301\027=\016\273\215<\314\203,\274>\372U\274\254\363 =\035\357\364;\t\223\n\275\307\276\352\274kL\257<\261\017\224<\231\256\222\273\243\302\224<t\231\200\274\230\222X\275S$\341\273a\303W=\336\265\020<~\257\321<\024\0242<\240|\010\275XB#\275\032\317\302=\303\030D\275\347\315k\275\360R8=\002\337\275=\212\356\252\274\363:\000\274\252\362\332\273r\010\034=\315p\\=\t+\217=\004\332\350<\376\251\215<WGZ\275_/+=\030Ot=\327\205\355\275\354\020\372\274:\260\336\274\251P\257\274<\260@\274\215\0270\275\003\205\033; \231A\272x\243\027=a9\257<\030.\202\273\340\227\302\272\355\260\250\274\301\031\255<jW_=:I\216<\313E\201<\203\334\303;\200\355T\275\352\021\314\273+)f\275\265+\201\275\322f\235<\313\3565=M.\211\275\231A\306<\271\343v<\351\232\035>\231\023>=\215\236\212=\360\371\300<d\377\327;\317\362\315\2751\r@\275\245\025@=\276\245\201\275H\306\'\2759:\200\275\'\326\313<\203\273\321<\357\341\313=G\346\343<]\265E<\377\020\n;\305\030\230\275\236X\341=\227\246j<f\220O\275?^$=\200J\031\275\346p\007\275-\254\313<Ta\024\2759\005\310\274\264\007\351\273\235.^=mT)\275\307\230a<\233Z\320\274\262\215\'=HD0\274\312\272\213<<\0011<\243\020\241=\207hA=F\366V\275\026+\271\274uVy\274\241\306\205\275\222o\203\275\234\345\335\275\030\027\224:\345q\211<\361\336\033\274C\341\213=`\247\013\272\255\307h\275\\\315\025=m\234\264:H\353n\275-\243\244\274R\254\2069\335\313h\274N?`<\351\342\361\274I\270\237\275\212`\203=\360d\304\274\030\223\362<\374K\311\274\245\247\360<\030\303z= \021\273\274W\003g\275\034\302Y=d\237Y\273\311\347\205\2757\213\271\274;+\224\274\016\210\024\275\315\342\334\273r\234\305\275\347\300\252;M\303N\275\261\271Y=\313\277\"\275\221.\357<\020\370\206\274!\362\204<Cs\215\275q\221\313<\360\310n\275\261\237\242\275k\275\233\274Q\205f\275O?\216;\252\036\230=2p#\275\306\\\223\275\332\026>\2752%\020\274\034J8<\004j\327\274\252\304\225\274\302c\t=\212\306\276;\263`\223\275aC2<\221\260j\275v\\-=\232N\030<\234\006$=\024e\217\275x\277\000<\307I\222=\000\357X\275\324\223\246\274\304v\361\274&\025\036;\327;\005\273\273\265\017=DN\263\273\204\214\251=s(}\275ZD(\2758\200\r<K\344~=\2248\234<\247\010\251\274\202\223\345\274*Y_\272\010U\017\275\035\217\215\274\222\035\035=\n\220B<\003\377\341=l\342\363<\375JM\275/n\305\274.?\233=\002\341\212\275\335s==\356\275\254\275Eb[\275\252\';=\321\261\264<\027vN=N\315\013\275\250\263H\275\307jM\275fu0=\212\320\205\274\n\313\243<H(\340;\212\302A:\367[\030=^o\202:\037\035\234=\314\373\005=3\220\212\275\031\325\t=M\265f<\360\212\234\274\023LS\275o\252\367<\031\243Q\2746l\211\274\2168\233\275\004h\366<\010pD=\t\310\004\274\224\313\336\274\tAO\275\225^C\275UE&=\202h\303;2+g\274b\017\010\274\376l\024=\236\0034\275W\343\022;noi<\007\204\224=\005\267\321;\014\"~=\0331\003\275\003\332\320<\337\311\221\275\3437\272\274_\316h=\262t(\274\265\273\267\274\020^H\275\025\372\237<\241\030P\275\003BD\274\322\325C:\331t\326<\300o\234\275\315\352\016\275H\306$\275]\031\234\275Z\2026\275~\345m\274H\304\006=2\004~\274Al\t=\223G\201\275;\030\274<C\362\224\275\324\373\342\274\356\301\010\275*\347\362\273\256\275(\273\371\232\264=.D\222\274\366\343\022=\361\310\354<_\234\006\2750\224b\2751\035o=\265\377p\275\"\375=\275\034\236\225<?-E=\325\026\212=\312\266\013\273^\210\326<\214 \277\274{\232$\275\233\267\027<\352j\267;d\022@={]K=\300\273t\275W\327\263<Z<\017=\314z\014=\362\236\334\273\023\312\273\273L\177\217<\336=\354<\272\376\305\274\300\021\014\273|\031)\275\257\314\207=\370\201\317\271P\3730\274^\351k=\027\177\267\274qs\223;p\2631=\214\331?\274\255\342\007\274\357=j\273\332`\326<b\024\010\275a\275\360;3x==t+\257<1#\266=\364\261\216\275\013CC=}\354\222<#n\346\272&\263\224=\006m<;\2437&\2750\215\202\275\203\315a=/\021 =-4\313<\\\233\260\272\000\\\220\274\361\034n;<\355\271<\356@\010=\263\301\320;\373Q\250\274\200\350]\274r\374\371\273\316\202\026\275\373\235\237<\217f\365\275\340UY\275\264\220\010\274\244\031M;\'\316\264<^\242\312\274 \2376=\n*\27293\255\305<|j\322<dG\230<\356\200C\275\004+\240\274\007\235\016\275U(\007=h\204\007=2ck\274\22679=\247O\234=)L\320\274\273\3724<\3200\207\274h\377\306=J\301\351\273\300\010$\275\000\251<=\214>\251=\221\227 =\376\331\010<@%%;j\242\227\275Q\236\206\274\332o\371\274\0109\245=-\371c=\204\251U\273\247\024\222\275\n\317:<\362\230\326\274%\336\324\273\370\014\316\274?v0=\347H\252\27412\016=\006\346\302<\306\227\024=\363K\217;mn\222\274\372\\D\275\032gi=\323\340\031\275\025t~\274\247\003\000\275\335\245\240\273\352\330@\275\234\006\331=w2\310;\025\330\267<\274\010\361\274\253\374\241\2742\260\037=\202A\223\274h\026l=\363A\216<\007i\350\274\322\244\263<\0001\336<\007\002\315\274`\215\334\272\302\230\215\273L\344q<\377\337\202\274\347!\022\275\372\364\225;O\203Q\275>J\362\275B\005F=\227\242Z\2754\316C=\024\366\241\274g\"\326\273\311\000B=\275I\013=K\366\002=\312\314\240\2745%\204<\274\274\256\273I\3045\275r\335\242\273B\n\221<\312qb<\205\247\035\2742\304\260\273z=\263\274\300\365P\274\0208\377<\376A\301=\204C\310\274k\004\377\274\207\365\352;\253\265\202=\221\n\331\275\315\305\013=\332Z\370<\3648\207<\343\251\002=\2106\266<\207\361\037\275\007\226\225=\316\327\261\274T\201B\274\232\256\017=,\024\027\275\0013\034\275A\304d\275\217j\254\275\230\252p<\214\252\313<\2209\006=\260\252E\275C=\250=\264G)=>\206;<F\373\307\274\266\"\240\275?\"\245\274\3425\205\275\302/ \275F\210^\275D2\037\274\362\356\207=K\314\370<v\366\210;{\377\316\2747\252\246\275Y\250\006\2758{{\275eY\225=a\345O<\016\344}=\213*\023=m\021|\2743?\035\2740\340\213=\222\355\205\275\370\225\335\273m\240\303\275\200\021\000=%0;=\377\370\n=#\305\341\274\366Y\272\274\357\346\032=\367\202\n=\246\304\017=\034ZQ\275<\234\223\275^\270F\274Pcy\274$\231\213\275P\344*=V\346\021\274\227i\220=E\362\203\273C\253l\275\002\005\255</\233\214<\251.\241=\234\227\221\275M*8\274d\335I<c\240q\275\355\327o\275\2516\267\274\215\315\002\275\221yS\275\330\322\335\273\341\225\210=\2025\t<c\224\203\275\374F\361<\322\234\335\274\357\206!=\363\334\364<\335\372J\274h\007\036\275\354/g;J\010w<\346\345\346<\241\240r\274\037\207\\<_\3037=5\027\212\275\307\201c;V\330\007\274\305\363\010\275\213\335o<x\321\301;\\I\212<@\'1\275\222\245\263\274\365\312\262\273\242E\264\27457\321\275D\350)=\375\256/=-\306\037\275b\0016=\204+I;tIJ=k\023<=\372\334\206\275D\232J\275\304P5\274\335W\210=\305\330t<\323\312G=.Q\t\275\016\373\232\274\340\022\233=(\252]=\313\350o<\366a\223\274\2612\245<\302\220\264<R\312,\275\247\335\354\272o7\245=\356Y\324\274\304\220\305\274\227&\366\274%\234\026;\322b!=\274u\350<\001J\203=\257\326\360\273\204?\371\274\347\3339=\034\322j\275WW\014\275[\307\367\273\343d\317\274\340\310\347\273yz,\274g\351\032<\2175\340\275\311mw\275\300\311\372\273Y\020^<\006\244\026=\330\335\356\273n\036\332\275X\335.\274\016\260[\274\327fD=!(#\275\355R\025=/u\207\275s\357\236;Q\t\322\274r\253\036\275\360\213P<\r&\216\275\272j\221<w\250\221;\2667V\273WI\373\273\234\026\323\274\321\237Y\275S6\n\275\277\222\260\274\247\001\235\274UBC\273\261\254-=\021mP\275\301\312\231\275Z\267\352<\236\005\021<\027\004\244=\312\267\334=\341h\262:\205+U\275Ao\201<\376\347v:\361*\312:\302H;\274Q\334n=\361\037k=U\317\036\274Eje<C\321\210=\370\214\206\274]\206<\274d\324\033=r\360\265\275\377\353\275\275\310H\367<\251y\234<=n0=\273w8=CZ!=}`\366<\331\316s\275\224\305q=\265\224\344\272w\202\335<?\242\243=>\370\237\274\3061B\275\3117\315=\212\305Y=\330\006\020=2&\233\272\257\305V\275/\006j;\273\336\031\275\311\223\000=\341Y\013=\300bD=\267vO\274$\206\314<\023\355\271\275\023e\210\275\337\263\322<gc\243\274\216\235\237\275\307m\325\275\351J-=~}F\275U\324\002\275\313\344\237:~\321\251\274QQ<\274\322\263\233<A\023]\275\341\317\346<\237\331\247;\344\266j=\276\246\357;\373bB=\371\342C\275\177\005,\275\362}\004>\352\000I<6\024\307\274\033q\376\274\021{\\=\250\'*<\025\037\257:Q\021\275=\014\331\233<\277G\354=Z\r\214=\032b\030\274\306\240\317<fis; \346e=\237\275Q<u7\r\275\026\322n\275\031Z\202=\325u\202=t\032F\274\315\234\202</gn=\277\005(\275k\226\032\275\265uM\275n\020\307\273B\214P\275n\241q=\201?D\273\350\022\232=aON\275\217,o<m\316c\275\013SN\275|9\311;\214\021\031=\253tC\275aA\177\274\275\356\340=\272\003C=\360\'\244\275\345\265,=\n\371\300<\027\031\311\274\366\325\304\275\246\032\213=~\027\260=\363\027\016<\215\037\264<\342\217\212\274\254\036\032\273\223\377\351<<\030\357<E\003\246<\234\334\016\275\3250\216\274O\231.\271\332\314\230<j\337\256<\010\256\355\274M\366\274\275\350X\204\274:\322x=H0q\275~\232t<\377\320\216\275\325\373\202\274?\001\207=\373\300\204\274\254\366\037<v\341\235=\234\260\001\275\303I$<\277G\254=\344\330\251\273^f}<}\310O<\n\335\273\275\234C\273<,\264-\275/\256\034=@\356\255\275\320\263T<\276\317\323;\231\365\203=\211b\332<\206\177+\275\337\330?\275Qp\013=\275\033\276<\252\200\231\2743\340\016\275eh\364<R\345\272\274m9{\275\330\367 <;\027\010>/\322\032\275\370\314\331\274\343\026\355\274~\365I=\300D\375<\264\004\031\275\000\222\301\273\3732\036=\372f\201=\210\326\336\273\205f\341=g\224\252\274\366~\224<a\265n=\253\347\235<L=\240\273\241\010\222\275\365\261f;\356\342p\275\331\213\010\274\010\234\347<rq\321<\377\240N=\3017F<\025\005::\330\236/=\312\333\202\275h}\031\275\246\254[<\254`\034=\254\214Q=\354\001\034<\'s\032\275S\377 \2753\021\007=j\332\221:\246\026\305\274q\370 \274\272\236\224;\223\031V\275.\303\221\274\007\327l\273\304\3215<\313#\317\274\353\317\303\274\3026\224\274z\037\311=\\\211z\275\022=\243\274\031=b<no\027=y\354/\275\370\026\005<G\325\277;\334\035\000>]GD\275\024^\253\274\201\354\007=8[\247\274\313nB=\366\251\r\275G\246\320\274\312},=\020\373\375<\222\344\334<*[<\275\335\261\242\274\'f\246;p\033\3037\330Q\377;\\\376#=\3460\024<\372U\030\275m\323\242\272Lx=<(\001^<q\036\361<bL\337\274\211\374\020=\244h\370<\004\264e=\017\360\211=]\016Y\275\326\265F=\0252\317;\375\001\263\275\004\246(\274\335\266y\274c\333\235\275y;\032\275_\254\243\275wZ\017\275\251/\000\275\302\016\016=hZ\305<\327\001\257;DZ\016\275\031\243T=,\361.<t\010\345\275.Ct\275\006\243\330\274\037\337\333\274M\366@=\220;\252:\224q\023=\355\220\027\273\254a\022\275\353\301\364;\232\323\355\274\375m6\274f\221w\274\332\"\t\275[\251\333<\034\276@\275M\001(<\014oA=\332\003\014\274\301\301\377\274\274-0<\0147@<c4\204<\231\200\021<\350\302\254<\233t\262\275\023\312\210<\347\022\344\274\304\354\337\274\230\276\260<;C\002=\001\261]\275s\371\352\274\267\366\256\274\266\330\303<\304F\335\274\231e\311\273j\350\333\271gM\031\275\206\013\373;\260\314\033=\030c\361<\250.*\275\225LU\274\010\351\022<q\330\016\274\354S\036\274\034\200V<\003cL=\r\235K\274\376\255\014\2756>#\275U\343j<\324T\270<\007\353\370<U\335x\275u\265\003=\220\215\006=/\016m;ZuE\272\354z\026\2753\236\220=\332\201\032\274\037\247\023\275\r^i\275\222\225\201=\016\346-\274\324\261\001\275k\3340\275\360~f=\205\210\000\274U\3571=P4\226\275H\321\260\274\024<\330=\346\260\324\272\305u\244<\370\022\317\271\237\276\240\274\"\"\273\272\366\203\341<z+Q=\3232\265\274\211:\215\275\034\354\306<!q\017=-\021a=\325\252\311\274B\010\356\274\006\223\003\275\355/\336\274\363/\'<\006\357\212={F\301\274i\272\245\275\264\302!\275]\312];\037b\304\274OG.\274\231\351\036\275\330\0170<K\240@\271\226O\254\275Pl?\275\251\022\016=\331%V\273\363\303\310\275\332\236\037<[A\016\275\023V6\273\021Q1\275a\024\020=\367;!\275\376\332\254\272\347\252\3558n\037\305\275\374(L=|\242\301\275he\201=\310\225\013<~=\206=^\t\353\274\240\037\335\273\300Z.\275\224j\242\275\367\366\027\275\326|\320\275)\265a=/\014\r\275\362\264=\275\322!D\274\013\000<\275\345J:=Y\363\373\274.\177\215\275\325\214\312<^\367\233\274I\'\343;2\337P\275\373\336\226=\177\036\013=\2031E=r\256\023:\016\343\354<d~\374\274gKB<)\265\025=M}/\275[w+\274;\315%\274\303rg=@\377\275=\010\222\354\274]\027\263=\251ka=\003\317V\275i\t\207\275\210\206\212\275\223]/\275W:\350\275,\001\232\2750n\223<k\251A\275\217s\312\274\361\300\356\273\310\326Y\275\341\325\251\275\302^4=w\277c=\321\017\227\275\025\251<=\3771\274\274~\3663=/p\030\275\377\255\307=rv\306\273\243\020\206=\332^r\274T(c\274\217\214\313=\250\260]=\274\265\220\274\237\362r=>\360{\275\212\263K\2730{|\275\364n\241<\24005=\312\026\323\274\026\354\004\275\253\245K=.q-;\227\355\036=\315\222\203=\272d#\275\343\337\013\275-h\243\275\233\357g\275\221\342H=\231\370\307\274Gh\306<\360g\243\274\255\207\320<j\005&=z\265W\273u\263\377<A\342\300<j\375\237\2735\311\235\275\331\010\"=\323@n9\344\322\217;\210\331\324\274\314\2039=t\266\006=\026\222\000<\231\335X:\230\364\310\274\230Q\t=\323\002\334\275\230f\226=%\267\262\274-\235\r=!\227\337<&\000\202\274\\\314q\271\276b\263=\300\314\303=\230\262u;\267KQ=\352\025\024=\340\374\205\274\213OD=\205S\234:\224\2322=\037\\\246\274\316Nf\275\332\201\311\274\313\354\034=aB\374\274<\021\200\274\201\023\335;B\024$=\274\357Z=\022\310\014\273\005\317C\275\366\'\326=\203=s=\265\305b=(\312\355\274\245\310\330<\365}\265=\316\326\264<\311B\374;^yE=\265C\003\275;X\004=|z\354\274XDN\275C\347\361;\314q\035\274\251;\213=\217\374\210=\240\232\231=\245w\024\275\336ZB<o*=<o\265\210\275\221\205\255=\210$\206<\250\016\352<$,\276\274\274\305\010\275\3236p\274:\366/\275\361x\177=\016\3275=\025\016o=D\'\351;:\371\000=YO\235=\023\017\237<\347\377\245\275\023*\030\275\207\001\212:\212\265\014=\2263\245\274\311\346\376\2751\272I\275\007c\005\275\020\026s\273\316\332\234<,\216\271<eq\336\274\025\313p<\220\020\323\274\250\364/=\020\306\315<H\306/<\347>\200\275\314\003#\275\3403k\273\230\376\021=\253*\241\273\034\201c\274\217\254\211=)\230\333\274M\215\362;\007\013\312=\310\307\315\274o\327y=\371K\204\274\300i\004=\3509\n=\207\221\"\275\3344Y<v\246\356;\361A7=0\270>:zO\222=\365\3476\274[\007\016\275\336\377\375:\277\003G=\215\255&=8\244U9m\272\373<`\244A=\035g\013=\250\004\256=b\336\305=Wi\231\274\326^T\273\001;`\274Z7T<|;\343=v\317\213=\307\370\207<\243\344!\274j\345Z\273\373u7;b\2048\275Gn\306\274 $\006=\270\336\356<\321\362\311<J<\236\2752^(=i\211\211;9\210\r=\236\313\013\275]3\013\275#fi\275\220\254\231=\232s\007<&(i=$U+<\205$\n\275\323\222\006\275\371\254\343=l,\\=\375\234\337\274}\023\205<\007\333\257\274\013\360\217\275\\G\037\275.(\376<\210\223\201\274\377\326\351\274\376h\206=\036\t\023\2750\316 =\344@\030;\306[\316\273\311\277\330<Y\317><\252\215\321\275\1772,=\213G\322;\213Qf=Fq\325<{c\361<\217l\247\274\023 \360<\337\223\207\273e\3132\275\002w\207=\333M8\275\013\202I\274\032f|\275\341\324U<\000uN\274\372\271D;\326\365\317\273\023\341^;*\274\315;m\376D\275\014n\211\273\014\301x\275\030\032\213\275\025\326\270\275\035y\032;\22707<\272\263\362\274\023]\327<V\270~\275\311c\006\274\366;d<\370\205\330\275\320J\203=%\274\207<n_\307\275t\375\034=\333\341X=\264\252$\275\363\362\t\275h\365\361\274.9:\273\315\345@=\333\236\272\273\000\243U=\302\307\253\274\200\210]=\300~\242\275\327/=\274&y\235\274z\301\244<\225\3772\275\"\254(<6\324r<L:E=\366%\247\274q\254}\274\177,\310\272\253O\001\276kZ\303<izn\275\345l\017=S\001\351;\2635`\274&^\200\274\375\311I<i|\020<\247\246\262<]\0255<\244\304\366\273pp\300;\340=\225\275\334\267\340\274n\273\275<\311\220\214\274\332L\017\275\276\346\203<\310F\017\275\326\263p<asr=5,\215=\005\016\330\274\256`5\275e\351\240\274\342[\302\275\\\240\236\275**\226=O\233\221;/\316\206=\313S\027<`\265\006;\177\030\214\275\352\027\256\273\035\276\217<:\232\364\274\357\274)=\031C>=\331\224\032=H\256\211:e\302\321<\303w]\274\216\030\244\274(i\224=\306\233\366=5\261\237<6\374\";\251\306\256\274\276\246r=\253\270\024<v\264\016=\217\321\240=\323(\215\274\036\000y\274\021\240\313;\001\327<\275\270\202\201\274FmU\275o\234\300<\327+\274\273\324v\264\273/\177\225\2732;\275<\0060&==U\226=\337_\244\274\303\2765\2751\362\332\274\237\324g\275\245e\215\275\006\332;\275\234\370\350\272\013\371H\275\240\255\036=\233wH<}\016\'=\023w\345<\230w+\275\337\017N\2759W\250\2756\232\t\275\tTh\274\251\362b;?\0308:\210\306\366\274_Q\227\274\330_:\275\247\263L\2753\350\345\274\247R\026\275^\270*\274C\240\233;\346\2045=\213\263\240\274\036|\375<\275\033I<)\377\222\274\204\007\027\275\307\363\314;V\2760\275\031or<\215M\232<\214h9=sv\005={\257\316\272C\304\262<G\263l\275\373)H\274\346\245%\275z#\320;kh\332=}\307\267<\206\005F\275\'K\206\274\031\313\255\274\0252\301<\247\2035<1\266\315\274\306o\341<\010\350\215\275M\371\000\274\347\231\t<\236\021p=M\010\262\274\226\031\242\275\365\372\376\275C~\226<17\006=\345l\033=\306b\244\275\354\3721=\250\2048=\343\244\"\275\035\2153\275n\340\335\272\351lj\274\330\377\367<\320\346\240=j5\010>\227\241\265=\254\313\224\275a\377O=\203\016H\275\0226\242<M\255\210\274\022\2361=/\244!<\204\001\301;*\002\023\272\332y\322=\352\253\010\274\247\375\207<\332Y%\275\250=\250<B\335/\275\311\250E\275h\035\373\273\"\236\366<\345\002W=\237\326\002<\372Y\311;\003\340I=\262\362\222\274\357\247\242\273\374z8\275m\177\312=\023\317\376<\213]\316<\332\314\006>\244\032\243\274\t\300\242\274b\230\206:\273 \206\274@\222\214=\3731\260;\300B5<\271\342p=T\013\322<\007\211\016=\'\320\030\273\260\0213\275\264\332\275;\017\351\265\275\322\023\221<\234t\034\275\327z\210;\016\325\006<u\200\230=\262\234\310\274N\2243\275\365\334\253;\004{\207\275\316r/=152\275\372\255}\275\177\023R=h\0200\2757\275\037=\n\243\024\275\024\2257\275\300!\214<C|\231\275w~t\274\211\256\376<n\237\231\275\306c\235<gp\244\275\324\360!<\352\001\266\275\335\036\207<\352g\207<\267\210#\275\257E\302\274\203\260F<\351\263~<\340\373\n;NG\262=\325\2207\275\030]\030=\200\230|\275sH)\275_\261\035=i\207\225\275d\333\260\274\233\301\004\275ka+<\232j\363\273\304\004\013\274\223\361\264<\2321,\275mYO<\316\205+\275\347u_\275\3576H\274\206\240g;\340\324E\274\245\241\014=\242\332\207<*\204X<\345\201\303=\247\256\251=\337\333\272<M*R\274\237\223S\274]\232\027;\006+|\273\021\t|\275\345\321\200\275\244\007s\274\236K\235<\356\366?;!\202\250\275\202\rG\274*c\204\274\304\016\276\275e;\243=\014\342Y\275\364b\000=\200*\356;I\"\034=\337~\014\275Q\306\334<\234W6\274\266\214\031=\272\365?=\031)\002\274\376\002\376<\370\372\345\274\343p|<\300{/<\031\253\221=\240|S<\351-\004\275\216\377\332\275\241%\236=\237W3<\352\'\205<b\016\225=\221L\210\274\220\"g=o=Y=\2000\216\274\253\232\215=6\334\'\274\337\275\002=\033\261u\275\246\324%\275a\033\202\274\353`&\274\003\'\225\275\353P\327;\360\251\235\275\243\016\344;Y\363v<\017\340\366\273$c\026=\232\227\313\273\304BX\274$I\031<\363 \333\275\"\322\327:\275\343\311<Qzh=\353\000\256<\331;\354\2746Y\226\273\334\033\\;\260\273(=O\223&\275\002\300N=\243\242\271<;\205b\275\335\274\263<V\351\365\273\321[\311<\235\301\'\274\317\321\017\274\3346n<B\272\277\274\013\357Z</\361\320=\271\031V\275-\366H=<s\327\275\303\221:\274\321I\021\275E\217\203\274<\035\242=\014\t\t\273[\0167\275V\332\276\274\342j\222<c\322^9s\325_;\320\322\250<\241\033\262\274\372\014\216\274\306jf=E1L\275\372\3273=i\351\022\275\250\232\377=\020\314T=8\242\017=\243h\314<\tc\220\274\235\212\207<\343\2140=@\342\200\273\255\317\272<\235;\014\275\371T\264\274\256*(\274(D\025\274\333\206\354;L\203\220\275\370\302E<-3\241\275\225D\242=\352u\370<\252\302\327\274\261U{\273\362\372\311\274\366\350\347\274\016\r9=\336\006\267<r9\014=(\373\254=\033<\355\274\324\330\003\275\266\261@\274\336`$=H\201/\275d\031\246\274\271\332w<\2746\021=\350\367\242<\323\376?\273\205\331\242\274\\G\265\274\237R\002\275Kn\315<(\246\023;\332\265\234<\273\177\236\272\312\225 \275\326\205\347\273\233\265&\275[\232)<\006\217\231\275\353z\230\274Q\tg=\027\027\362<\212\223\207;\3510n=\306\222\333<z3\233\275m\r6=\243\321};\334\363+\275=6\304\274\340\264\270\274L\266O=\342\002n<\004O\236\275\253A\010=\024d\230<\360\337l\275(/<\275\004\351\366<?\323\266;6d\235<\331\327\261=\200\027b\275^\023r\274\313r\212=\002 \r=\317\3740\275\247\2437=\320\3270<\244t\217=\224\000L=0\316\252=\374qa;A\303\026=\"9P\275\301\2366=k\337\016=\275\241\333<\250C\t\275\235b8=3Wi=\255\202\245<\3348n\274\213\010\207\274q^\202=>`G=\022Z\340;\244S\000\275\372H\017\272\373\305G=i\272\266<\317\356x\273T\221W\273\306K\205=\334\333\201<7O\364<8GZ<\014o\355\274ng>=\202\027\"\275\225\212\241\274D\233\371\273\nT!\275?\267\013\275e\246\036:\324\360\267<CaA=\211\253\374\274\334\270\210\274\332v\310\275\017\n\205\275\272H\204=`\250\025=\013\303\205\273\006\316\263\273U@S\275N\245\222\274\034\214`=Y\302\023=P!\363\274\030\036v\274\221\001\250\275\242\210s\2740e\211=v/\227\274\t\206!\275N\034\350\274\033\211C\274EL\243<Ze\t\275\271\304\225\275\272T&\275@R\037<q\2511\274s\270\023<\365Ba\275\303\341d<\237Bc\275\246\"\031\275B\377\245\275\007!X\275\304\322\372\274\337\227\260=\324\233(=/Jb\2750\332\003\274\326\250\003<\315\020+<\010\277;=\373\005\212\275\310\317\025==\311\221=\267}\302\275q\330\343=s\241\300\275\247\003\306<\206\033\314\275q/\004\275\310\321+\273\373\221@=$\243\334<\361\021\251\274\313 \215=\013\205\313\274\323$\213\275[/i<\371\353\366\274\206\206\355<~$\346:L\377_\273=c\004=\260\217r\275\345\260\203\275\357I\235<\221)\360\274\257\217\227=\301\202A<\031\004\227\275\214\234\001=\205\336\302;\231\245X=\244\304\021\275\214c\234\275\231\032\206\275\322\337\240;\222a\002\274_,\260\275\3725\330\274\033\2633\275|\207\001;\036[k=p\356\273\274W\261\000=\235\223t\275j\337\020;\317\037\002=\035\256\232\275\250\376\263<$\211\203<\231G\035=\355\021#=\354\266;\2757\213\021=}\360\202=\346\003\377<\2101\350\274\004:d=1\035^=j\323\227<\0269\005\275\227ZD\274\\D\373\274\037\177\361\274\230\243\\\274Ne\244=.4\250<i\217\252\275\263r7\275\2001d=5\330~<\304\250\226\275\245^\233\275\253\331-\275\2069\256\274\201\311\344\270D+I\274\006\355\007\275\373\332\210=mD]=N@\270<s)>\274\342#.\274\375\244\257;\250\234l\274\355\205\375<Qc\010=_\266\313\272\245)\272\274\350A\316<\210+\263\27497\027\275\264\200\335\273\375\202\230\274M\\K=$\342\023=\372lK:<\333c\275n\251*=\212\315\265<\254\205\240<X\335c=\231\204\266\275#\030d;&\021\020=3I\315=\324\305\332;y\375\020\271\260\302\300<I\225\305\274\277`\330;\272\322\273=\233G<<\255\347\251\275\003\231B\274\332\345\372<V\201\024\275%\234\235=\220\246\353<\246K%=\320\032y\274\024\311Q=\037\270\322\273\254z\213=M\307D\275\007 \273\275_\273/\275\265\270\024\275\353\276\261\2748\262\246\274IW8=\027\007u=\352\010\007\275D\3531\2759\363\033=\221Z\002<\3305\034\275\260.h:\322 $=S5\223<\256\225\033=E\275\317\273\314\232(<\'\356\263;\240!\246\274\366\034\336=\023|Z\275\340\t\365<5\375\345\2745`!=U\342\200\275\020\220\237<\361\335I=\214\240D\274\037\231\245=?\325\211\274k\370\035\274J\362O=\215g\232\275\270\366\361<\243\025f\275)\344\332<\020W\306\274ZE\324<\205\323\327\272\003k\203\275\335\377\316\274\"\026\177\274W\340\273\274\215?\317=\245v\276\274u\324.=y\364\350\273\026\215s;\300<\001=\322\234\226\275Q%X;\213i\264\274\252/\242\274\356\330\024\274\0265\231=\'\332Y\274\214-a<\251b\224\275\231\310h;\262\302\275<\323\352%=L\244\262=\272\025\337\274Q7\024=\356\310A;\270\220\376\274\215\202\034\275\335\264\'=\207}\200\275\220\215\377\272\3679.=\232rZ=;\t\204;\371d\200\272^39\275\200\210\331</\354\364\274\352\262\267\274b\205\355;:i\006>\005D\377\275\202?\314\2740O\305\274\207/\024\275\005\222X\272\304\016\310:\276\336\305\274\221\367\360;\353\024n\272\200\332;\275\0177\211<\237S\372<1\224\005=\026\350\211\274\273\367\\\275\032,5\274\000\307\025=\032\342\"\275\317\021\003\273\371q5\274\235e\177<mA\023<\351\303<\274D\010\016\275z\030\233\275z\213*=\246<\221\275|\2410\275\252\032\342<M~$=\332@\252=\234\270\277\274\257\341C=\266\222\263=|7i=0\235\331<\222\231\250<)0M\274\230\300\031=\007y#\273v3\210\275\r\254U\275#\317U=\3762\030=n[7<\214\253\264\274\241gH;\356\010@=&f\000\275\377`\356<\343\226\350\273z\340\240=v\307\t\274\205$\217<\347S\017\275\355\370\261=\346\023\275\273\332\327\304<rn\234=y\256p=?\245\374\274H#j<Y#\306\274\335rJ=rj\366<\370t\335<\005]\027\274kVM=\371\235\221\275\022\233\340\275\256\242%\275\0206\232<EU\301<1y<\275\356S\277<w\213\014;]\315\032=\236\271\201=\336\375\231\274uK\277\274\211m\336<\335\210\034\275\013bl\275\322Q\227\275\030\371\246\274n\257\020=j\360\001\275`\245L\275\270\223a=\345\276\177\2741\360O=l\256\214=>v\340;\206\301\313;\301N\302\272\026\2032\275\021\327\033=0,)<\352\371\262=\016\210\030\274\304\256\322;\022mJ\275\344\205\305;\025\320\326\274\350\364]=\312\022\341<\253\372==\341\310F\275[\302.\275\262\303\220\275#\346u\275\002\237\255=j`\006=\271\264\223;\017p\202\273\315y-=\006=\200=\005\275\367<.\3225\274\233|\223=X\262\030;\270\233\206\275\210\377\245=\267\213\232<\257C3\2754\212-\274\207\231\323\2744\316\024=My\202\274\034\025\256\275\313\364%<T\230\201<\332\025\321\273M\026\360;\321\272\216;\210\265\301\275o1\005=\260\306\263;\204\033F=qC\351<J\266[=%\347\177;\357\347\222\274\277\257\201<VUC\274X?(=\260\247\236\275\246\206p\274\007M\255=6\351\204<\350\265\266<?S\363\274\350\n\003\275\031J\215=\217\033\216<\202U\027=\250\257\243=\010X!=~\033\234\275\300E\242\274\005 7\275\037\332\306<C\324\250<\027\200\374<\253nW<\350\362\315\275\223Y\244<5\311\227\2748\267U\275\'O\200\275\262\265\215=|\342\314=\030\277.<\201\327\234\274/\007y<N;\007;\214\272W=\002\033\226<l\202\004<\232\320r=\215n\024=\236i\006=\3020L<u\034\205\274\305R@=\213\2416<\341\021\\<\273\016[<\242\376\n>=\'t\274D\314\265\275\025\023\226\275\3534\353\274E\350T=Nm\341\274\301\222\270=Y\242\312<p\247a\274\371\017u\273\215\337\005<\366#\242\2749v\315\274\253 \207=3k\251;\317<\267<< j=\t\201\354<\244n\237\274\255\365\276<\010\304\034\275\340u\207\274\034/\353<nv\221\275\352\307,:\036\241\360;u<\343<\375\260V\275\333\025\246\275Y4\325\274\261AN\275\246m\304\273\256\022V=\214\246\376\274\322ql=\366\016\277;\244A\351<\2738\223\273\273iK<\t\257\003==\367\246=\366\272,\275\037}\322<\371\302\362\275H\272[\275p\351\302\274\021\343\004<\371\322\340<\323\030\014\275\007\272(<\350\037\232\274\301dQ\275)\357\304\274\213\252\016=\213Z\365\274\233<X\273*\224\032\275X{j\2751\243\"\274&\347\001\2758K+\275y\321\247=tS\n=(\227x\274\370\370\3409\340f\214\274\361\255\215=@2V\275*\310 \274QNH\274\013u(<\330\274&;v#B\273e0\244\274u\362%=(\000\215\2748\311\216\275G\006Y\274\037\360H\274\211\351\022\275[^\025\271:\267\031=\233\331]=\002\240;\275\354o\367<\345\304\025;[T\270<\022|\235=\370\232\212;B\324;=\257R\216\275\001\004O\274Q\332}\275g\020Y\275m\246\310\274\rR\376\274n\344\341<\002\333*\275y\252t\274\232\274\203=\3612;\275.\365r=\240\200J<\027%\227=\224zt=vK\333;}\337\'=\315\233\345\274x\177\276\275q\004\004=\217\377_<y\022\024\275\037J\246=\212f\327;\255m\033<%R><\372\334Z<\375\267O=etX<>B\031\274&J\036=\227\320\"=^\260\356\274S\202H\275\217\250\203=\272\030\361\274\316\023\223\275nM\024\275P\0007\275\316\223(<[\005R\274\371\235\"<\321\217}<X\330\357\274b\\B;\315F)\275\3507\255=!>\306=\335^\316\274z\366C\273\035\023`\275\231\253%=E\010\307<\311H\035\275\340\240\206=\323\214\020<W\3523:;\"f\274\227K\336\275\226W0\275\217\357\275=\031?t=\"\016\252=}O\002\275\211Y\364<\223\313\253\2753%\304<\255\310\203<1<\301=\376\215\322\2754\343f<\252\262o<$\206e<\205\0243<\216W\363\272\010\263/\2755\301b\275d\037\013\275\276\330\364\274\332D\310=\217 ,\274\224\245\255\273\203\212\311;\033\2737\275\272\273\270=\253\241u\274\353\235>\275\326}\307\274\243v\007\276\376wH\275\334P}=\017)A<A\233e=w\007`\273\232\362\337;7I!\274rZ\354<.C\016\274\031m\363\274\324\267\264\272\274r\026\275\257No\275oG\034\275\364\222`\275\177\264X\273V@r=S\357X=y&\261=\215\317\351\275\2346\352<\221\324\004\275H1!\275\371_s;\375\271z\275\0274\345\2740\256\317\274\034)C\275Zei\275o1\220<\311\224R\274 \276\257<\355\331\327\274\\\\\333<\355@\234=\276\336\t=\000\257\005=\000j\303\275F\370\223=Bh\002<yU\255\274\200C[;\216D\351\273\336\265p\275zT\177\274\010Q5\275\001\361\254\274\003\273\212\275>q,<f\025A\274 X\315\274Gp\024\275\266\216\017\275p\261(\275/\222t=\362\002k\274\342\342\240\274\020}\032==kr=%\266\023\275\270)g=\260 \223\274\013\217u<\241\245_\275\362\206g=\242\260]\275\275\250p<h\211\212=DV\234\273\352\373\001>\333=V\274z\334\335\274\220\275\226=\" \001=\330\215L=\257\264%<@e5<M\200\212\2731\301\262=<\311\024\273\254\353\032=\026\277\200\275\306\002\006=Sa:\275\303\372\333;\265%d<R\3574=\322\017\013=\224\023\206<Dy\255\2742,\220\275\342\n\203<\214\207\216<\320\373\320\274>Y\270=\214\331L\275\023\344\210\275\217\247s\275t\331\262\274\205T\263;3\303z\274J\001\245\275(?\234\274\202\357\261=\347Kn\275=\313\362=\207[:\274b|\313\274f\034y<\025/q<-\263T<\254\233\206<Bl\335\274\314\365\022\274m\016\247<\276H\250=y\317}=\003\014\356<\217\310O\274\226b^\274\330\'\321\274\254\363S\275fv\233\274\263\320\034\275b|B=\214\335\245\271\324K\254=\327\275\335\275\331\306r<Q\2357=\003!\031\274\202\2173\274\372\377\360\273E\357\206\274J\253P\275\265hV=\345\242\235\275<I\207<K\031\201\274\310#m\275\243\254\230\274\233|/\275V\357\274<0\352\016=\217LN<\366\025o\271\021\'\023\275\225\355\251=U\336A\274`\024<=\334j\270=\305\224\r\275j\246V\275\361Y\023\274+Rz\275\035\243\220\274u\025K=\016\257\271\275|\316\250<\026\027\005=\346y\021=H\210\222\273\003\214\256;\033\225_\275\343<\251=\337N\317=\342\253\027=\300\211S\273\230M\023\275S\254\210\273c\034\376<\"T\365<\354\341e=\243o\200=\342\266$\275\200\303\033\275\001\322\211;)iI=t\337\\<F\262\226<\202\022\027\275\213!\350\274Q\251~\275\251\357\320<G\347c\274\210\237`<pLb\2756\343\320\274\250~\"=SK5\275\366\240\204\275\331\361<\275\272t\334<\003\323\231\273\314v\321\274\305\240\242<x5\237\275\021\034*=\271\016\334\273\303\030\352\273w!\022=\024X\254\2740Xg=\376\202m\275O\322\r=u\312\317\274\242\367\377<\221i\325<\361}\204<\274-9\275a\276\035\275\273l\003=Fnd\2757\234\326\275\001\022\205\274\350/\010;rN\035=j\307\034\275\256\377s\274|\007\265\274\032^\363<J\271\022;\032,\201=\242Y|\275\267-\367\274T\250\222\274Qm\333\274\240h8=\267I\236<O\307g\275.,\307\274\037\020\201=\235\305\342<\034\201\341=T\345Q\275\360,I<\332f;\275UX>=\207x\322\273\3419\207\275R\206\247<\201\033\215\274\216\223\016=\340\372\031=\247\014\340\274)5\006<\274\350\303\271?u\361\274\023\034*\275\363\033\305=\362\264\037=\227\024_\275\316\205\305<\205\253\263<\303\243\017\275\343\264Q\272\242\2767\275\211[\215:\"\003\244\275\177x,=+\240\301\273\223\224*\274(\362\214\275\341\303\203\274{\001\217\275\027\314\204\274\301\022P=J\252\t\275\264uo\275X2\347\274\322R\345\273tp\303\274Q\300t\275\236\220\004=q\304$\274\335m^=G\3038\275^U>=\324\244\270=\334\377\316<\234\214$;\340\374\000>L\016\303<nHr;\232CJ=q\321M=\202\375\334<\010>7\275o\341\200\272\273\366\312\274\216\300\021\275e\330\234;>\331\033<\351\346f<\341\3639\275l\255)\275\212\363\316\274\254|\237<\023\223b\275\342\253\254\274\274U\\=\n\247\026\275\261\277\233\275\010o\035<\321QP\272\003\004\302=\245L\006\275\222\311\204;\027\377o<\305\272\365<\022q\202=\212\035\203\272n^m\272TLU=z\371|=\260\177==T\3512=\r\320\241<\335\332\313\274T\311\207<\364\223\014\275jx\221\275\027\"\017>1xd\275>;\211;c\375\226=\376Ny\275m\327\363\274\311\0235\275E5\202\272\377\303\241\274\301\354\t=\014\230\225\274\246O\254<_\343\205;B\263a\275\355\023\207<\343]\202\273zn\312\274\330\244\264=9b\202\274\300\2206=\320\314\232\275b\231\213\275\036\014\002=ej\215\274\351\264A=\354\270\211\273Uy^\274\320\375\302\274,3\333:E\215s=\023\3032=\2057\320<\206B\231\275\027lw<\333\207\244;e\243J<\321\361\230\275\317\214\034<<\376#=^\1773\274\324\334-\275\203\225*\275O\351z\274F=\372\274\031[\205\275\010f\321\2733\237\033=0\211\014\274\200\257\343<(\277\021\275$\"\267=\240u\360\274/\323\347<\033P\305=s\230\303\273\274\344\227=\r\367\367;\250c\220\274#\202o\274G\352\270\275\311\255\226<X\377-\273D\273\344<[\016\177\275\016Cd=\253\2405\275\"N\364\275\374\213!=G\n\005=V\344.\275L\220R\274]\352\261=M\263\205=/\242\024\275\250\306\311<]\341\322< \223\251=\3169@\275\036>\341<\342\251\301<\361.\252\274\370*\276\274%t\371\274\2210\024=g\323\275:\017\262U\274&@4;Xfl<\256AI<V\333\227\274\034\023\037;I\r!\274\370\373\251<\r\202C\275O\241\371\272\203W}=\251]\257<\227h\255\274\2279E\274,\357\225\275\316\036\201\275\237\300\223<\237\375\215=h\357\334\274\240\364\216=M<\311=\312\307\207\275\014u\377\274xa\206<\313\230\262=\337\203\001\275\'xi<\rYj\275j\314v<\016\271\025\275K\200\026\275o>^<8\034\021\275\215\2157<\237\376\001\275\224\302\205=\371\245*=\362*I<!\243(\275@\032\260\273K\342\356<o\'\336\274\033\3003\274\344\264u\274\302\260\321\2717\321\220\275\3769_<j\r8\273\256\033 <\025\r`<\320Y.\274^q\t=\275\322\322<e\2431=sN\017=\263\267\014\272\273z\313;;l\034=:Xf\275jc\3229\231\327\311=Xe\203\274\275\037\032\275\341\316\301\275\023\352\r=\354\341\347<\245W\006=m\212\020\274\375E\210\275\300\324U=9\315c\275\244\'\216=\322q0\275V\n\016<xf\214\275\313\373\025\274\327(\276\274\351\321\332\273\272N\177\274\023D\013\275\037\034\027\275\257\301\302\274\366\322#=\360A\r=\275c\013\275\024\223F\274\236\177w\275\027\2171\275\221\354\311\274$\224\200=D\230 =x\312.\275K5\365<\273\033S=\213\367\351\274+\263\233\274\324\032\343:w\357\265<Cb\027=7\274]<\213g\337;\033b\333\274\321\372\267\275f\033\004\273%\313\021\274\263H\377<d\376+\273\2631^=~\375\'\275wv\204\274\246\007\225;\016\207\221\275K\333\313\274\340\310\215<6\364\322\274\240JC\275\254!\235\275\364s\306\275\337\332\321<\232\370\230\275*\2479=\303\3475\273\222\344 \275\333\205\272\275\311MM\275tws\275\241$y\275\255k2\273D \326\274\247\270k;I\264\272<=l\177\273\316\027\255\275\005\rc=\330\350\307\273\251\270\334<i\323\r=\322l\300<\227\237\227=p\227+\275b\271\017=.\t\035\275\027\207p\274\'~c\274\256\216\254=.\216\310\275\247\241\226=k\213$=\332\267{<s\253\205\274=\n4=\213\334\343\274\324c\275<\244\024\307<)c@=\205m\231\270\327\371\303;\024\357\016\274SK?=\356\373(=U!\002\275\240\006\265<\350V\360;\r(\364<\367\200\232=\'r\274=\037\237T<\333lC\275L\025\266=\351u\316=(]\241=f\024r=\302\366\237<&>\362\273|r\271\275\225\2125<+\336a=\'6\374<\nM\214\275\367\252\026\274\177\354\"\275\354\310\"\275\306\215\211\275@\014\302=\300U\220<z\213\365\2730`K=N$S\275z\036+=\234|\211=\tG6\275\3634D;v3\177\275_\375F=Ug$\275\253\\\220<\224%[\274ra;;\376\266\326<\221\210s\275\013WL=J\266e<?1\'=|\020\037<\372.\234=f/=\273\343\315\370\274L\2376=\036\372\310<Q\020\223\274\362\260\"<!\373\203\275\206b3\275\360\250,;\013\331j\274\246\023\251\274}w^\275_02<X\262(\275g=o\273\000\234\244\274\233\312\316<\017V\2639\301\324\316\274\242$k=tj\201\275b_/<\014\325}\274\200#\253\274\213\274n<\202\262\202\274?Q(\274\324\325|=-S\002\272\016\010\375<\363\361\333=\367-0\274\031N\010;\n1\004\276\004\017\025\275!\345\367<\311\255\214;\007\316\274<dY$\275\374\213\205\275EN\003\275\371j\210\275\3537\326\274\371\232\235=\330\2445\271U\273\013\273y<~=a\220\211=p\227\252<\314\300D=s\304W<N8\330\273\026\377V\272\220\010\300\275\027\375]=\006|\246=\226<\252=\373m\340\273L\323\272<\356p\205\275\352\203\322\274e\275\266<\371\254\317\275I\273\020\273;\270\r=RyJ\274\307i\234\275\204\216o\275a6\216=gM\000=\360y\202;\360\310\"=\313\317/=\367\2455\275\022\263\006\275:\304\211\274\323\334.= p{=\210\300\204\272C\274\247\275\231\254\333\274\302\371\237<\020\237\234\275G\336\377<\211\270M;m.\262;}\352J=v\221\260\274&\201\364\274\225:M=./\325=x\035]<\017\253&=;7\014=\274\324\224\275R\232\242<\227\342\242\274\251\366d\275\236\357\373<G\237]\275\214\361\231<\025^_\275r\313\303:A\006\211\275\001\t\300;\3333B=\232\376\207=0}\n\275bS\212\274\361\337\024;\"\274\276\274\033\027\217<Y\245\034<\020\026\016\275\016\207\352\274\341X,\274\240P\001\275\326\312\\=\210\003\376\273L\021\"\275K(g\275D\035\027\275\226\366v;v\273\336=3R\373<\325 \355\273Z\201\207\275\307W\310\274\204\236\r=d!\233=P\007F=\273\315\217<\321\3076\275\346j\204<%i\207=%w\271=I@\247=\206}\'<\014S\337\274\324\232\351\275\226\363\t<\265\274\344\274\356\261\264=\025\231\236\273\370Ey=Q\215\206\275Tm\275\273$9\215\274\200\007H\275\227Ai\275{\263X\274\250\313\334\2752\273\353\274\027\255c\275k\002)\275\005v\377\273\341q\273=\237\216\031=\301r\277\275\233\216Z\275\343\034\204\274\363j\n\275S\312#<\206!>\275\264\272\250:\364\366\004\273B\326\245\274\006\354a=|e*\273\207>\342\272\235\030;=]\357\324\274\266\3171\275&\204\357<[\377*\275\312\t\346\274g\3248=\222\260\370\274\232\355#\273\327\376\303<\321\245\267<*O\312\274\006`B\275\366\313\215:g\351\001\274#i\220\274\177|\251\275\3150\326=.\217\237<\034\376P\275\206M\317\274\344l\356\274\300\037\212<\263QE\275C\313\245\272\270\334`=\227-\034\275T\200\361<x\005\032;\255\030n=\332b\352\274\240h\216\273P5\211=\372\242\344<\257\310)=G\221\'\274\353eB\275e\r\320<\007\316R\274\310c\226\274-\212\236\273\224\311\330\273\225\2021\274\007\300\203\274^a\020=.\315h=\003\020\260\274\260z=<\2227\254;J{\211\273wh\365\274t\222\211\274\263\225\205=\221\355\302<7\345\363\274\366\034\027\274\354\276Q\275\361\027\260\274\222\347\205\275\000\272.\275n\323\225<LC\025=@s\266\275MA\207\275\220\221\316\274>\343\004\274\014\236P=\321\000\217\275\216g\021=#/\363\273_\231V\274\306N\326<\275u\005=\346Xi\274\341\244\322=\375+N\273T:|\275\037\334>=;\220[\275Z\314\260\273\355\223\023=\355\362O\270\005\rK\275v6\'=2CI\275\256(\221<:\274;;%\311\262=\025n-<\234\021T<n\003\032\275\316\257\260<*\207\272<\376\330\304\274\r1\237=I\'\341\274.\236\365:\345\206.\274M\355\201<\030\335\362\273\005*\r\275\251\200\205;\3703_\275O\366\034\275\323\327\037\275\002r\224=\2709\344=U\177\300\274U\006U\2748\312\315:<\007\r\272\036\226B;>UX\275\266\270Q:\rL\316<Q\343y<\255\232\306<\0211\245\274\302\334\260\274\365l\232\274\223#\271<\013\327d<\210\313/\275\244\022\245\274\034&R=\335\302\302\272\376=\024\2758\331\257\275\343\006\026=Nx\335=\000\231\335;Wm\000<\005\263\213\275W\010\312<\037\236\327\274\016mY=\370i\231=\334\253t=lf\014\275\264\216@=\027}\034<\345\"B=\232\236\256;.\316\017=\262~b\271\r\2147\275\tNN=\361\271==\322\327q;o\222f<\010\341\255\272\351\232\261\274\035\267\246\274\0149\336\2747\001f=,r\357\273e<t\273\031\304^=\3731\336\274U \262\273\021>a=5-N=REb\275N\266\027\274\223\024i=4\275d=\016\326L;W\327j=\236\206b\274\272\211\376<\376%_=<\277c\275U\316\233=-o\367;\204I\207\274\373\366r\274\215uS=\251\014\234\274uy\330\274\303\222\024\275\347\322\306<\373f\002=(\2014=\262Sy=\254\266\367\274t-K\275\325\362\261\2747\361\"\275\272/\024<\334?\244\274,\357{\274\334.x\274\234\025\301<W\344\022\275(=\272\2721 \353\274Q\223\210\275r\230\014<\341\250\305\2747\004\000\275\010\323\"=\246\347I<\265\336$\275P\r\323\274\357c\364<M\346\377<\211\233\246\274\0278\202\274\352n\263\274\335>A\275;*\006\275W\237\330<X0\013\275?\345\264=\246\334\001=\336\315I=t\370h=:\206\330=\336\322\302<\314\340\2759mL\036\273\003\374\300\273\323\031\300\275\202xD=\305ac\275te\\;h\313\030\274\014/F=w\344;\274\350]\205\275\331X\020\275\245{I\275\226\23129/xL\275\261,a<3,x=\007G\224<T\370\201\275\212P{\274\347\244\376;\007v\214=\005\361\233=\230\022\323\271\376\007\367<\355\374\004\275\361\274\363\274\224\351\276<\r\356\301<\336\273\272=2\005\034=\363\221\036=w\357\202=AZ\002\274\307\221,=\353\377M<\207\020\325\274\030:n\275y\r\207\275/\367\217\274\230\252O\275\n\222\230<q\242\013=ptU\275\2045\251<\310\317Y\275\376\025\262;K\217\314=\t\224\200\275M\216\236\273FY\264\274FY\213=#\n\335;4K\334\273#\036P\274\335\246o;f\232v\275\330\2609\275\004@\325\275\'$\343\275\207/i\275\013M9=l\257\273\274\020\264\n\273\257\275\033\275\376\374\266=\037v\030\275\300\205y<2\201I\274_\234k<|\346\324\272(p ;\340\216\340<|B[\275\343\014t:\360\351\241<\364^\226\274\354c\357<\020\220X<a\326\226=\300\003\005=\r2\003\276Tu\002<nR\255<\327\352\215\274\024\335*;\255\203\025\276a\377\330;\022VJ=<l\333<\311\321J=$i\266:\2535\201\2756\346z=\365\300Q\275\375W\n=\237/\327<\327|\206\274/\305\335<B\031\"\274\261pS=\321\034\312\274\246\005\315\274l\220B<_\377\341\275\033\360\252<\325\2031\275\373\272\212\275\226\251\020\274\262\344\014\275\032\244\226<F\270\024<R\020S\275~#\253\275\330\005\210\273\307G2=>[\232\274\310\276\302<\251\270k=Y\250`\274\3712}\273\372A^\275\327\233\013<\0108\224\274T\037\246\273\345E\314<\302\006p\274\030\261J\275\037\311\257\274B\212\313\273\240\276\345<C\250\220\275h\205/=9\343\204<\'\241\376\274\210%\202=t*/=\023\022\217=\341\257\322\274\203\220\003\275\217\267\223\274\323\223\242\275\217\226\022=\300\344\266;%\306\356<H\272\t\274=\024U\275\034\016R\275:U\003=\350\364{\275&\360\230\274\017\301\367<gR\314<[\n\034\272%\205f<\000(\242<)\"-\275\251<\224\275\277\266v:b\0040<\351\010\245</\201\264\275S%v;\033\366,=\212\337I;5\020N<\363Z\310\274\261\360%=\203hD\275\037X\177<\255\221?\275$`^\275\310\341\301<\266)\356\274R=\342<\233\026\010>\251\227\177=l\251\275\275\343\360r=\233\347B=\177\371\024<\"6}<a\251z\274s\377\036\275\335\235q\274\277\277\023\275\352%\322<RSp=%\371J\275;_\026\273\036\323`\275\204\022c\275\264\003]<$[^\274\336\223\225\2751\356\200\273\353\020\035\2727\370\335:\212\230\304\273U\330\234:\004M\261;o\025\316\273\311\305#\274t.^<s\242(\27599\240\274\270\257\277\274\001\271Q\275\342\355\002\275saC\275\354(\312;\3170W\275\342\237\014=\352\271\300\275\3209\204<\340\021y\275@\215\353;\372:\3659\265\350\024\274\374\376\361=\342\247\022=\274\206}=p\324Q\274Bj\035=\214\021\002\275\215\0058\274\026\002\027\275\020A\004;\216\036\252<&L\324<\367\341\006\275\315\363\004\275!\246\246;\323\253y\274\374\312\r=O\235);\312\237\024\275\025E\351\2731F\003\275`\t\255;]\374\003=D\302\245<B\275\225<\325\214\254=\0142\336\274\353wa<\0275\263<f\211\336<[\3106\275\001\r]<\003\220\245\275\005\003\226=\223\343\204\274qi\033=\240M\237=.\350\007=\371\373e=\224t\272\274\302\024\212\275^\020{=Dr\313<\233J\335\275\315\034\000<lr\234\274\376\004\343=s\300#\275H\245Q=\'\363F=K\346\275<Y\237\010<\344#n\275f4\224=\312\217\021\274\337\221\t\274\270\355H\275X\204\031\275\226g\303<U\355\333\274\327\375\317<h\233s=o\034\241\275)\030?\275\233g\026\274\362\325\200\275\241_\010\275;\332\333\274HI8\275W\036J\275\216\303\351;\201\030\303\275\207\357\271\273B G\274\030\177\203\273\312\211\365<,9\352\273X\346 \275\317\t\330<g0\220\275\331\335\363\274\247z\027=\350\205\263\275.\357\265=\213\347\220;Fs\247\274L\344\013\275\275\202\224\274$\267\217\274^=\026\275Q\007{\275,uG\275\2430\014<\364\317J\275\213K@<LO(<|\305\242<n\030\231\275\014\256\344\274\330\031^=\206!\261\272\"\221\364;\373\210A=\254\334J=\362vS\275PU}<\202\223\214\274\333\003\312<\252\0134=\206\243\227\274\2550\020\275\016\256\216\275L&\325\272\317\315P=\255\245\232<\010\"\220\274x\372Z=\275\265T\275\252\036\233\274\002y3<\251\371\334\274\206\305r=\303\310l\2746\330m=\316\356\366<\032\223W\275hd\241<_wT\274R:\r\274\022OE=\031$\241=\010\361\255<\315tf;{\006\272;\375\253\201\275\227\3066<\025\272\242\274(I\236\274\033}\243\275I\026\266\274\222\ri\275\345\373\237\274U\357\251=\232>X=\245\277\330<\354T\363;\001E$\275\361\\\204\274\240\224T\274\233\334\000=\360\245\352\272U8\301<T3\270\275\346 \204<\371\365 \275\302\311\350\274/\317\003={\204]\2729\304S\275\364\340\363<\220fO<]\034\370<7j\374\274n\002A\275\367@\220\274%u?\275\271\345,=a\375\034;\251l\"\275\225<\000\275G\331\205=S\311\375\274\304\322\226<@S\226\275\347j\246=^Y\030\274\241\036\247\275+\262\257=%\035\227=\373;\037\273>\006\206\274\034\377\210\272\354\364\257\274\335#\361<t\306\232\275.\242\327\274\255j\315\270\336\247\204<\311\224\001\275XJ\374\274`\205\270\273x:-=\204!\274<l\300G<\376\013\326\274T\222n=,J\017\275D$\247<~\254\203=\225\325\014<\377\037\237<e\0324\274NA\001\275\246\374b;\257\213\"=\205&\333\273\021\257\'<\261dM=\342\225\223\273\236\241\247=.[.=\013>\335<\313o\264<U\326F\274\201If=\226\221\036\274~\307\032=yG2\275B\036l\275\270\273\003\275\214\344\033=\374\274\253=G\025\307=\006\320\031=p\021\270=}Po;\365c\251\275H\202\216\2746\205 =\362\216\323\273\362H|=\031\\\366<\367\217\017\274Um\310=\260s\210<\2709\253\274\304D\030\275\230\336S\272\323\024\036=K|\250:5\'%<\337\377\207<\2147\214\274\005C\245\274c\n\271<\207\2342\275L\337^\275\026\017=\275CLG=\213\246d\274\263\013\302;Z_\201=\211\220V\275o\355]:\031J!\275\326C\030<\214q\304\274\037h\352\274\010\243x\274\325\323/=&\210\230\275\003\260\226<\326{{=\002\357\224\275\027\240>=\356\207>=\274\252\021=\242IG;\323#a\275\2603\352\273\036;\016>\327\032X<o\"\312\274\306\r%=A(N\273\337a=;\206\007\315<\334(8\275]\341\350\274Y\222\277\275^\251:\275\313\210\270:\234J\225<\036L\360\275\312M\006\275\331\247 =\276\023\347\274\002\263Z<\220{m=su\177\2759\314/\275\000\353\002\275\211?\330\274\013\354\013=gc\310\273\306$-<X\312A\275\005\301\213=\257\033m=\272\234;\275\244\271\370<\303\313!=\201\315\233=\345\353\231=i\303E\273\376\331\320<%\230C\275\325\033\023=\303\022\233\275EH\350\274u3{=\231T7<\244\250\223\2750\354\211=MO\261<\343Y\232\274|Mm\275\270xA\275\216\312\361\274\205.\245=\226\340\215\274\031FN=\371\352z\275\331&\215\2751C\213\275Y\372\026\275F\020\362\273\243e8\275\247`|;\033\033\026\275\212\224K\275\277\220\013=\216$\210</\241\340\2747\020\026<\376\302h\275_\236\344;\277\025\374<\252P\000\275o\347\224\275\251\334F=\315\354\235\275\035\375h=\201n\273\275A\265p\274\274\340\257=:\234\205=\226\357/\274o\311\213\275\237Z\245<f\n\254\275\364\035\034\275^\213<=\336cF\275\334E\237<*j\320\2756\301\243=\230\257\331<\320~\252<7/x<\312\251\221;\243\316\003=\376\371\020=\211\210,=v,\336\273H\237\303<(\376\324\274v\237\"=\034\366\371<\373X\264\272\275\365U\275\255\262\236:\315\013\2309\007\376N=3\244\0267\025T\301\273\300\267u\274:\266\277\274V\330\271\274\004\"\360;\033J\263</y\240\274<\245\300\275\331\r3\275\341\0257<\320n\231\274\'L\303\274\260\315V\275\345!=\274|\204\027\275\010\320\t:\253oj<\252%\375\274\366\335@=%\277+=\303\275]=\256\357]\275\373\366Y=u\300\202=e\336\214\275\201\213z<\362.7\275^k\006\275||f\274\251\370\276\275\315\370x\275uG\254\275\322\241\202\275\257c\311\274?}E\275k\306y;$\327\221\275[U1\275\231\367\005=D\367w\274\344\313\345<#\313?\275f\007.\275\251T \275I\350\220\275u\226\232=\234B\242:U\033B=\262R\212;\375)\365<\222\262B\275\001\202\337\274\020E>;\027ir\274_\177\037=\001\245\213;\216\330\330=v+\301\274\323f\013\275y5>\273\312m_\275wz\010=\367vZ<\"5\237\274\306$@\273\3341\2439\273\270\363;K\332\240<%\300\323\274\021!\206=\217Y\334<\227r\261<\233\226\213<\361\202\036={(\236<\177\322S\273\217O\031\275kg(\273\245\343F=\242_[\275\350\364\256\275z\0355\275\363\262\221<\375\350&=M%\204\275\027!y\275/c\310<\025\215\372\274f\261o\275\2457\253;Z\230\222\275w}\325\274SQ\030\275\324\333\202<\252\202\351\271.\235g\274\341\303\336<\347\032\235\275\230\342r\275W\0214;\264\303\232<\343jg:\377\246\310\274\265\222\007<uL8=\222\310\371\273^F\327<\037\335\204\273\364v\234<>\3263\275}~\002\275\336\205\372<\273p\035\274\231;\016=\324\244\220<\007\321\274\274#\354X\275\362\201\023\274\'\353%<\303\322\006\2758E\034=\330\315s\274\'\305\006\275\007O\007=\366\363\177=\"\304\306\274\366IZ\275\337\243#\275C;j\275\204\343\234\275N\010V\274\357:J=\311\217\235\2747\271\376\273c\003\201<\0346\203=\030\356\210\274\365h+\275\373B\336<\316n\245<\300\366\223\275\335\340\202<\201=\320=\nqK\274\377\252;;\037&\314\273F\241X\2733\321>\2752\375\357<\232\322\202\275I\250\306=5\346\222\274\325O\014\275\221\374\363\274B7\311\274\007,B=J\362%\274\340\035\016\275\210\222\302<\336\362\253\274\321V5\275\233(\247\274\200),=e\367\001\2754\303\237=\006\250\r=\300\274S=p@K\275#x\230=U\3019<\375h\327\274`\234!\2745\366\020=\224\377\027\274I_\206=z\300\\=\216Q\246=\265q\213\272\255\317\333<\023\243\210\274\r\247\010\273\214,\253=g\254?=\213\226\373\273D.\276\274&\307\270\275\236\351\214\274\"d;=AcH<\326+\245\273\220a{=\321\255\331\275\016\320\004=H\331\344;1\004\t\275\251W\372\274Ph{\275\302s|<\201Q\365=l\022\335=\362\264\312<\227\256\031\275[\262\323\274\240\311\301<\336\341\305\273\213\322\316\274\2121\262\274\237\216\216=\344\020l=\303eS=\257$8\275wqT<\267\252H<\342\242\246\274`\216t\274o\312n=\317\355\261;06\t\275#\222p\274\235\337\215=\323P\023=\022\214\000=\245^\213\275\216\353\240<\023\375\357=\274\366z\275\'V\"<*pX\275mg_=05\210\274\271\226\021\2755\221\255<z\010\276\274\220\217o\273]\215|\275vj\354;\205t1<\265uO\275\243\372{\274KR2<D{\207\2746\346\244=\354YP\275w\225\332\274\326\001t\275\021\237q\273\231\260\026={\342u<\312\205\311\274\335\2778=@\371\325\27445\257\274u<w<ch\232=\367\220\222\274?\353D<v\241\037=\227u\032\275\206\335\230=\254\347\'\275P\345`\275+\370\260\275?P\201=\207.\020=\357\273\224=+\355\240<\007\325\032\275\275\032=\274\270%J<\300{\206\275,\304\005<]H,\2751\030\372\274\353\276\001=\316\223\266\274\275\276Q\275h\250(=\024dO=\343\"\006\275\247\312n\275\243\320\240\275NJ-<u\'\354\274\227\322N=\255\020\\\275\310\037x\275\300\273H<\262\031}\275\022\363\276\274\004\212\031<\216l5=\320*\366<\351\302><\374\362\203<x\232p\274\"\326\037\275\316t9\2740b)=\206\345\004\275\223X\337\273h\007$\275\213\233h\275\347\323\017\274\305\014\237<Q\251\224\274\335\344\020\275$\374&\2735\310\364;\234\376\341\274X\255\210\274\235s6=\343t\013\272\210t\211\274\026\252O=\371\365a<)t\314\274\301\307+\275\330#\017=\032\215\363<\340Xt=*\202p\275\245\253\034\275\217\010h\275SB\177=e\353g\2743\226\246=z\033\305\274/\215-=PD \2758\220\216\272\343\031@\275\014\247\241=h\324\003=\025\320\350\274\003\013\225=\234\037j\272?\327\240<\"\344\334\271\261\250\257\275\\\353\273=\346\306\333\274\326\246\355<\275tx=\346\020\267\274r\347[=?\363\273\274x~\302=4\371\025=\006N=\275r\330]\274y\221\252<\337\353\n\275\"Zy;A\225\372\272\230\337\216\275[^i;z\020\010\275\266\222\010\275x\202u\275\214D-=\213\363\177=\352\302T= \365\264\275K\237\252=\312\221:\275\332\217\231\274\346?\257\274\'\245\322\274D\261\213\275D\254q=k\362\\<\372\347\206<\374<%\275\273h\027<s\316!=\203*\320\273\030\'\276\275m\237m;e%\236=\354\217:\274\216 \222=\004\2502\274d\227\270\2756K\222\274\010\216\315<\347\352\226<2\225e\275\261\236T<\rr)<(9\251<\261W\201\274\032J\026\2750\261\177<\374H5= \343X=>|,\274\000-\355\274O\277S<94\261<b\254\247\273\322\017\362\275\313\367\264;\nY\221\275\267[\273\274\312\270\274\275\226F\247\275\207N><\245wP\274\211\3149=&B\213=\272\221\036=\"Vs=\'\202\020=i\201y\274\231T\013\275?F\234=\260x\022=\214yD=IG7\274\311O;=\314a\025=\206\341\307\2746\371\327\274,n\222:v\245\302<\366\213\211\274\021\336\037=\017\235\361=\303\230\223\274x\205\200\275q\222\"\275\252\027\271\275\247\240J\275\373\036\212<\222\324{\274\330IT\274\213\035R=\227+\322\275\014#\017\275&fZ<\"\032_6S?\364\274\224\016\375<:>\252<J\321\273<\001\246\377\274\350\206=\274>\311V=\331WG=\324\036\331=M\371t\273>\253\241\275\177s$\275\023K\277=\004\325><\336\270\030<\372\240\017\274O\327f=\231\354t<\303\354\327\274>b\\=\270\031\377<\177p\333\274\001}\210\275&\016]\274\035\210\234<\276\245\336<g9\204\275B\370\276<\2048\241\274\003\245k<GL\177\275\377\200\305\273\221\341 <\252@\240\275\rh\241=\231\016\251=\220 \376<\2473$=\332\216\033\275\206\300\265;\033\363\252<\363\0229\275So5<1\336\311\275\031\343A\274[\340\355\274\235\022\316\275\371\237\026=\253\030y\275\236\201d\274\rgo\275\310\357\271<\370\314\035<\360\'\021\275\257<C=\341\377\'=L\277\306=\244\355V:!\337\235\274\223wQ=8\243\330<\333Y9\275\353\005\366;\326\372\267\2759\341\006\275:\035j=\341\237\\=\321)\364=[R\357\273\342l.;O\337e\274@\036\376<\021\362\334\2704\212\313<\277\265w\274i\310\023=Z\362)<\367\333\r\274\273\010\023\275\326\360\227<\372\002\210<D\023\007=\"\227\214=e\347&<\026\026\212\274_ \207=\304\256,=^/N<\273\307\346<d\324\3259e\327.=S\026\234<5\353\260\275\265\003\007\275:\276C=\243~\\<\"\372\030=7U\362;\356\331N=\276\237\354<\374\367\017\275H\277\014\2740\313\n=\346\334W\275\202.\241\274\244\0076=\330)\262<|E\257=\260j\216\275\325\221\237\274a\357\223=\226\233\240=L:G=\203w\372<\356X\010\275WZ(<o\316o<(y\222\274_\231e\274s\004[\275\005\003*\273\256\t\373=\005M\277=\272\2516<S\216\276\274\034\"l<\030\036\227<lJ\005=m\277\023;\255\221O\273\315Of=?\243L<\002S\365\274\337\007\003<\270d\347\273\327\353\216\275\264\205\305\275\210\277\210<(\261\215;7%\255\274\014|\311<\376\"\366\274DlR\275e\240)\274\346\343[\2741q\033=o\256\211\274\223\275\022\274\003\245\205<\342\247b=N\216\024\275z\\\204\275\332<\230\274#S\305\274\215\350a\273z\022\224=\345|*=\020\261\262;\252\335\006\274\317\253\316\272k\232\203=\327\005\270\274\220>\343<\356\317\255=E\211\216<\202\275?\275X\334J\274\265[\200\275\320>\013=\330+\243\274\036\205\266\273cG\253=.\0107\275;\337\267\275\333\026\267\274\317\305\026\2758\360\230<>\217:\275C,\017=.\246\301\274I8\243<\212\373\217=\205\334\243=e\364\356\272p\355\371\274y\246<=\264g\003\274\016\257\331<[@\303\275\030Q\273<C\017a\274H\353u:\277\320y\272\376\251\222<\325T\2369\200A*\275\004\236\226=u\313\030\275\326\304\335<\357\276(<\231\320\034<:\351\241\275\346j\021<~V\014=\341\256\213\272-\366\001\275\036Y\023\275\243\322\373<\375\0240\275\341h\021=\226/\364;^\367u\275)E\246<\325(C=\266\330\n\2735\242\314\275\267\372.=\317:$=/Ds=W\221\t>\272\033\232<p\303%=\013\227i\274oa\246\275\n\344\225\275\221\346\303\273\334\301\221\273\255E\323<\321\204\343;\024<9=\375\325T=\256~\014:S\367c\275\256\331\037\275\245\355\021=\247^\315\273Hw\204\274\016\321\365<\033x\t=\215\223\236<N\337L=]\304#=\334y\331<\216w9=e\376Z\274~[\310=B\352\340\274\313c>=\227\030\255<\025z}<2\321o<b\255\303\274\307;\314=\231\034\264\274\3346)=\205:\214\274\257\212}<\260\212\252\275\337\251M\2746\344j\275\351\341\367\272\356N\033\273L\266g\272\215\350\005=\207[\241=Fe\361\273\215\2475=\251Uh=\022&\272\267\r\352\t=H\314[\274\007\342\272\274\014\253\031=\370~\254\2755\273\235\274\236S\003=\007\367\237=\032\236\t\274\201\032J\275\363\037m\274\007\320\227\273\303-\241<\335\241`\274*\026\271<\313\235b=\306\006c=\002\346\201\274\251\'J;\367~\300<Fk\240\274\367\267\336\274_\031\r\275F\265\032=\271\356\237\275\303\306\335\274Y8I<_\021\216<\206\034\036=\345\336\306\275Y\231&=D\305\006=H\326\325<\000w\224;\306B%\274\220\266\002\275\t\346d=\365O&=n\230\314\273\000xU=\232\336\302\274\305l\336\274\231 n\274\3453\317;\\\320\000\275M\201\240=r\272/\275>\366\237\274F\365z;\344\303q=`K\235\275U\221\215==e\202\275F\220=\275\216\263\357<\212V*\273\316\025\224\274\242\245\033\275\275\347\177\271\373\352b\274\243\305)=\302\300\327=U\341a\2754Z\235<2\334\327<\373\310-=\250\033\225\275]\220\344\274\260\037(=\324\206\226=\307\344\376\274\234T\\\272\244\033\364=\232+\346<f\005\022\275\026\341\210<\262\300n\275\300\367\316\274\202\217\230<\255 \257\271\334\337y\272\354\364;\274\337Kn=/\323.\275\t\002\022=\353]`;J\241p=\363\035o;U]Q\275\346|2\275\202|s<\r/]\274\024@\311\274\034Va\274\207\367 \274s\r\022\276\200\307\363\274\222\241\252<\221\305\274=F\243D<P\207\304\274\300\222Y=\177ZF\274u\203\263<`\023\204=\211\013@\275b\023\221=\223\242R\275\271\375\225\275u\225B<%\271\310\273m\363A\274I\n\230<5/K;\373I\227\275\270\224\377\273\036T\035\275\276\305Z\274-\264p=\327\366\017\274Fx\024\275\337\307\'=s\372/=\244j\320\275d\330*=&\0079\275~\212\271\274J\017\332\274\370\274n;\037I\023=i;\236<\363I\021\275\2365\024\275!\n\205\274n\006\265;\"N\243\275\004W\263=\026[n=V\264\363\274\310\034*\275]q)\275\236\021\340\273\003\235\267\273%\273\207\275\253\233Y<=\230\277\274\336\002\203\274\235A\201\275\374\024\014\273!u\205\275$\252@\275\276T\325\274\033;\304;\304f6\274D^T<`\356<<\270\0104=\345\342~=)J\206=\260Q\234\274hK\230<\224\207\017<\354\250\212=v\240\255\275\013\271\200\274\004EW\273f\031}\274H\302\377<\340\327\247\275\035\264\010=\366\265B=A\324\306=\236u\247\274\252U\216;\364\321A\275\345\212$\275\321\215-\275\257\307\377<\225M\341:\352\025\367\274\313\246\235=7\3554=\351Nj\275\024yi=\207B,=\343&x;\274\263\223=\252G\365;.Aw<\230\242\014=i\231\303<yV\200\275}\242\210\275\351{@=\323$\204=#\242\260\274M\320\223=\031\'\022\275\301\036\031\274\274O@<\212\004\252\274\262\362\3709\321\354\373;(\214|\275\345\205(\275]9Q=\020\375E\274\0000\317\273\350\277\177\275\205\275\274\274\314\377o\2740q\037\275\314\365\327\274R*\314=\017\016\\\275\007\312\273<\356\313t=\26351\275o\347U<9\377B:\024\"\353\274\316A\n\273\014\031\230<>\314\362\275\035\354\275\274\207\201b<9\351]<Y\221!\274\264\200!=Mam\274o\251\r<\355\366\346\274A/\313=T\234_\2754\216\212<&\306@\275\367>\n\275R\365\344\274?h\264<gR\275<\347\004\232\274U\036a;\366J\315\274\350\002\'=\355\365\245\275SMy=\260\205f\275\014\031\232\273p\003?=\007\005i=\302\\\037\275\276Y\026=\317\223\362<\225\006\242=\035\357n\275=\307s\274o\374`=\0103\"=\311\300\214;F\004\177<!h\257\274\037\240\037=\260G3=\310 \210=?\tX\274K&\226=\n\320=\275\227([\274\360\214}=gI\235<\200\265\216<\004\226\243\275\007;3\275E0\341\274\322x\205\275\271\234\026=\3453\304\272\332\203y\274\347\353\217=\315\256@\275]j2\275\260\273%=\244\241\277<\t\375#<\032p\224<\232e\244\274\354\002\311\274\032\226o\275\256(:\2752\206~\274\351\234\327<\345\0329=\351g}=\'S\023\275\354j\222\275\017\0204=N\271\000=OP\272=\200\"\224\275e\300j=)\355\024\275h\214\005=uD\253\274\203\233\373\274#[\211\275\321\263\010=9\327\271\274D\010v=\177)\032=3Gd\2742f\235=\013u\200=ERA\275\360\355\010>\364l\251\274I5J\275\304j.\275\t6?\275\023\021C<#\327]= \377n\275W\323\222\275KPP=/c\202<G\236\202=\312\247\207<\370#\231\275\315\263\362\274\346\317\014\275\255\235\006\276ou\356;\321\234\347\274|\021\211\274\250\363\223=\t$\334\275gMe\275\027`\'=\201n\212\275\247\"\321=\003>\001\275;\375a\274\207\352\010\275j\307\277\275o\341\274<i\0376=G\275\325\274\355l\001=\177\342\235\2701\2622\273c\304>\275\247b\224<L\350T\275\275\345\002\271T[\220\275!1C\275\005\347\234= \'\034\274\306\025\311<e\020\253\274\377\221\t=\001\327m\274\025\330\026\275\216\020\031\275\366\247\362;X\227\\=\243_\340\274\rb.=^\305\264\274\347\020\320=\351\231\213\274\366\374\246\275\216y\036=\270J\250;\331\020\021=}\177\027\275\233$\025\273\270\203 \275\234\017\n=\315\035c=\205]:\275+\367s\274-\236\233\275\2138>;\216\310\303<x9\016;\022\361\316\274\375\255a\272f\246\331\274\317\321%=\315\236\262\274\341\365\266=\337\230|;Q\310\307\274\354A\212=O\303\204\275$0&\274\365\247\316\274R\304\207\273\213\235n=)Y}<\3308\220\275\252\250\240\274\346w\305\272MSV\275\235\366\000<R\374z\274[y9\275\024\026#\275DV\027<As\201<n\324*\274\215|\033<\250\016\236\275Z\1773\274k\205\246<pb\276;&\275S\2751\266(\275IE\366\274\016x\177\274\356\314\025\275\376l\210\275\010c \275)0k\275yKU\274QC\227;\346@\224<\352\304\227\273C\016R=\032KG\274l\340\206;t r\273\373}\203<\351\005\301\274}\307<=\035V\357=J\362r\274an\245<u\321\032\274#\376E=k\253\205=\027l\n\274\247\020r\275\364J\376\273\363\350%<G45\275\201\247\314\273O3\251=\302\271t=\370\013\206\2758\037\332\275\3102I=\260+\035=\270\351\216;\307\312\214=\376\256\201<\t\354\"<j\357\243<x\265\003\275x\326#\275\313oZ= \232\237=i\335\261<\342^\'\275;\350\217\273\316W\020\271O5h=\275u\371\273`-Q\275\240\005\036\275Bs?\274\235\214,\275\013\006\n\276\307\345\027=\261\353J\275\327\205;=\3651\354\274\201$ =\3618\t=\360\311\303\274\013\2561==[ \274\256\334;\275\332\376\245=\307\347\266\275\tL\204\274\206/\013=\n\347\301\274\023\252\242<\214\214Z=\2024\213<\272gJ\275\003\255><\242\210\271<\242\0321=\017eB=n\252\315=\254\244Z=\323\200\\\275\353b\316<\325\n\026=Ns\324<\346*V=b8\031\275\024$G\275\036g\341\274\205n\262=\376[\036=v\256\033=\350,X<J\342?\275\214\344\235\273\2166#=\273}k<\247\004\250;.\375\205\275\323*\375\273Z\364\017\276\311\376\217\274H\317\206\275\301\215\207\275\026\250V<\220\001\245=^S\201\274)}\255\275\324\376~\275\\\342\214\274+\3340={\244\306;~\234l\274\031\252\366\274\310\341\374\274$\017\207\275V\203\252;\224\267\315<4;\261\273i5W<\335b\006=tls\275\376H\005<h(\213=\361q\365\272 \376\303\273\373Cb\274\354}U\275o\211\371<\330\0016\275S\374\311\274\t\235\211=\346}\014\274\371_1\275\216\377\227\274n7\234\274\344/E\275.\274\327\273A/\204<\370&\341<\276!\010\273U\354+\274)\353M=\350\341\030=\246\340\t\275\331\306\236<1+\230\274p\351H\274\025\242\n\274\243B\002\275r\216O\274f{\207\274\021\352\200\275\3336G\275\276\376\222=$\022\204=\222\311\004\275&F\202\275E\002j=\211c9\275T;\272;\307i\016\271\0057\240<\261e\271\275%\322\210;u<\264<\237\021\343\274#\025&=\227\222\020\275(\023O\275d\231\307<\'\262\351<\023xj=\300+G<\223\245\255\275O\223:<C\330\026=-\355\031\275\232\214\237\274\034\346\303;R5y<\336\263\310<e\225\346=\316\024\227;@\267\010=l`\345;\310n\235\274j\036\223<#\306\351\273[\236n=\204\034\234<\335\353c\275\261\230\230\275\005\274\370<\275\3579\274\036\363\027\275cm\246=\200k\217\275\357\352g\274\345\361\n=\201\345)\275*\260\252\275\257\326\334:4}\227=\357\347\203\275\3507\n\275\006PT\275\335\240|\275\200\352\340\273OQ8\274}\345R<\n\251^\275\360\027\222<\310\r[=\344\025\247\274j\024\335\272\302#Q<\347\343\212\275\257f\222<J\"@\274\277\346(\275\274\212L\274\n\320\235=\253^L;\370uz\275m:\224;\354$\264<p\361\r:O\nr<\226\267H\274F\276\007=\330\266V\273\315&\r=\252\362\331<h\247\033\274\312\275~\271\355\325\r\275\355\024 <\320\306\214<\003\274\n\275\335\223\232\274\027\260\n\272UT;\2752\237\024\275\212\334\354\273\007\013Q<\375e\302\274B\322\337\274\\H\004\275\001^P\2746\037\201<\037\037t<\304@\222\275.Z\330\274\336N\007\273\321\010u\274\347\036X=|\365x=r\r\005\27538;\273yM!=\014W;<kj?\274p)\360<\377FH=&\2130=$\275\234<\000I$\275[%K=\034\356b<\252\216\225=\220\216\213\274\223\005\024=\306\336\000<W\222\257=\265I\212\275\013\324\031=\336\016\303<\272\204\032\273\314\211+=\223\271\002\275\203l\214\274\364\024(=\237Y\305\274\262\177\375<\254\027\020\275\300\303\000\275\213\254\010;,D\205<{.\246\2738\316%<Q5\206\275\237z\r\274\274\203Y\274c\266H=\336\201\003<\031\364[\2752G&\274\027\315\307\274\300;W\275\0364a\274\321\236\220=\316\330\020<N\221\367\275\231\306\236=\032\226\005\270p\022S;h`Y\274\033\024\302\273!\272\274<\340z\036=u\346\325;\373\256\254<p\230\037\275\363\201\200=Z=\323<\336Y\300<\213\243\346<\23074<\214e\010\276\035\355g=4\334\t\273#w\303\274\346g3\274\336p\326<)\357\026\275\227\202l=r\220\266\275Y\324\301\274*\367\323<\230&P\275\361\376\005=K\220\262=\257\251\267\274\231[-=\377l\211\274\211\212w<\250h\347=\3579,\274\343\021\350<\243,-\275\224_=\275\325\220\026={\320Q\274\304\220\373\274\245\300\204<\237k\241<\273\360\364;\222\3150=r\302\010\273\333sh\275<\373(\275n\306\234\275\334B\030\275\203\001\346<\363\326\036=\3262\274\275C0\251<\2633e\275v]\311<\266\'\016<\254&/=W\266\230\273\'^?=B\356/\273!\330\267\272\214\023\377<{\321@=\373\314\033=\30662=\260\032\225=\222 @\273$D\201\2753\304\005;\031\267\355;\364cS=i\202\033=\226\216\252;\026\2117<\354\250\371<I\366\210\271y\330#\274\221[\257=\215\330>\275\332+\274\275\372?\205\273\321T\240<\370r\323<\014\210e=R\"%\275\363\377(\275\003\325N\274\235k\004<\272\354\337<\313N\323\274\303\361\256=O\337\021:_7{\275.\376\027\275\006\357\200;B]]=N\214I\275\321\237Y\275\311\230\220\274\236\232[\275x\025\026<\343^\001=B\350\276\273\225d\233\274F5\206;.\344\215:\010\260\220=\221;]\275xva=\261\352\306<\036\013\005=\270<\346<\363\310\260=\216{\017\275\023\347K\273\203\3558\275\370|<\274(\237\350\274\271*\027=F\215\t\275\315\351\014\275\260v\336<\352F!>\374\271\036=J\020\330<\213\017\022:?EN;\353\013[\274\340u\213\275\242i\315<\213^?<lR*\275o9\007=\356\320\004\275\275F\277\273\264\227\001\274\301\003\237\275\247#\242\275(\016\323\2734\206\351\274\214\031\231\274&\210=\275\337O%\2723\342\277\274\2178\241=\002\250<=\017U\034\275]\360\250\275iP-\275_\350\243=\335\005\246=9\2643\275\327(#\275m\241\206=b\005\320\275\310mc\275G\013j\275\035\246\373<\021`\301;\204\035X=\216\333P\275\247~p<\352\014!=\344\275\022<z\344\277\275\013\2668\274\375Y\223\274s\240\201\275\222\241u\272\305*1\275\250}\014\275\363\204\341=\255\2534<y\325\344<\022\252Y=\r?d\275\302/1\274(_\034<d\370\264\274\355\346\361\272\336\344P\275|S\305<$A\264<f\377P\274\204[6=\311\215\207<^Q\006=T\213;;mP0\273$\246%=\'\024\330\275\371\344\021\275\177\2464\275\022\371\034\275f&\336=\221\r\222=G\225\347;Kx\337\274\353P\202\273j\225\037\275KQE=\005@)\275F\024\023\275\306\214\321<z\213\212=h\363\004\274x/\271<l\031\030=\373\242f\274\214\374@<\177\025{={\234\243\275l=;\272\036P%\2744x\003\275\023n\205\275BI\025=D\257\250=\021g\314\275\331\'\350<T\010\355;[\232\2229\211\234\226\275\225-\213\273\375A\231\272\014\322\356<D\222\346<\212S\372\274A\322\347\274\3028\013\274\2757\203\2743 7\275\241\262V\275[\017\035;\001\321O=\272&\321=\255x\347\274\243\335n\274\200K\022\275u\321Q<\270\206-\274\021\243\306=\357\257Q\275S\232F=R\334\3507\200f\247\274\311\034\351<\274;\343<\005sI=\241e+=Q\2535=$_\274\274\013\261\226=<\371\243\275\250]\010;(\340i\274\211e\017=\002o\245<G\253\355\274mSn\274\256ah\275\255\223\206\275&\242]<-x\001\275\356\213\020<\324\263\025\275\222=\025\275\376N\243:%\215\345\273\371\264_\275\r\024v\275\364\224\212\273\262\206^\275\030\3019=t\301^\274IJI=\376N\306<\306t\t=\271\251\210<`\373\365\2748\0148\273|\226?=\t\252 \274n\232*=]\277\227=$O\257\274\223\354W;\004\231\221\274\007\016\031:2\371\257<<\334\027;\255(&\275\007+\010\274l3\026<\177\214x\270\027\026\213;\315\\+=\311\345\316\275<\3724\273a\204v=\220\305c=t\213<\274\030O\t\275\201\023\315\274\220~m\275\230\312\213:\365\204\254<\023;\026\275mMt=\353\274{\275\246\214\247\274\276\327\223\2753\256*\272\000\301\234=V\252y\274_\031\206\275\034\025\334\274\370\227\357=\241\337&=\236\257\361\2754\3563=C\264\025\273\210\324\235<\340\202\256=\340\232\312\274\035$\245<\213\375\202\275k\031\361;\375\010\362\272\243\0330<\270\364\002\275>\r\214=\222\010\320\274\335\253\006<\031\'G\275\300r\003\274B\277\336<\010\320\356<\330\275\202<E\222\371\273\000\231!\275wR\222\275\r\3440=\\H\020=y\221\345;\344\322\352<\337K\t\272\237\035\271\274\230\245\373\2746\014\205;\034\317\200\274+\"2=\300\236q<\205\315\2579y\227\234\2743\357\027;w\274q\272\014u\307\274S!\240=K\350\005=\323\235\200=e\201\355\274q+E=\364\231t=\323\210\037:i2\320<\307\314+\274I/\300;\332\272W\274\035\000\"\275g\222\275\274\274k\205<\314\215\033\274l#)=\252\3672= \3466\274\265\256_<\340\nP=7\rR\274\340\233\203\274\250\244\220\274i P=\220\267\226=Q\257m\275\tLt\275\007\2423\273\235I\026=W\230\350\272\035x\314\273\340\214\017\275^p\230\2757\266\330\274\353=\371\275\347\326\215\275\254Sm<\023\001b=\225\001V\275\265\333n<Tc\232\274\000\362\257<N\344\232<\213\007{=\'\245w;\336\365&\275\t\304\230=O\316\014\275\353\254\254\272\204\366\242=\330)\010=\363J,\275\370D \275<\377\026<\232Xn=5\304{\274\002\262\374\274J\252[<\266\315\311:>E9=\253\365\251;\251\210\303\2749T?\274\262\367\204\275{u\017\275\3342\340\274F\223\340<\245s\223<\314 \306\274x\t\"=\243\004\310;EU\321\274`s\232\275\350\347\017\275\246\337a\274\177c\022=-\023\354<\036\347\273\275]\235a\274\215\370\361=Z\334\232=t\335\242\275\253\003@\275\216I\335<ip\004\275\014v\230\274\315=\010;\227\313\210\274\207\223\244\275\325\323\213=\257R\013:\236\026\035=\276\214X=\321>U\275\350^\210=\265\311\007\275\231S?\274\021?m\274\013\205@\275i\376_\273o\327\246=\365[!\275\333Uq\2752&+\274\351\363\037\273\252\363\204=ev\360\274\354\225\231\275\021b3\275\017\230@\274\r\252G<\325\241\016=\302\032K=\336\300\003\275\253\276\212\275?\202\264<\271J\367\275\312\360\370<\237\365\247\275\356\313\370;\016H\244\275\314O\326\274LI\r=s\320\233\275\014\372\t<\023\3534\275\344T\335\275\357\222/\274\240\236\263=\320;\270=z\222\007;\010v\326<Fg\204\274~\316\226=\373\223k=\375\355\206<<\003\300;\306\300\204\274R}\377<\271#-\274\021\310\273\275\271b0\274\221y&\275\017\215\037<\210\350V\274\363q\273\273\240\354=\274\334\231\230;\375=\025<\227I\217=\355B\000=\3372\251\273^d\377\274=\351\027=P\000\230<\\\371\020\275^\367L<\247\246\200=\305\303\201\275\243\363\226;\254\253r\274%\312\261\274\204\177o\274\333x#\275\270kw=\225!\201<\027\261s\275\007\326\331\273Am)<\rU\\\275z\303y=\204\334\255<B\331x=\351!\360<\031\330\236\275\327W\233:\027\224\247\273\313B\304\274s\214\310\274\014\310,\275\254\251\206=\365<\035\273\266nZ;Z\326\260\274G\373J<g.\337<G23=\206\300r\275s.\001\275C\220|\275O\023\207\275\355>w<\312t\037\275\312\337\305<!\020\002\275\036\t\025\275PC\020\275#\033\016\275\305z\276\274\203`\334;O\277g\275,yx\274\n\242\337\274\210:\221\273\004\227\240=\260\363\203=\271SR<\2172\016\275\335\261\213\275\301C\213=l\362.=c\314.=\267\265\217;^Be\275\275iH;\353\027\202;D/J=\322\nL<i\211\001;cN\336<\370\211_\275\327\311\214\274\024\007\235=\332\001\221\275\346\266V=v8\330<7\202\270\275\2347K\275\020\177f\274+\210\255\274\365\256.<\023\337\367<\024\201\200\275\373A\001\275\350\210\020\275\177\021\031=3\221\226=\375H\247\275\325\030\311\274\371W\005\275\376u\016=\320@x\273\255`\220\275\364\200\272=\003\254\325<\003\335\277<Rn$=`\332\227\274>\250m\274z\207M<;\231\216\275\245\361\331\274\346\254\\=\241\361\007\275\"\364\237=\366\250+\275_\376\325<\016\255~\275\260\006W\275\334\t\230=\206\204\006\275\346Dl\274\207\035Y=\n\316\205=\212\215\222=\025\205\302<\326+\332<\340\340\032=a\331\002\275}q\027=q\360\037=O\320a\274/\314\n\275\240V\034<\177\250\201\274\010`\373<\207\034\335\275\302\243\007\275@\305\222\274\001\216:=\204s\006=\351\373\377\274\254\300\037\275\317\3221\274\"\207\032=\352\266\332<\200\204Z\274/\324b\275\250/\215<B\327\337=?\027\331<\001\320\265<\317\261\217=\362\335:\275\3742%<f\354\034\275G\303\t=j\344\204\275n\r\256\275\247\315\202\275\377\257\336\274\247T[\275~\001j\273\352\225\263<F\214\202\273\016\262q=R\277A\275\204:\205;\353s{\274\177,\014;\375\235\332;\374\241F\274\036\217\270\273k\256W\274\377/G<\r\340\205\274\3612\332=\034\317}\275\353#>\275\250\302\211\275\345\0177\275>\370\241\274B\275\006=\0071r=\225\202\213=\264\343,\275go\202\274\346z\252<P\032v\27593k\274Y\262e\275\321a\236\274p\263v\274\305l^\274\367\204\274\274\317\335g\274j<\347\274\365\302\344;e \020\275\002\227\245\274\035\311F\273\021@\361\274\000O<=\304>\023\274\253Z2\275^\031A=\272\336\246\274z\006N\2752\013\275<\330\215\334\273n\\q=\201\nl;\227\235S\274\253\002\251<\346\360==\035\263\233=\033\213\266\274[S\206=+\004A\2754\350\335<\312~\256\274\243\343\327\275]L\200=\323\2365<+7\351<\023\216R\275\305\312\\<\345\030\203\274w\r\002\275d\211\032;\026\313F\275\"p.=Gry\272WcK=\211d\235\275\017\260\273<}\211k;{:\321<7t\303<\336\207><\250\221\273:\243\367\227\274#\257L\274]\201\267\2741\220J;v\r\274<\325\321\366=R\206\246:\224\263\006\275\241\010Y<]\322\240=8\251\227<\037\231\250\274\260\312\247\273\016\255\024\274\211\305\"\274\323r.\274i\316Y\274W\3149\274\2760\246=\227\340\032\275\026\312M<\304\236\324=\241\212\034=S\310\014\273\013\231V=\007:\376\274\252\242i=\031\207G\274\247\216\035\275-\360\3429\036\361\342<\267\342e=\251P\314\274uJ==?7D\274U?b\275}?\341\274\345\215\230<\255\"\245\275\251\023\226=\371\020\014=\001\232\016\275\276\345\202=`\025\227\275\206\210\334\274\005\353\022<1\316\346\274\213f&\275V\226\254\275\345\273\314=\016\004\315\272\032\345\035\275\271\t\304\274\226\210|\275E\322\364<\324\026(\275(\317\004\275\203\316]\275\207V\311=V;\271:2\220\272=\242\323Y\275.\344\030\275\344\014j\274\263\';\275\266\340\224\275\032\243\206=\227\345#=b\307;\275\371j\217\274\255\320v\275\312\215?=\014wY=\3251\203\275\300\270$\275\244\311\277=\253G&=xX-<\022\210\357\274f~\030\275\035\357O\275\366h\305\273OW\252<\351]\034=\r\342\207=N^(=\300h\244\275\375XS=\310&/\275$\270>\275\307h\250;a\343\"=\276\267k=\221k\3339@W\002=\331M\241<[\311\266\273<\233k\275\001\264\241<\000H\327\272q`\032\275%~\334;\241\337b\275\235[.\275?\220\220\275\027\001,\275\204\320\320<h\242c\274\252\263\236\274\356\035\311<J\010\336\273x\273(\275\331\267\232\275{\347\006\275,Jp\274\207M\374;``\226\273\014\225\355;z?\222\274R\373\027<\265`x\275\034\031\020\275\316\016\\\273i\355\337\274r\275\247<\267\233S;\351\244\222\275\342\260=<n\307\027\275\237a\237<bm@\275\324\027;=\346\230Z=\251W\305\272f\313d<\314\026\221\273V\037\266=\234\257\205=V\361.\275@Y\272<T>\214=\030\261\211\275:~w=\0339\305=\367\326\216=xT\024\273R\003\222\273\352\036\222\275\006\254\266<\357}\347\275w\330b9\211s\026<\202P\215=\206\271q=\254\361\202\275\321\376$<\361d\223\275\227^\023=\216 \317=\200\303t<\250\334\370\273\321l^=\250\211\310\275\315\256/\275>\215\263<\3231\210=\327\254[\274`2\200=\317\350\025\275\347\366\220<\"\t\214\274\345\010\264<\372\322==H\n\251;1i\246\274\314\031\230=\317\371\226\275\226\331\305<7\311\323\273N\321\205\275\313\204{\275\254f\321\274\335\210\032<Ty\n>\022\276\355<\267\321\337\274#\305V<\323\332\333\274\017Bg=\325\000.\274\267\237\240<\250\215\354<\032i\203\275\250\362\007\275\336\002\206\275*R?\275.\370\234=\266\263\346\274\275+\202<\245\377\372\274@\3251\274\034\331h\274\364z\363\275j\262\021\2747\0220\2745\335\000=\244\207\241<8\354\373\274\326\304\025<\377h\305\274\304C\324<;6\343\273\215X\177\275\354g\000\275\214\226S\275\235}`\274\254P==z^\022\273\310\272i=\330):;\233P\376\272\375\030]=\316\034y\275\271ag\275\304\212\321<a\332\030<\324W\257\273\372\365O<\027\243\002\275\330\231t\273\\M;<\231\034\206\274\264\242\202<\0262\363\273)R\261;O\205N\275\0211\253<\'\022H\275\331-\243\275d\223\252\274\225\026\372<\273\205\234<2\376w\274F\272\026\274\253\024\243\275\0038[=\033Tj=\374\351\311<b:\326<\274\335\217<\227\205\310\275{\362<\273a\265Q\274Y\220\255\275:\327\014\275\013#!=:\027\336\273\030\333\262\274\300C\306<\2351N\275\256\026\001<@\270\3569\034\251\325<(\035\220<\005\207\347;(2\255\275\232L\212;\001\342\\\275\316\036\231\275\347sT<\275i\013<\256\t\007=c\326\237;\237/\201=\0030\344\274\355\343\256:s[ <\263\213\323<\247\027d\274\242\324\201<\357\n\353=\336\221\247<\0266\205\274\246\210\314\275\361<\216;\261\333\n\275\241\226\235\273~Z\027\275[\013;\275\033B\325;\'\2556\275\010\374\205;\326\'p=\245\020G=\330\027\317\273E\033j=\232k\333;\235\225\232\274\224\033\237=_\237]<\374\005\250=\205d;<\000-O\274\246Z3;\241\203\021=\240P\244\275\242\233p<n\023 \275\333\347:=LO\271<\263\222\020\275\206n\350\274\327;\004=X\2708<L3\312\274\004\362\374\274B\253\200=\010\360\264<\325G}\275\307\301K=P\275\"\275\244\367\356<\222\001\314\275\035?}=\346\246\341<6\"\232<\013\2377\275*3\376\273g@\263\275\314y\"\274\225xH=\2406d;\236\200\343\274\251\007L\272\301\216\231\274\273\306\204=2\351\212\2749\230\227<\341\260\024=\377\240C\274\347\362\010<\230I\024<\373p\220\273\323%\030=|\027J=Q$`;t\377>\273;G\234=\223\340\314\274<\317\267;\300\265\002\276\234\277\245<\005\231\271\273\211f\005=\260\230S=\341\273l<\202{(;\237\231D\273\2769Q\275\230\264&\272\215\212\245<c\374\204=\206\236\212\272li\200=5\352\270=\0357c<\337ou<_E\r\275\2476.=\256\316c<\317\274B=\233\210B\274?\266\261=]\243\262<C}\235=\266\247\234=\026d\032\274,\000E\275q\"O\275i\245J\275kwU=M\t\237\274\344\303\317\274M\265\t=\225\211\026=q8\001=A-N=7MT<u?\314<\244\245\201=\266y\201\274G\201\217;\326\254\327<%8\023=p\323\245<\211\220\277<O@6<\235\315\327\273\321\230\255\274\377_\021=\212\341\311<\211\000\305<#iI\275\213\322\220<\321$\r=\335L\027\275\275#j=N\360\261\275`r\361\271\020R\212\274m\303e=6\327\035\275\2152\251\274s\271`\274\257\310\235\273\265\227\202<t\356\203=\'\350b=\350]\227<A\021\023=i\250I\275\305\211\337<\223\226\235=\356*\307\273\026\r\031:$7\207\275\333\275\017\275o\014\r=\270(k\274Z\320\025\275\316pG=\334\354\267\275\3208\206;\2140\363;\317\370\023<\343 \224\275\345\316P;~\202\203<\272\364r<\021:1\275\200\224h=\353\210|=\220\334\340<%)\322<\001\265\375\273\004\365\323=\3451\231<\226>\331<\204\205D=\212r\236\275\210\201\030=\200\tb=N\363\234\275M\'-\275\316r\205<t\313\301<\\%\022\275\212\222\223;j\211\325<\261\305O=\000\270\362\274Dl\320<%kY\275\316\262n\275\016\324\246=\221\030}<y\240\037=/\233%=\366=#\275o\231\302<`\307.\2750\272\374;p\375\200=u\030y\275\273O\230=\014\261\214\275\365(\375\273v\372\353<1\033\363\274P\364\341:\204\320K\275\262\257\344<\203\201M\275\332\202q:r\313M<\3608\017=\r\037\341<!\316~\273\372\001U<\361P\"\275\233\\\272;\036v\003\275\005O\235\274\272\270\222=\034\245&\275\361j/\275\326\177\244=<\3302\275v3\220\274\201F><^\203-<\305,\374<\327Z\017=\230 \356\275\371m*=\313\357\222\274\267e\032\275\177L\207\274/\016\007;\260d\304;\214\343\216=\323\214\264\274\356\303\001\275\264D,\27591N<\247\367U\274\273\226\215:J\326F\275g\342\226\275\026\305\254=\352\226 \274\207_1\274\205Z\264<\033\347\275\273\324\331T\274\245\356i\273~\276\246:\020\022\203=0\256\261\274\277Q\177=\tC\211\271bX\320:/\250\367\273\213\274\241<\270\033\223\275*K?\274Gz\207=\234\2613=}\345\207\274\3649\302<\3339Q<:w\241\275\203x\330=Q\027\203\274@$\344\274\361\337\236=\364\371 <\324[\r\275\031hA<\241\350c==\311\347<\3354\267\273;\327>\273\032\205\305\274K\030h\275\244\346\n\273\207\304\\\274/\204K=\361S\301\275\302\346\232<\221\020G=\221p\323\273\001\021\244<\2276\030\273\2627\334\274T\375\354<R\235E<.\350\010<\330\327>=\307\311\346\275\355\273O\274\315\250K\274\3223\246=\336f\313<\222~\271\275Qe\207<+\254S\275\262M\303<\244\227\007=\'\255\255;\316\021\233=\207y\345=\356\004\221<\234\230==|\217\034=\010\242n\274\211\271\017\273Q\272\246\275\224\336\216\274\273\252k<9\217\022:\337\213@\273\261\361\331;/\367\351\274F\314\334\274_>,\275\207\177\002\273%S/\275\\/\213<\222L\317<e\226\272\275\237\025\334<\3330\033=\035D\362<:\263\244<Z\226\237\275\364\341\332\274\001\322a\272(z\245\274\367D\t\275M\361\336=\225\306\025=\t>\214<i=B\2759\327s\275^\204\251<\362\314\\=\276v\216\275\375\271\354;`\245\026\275\240\377\302\274\325\300Z\275Wd\262\274N\201\020\275\2107J=z\317\247;\260\336\251\274\245|\007<\210n/\275\021\221\263=\350\372\352<\212 ;\275r:V\274\275\261\327=`;\306\274\016\347)=\332[&=\262\016\224<\\\374-\272\343Y.\275gN\312=\337q\221=\350\'\026=\313\001P=\254\342G=\363\257\237<\377\235(\275\017\003\004\275\304\364,\275\364\331\216;\316\324y\273\353\234|<\247\247l\274\366\3201\275O]\236\274\013\014S=\242/\004=$\366\022\275\264\2653\274\237:\276\275\033Q\226\273-\376~=_\204E\275\323\302 \274b+/=\365~X=\310\300\366\273\02524\275\252&\023\274[f==\"\264\317\273\366~o=\223\225\203\274I\275&\2757\246;=\240h\314\273\330K\210=f\270\001=3\007\205\275h\210\232\275\236\363^=\371\237\231\275/.\246\275\037\026\271;(^\262<\256n\204\274E\tV=$\256\234<\223\243U\275i\277\343\274L\342i\274\346OF=C}\371<\001\'\304\273\033{)<\3212\276;\222\001\026\275\177\335\363\2730\236\344\274>\013d\274\227\345\367\274\251\364\017=\323H\227\275\3063\206;\373\262!=j\326\304<+\021u\275H\032\327<\270W(\275UA\310<\0007F\274{\260\007=.\r\265=\230*\204:{\254\210=\370\010\365\274\034\271\001=y\022(<\243d;=\005\263F=\017y\377<j\217}\2756\321\205=\303\271\226<\312\"\302=\337+\212\275\204]\177<\226\022s\275X\033W=\251\323\035\275wEJ=\330&3\274H\216\304\275\217N\251<\340\325~;[\355\245\274\252\330g\275G\202\260\275\336\245\275=\262f\366\274h\307\260\274\267F\272<r\037A<vs\227\274\\\300\210=lm\236\274\204\203k\275\251\003\303\274\245\310+\273X\030\237<\236\013\245\274\000\030H\275\371\300\363<\262\003\232\274\201K:\275\373\245\271<\013\214M\275\207\006\333<j\231\037\275\263I\177<\242rh;\357\266\376\270\334\034\017\275\371V\250=\277\"\230=\016\324\"<~@X=\374;\250=7\301\323=~\337D\275\327\321,=\367;\306<S\371\355=R\305E\274\251U\203<,\220\274\275\314b\036=\017:c\273,M\340\274/\260\226=\003\334\002\2757X\213\275\005\373\303=\267\316\027\275\317\343\031\275\241\3332\274\215qm\274\340*m=\314\021e<\352:\237\273\233\240l<\215\306\026\2741\316\002==\371\000\275\236\237\355<\355.i=u\216\036\275\271c\234=\265`1\271\240\021\014\275\316<\223\274V\037B=\337\037\211\274D\226S=A\020.\275\356x\005;\005+\022<\001\233\177<\220\352\212=\004\300\207=Y\262\374\275\205\177M=Im\t=\334R[\275\2117\325\274\317C\371\274\2661f=\016\223\315\274\032R\216;\275\355\311<p\341\007\275\274Y!=\335\255q=HKX\273\252`\020\274\312\326+\273dXS\275\316\323-;\004\355\"<\235f5=\236I\224<\224_4=\266\376\263=_I\276\275\220WI\274\307R\236\275\344\227x\275\3524\303<<\310\326<\372\205c\275\267\364\305\274\323\235%=\362E\016=\324\254\243\274\000\023\201;\336\237\036=\002\nO=9\322\007\274<\274E\274\237+\271:\332^\352\273\216sT<\324\320\013=\303D\224=\345k\t\275K\361\024\275\t\\\345<\305\215\347:\306\022\312<\2254\211\275\030\251\032=R!c\275\305\335{:\017:X<\275`\202<\342h\245;\331\340#<\241\207\236=\366\306\307<\272\242H\275E\314{=m\346\r\275)\201`\274/%\216\274\376lV<\225eQ\275\2011^=\2424\030\274\371\3665=\345z\342<\373\332\020=\271u\347;f\230\305\274}\n\200\274<\300\272\275\314\377S=\241M\200<E\235\220=\227\245%=\376\0066;73V<\321\035\313\274\263_\034=j\206~\274\263!\213\273\022\207 =\316H\355\274\3469\242<\310\027e\275\026U\"=#\354x=\'u\223=\255|\035=\310\033\212\2755\007\233\275\203\031\001\276\0228\331\274\256\374K\275\226\343\216=\231yb=\370\365\032=\340\023N\275X2v\274\\R\220\275/\036U\275\264k}=!A\022\274-\255_\273\352Z\021=-\026\274=\341\013\036;?\031\362:Is\002\275\230G\000<^Oo=\221|\302\274\017r\214\275pTP=\243\310\220\274\'nP\274s\237\345\272\373\321\007=\021\204@=\027Ge=p\002i=F\033\320\275\020G\211\275\366\\M<\034\226\364<&\336\024\275\260\267\252\274\0226\037=+R\207\274\317X\214\274\337\270\000\273\035~\261<\337_\024=N\253\212\273A-\027\274\237\3027\275f\203\262\274\232\035\n\274\354\332\22089\321\261<3\363a=\315^\302=\220\326!<\364\314-=\0377<:?\351\211=4\266x\2750m<\275\312\377\025\275\333I\030<\267^\003=\037i\303\275\262\277%=\316?\247\275\037u\370\273\006\210\253\274l\001(\275M~\214\274\245R\254\274/gm=\017\342F\275T\234H\275\236\300\016=\010\2652\275\324I\232\275\016\336J\274\372[\377\274S\305\330<\035\016]=#\014\177<\"\216\352\274^?\326<\016\323\313\275L\251\016<W\234\201=\225\031\207;\234\000h;m\205\366<\326\013V=\270#\361<\020\341\271=\370\027\033\274\206/\022=S\013\017\273l\370p=I=\221\275xx\307\274\324@+=\214~\210\274\2718C\274P\342\034:\r\336\270\275\3655\364;G\360\231\273\303\017T\275iPV=\016\311^=\242\227\006=S\310G\275\373\252w<\014cw=\311\241\201\275`o\010\275z\255.\274\254\305q=\363K\247=hG\\=\332\351G;\007\325\031\274\004\300v\274\272\330\252<\033C\360=\352\273_<\310\253\017=\261\223V\275\203g\033;/I\311\275a\007\020=\307N\347\274+\010\033<_i+\273g\213\202<u\005\342\275f9\211=\272\304\254;\234\350C<\215_{9\000\223\002=\001\265\010:_\361\025\275\316\264m\274<\226\375\274\312N\231=,k&\275\014 \332\274\006G\'\275\200DM<\227\003\036=\0169\354<\314\256\275\266(\004\036\274\006\260\027\274\232\006\035=\266\357\026=s\221\234\275(\r\r<\372D\237<\371\201[\275\334\201\2569\376\t.\275\250h#=\265C\n=\354\031K\275\303\3505=\273,\216\275#\213O\274\277N\272\275\203\354\206\275\333!\214\274\020\300a\275z\343\203=\206\235\342<\300\"\304\275\014m\201\274\265\2210=\323=\355<\'k\332\272\347\240\212\275\007\212E\274l \374<\356\355P\275v?\361<\364\025W;\373\260\262<C#;\273^\266C=\360.\000=\314-\322\271I:\000\275;\240k\275\310-\204\274,\304<\275;\302O\275|\317\332\274\332\027\214\274_r\362<\202\353\253;\2249\220\274l\361\"\275\340!\037\275\244\273\r=_\201\207\275\314\376\251;\237\223R\275\301\227\305<\032,\036=UrH=\255J\304<\361\307\252=\245|g=\325\232\024\275\374\214S\275\273\237F:n0m\275\316\245\025=\353\366X\274\360\276\214\274\342\314:=\007$c<\200\014}\2747\270\243=\216\265\025<|Z\234\271\347\332\001<\034\246\237=|\337\236< \222\034<^$\342<\356\350\\\274lz\370:\252\317\206=\276\253\274\273#\223.<\256Z\231=\003\251\341=\377\370\205<\027\300\273<\227\213\024\275\351N\256;6\017Y=Qk\r\275\361\253\300={I\267\275kFj<0?\301<\313\350\366\274\342O\031\2741\313\264<\257ke\275f\275t=(\007\232\275\351g>\274\220-\220\2731\037}\273\253\250h\274\"e\010\275~\275\202\275^1\302\274QK\334\274\326Vo\275\016T\213=\360\206\272\272g\206\240\275\354\246E<W\365-=\235\007\035\275\356X3=\370f\225<\371\035}=\376F\002\273\373O1\272eF\274\275\325\262\206\274\036\207\334\274\037|\315\275!\001\203\274\326%J<\307\365$=\251\360a=mo\006\273\2349g=\027\207D=\333\365\326\273&.G\275\373\322\000\275\205\016\255;7\366\250\275\3307\352;&\313\214=F\226\372;\007[\023\274cb\224\275u\230{\2739\027\272<!\233o\274\202o\214;\345\373\261\272eS|\2758\231\032\275\3766\356\273\tz^<\273G\220\275\342\332\202=_F\310\274\347\277\206;\366\277\262\274\235=#\274\340\330\216\275}\304\025\275\352\010\322\274\236:\225\275\306\037\337<D`f\275l!\203\275\2025\003\275\266M\251;\225\023\326\274\323\240\233\275\221\214\233\275\274\355\270\275? n;\324\230\325<?T\274<\203\322;\275\200)P\275\371er=\374%\377\273a\361.\274\351\036^\274\344^ =5\025\362<\004\340\255=\322\236\321\2742Ic=|\243\264\274\262\321\206\274\243w\r=1\023\215=\206\244\253\273\276\371\362<\255\256\361\274\027\037\354\274\024(\034\275\277\026H\273\257\r\247<\275C\231\275k\364g\275\016\333\353<R#\253\273\264{\302=\270\312A<\243\224)\274\247JK<\t\373\232\275\344`#=\210\325\224\274\236\3124<\345+\234\275\215\252\036\275Xh\214=\265P\236;3\360J\274\371\245^\275^\034\265\275\013B&\275\355\234\233<$\216\206\275g\371\310\275j\227\203\274\036\315\325\274[\271;\275\372\216\245\275\247N\222\274\354\241l=\317<o=~P!\275?\315\216=\322\360=\275m/\314;=\026\305\274\364\344\372\274\261\344+\275\\Rj=\270\371\344\2732\250j=t\214\007\275\324\207\211\274^\342[=\323\236d=\246\233M=\2356\222<\273MX=\270\273\223<\215p\n\275\373\032B;\343&q<\232\025\240\273\365\262\014<?\316\276;!\016\303\273\260\201,=@]\352;R\237G=\243L\251:I\265\211\274\000\206m\274\311\345\224<\2059\240\274\231\323:=\213H\320\274F\260\277;#\343\365;\271\271\206=\032\220\264;\214\205\221<\371j\000\275\003\374\010\275\245\267L=A\204\242\275)}G\275\326\232\n=\236r8;Z\361\217\273a\326\r\275\023L\357:}VI\274\262+\032\275\327_6\275VO\036=x\274 :CKS\273\262n\230\274y\337\306<:\r\204<\262\010^<m\247\010>qs =\376hG<p=P=D\350\010\276\374P\267:b\r\013\275(>\326<\020\034-=\365;s\275Bm\'\274]\276C=\337o`=\'\363\310\2753\005\037=\257x\264\271\263\336\r\275\331\0054<PI{=\200U\254;\352d^\275\332\022\354\274\243z4\2759\243H=9\212\216\274\245oe<\32095:\225\350D=\333\313\310\273f^\322\274:\023%\275\374in<\n\026\014=\226\n\233<]RZ<\032\201\211\274;\016\202\274r\377J\275\305w\227\2751\240\264;\272\021\265<\234\307\272\274\334\275\346<\215b|;\034\263\252\274\0267\330\275\003\266\244<\3157\223\274-\260-<t\020\347\274/\300`=\205.\370\274\2743\345<^\264\352\273<\254/\275\305\323$\274V\023\267\273Y\224\360\274\271\357^;Z\212\263\272\342\370\231\274a\332h\275E\331k=\022\343\343<;\201\242;\021\203\032=\347vW\274\230L\020=\303&\215\275>ed\275UU[\274\361\266\361\274\002X<\275\006\002b=\326\351\265<\331\251\344\274\036\350v=\"\277\005;u\217\225\274\337\261R<\006;\007\2759\204 \275\322Tr<i2\302\274G\226G\274G\322\241<U.O\275q\331\255\274\335\233\t=\300\227\\=\357J\"<\263c\324\273\356\t\206\275\240\274\255\273\224\242\270;\252\275\241<\236f\025\273ZD\036\275\340g\320<\021\177\247=\216\275\246<W\277\245=\215\324\211=\234\177\033=\363{\367;\257/\214=\307k\374<\253F\203\272\347\214\212<B\361]=\361\335\372\274\333\331\376\274KP\210\274o=!=\230\374\333\274\230\274i\275\314E$\274\276;\371\274\002\276O\2742I\022=Y\'\257=\352x\021\275\234\n\035\274e\177\205=\204@\022=\260\2727=\216\232\351<\t\265\222\275\255\177\014\275\204\336l\274\026\362f\2756qk=\331w\324\275\3751\235\275\025 \244\274\211\"j<GV\025\275yE\375;c\030\027=\366?\220\273\362W8\275O\026h\275F\002\350\274W\306\255\274&F\007\274*7\217;@\242\217<\355\306 \275b\311\267<\320\035\027=\2407\005\276\243\205_<\036B\331;)\251\n\275M\032\303\2731\227s=\224\246+;)\217{=\374\030\362<\331\273;\274\200mE\2754p\026=\321\317\201=3\356\372\274\277\"\241\274\234o\033<\243\2134\275o\247\257<\264\253k=\016\036\226\275\2242\255\274Y\024\371\2741\r\234\275b]R<[\027\240=\352y\345:\032\021\240=7\232<=\270\032L<O\262\010\275:`\206<\027l\261\275\235\277\003\276\351\263O=\320y2\274\214/\006;\241\3633\274A\205\356\274v\240\206\275\265L\220=\020O\013\275\374^k<\346:\250= \021\005\275u\357\255\275B\340\266=\023,\n; \026\214=\037\014U\275\320,\234\274/\220\r=KH\264\274\305^\206\274Z\375N<\362\211(\275\2735\223=A\355\277\274$kf=\350Ns=\273\200\372\273\325[g=\253\247\007<@\026\016\273\362v==\234!\274<\002\241p\274\232i\273<\210\355\223;\037\036!=\030\224\332\274\231\262\003\2746\244\202\275\276\000\227;\212\255\355\273\243\004#\275f\264\206;\241\263\227\274\346\332\362\274\353\030(=eo\010<\313`\235=) \351<\315]K=\nR]<\261l\272<\316\"5\2759+\037=\321s\r\275\017\2142\275\277\246\205= p\315<\270;\254;\364[\273\275\375`\222\275\303\351\362\275\357\344\243\275\026\'\037=\351\010e<\346e\241<\261\t\031<\334\335\325<\n\021*=\336R\037\275p\316\206=+\343\001\275\324{\303<5\"\217=\377\261?\275\324\235\366\274\334\2751<\352\356Z\275\013\354W<o\340\246=^\210\277<~\021_\275\262\336\267\274\017C\265\274\343\316\177\274%\200\245\275\336\355\206=jG\235\274\211\037\210\275Q\347\204=\351k\004=\2549/<\260*\246=\031\230=\275\213\3571=\n\023\202\275O\234&<~\207\226\2752\331\364\274\204\256\324\274.od\274\370\271d=\010\3005\275\207\302V\274\266\373\315\274\221\2124=e\023\221\274\372%\t\275\006s\'\275{\246\005=\025\034\213=\000*6\274C\004\317\274(\251O=A\256\365\273@=\251\2748\315\276\275\277\276\362\274J\341I=\206s\002\275U\000o=\242v1=\360D\365<-\370\252\274\346\372\251<\366V\327\274\307\264 \274\330ix\273.\0204\275+\273O=t\341k<:\rs\274\224\241\367<\"_\026;2v\211\274a\370.=A\236\024<[\246R=\305\274^=\230#,\275\357\264\000\275\004<b\275B-\022\275\241\006\371<\242\376\271\275\375\336I=\017\324\326<\020wA\274\004<\224=\377\335L<\344\242\275\275\014\251\345\274R\230\233\272LT\236\274:P#\274n\244\232\274\341\251\202\275\301Ya\275H\361b\275\352\203\003\275m0\n=M\037\263\274\017\234\341<_c.=\202RG=\373\317\035<\013\004\257\274P\"!\275\244[\214\274\201\323\332=\t\027\230<m\200W<\2607\353<\367\032/\275\006\205\341<[\335\n<#\324.=\275\2059\275\212\036\206=?D\253\275\203P\334;\277\274\325\275-\367?\275x\240\234=\022\0139\274\347\313\374<\360\264\303;K\250\027\275\220\322c\275C\364\217=\020\330\037=\344\302\334\274\322\337N=,\221\304</>)=\304\216\010>\271-\010;}E\016\275sP\203<x|\243\275\206\345\177\273\314\215X\274y\243\350=\373!q\274\311\333F\275\211(\022<c\257\022\275\250\332\253<\205in<L\\!=\000|\251<P|\250\275\352\014C=)\366\317<\351\227\363<\257[\033\274kSK=L\352d\273l\346\3009/l\224\274\234\322\250\275\013\017i\275\202,C\274\025$\021<\352\022>\275\213\227\r:\007\234u\274d\315\205<n\251\232\275\2676X=2/\037\275\263\370\237\273\232\032\241\274\306_\216<9Y\265\273D\273\r=t$\n\275)\235%<\236\350\253\275\024\266\250\275`/*\275^\022\001\274c\220\010=d\200\246\275\t\3002=T\251\330\274Q\336\364<aT\313\274\217\234T\274\003\007S\275>G\230\275*\211\352<\335\025;=\305z\014\275\003]Z=\341F(\274\227q`\275\256\356\360\274Z\236\205=\310\360\274<\005)f\274\034\262\276\273\\\366\'=O[K\274\252\367\235=I\275H=\363rU\275aU/\275\217\300\007=\331X\230<as\266=\230\240;\275&\356\256<\204\277O\274\022J6=Y\360z\274[4\254=\265\260\027\275@\252)\275T\202[<C\206\'\275VM\306\2753\313\366< \346\277\274L\366F\275\016\271\265<\321)~\275\272\345\270<$\246\200<\215\343\250\274\276K8=\241\212\017<\260\037r\274\016\177<=\312J\235\274\364AP=\234\264\031\275T\014\016=\347\2148=\264e\331<M\014\332<\375`n=\337\363\020<\312\003\240\274u\210\210\275\330\221\003\274b/\246\275h\350\275<\242\350$=b\262\257;e\r\352;\000\365\233;s[\350<\302\277\224\272\337\313\024=\016\371\234\275\326b\035=,\025\014=\"\322}\274|Z\014=_+!\275\003\212\313=\271\336\324;W\233\'\275a\227\272<\353\377\205=\'\024\223<\232F\322\274\333^\n\275\016P\255\275_\000.<H\002\234\275\3677\027\275O\267\225=\311v#\275DP(=t\275\317\274t?c=\033\372\022\275\251\364\250\274\375}\246=\376\026^=\305n\246\274\337l\006\275\257FO\275\306\363\\\275\307S4=\326\005{=\236\340\241\274\237\010\006>\036\325\274;I\356I\273\352A\005=K\035\340<\223\253\356\274\200\2417=LjC\275n\3573:y\332\'=T\3558=\336}\232<\211\215\031\275\006U\314=\207t`\274D\300I=\204l9<\315\"\330\274f\3010=Ja\273\273\302\262\203=\336\333\263<\301\343\317<\364a\264=\003\336\312\273\017\317\214=\225\361~\2735\254\335\275~\333J;\351\361\020=\345\310*=W\031\214=f\324%<\033\253\013=\007r[\274E\334\351=\225q\301\275>\376\350;t\252;<F\322\261\274\323H[\275\257\261A=Q2E\275\203\205\026<f\310\310<\326\321a\274\021\201\022\275 \026\266\274\200\344$<\247\226C=-\303F\275\302?\010=\004\013\247=*\337\371\274\216[_\275W\277\270; \345\360\274@\317\233=\266\314\031\275\010\326j<\202B>=Z\2416\275\254\351#\275Cd\210;\350\264Q\275_\360\271:{\003\374<;6p<|I\271;m\205\306<EJ\205=\352\205\020\275&\234\301=vB\214\2742R\304<\314%5\275P\203\\\274\267\346\013\274\371\313Q=R\253\032;d2`=u8\323<\336\200E<5\362\261<\335!C\274\0311\t\274\270\246\204=\354&M\275\235\310\253\274%-\345<J^_:\245P\232\274\322\326O\275\032|\304\275=\372\027\275\310\277\332\274K\364(=L\340\253=\2272L<\273\351e\274\266\'I<\364\257`<\202\241\247\2756\316\214<\333\002\"\275\003\3348=\2650\272\275w)\230\274\346\265O=\321d\214<\272/^<E\240\300<\361\371\304=\303v\307=`\014Q=\353\326\030\275\000\315\230\274\366\257 \275]:\003\275\033^\004=|t\304=\3466\342<}i\200<\333\363\2239zf\035\275 \204\227=\221\307\266<H,M\275\3229%=xQ\375\274\331\361\274=\005\305\377<4|/=\262&\253\274\177I\224=\333\276\307<+\031;\275\264\212\000=G\030L\275\206d\275\274\021\325\213;\244}\225<\024\334\275<\236\252*<}y\037\275\306\265\346\273MDd\270Y\233\337\274o\345\007\275\247\231H\275\333<\355\273\001q\256\274\322y\306;=\324\254\274u\017\"\273\252\235T\275=\357i\275\353\372\002<%\'\323<jKd\275\232{m\274\330_4\275y\226\346<\024\341\202=]\020G\274\307\373\260;\317\222\037<2\254\236\275nc\013\275w\337\000\275\354 Z=\254\255{\273\227\n\351\274\004qW<\357[S=\016\002\227\273\266\330@<>#\"\2747\005\251\274\240\204\002=Fm\233<\034\\\233\275\023\375p\274\325\367\261<\033\245a\275N\314\203\275,\302\310<4p\377\273;\274g<\273A\004=\250Z\201\275+\365\234\274o*\225;\264j\272=\372\343\337\273\235\352\253\274\037\311\206\274\216\337:\275T\306\r\275\222LQ\275\246w\377\273/\303\331;\247\336\212<\263\365\025<H~\300<:\246\251\275\'\207\035=\361\210\267=\326L\206<q\247\"<\302 \266\275\007\247\305\275Y\355s=\340\312\016\274\217B\007=\240\241T<V \253<[o\304<\351\362\302\273^\311\220=u\344z\275z\313\211=\237\2454\275\243\202\332\274\ro\263\274\213&A\275=^!\274\r\334\255\274n\202\234;!)\252<F\267\021\275\212K;=\301^/\274\333g\315\273\334(o\273\014\251\207\2754`#\275\341\261\217\274}\021\303<\255\020Z<\364\244\223\274\347\r\202=\002\332\027=)\242\203\274v-\351\275&\014\205\275\327\024\227<\327\347\022<\034\'[<\222\263&=\261!\\\275\341Md<\025\321a\274\37375\273\031\177W=2\007\265\274\233X\277\275\273\310\275<4\022\021\274b\275\227\274\376\340!\273\347\307\200=\207xN\273\207\034\320\2749L\214\275M\372\024\275gP\377\274 \2534\275\007\2779;\346\253y\274\036,\273\274aSV=85\376<I\216\363:\276\303o\275k\364\247\275T\003\206<\376\031\264<\323\313C<h\3716\274\020\360\221\274r\334\226<l\352\330\275YF\005\275\343\377\031=M\345\007=\024c\r=\3079r=\\\"\344\275\311\256\305\274\234p\304\275\323\215\254<\342o\327\274G\315\237=\260^;=GA\330;\256\202\237\274\177\360\262\273\301\264\036<\300w\236\274d\224H=\310\210\222<{\252\354\274\2212\205=\377\321\017=\350\203P=X\n\242<E\2014>\324B\233=\275\202\030\275\014L\335:(\317R=\205\356\224;\306\350%=\204\335<\275=\257\224\275\257\267\254=\277z\000\275\246}\233\274>r\247\275\337\204H9.\275\037\273\3021\276=\312\265j<\006\021\326;]G.<|\263\257<\224\251\033\275^9|<\327j\203==\036S=\354\367\272<k\251p\275\013\325\020\276\353\270\347<\242+\305<\215\335\304\275r\257I<\272\237\376\272\016:\227\274\0363\"\275&\222u<\374\000\223\273\201Z`<\201\206D=\277\n\274=\376k\323\274t\272K\273\034R\367<\205D\037\272\351\031\270\273m\314\356<\242\213@=\346{\023<\361\217\255\274\315\322\223\274\262\336\377\274\345\333\252<\346 @\275\347\336\253<F5\353<O\331\023=\007\216\003\2754a\205\274NC\007\275\330z#=lw@\272\027\370\237;\251\034L\274\215r\274<\363S\\=\306\024`\275.\244\031<\260\352\363\274\275\036\000=\334F\'\275\267\345\371\271\035\265\334\273v\250g<\037<\020\275\225\010\242\274\322\353M\275\312\332N=\361,>:\356|\315<?\020\305;\006V%=\222c\336\274\207\273\237\274\373\247\300<\257\205\023=\n\355\201\275\276\274\336\2743\321\234\275sq\033\275\241\026\340\274\361.\217=\353\251\300\274WT\314<\270\247v\275~\0034<:s\334<C\031\214;\263[\204<\3178\274\2747($=\013\306=\275\347\006\256:\362\205i=\214\233:<9/\216\2750\317l\274\244<L<\274\355V<YUJ\2752A\361\275\206\035 \275O\336\375\274\3174\002;-M\001\275\201\234,\275l\222`=\341\r\223=\353\272\244\275\372\342\252<pe =\363<}\275f\254\004;\351\242\200\274|j\277<\266|\210\275h\247\265\274\005\003\'\272\023n\207=\377\246\310\275\031\332D=~\255\222=F\320\247<\327\032\000\2733\312\340<\035\367\216=\027\020\244\275\212\271\010=\005\332\\\275\3669\214=\243\377\001\275F\245P\275\222\332\026\276v\331\203\2759\006?\275\266*{=\327Mh=\367\027v<]#k=_\025\257\275\335\217\354\271\224\245}<\321d\365<\226\335\035\275\223\304`\274A?\204\273s[V\275>!y=\322\233\212\275\224\315\014=\217y\002\275\3175\204\274P\254.;\210\231\356\275 \350\370\273\255\240\371\274\'\224H=\036\376\\\274\026P\233\274\202\200[<\020:@\274\0076c\272\235C\205\273e\213\017\275Q\266\202=D\314\220<\342\246\014\275c\205\033\2756_r<\227\305\347;eh\033\275D*\243\272~\216\315\274\230\252\020<\024pd=\233LX\275\334o\026=7\345*\275T\001a\275\270\007\231\273{\355\020<dJJ\275\325\331\275<\233v\213;\366&\001\275\272E~=NlL==\\\302\274\204_\357=\227\030\225=1T\273\274\216JF<\357\362\346\274\217\270\007\274@Y\030=q\001\006;C\275\021\274-u\000\274\352\260k\273]\320\370<Hs\235\274\000g\362\274\342\265|\273[\311\232\274\341\227\210\274\364\355\t\275X\004\201=\371+O;\223\347D\273ML\020<T[|<\254|\r\276\243O\005;=\320#\275\215\365\217\274-]-=\306+%=\013\267Z;xy\234<c\306\373;\004-w\274\225\317y\274\347z\353\275W\013y=v\272\275<\356\322+\275\242\202\315\275Xqf<I\"+\273\256e3=nn=<\254Q\261\274@\253\241<\203\314\365<{O\267\275A\376i\274c\247\277<\032e\232\275u~\200=k\t\210\275\301\034\216=\227\025\233\275Pv \275\ry\363\273e\331y=\n\256\344<\031\0243=\340\002\214\275\"\227\020=\276\3359\275\224\376L\275\342h]=do\234\2747*s=\215R\360\274\322|\017\275\016\221\205\274\002\317\327<\002&\020\275\352\356O\275\236\234\267=\213\204\305\274\252\232\223\275K\275g<dk\334\274\030\310\333\274#\341\242;{} =\016\200\264\2736k)<\200\243F<\351\267\306<!\225\r\275\337\252a\275\273G\226=$\226\031\275\375\013\264\274\206\022G\274\265B\361<\243\302\274\274\241Y\364;\310\033\"\274\002\241\207\274)TB\275\005j8=(\304\037=5*S=\006\314\230=\037\303\360<2r\347\273\214\240\377<\336\2723\275\326\377\262\273\034o\335\273\324T\231\274\234x\264;\207\223.\275\336\036\302\2744\250\177\274\001?\206\275\255\367\273\274z\371r\2740\304\032=K\367\230<\177\2165\274o\355\027<\323G\356<BOx={\312\022=z\002\244=,\005\246<\025\275\356\274^\224:=ySV;\244(\006=\037\306S=\240\310=\275\314\235\032\275&Y\234=6\250\220<\207\210\221<\200\316{\275G@\030\275\0074\327<AX\022\275\336\2350\275\020\354N\275\221\260\017\274(\003\356\274V7\264\273\031z#\275\031\326B<\003H\204\275H\362\014=R\351 \275\225Q\212\270C$O<N,\370<\273!\005=\303uN=\342g\003\2740\271q;\207\207\001=}\305u=@\363\035\274\377\214#\274vSd\274\367c_\275\204\317%\275&\231a\275\210\3157=f\020\346<\341\0205\272\326f\010<r \352<vf(\273hS\037=E\272g=`\315\036<d7^\275\272\005\002\276:\361\341\273\022!\214\274\233/\247<\257D\207\274`rI\274-\367\255=\372M\213;\036W\027=Y\006\242=~\273A=\2376_:\261\327$<\354\320\250\274*\337\036=\010\016\020=\271+r\275\203V\000\276!b\337\274y\215\313\274\264\013\371\274\350\177C=\035\236\320\273\017\372Y\275\321V\r\275\245\226\212\273)od<\234\346.<i~*\275*\326/\275\317\354\253\274\231\323\016:\313\343\205=9\374\247\275\017\225a<p`0<\005\226\035\274\362\211u=\224\201Q\275\rF\227=\316v\312<6\206\307=\244\261n;\'\237\356=\277\256R\275\010_\237\275\227\325j\27599\247=\243s\305\275\312\"z\274]\"\331\274\347k?\275\215`\344\274\r#H;Fa \275\316#\260:\245\010q=lG*\273I\214y\275\222]\020\275\334s\342<\261c\372\274\307\247\270<\243\372\272<[\236a\275\023\007\334;\303\371=:\212\335\216\275)p\325\274n\'I=\214\256\302\272\n\312\022=\024p\306\273\271\313\341\273\336Qm<\310\230\216\273\007S\261<OSR\275\3142\221=-\374r\275\364\342\243\275\202\300\232\2747b\234\274\"\323\340\274\241\026\356;_\307\231<>!\222;\016\355\032\274\022\270\"\273-\r.=\221\361\230\274\202!\006=\360HM=\251\"\246\275\033<\202\274\033\252\006=\r\323y=\263\340\275\2737\032q\274\237\360\333<\021\2722=\320\000\252=\375\205\211\275rv\263\273\203\023q=1\']=`?\332<?D7=\206\316\354<.\305\306\273[\264\271<$+\"<\316\373\031=I\030\003\275\231\321\035=\336\026M\273\367g\356<\340\261\205\275\355\343T=d\240\317<\330u\004=\243G\030\275\004\204\301;+\340M<\217?\361<x\277\253\275\335\253\336:N\014>=\317\033X\2741\214S=\267\214\026=\207\222o\273\332\351\206\275\n\317%=\\\202\222\275\210\213\235=..\246=\336\334D\274\037\006f=_\354\247;\374\313u=t\330\344\274\177\013\33494\221\034=j\353\027\275yv\275\273&\271\345\274k\370\216=\252\016\367\274\266\023\362<\236S\264=O\225|=\250b\206\27590\034=\301\366i\274\264\222g\275\344\331/<uO&=g\302\277\274\203\303\301\274\026%\310=0\362\362:\303\013\350\275\3646y=\231\320\267\274v\366\221;\256\316\'\274\317\007e<\357Q>\275\272T\022\275\364\356\205=\357B\021\275\233\3674\275O\022\367\274h\352\005\275\346y\301\275\214\\\222<\331P\210<\202\227;=\300\254\\\273D]f\273-h\246=\010)V=\322e0\274\247\277\265\274\367\343\231\274u\n\373\274,\204i\275\376\363|\275I\367\362\274<\325\036=i\231\367;7h\277\275\240\237\351\274\357\252\277\275\010\026\366\271\324K\247\275\345B\203=\301\255o\275\324]:\275\366\224\'=\206\217\211<\337\254\036\275\204\231p=\003\316\330\274\n\247I=\212h/=n\\\020\275\224pP<D\356\r\275\236\031\277\275\007\350\307<\206\224@=[6\227\274\262B\006<\214\014\237\274\257[\331<\022\021\013:\227\r&=\023\"G\275\362\254\234\274\231\252\027\275x\377\213;ru\007<Q\352-\274\033\214\017<\220\316\337\274\225\204\310;\226:\306<;>\274\273!\335\234\274\276j^=\325\255e<\264\325:\275\222;t\275\253\347\206\275\314%8\275\037\333B;\017\347\026\274\341(\033\2740\361\344\274\227u \276<\260%<\343d~\275-\032\222=\323f\016\275i\227\236\273|8Q\274WN\225:\324\200\370\274+\226\314\274\317A{;\302\200q\275w\332\265=\205\264\2679.~\304<B\227\003\273\340 a\275\273\226\204\274X\007\233=,\341\300\275~u\206\274\235\373j\275,\337\204<aS\277<\r|j=\033u\022\275\345\037\321\274\303\024\030\2757\302\205\275^`P\275\203\010\235=\275x\370<\222\216\265\274\177\251\230\274R\2258<\354F\230\274\303\316\240</y!\275\270\"n=@w <\351\254\244\273\013\326?=\336x\376\274\213\241\270\271\204\002Q\275\315\021/<\310\t\016=\277u\317=\371O\010\275+\363\025\275\0360\000\275\203v\214\275\031\311h<\022\273\030<S-\245<\367\225I=4\363\336=\304\277\223<\225#\337<\372\327C\275\352\005\220\274kvv\275\316\321\001=\251%e=\212_B;2\247\340:\210B\006=\272\327\375<B\0337<Y:D=\177\264/;\304;\240\274\tK\232\272L6P=u\216\272;\007<\213\275\035\320\006\275\251\371\303\272\'\200:=Q\350\007=\271\371\357<\201\275\240<\023&H=\324x\371\272\363z&<_\007\201\274a\317\236<B\231O\274\277\"\201\275\032[B\275z\332L=\007s\243\273\360\311\261=\'\030\006>\035\277=;U\\\r=\350\212\303<\235>\254=\':\n=t\262G\275\205C\274\274\367n8\274Z*b<\n\247e\2744\201\227\274a\254\024=y\240\317\274\327}K=\351\003\310\273\354S\220=\251\010e\275Y\213\225<\312\214\231=B\207\246=\376\376\216<\214\014\377\273\202\034\374\274\274\216H=\331\207f=_\327);\205\215d\274\272\025]<4\3610\275H6\316<`\275\036=\021\3240\2750\315\234=\307H\266=]\213*\273\016v\203\273zAb\274q\313\327\272d6\324\274\233*\231\274T,\317=\331j#=\027\326\303\274\025f\037=\356j\0008\227\017\006=L\300\007=\253\271$\275X,\036\2751\243\303<\243\360S\273\355\222Y\274\337\023\027\274\260\336\316;\t\275\224<\030n\254<`\266T\274\276\201\375\274\3602\317<\023\366\250\272\336\341\226<\000\303\005=\372\367\013\275\004\213\005=\224\330p<|\031s\271_{\035=3\277\213=;\374\010<?\2572=X\021\202<}\003\214<b\203M=]\254\025\275\003\256&=`\253\r\275m\355B<\214\261\354<\370\354(=\033\244\356\274\261D\030\275\360Gq\274\304\013G<\007\rK\274\"Zo<\r\257\311=\207\021\361\273\304\216\372<\260\250\226=\322J\370<\237sg<\371\220\'\275-\256\037\275\326Qm\275\217\261\254<I\257R\275\212\315\215\273\023\346\206\273\240\373\313\274t\315\031=\223n\034=M+\237<\371T\377\274[\360\213\274T\r|=\251\316\031\274\003]\373;\222\006\205=NH\370:\030\354\231\275h!\271=%\025\177\274\264u\305<\331\\\030<0\311\036<\331Q\344\273\261\361E=\240|\002\275p\312)\275v\037U=\024?o\275\222`\316<<\202S\275\336!B<}\317}\275\347k>\273YT\221=b\214\236<\026\233_<\240\277\320<\253\217\203\274\003\362\200\275\0321\\\275\265\327\021<N\240=\274:\312;\274\250\032(\275gm[=b\236\274<\202\246d\275F$\324\274G\210\270<\302y\347\274$\265\260\275\327\tX<\364e\207<\261n\206\275Xc\327:L\204\340\271\331n\256<\214\r\274\272\272b\343;EX!=V\302\337=aq\353<\2058\231\275\206\177\"\275\203k\"=\222]\237<\002KU\274b\254\020=67\221<\236u\267\274\310k\007\275\360\206\312<O*\244\275\272G\016\275\232R\253<~^\317\271^\374\030;\264\376\270<a*u=[x6=\333/\006\275z\225\351<\210\016\374\272\226\275\223=\344w\177\275Mn+=1\014\227\274\332R2=\203\006I\275\306H<\275\026wW\275\023\252\237\274\247&0\2752\2067\275\210^\001\275\265+\211=\251\022\310\274\261\367h\274\207#P\275\244]\034=:\375\326<\246 9\275E>\266\273\237\035\331\273\345\277J=\337\221T<\310\344\020\275\345M\326;4Z\335\273\361>*<\252\312\263\274\305\311\021<\033\244\035\275\000L\345=\033\212\310=\253\202\276\274sp\314\274Yg\354\273A\377\267\273\026\023\341\275,\336\273<Y\030<\275\306\260\276\274D\334t=\360\315\234=\212\303\013\275\003O\245=-~\234\274\210\362R\274\372\330\206\274\272\363\335\274f\262]\275\263g\037=*\211\325;\235\200\336<\267\312\366\274\373\243\201\274a\314\007\275\326\223\255\273HF.\274\351Q\241\272O\370\346\274`\234w\275\250lL:N\232\362\274\332\024\256<\027C\253\273\017M8=`\2312\275\234\213e=\240\350\301<W\345\362\274\264\022F\273\221\203\255<\235\004\332\275\324v\202<oz\'\273\230\340\350\275\202\265\026=\033\267\t=\232q\322\273\t#\315=r\314\240\2754O\270=2\243B=_\017\316=:\363n\275\226\245\243=\0214\261=\372s[\275\224\t\266<\217\374a\275\260\201\032=\267\277o=R\253\223=)\242|:no\004>\337\201w\273\001\357\234=\316\236x=\330iT\275\2407\311<l\263\216\275%\220\371\274cQG=s\220\334=\250\243\\<\tk\222=$\336\2139\247\360*\275U\335\020\275\031[K\275\325}V<_\320L\275\026\031\352=\236\307\311\273\210\013o\274\035\2169=(b\177=\201\\6\275\366\362\245\273\3412\373\274;\374\351<\203\322}=\004\232\026<\374/j8l\232\343;\336\353$<\205\261[\275\236\245P\275\217\257\262\273vB\025=J\361\225<\022\037\021\275\361\234\324\274\t\031\034\273\372\276\243<\024\377>=\364 \363\274\307\2304<\367Q\004=N\235\022\275\343\300C\275|SH<\232?D\274\227\260Q=\363w)=\236\240b:\245\246\304\275n(U==\224\025\275)\375O<\036\265\244=\016\255\007=%\"\343<\341\354\205\275\226hS=\0139\234:\034c\302;\353z$=}U\312<\215D.=KI!\275\325G\304\274\312\342\217=:\006\244\274\324X\261<\237Q0\274\r\356^=\013\242\206\275Q\311_=\3511\236\274\006^\276<?\345\301<\275\250\325\275N\241\030\273\003hb\275pc\007<\267\326\014\2759w\232\274\010\252\240\274\323\271\177\273SMD<\350.9\273\031\3240<\376\267\240\273\205\344\332\275\313\337\256<o\273\021=nY\013\275\375>\262\275\330)Q\274~\t\227;\314Y\022=C\257\327=\314\273\340=\221\353\226<\354\266j=\375\302\266\273`\367\263\275\211\034\370\274!\3241=r\215\032\275a5+\275Fm\t\273sO\270\274\2267]=\202\242w\274>\232\320\275\255\277\236<O\254\000\274t/\022<\256\345\276=\0276B\275\256\020{=\033Z[=\177\214\177\273^\227\213<\035\2165=Zi\214\274\2065f\275\357\0310\275\232\222\262=\013\212\356\273>\362\273;\304#\243\274f\207\'\275\202K\232\275\027\266\033=\222\206W\273%\274\362=N\t\000=\221\202\234=\3230v=m[\032\275\335\240\265\2748\300\316\274\026r\030\274\212\204\306\273\361\341S=\2041?=m\003r\275p\315\310<\335\ru\275\210*\356<\036P5;\231?\032\273\343\350\371\274\2341\217=\233F\224\275\334\000\036\273\361\347\220\274\230`\370\273\307Qx\275\373\r\n\275\353/&<\016\205\016=\033\004\'\275Ln\031=VQ3\274<\266\'\275bl\217<2\213%<\225B\t\2757l\r\274vi\275;\213\335\207=wT\353\274\362\3335\275Dv\201\274}\323G<z6\006\276\270q\312:\277k\270\274U\020\340<M\3114=\254 \377\274\263\263\214\273\333C\027=\240\224o\274\010\270\222=\206b\206=\340\233\014=\0225\201\274\320(\'\275\362\370\250=q\204\013=\342=/<Uim=s\3163\274-\365\020\274o\256)\274\373M\225=\357\311\305<\022\014\177=\305\016$;\271q\231=\301\354x;\253\025 =\362\222\265\273\236\020<=3-\206\275\002o&=\373\364\237:\322p\003\275\257\n0\274-jw=:\3052<e\314\373\274\004\030\350\273\313:l=x1\321\273\263\263\233\274A\333\020\274\010\266E<^6!\274\234\357\235==_\363;L\304\330;\tF\263\275\'\227\366\274_\030Z\275S)\220\275(\007\311=\253!\251<5\266\227=e[\037<G\242X<\264D\035\275\241\234O\273\330\353\257<\036\313\324=i\023\212<\272.\036\273\016\373^=\244y\023\2750\373\024\274&\026\310\2749j\025\275!1\226\273toF\273,\310Q<\372\325\005=\211\363\353<\377!m<7\230q<Y\204\324<\260\212\023\274\034&7\275\241T,\275a\270\263<\236\037e\274#\305\215\2759\021Y\274\177\226\211\275\177\313\360<\321n\266\275\235\331\216\275E\t\017\275F\026P\275.kU=\"\n\204=(\327\017=\357\220\223\274\322\031\232\275+d\313\274\340\345a\273m\226Z=@\n\334\274\343\001\016;3\201$\274VA\006=\254\242\033=\270+9=\276\337\036\275\260\326\310\274\234\tD\274\323>\200=nV\321\274\207hS<\005(c\275q\227\224<\364\307\032=`\207\247=\023l\213\275\235\237\275\273\213}\034=\341}\273\275\277\271\215;\364\221\317\274L\025&=Ya$\275/\364^=\304\362.<6\213\027:=u\252;f\277\246\275\320x:=\025\267\010\275\370\373\262\274\350\271\247\274l\305\225=\002\241\267<\376R\305\273X\316.\274\204\321\245:\023K\236\2757\037\345<\352.\336\273\036\177\205=\366\216X\275(\273\267\274\366\375\216\274\232\027\006\275}\032G=\250\337\213<.\\\206\2744\377\366\275\372\222\320=\014Ba\274b\205#=\2435\331<\342\344\357<\257\".\275\266\036\200=z\010\004=\373\016]\275\253b\217=Q2(<\273\3230=\2418\250=\263e}<\205\340\006=\310\312\014=\240\373\022;\026.\306\275\237\360\270;\333\0135\274\202|\275\275b\214\371<\375\303N=p\010\325;>\347\307\274\226g\225\275\330\266\030<\001\324\205<\344#\035=#\251\037\275\316\322\360=7\202c\275\367\321\001\275\2658\016\275\355\200Y\275{\237\215<\264\277!=\237v\010\275\'K\027=^\260\344\272E\375w=\370\017\215=\306\331\206<\302\013\362<\313;\255<\360\037F\275bur=*)\243\274\010\235\227\275p\235d\274\241\276U\275.\001;=\211\014\\\274\266L\\\275\375\220\252<\317\340\004\275\253Q-=)E\247<\024.c\275H%\361<8!\200\275L4r\275\006\026~\275\230A\326<\037\3775\274\006\204\223\275\n\333\214\274Gi\373<\356\361=<\002\212\227\273\231\260\265\273~\326\004\275\332\014\277=\310y\256\275\331\020\201=>\'s=\340w\035= \201\226<5\300\266\274\\\321\274\274\244G!\274\253\313o\2748\265B=\247\006\351\274+\262\007= x>\275Y\322\216\274\302\310\215<\311\010\305\275]#z<\257f\240\2741\036\245\275A\233\212\274-!/\275\204\tn\275mg\322\274-YL;\2025[\275\274\206\335;_\252\364\274\263\275\271\2750\320\265\274\347\316\251<\356G\005=\263\302:\273|\216\202<\271\3332;\006Y\277=d\032`\275\022\351\020\275&\244\010=\r0?\275\371\370\224=\224\251\262=,~@<\317\312\"<Q\265\337<\364\335c\274y\322\002\274\304j\376\275\247hV=a\365\206\274\365\276<\275~\223\352\274\245\2272\274mir<\t!\030=\255\364\022=]\265\374;\301\320\226\2739 R<\347\343\004\275\324\233\240=\254\035i\275\270\276==\331\323\330<\315\000S\275\370l\263<I\366\t\274\254\203F=g,\326\274~\"\317=x\350\200<\266\034(\274\017ic<\\%\231\274\343R\312<\r\203T\275\232\311\000\274\351\344\006\275\323\245]=\003\206\334\275\353\022\331=\305y\034=^\217=\275\250_g\275+j \275\005\377A\275\325\277k=\312\315\260=\233\356\204\275i#E=\007\303\306<\324\2142\275\002\375\227=\362\345\016\273\263\300N;Rj\314=\033\342\017\275\256\373Y:\255\3250\273\244\342\211\273\356B\001\275q\261\262\274y\037g=\027\367\330;p\207T=\014\350\247\275\344\017i\275X(\206=f\261\031=\007\005\320=\215\310\353<o 1=vn\371<\375\200\334\274qW\354\274\272\206:=\ny\315<\231\237\010\275\360\014\373<\177C\234=&\020\220\274\275\240=<\rM)<\226\213F<\014\342<=4\027C\275C8\236\275Z$\030\275\2157#=\370\302\360\271Hl;=|\377\263\273Y\205\335<2j\335\274*\3567\274.\250\032;-\252\307;\211\363\177\274yo.=\333\2410\275\330\334\217=\231\271\366\274\010:\241\275\340kx\274\313e\177=(\250\360\274D\026\010<K\263(<u\372\364;\345\0367;\362,\203=\310\272\005=4\226F=\210\243\260<\306\263\202\275\242\253o\273wRJ<:\334\202\275\2050b\274\033\326\251\273\361o\236<\231\314\212\275\276\366\364;\003q\271\275\355\002{\275\205&\363\273\375\351F:\031bL\274\374C\217<2\353\224\275;\372\200\275\275\247\350\273\005<\256\274\234\332\250\275,\243`\274\216\206d\275Jl\035=\304h\210=M\207D\275\377^\350\274=\3336\275\031\275\210\275v\330\014=\033\223U\274\320\035=\275\2507C\273\355\375\311=g0\200=a\210\304<\272\'M=7\324m<\366\344\344\273\215\010;\275=8:\275\001\227\234=8\361\034;b\314\335\274\374\321A=\367\217\316==\225\202<<k\237\275\352\210\007\272_I\266\274\024\252\336\274mI]\274\306\244$\275[\237\264=$QL\275\353=\272\274\312\376I=6\236w\274\346\214\212=\203\326W=jR:\275\227\301Y=Tu\200\275\230\300\277\274;\005\222=\345\016\277\275A\331\354\274\376\377[=\002\337\305<\253\333\224=R\214\n=\357\323Q<O)S\274\3530:\273\275F~\273\322\027S\275\275\343p\275px\261<BT\253\274\035Z\222\273\270K\235\275\314\313\200\275\334]\242=\340%\263=U-\205<7\310\302;\330\244\362\273\255(\007\274\340\001\321\275\314yr\274%\227\206\274I\342P\275Z^5\274\177\345\226<\217\022l\272\250\204\252=J\242\362<\303\265\361:\003\324\t\275\321\305S=\370L\267<\361&Q=h<L=ca\252\275\234\'\232\273\021y\025=\301\030M<?X\020\274\344{:\274l}\220\275\227\273\263\274yt\227\274;V\320\274R\255\014<\377~\334<6\326\353<W\376y\274\272\000\005=\325\305\276<|\207.\274\302]l\2745\346\204\273\370Y\372\273]\010[<\272\007|\274%\336Y\273\357\261\030\275I\000\344\273\361\376j\274\261\037E\2759\2771=E\207\201:\306\256\377;\374\251\177\275\350,\312\274\262?\202=\267\016\035\275\271\325\374\274Gvb=$\320\252\274\014\t\n=\302o~\275\241\321\025=[\213Z\274\355R\273\274\203\346\351\274\333\025z\275f?\207\274\336@\266=\261\034\';\217\223\r=:z\276\275\0052S\274;\006\013\274\215\321\237<\346\346\233\273pj|=\207\240\032=\214E\311\274f\244\316\272I\312\234;\367\247<=OZt=\233\275\026=\323\034\033;\025g\017=\350|\031=\366\274d=F\001\206\272\277\243C=_I\006\273\277T=\273\304\n\r<\2231\032;\343\231I=T\260\212\273G\347L=yc\000\274\340\2222\273\315\2268=U\317\351\274\372\315\245<2\227\233<\2415\367\274\000\035\026==\352I=\260\242\217<\030i\316;\017\037\244\274\265\"\"=\215\272\312\274\373\256\016\273\344\346*<+\2267\2754K)\274m%Z\275^\260:\275\273\3253\274G|\243\275S\361\245\273\376)#\275\275\317\323<\355n\034=\325\261V\273\325\363\206\275H\014\231\274@\250N=\321\244\323<v\263\013\274\301\263\322\274bZ\337;-K\206={\267\303=\373\322\310<aXq\275\212\235F=\034\277\210=\265\252M\275\017\215\263\274\241\342o\275\027,\324<h\022\n<\020\252\330:\336\251\270\275\013U\343<~o\327\272\004JW<\302\305\303<\032\n\202\274\000X\326\273$\214\206\274/\353\210\274\357\250\201\273\030\376V=\250#\255\275\244+\337;L\226\277\275\253\2726=\240\206Z=\324^\350<\275\246\207=\321\0311=\351\210(\275U\364\252\275i\004\026\275R9\257=<|\347\274\362W\360\274yB\026=\000g\341\274\224*]=p\237\211\2713\033\216\273\273r}\274\347\2003\275\204\024\267\274\r\356\254\274\203\307\241\274\206O\201<\215\234\023\275[o~<\237\014\364<Ds\013=\311_M\274\2340U=\23056:\033\017 =\202>9\275T\\\361<\2410\024;s\363C\274\201\310\033;<\203\251=\256\233\343\273\237K\254<\331\304\207<\316>\021\275\262\362\242\275\342\322\007\274\250\014\245<1((\275\262f\374\274^\315\002\275\306\016B\272\005T\333<\342xk\275g\262[\275\366\313\273<\037J\204=\030\274`\275N\224=\273\203\344\024\275\363\212[=\301\352$\275\257>\243\274\245\260~=\251%\351\274\033km\275\177\3768\275\275\003\005=\364\034\332<\343\215\343\274\247)9=\3701\023=\331\005\226=J\254\243=!OH<\215\236!=\214\003\243\275\270\245\241\275*\343\253\275\017\224\025=a+*\275\207={\273)\264\372\274\324\007\236\275x\252\350;\356W&\275\3609T<\360\213*<\023Z?<\317\360\r\274,[s\275\244!\233\274\013z\201\275F\247\243=\247\257$<\226\354d=M\240|=\034\210\312\274\037i\211\274B\265\305<\232SJ<\272\210\262=\'\362N\275\036\356\352\274,\342\026\273E/\r=U\300V\274\326\206\244\275\210\374\300=U\t\302\274[\021\260\273|@\305\274\257g<=#[\223=:\350\260<77\020=QI\321\274@\315\221;\3238\274\274\275\372\002\275V\021\332\274\311\300\310\274\022\3329\275\333\325\2319\315\3114\275oE,=K\303\031=\364c\021=\274\224\356=\243T-\274+\370\255\274[\001)\275)\246\235\275A\244%\274j\213~<z\375?=[\177:\274\216\267F\274\003\271I\275h\2579\275qGi=H\034\247;\3463\203<BDJ\274\223\302\344<\037+\305\274 \340\324<\2143\267:\250&\305:w*\014\275\020\370\362\274Y\211\017=l\356\021<\204L\262:}\321q\275Ix\272\273j]8=+s/<@\017\032=Im\221\275\005\212\314\274/\203L=\343\350\024\276\237X\337=\n Y<\215qC=\223\336]<\251\303\020=\356\271$\275\211\350\366\274L-\021\275\361{\330<\354\372V<z\300\225\274\0264\213\274\304D\351<\327\307Y=\217}|\271\355\303\254\267\3657\033\275{h+\275\250\213\207\274\236\325\213\272M\272\220\275\306\215W\274k9\352<\240\331\'\275\304\352P\275\3331\225\275\004Y\224=\260-\275<&\360\037\2759\003D\275\237\235\254\273\201\255\332\275w\213&\2757\326\005\275\207As<+v4=\274\3758<@\014d:\353\010\305\274\233O#\273I\235r\273\310\307(\275\372\313\343=\307=\373<\010\025\216=\231o\026\275[?\217\274\2476\206=\255\262(\275p\361\215\274\330\215\245=\204\244L={\261\354<h_\215<Y\264\021\275\360\341\200\273{\224R=\n\3656;zt\241:\026\250\201<\237\004Q=/\243\276\274u\'\306\275\247\231?<\207o\250\275a\225\232\275\2422\374<{QU<a<\213\274\215\221\027\275\214\352S\272\367\202\217<\310I(=\302%\277<\3130\034\274\350\244\222\275A\025w\275\021\311I<+\032\370\274Z\376u<\337_\254=!!8\275\327\226\312;\204(\202\275Ua(\274U<\320=\373\356\274\274_\327\203\274\017\320L=\347\001M=D\037t;\2453\001<\313\313\355<A\205\025\275\360\005\003>\233\217y\274v\233\230\275&\271\027;\316M\315<8\013\006=\023\032\366\274\240\233d\275\3571\353<$\343\233=D+ \275c+\222\275\250b\221<\010s\227\275\320\343\204=^\306?;\200\301\177\275\346\000\024\275\233\350\206\275e\223p\275\225\241\330;\r\323@\271\257/\350<#I\037=\337\360\331<\333\260#\274\013Z\252=\301*!\274\325\002\315;\026\355\266=\374S<<\002d[\274p\260\323;\242\312\354\274e\232[=\210\337\227=\301M\310<\001\226\217\275\236\257\205=\362\032Z=1\316\r=\031S\242<\225T\247\275*\031\246<E\275\232\274\024 \004=\021\366\265\274R2\243=\216Z\033\275\323\'5\275\221Ci\2756\373\232\274[\'\307<\306\300\205=3\330\234<\265\034S\275\305\243\275\274\274\2470=\272\034^\275\363\036>\274\347\306\273\275J\rO<\362\216\263\275\207\020\367<Q\330a\274\324A\013\274:9\324;\305\315\013=\333f;\275\322\323\24190|\347\274\204\327\273\274\206\022s<\tD\372<\231\332j<g\222\301\274&g\211<\013A\211<\021\364\027<\027Y\212\275\260t\013=M2\320;Zb\372\274\256/B=F\254\032=\023\251\017\275\220z\340\274\036T\277=u\355M=o\351\233<L\242p<hK\217\275\rs\177<H\0079\275\244\034V=\032\016+\274\362\264\310\274(\217\317\274k\301\304<\013\210}\275\240\311\017;\346\006\214\273\346\352\025\275\322\314\232<o\226\036\274OQ4=e\211\322<b^\375\2742H/=#\357\210<\212\336\361\273\'\375\216\274\344J\213\275\276&?\275\222\226\3679l\331d=\276q\337\274\2178\366<\334\256`\275\253)\026\275\222\224\211\275X\026\211=\233\251\323<>\277\351; \357\307\274\236\230\207\274X\233\334<\371\213\\=&\rG=w\355\234\274\212\375\330;\212\337{<\032\306d=\275\300\241\272Fs\224=G&\031<w\227N=D\013\362<\207&\240<\336\271\326=w\232\226\274\014JZ\275Lg\024\275\371\211\247=\215OH\275w\0168\274\020E\021\274\263\217\017=\371?G\274\372M\272\274\250\023\250=B\210\211\274C\235o\275\210U>\274\252gN\275\337\367\026\274\020Rb\274\207\272T=bFI\275\306\240\256\273\013\231\333<\270g\005;\236\314\026\275f\301F<\363\204\"\275\301\324\243<\206\316g=\213\321-\275\377\364\234\273\002\203L\275\267d\033<\346Cb\271q\314O\274Vg\315=O+\004\275\216\366\204<\223\002\211<\303\3374\275\341\3651\275+\340X<\347\320\006\274\027\360(\275\024R);\000y\025<\222\261\242=\005\262`=\245\273(=\377\001m=\354_\020\275\213n\334=\301\2655\2745\377\301\266+\1770\275i\364\275<\226\274\346\2738s7<\367v\201<sp/\275\317H\002=\300L\205\274\006\013\330\275\357T%<<yz=\224\000z;\004%-\272\334\335\266\272\372\357\315\274\222&S=\243\264\207\271/w\263<\3627\321=m\275\237\275\277\r\263<\346\232\215<rYg<\353\243\371\274\252\031D\272=\375\027<r8[=/\376\315\274\364[\310\274\246\277\203=\017E\002\275\004\275\221\274OuE\274\326Z\216\275\346\366\325;\362w\005=h\247\017\275\006\\\204<\377\213\347\272\001\023V=\205O\321<P\302\261\275\317\353=<\217\225\026\275\320\236g=\0324\335<\205\221\000\275+\257\220= \364\242=\203_D==7\263\275\034\027\020=\245\271\212\274\"]1<\264\376\373\274\355-c\274\274\235A=s@\'>\373j_=\274y\366;)\030$="
      }
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "lstm_1/recurrent_kernel"
  input: "lstm_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/read"
  op: "Identity"
  input: "lstm_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "lstm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/concat"
  op: "ConcatV2"
  input: "lstm_1/Const"
  input: "lstm_1/Const_1"
  input: "lstm_1/Const_2"
  input: "lstm_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_1/bias/Assign"
  op: "Assign"
  input: "lstm_1/bias"
  input: "lstm_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1/bias/read"
  op: "Identity"
  input: "lstm_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice"
  op: "StridedSlice"
  input: "lstm_1/kernel/read"
  input: "lstm_1/strided_slice/stack"
  input: "lstm_1/strided_slice/stack_1"
  input: "lstm_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_1"
  op: "StridedSlice"
  input: "lstm_1/kernel/read"
  input: "lstm_1/strided_slice_1/stack"
  input: "lstm_1/strided_slice_1/stack_1"
  input: "lstm_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_2"
  op: "StridedSlice"
  input: "lstm_1/kernel/read"
  input: "lstm_1/strided_slice_2/stack"
  input: "lstm_1/strided_slice_2/stack_1"
  input: "lstm_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_3"
  op: "StridedSlice"
  input: "lstm_1/kernel/read"
  input: "lstm_1/strided_slice_3/stack"
  input: "lstm_1/strided_slice_3/stack_1"
  input: "lstm_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_4"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read"
  input: "lstm_1/strided_slice_4/stack"
  input: "lstm_1/strided_slice_4/stack_1"
  input: "lstm_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_5"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read"
  input: "lstm_1/strided_slice_5/stack"
  input: "lstm_1/strided_slice_5/stack_1"
  input: "lstm_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_6"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read"
  input: "lstm_1/strided_slice_6/stack"
  input: "lstm_1/strided_slice_6/stack_1"
  input: "lstm_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_7"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read"
  input: "lstm_1/strided_slice_7/stack"
  input: "lstm_1/strided_slice_7/stack_1"
  input: "lstm_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_8"
  op: "StridedSlice"
  input: "lstm_1/bias/read"
  input: "lstm_1/strided_slice_8/stack"
  input: "lstm_1/strided_slice_8/stack_1"
  input: "lstm_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_9"
  op: "StridedSlice"
  input: "lstm_1/bias/read"
  input: "lstm_1/strided_slice_9/stack"
  input: "lstm_1/strided_slice_9/stack_1"
  input: "lstm_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 384
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_10"
  op: "StridedSlice"
  input: "lstm_1/bias/read"
  input: "lstm_1/strided_slice_10/stack"
  input: "lstm_1/strided_slice_10/stack_1"
  input: "lstm_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 384
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_11"
  op: "StridedSlice"
  input: "lstm_1/bias/read"
  input: "lstm_1/strided_slice_11/stack"
  input: "lstm_1/strided_slice_11/stack_1"
  input: "lstm_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/zeros_like"
  op: "ZerosLike"
  input: "conv1d_4/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/Sum"
  op: "Sum"
  input: "lstm_1/zeros_like"
  input: "lstm_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "lstm_1/ExpandDims"
  op: "ExpandDims"
  input: "lstm_1/Sum"
  input: "lstm_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/Tile"
  op: "Tile"
  input: "lstm_1/ExpandDims"
  input: "lstm_1/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/Tile_1/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/Tile_1"
  op: "Tile"
  input: "lstm_1/ExpandDims"
  input: "lstm_1/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/transpose"
  op: "Transpose"
  input: "conv1d_4/Relu"
  input: "lstm_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/Shape"
  op: "Shape"
  input: "lstm_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/strided_slice_12/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_12/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_12/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_12"
  op: "StridedSlice"
  input: "lstm_1/Shape"
  input: "lstm_1/strided_slice_12/stack"
  input: "lstm_1/strided_slice_12/stack_1"
  input: "lstm_1/strided_slice_12/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_1/strided_slice_13/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_13/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_13/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_13"
  op: "StridedSlice"
  input: "lstm_1/transpose"
  input: "lstm_1/strided_slice_13/stack"
  input: "lstm_1/strided_slice_13/stack_1"
  input: "lstm_1/strided_slice_13/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_1/MatMul"
  op: "MatMul"
  input: "lstm_1/strided_slice_13"
  input: "lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/MatMul_1"
  op: "MatMul"
  input: "lstm_1/strided_slice_13"
  input: "lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/MatMul_2"
  op: "MatMul"
  input: "lstm_1/strided_slice_13"
  input: "lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/MatMul_3"
  op: "MatMul"
  input: "lstm_1/strided_slice_13"
  input: "lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/BiasAdd"
  op: "BiasAdd"
  input: "lstm_1/MatMul"
  input: "lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_1/MatMul_1"
  input: "lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_1/MatMul_2"
  input: "lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_1/MatMul_3"
  input: "lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/MatMul_4"
  op: "MatMul"
  input: "lstm_1/Tile"
  input: "lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add"
  op: "Add"
  input: "lstm_1/BiasAdd"
  input: "lstm_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/mul"
  op: "Mul"
  input: "lstm_1/mul/x"
  input: "lstm_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/add_1"
  op: "Add"
  input: "lstm_1/mul"
  input: "lstm_1/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/clip_by_value/Minimum"
  op: "Minimum"
  input: "lstm_1/add_1"
  input: "lstm_1/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/clip_by_value"
  op: "Maximum"
  input: "lstm_1/clip_by_value/Minimum"
  input: "lstm_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/MatMul_5"
  op: "MatMul"
  input: "lstm_1/Tile"
  input: "lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add_2"
  op: "Add"
  input: "lstm_1/BiasAdd_1"
  input: "lstm_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/mul_1"
  op: "Mul"
  input: "lstm_1/mul_1/x"
  input: "lstm_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/add_3"
  op: "Add"
  input: "lstm_1/mul_1"
  input: "lstm_1/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "lstm_1/add_3"
  input: "lstm_1/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/clip_by_value_1"
  op: "Maximum"
  input: "lstm_1/clip_by_value_1/Minimum"
  input: "lstm_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_2"
  op: "Mul"
  input: "lstm_1/clip_by_value_1"
  input: "lstm_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/MatMul_6"
  op: "MatMul"
  input: "lstm_1/Tile"
  input: "lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add_4"
  op: "Add"
  input: "lstm_1/BiasAdd_2"
  input: "lstm_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Tanh"
  op: "Tanh"
  input: "lstm_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_3"
  op: "Mul"
  input: "lstm_1/clip_by_value"
  input: "lstm_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/add_5"
  op: "Add"
  input: "lstm_1/mul_2"
  input: "lstm_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/MatMul_7"
  op: "MatMul"
  input: "lstm_1/Tile"
  input: "lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add_6"
  op: "Add"
  input: "lstm_1/BiasAdd_3"
  input: "lstm_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/mul_4"
  op: "Mul"
  input: "lstm_1/mul_4/x"
  input: "lstm_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/add_7"
  op: "Add"
  input: "lstm_1/mul_4"
  input: "lstm_1/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "lstm_1/add_7"
  input: "lstm_1/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/clip_by_value_2"
  op: "Maximum"
  input: "lstm_1/clip_by_value_2/Minimum"
  input: "lstm_1/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Tanh_1"
  op: "Tanh"
  input: "lstm_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_5"
  op: "Mul"
  input: "lstm_1/clip_by_value_2"
  input: "lstm_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/TensorArray"
  op: "TensorArrayV3"
  input: "lstm_1/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "lstm_1/TensorArray_1"
  op: "TensorArrayV3"
  input: "lstm_1/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "lstm_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "lstm_1/TensorArrayUnstack/Shape"
  input: "lstm_1/TensorArrayUnstack/strided_slice/stack"
  input: "lstm_1/TensorArrayUnstack/strided_slice/stack_1"
  input: "lstm_1/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/range"
  op: "Range"
  input: "lstm_1/TensorArrayUnstack/range/start"
  input: "lstm_1/TensorArrayUnstack/strided_slice"
  input: "lstm_1/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "lstm_1/TensorArray_1"
  input: "lstm_1/TensorArrayUnstack/range"
  input: "lstm_1/transpose"
  input: "lstm_1/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/transpose"
      }
    }
  }
}
node {
  name: "lstm_1/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/while/Enter"
  op: "Enter"
  input: "lstm_1/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Enter_1"
  op: "Enter"
  input: "lstm_1/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Enter_2"
  op: "Enter"
  input: "lstm_1/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Enter_3"
  op: "Enter"
  input: "lstm_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Merge"
  op: "Merge"
  input: "lstm_1/while/Enter"
  input: "lstm_1/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Merge_1"
  op: "Merge"
  input: "lstm_1/while/Enter_1"
  input: "lstm_1/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Merge_2"
  op: "Merge"
  input: "lstm_1/while/Enter_2"
  input: "lstm_1/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Merge_3"
  op: "Merge"
  input: "lstm_1/while/Enter_3"
  input: "lstm_1/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Less"
  op: "Less"
  input: "lstm_1/while/Merge"
  input: "lstm_1/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Less/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/LoopCond"
  op: "LoopCond"
  input: "lstm_1/while/Less"
}
node {
  name: "lstm_1/while/Switch"
  op: "Switch"
  input: "lstm_1/while/Merge"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge"
      }
    }
  }
}
node {
  name: "lstm_1/while/Switch_1"
  op: "Switch"
  input: "lstm_1/while/Merge_1"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "lstm_1/while/Switch_2"
  op: "Switch"
  input: "lstm_1/while/Merge_2"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "lstm_1/while/Switch_3"
  op: "Switch"
  input: "lstm_1/while/Merge_3"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "lstm_1/while/Identity"
  op: "Identity"
  input: "lstm_1/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Identity_1"
  op: "Identity"
  input: "lstm_1/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Identity_2"
  op: "Identity"
  input: "lstm_1/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Identity_3"
  op: "Identity"
  input: "lstm_1/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_1/while/TensorArrayReadV3/Enter"
  input: "lstm_1/while/Identity"
  input: "lstm_1/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "lstm_1/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul"
  op: "MatMul"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "lstm_1/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul_1"
  op: "MatMul"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "lstm_1/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_1/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul_2"
  op: "MatMul"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "lstm_1/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_2/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul_3"
  op: "MatMul"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "lstm_1/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_3/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd"
  op: "BiasAdd"
  input: "lstm_1/while/MatMul"
  input: "lstm_1/while/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_1/while/MatMul_1"
  input: "lstm_1/while/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_1/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_1/while/MatMul_2"
  input: "lstm_1/while/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_2/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_1/while/MatMul_3"
  input: "lstm_1/while/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_3/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul_4"
  op: "MatMul"
  input: "lstm_1/while/Identity_2"
  input: "lstm_1/while/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_4/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add"
  op: "Add"
  input: "lstm_1/while/BiasAdd"
  input: "lstm_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul/x"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/while/mul"
  op: "Mul"
  input: "lstm_1/while/mul/x"
  input: "lstm_1/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/add_1/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/while/add_1"
  op: "Add"
  input: "lstm_1/while/mul"
  input: "lstm_1/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Const"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/while/Const_1"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value/Minimum"
  op: "Minimum"
  input: "lstm_1/while/add_1"
  input: "lstm_1/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value"
  op: "Maximum"
  input: "lstm_1/while/clip_by_value/Minimum"
  input: "lstm_1/while/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/MatMul_5"
  op: "MatMul"
  input: "lstm_1/while/Identity_2"
  input: "lstm_1/while/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_5/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add_2"
  op: "Add"
  input: "lstm_1/while/BiasAdd_1"
  input: "lstm_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_1/x"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/while/mul_1"
  op: "Mul"
  input: "lstm_1/while/mul_1/x"
  input: "lstm_1/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/add_3/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/while/add_3"
  op: "Add"
  input: "lstm_1/while/mul_1"
  input: "lstm_1/while/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Const_2"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/while/Const_3"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "lstm_1/while/add_3"
  input: "lstm_1/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value_1"
  op: "Maximum"
  input: "lstm_1/while/clip_by_value_1/Minimum"
  input: "lstm_1/while/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_2"
  op: "Mul"
  input: "lstm_1/while/clip_by_value_1"
  input: "lstm_1/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/MatMul_6"
  op: "MatMul"
  input: "lstm_1/while/Identity_2"
  input: "lstm_1/while/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_6/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add_4"
  op: "Add"
  input: "lstm_1/while/BiasAdd_2"
  input: "lstm_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Tanh"
  op: "Tanh"
  input: "lstm_1/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_3"
  op: "Mul"
  input: "lstm_1/while/clip_by_value"
  input: "lstm_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/add_5"
  op: "Add"
  input: "lstm_1/while/mul_2"
  input: "lstm_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/MatMul_7"
  op: "MatMul"
  input: "lstm_1/while/Identity_2"
  input: "lstm_1/while/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_7/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add_6"
  op: "Add"
  input: "lstm_1/while/BiasAdd_3"
  input: "lstm_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_4/x"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/while/mul_4"
  op: "Mul"
  input: "lstm_1/while/mul_4/x"
  input: "lstm_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/add_7/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/while/add_7"
  op: "Add"
  input: "lstm_1/while/mul_4"
  input: "lstm_1/while/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Const_4"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/while/Const_5"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "lstm_1/while/add_7"
  input: "lstm_1/while/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value_2"
  op: "Maximum"
  input: "lstm_1/while/clip_by_value_2/Minimum"
  input: "lstm_1/while/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Tanh_1"
  op: "Tanh"
  input: "lstm_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_5"
  op: "Mul"
  input: "lstm_1/while/clip_by_value_2"
  input: "lstm_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "lstm_1/while/Identity"
  input: "lstm_1/while/mul_5"
  input: "lstm_1/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "lstm_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add_8/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/while/add_8"
  op: "Add"
  input: "lstm_1/while/Identity"
  input: "lstm_1/while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/NextIteration"
  op: "NextIteration"
  input: "lstm_1/while/add_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/NextIteration_1"
  op: "NextIteration"
  input: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/NextIteration_2"
  op: "NextIteration"
  input: "lstm_1/while/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/NextIteration_3"
  op: "NextIteration"
  input: "lstm_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Exit"
  op: "Exit"
  input: "lstm_1/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Exit_1"
  op: "Exit"
  input: "lstm_1/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Exit_2"
  op: "Exit"
  input: "lstm_1/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Exit_3"
  op: "Exit"
  input: "lstm_1/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "lstm_1/TensorArray"
  input: "lstm_1/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/range"
  op: "Range"
  input: "lstm_1/TensorArrayStack/range/start"
  input: "lstm_1/TensorArrayStack/TensorArraySizeV3"
  input: "lstm_1/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "lstm_1/TensorArray"
  input: "lstm_1/TensorArrayStack/range"
  input: "lstm_1/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "lstm_1/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/sub"
  op: "Sub"
  input: "lstm_1/while/Exit"
  input: "lstm_1/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_1/TensorArray"
  input: "lstm_1/sub"
  input: "lstm_1/while/Exit_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/transpose_1"
  op: "Transpose"
  input: "lstm_1/TensorArrayStack/TensorArrayGatherV3"
  input: "lstm_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.125
      }
    }
  }
}
node {
  name: "lstm_2/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.125
      }
    }
  }
}
node {
  name: "lstm_2/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "lstm_2/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 6774593
    }
  }
}
node {
  name: "lstm_2/random_uniform/sub"
  op: "Sub"
  input: "lstm_2/random_uniform/max"
  input: "lstm_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/random_uniform/mul"
  op: "Mul"
  input: "lstm_2/random_uniform/RandomUniform"
  input: "lstm_2/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/random_uniform"
  op: "Add"
  input: "lstm_2/random_uniform/mul"
  input: "lstm_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_2/kernel/Assign"
  op: "Assign"
  input: "lstm_2/kernel"
  input: "lstm_2/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_2/kernel/read"
  op: "Identity"
  input: "lstm_2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/kernel"
      }
    }
  }
}
node {
  name: "lstm_2/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
        tensor_content: "\235z\220=\376\032\032=\375\205\341<\311C\001\276<g\376\272\277\245\032\275G9b=\340\317\003=\213\233\314<\004);=\334\305\002=kJ4:\344A~\275\016\001]\274Y\352F\274G\223J=\255 t=K|\254=\273\256m=\373!,=\004\030\355\275\250\375S\275v\270\031\273s\2229\275\312w\314\275-\200\004\275}\202\304\2746*\237=\225\255\014=\223x\r\275\325\354a=F\237\037<K\026(\276t\206\256=\354\t\330=d(6=\031*\213<-R\224=\204s0=>\0039<\252\273\320\275\025\322\222\275\371\035_\275j\354\230=\017;-\276\347r\304;i$\236\275Y\3522<\344,\270=\344\013\225=\216R1\275G\242\361=\036\321\305=\323\307%\273\317\317\034\275\213\326\205=i\206\262\273a\273\\\275\365x7=Q{h<\307\021r=\357\374\373<\201\021(>\366\323.\275\331\301\346\273\0165;<\346\023\202\275\234m\315=\326\314(\275\327\324\000>\320\330\017\276\222\026\016\274\002S\177=\260\032\356\274\216\354\256\275\224\351\324<\352\220+=\013W\266\274\362\342|=4\272\201\274\"&$\275O\ra\274\365\tA\2755\310\250=E({=\346^\250<\242r\345<\n\330\243\275g\214I=\350\237\350\275\2073j\273\260\2443\274}\215U=\252\022#=\r\364\304;\214\004\250\274\365\257\026:l\324\357\274f\24127\262\351\332=%|\226\275\320\225\255\275\374$\335<\346c\023\275\001\361\200\275\364M.\275f\004\342<\014\000\210=5\235D\275\245X\307\272\330O\020=\320\333K\275H\334\271\275\351\325\026=\252\254\037<\324\363<\274\227\313\273\275\230\312\022\275[\240\232=\373!\234;\337\260T<\t;\326\275D>\007>!{\274;_\317\324<\020\005~\274\230\352,\275\247\311S=\010\3356\275n,\216\273\340\3259\276\257\354\253=2]\236=\323\270\266:o\357\037\275\255pD\274F\272g=0\262\254\275\274e\327<uJ\374\275+\013\236\274v\343\230=\341\t\210\274\352\244\273=x\325\316\272(k\224=\306\000\256\275\246\267j<\"\357\237\272\344G\266\274\2227\233=k\300\030<7\252\315\275\267)\364;#\221\':\206\360\317=\005\336\000\274b\322&\275\357\331p=\231\005\267=\316R\215\274\246P\036=\334[\260\274\342A\365\274\347|m=\311Ad\274\343_u\274#\367\0309\361d\225\275=\275\272\273\261\337\037\275;z\037\275\007S3\273z\334\317\274\210\225\031=\226\271\261={\360\215\275.\223\020\275\222\026:<\264x\254\274\"\003\206=\324\236\207\275\335C\311=\313->\275\243\0037=\201p\350;\025\022\237\274#\037\242\275\305\036\311\275\206\220\374<\206\001X\275\204\024\213\275(,0<\\\341\364\274\375r,\275\374*\213\274E\310\324=I\264\342<ll\355\274\345`z\274\235\352K<H\237\301\273!{\357\274r\314X\275L\333t=\373bQ\275\270[\276\274o\213\002>\027\2716<\272R\256=\004C\010\275s]\320\275[\001\355\274\035\205^\275z\032\273\274|\311\242\275\033\312\203<X)8=\026~\220=1] >\216\337\327; \332\233\2756Q\253\275\303\'\243<\214_\032>o+\016\275\376\246\226\274\353\352\334<_w\232\275\356\366\274<\316\240\371\272+\317\370\275\016\364\001=\351.\253=\323y+\275\227\220\256= \2419=\226\301\273\275\251\264\326=\177P\251\275\2025\307=\200Sp\274\344Po;\032-\254\275_\227\227=\316\037P\275\2451\340=\256\r\206=\021\260\372\274\023\002\311\275\263Q)<su\226\275\220\344G=8w\'=Q\345\227<\203y\'\274\241\t}\273\221\325\362\275\005\020;\275s\357\326=\033\310\330\273>\226\337\275>\034U\275\365\r9\276@\024\251;\370`\331=\270y\006>\314>\000\276V\026\377\275\200\030N\275\356B\t\275\254DR=\350EZ=\373\256\353\274;&\233\274\215\001m\275\251e\366;\346\026\26374[\037\276e\2464=\0215\231\275\266\335h=\214\331\005=V\371\324<\357\036Y\276M\344\025\275]=\270;\001 \261\274\007`j<\377N\323\273\317\305,=\273\245\233<\326\217L\275;sg=wk\027\275:81\274\tF2=)$\367<r\344\203\275\271ii<\251\370\237<\270\334b<\371Jf\275\354)V=\246\0076\273=\216\227=K-\367=E}\260;\277\312;\275\2200\311<>\361\211\275m _=\235\312\037\275\215?\334\274\245\021$>b\200\003\273\013\367Z\275E\346\346=n\235\250=V\375\340=\203\240\230\275\\\032\027\2756/`=\277\rM=R\032\024\276\025v\256\273,\363\260\275\032+U<b\027\357\274\016\344\303=W\234P\275*G\221</\341-\276\367\310\243\275y\037\225<Y\364\262\275w+#=\301\'\022>)h\363<\343\276\234<\241\304\306\274\"[\227<\323b\210<\025XN<fSc<,e\263<w\325T<\265\237\250=\014\252q<\363\221\241=\006\372\232\275)\220\177\274)}\001\276I\244\251=dW\314\275\020\275/=g\177\271<\265\223\250;r\254\014\276p~\362;\037sw\274\252B\003\275\337{\001>\021\215F\275-\304\352\274)\025:=\016\246\254\274/\016R=q-\232\274\357 \314\274\360\365$\273\027\261c=\375\257\210\275\316\nC=\347(\332<7\302\023\275\r\215\231\275f\316\275\274\325\315\234\274\242\005\217\2740\263\277<dp\345\274\253\301\201=\236\217b\274o\304\357\274\036\234\205=\324\256L=\223q\020=\227d\271\275\r\351\204<\373\246\217\274\035\210Q=\034oL\274\177\307\237=\274Qk<N\235\304\274kkE<x\346\370<\270v\365<\244\n\305<\333\227)\275\322\367\021\276Y\0343=>YV<\230\266\301\274\250\032y\275I\256 \275\373R\273\274.\271\240\275\330\375t\275\003\033\362\274Y\377r\275e\332!=Ry\250\274En\274\273o\260\262\274\207\277\243\274\273\022\366\275\361+\030=P\360\267=\341?:=\361\322\214\275\221\205\025<F\026S=\344\244:<\375\233\260\275@\301\023\271\215\202s<\221R\006\275\257)\351=Y\3130\275\357\207\241\275\023\304z\275\253\233$\274\337\376\265\274G\367\033\274,\272\325\271^\264^=|^\205\275\366\033\221<\255\202h=\315\t\013<\272\2442\275\243\n\322\275\332\311[=\325F7=\000\266\002=\224n\205\275e\370M\275\363\037\310\275E\217\373=+\245\232<\236,A\275A*g\273\374|\212\274\347\252\234\274R-\204\275zv =e\010k\275\251\272\246=\224\365\226\274\253S1\275m\315\023\275\223\314h;F\004\200\275\236\177\240=I\037\t\273\255\260C\274`\241_\2753\034Y\275M\352\310\275\361\346\232\274\263%\001\275\225Q\372<\364\302T=wP\367\274;\036)<\020\303R<\367M\032\275\253\n\233=.p[=\265\254\006\276Fz\206\273\233\333\242<\244\226\205\274\256\207\'\275\0232\001\275\273\213\303<\210#\000\275\330\346\\<)\023\325\275\301\203\024<\246\277\026\275\227\376~\275\024\230\024;9p\346=\323\005\251=\0315\207=\216\025\033\275\223\200\214=\177u&\275\354U\255\275\337\314\215\273%#\274=sfR=\366\367\251<\354\336\t\276)\277\205=\201C\226\274\013\367\233\275\253\234\315\275\347\370\301=`\374\232\274IjA=\306\312\304\275f\266\347<\332\201\212<\363\036\032\274\237\215\315\275\232\251\230\275\026u\204\275V+\240=\345\333l<\324\006\317\274\377\344\346<\024\304O=\032\317\352=\373\177\245\275 \341\210<<W\201=\265A]=n\r\024=\265\001c=\377c\237\274v\013\254=\230 8=\374m\202\273\312_3\275w4#\275+\253\271=\010\227`=:\205\t\275\'$(\275\264\246\254\274gXG=\274\375v=*=\365<\261\3608=M\316\'>o\241\352\272\207M\201=\322\265\352=R\312i=\351\231\215\275sM\205\275\370\004\034=\377\204\356\274\nC\032\273\2061a\2750C\277\275Q\254\200=O\270\\=\302\\\235=\326q\345<7\0273\275%\0216=6&\034>QN\245\272\251\363\227\274~\2216=\3650\022\275\263|\264\274\317\3612\275\274~\236\275\217\007\367\273\217m\372\274\367~f\275v\312\205\275Dv\023\275%\027\254\275\020\335\212\275\030c\343<cZ%=\022B\373\274\17719\275\313^\001<\304\363e\275S\3239\272|6\311\275\364k\250=Qu\306<\206\374\221=\311J\n\274\r\256\210\274?\337\226<l\275\322=C=\002=\223\276\262\275\353\332\t>\010\243i=\266\"\225\275\204\304\230=\000\302\350\275K\206K\273fd\350<L\200D\275\177\311\017\275\335\367\024=\210\004\250\275\240\021p=\233\324\316=\325m \272ry6\275v\270\007;\025\316\341\274\335\244\355\275\277W\357=&\363\002=u7n\273R\355\366=\357\271\264=\210\262U\275D\233%>\265\005\007>b\335\001\275\362\303\237\275ub\024=\2602\242<\311sx=\343p~<%\202_\274Q\341\323<2i2\275\210 ^=\334\177\310\273\026I\313\275\243\006\312=~\236\201\274k\203\315<h~\232\275\020\217f\275G\326\226\2735\004\360\273\243\311\300=\370\367t=y \256=\245F\226\275\315L\240=\275\367%;\365k2\274\305\003d\275Y\215\250:U\037\034\2755\345p\2751F\376\273\365n\372\2723\r\321<\003\215\251\275Q;L=9\023D=\267K\323\273<9\335<\340\263\347<A\240?=hO\337<\371\246+>\366N\325\274\3003\227\275\337\204\343=:\201\226\274\335\322\004=\264J#=@\345\021\276\026\344\3529\344t\232\271u\362|<&\244\251\275\026=\023\274\303i\336\275\007\257.\275\250\250\031=EpE<\225\237\345\275\326\334$>H\342\030=\251\365\241;w\202?\275H\344\336<\005\227\204\273\003!:;\357\275\026\275\010\343p\275\'\2253<\032\376\200\275\221\026\237=\325\201z\274\001\265\332\2746e\331<\376\2472=cE\235\272\370\n\360<\254\272\036=\337\260\301=~\370\302\274\342jn\274\004\026\304\275\360\237z=b0\330\274\037`t\275\\\203N=\354\216Y\275\364\334,=\374]\033\273\345\307_\275\300b\031\276\247S\211\274\270\375\333\274\217e%\275\005R#\275\342%\264=\222\351\221\272\'\037\311\275\373c\307<Gi\375\274\360$\325\275\337\313\250\2754!K=\251\222\254;A\002Y=\246\352\335\274J\364\213=\321\027$=\025?o\275\350\223\203\275\277\252`=<\306!=\373B\200=[\363\270<\332C\351=\034\\\220=\215j\203\275\276y\211\275K>\262< \014\234\275zh-=\033M\262\275\353i\362<\216\341\263\274(p$=\355!\032\274No~\274\027\237\202\275Z\342\274\275\303\326\257\275\357u\230\274\321\250\255=\275\324b=\033\037}<rs5\275\000\377~\275\031\226\014>\223\206\335=04F<\225\344\303\275^hL=:\242\006=\032X:=\030\367\252=\247\363\202\27540\270\275\305\201\265=/\344\035=\013-\272\273E\352\300\273BR1=&\367;=w\3251\275\331>H=R\212\213=\033\302\230=1\3661\276O\361|\275\205n\023\2757\313\021=\224\250R\275\304\366\331:\221f\223:\323\005\303\275\246(\200=\022\271<\274\204\331\241=\"\223\213=\030\273\235<\376,\021=vh\034\275\240\266\031\275\307\312l;\322\t\021;\261/y\275U\\j=#v\351\273\363\022@=s\243#=\276\2705\275\344U\335<I\347D=\201\034z\273\233\213\341\275_m\t=\330\206\250\274\217\267\204\275\020\'\007>\333\231\243\275\235`\210\274g\265\207=H\300\014\275\345$\375\273d\352F<\266}\312;\212\310N=id)=\204\3100=\200`\217\275\263v\031\274\301x\220=}\001O=\010\007\370\274\277z\276\275rA\377<\361O\266\274\001\342\004\276\367\271\010\274Iw\311\275Rwh;\377\220\\\275\010\364\022\275\344\245-=\221\2019\275\331N\216\275\343\327p<\272W\200\275*\260\315;\035T\222=\361M\322=x\334\005\276\347\365\351=\216\025\007\274w\273\341;`\312\314\275*\016\211\275=\020\'\276\273\312\240\274\001\346\233;d\311\200\275\034\nI=\036i\232<\331\367== \253E=\365aZ;\000|+<\262\353\320\275\334\037\277=iO\332\274\236\270\223=G\353i\275*\354\300\274\031\375Z<h\t\200\275\301z\333=\3543\376\275\320\233\251<L\016\t=M\2557\275r\241\252\272\304Z1\275\301\207\363\274~\005\222\274\244#\272\275\230\275\030>c~p<D%\204\275\266Fz\273\001\243*\275/\177`\275\245\275\313<N>\273\275\245g\004<\214{\031<\032\243\026\275kq\353\274!\232:\275\323\346\007>$\240\216=\244\2623=\261j\235=\314\024\244=\265\370A\275t\317+<N\371\217\273\"\342z\274\234\2726\276\034{\300\275\233sE\2756\0059\275\214s\262\272\262\000\314=\354o\025\275\213\335\270=%\324B=\363\223\206\271\377\213\225=Dx$\275\274\243\267=\224\301\353<\254O\007<4|\261<K\301\002=)\270\270<}\260\253\273\341uA\273F}O\275\002\367\306=\306h*\275Y\020i<\272\021d;\006\314\251\275\332\2656\275%i\354<=\374\326\274\031\216\265<\370\365g=\224T\352\2750i\337=\353\304d\274\374d\251\275\372\"\337\273H\031\264\275\317\347\031;\202OA<\252\026\274\274\026\310\252=XF\017\273\310\330o\274}F\330\273\251\003w\274\254%\237=\336\351\t\276\'\266\004\276\267\361\022<\240\346\252\275\346\360\260<1\375\027:\027\276\214=_rC=5\226\004\275\245\272\373<\251\0229\275 \036\204\273M\001\302\275\3053\310<!\340N\275\240\200\224\275\213\321\314\274\023\370_\275\343$l=p\311\224\275^-\316=\372\234\030\274i\214\206\275\365\331T=G\314\321\274\3059 \275\212r\277\275`\344\201\275\241Y^\272\227\320\023\275\246%p\275\006\3655=\322\346\000>\303u\217\275\2621\257=\235\243\013=g\236,=\201X\004=\014\334\202\274\340\250A=\36604<\213\355\224=P\213\217\275\325\272\317=\222\026\235\275\233\234\231\275\036\302\302<\321z\241\274\214\260c\275z~\023\276?\344\316=\020\2039=\370\272\351\275\312\371[<\007\354T\274\014\027\010\276\241\240\016\273\244\010U\275\301\007\300\275\253\206\013\276\301\324\227=\327.\027<\330\245\214\275?\037\303<\016G\251=\227\305o<\365n\360<\337t\261<\205\325\301\274g\364\226\275GN\204\275\261\3360=\355\253\253\274\202\323\305\275\355,\016=\2459\021\275\273\343\340\274\2219\372\273}7\004\276P#s:\352i\344;\3226\206;\022\237\313\275E\222i\275\222\247\262<m\023`=\257o\253<qe$=\306u\000\275\204\333\304=\371\266~\275>\252\202=\006\233\364\274j\211\272;\266H\216\275\376\217\250=\370\032\324\273\202k\022=\210A@<\221\204 \275\324K\354=\314\245y\275\321\331\370\2746\'{\274\037\033\361\275,\300\276\274]ZE<>\240\006\273\277&\336\2745\252r=z5\330\275\344\245\021=\224\336{=i\377\000=c16<\207\017\301=\215\370\230<\314\262\233\275h\001\244=w\022\005\274\t\016\225=dE\r<`\352L=\317\\\234\275\367-b=\014D\341<\246\220]\273\020\277\203\274\357\301m<\361^\360\274,u\210\275z\177\212\275TI\216<\311\030\263\275\035\326L\272\325\374\324<t\261\223=\307\346\252=\037\312\032>\'O\341;Z9_=\271\351:\275t-\230=\314Sy\2756\311h\275O\t\303=Ng\"\276]\305\307\275\230\337\233\275\276\265\207=&O6\275|\027O<\352\217\205=\271\330\000=\305L\201=O\217\007>D\"-=\233\216%\276\332\262\267<T\271\231\274\335\222\202\275\247\321\217<\202\316\270\274\027\001\334\274g\374\022=\301e!\274w\321\262;\030~\360\272\3332\335\273\366\0368\275\303\030m=\357\367\002\275\220\357T<sFO\273:\323,\273\242a\230\274\227\250W\272\313\243\203\274\210\340\212\275\240\376\315=\007\363\373\275\334|\372<\224e\213=\321\310\225=\000(\303<\252\277\034;\337;\300<$sW\275\254\246P\273\022\2735\275\303\301r\2751\276f;\223B|\274\33650\275\032\206>=\020uB\273L\327\230=;\016\272\275\244Z\277\273\232\273\\\275\223k\216=\322\204\325\275\036\233U=\372Y\345;V\032\207<k\347H=\r#\004=C\372\r<\010\202(=\311[\353\275Z\354\223\275V\244\233\275\262\225\305=\320\226\236\275\272\002\234\275\016\204z\275v\025\340\275\223\021\027=,\236\325=\001\332\231=\357\354 \275\206\324E\273\2104\374\275\316\0256\275v\217\241=\317\203t={Q\270\2742:\023<\230\215\001=\322\010\200\275\222>\"\276\364s6\273?\004\214<\303\tT=\341\026\013\2758\033\245<\257w\221=\232\326\357\275n\3061\2754\005\016=\227=B\275\260\\\236=\022\267\032<\3606_\275#r\235\274D\"\235;J\007\276=\227\3068=\3271\027>\232\277\214\275\211\013F=\337\231s=\370\261\213\275\311p\261\275\270_\215;\002\327\215\275\305\367v\274\030\255\235=#\341\300\274U\3720<1t\356=[r\244\275\306\215\003=\200\371\203=\242J\271\2753$`\275\027k\364=\312\036\264<\304\'y<Al\010=Lc\371\273E\357\362\274\362\3371\275M\237\247\275#\3349\275Fr\013\2753\360%\275\362\013\271<z\352\226\275\003\204d=\203\003\337\274W\212\310\274{\375\032=R\241\240\274\364\245h=\203\207t=\250\033\325\274N\r \2757\305Y=\301\240\205=\247Ln\275\342\253\006=\007\003\333\275\270c\230=\013p\005=\376G\321\275\253\274\"\273\375\255\333;\354\204\316=Mw\370<\346\230\006=x\254\311\274\326\376\035\275\374\306\331<\n\010\247<:\247\273=\366x\r\275\362\003\007\275\222\363\351;\372\006M=p\177K=\277J\025\276\344r\302=#\347\215=p\343\262=(c\256=\300\263\211=\204\"\215\275G\255\037>\213\323X\275\241e\243\275\352/\001\275] z\275\364$\365<\276*J\275GED\275\376g\210=\256\212\222=\024\333M=/\036\315\275XD\301\273\225o\214\275H\262\010\275\370g\340\275\220$n<\022\354\346\274P\352\342\274\370|\254<\366\277\274<\311+G=}\\\234=\004W\320=\320U8\275jn\312<\267m\255\275U\024w\275B\227\377\273\n\232#=\017\345V;:\177y\2749\333\206\275X\213[\274\363m\264\275\323\327\033\275a\246\320<\231\327p=\336\260W<d\316\277=\245\341\317<\022\267\343\274\252\373\355=\356@d\273\3551\220=O\222\242\274\006\362`=\337\017\241\274\312R\352\275\300z\300=\356\337\361\275\270k\374<0!\202\275\3007t\275\001}\n\275\253%G<\335\007\032=5\312B=\233*\234;(\346\241;\206s\271;\002J\355\274c\n\247\275\204\200\304=\300j\215=!](\275\230\214\237=z\246\035<K\021I=\233\365\257:\347a\031=@\255\223\275LS\345\275\3715Q<8\2453\275*L\311;\365\350\022=\3703\037;\207\233\232=\312\"\246\275\021\272l\275\335~\326=I\347-=N\301\211<\024u\023\275\232\352:=\253\333h\274I\306\362=\237\002\264\274u\323\276<\244\026\203\275\242m$=\201\t\323<\363\267X\275\207\304\034\274\025KL\275\rVy<B+\r>3S\237\275\023<\306\272\246\350\250\274R\263,=0\347\016=\250}\337<\321\215\310=\227\274\243=\242FJ\274\373)\355\275\277E\334\275D5\376<<\t\r=\326\\\304=Y\300\007=\371\360i\275F\264g=Uq\236\275\273\013\\=\214_\302=\346|\231<vg\267\274\253\345`<\353\320\r\276\204Y\207=\006\305\266\275\351\026\245<\220\034\342<\373U\343=\331\255\226<\323C\312<\221ve=y\305\224=er\334\2744\362\352\274\034]\375\275\364uE=\334u\257\272d\305\352=jC\205=\376\ta=\331]\036\275^\017\204;\360\256\002>\276\201\026=\365\307\207\275\271\037b<c\337\222\275x\202\230=G\347F;U\213\324\274\275E\241\273\270\221u\274\016\306E>\363{\246<Yo\227=\323\3110\276\325\3024\275\237\327=\276\313V\014\275\302\304\272\274\252H\007>\223\347\254\2748\267h=+J\243=s\261\255:Td\375<\253k\032\275Y\025\202=\264\026a=CM\275\274\006\317\200\275A,\241\274 \035><\355z)=\340\245\235\274\371\317\000=\021g\n=\211m\226=\3607\014<_7\303=\033\255x=\231\324,=\361\242\274<\352<n\275+\350\005=\370\270\310<\266\027\340=\0249c\275\200Y\270\275\277\n\251\275`\322\020>\321\307\254=&!\'\275\373\265\324\273\240\236%\275\030\312\232=\226\267p=a\013\216\2751c\314\2754\035\320<\360\303Y=\002\263\202\275 ,\237\274\n\316\273=\343\331\243\275\277!\000\275Es\253<%mu=\245Pd<F\274\t\275\314_&\275\321Fs=\233\315\210=\314\322(<\r\261\254\275\t\274\215=S\3563<?\364k\275Jj\\\275\002\220\250=\'\214\025=\227|\241=<Dy=\013e\256\274\035\313\232\272\365th;\271\253\320<\023[\252\274[#\003=\205\363\016>\343\312>\275\026\243\211\275\270\nx=l\030G\275\320ot\275\361\\\325=\227.H=\201\034;\275\030?\007<\213fp\274\353?\264=\331\216\235=-\227#\274l\036\226=p\330\215<\244\031#>\354\330\277\274\305Q\032=\317l\251\274FVJ;\337&\312\275\324\017S\274K\260\357<\266\271x<\3449)\275\220=6\2739\004\273<J\026\010=\321\346\244<\356\331\017\275d\333%\274\267\356\002\275\245\224\236=\341\310\312\275H\317b\275\016\032.\275`\357\333\274\303%\360\273\357\342\276\2757\350\2329p\336e;\276\035\027>\2673\246;\242\036p=q\262)\274\202\n-=\332ro=t\235`=\362\273\034\275\r\021\r>\313\334\264\275r\235C;@\355\254<\022\230p\275\025\241c=\210I\022\274\032\314\224\275\347\243\331=mm\337\2744hD\275#Q2\275\025\243m;\311.\206=\233s\023\273\341\023\223=\010\021\271=\n\223\'\275\035aS=/)\307=\014t\\\274\202\376x\275\232dZ=)\t\231\274\0310\305\275\331\376\353\275\332\322\367\272\226{\370\274k\204w\275\356\330\027<\221\357\021=\260R\206\2732\232\003=\336m\014\274\267\311\223\275\317I\204:\205Xt\275\352O\207=\213\257\034\2757\224R=\250Z\207=\005q\236=\312\"\022<\376\021\t=\347)z=\233\254\251\275\322\326\360<\016U\037=\204\235\217\275\341\334O<X5`=\344\213\314<\244a\266\274\004H\271\275\334\r\002\275\220\010\340<\214\277\335<<\245\223=\320n\335\275\010\346J=\370C\267\275\221\252\231=6sd=\301p\027\2756\242\337\274\320\030\333<\317a \275\373\254&<\213\203\230\274~\240\346=y\257\005\275\364&^\275\2500\027\275\000U\2626\335\016\353<\235\250\220\275jn*=\322h\255=\326\017\004>\257{\211\274h\336\027=\"\313\013=tie=~\307x\274\264y\214;=O\r=k-\215\274\014\036\267\275\344S\023\275\237^A\275>!\034\274\373R\276\275u\r\365:=\332\227\274<zE<,\333\270<\313\251\203=&\312C=*n\322=\212\360\305=\236\235\273=\222=\202\273\327M\222\275\204>$=\014\261\t\275u^\334;\235\014\001=4\227\320\274\224i\226=\010n\267=\307\201\252=$\204\014;\312\033\211<e\036?\275\007\251\212=\277\te<6,\014>\337j\270\274m\264\035\275X\226\271\273\367v,\275L\022G>Y\366\'=\373\"\230\273\202\010\310\274\026\203\353\275.\376R=\246v@<\3473\243\275t\2531=>e\265\274t\032.:\224\341 \275\206\303\013<\341[\373<\341<\312<\303\366\327\274\224\226\237;\303\346\234\274\353\3366=\037d\363\273:P\316\275\342E\351=r\365\231=\342r\275<\272`\210=\347\'N=\335\317S\275\256\245\032>\367\0323=\311\342\206=N\213\245=\357~\316=\234\336><\177\250 \275\0038\367\273\312%\214\2742r\262<s\256\225\2751\331\334\274D\016\203\275.A\226<\2317F\275\247k\003\276y]\030>\213\033\352<\325\327\270;\241\354x=\252\364\002= 7)\2758\366\325\274-\236\310\275\260\320\r>\232[\226<\277\353\226=92i=P\235\303<bDU<\275)\236=\215\264\n\276\303s\026>n\272a\275\217\211\022\275\336\326\347\275\326\014\337=\307\242d\274\324d\000=\213A\003\276\027\241!\275\331{g\275m\354\213=\254\233\347={\256D\275\256\n?\275W\363\270\274\373\376\345;\361\266\027=\234j\276<\270\321e\272g\014\035\276H\336{=\216c\207\274\351\323f\275\367\305\256\275\305B\320=\342\365\362\275V\235\206=G\216\212;x\215\003=\004\032;\275ln\230<\316o\032>\r>_<\3760\267\275M\027\031=\2565N=\312l\305\274\033\270\336\2752r\303<K<\203\275\351\350r=h\360l=\262\341\316<6\236\260\274\376@\243=\275\0320=\"\036L\273\205\353j\275\0237P\274{\353\220\275\275\320\207=H?\247\275D\214\243\275\370$Y<\330\266(=\264\022\263\275\333\302H=9\000a=\352\362\325\275\305\2169=3\243\257\275E\326\224=;\005c\273M\231\022=\322\253\311<R\304\253<\023d\306\274\370*\320<\266\301\374\274w\275\351<\000\273l=\243\260\313\275\206S\273=r\"\037\275\017\307\267:\326\021\260;\022\\m\275\3212=\272\260\271\'\275\233\206\330\274\200\035\301=2Y\304\274\005\311a=\313\203]\275q\361{\275m\345`<\373\207\031\276\362;g<\214\027Z\275j4\365\2722\222\020\275oV\207=.1\206\273\007\272\301=\363\364\270=>\220s\275r\276\203=I\353\240\274\325\362L\275\010,\211\27568\313=q\027\224<\3277_<\222W\247=\035\354\264<\361\340\305\275\233\t\311\275O~\023\275 \371\032= \024\301\272\201*\337=\264\203\322\274\200\027 \275\252}\r\275\307\317r=6\3252\274i9h=^\202\224\275\244M\367<\336\\\353=\2573\023\275\021\302\231\275\273H9\273\376\311\232\274]\371\322:\\\343\356\274b\026\214;\032\262\021=~\020\216\274\332\374\230\274V\330\203=\001aB=\225\022M\272%\030\312\274\035\240\024=\265\257\332\273,\002\230=\233Z\276=62\244\274\237bG=\225>\231=\207| \274fp;\275\n\017\243=\301l\316\275\261\303p\275i\210\177=\022\320\002\275\3675\261\275\206\346\263\274\372\243\312=\227\ro;#\224\030\276\333E`=\'\350\266\274\001\241q\275\354\003X=\000\334\206\275\241\355U=\207\334\200<\201\304\222\275\317\017\324=?nW\275EXl=%\353\275<\n\017d=\377\302j=\340\345\207=\023\212\310=\371\276==\031\247\244\275\347\326@\274\301\340-\275\300$Z<@\0065>\371o\305<2\215\223\275\347\335\230=\372s\322\275kl\222=\tEV=IfC=\016\256\257=\232`=<\341\314n\275q*b=i\230\035>c\217C=\027DM\275\004\274\215\2746e\032\274U7[\275\036\256\201\274^BT\274\325\267\232\275j\254\021\274~*_\270\205\212\277<\211\014\016>\222@\232\275\227\010\324=\272\300\206=/@\035<\t\302,\276\260a/\2754-\304=\221\246\007\275\206+\007\275\036\3139<N\241\325=\227C\243=1G\241:\260\320\005\274\036\327\207\2753Q\206=`6#<\300\335\307=\377\314\354\273\312\242\'=\336(\013\275>\304u\275\000\022\337\275R\204\305\275\034\026\245<\000\251\003\275X\240\310<\231\274\242\275adM\275s\007Z\275\325\367z\275\000b\330;\030\371\2409\202\312\031<\325\033p;\256\256\355\274\362{\232\273\344M\372=\272\032\215:\240\272s\274rpj\275\312\272\220\275\304J\240\274\014\256\235<Sbt=\324\037\000\275\240\333\252\274\310Iz\275\265\027b\275\320\023\343=\314\276H\272\320\315-\274)%\275\273J\322\230=W\376\307\274@0\n>\251?\224=g\331\355<tm]=\331~\252=\360~J\275\262\332\375=F\033\353\275\276:\376=#Vo=\021\223\006\275\373\n\327<Fd\001=|g\017=d\271*=\007\324=\275 J\235=\214\267z=Vk\215\275&\300\315\275(\017\314\273<\005H\275!\003\032>s\247\265=#\360\002>%\237\205=vbn\275\251\316\254\275Xk>=N%\267=\002\364\341<R\357\202<G\200)\275%\341b=\243\202\024=\330\353\262=\371\263\345;u\225\214\275W\343\227\273\016S@;\025\310t<\341\217\000\275\320\314\264\274\212!*=U5E\275\014\005$\275\027U\221=\217e\363\274\370\242\320\275$R0:\262\3156\275\203j\'\274uS\004=\352\244Z\275\366\034P=\300\364\226;\254U\317\275\265\223)\275\230\005@=e\3762\275j\247e=\0211+\275\267O\035\274\237T\032\275\'\235B\275\305\213\222\275!^\347<t\013z=\334\010\373=\360M\242;p\215)=\3668.=\265\036\215\274\236K\303:\300\245\246=!M(\274c\323\023=5\\\314\275\263\316\204<gyf;\242\226\375=\210],=\033i\031\275t\316\021\275\215u\310\275\362W3=A\344U=\002\367\310=\366\t\272\275\361w\243=w\237\301;o\0208\275\035\344P\275V\037\252<@\267 <\264J\334\273\013&\215<\315p\314;<\0274\275g\346w=\277+\236<\335I>=*\250(\274;Q\334\275?<g=\313\213Z=n\000B=\353\251^\273\271\274\374\275\377R\340<\326\017.\275\3612\312<\343\315\234=\260\352\203\275\205\r4=~i\273=w\335\341=\361]\200=Lyp\275\273\020\210<\034K\222<\344+\355<\034\273\307\275\354T\004\275;\320\305\274\302\242\373\274\2278\323\275v\252\254=Z\377\033>\335V+\275\233A\237\274\263\264\001<\333\016\302<>\342[\275\343\311\'<\256\377\031<\325\2318<\201\222\002=\320\2228\274F\226\300\272\312!\231;\314\347\352\275=cH>\"v\201=\241\232M\274\375\350\357\275\225\245\000\274\2738[\275\216^\002=\256\312\210<)_\210\273\"\024\317<\243O\3144`L1\273\003\016&\275\343\007\352=f\276\317=@\243\230\274_z1<\345\262d\2751d\007\273\333^\006=\336\225m<K\177\360\273\200w\202\275\'\354\212<%\360\026\275)`S<\254\366\014\275y\321h<\353\234G<\203\253\263\272\277\206w=\246\272%\273?\032\266\272\005#\202=\232\245\233\275ci\304:A\245\246\275+TG=\030\006\020\274\022G\335<;U\331=D\300J\275\240-p=\262\202\300;\324\013r=\000\027\212\275\242\342\006\274\007\364\266\275@2\030\276cN\213\275\351\373\215\273\017&\312=\366\226:\2749\376\374;C\205\352<1\346G<\204=\206=\255\270\224\275\371\243\030=\013x\336=\207\276\315<B\021m\275\264\346\201:\277\262\022>\306o\256\275<$\245=\201\223\313=\257\352\331=\316\365\333=\303\n\351\274\026\3075\276_r\365\275\371\236\222<!\265?\275A\2457\274\245\036\344<#\217P\274\033\213\227\275\005\337\013\275\335\333\220=%\017\363;\225L\037\276\313\350\304\275\203\346\311\275S0z=\224\276C=\3738H<\211\253\016\275EW\037\273\324\347\377\274\214\365\303\274\352q\345\274K\035\355\274\236\206\356=\351i\365\275\330X\017\275N\032*\275\374\255\237<N\t.<\025\332\365=G\234\016=n{\340=.\314\355<\313\226\331\274DqU;\275[\223<\373\360\017\274$\212p\275\336z\245=\355\216\251\275\266\021\220<\221\257\312\273\223\212t\2755\033\242=\323j\366<3\354\233=\250\313\342\274De\304\275\353\352\021\274j\305U=\322{X\275\334\217-\273h8\217\275\272\002~=?\262R=\020\370\343<\022\301\332<\201B\307\275\035J8\275x\207\376\275\263\234\023\2745HD=\215\227\271<J\311\035=\366N\211\275\016\0373\274\3172F=\206=\215\274\316\004&\275\302\250u=_F\343=:\357$=\322\263\n\275\221\203C=\031\333\302\274\200\231\210\275\332\321\372=\313\231Q\275\247\016\305\274\007|R<\225\226\355\273\263\350\016=\235o\016=S\241\234\274W\331\333<\333r\265\275\306;\341\274\255w4<\246\025\336\275\037\244\266<\240\327m=\346^\204\275\352>\333<{_?<nX\237\272\211W\256<\023\2025>&\026n<\n\255\036\273\276\317\275\274\336Tv\275\313z\020>e\355\031\275\022\351\"\276\213\366\024=\365\223\310\2743\250\032\275\021\3638=\032F\246=\346y\354;\211r\351=uq\324\274\251C\302\272 \225\023=LFp\275I\032\316\274\323}\247\275)\031\002\275\317u\307:\232\226\005=\371\355\222<\302W\274\273f\254\360;P=\365;\224&\030\275\334\202\346\274\246\316\320=\335\236I\274\360\273\345\2732\224\326\275\371\374\270\274\373\247\024=\t\213f\274qP\315<*6\234\275/\351\337<\"\265\241\274\376\360Y\275\264\204\303=\373R\263=\375\325y\275\024\341\"=\202\206\320;\311\215\342<\255\002\320\274\373\335\231=>\307u=nj\247\275\016\306{\275B\343y\274\035,\316<N\014\177=\016\337\031\276h\3129>\232\213G\274\003\254O\275.\325X=\006\033}=\223\360\255;|\250\002>\373\002h<\345\035\017=E\007\"\275\217\207s\273\222y\007\274\320\340T<B7\362\274\253\2321\2751\305e=\3722\362=\343l\201\274g\034\230=\220\224\210\275z\300p\274\2259\206<B\352j\275\331\234\366\274\026\335\005>9\330\271\274\027\024Q=\227n)\275\377mE\274*\010\370=6i\247<&\234\205\275\274b\367\275\311\321U\273e2\375\274\206\336>\275\371\312\234\274\214{\253<+\330I\275{\307\233=\351\270\274\274\270\253\366\274\030\313\326=\353\330\034\275J\025]\272\2401\212<0FX=\251\213\200\275\230\r\t>r\365=\275\316Z\226\275\325\240\211\275v\240\252<\304\357\033\275W\355\221\275\370\032\221<d|\014=\035\317\303\273\222\024\005=RB\210=fS\202\275\350\252\017<\215|\014\275(\221\263\275\311\227\025\275W\023\206<aq\257\273z\313\007=\244\370\014<\306`\311\275\241 \210=\327\2737\274\367\241\240\274\243\302(\276\372\345\342<\003\314(\274\271?\306\275\372\204\360<\201\352\264=\372\217\"\275\242\226\001=\00483\275\226F&\276\352\r\357=\205$\267:\265\333e\275J\324\261\275$\254\217=\221\343\000\275\254\021\326\2742W(\2758B\210\275\351\221Q=\312\217B\274WH\317=|\273e;[\312)\275\330\177\224<\263\376\270\275\377!4\2756\251\023\275\333\222\366\275[\305\362\275\307sW\273d\246|\274,\247\206<\250\222\247=\020\373\333<\217\225\002=i\316[=\017\215\261<_\034\320\274\301\036\322=\270\333\026\274\177\235\322\274\233$\004>\215\216\341<$\321\233=\3339\314</\033\230=\332&r\275\023\363\212=\267\213\372\274k\345\341\274\317\0325<\357e\006\276\007\017\250=.\225!=\211,\035\275O#3<K\372\245\275\220\002\244=[\2278>\227O\266\275}\016\216\274X\024i<e\3445=*Ne=f\321\212\273?\204\n=tRO=\276*\021\275\333\320\216=\026\0163\275\251\007\204<-\377^<tk\201\275PoI<\200[$=S\204\r>\236\362\r\275+5\367\274y\301\377</\253\231\275\266\025\204\274\207\257\343<\325\206\323\275\210b}\275\311u\244<\266ys=A\254\352<P\265\033>\375\256Q=hu\025=\265O\035=6\275\200\275i\034#=\211<\366<m\"\377\274\344F\346\274\353f\317;\3676;\275s\343\013\276\312\034\036\275\366v\356<\220\031\232:\024\367.\275.\325\014\274\235P\325<\366L\277=\210-\214\2734\233\237\275\267\324d<\344\024\243\272\212L\252=H\027\357=!\275\227\275\337\325\273<\274;\217\274\327\367\204\274\230\003\251\275l\270\375\274\361\243\002<\373\307V=\223-0=,F\351<ut,=\232\353\232<N\246\177\275\030\370B\275Z0B\276 f\342\274\022\302\013=\276\260\202\274J\366\014\275\211\021\302<\r\211&\275\330\207\023=\243\316\341\274\032\364\005\275\006\245\014\276\340*\\\273?\021\211<)\032#<\026\372;>\231\020\267=e\220\021=\317\263\035=\216\027\220\2750\205\314<\361\304\034\275\033\305\324=\215O\221\272\006v\257\275\243\360(>\203\321\212\273\034\3767\275{\331\344\275\005\313+\275\037\314\225=\337v\026<H\337\036\274\340\260$=\262\250y<x\375.\275\014T\351<V\273_\272P\023\325<O\247\366\274K\260e\275u<\262<\021\244\035\275\267\0232\274\246^\t=T\n\354\275\207!\215\274F\033\267\274\304\347*=+\002{=\312\023\020\275\242\215\267<\021\372V\275\225\241>\275\375\201\214\275\244\300\200\275\023\000\300\275,\311\200\275d\t\265=hky\275r[&\275x<8\275\214\344\332<#\346\023=`]\273\274\340o#\275\3303\276=\240\265\276\274\207b\026\2756?)\275\372\366\217=Gz\203\275\221\367\031\275U\321\244<\033s\342\274\234TR\275\204?\344\274\353\014;\273\333C\002\274\250\3325\274\302\r\215=\032\352\260</(\033=Z\021\006\273\177\021\324<N\303\323\274d\313\212\275s\363\013=\3272\\\274\037\020M<\223\013\232<\340\250\177;\273A\003\273|\010\264\274^\213^\275\230\315\265=.\214\027\275\016\217\002\276\233|\003=\023\216\231;\251\212\367\275\t\021\331\275\"\n\204=\266V\303=\335\006\367<~\204Y=#\032\373\274`8\250\275\264>O\2749\021\240\274:a\202\274HO\003>\215<y=W\331\256=e\025D\275\007\022\312<\223D\336\274I(\356;Yb\311=mq\212=\271\347#\275!]\311\274\205ho\275\246\002\351<\230\352q\275FD\334<:\222k<4\227<>F\343\252\275r\232\t\276s\321\215=\205\236\202\275&O\001\275\272\355G=\203\264\026>\000\000\244\275\315u,=\362\0064=\357\235\366=\207\021\343\274\203}\360=^\313\251=\\8\006=\354\275\232=Rz>=P\217\032=\263T\307\274T{A\275\037\334O=n\317T=@\274\256\275\331i@=\353P\003\273\311\213\035\275\374\204\342\272\206{\315\273`;_=\207}\022\275\213^\267<cI\010>;?\262;S\227\300=\351\314\305\275\260*\367<\031\245\005\275\220\237\237<\322^g\275\007\270w\274\177A\305\274\232\3546\275\005\307\240=\232\027A<T^\254\275\026\371_\274jPf=B\030\022\275G\241\226\275\264;!\275;\253\222\274`\205\243\274\335\353\000\276\242\223\035<\270\263\025\2759\333\216=0B\021\275Z\377\002\275s#\347\274\262\301\371;\344\337\236\275\271r =\355\367\267\2747\302-=\253\311\336\274\204\202\220;u\032>=\023?\231<\274s}\275\256\316\334=p\273\251=\260*\260=\343w\341\274\222\276\274=5Q\331\275\355\251\236=\235\326\341\275\225-\341=\035\277\235\273\215\"\231<%\206\202\275\213\241\004\276[\231|<H\233\021\273\351\000\261\274\003\200\314\275\211\257\261=k\244\377=\311\2454\276\213\\,\274\014\367\231\275\314\357\266<\034\250E\275\010\325U=\316\370\217\275\036F/=\301\004\201\275\216n\276=\350\017\247:#\375\230<\036\243\217\275\346\326w\274C\327\300\275t\017A=r\372u\275\2610\204\2733z\266\275\241u\335\274\010\014 =\264\262\246=\356\302D\275\353[!\275\243\224\014\276\335b\003=\220\374\215=1\024\212=V\204\236\275\214\241I\275\320\300\253\275\272A\202\272u\312X=V=\237\274K\035\366\273\343\343\210<\207Y\305=\014\361.\275\317\313l=Q\212\345;q\2565=\260z\t\275\245\373\267\272\026\333\205=\032\361\255\275\332k\035=2\257\267\274\312\212\337=\355\364O\275\333\351 \275\re\014\2755\330\021\276\264\242\365\275PT\245\275b\017H=Ml\362\272\353\240\251\275t\341\203\275\225f\r=\320\224\242;\031\377\323\274\nP\325<\335\352\210:\342$v\275\317f6\275\"I;\274\205\331R<\177\016\014=\275\346\275\273\242\351\002>\305/\217=\237\036r=7s\027>\027\235\201<\215\001\320<x`\372<\\G\247\274z\014\017\273\302\215\327<\020\331\036=\311\363\215=\r\341\000=A\005\221\275QBZ\275\331\263@\275l6\370\274\234E\231=\370N\213=N\226E\274i\300\002\275<\020\036=L\370\026;g\251\376;U9s\275z\272\225\275-J\303=\201\000\256\275\216V\320=(\2608\275\332\217\372<\256\033c\274`\266\033\275\214\235\035<\360\215V<Q\200\251=\260m6\276\314\327\201\275\361\022J\275\341O\202\274\2600e\275\301\374\'\274\024KB<^\365\031=\331#p\274\316%T\275\007\254\246=\243\020\245\275\252c\032=\200\237\322<\267Zy=\260\235t;\017\357\037\276\004\301\220\2753\353\373<\013\260\003\276\315\331\220\274j\033\232\2744\357{\275\225m\034\275J\013\275\274\227\254\301\274.\022%\275\301\353\346<\376\177\331\273\002\017\036\275\006>\355<\2037[\274\036F\016\275\202 \t<B\260&\275,\312\';XG\024\276\367KO\275\221\323\370<\213\025H\274=k\003=:@z\275K\271\020\274\200\226 \276Z\221\306\275\303\224\356\275\301\000\351= .\277\275o\234]=\321!\206<\017\305\264=\243\361<=8\324#>\037o\275<\355\372B=*\343y=,\200\177=\345X\254\275\000\211A\275\260sQ;\034\316\020=\021\330\320=\033q\316\275<U\334\275\261\235y=\327aU=E\341\211\275\234v\220\274\201\3137\274Q\231\320\272\377\363\255\275^\221\331\273*s\027=l\266\035=\235\352\010\275\363\245&\2744\362t=\367\327\260;\023%\210<Y\223\";\020t\264=\270\033#\275Nq\207=\320\363v=L\373\312;\352U\264\275\367\224h=@\255\346<v\007\000=(\\W\2751\371\344;\230H\254\275c\352\234=G\223.<\302G\300\274\032uc=\272{L\275\355\347{=\373\323\206\2745\365\031\275uCa=Mck\275\353\313\264:\302\247\361;\277\264\263\275z\372\200\274\r\014a\2757\252\340=\\\357\254=\243r}=\'\323\253<\346Y@= \237\340\273cy\346\275\000\353\370\274X_\233\275\034\221\372\274\347*/=\340<\266\275d\332\243=\234\226*=\223\220\273\275\007o\'\275H\025\222=7\305\370=\222\276G=\271v\212=\362\371\203=K\371\331=N\306\221\273\227\\\004=\216\300\213\275\274\333\240\275`\236S=\263B\214\274$\023\025\274\324\3343\275W\243\n=m\212I=,V\320\275F\032y=3 \277=\031\251\227\275\202\252\'<%\2015\275%\254j\273\362\365\221\275.A\r>\252\036r\274(5/\275\257\021\253\275\323\272a;e\264\367\274\277\235`=\240\251x<\216\031\346=\250x\245\274hQ\255=z\006\202\275\341\340\001\275\356\010\005\275\035\365\225\275\032\323\212\274\273MG\275i)\313=\204\364W=\225+\035\275\346%\030\274\364^\264:\222\202A=\252^\027:vy\252\275\232\200\252\275\272\337\212\274\314\214\310\275l:\006>\362\220\002\275\312\370-\274\366,\306<\300\205\314\274\004v\221=\373\372\021\276\017r5\273\202:\255\2755\274\213\2756B\251\275\017M\375\275w\243\310\272\010W\310\274\377\233z\275\223y\002\276\031c.=\332\023O\272\030\2521\275\244\347i\275\305H\266=\347q&\274Bm\352\274\243\020\030\275\"j$\276\001O\354<J\276\220\275\235\361\220\274\270\332I\275\206\235\242\274\031_)\275\2122t=_E[\275Oh\037\275\307\270\000=\0249\201\275*\354b\275\255\033\373\274OL\240\273\320\000T<\002l\214\275Cg\217\274\311w\017\275\323\210\022<\200\251\230<\217\243\214\274\340/\346\273\030.?>.,\376<\300\245\005\275Y?\216=\243c\360\273\362\327\'>(\334\211=\014\250\3704\250\326\020\276\005\305\223;\234]\230=\r\300w=\375\367\024=@u\256\2728L\376;\310\224\t<\331.\304;N[\246\2759\376\023\275W\312\202=\"$R\274\320\326\315\274\223p\244\274wH\025\275\022LQ\275\274\356\242<\350\276\246\275\260\354\214\274`\362\262:\001\347z\273\036\272\202\274\276\352\\=\205\372\324;\000\317\200<\223\315\215\275\334\031\201\275\235{\t\274\257A\272\275\241\251\270:\205\364.=\347\316\\=S\023#=d\023\020\275\013=(\275\273\241\252\274HO\263=J\307:\275\313\244\301\274\252\033R\275_q\252\275\t\307<\274w\363\250=;\004\035=$\336l\275A\\\300=\013\217\303\275\004\371\267;\000ZO\275bM\230=\'n\252\273\337\005\311=y\301\231\275\363\2003=g\205\225=3\352U\275\223\324!\274\352@\017\274\276\275v=\036T2=\213\343(<\230\265\235\274\204\331\237\274\313H\322\274T\273\340<\301\303\267=\305\024i\275\325\335\356\274\251\274\251\275Z\021\216\275\357\347\326<?X\227:s\201\332\275iR\255\275\244N\225<\352\354\275\275_\327\306\274N\374Q\2754Ls\274\275\315\212\275\301\022\010>q\357\232\275\335\241\'>\364\247\233=\347\020\324\273\370\276(\276\261\310\273\273U({\275\211BR=V\252\226\275\324\365\311\275O\250\025=1D\020=\205N\031\275L\014\236=u\022l\274FT\254=\374\372\206<\324\345E\275\260\302\026:C\3750\274\367i\264\275\323\310V=-\377F<o\216f\275!\335\201\273r\2672>A\336W=\026\335/\273\303\236\231=\254\213\201\275\250\354\331=h\230\214<![\246=2C\243=~.\246;\271\232\025\275E^\367<c\237\335\275\207[\013=v\206o=\354\316\277\275\312V\"\276\334\306z\272\013\345\024<\220-\345<\260L\020\274IPG\275\274\212\276\275\365\033\311\275\342\273j\275\215\n\\\275\340\210\204\275\324\003\233=(:\236\274\034\033\005\275\343\330\302=\307\230\266=\201z\225;8\207\202\272\232\264\245=S\302\231<\310\344\267\275\250\213\005\275\240\233\232=\330\323\277\275\316\234\360=\273\005 =@\030\272=\355\373i\275|\237=\275\344=_\275\330\272\342<\323\375\313\274\317$0=K\217\203\274\350\350\344<d\004d\275\250r2=\315\006\n\275\202\362\017=\222\017\005=\227(\343;_\235\357<\364\'2\275;\220$=/\352\241<\336g\020=2\025*=\355\222\016;\340\227\254<~\346\264\275\365\0141\274\301\333.\2753H\265<dQ\262=T\026\267\275\233\2554\275\375n\220=w\274\363\273\306\254\252\273\256J:\275\033:\205\275\030\024\336\275\"M\237\275\231\010\022\2756eU=\t\317{=\"\312\321<\201E\004\276\326\203\345\274\323\376h\275\213\273M=\311\321\216\275)\032\336\274Q\333\216=?Uv<\035\353\256=\027\0328=\341\321\370\274\'\375\222;o\306p\275\324w\007=\3150\312=\n6\022\276\022\327@\275\231s\343\274#\225\300=g\341H\274\326\302\034=\031\322\256\275Q\301\031\276y8\241\274\227\217?\274\323a\255=\3122\216\275\211\301\024>ZE\347\274\307\225\002>\373\254\357<\3010\223\274\027\021!=\373@h\275\314|B\274\344ot\2754\357v\274\226\260\n=\310\002\270:\257$\232=\021\355\017\274\r\247\357<\355\tO\272\220M\005>\260Hq<k|\021\275\024[\255\275\036\355\360\275*\313\207=]F\350=\203U\023\275I\323I=eH0=\240U\223\273\377\254\351<\302\340\264\275}\246n=\0364\302<\031\320\317\274\252\214T\275\010\267\201\275T\361\034;\351\366\270\274\207\275\003>c\331\372\274,\247t=\211J\277<\016\344v=\322\243\307=\001OA<\273l\277\274~\364\342<]\315\376\2741\220\210\275<\203c\275\214s4<\210\253\031\275\030*\252\272k\243\010\275>\372k=\374\nx=8O\307\275\374\350\316<\207R\322\274W\353\260=\333\315\006\273\363\241\272=\266\362v=g\370\003>q\006\232=\203\322u\275\341;\244=9E\335:\370R\020\275QXX\272u1\031=\365\252,=\203\264\372;*\375O\2754=\237=/\000\210\275RS\020\274\234\233\250\273\342,?=\365S\230\2755`\240=\327\272\311\275\367\036\315=\337\202#\275\353\037\356\2742*\006\274\216l\204\274\035h!;Y{\212=\2367\302\275\345x\231<\335\303\177=6=e=\177\r\225\275@Q\345<\245\2400=\311r\017=\241\021]\274?k\331946\326<\010~\203=\273\352Y\275\001K\253\275\374Z==\223E\017\275\362\260d\275\230\331\355\275\355\333\214=\024\321]\275}q\202=\032JD\275\004 \205=\256qs\275i\340%\276\233j\223=br\306\274T-_=\322w\260\275\357\262\230=\030}\307\274\241Mz\275\252\332\206\275=t\251<\025|\262=@D:\275*\034x=\363\225m\273\221Q\024\275\314\030y<\035\230\366<\310\356\247\275\224Z\310\273\371+\260=\256\377+=\306\354\235=\006\354k=\007\352\333<\351u\031=\273\354\300\275<\262^\275\370\003a=\317{\273\274\374\331\007=\226\335\347=\\=L\275\034\nJ=\317<t\275\317\216\253=\334\330}<\314F9=\006\3565\275\271\325\227=\311\357j\274k\236\223=\336\'\353\275\235F\033\276]x\246=\373K\245;i\303Q=\020\'%\274\010\357\026\274\356\007\313\275\277\246\230=\002\372\222\275\255\322o\275.\327\270;\305\254\220<j\331\223=w\355\021\276\304F-\275\210Nr;O\307\255<\034\3729=\305\255\225=3\233q<rxQ;\tpq\275B\207\337<\t\240\205\274\025\222J<SU\222\275\305\346\322\274\210n6\275\264\216\002\275b\350c<\331k\273\274Rq9\275\304\213\370<\351\317\213<\314f\354\272\315\037n\275\216\216\214\275=\325\001>l\013\202=\357\002(=\277\363\211;+\355\027\275\223\351\005=#\203\371\274o\306\202=\355\305g=\037\225\347\275<\272l=\033\366y\275W\261^=\027\030\002=\007\355$<_\206A<|fa\275<f(=\217\332\247=\\i\266<sY\231=\026\256\225\275\256\203\361\274n-/\275\346\"B\275\342\010\234\275\327\344<<0\362K=\363x~\273s\2745\275\010\006\213\275\346\024\330\274\021N\374\275\321\263g\275Q\343\201<\265\235\311\275\314\033\224\275!v\265=m\254\010\276B\370\210\274\302\263\223\274\254\223\207;\341\031<\274\2016\243=\225\023H\274H\271\033\275\347O\324<\324(\327=,,\277={3\033\272[b\237\272\367\346\244<:\247-<\241F\225=&\327#\275\257N\366\2743\353y=\371>\352\275\304G\250\275y\322\324=\253<R>D\330\356\274DIP\275\333-D=eo9=\007\356\325=0\241j=\317K)=\315\000m\275\377T\212=q\273\205\272\222\377\350\275\004R\006\276\323\035\000\275\263\275\203=\221\332w\275J\020|\275\205\313\026\275\331\351L=3\277%\276<f\236\275\264\254\013=\233\306\276\275QH\273<\276\356\225<\003Z\207\274\r\366\240<Cu2<\263\2610\275\314eQ\274I\342\036\275s\324\031\275_\001\255<pt\311\274\364\230\034<\004\026s\275A\025~\274\374K\261=\271\276!<\240A\023\276\255\000\211<\217\006\344\275Ja\231\275\264\325V<\301\357\027:\352J\316<\210\341\227\273hl\266=j\305z=\177\365\345\271o\241\232\275?8&=\0053\225=x\'4\275\270\340\035;\215\'\357=9\200[\275\020\303\223=DV\210<\227.0\275\t?G=VA\216\275\2238H\275a*|<(\352\353<\316O\373\274\312I\026=\346\354\337\274z\3223\275HW\010=\334\350\032>\261?3=\n\204\243\275\273\364\033=\370v\002\275#\210\206\275\325\251A=\346\221]=\016\0355\276\374K\217;\255y\345<\002\241\021<\\\\\001>\337\032\227\275b^\014\274\366{\304=\342\376T\271\276\023\275\272\243\276 \275\345\263E=\220\232}\273w\014\365\275\216o\002=|\316\212=Y\233#=\347$\365<\300\234\222\275W_\247\275s\235F=\350\014\237=\215\351v\275\027\220#\274\276\207\241\275q\232?\273\340ao\2758\n\321\275\374\337\027\276/&T<\367\203\222\273GI\220=G\327+\275\226\266@=B^\276\274\307\357\033=\321\243\"<\326z\342<x\261\226\275\342\206H\272WG3\275\244\215s=\267\353\254\275\2424\277\275A/\344\274\233 \340\274\270^w=\321BO:T\201%=\nz7\275\016V\035=<\0269=L\370$\275\035\210\331=\233Z6=iG\n<\222\373\253\275\232QC\275\0261\001=u\021\233;\001\017\005\276\366\363\202\273C`\205=\276\\\210=\242\245\275=\r\373\022>zI\036\275\233\033\303=\014\326\010;\2464\300\273\022}3<\007\334\352=Qb\235<@\316\025\274\301Cm=t\247\205\275l=\233\275\017\307\210\273\000\027\200\273\323,l\275>q\344<\"*\217\274\305?\310=\334D\322<\237\207V=-\230\277=8i\021\275\342%\214\275f\305\017\275\306\212N=\317\241\274=eK\344=\356\265\001\276\313\230\271\275\033\231\366<\3231\306\274\350\2273\276\273\036\236=\3341\322=N\005\216\275\275k\002\275\363\026\273=Z\233\002\276Lk\211\274X=\n\275\337Aq<\3218\227=\247\302\022;\3346\310=\325\021\221\274\021~\225=\227W\327<\226\213>\275m\247\363=\257~\"\275`\340\367<\310Ud\275\346@\311\273\225\341\246<\345\322\021\275\327F\357\274\210\331M=8\321\241=,\3107=\277\353\271<9\345\021\275/:\306;:\312\230:\376\334\002\275cQ\013\275\277>\323\274\033\000k;5\016=\275\340\\\332\275-G\330<\236L\252<\305d@=\340R\266;e\330I\274D\346\361<M\201\004\275H8\273<\305\223\"\274g\321\377\273\355\224{>\373L\332\274tj\250\272\222\315<=\304\370\340=\r\014\032\275%\351\024\274\343D\235<\352\352\244=\331?\006=\300\210\271<\301\265B>qz\224=\035,\270=#pw\275\260i\251\275\223\013k=\324\322\020\275\014\330\254= \030\254<\241\210\026\274\362\022\266<\353\361\223<2\003*\275\244\254:;\002\031\005<E\366\207=6\337\232;\256\342\315\2730r7\275\277\344z\275\340N\346\274\341\310W\275\376(\263=\242}5\274\211a\262\274\3744x=\242\240\217<\201=(<\373\305\245\274E\\\343;\370)\343=\371GD\275\273*\034;\300\232\306\275\307\244\200\275\027\217s\275\037e\206<f\016\020\275\271\351\331< C\313\2758v\202\274p#\244=\247\262\260\275\236\035\177={\207\231<\252\270^=&r8\275\316\3419<\246\307\340\275\204\004\315\275\005\317\351<\371\250\323<E\241!=\252\177\303=\037\337k\275\314\344f\275\362hS=.\333\004>\331\024\311=\226\224\357=\333?\331<\333e\222\274\261n&\275^\237\010\275\215\237\337;%\274\200=\027\270O<7\024\316<\311\213\213\274\rK%\274\266t+\274\257\214\365\275\007r\251<\324\313\334<\306\251\032<Q\315\364=I\336]=e\250\023\275\267\255K={\203[\275^\252\223;\242\247\222<\350s\327\273\371\323\014\274\234\324\326<#\2211=\356\360[=\257\207\250<]\327J=\276\370g<\263s\002<X\007\323=\206X\370\274\'9\271=s\320\035=\325+\305\272\364H\211\275D^_=\206un\274\326\032\317\274rD\020>z?y\2754A`<\244\312\031\273\204x\372<\337A\267:#\260\177\275&\247#\276#\n\007\276\001?#\275\027\342\237\274\214\301\253\275\213N\233\274\332\267\260=\223\212\237<\226\333\312\275\231=\372=\266\313Q=\"\354]=~\376\223<\343\310\2649n.\360\274\017R/<\0311\261=1G\n\274f\261\264=\'\303\270\274\242\262\253<\300\204(\275\3329\273\275\371\352\275=\306a+\275\312\356\226\275\200\274E\275\236\3649\274e\367%\276\013\003\201\270Gm\002>N\253\335\274u\255n=D,\363\274\014C\201\275\214\\\212\275\247\252V\274\332\255\242<j\366\204\274\316\321\203<\341\361\031;\203\377\353;\202\371\237\275\367\341i=^\272#:\305\266+<\t\253J\271\3330F=U\215b=\035\r\231=\016v\257<\336\027/; \233K\274\224\r\241\275\025\270y\275\320?D<\355\323\325<\214\002\007=\266\203\211=)\242;\275\225\312T=\377yr;\261\221\350=[\310\274\274\240p\205<\220\371\265\275\364\310y=\317\307\277\275j\036\265\274\321\322\264<\241\033\337<l-\245\275>\360(\275\313\311\"\275\262K`<\005\236\275<\362V\375\274\232\356\326\275n\330k\274iK\227=\212\251\341=J\000\262=\010\334\303=\221w}\275\316\261\257\274s\211A<:\276\t\275\271d\022\275\013\313Y=\300u\n=\346y\022<1+\353\274N\225I\274s\2014<\221\001\313\274?\014\033<\231\220p=-e\226\274\250\224\305=.\261;\275\335\241I\275\310\346\364\274H{O\275x-\254<\322%k;\006\034\243<y\032D<\024\004}\275\253\2710\275=\355\000\276\321\223z\275\212\277F\275\334\3041\276\310\344\254\275\2353\017>!Nw=+\t\262<I\325\033\274\'\216\317=\355\374\036\276i\370/\2753\020\3657$N\000>\270\003\353\275+\373k\275\220\275\320\275\216\247\022\275\216\024\210=&\242x<H\341\201<n\020\236\275\341\276M\274\323\270\371=\310\'\336\275t\027\253\275H\374\305=\354\206I=\220m\205\275\213\231A\275\204l8\275+\334b=y\006\306=e\037\024=\332\224\361\275\017|c=\203\310?=\017\250\222;g*c<i\220m\273\031\317\240=\377`\301<&\'\364<\356T&=f\021T\275+\375(\275\272y:=9E\247\274\366\217!\276\264\217%\275\354\333\026\275\225\312\251<\274\003i\275u\300\341\275\316B\314=eA\230\275Jv\205;\256\303\200=\236=\213\2759\341\026=M2C\275EJ}=6\336\316\274\001\177\013>\024\312\212=:\273.=\246\361\365\274\270\032{;\242\211D<7\230p=Q\266\232:\235\3466=E\306L=;\033\224\274_\321\350\274OS\335\275K\332\257=>\342\203\275*\177\352\272:\036\276;\030F\374<\277cP\275\221 !=g]\310=Ew\265=aC\323\274\252\332\022\275\366z\263=2\372\220\274\367<\321<\t\302\373;TO\243:p\020\323<\364\330-=J\340\023\276\222\243\322\274e\332\330;u\030\375;\327\366t<\200\247}\275>\030X=\004\373\216<\350S\305\272\344c\177=\351D\234\273#\244)\276^3^\275\224/\035=)\025\246<\013j\354\275%\231\016<4\233\002=\312\251\247\274.L\266=\360\030_<O\204\337=6rY\275\323Z\203=D\353T\275\261\350\232\275)0^=\314\216\355\273m\3467\275\232\305)\274X\3016=\321\374\266;\017\005!=F\253\304\275R\023\r=\027\202\262=\365\203\207<\267\304G\273\321[e\274\217\204\241=A\023\377\275\020OU\275%?+\275<\0037<\250\332#\276\333i\202<\002\272\027=\305\'\363\275\213\260\014=M6\262\275\212,\307=d\375_=\021\"\331\27501+=\216\251i\275?\206L\275O\315;\275C\005\033;al\270=7\r\341<\376\352\253\274\024\221\325\274\3119\354\273 \032x<sp\"\274?y\004>Ct\266\275\036\\\005=\020`\313\275C\017\256\273!\n\275\273!\306\327<Y\262\213\275\021\325\277\2746\266\r=\027\355 =\005\264\355\275\322\357g=\374\360\330\274\321\333\321\2757j<\274eJ\336\274\333:\200\275\345h2=\323\006\317\275\341\252\351\274\232\245\025\275\007F\231=\2640M=\020o\233\272@Av=\352p\373<G\202\364;\357\314\010\276\253\017\274\275\360\307\004\275a[\363\275\214s\207\275\353\352{\275\273\335\346;7\ro\274\351\307>=KDw=)\"\002\274&\273\307<\357\022\266<\276\003(<\347\324\'>]*\274\275\304\363\026\276\341(C>\000\265\211<\3000\323\274\333.\001=1\261~=\206\177J:\276\231(\275\262\255\225=X\264\303=\201\376\301=\377\026<=\3563]\273\331\266\301\275\3705\307\275\320\277X\273\262\353\201\275\230\335,=R-\342<>\367\204\275\2303\224=c\337\007>\213\031\245=cn\207=\3271\235\275\023\225\376;\305\266S\275w\275\327;\331\225{\275\357\271}=\266\230\257<H\365\206=\360y\253=Y\332\005\275\375\316G=\212\305\r\275\262?)=*\200^=1\337\014\276s\376\347\274\020\255r=\332\0055=sl\206=\374F\224<0\325\021\275\222\266.=\344\212.<N\003:\275i\034\023\275\201\242\321\275q\204\235=\324A\345\275\270q\220=<lP=\3425`\275\237}!\274\304f\212<k\017\205=\363M\017<\310|\000\2758S\035\275\333_6\275:\251\363\274\001\270\245<\274$\022=\311\235\335=\245\221\233<R\344*=1\336\317;\265\340\322;\213sk=b.p=\250\322\312;\022H\216\274,\240\017\275L\267\206\275m*\307\274\361R\256\274\233\237a\272\3550\306\274\357q:=(;\007\275\204s\206\274#\327\350;\022JG\275v\345r=Cn\361;G\313\271\272\370\317\266<\341\030\001\276\232\037{=\204\205\213=\366\346\016\276\3429\356=YEL\275\177K\032\275\252\337\020\275\270\026\245\275\277\325\036\275*\316\221;pkQ\275\327\'\023\274\014tM<\260\332\315\274\007 \366\274PJ\317=3#\334<T\261\215\274=\222`\275=T\341<\365\370n\275\361i\177=#\263r=\250\227\361\274x\032\203=\373g5\275\250!e:2\024\230=\000\264\266;\322\3559\276i\030\252=\352\206Z=\361\202\261\275\343\252]=\314=\000=,\266\203\274\334\347\337;\320\221\341=-v\226=\260@\022=z\274\223=\251\036j<FF\013<\224\344\215<\256a\362<9\030r=\357\276;\275b\317o=\207n\302;\322\1771=y\217\331\275\357/\235\275#\312\260=\211\310\254\273 z\311=\231J\231=\033\310\033\2753,N\275\260\250\014=\255\333\313<\001\3551\275\247\320\274\275\231\342\226\275\035\270\322\274\257\364\020> Qx\274\020P\345\274E\300\326\275\375F\376=\341a\302\274\330t\032\274]\355\253\275[\251\037\275K\344\305\275\262\337\213\275\263\325\236\275\232\024\r\276\325\250\364\274\304\335\250=\244\320\244;\tv\337\275\007/\\=\\I\313\274\332\267\013\275\250\025\210\27572\362\275\242)\216\273\271\263Q=\372!\214\274\275\273\215\274\257\214\026=I\327\257=\323I\272=\003{\356\274Wz\\\275JQ\230=\206\364\244\275&\335^\276J\347\014<\251\302\203<\245\000\317\274I6~=$\277?=\245\234?\2758\353\270\275\234F\231\275$\016\251=\235&\264\275\301i\330\274\025\243\306<\366g\324<\377\311\217=\006.\322\275\243\264\222=\357E\217<\005\353\217\273\344\206\376\275\316\250U\274!\341\230<\264\007\231=r/\204=\230\017\212\275mIm=\177\032\342\275\010C}=%\217\226=o\302\325\274\202s\340=\241d\300\274\216\036\'\275\221e\016;!$I={\n\224\275\210_\250<^L\004\275C\270J8\362\314\351\274\266\347\000\276\365\014\262=\036:u=| \226=@s\236<\341\331\034>\276\365\236\275\"\001\212\2753;\200=\231\032\373\274hh\210=\277\021>=_\033\330\273\320\306,\275\320\323\327\274z\242h=\251\301\030<i\207\020\275w\311\367\274S\264\232;\325^\006\275^\202v<;]3=\033\177\323:_\340\032\276\035^\013;k\237s<A/\324<\317\240\266\274]\253\240\275\305ZS\275\3365\020=\313\245B\275k\241\367<\344\222-\275\035`,>\323\274\024=\031\353\211\275)P\241\275\225X\272\275\005>\r\275j\335^\274J<P\275\177\236\247<\037\276\311<R3\332;>7d=Z\320P\275\327\315\305;<\351\257\273\375_\231\275\r\010\244=\253\311\300\275?\250\261\274\331n\220\274\313v\325\275Qn\307\275u\344\356=\233}\327\274\277\251f=\210y\323<U\221\220=\204p\233\270\352v\264\275\200Q\217\275v\003b=\344\265\347\275,W%=;\224<<\352b\r\274\226\250 =XY\275<\217oJ\274\266\342\231=MAH<\026s&\275o\r\345;E\321\301\275&O\005\276\333l\312<v\347j:},\007=\t\317\002>\351\t\035\274\253/\232\274\273\234\372=\007J\200<\354j\247=\253`0\275`\'8=\005\223\227;l\032\r; \020$\275Lb\010=\322\360\267:\251\265\025\274\277j\013<\302\343b\273\333j\'=@X\350<\006\211\245=\344B\357<\032\206)=%[K\275\366\254\257=\275\344 \274Z\253\005\275\347\307\276\274\024\246\340=\350\351\006\275\250\377\351\275\220\023%\274\223\251\203\272\004T}=\336\261\001\275\263\025-=\260\304|=\265e\226\275\243J\024=)\216\253<\355\r\313\275\336(t=\270\213\225\275D\322%\275kX\300\2745\352%\275Q\270j\275\033G\227\274v\227\255\273\351\275\262\275l\373}\275\242\266]\275\017\364\244<\026\031?=\376\010\201<={\322<(A\263<b\245\336\275\327\326\037=\317\220\n<W\224\225=\'\276l=Z\2107=\231y}\2758O\217=\020\264}=\267\360\010<l\326\314=*\022\345\274\2647u\275]\001\241=+\210)=\241\250\227=%\315\027\275\235\354I=V8}\275\177\204\210\275\260\244_<\037\217\317\274\030\303\207\274\t\267\220<x\255r;\326D3=\216\247w\275\000\322\314=\360U\372=S\266R<\375$\322:E\033N\275&\240\\\275V[\375\274\202[\002\275\031\354\221\274\216\024\245\275\253\216e<\346\236\260\274\247\335\304=\333\212 =\331x\355\275\322\272~=\262\260,\275\t\244\241\275\220\007t<F&\r=\261\3129\273i2\032=\276r\204=\241i\303;\016\305\350\274\305\210`;;\003\225\275\272\211\005=\223\000\334= 4\345\275/\257\025=\224\242\362<\301;\274:D\355\340\274R\353\223\274C\263\373\274O\240F\275\225G\034\273Cc[=\022\360\212=\"d\303\274\356\005\030\275\214\017\233\274\345(\202\275\010f\014>\300\351\266\275\206\222m<\315D\310;\340\256\300\275\334q\263=O\226B;X\013\205=\215\002\027\274\200\305\263\275L\354\211\275\021\332X\275<\232\275;\014\217\256\273\023.\002=\307\016\360\275x\005\204\275\374=.=\027\310X=\256nF;N[\204<\366v\014\276B\247C\274\366\023\204\275\370m\005>\314\317k\275>H\377\275m\"\332\274\311B\215\273\363\2100\275q>\002\275\220\221\026<\256\235\237<\304r\233\2756\337\246<\r\001m\275\365\247\327\274Q\270\243\275\036\023\300\275\240w\025=c+J\2757\001\r=\004\257|=\260\323\033<\260\215\262\275\037>/\275\302\347\227\275g\367\300=t\377\220=\217:\254;o\371\221=\177,\315<\376{\300\274\024\177\355\274\010\361\326\275f\315\300\272e\212N\275G\212\206\275\211\315X=\363d\200=V[a\274F\334\033>\315\367\006>\310\364P\275\036\305\251\274P\231\367\274\354\366\247\275\307\016\014=\314\301|\274s~s=\0227\323\274\322\374 \273\213[\345\275/\372\226\272\346\373%=,\260d;\200\365\262;\336G\305=m~:=@\211\000\275p\315\205\275R\244\"<$\252\036\275\246#<=\246g\215\275\374\205\'\2741q\277<ou3:\210>2>4\3246=B\300>\273\rs\034;x\225Q=O0\225\275\203\3035=\316\316\254: \014\233\275\263;\265=J\256\225\275Zq\302<\016Xh=\3309\257\275\001\301\023\275\266\227\037=\215\365\013=MO\004=\350\250\211\275\367b\002=\037\311\253\274X R;\310\242\233\275\243T\035>\266\301(\273y\030#>\352\024V=\217E\371\275$\304,\275*\371$:7s\374<\365\365T=q\330\226\275j\241\365\2743@l=(EF=i\335[\275\226\023\326\273WnU=\316,\320<\262\222\247=T\003\004>7\033\221=]\241\033=\350<\353\275\363\004\250:7[\201\275\370\024\266\275#\373!<\2151\212=1LQ=d4\202<J\016U\274\2742\300\275LY\262\274@\243F\276\266\322\201\275Dr\037<\"5\242\274\257}\225<\245\204\276<\357\212\224\275\346gD\275L)\200=5=d\274\020\301\367<bF\276;\2549\335\274N\361\267<\365\331\212\275m\t\322\274\261\302\032\275\347k#=Y\307\315\275O\371\006\274\351=\354=\267kY=\006\371\014\2759=/=\t\326Q\275A\003\017\275<Xp\275\342\205\334\275\344\315\225=\222\243\357\274\254\207h=\350,\002\275\366&B\275\233\345N=\303 \367<\345u\340\274\311W\320=\220R <W8,\275\320\017\030\275\035\341\340;l\223V<\177\205\200\274\235O\323<{\227\210<\033c\303\275\360S\332\275\346\231\021=\256vi\275\217\342H\275\022\\\344=\365T\022\273\213\201\213=\017\233\300<y\223>\275w\205\243\275\360\323\370\275vR\352\273\035\374C=\302(\020;\304\225e=\243\332\200\275\024!\331<\226\326\256\275yg\242=T\032\027=\245\317>\2752\277\227<V\236\327\274\346V\033>\252\024\251=<\226\267\275t\365\341\275\036JX=U:\226\275\326\233\202=\261\305\373=\363\334\033\275\207\3367\2758I\017\275\324%\301<\2107\321;\026\326V\275%b\200<\367r\031\275m\024\000>\373\"\250=jE\270\274\240\027\001=b\304(>\377k\327\275\323\355g\275\205\230\377;\240\374\017>$/\001=R\226\n\275Et\231\273)\026I\275qR\310<\210\345R=\004\t\255\275\235\352\025\275A\201!\275\233X\010=\266\344\312=q\271-\272C\n\003\275\262\345\n\275Vm\007>\222\354+\274U\250\010\275=\331b\273\372\267\337\274\313\260\240\275\267i)\276\273&\001\276\3729\322;\032\013\343=\214\332R\275\336\234\202\274\016\212\233\274\020xj=jZ\261<<\246\006<\325\315\025\276\306H6<J\005\272<mY\261<\354U\010\275\274\247\251\274\350,K\275{\007\331\275\305\333#=d\375m={\247\203=\366%>\275\037\235\206=bu\377\275\007\241\037=\'\247\304\274\227\021\n=\266=\001\275\230\026\003\275\311H2\275\240\321\r\275\032\332y=fD\'\276\271D7\276\253\357\215:\270y\216=\245\264#\275-/\241<sW\004>P\266\352<\305\321\315\274|\273\r>\374\206\223\275\'|E\2746\351\246=\354\352\"=%\312\342<o\345==\216\034\336<r\245\271\274\376v\375;^\371$\2755\230o=\'\321\324\275D\203\\<\250\210\310\274\026\352\321<u\257\207=xj\000=\314\232v\273\\L\274\274\033\362z=\237\021\226=\213\371\013\275\331k\232=\032\371\351<l\203\200=\217\303j\274\330)\001\275\310\035<=\344\215w<\244m\210=\305\224A\274\to<;\356\210\234\274\223\327s=\2365\206\2748\000\023\274\312\025\374=6Wj\274\336\362)=\334\020\245\275\2359h\275\020\354\321<\253\2402\274\375a\220\274\006w\331=o\207\364=\002\024\221=\341\371\021\275\214\321\253=\3137\250=\257U^<\357@>=0\303i\275ER\";I\321\037=2U\234=\347|\216\273\235s\200\274\347\217\371\274kWx=\257\373\215\274\266\021\255\275\000\345\262=d\341G=\337\361\201\275^g\340\275\351s\241\272!\307\324\274X\331\323\274{\311;\2751\224\332=\310&\232=\362\031}=\345\3125<\036\325\240\274\324;\204=Y\004\213<C\321\n\275p;\016\275\334\220\224\275\250E\215\274D\231\260:0!\022\274\357?]\274\254\336\013\276\354\251\216\275\346Z\201\275+\356\312=Y\331\007<qW+\275\325\307\001\275\351\347Q\275\337\366\201\275\022\002,\275\236\025d=v3\204\275J\2771<\250\367N\2758IJ\274k\317\322=\022\306\242=\001O\211\275\022D&\275\027I\305\275\232g\017=B*G=\373\026\\<b\t\036=\343n\206=\323\004l\275\225>\201\274#\376.\275\333\204\236=\334\210{\274\217\037\337=d\372\301\275\350\204\264=\215\226d=\332\314\\=d-\204=\217d\004\275NP\213=\020\300\303=;\231\251\274HP`=\274\253\226\275\022\002R<\256\200\214\275\324\245b\275\036\322\372\273\022\276\273=^%\227\274\364\305\n=Q}\250\274{\227\271;\220\307\204\2739\0160>fM\006\275\254\010@\275\343.\024\275\364Go={A\013\276\332hT\275\336<\340;\344\2720=E-\230\275a\315\377:z\026\2539\373\n\226;m\333\020=\036\316[<\t\232w<\374Q\003\275\212\200Z=\020\313\267;S\037%=\271\337\231\275\017\227\321\273|\232\t>g\022\243=\242\272\352\275\233(\035=\315e(\2757\213\253\274\340\257V\275\323bL=\346\337f=\267\355q=\337\243\270\274\031\252\346\274Z~\306<O\275\272=Q*\340\275\300FT<-7\276\274\242YT\275\371\025a\275\013\310\243\275\347\231\2419\243\260\316\275\277\271\377\274=\361\304\275\302\330\371=\205\341\256\27481\336\273;\251\236\274\260\177@=\223\354\253<\300\3118<\234\314\376=\262\366\372<\277T\'<\371.f<H\267\221\273\203\253\242<\3514\224=>\253\000\276\274\330\260\275]\355\230\275\323\370\256\275{1\367<@\264\300= 2\010\275\356/+\275\366\032\266=>\256\245\275\250/\223=L\2460\274\325?\311;\331td=\t\022\223\275\030\031.=t\201\315\274\'0\030>\227\002\'=/g\244\273\006\205f\275\232\256\205=Q\3057\275\226G\014>A\342\332:\375\316\247\274Wc\226\274\311\310\207=R\n\215\2752ub\2754\2620\274P\231\327\275\304@n=\205Q\351\274\217^\256<\022\331\314\273\024\350\262\275\347\367y\275\377WV=\302\322I\274<\323\320\275p\367p<\003y\327<\302@\370\274\335J\320\275\341\331\257;\266=?\275N\211\023=\tk\310\2734\352\235\275\364\275\242\274\335\027\353<\\\304\346:Z\376\326=\332\321i\274@\025D\275\372\277*\274\272[\305=\217\252\316=O\020\257<\003\243\002\275e\210/=x\207\213\275\337\334\264\275\2755\376\273\205\030\351\274\253\204\313\273i\363>=/\251\035=\232\340~;YE\206\275\027)\027=XA\322\275\212@\251\274\341#\207=\256P\276<e\270\260< Y\253<8\232\365=A\312\255=\363S\317=\301/\221\275\270\356{;\236\360\333<j\'\225<\004.\002\273&\023\236=\345\357a=\364R\277\275\027X\022>\224\006\272\275\240\346\310<\271\303\260\275\225I\317<\314\\\010\276\336\254\237\275\230\312\224;)\327\325\275:\337^\275m\333 \274Q\274\323;\335\214(=\310\332\345\275a\244N;z\275\267<\345b\006=H\321\006=\321\345\344<\313\034\356\275)\034Z=\232\264U=\236I\177\273|\021\324=K\245k\275\023HU\275\331F\325\274\022\311\336\275\363eq=\314\335s=_\334\256=\307\352\205\275JR\257<\207 \017\276\225*=<\264k\r=T\372l<\363\206\223<\361\230\335=\224\001U\275_iF<9O\313=qn\010\274~\361L\273*\213\006\276\223\212\200=\037\252\277;EqR=d8\210=\352\036\021=\234)S=\002\'z\275\250\327\017\274\202\023\026>&S\267<E*&\274\021\3249\275\002\323\327<\351\317\204=d\241\301\275\250*\016\275\231\256f=2\260\013\274\"\273[\274\032\366\210\275B\361W\275\266\010F\275\336\334\022>\314\201\275\274\253\247\345\273f$\351\273\017a\220\274\366\030*\275\373T\323\275\271T\327=\027\212`\274\303\030\202\275u\'\260\275\204LH=\240#\331\274{\376\037\275Ri\262=\223\264\274\275\t\270\337=\020\351\303<\235\025D=\007\254g<\312\376[=\232\203\002\275\000\350T\275]\260\310=\213\370\234<\334%\233\274Q6@\273-u\211=\n,\306\275\373}E=\242\\\221\275\224\032\257;a\322\310=\234C.=Hk\207\275\272\215\354<\325h\002<\377y\204\275\213\320W=\241J\357<\004\014\266=o\357\374\274\323<\251=W\264\023=j4\014=%\252\253<\341l\233=\206,\343;\266\031\307\275\337\363\024\272\017\ro=\376\272\010\274\375\026\256\275]}\023<=\253\341<\230\004\013=<\021\366\274\356\030R;\240\003;=%\257\202=\037\365\013\275\331\270\375<m\035R=\305hB\275\3639\265\275\n\257\237\275\\,\r=C\247\005>\260\\\022=[r\\\275\223\225\222=*\205\023\276\320k%=\200\341{<\031\023\306=\024\317\r=M\304V=/<\224\274\306c\024\275\3322\r\275>\252\303=\016\307\224<\030\004\222<\326\3436\275\035\220)=\223z\320\274\205\200\010>\204j\222=Y\364$\275\313\360\325\2730\001\351\274\251\321\267=BaZ\275x\247\322;\017v\037=,\303\025<\nj\337<y\332\356\274\342\330\322<\031\305\307;N\302\247\274\022@\030=\257&Q\275!F\212\275G{\341\274\211\225c\275\203\035 \275\204\340\256\275\234\314\005\275\302\227\223=\265\337\212\274\312\256\301\273\3432\'<\347\245\215\275\227\244\211\275\343d]\275.,\315\274 m+\274W\326d\274\363\327\223<\n\245\270=7#d=\335d,=xK>\275)\377h\275\334\260&\274\014\224T\2753\231\375\274U\373\326<\273\202*\275;M\"\275$\350\306<\274\350\001<-\260\303\275\024\376H>\261\323\355\275\203$\204\273\342\227\271\273Xo\274=\356=\224\275y\364\027\275!\0264\275\322Z\256\275\025\223~=\236H\264=\340\301I<\271\"\246\274\211\211\037\273\220\351\316;\036L\033\275\361\243\317\273*\230!=\310\016\214\2750\202@=\361\362\210\275v\3128<\365Ev<\010\216\306\273\254\0172\275_\255\211\274\345\301\307<\375\000O=\344[\253=E\264\264<\255\263\277<e\2523=\3427^=Ju\373=\361\300\355\275\360\206\361\274\235\320\205\275GH\323<\006\214\026\275\016\362\325=7\361\000>~lM=1\362\330\274\027+q<\326\267P=\261! <\250k\324=|\003\177\275\213\314H\275%\372N\274uW\341\273\231y\240=\020\202\034<\372r\321=C\213%<\037\225\302\274\342Q\005\275\247\344\332\274\003\215$\2740\330\022\274\016\252\270=AM\307==\311\010=\276\241\253:2e\300\275\257\032\253=\005c-=}\345\357\2754\343\017=\317\301O\275\303c\335=q2\203\275\312H\251=\027\275b\275f\236\201\274,\326\270\275@\311,=\353\254\212;<\276\025=\026\"\221\275s\237\223\275\003\207|<.&\n\276M\340\245<\207\243\n\275\030$\231\275\321H\243=I[^=\377\355\371\274+E#=T\372\221=k\357X\275\311\\2\275X\327\272\274\310\201i=\260\314\376\2758F\213\274\236(\006\2761\\\246\273m\262\242\275\312K8=9H\177=\300H\336;\354\261\215\275\ru\261\273\023$\234\275\277\"\000\275\010\332x\275m\035!\274~\346\270\275=\007\016\275>U\246=\231Xw\275\257\031\273\274\377\027\273=1\256\315<\306\244Z=[\360\253= \273\206\2751~_\275/\310\247\274\271O\355\2758A\374<\027\236%\275\357\323\022\275\202;\240\274\244j+=,\317n<\003\336\215<I)\252\274QG\006\275\027\001\341=\257\021\343\275\037\370\370\275\315\331\305\275\226A\300=O\032\321\275\215\034\016=\r\310\214\275\364\003<\275\326\316}\275\203T\235=x\304m=N/\210=`\305(\274\360\000\312\273\250\005\366\275k\204\\=\233b\023>\230M\363;JY\332\273\r\371\010\273\364\034*\275\2776\240\275kw\023>\3538\017\276$\337\230=\"\332\366\275\013\375\350<Mq\247;`\004\037\274t\201g\275\227$\020\276\305\346+<h\"O=\2011\211<\264\370\306\2753rA\275\021Vh\275\317ZE\275l0\256<\201v\036\276\206\004\313\275\330?\t\275\301B$=\201\250\272\273\275\205\314=\361%\244\275K]\013=U\225.=\236S\004=\214\262\233=\375-L=\023\310+=\364h\003\275f\272X<\346\350\317;\ri\274<\360h\362<v\230\340;%\317><\314^\010\275n\331\216=\251v\345\275u\311\275=\013i\341\273\020B\257\275o\202\250=\206Z\363\274\006\230\244<vNr=\\\277\213;\273\351@;<\005I\274\360\021\265\275\311\245N<^\2741=\217\200\255\275\223\251\201\274\220\272\232=/w\217<\353\010\236=-u\252<#K\240=C\253\024=\270\314*\275\317wD=vl/\275\014\274\235=\305v\361<\361\223h=\3044\250\275\250N\355<\204@I\275\200l\002\276\'\017\267=\233:\230;\0346\021<\263\306+\276MW\315<\326A\215<[\346\343=0\273a;ae\211<\277))\276S?\304=\006\n5=\001\307\212=afE\275&\301a\275\337\r\032>:\203\277=\331\375c<\031\231\001\275\325e\000\275\367\033\313\275),\254<\276\351j=\362\231t=\242\233\014\2754\264\330\275\241B\021=X5+\275S\227\225\275\231\007\027\276\224n\206\274_\262\376\2722X\000=(\274\222=\324\226\247\273#\200\350\275%\264\021\274N\373u=\373f\030=2\276\222;\304\207O\276g\371\210\275R\261\206\275E\\$\275\275\253\317\274\231\257\027=\037b\210<\240\221-\274.\256n=c\027\345<\205\265\227=\335\233\036\2760\345_\275\241\354\273\274\'\314\t>I\2507\276\241_\031=\032\271\302<\3607\205\275\256\227>\273_\235=\275B\241\315\274W\272\"\275&tx=?+3=\017\215\270=mI#\276\023\375\332\275:\375A\273\321\222\031<\374\004\004=\343\0160=\216si=l\332\325<\246\306 \275\021~\203\275\243\r6<\014L\003=\013}0\275.\315\357\274\366\374\266=t\177\035\275\307 <=\270\352\265<P\344\232\275?\t\235=-m]\275\3673\024\275\247\361^\275\340|%<\376\236p=\213G\201\275{\262\233=m\026q\274\022\'\034=\272\005O\274I\224a\273\265w\224\273\234Zb\273\340O\275\275_\306\206=\203V\245\275#\325|=\003\007N\275\036\235\365;\236\222\304<6\354\307\274\300\224.<r\342l=\n\216\217=\n\311\344<\006\250\373<g~\270\273\000\013\337\274 \202\247=5Qu\2758\301\232\275\025d4;R\221U\273\276\213\356\273\267\230q\274\312\264t=\247\325L\274\016R\225=\276\312\242=\247\t\007\274\315\016,=\225\202\341\275\236\311}\275\300\322<=.\303\264\275\205\346\231<n\345\t=\347\264\013=!\240\030>\373\"b\275z\3535\276\252\2100\275p\376\r\273\027\236\236\273>D;\275\212\304-\2740\227*\275\3111\006\274(S\203:\305\363\261\275V\271\324=O\213\022\274\240\203p<\345]\330\275\016(\213\274\243\235\252=\334\016\301;\300\321\276\274\026\312\326\275\265\'\202<]\203\322=\300@\001\275q\271\247=\214\r\031=d\342f=\334\266l\275\234\362d=\326%!\275;!\217\275\270/\263\2748\235\241\275D\207\207=\034\236\237;s\324\242\274Vr=\275\336L\223<yU\361<\242\306\000=R\000\240<$\014\213=\n\201\023=(\230\356\275\177\226\n\274\235\010j\275\363\226\023\275\035\003\270\274\016\343(\275?\302\014\275\315!\017=U\261)\275\266\310};-,\025\275\217\356\025\2751\256\271\274;\251\366\274\025\207\300\273\263q\224<\255|5=\220L\037<c\247\307<^\005\227<\205I\207\275W\304\014>k\022\217=<\377\"<&\241>=\223\323d=D\007\357\273\332=\301\275\317\240\300\273m\r\256\272\235\376>\275\302\252\"\273\004\241j\275q\334\314<[\322\202=\207\024\332;F\360:\273\317\344\274\2755\217\317\275x\1774==`\373;z\241\254\274\277\313C\275\303\250{;]\314\020\274\265\320\204=d)\275=\007\232\355=;\376_<\033\371s\275\246\024\230<e\204O\275\374\332\014\276\324\347\264<\252\333n\275\316\010\247=\034\312s\275\'yl\275*\237u=;S\222\274\262\363\327=Z\370\237\275\352\361\363=\274T!\273K\262\244\274\233\036\275\274\007I\237<,5\240<\0242\220=\367\304b=n\231\'<\013\326h<\221\3025\273;\227P\275\2005!\275\027\225\201<\300\277\236\275\263\375\377\273*+\010>8\307s\275!:\322=\346\020\237\275\351\251\306=\313%\300\275\014\235\037\276\277\316\212\275\216\321\034<\2351\335\274\201\336\177<\032t#\275?\335\225\275\351\311H\274\tt\363=\211!\304<\341\177\355\274\366\234\010=>)A\275\236\304\332\274v`E\273\205\311\007=C\010\210<s\342\302\274D\310k=\335\320C<;\347\252<\360\025\266\274oC\235\2756\247\"\275V\314\253\274\027\325?\276\250\024\205<P\267\235=\310=\002=\251\n\217\272c\2429\275\333\027\333\271Iv\022\274\325\307\020=xQ\205<\340\226\215<\340]\"\274\217\220F\274\371\301\217=\327\323\265\275\364\nL;\364P\323=\001>\361\274\267\234\242\274\263\214R\275\306\316\224=X$w\274-\233\031\274H\224\017\274\270A\222\275\251_\324=\340S\022=t\377\303\275\241\246\373\274\313\370\237=\347Y\030<\261\346.\2756`\025\274~\347)\275L\322\003=\3729\230=\363\253\343\275\2564x\275\341\273\240==B\360:.F\206\275\243\021q\274<j\225<\373\267\325\275K\355\376\274\313\321\275\2733/|=\343\025\034<\333\306\355=Sr\252=V\247\223=o2\214\274\254`\360=\373\006\244\275f\007\231\275\236)\356=\334/\333<\234l\241\273\025\337P<\243W\261\275\261\304\302<f\204\366\273\330\270\366\274\020\346\230=\352\366\261=.\363\233=\331\206\363<\254\272\320=\177\337I=m\206\006=y\023@\275\"}\224=D\233I=\016_<\275~\202\222<\336\256@\274\301hs=\274\316\206=W6\262=}9\013\275\021.\261=}}\231\275EsZ\275a1\251\275\203>\277:U\341\201\275t7\013\274\362/*=\004\022\341=\352\370\217\272\233\005\233=\315\375\236\273\220/\031>\303!\314\273\034\035\t>\022W:=\001wW\273\336u\013=\337\334\213\275\024\025\"=\233\252\001\275\370\023\337<Nm\226=Fl\241<\251\252\204<\343\361\216<\275\242,\276>=O=<\357\022\275^\362%>\261*\351\273\333\037\267=e\n\027=h%{\275i\037\023=\341E\304\275\006\220\363\273\n\201\247\275\031-n=\200\257,=\210\027\241=\026<\341\274\213\033\252;\355\353\004=\225\303\200=9d\353<\016aE\275EK\250\275\313i\244=\347\310\232\274^g\313\275\374\271\270=O\276&=-\2365\275\340\252q\275<\005U=tBS=\240\261U\275;m\314=\315\2744\275i\342!\274\010&\037>m\253%\275\233,R=\203\332C\275\341\231\330=V*\273\275\325y\212\274\224\331<\275\272wo\275\246\371\306\274i.\"=\003h\215=\177\237\021;\302{\016=\272\305\010\275RM\232\274!\357\332\274\206\341\034=\234/\366\275\326\346\322=\037\345\210\275k\024\267\274u\277W=\024{\257<c58\275\367Z\250<z\022|<\203\200z\275t\353\354<UL\231<V\321\222=,+n\274\215\367\223=\300\035\227=6\221^\275\366[\301=lp\t<\351>\205\275\017\220F\275\214]|=\206\233\214=\226q\232\275\350\t\364\274D\'A=\274\360L=m\210\301=\223y\255\275\273\253\236=A\357\240=|f\362\275\340_;=\302\206\274=\263\274X\275\243\263\303<\000\2521\275\355\rQ=\246\365b\275\302\351_\275\361\337\215<M/\322<\256\245b<C\231j=u$\201\275\260\304\235<\023\033Z\275\323\025[\274\323`\344\274\211y\246\275\224\3415\275\334\301\265=\213K\207=F%\243=n\351\306;\242\215\312=,\030\204=\307\264e=RHB\275\324cR=\302\376\351<X>\232=\342\023\t>)\227\331<\341>\\<\004|\352=\356\304\370<\331\2715\274[F\233<\237A*\275\346$h\275\325\030\306;(\373\214=t5\010=N_\023=\246\325\033\276fnH=>\364\236\275\335\326|\275[\242\347\275\'`\'<\n\203\277\274J\010:\273\334\346\316<\223>\241<L\334\004\276\033\336\210\275\201\355\337=r\364\324\272\246\364:;\362J\222\275\310\324\226;3/\007\272\343\023*;NI\346\274PN\314\273)\340\276\275(y\210=\003x\250:_\252\260;\26446\272\354\335\275=\222\357\257\275lZ!\275iq\366<S@\254=\"\331\311\274\254\266^=\307\247\310<\037\301\331\274\337\316\305<>%\321;\004)\000>\005R\354\274=\007\222=^W\316\274|9\365<\356 \207=\232\270Y<\351\301\n\276\223S\272\2753\352^=\342Q\231;\261\0240=\366I\263<\321k&:\266\203\313=Fs*\272L\034f\275\025h\016>\251\354[=\201L\267<\004\312\200\274eU\205=\003U\301=\321OZ\275+\352\237\275N\246E\275\037-\334\274\220\341M\275+\360\332:\373b\244\275/o\313=\0241L<\310\037\275=t}m=\016\t\377\275f\340\217=Of\223\275m\360\224\275:\260\025\275<\211\226=\031X\265\2756\307\005\275[\177\373\274\252\306b\275\032\267G\275\206\234\362\275\010Y\203<\345:\002<F\214\215;4{Y\273T:\203\275\276\241\221=\352\303x=\357W\206\275\277K\256\273\242t\256\275:*\317\273\343\006N=r-\343<\323\036\213;\273\362\n\273\322\023\034=\216\035#\274g\330@=&|x\275\264G\270\275\227\321\347<\243|\003>\310\240\213:O\0014\275\230\256\035>{\016\022\271\n\301\234=\312\371\272\274\342-Z\2714\241\247\274)\212O=\276d&>\234\340&<\000\034\276=\202\363E\274 \347\275<>a \2754\265\244\275\276\177+\274\375\350|\273\264\235\260\275\330\274\230\275\223\331\215\275\033\327\214\275\207\237\333=\277\250\276\275\330\262\024\274\367\'g;\"\036\333\274\r\221\371\2733\\r<r\312r\275\330\303\211;\277\265w\273\367\370L;\347!l\275\226j\223=\333\022\331\275\202\246\221=D4\372\274!{\203\275MQ\316=VQv;\311\022\276<*H\246=\217\226\035>\304Gv\275\257}\022\276\"\226]\275\251\275_<\002\023\256\273\033\024\221\275\366\246F\273K\336\373\275\247\216\264\272\2747\316\273\020D\300\274\\\211\004>\312\242\271=?\003\016\276}\275\273\273\240o\337\273\r\334\300\274R\033k\275=\327\335\274-\326\013>gD\316\275\302\362j\274\212?\227\274\255\222\"\275\337\304\234=\276\356\200\274\024\226\027\275\027\213E9\236\2003\274\\\355\343=\230\242\214\275\332\312O;B\264\304\274\230u\022=m2\231<\232\344E\275%\3018=\037\200E\274\355\323\354<\031=B\274\334a\222<\004gn\272\035\363\t\276\333\307u\275\257c.<Ld\355<S\264\323==|\353=]n\243<co\014\276\362\307F\275\004\020\034\273\336\247\240<<\211\316<\036\350\322\275\010\'c\274M\202\260\274\303\001\304\274\336\276\024\274\027\355\222<\345e\316<\215\351\253<\241\335P<ve\341<\317\\\374\273\344\202\031\274\177\023\346<)#\244<\'\243\202\275\245,w;F\364%\276\032\332\230\274(\266\252\271\334\026\233\274+\305C=>\231B=\214 f=\254\037\203\274\3741\035\275R4{\275)\206\372=\217A\327\275\317\335\331=\250\252\214\275\232\347\222<^\225\342<\323\371\020=\253P\232=$\366\264<\256\020^\275\323M\317\275\3203\255\275-p+\275@\026.\274\027\367\361\275\310\2418\276\263\271\177\273>\202\215=\254\207\231\274\305\271-\274\214-\372=\304\024\220=\340\333@\274\334\024\301<z\303\270\272\370\305\264\275\002\000\214:\026$c\275~#\214=\354\276\334=\215\241\214=\260\323\242=s\206\002>:\343\013<\004\242\246<\314:3\276{\202\266\274\264\262G=\271\034\270=\021?+=\211\363\272=\2015\024=!\252\246=G\204\334;\237\375m\274\026\271\276=\224\264\234=\312\333;=m#\313\273~%\246\275\221[\204\273~V\177\273l*~\273$c\035\275\305\302\261=\210\251~\273\357=\373:\307[N\275\305\236B=\305!s\275\n\214\272;7\202\036<\357\304\223\274<\267Q\275\233\202\317=k\320\004\276{Y\226=\374}v\275:wA\275gb\003=~\346|=\276O\247=+\270\274<\203\323\222<-B\266<\337\323\314<l,\372<1\234\013\275e\214+<\006w\273\275#\221\277\274?nw=\240\020\034\275\270\230\002\276\321x\205=\323\304\307\274\340D\243=\251\r1=\257|\324=\301fM\275XC:\275\034VO;y\253\005\275n\264/=emk=:\014\002>\267b\030\274r\325\177=T\020\205<0\274B\274\362\210\370<\353?z\275\373\nh=U\277/\275\356\226\003=\265\017\023\276N\363`=\242\027\333\275H8\231<\303\366\323\275\307\222\211\273\361\267(<\'%\236\275\264\234\351\273\027\370\000=\023\245Y<\303\246\222=\034\2579\276$\010\237\275\253<\235\274]\262\016\275Z\343\034=^\320\315\274\371_\262\2746\224\226\274J\2302\2757\331\267\272\352\337\212<\334\372\340=\235\241\035=HM\013\275]K\212=H\243\217\274-s^\275MzS<\225\221\340<Y\264s\275\201GZ=\343\271\337<*\013p\274\221r\017=\241\376\323\274\232nB\275n|=\275R\032\200\275[\354\375\275\367\375\354\274\233N\375\274\276\360\252<]Z!=&J\265\2752\204\002>N\010\323\274\345\235\263<\004d\270=~\236i\272J/&\272 /\230<\347\013T\275*k\200<a\257\313\275\016\357\002\274\325\352\215\274\327\353!\275z\027\016\274\037>\310=\265o\246\274iV\264=\264#\235={k[\275\345\337\017=C\034\016=\013W\006\275\006^9=\333\007L\275$C\251<\252\243\006\275@s\203\274MxP=\200\255\274\273\227\'\250\275\213f\271\275\372B\350\273Y\233\210\274L\023\304=\265\235:\275\376\332\261\275\356Ey\274:\204\236=x9\016\275\270K\200=\205!t=\027\353\007\275\264S\036\274\333\021\252=\002\351D=Fj\306;\2526\332\274V\354\207<\244\333\334\274\324O\276\275qf\266\275\366\327\354\274\006\347m<\372\362a\273\222y\207<\237\024%\276\256\232\251\274\243\010\341=\355\2449<\301X\257<\313\322/\275R\003\354\274\255\362f\275\2212\206=l\212\030=\323G.\275\213\245\267\273X[\242\275\252\316\324<f\313\332<\245FJ\275\264\306\317<N\005X\274P\334`\274\334\266\315<:\213\227=f.\243=\025S\207<\306\343)<j*\n\273\215\331>\275\223*\326\274\374\313\023=Z7,\275\366\276\343\274\377\252y=\264\304[\274\205\257\313=H<\260\275\325\223\215\275\230\354\\\275#\261\372\275j\226\n\276b\311*>\212<`\275\334\342\225<\265\'\227\273\276<\317\275 \021\366\275\205\000\354\274\020s\217=\260UP=1\342\000>\177*0\275\247\321\030\274\244+e\274~\263\361\274\033)P\275\034\r\315;d\025\202;\260\221N\275\307S\277;~\351A9\205#\004\276\206\005)\275\013\332,<\217=~=\355\032\227=\266\031v\275\023[I\274\360=\r=Pi\277;le-\275\267^I\275S\360`\275\265\266\220\275-\224\304=a\3306:Bn\243\275KYR\274\3269\006\276\270G\001=\203\202\273=\035s\262\275Yx<\275;@D=\036\014\334;|\230\254;\273\027\036\274s\026\211\275$Z\235=\010&X\275\275\335\272\2742\007\023\275\331.s\275\252\331\204=\'\375\335\273\275=!=C\341\022\276\276N\263\274>g\342\275\032do\274\025Oc\275\264#$\275F6\345\2745mn<s\267\266\275\236\364\007\274\261/\023=\376\034\t>\372\210\272\275\300n9\274WG\247=Yy\017=\016\035\244\274\033\000\245\272!\210S\276\254|m\275\313\037x<8\301\204<\306\373\250\275\260~\333=\3067^\275FOp\275\261s\257;\314\016\244\274\232\014m=\032:\215\275\211\370\224\275\347~\000\276cU\367<\344\315\270=!\244\026>#\251\246\273\257\350[<\223W\235\274p\031\351=\373\264\214<t!\301\274\362,C<\350\313\320<=\363\361=\270\203\037<\326\033\010\273\270@\324\275*\372\343;\323^\010>\324\355\206=\257N\236\275\374\013X=\254\006i=\240\260\037<\265\262\363<\206X9=\352\276\010\275unW\275i\212W=b?\302\273\331p\206=\376\301\201=x\223\022=\234\263\005>}\325\004>w\233\211<\256<\276\274{=*\275~E\004<\314`\034<\215kv=k\233\310\274=\205D\275\214\214:=\327s\227\275\351\002\221\275\037>\235\274q\273\274=\240\234\214=8=\207\274\341\206\252=0\006x\275E|\242<\316\325\354=\t\256\020\274\346\221\373=f\215g=\024P\206<\021p\004\274\361\315\201\275|\301\205=\363\030`\273;\353i<\032\332F\275}K\217=\344cw\274\231N\215<\366\rw<\270\311T\275\202\346\004\276\334R\304\274\270\367\206=G\277\351=!\326\265=m\017&\275q\312\341\275\320b\352=p\335\032=\020\252\364\275\373\314\241\274\033\177\r=\350\301/\274\320H\004=\224D\021=\032\014\036<U\321v=03\226;\306\346\334\275\202\036\023\274,\035\001\272\260\272a=\252U\003\275|#\232=\213\371\314=Yh\317\274\214\223\336=\367\331\362\274`J\373<\013\n\014=!\362\'=\364\022\010\275(\217\'\275\034[\326\275\346\301\204\274\257\276\002;\027\177*\274\354\341\037;\270\r{\274w\206\002=\245\337|=es\013\275\025#\263\275\241hZ\275\035\216\257=Q\306{=ra\223=\000\2642=3L\202<\222j\"\275\302Q\245\275\207!\315;\346-\305=\226\326\363<dh\211\274\231*\006=\236\224\201\275\306\316 \275\3563\232=n(\234=\026*l\274\225~\034<H\021!\275*\341\217\274\277\311@;Y??<\370\264\303=\001}4>\022c\265<\021\267\006\273\337\366\240<z\1778<ik\320\273\245\315\353\275Q\226\327\274\270\230F\274\342\247\202\275\340\344\225=\206\365\327<\367\010\204=\377\021Y\273\225\254\322<m\375\217<\'\273j=\323\014\364\275\010Z\216\275\016\351\212\274\"\023U=\356\322?=\021\n|<F\2030=\355r\030\276nt\351=\211\rC;R\240\252=\203\024o<%\r\'\275\317\211\272\275\301Dy\275\273\236\\\275gvo\273B\356\263<\026\256\364\274\374\023\227\275\303\376f\274\376H\216<\331\276\227\273\001\216f=\266\006\254=dek\275Mx\004\274\226\000\273\275*v\002\275\325.\000>(\302\210\275t\243&\275\023_\206:V%\023;0A\213\275\034\354t\275{\033\004=\001\232\323=\321\261 \275\224\256\215\275\311\177\260=\267\326\235\274\227T\335\2754t1=\243\004y\275I\232\362\275p\257a=\227<\220\274\312\201\010=\001 \367<\2416\202\274\252\021{\275K\306j\275;\221%=\255\000x=\"\2314<\307\r;\275\253\373\003\276\215\014\266<\264\327\213\275\263\262P\274\321=\203=\3527|=\237\037\216\274\027\036\226<O\3044=N\231\250;k\032\033\274,\312q=\364z\016<X/\231\275\366\313\266=\030\247\317\274\025\340T\2752}\241\275\240\237?\275Q\202\271=WR\315\274>U\341;/e\277<<`v\275\255\3208=)\252\250\275)\202\347\275\324\354E\273\006IN\275\030\254\317=\\\325\251\275\240\006\017=\354\324\033\276\014B\207\27460\213\275\320O\212<\t\323\000<\r\301\017=\302\273\224\275\247\364*\275\322\013v\275\023\366\341\274K2!\275?\007l=\025\215\272\275\323S*=\362\354\221\275\246$F\275\246\322\000\276\313\233\242=\t\277\"=XZ\223\275\225\214\010>\225~\013<\234\314\321:zs\327\275\'\233y=\361\235I=\332\260\205=\277N\321=\255\032\014>~$\233\275\340\000\340\275~\336\t>\363\027;=\010\276a=\323N\030\274-\350J\274\202\357\342\275\352B\002\275h\232\302<{\302\251=\005b\224\275:\214\202=\322\316\217\275\340Z\262<}\257\263<\351Os\275\021\327\260=\017*\252;D\377\006<\037t|\275\306\t\230\275$\\\177=C\205\244\273\007^\350\272\324\306 >\263\301a=\271\321\032=\324\323\223\274\025\223\004=L\033\362:K\024$\275\330\256\202\275\036\242\001<\247\200\006<4\222\002=\320D\314\274\312\273\301<V\355\001\275\326_P\275\031\274\017=&\231\010\275\344\323/<\301\1771\274\330\262W<\326ub<\353\0020\273\347\021\031<U\371\201=\3150\211\275#\025E\275_\322\253\274-JG=2\320\237<\202E\255\273\345j\233=w\331\r\275\350\"\342\274\305\353\032\275\260\265\352=\365\034\243=\344\300C\275\331\263\205\274=\013\267\274\370\306\222<,\342L=\256y\016>\002Z<\275\326M\350\274\244\210\335\275\0372 \275\222u =\">u=\217\262\273\275\237h\237=\252\304\177=/\333\223\275\255\004\202=\005\232\310=\304\201\033<\202q\030=6-\213\274\272\214\325<s\205;\275\341L\250\274w\0006\275\317\352\323\274\300\253\262\275\016#\226\275\013\270\236\275fHD=\221\344\247\275\341\306\277\275\022[\342=\021\200}<\300\210\242<abZ\275\214\275u=\302#\365\2722\036j\274\351\372\356\274blC=\213\232d=LD\260\274\206\361\256=\230\311\200\272\263l\306\274=\316?\275_\317\237=\033Q\254=\334G\030\2751\027\215=\213\025e=\031\374\031=P\023\357\275\264R1<S\351\331=V\242\336;\312\317\326=\270r\034\274\'\327\243\275\306_\231=!\236\204\274\na\266;\234\211D\275D\270\217\274\336\273\372<Uj\255<]Q\272\275\347\361\354\275\350F?\274\347\326\t=\205>\216\273\214\363J\274\2728%\275W\244\264=\251\235\230\275;\026\246=\315\351\376<\351R\232<H}\230=\'\230\024=JW|\275\305\370)=[<\304\275\334\305\237;\034\003\263\275-J4\275\315\314\236\275PG\013>\300H\204=\220\205\370\272K\212\"=\241|\254\274\356\232\211=&\275I\275\205{\301\275p`\337\275o{\251\275X\220\341\275\216\t\300\275>\265\037\275\204_\323\2754\313[\274\312\'\035<\016\033P\275$\203(\275\013R#<\327\351\220;(6\250=\216\315\006\275\tY=\274\3510\204=x\314y:N\000\250<x\360\362;DI[=\344\016\347<\202\310\213\275\224\253\354\275\036\253\313;\3479\317=\344w{=_L$<\303\340\023=\324\000\212\275i,\312\274{\336\020\275\\[r\275\304\246r\275n8\226=3\367\211\274\367\226\026\274N\332L\275\032M\245\275\205\352\214=\324\177K\275\036\225\374\274\204B$\275\270\017\304\274\314\304\302=g\t\246<H3\215\275\332\357\271\274\225\350\275=p\366T\2705\010\317\275w\004\232<\tC\370<\3708l<962\275\245\263\301\275\344\357\227\275\322\376\201<I\220\335=\030\233\226=\370\326\372=\254\2414=\307\263K=\031>\006\274&\263:=\341\324H=zb\315\275\254\357\233=\245\201\250<\300\3158=\377\346\203:z1\276\275o\335\260=\204YE= \373\367\275\370\303\323\273\332u\273=\006\267\351\275\317\020\264=!}\254=\372\224\000\276\021\222\306<\364\242\251=\014\030\341\274\223Y\205<\347\213\231\275\025\273\2009P\263h<\364iE=A\246\302<1>~\275\372\245\221<\331Nm\2758\357\216<d\333%=C\025\252\275\257W\234\2756k1\275+;\262\274\004\245\310;\252 \237<\324:\263=\205\352/\275o\345\035\275\204Kh=4\227n;\004t\224\274\305\376?\274\264\322\231\275Pf\326=\200]\346<;A\013=\227\312\274\275\322 \350;(\000[=\346\310\270\275\206\231,=)\'\033=\316\221\222=\3765\230=\213;\246\273|\327s<\242\266\031;\335\320\312\273\222-V\275\371\337\003\275\024Qy\274\206\014\226=)*D\274\316\312\246< \320\256<1\020\243\274\213\004\312\275\216f\353\275h3\275<5\013\223\275\206\004\333\2752\325\020\275*y2;\036@\352:\031\032\212=\361bn\274\324-%=,p\211\275\344kZ\275i##\274s\334\364\275\013\327\"\273\'0\007\275i\003\241=\2067\304\274\263R\253\275\013\036\016=\367\360\n>\227\371a=\026\024t=\204zm\274\310\'\027>|\177\034\275\035`S\274\244\351\212<>P\252\275\215D\274=\326\306\204=]\005n\275\234(\313\275v\010\014\276\244\212\315<\272\266\357\274D\250}=O\367p</3I<\341\364\002\275,e\222\275\306\014J\276i4\003>\005\325\314\275\013\006\223;T\320\224=q\353\272\275\003> <49\213\275%\254\301<\014\350\375\273g\314g=\025\232L=\261\221F\275\230t\334=P\241\306\275b\232\027\275\370r\021\2732\241B=\023v\272=\356\021#<\242\3765=\260\222W:O\252\252<\247;\201=\227R\215\275\300\247\037\276\004\3039=v\030\234\275\247\206\\<i<\236\274Y\024I\274\260\350\010>C,\331\274\032\004\256\2752\027J\275OJy\275\316\345\367<\352m\010=z\260\033\275\250\301\201=\261\260\343\273\0309\021>\250\235\232<NK\272;\017x\220=\016\n\354\273d=\016=\013\334\306\274( \026>\017\315\\=uB=\274zt\021>\262\036t\275\030F\361\274\276\334\036\274\267&\326\274\037\022\260<J\001\216=\007\217$=4\017\267\275G\311\326\274\037\346l=\251\254\326\275 :\257\274\200\236 =\035\200f\2749P\353\274\250o;\272\221!B\275R\367\244=\232l\311<S^3;I\212z\2746\227i=\3718b\275)\242l=\333\010u8m3N\275\200\335s\275\245\241n\275>\033\025\275\0046E=\242\300\224<\215\0326=\317\375\263\2756_\257=L`\225\275\330\025\001\276!\242\005\275uJP\275\300z*\273\'\275\265\275\305\347\247\2759\303\362\273\311\350D=\366\nF\275\260\327\304\274\360\316\325\274\364_\333=\335\021\271\274b\247\231<Pu\317\274\220\335E<7\356s\274\347\247\224=\030,\356\275\202\222\261;(&\307<\256\023#\274\213*\374\274\244\206.\275vS\\=f\335\006<\3607\315=dU\202\275n\266Z\275[\315\300\272K\3018:\363oJ\274\025\256\316=)\3008=u\023\006\276H5\026\276`\247\320\275S\202?<\033:\220<\346\000<=H\361\202=+\200\\\275\251\255\363:\r.\r\275K\276\314;n\230j\274\006f8=\322\360\205=`\004\247=\007\207\254<ro\211<\221\234\323=\321\322\261\275\235e\220\274\364\336\272\275cF~=\271&D\275u\216+\275\031b\300\275\202\"Q=5\200\033\274\247\277\312<\233)s\274\020\3432\275\256\371\234\275\336n\207=$\367\3069mCZ\275\350Wh\275\204\325\224\275\346w\013\274\313 \306=\341\316\270=\200L\355\274\354G\032=@=\326\272\373\270\235\275\t\255\370\274J\320m=3\r8\275\321#t\275\332Z|=\316z\007>{Y\312\274M\333B=\372\350Q\275o1\204=\032\335\265\275\350\272q\275\267\257\022=O$\257<cz?=)\212\032=\302t\222\275LL:\275\301V)\275}F\262\274\007\322\260\275GZ\275=\263\021\023\275ZM\213\275\305\246\202=\305\224\244<|\023\311=\227o0>\217\235D\276`\364\025\275[\233\222:Z\322\363=,\233x=\335\025\210\275\340\3441=I\020t\275,^\027\275\n\023Y\275\217\034^\275\3617\253\274\361\373p\275I\322\254<\314\205X\275\206\270\n>\3370\241;V\203\201=\362Z\253\274\230\351\224\273\3642t;\314\326\271=\334\372\304\275\2553\205\273\301/8=\003\265W=&\030==\304\266J\275,\356s=p\005C\275\251tP\275\177\244\233\275\2050\005=\240ka;0\323x=2\265\306\275YA\223=x\310J=\314\324E\275\"J\026\274\265\027\002\276\216r\373=/\275\355\273\r\223\226\275E\235k\275\225\241\275<\245\325D=\267F\203;\\B\233\274\236[m\274\006d\335:wMR\273_+#\275\252\"5=z\211\376=@\354\007=\204};\274\235\333#\275\177\277\340<z\366\315<qQ\t\276\215\253\211=;\013\220<\224\353@\275\207\216\030\274\356Y\350=\332v\031=@\316\324;\"\252a\275)s\227<hz2\271\347\272\006\276\260\356\277=\230\337\313\274\344Yp;\236u\377=5\230d\275\224\326\313\275\'\275\254\274\2622\260\274\357\273\025\273\315\375\317\275\361W\002=\177A\037<L:g\2739R\333=\334\211(=P\222\330\274x2T\275\206\372\216;\025\001\033>&\245\334<K\322\204\275\310\237\312\274\205\211\204\275\034\363\236\2741\026\276\275\251\022\274;\300t\306\274\205Zs\275:\262\263<\314\033\317<\326\300\346\275Wi\315=4Ga<7K_<\335\221y\275rHv\275a\253\255=)\367\260\275\331q\324\274\333K\2279\355 .\275\250Jn\275\255\341\032\275x\361\312\275K&S\273\247\247\014=\274\323\214=kt\031\275{\377\365<\251e\273\274l\306\302\2753\375\301\274;S\336\275z\256\244\275\177\022}<7\325\020\276\005w\216=\037\336\245\274V\220%\276,\215\372\272\347\245\221\275\275X\242=\316?\020\274^\024y\275Y\333\366\274\256\200 \274f\247:;$?\201<\307\2246\274\355\264,\275\362\304!=\372\360\273\267\365B\312\274\2338\030=~{\022\275\232\362-\275\341V\006<\320*\205\274o\372\227=\272\300G=\007\007\321=\251R\236\275\315\010\\>\263e\227\275\037\374\336<Z\326\206\275\214\263\007=\n\036\342\274\362\304\330<\310T\313=\nT\017=*~o\275\276\374\003>\005`\035\275\313\3620\275\371\217\274=eP\324=J$t<\315bs\274F\335\'\275\325p\222=!\236q=\335mw\273Vm\334<(\321S\275pi8\275\306\260\273\275\271kj=\210\323\316<bz\301=\006AG\274\302\363+\275\321ZF\275i\317\225=\316\207\022\275\022\t\302=#5\271\274\033\3771\275E\177U=\206\257S=\337ns\273O\206\207<\200\371\216=1\323\206\274\3566\213<\372\031Q<\360pa=|\351S\275\201\235\201\275\213Q+\274\375\327Y\275\341\0251>q\306\376\275@|\000<\264\033\370=Hfe<f\271E\275\035\340\\\271\334\317\246=\020\267D\275\336\3519\275\032\251\343\275 `\032=\373\\\205=z W\275\245\3245=\254\3476=\323=\001\276E\036\325<\201\003V\275G}\256=\274\033T\274\2349f\275m&\024=\036}\353;3YY\275\317_F<\366v\262\273\321\270`;\211\377\267\275\330\245\302\274f\231#\274\275\035p\274n\346\213\273>C\t\275\367B\362=\313\036\252<|B\375;\237\214\215\275\306\242s=\255\3022\276V\351\332=\343\360^=\247^\232\275\311\242\206=(b\270;\014C\245\274\344\316o;\353\221\341\274\312\261\241=\034\343\230<\1772\341<_v?\275\3773\244=\361\344\351=\202x\277=\034R\344<\251\n\275\273\332\t\300<\2521\272\275\r\200\345=\022\263Z\275\n\320\'\274\221\373\213\275\375w\001\275\235\003\255\275\337\022\237<\211\362\276\275V\356\216\275\246\022\262=\014\371\334\274\231BD\275\220XG<\25131<a\210{:\2025|=\361m\003<\330\356\332;\336\364x\273\261\003\201\2755\272!=H\333\024\275\201\347\332\273bM\301<\037\271\376;\021}\032\276%\377\035=\277x;<eE\310\275q\237\226\275\026\240f\273\260\022\333<\234\357\264\275\340\350\336=\305:\334\274\212F\300=\341\034\037\275T\373\211\275\322\363\271=\317\243\211\274M\371\342=\351I\221;=\340\301\275\345\004\312;\316\337Z=\371\364b;\256\333-\274j/U\274<\255A\275\032\373\260=-Z\005\274)\207]\275?\272)<:\241\314=\353+\223=\320(\022\275m#\241\275\245U\017\275\264\263\333=\264\247=<s\317\034<\201P\223=\312~\217=\031\216J\275\217G\222\274\355\226\263=\277>F=\310g{\274Ok\010>\231\370\276<^\273\367<\361a\347\275\240\244X=\020\033\334\275LpA=\032\213\336=\034\013G\275$\333\225<A|\275\273\026*\240=\344\213a\275kQ)\275\342\033\006\274\363\300\026\275\267\362\005=E\201\253\274u\264\264<\277T\363;\237\317\204\275\233\016\020\275\211: \273\326\030*<Z\177\230<\211\276\\=h\214\003\275\323\225\214<p\343\256;Z\r\216\274\310-\273\275\251\'\316\273\200Q\302<s\256%\273\230s7\275T\026#\276jEL\274g0{\275\273\210\007\276L\302\370;\324\026e=) Z\275\214\ne<\301\236\337<\325?\234<k:>=\351\321 \274\035s\263\275_\003\362\274d\332\252\2744\200\301=\021\276\023=\013\343m=XSC\274\210\371\007\275o2/\273B\237\016>\232\241W\275@\372\034=\001)\235\275\305\367\336<\374\271\376=\025\021\227< \002@<\032\361^\275\016\355\207\274m;\010\275Y<\000=g\205<=\224B\204=\244\322\\\275l\274\314=\361\246\201\275\214\367\340<\001#\261\275\035o\361;-\212\366<\301L\020<\025T\025\276P0\234=\324\226\231=*Y\263<!\353\205=Oc\207<e\016\375\275~t\206\275\360Q\205=]^\277=\236\351\217=B\031\233\275\367D\260\274z@\373=\207\313(\274\366\246\235=Z\227X\275E1\330=\302d\003<{\356g=\210\3438;\212\211\236;\336\224R\275_\037=\275 \n\311\275\221\236\035\275\303S\233\273\"b\237<\223\335-\275k\247\316\273\243\"\232=\222\211!\275\301Cs=\324*I=\004\272\2359N\274\231\274\276\357\346<\266\331I9\235#\215\275_#\314\274re\037\2751B\005=\014KD<\301\357\265\275\200\324s=A\"\341<\232\244\356\275\326\273%=\355t\220=v,\322\275\r<@;\374\356\233=\177c\257<\023%\r=\253k\311;\026Lo<\272\306\002\275A\n\371\275>&\313\274\203\335\302=qC\236=\277\212\004\275\337{n\274`\322\246\275)\223\316<\214\305\237=\276\2063\275r\341\203<\200B\325=\356\2634<:\202\265\273\277\305\005>F\363\222<s\313\034\274g]\031=x\346s\275\257?:\275\366\324\t=\0300O=H\234\251\275\325\200\347=e`\0019\211\374\202>\032I\"< ?}\275\205\245\016\276\3754\364\272J\212\365;7\242\t=\374p\t>\310\2542\275t\275c\275\"\352p\274P&O=Bn\366:\244\032`\275\001\372N\275\345\254\201\274\023\353\265\275l\366\265<\207\254\241<+wd\275\007\343\237<\344\t\036\275]B\000\276\210\334_\275\277\377\235\275|a\244\273\261\370\r\276\025\341p\275(?\t=\310|H\275Z\370\347\275\253\344M=G\033\252\275\371\335t\273\312k\335<%]\275=zM2=\333\021\336<\252\327\220=R\203n=\317t\312=\204&\263=\301-z\275\263\027\266<\310\336\300\273\224e\017<\332\337#=\321\220\316;\267]9<\233\236\037\275\022\313\352\275\225_\344<\230\341\244=\212dr\275E\337\274<`\010\261\275\333\006\376<YF\326<\306{\006<Z\256\215=y\".\275\264\003\033\275\261|\271=i\314*\275\023\341\323;\250\255\177\274\024\276\276=\360\316\315\273\002\034\354\275\304\255\202\274\313&\275<\277\327\010=\275\240\017\275\237\357\270\275#\261\035<\017\301~<t\324\002;a\357\371\275\367\234m=r\030\242<\251\216q=\320\300\366<\252\363\217=\244b\371=\253Re<\242\024\377<\350\212\256\274\271\336\303\274/\313\231\275 \211\224=\376\243\032\275\022\207\202=\030w\024\275~\361_=\216\213\037;\251\356\217\275Q\210\262=\030Z\260=V1\326\274u1H\274c:\346<\353e\213\275\346\221\370=\307\225\247=\334\312\235\275\0334\236<%P\267=\356\024`=,\334\351=\316\275\207\275\014\316\212\274\356\265a:\"\375\301\2744\017\006\275\222t,=+\262\366\275\222\334e;\357\347\227\273\355\275p<t`z<\3277+\275P\355e\275w\323\n\275p\302\025=\272K\257=\013\373\342\275g\345\346<\350\356\256=m\t\022\275L\377\021\2750\221@=8\n\317\274\016\"8=*T\204=\235\223\254=ly\366\275\245\365k\273\346X%=\232\333\264\271\250\344v\275\244\236z\275\342\035\231\273\245\236\334=e\332\241\275\227fk\275\005\026X\275\342k\231=\240\245i\274\237\224\207\275Y\014\353\274\305?*\275Y\222\346:\336\257\250\275\233{\345\274\341\222\237=\203/F<\022\212}\275=_\006\272\207\\\211\275\341\367\270<\302\2215=&\021\t>\344\033\344\274TI\346<\000\372\020<\244\036r\275a\311*\276\214\253\233=\031\342,=\373\001A\275\030N\236<\241\230\013<l\317y\2743\273K=\305\204\331\273\243\333\324<\271\346\211=\227\234\333\275\340N[=PA&\274h\354\023\275j9C\275S\340\027=\263\035\277=\236aK;\203\320\233<\253\347\037\275F1\023\276FG\236\275\301\250<\274b\246\003\276]\216\235=\366\256*=\337\r\200\274*Z\314\274\000h\213\275\267B`\275ed\211=\302A\300\275\307`b;c;\352\274\226\255\035<\334\252\325=\177\031f=9\251\200=\231\201A=jn\254\275;\335\005=\301q\367<4\371\306<-9\212=\265o\007\275\223\213\213\275\202\005\034\276\214\264\255\274\245$\207\274R\010\363\274e\265\222\274m8\202=\221k\241=!\2001=\215\365\014\2755\262T\275b\240\351<X~\357<\357\215U\274\315nu\275m\245\206\275\232{\025=.P\324=\002y\223\274\304D\245==_;=\304\tQ=7\250\213\274\223\220\306\275\257\026\370\275\257gP\272\336\370(\276\210\232\302\271b\346\210\275\027\207\265<\3273\300\275\222\274\216\274\306\005\236\273\343\346}=E\306\322<\"\334\267;J\210I<\333\017\032=\315\003\352<\024zq<\220\024\216\275\327\201%;\331\240\266;\321h\213=\373\363X=\265\355\331\275\304f\'=\270\033\025\275p\024~\274\337>==\033\350\234=\353\250\201<krN\275\032\307\304\275=\316\200\2744\002\216\273bF\252=\375\215$9\267\332\247<\000i\211=\244\326\217=.j\211\275,\037\214\275\036\311\210\275\002U \276\304\0065=\346s=\274\2323Z=\223\004}\274\321\231\336=\235\225\246\274(\333\244=\210\013p<\350\242\n=\205\372}=\224\211q\274\004\354b\275\330\013=<*\263%=F\330\235<\327\366\033<\377\216\233\274:\030>=\034\213\205;\274\013R\275\031g\217<^\002N\275f\247\252\275\3678\260\275\023\3334\275\032\367\236:\356z\230=\321\337\203\272\226fq\275\367\353\270<\037\356\314\273\224?\220;X\210\265==\201m=\236\336\211=mYY\275\315\372\310\274j\337\354\275(\212Y=\021\346\311\273\354G$\275\352>\354\275Z\016\220\275\257\267B\274\\\221t\275^\345~\275\306\327\">[}\361;\265\305\263\275(\352\275=\252\242\276<\304\266n\275S\241\014\275\361=\315\2759\026\240=\314s.=\345\334\220\273t\226Q\274\037\261\204\275Sd\224<\010\314\351\275G\177\232=\375Z\346=\266\225\"<\275\353\307<(\304(=\005o\311:\013\335\321=N\255\371<\350D:=\367M\372<\247\317\357<M\021\225\275-gA\274\"j\362=\265\023a=\333;Y\273\210S\007=\251n\'=?\177\237\275`\367\264\273\314\242B\275\366\223\241\275\351\257\352;\273\321-\274\205W\017=A$&>D\277\340\274DV\376::TD\275\233\376\303=\002\020_\275t=\333=\324\355\204\275\262\2503\275d\364/=PM\030><\334\236\272\240\2562=\273\260H\275Oy&\275?W\227=l\325\320=\350\021\332<\210\301\023\276\236z\004\276\375w\243=[\300p;\231\372\343\274\230:3\273pz\225<E-\266\275st\257\273\220,\314\275pO\031>T\267\024\275S\367\n=$\327\t>\010\207-=qA\006>\\?s=\205\022\216\274)\230\231<\361R\002<F\023e\275\320\033\307\2746\332]=\354\365J\275\341\255L=\264R\255\275\300\343\263<\024\273\024=\372R\224<\355\351\215\273P&n\275O\362\234=.\264[\2755\260\264<1d\253\275\274\320\222\275\rTx<\310\324\221<Yq\r=\236\027t\2741\265\235\275q\322\210\275\251qu\274\034n\000\274a\327\217\275\233\227q\274\027\rn\275\324b\261<\342\036\241\275\363\002\\=z\310Z;\211\200^\275{k0\272\272:\312\275\206n\226\275\002\225x\275\347\254\261\275\244X\257\275\350\332K<@u[\276\231\302\355=t(\332\275\352\220\331\275\262BF\273D,^<\373\377R=\345\342\307\275\tH\216\274_W\257=\310|\270=\321\352P=h\360\257\274\235i\025=X>u\275\236.\217\275ay\212=b\267\356\274\355\333.=T\265\206\2751\313$\276\311,\334\274\377\305\310;v\023\273=\246rQ\275\345L\375;\350\203*=\262|\253\274\243\t\033\276!(\031=4x\021>\311\332w\273\230\0359\275\264\320\005=@\004\206\274\027\216\213\274\340\n\033= B`\275\275\2073\275\210\3050= \217\354<\326,_\275\254\262\002\275Kdi;\025/\213;\204\336)\275\004\320\200\275\331d0\275o\375\002\275F\355\302\275\255<3<\013\271\304<a\203\254=\314c\200\275\316_ \275\031\255\270=\316d\020\275\275\216\215=gx\211=s\207\030=^\251\220<}W\245<`\372$\275\252>\021\273\324\2758\275\243\321B=\302\335\n\275$\356\362\274(\300\243=pT\273\275\223\214\205=\345\274\311=\373\314`=\2272\375<-\2274<\355\372\220< K\315<\332;\217\2740\307\033=`/H\275\374\007\227\275\243\360r=\007\221h=$\224\023\274_\214)\275\317\205\016\275\270\242!\275\271\r==\325\016+=I\023\356\275)yh=\323\222d\2748}\352\273\201T`=\262\234\201=\006\"\223=\3420\034\274\204\314\241\275\215\014\177\274\256~\245\274#\027\035>\350)Y\275\244\250\247=\276\350\225;\227$\226\274\335_\n\276F5}=\331\232\345\275\235J\377;\213\004\321;\032Jg\2758.\020=y\247B\275|\204<=\374\021\370<\023\263T=F\224&:U[\237\273;M\220;\312wN\274\350\363Y=\3763\017\276L\355\177=W\272\327<\305\276Z>\036D\377\2743W\222<w\210w\275!\214\202=Se\274\274#,\243<(\231h\275{\217\240=]\237\257\275\230`E\275+\221\313\274p\3273=K\245W=\265\030\240\275,\264\320<k\311\224\275S\335\037=\032`\332;uu><\374O\032\275\204\026\354=\200\312q;\031\337M=y=C\274gR\236=\003_\321<\032\302\344\274\342\273\205\274\255Sd=Y\t\273=\230\316^=R$9<5\014E\275-\205\351<\226z\226\275r\365\036\275\031m\320\274\220D`=\352\0063\272\360~@=\022\245\333=^\367#\275\302Hp\275\377\021\037\274$\001\350<D[i\275Y\353t=+M\246=\326\360z\271\017\313\023\274\203&\333\274q\274\275<\311\252\014=r\211Q<\376U/\275\235\035\304\275\r\3469\275\264\031w\274+\024&=A5\205\2759\033\255=\325,\331\2742:\030\275\253;\013=\240zk=LH\242\275g\323[=\000\353\014\275\351\2269\275\241\365\304<_L\027\275O\377\367\275\020\233\206\275\321Y\206=\375\333\0029\375\2209=\014\204\032\275hL\271<\214^Y=P\021@=\260\233H=\242{W\275yIY\274\235U\256=R\346\037=\304*\312<\037\201\033<F\023Y=\036<T\275\332\222\256\275XwZ\275\230T\'=~I\204\275`\355\215\275.P\256\275\211\364\223\275A\253>\275\210\233`\275\332[\254=\'\206F<\224\006\030;}I\227\275\214\323D<\271\234:\276\251t\237\275qZ\346\275\212\215\341=1M\242<\245\337\352=z\216\221\274\007\266\214=\312\344\203=\236\347\351=\315\374\327\274$t\342\274{\221\273=!\211;=\270x\242=9sf\274\361\304\033\275\032\016\256\275\352\251\213\275\034\370\201\274\276\030~\275N\225\002\275\252\350\222\274:\273\221\275\351\0263>\250\357V=\224m\377\273\225\333p\275.\206\216\275h\314\005\275\371\373\366\274\034\031\000>F\277\352<\275p =\2512$=p\"\014\276 \352\000=Nw\024=\276h\304=xu\022\275O\236\265=\000\374\200\275Sz\376\275q \362\275\037?\266:\023\220)\271\2653\220\274\330\216\335\273zmX\275\267\013m\275\246\362\261<\367\322\032\275\215\342\003\275f9\205=\273\362l<t\236\210<\305\374\026<8\301\272\274\\\220\216=\233\335\r\275\260vP;B\033J\275c\3278=~\367\304=\301\342\326\274\266\322Z\275:6g=(\027\221<\024\367\306<\371\005R\275g\033\342\274\236\031\222=\266\263\352<\363K/\274\334\026\357<\204\004\350=\277l\260<\004]\001>\016}\265=\354\004\034\273]\234\266\275\216\005*;x\366\336\275\332\314y<e\034\253={\2770;K\213A\275l\242\037\276tx\245\275\305\335\363\272c\031\n\276V\237\231=w\3061\274b$\235\275\253\255\313<\344f\233=\036\230\272=\020\017\n\274s@!\276e\240r<(\307\211\275\360\261\307:\274a~9\323J\264<\217\204+:\017:|=\301\026\014>\266\007\205<*\013V\274\370W`=,\037\203<W\220l<\262dr\275\267_\354\275,\265z\275\006<\023={\270\002=\0164\212<\321\260Q\275\250U\262\275\310\374\013;\304V\310\275q\002\005\275\305\304\232<\026v\264\274\273A\375\273\225\257\351<\017m^\275S\335\223\272?\257z\274G\233?\275r~\210<D9\213\275\307\213\273=\0373\246<e<:=5\300\325;\362\3729<m\036&<\235\003h\274\201\'\212\274e\266\247<\312\337\220\274x\372\210=\2108\226;\277g\305<\344\236\233\275\251{\316\275\244\367\300\275\270B\300;\301\202\267\274JgW<\230\337\355=>\350\215\275W\212\340\274\363\312 =\033\350\356\274S\022t\275?\365\241==\241\267\275\316\205\274\274U7\335\274\366\306\362\272V\334E\275\363,\332<\002\316\024=\272\2030\274\354\255\"=\371N-\275\246\317\253<o\226\330\274\237(\214=\275H\377\275\365\314A=\000\374t=!\210\010\275\"\373G<\203\250\206<\370\254(<\007\314\200=@\033 \276\272\006\022\276\230\214<<\352\260E=\205E\t\275\276c\205\275\362\\\033>Pl\034>\331\357\022=t\325+\275[\007V<\336\236\274\275\317-\265<\rIu=\315\010\205\275\233\231\001\275k\316\324\274J\rE\275\243\313.\274\356\314\353;\214\022\243\274M\274\214\272\037}\205=\330\007\271\275\251\021\021=$ -=\346@\t=pJ~\274\003\r\201=\006e\252\275\372 n\275\231\256\220<d\351\275\274_KE=\257\0275\274p&\006>{\365<=\271(\204\275\311\364\311=\311\214\333\274P\027\320\274>\004\212\274\273\350\255=\'py=l[_=\227\242\260<\371\316\027>\225p\326\274\014\356\320\275T\302,=\313\306\374\274P\225.=\326w\000\275\356\026\310=zq\236\274AA\"\274\241\374/\275\016Mu\275\227\227\\=\337k\211\275\035O\0329{\312\202<B\014\216=6(%<\315<\201<\317\326\303\275q\020\307=\023\246y\275\367`O\274\263\337\274\275\337\322\'=.\306g=$\346\'=\0337\277\275\271sG\275+\210\261\275\214<\373<\341\340\277==2\262\274j \241\274\275+\003\276\370\331\370\274O\345c=\353\376{\275\276Y\313<\220\231\274\275\021\224!\275\270\214\273=\307s\035\275\"\223\n\276k\030C\275\353t\177<}8\237=\321\243\025=\217\353\246=\307\212U\275_M\255\275\306w\010=\020\232P\275\317\240\013>P\257y\275L(\211\272\177\271\214=\243\212\262\273\241u\020\275\304\000\330=\235\256\022>?w\206\275\362\377\235<\300N\227<\0108\013=Yf7=\336\273l\274\362\317\364<U \004<\245L\364<i\373W\275-6\254\272\310x\371=\033\035\025=,\345\340\273\243GP\275\312\360\375=\032\350\245\275\234\'\310\273S\345\264\274P\217\224=\003\326B\274#Ye\275\302+\206=\037\366\306=\201q\300<A\034\267\273k\352\t=\376Z\016\275E\207\373=bF\\;Z\315\210\274\256P\027=z\2435\275@p\237=\327^9:o\355\002<\203\264\306\275\357\2617=f\231\2059c\277\262\274\346\243W=\3309\322\274\004\233V=>\355\244=\033C\321;\345\006\204\274=Y\220\273l\343\014=\231\377\221\275\025b\372\274\267.\344\275tD+\273w\3574\275\343\362=>kA\215=\345\203\271\275%\031\005\275\375f\277:\214\214==\2657\336\274\267\342\301\272\023k\215\275~\230\006>Y\222Q\274\\\353\024=,\300\217<\321u6\274\221A\271\271h\017\251<\341\247\317\275\226\0078=\213\262\205=\t\'\370<0\2122>\242\306\035=\0018\205=\321\224\272\274\306\366\357\273\277\226\322<\320^\002=.\2468<7\303$=\312\035\273\273]\244\026=\200!\332\275\230\245\201\275\361\3118=?j\375<\034\013\210\274\310^@=\310-\220<\333R\005\275\277\007}\275\330\366\221\275\206\362\376\2748i\373<\253\200\334;47G=\207\352\031\2755Q\325\275\346f\330<p\333L\275\345\021\177<~\267\251\274\216\315\223<\213\371\214\275\316\263Y\275\320d\243=\232\264\253<\301D\n=\246\226\003=\013\3372\275\3357\250<;\244\324\275\3600\006\274\004\211\315\275qV\231\275m\\\255;\365G=\275L\305\276=j\257\300;\266\003d=\311\0073\275\260\204\r\274Ky\013=\231f\312\275\022y\231=l\250\035\275,\220B;_\311\007=\373|B\276\246W\232=\035\316\037=\340\235\327=\320\245\020\275\313<{\274\220!\201\275W\213I<\345C-=\235=y=\261\313\350\274Tu\037\273I\031.\275Q\022\223\274\3034\366=Y\336\314\274S\304\013=\235M\224;\335_;\275\206fk=\274c\330=\324\242\270\273m\344\321=\251\320\007\275\347\024\'\274g\304\213\274\242\224h\274u\"\265\274\014\257\232=5\362]<\256\3136=C|\007\273\376\316!\274\3568\002=t6$=\264\342w=m@\312<\006\377\021=\240m\030<\367\020a\2757\273\323=\031`\274\274pH\017=\211\024\003>\247\270\014\275\323\026\317<\261##=\004\340)\275\373\276\366\275\310\355\242\275\337s\024\275\357\201\227<|\355C\274Bm\001\275\322\375\235<\256)==\246\240\367\274\360[\027\275\255\363\"\275W\215\203=q\020G\275\366\362\031\276\243\214\224\275\002\233\032>\223}\207\275\226\334Q=}\341\002\276\254w\202\274\210=\220=\004\251\317=\242\024\267\2742\262\006\275y@\354;`u\254;\243\344\254\275E\242\t<6\366\234\274\013\'\317<<\032k<\'\344\032<\317\270\367=\006\036\270\275\370U\327=\237V>\276\341\251\307\275\034\356\215\2758\017\205=\244\307\313<\376\270#=^\336\014\2763=\211=\321\345\350<\223\375~\275\262-9\275\221\016\247<\331\262\300\274\333p\252=\374\024\025\275\375,\201\275\205\236r<R\211\244\275\274\010\227=\360v\007=\330\326\261\275\314\337U\275\357\225\251=TI\230\275,\273\226\275\007ae\275\340\334\224\275Vq\207\275\372\020P=\302c\244=\215\345\334\275\357\177\000\275+OF<b\235\225=\373\330\277:\206\372\226<\3109b<\232D\313=\335\024$=\327\352-=p7G\275\302|\243<!\257\300\274\337\341\200\274\304\027\021>\325\326-\276\231\036\r=\273\3018<\374q\273=\352B\035\275\312~H=\233R\316\275B\266^;`\366\r\276\3469\375\274\'Y^=E\313j\275fq\203\273\014\324\025\275B?P\275v\177\317\275\n\307P<\224\nj\275\232\236Y\274s\021r\273\t\013\345=\3023\005\275\204\240\036\275}\245;\275\223\327\203\275\271\367\232;\230\207\231<\010m\346\274J\031\200<\235\014\307<\302}\320=\227\265\206\275\000\332\206<{\342\010=?\237\036>\353w\252<\366\262\234\275\242\370#\275L\304\266\275\345\206\242=\271\224\275\274xb\235=\000\307\225\273\212]m=_\234\212\275eQ`\274<\220\234=\252$_\275m\325\251\275\242\246v=(\027\324\273-\206\242=k\233/\275\026\362\317=}\361\305\275?\025\324\275E]\373\2744\037,=\273\313\030<\016\233\246=\324_\243\275\327{\206=\020B\230\274e\215t\275\212\025\352\275\364\272X\275\252\374\024=\205}O=\256N\025\275\234\007\265<n\026\205\275C\307\270=\372\357\240=i\304\030\275\261\000\222<-\3453=\277\303\301\275^9\262=j\355\276\275\"-\242;\213a\256\274/\213\301\275Y3n\275E|\300\275\256\013\366=r\n\320<\213\t\363\2752-\277\275\233\025\351\274\236\217=\274=x\352\274\014\347\346=\375*\304\275Z\326N\274S^\010<\264\213\207\275\354\031\027\275\331\276\371=\335\004\214\274\306\270\230\275\220\321\237<\302F6\275x\\\345=\217\246\334\275\300\031l=\262\002\253\274\325a\321=\345P\344<M\252\354<\346\245\016>\312\037Z\2743\214o\274\347;\213<\264,@=6\306\227\274<\314\200=\274C\247\275\347F\364=\"\206\366=\213\010\330\275P\025$;\264b!\276\373\335@<L\3716\275\002\354}<\177C\210=\333W\321=\345\363\344=\366\177R=I\013B\275.\261\331\274\036+\305\274\345m\244;~d\262;G\312\003=\336\016\205=\353\212\341<F\311.\275\340\306\310\275\242\252\036\2754\016\331\275\371z\351\273[3\210\274t\376\030=\346\n\315\275\263d\257\274\364\224\243\275l;t;\206\346g=\323)\373=\272Y\230\274\336\216l\275\361\300\026<\347\201\305;\373\2549=}\225\032=K\2371=\367x\324=`\213\\=\265[\273<\370\340\333\272$\332\251=F{\202\275\333\250\207\274_\020\251\273\301\337k\275\330\326\033\275\222/X<\3673\313\275\2411\203\274\233\242\227\275)\220\211=~A\306\273{P\026\275\364\321F;\361O5\275\001\371\006\275\374\263\273<\265\253E<\226\006O=\035\353\205\274L0\360\274r\t)\275\007\250I=\r\006\303\275\362\266\023<X\375\030>\005k\321==\254\230\273m\2171=2\356\210\274!\357\275\274j\214i\274i\336 \275l\352\366=\344\232%\275\230\203R\275\232\306F\272\256\267==\007\321\234=\021\356\205\275\350\367\247=\363Y\377\274\232h\003>\r)\r9g\267\361\274\326\3375\275\315\r\233\274\035[-<<\n\237=\374\216\202=W7z\273t.c\274\307$\314\274l\021\253=\000\316\311\274\334&\n\274\201\224B\275\211\356\355=\257Oa=\032\013\302\274\355\3017\275\037\307+=\031v8\2742\261\251\275\274\232;=\035\004\215\275\323X\007<\340h\024\275\320\210\342\274\000\251+\272\376\034\243\274\331\210/=\013\263+=QUH<Z\267\033=m\375\254\274\367\246\033=!\236K\274\0028\323\274\306\245\002=\200\001\271\275S\345u\275b\374\343=\n\010\200\275So\302\274\253\206<\275}*\262\275B4\335;\226\232\244<}\275N=I\306\226\275L\2566=\325\233\225\274p\375\215<_9\033;\356\r\000\275\223a\220\274K_]\275_~\307\275)\341\244<\210\027S\274Q\354\234<m\313\220\275\270\270\026\2752ei=+\351%\275\366\362\227:\257,%=\025k\277=bN!<\320i\230;\256^\311\2752`\021=\t\211\213\275k\022\251\273\030{\211\275\226\302\316<2\n\303\274\345\323\007\276\375c\277=_\030\354\275\322\300\210\275(\265\302=\005\275\354\275\315\310\232\275\377\306\224\275\325O\013>\326\333\277=\350|\025\275\204v\262=!\014\306;o\331\362;\014\254\210\274\t\277\022\274\264+ =\234\325\036=,m\220=\224\210\237<\315\215\016=\2719\351<\020\350J\274`I\307=s\032\264\275\n\213\336\275\274o\243\274\235\234u\274\241v7\275:\305\357<\017d-\273\357\360\212\275\2435T\275j&\226\275(\\\266\273*\273\203=k\022\016>\305M\216\273\032\356/\274Y\001\026=\355G3\274\271\205\336=\302>\312\274\245\212\357<w\370b;;XK\274k\274\242<\342f\244=H\021F\274>\361\256=\177\221\306\274([\252=\357\335\333\2743\325\274=\257\225\332\274!\250\273\274OO|<\205\276\311\275eF\017=\014\267\322<uDE<.\377\225=\206\016\274\274^\200\312=\342\357\346<s]\246\2730\376d\275\374\371\257=k\332\022<<Zq\275\033g\264\275^\362\251\275}\275\257<\004U[\275\215uD\274\305(\246=\032\351\207<\224\243\347=\230\325\006\275\017\217\020;\345\262\303<\351-\031=?x\">\277\221\331<\007\354~=\267\321\000\275<\271~<\034S,\274\003\351y\275b2\343\275\263\260\234\275;%\251<}\347]=\025\350v=\241+\300;\211\177z\272\231p\031=\031\016P<6z\021>\310p\324;\245\302]=V\377\304\275\252s\355\273QF\253=\265V\220=T{\312\274D\332\220\275^\222\2328\0045(\273(\325\221=\245\253\222\275\273MW<\324/\010<e\273\217<\303\254d\274\025\215\365<G1\350=\250\242\314\275\036X\253\2758\367v\275?\2051=l\216\200=\204\000B=\332\337\267;A-\001=`\364\352\274)\363/=\t\027\240\275/\2461\275\017\\F\275<\221\220=\017\251\272<a\335\210\275\242\310\354\274c#\234\273\241hX\275\265\r\304\275\365 k;$\006\334\275\362\323\300\274-i0\275\261\304\020=\2076\235\275\267(r<\031\363\337=\254<\002\275\203\020\002\275\233\222\204\275K\020\303<\356\376\034=\263\202j\274X\365Z\275N\004\216\275cQ|=\225F\246=\203\236\217;\244p`\274\204\232\305=\224-\251=\351\\\221=\340\177B\275\363{\371\272\276C\343<P\373\274\275E\351Q\275b8s<6\014\303\274\220c\257<\345\022\227=0\277\021\274\354b\226\275u\026\353=\\X\210\275B\033\224\271=i\327\274!\2530<\026\201\206=\363\342\322<\276\337,=\207S7\276\016\032\355\275{^\364\274\255\016\025\276\325\264\357<\263\200\340\275\330\262\315=\300\223\261\275p\350\t9n\300\216=\264\377\246\275?\244\315\275\n\256\327\273Cp\224\274?\024\243\273A[\235\275\247\026F\275U\276#=\226\005`\275\001j\177=\020}\200\275\033\347}=h\332\007\276\324\277\236<_\347F\275\251\352\024\275/5\336\275\345\225\242\274\273\355\327<k\177\010<\267\037\341\275.\222\373\272\031\263^\275]\003\302=\316(#>\250\220i=\200\260\255\275\002\177\245\275\033\010\351<Cq\245\273d\230\021<\035\374V\275\t\366\232\275\374q\263<\022LI=\017\345\2679=\314\360\274\306\225\315\275v\242\254\2748&\010>Cu\364:i#\262=\303\352]\274w\261E=\265I\033\275j\222\004\275\307\177\245\274Gx\331<1!\263=\322&\216=o\327\267=5_G\275=\346\343\2750\2546=|}\241\274C\024\220<\361\201<\275\264\301\004\276\257R\262\273[\271o=9\006\237<e\361\367=\374x\220\275wn4\274\352\3570\274\363\007-=\254\272\030\275,\377\252\275\324\037\345\275\026\262\330\275\266\035\317<\244\313\345\274\344`J=\215\223q<\027\326R\275\0173S\2750g\202;l\304\022\275\215\261\252=9\207B:):\037\274z\321\264=\357b\377\274\360\t\016=^\252Z=\311\327y<U\027[\275t\r\263=\270\035i=&\333\345<\213UL\275\247\007\324\274_5\327=\311\313\257\274\243-1=+-\366:XZN\275\213$\003\275\277L\343=\372)\334<\244Xa;\310\363\036>\332\302\232<ogd\275Fyr=>\315\216\275}y\267=\306\204\305=\267\305\000\276\010E\t=\275u\253\275!\372\337\2740\217\305\274\304R\350=`\346\275=\223\016\033=\372\r\243=\317\343f\275ye\266<$\212\277\274O5)\275\372P\363\274m\210]\275\0226V\275\000\242\277<\274.>\275\177\332\254=\367\274|=\316\333\242\275\010Z\235=\0109^\274Sz\231=G\000\004\274N\213)>\273\241b\274\217\321\007>(\360\275=\3259\001<\004\375\245\275g9\333=0\001\226\275\316\353\024\275\264\216\214\275|\"-=\003\246\010=\214\177%<S\307t\275\230\201\273\275>#g\275\340T\005=\203\277\004<\236\212&<\272\275\"\275F\311A\274\314\3200=_\272+\2759\215\251\274\022Do\275\267U\247\274\335u\255\275\0238\334\274\030T[\274\340q\307=\344%K\275\302\321\251\274\265Q\024\275-E\203=X\265\253<\2271f=\217V<\274\262\236\016>n%\342=\021:S<D\256\311<@.\331\275S\200\231\274\266?[<S\r*\274V\234\226\274=rm=l\360\204=L \254\272\037\357\177\27403E=X\352\"=\261\314\241<\233\221\324=dD\243\274\206u\177\275_\264;=\262\344\216<\217\3140\275\277%\373\275\364\247\261=\304\006t\274\023r\321\274\232f\014\275OS\221\2757\236@\274e\3353=\014\373\300\275\010\314T<G\2331=Xo;<_\353\"=\206\201i;\202\340\213<\202r\016<\363\037\227\275=E\240\275\351%\221\275\240~\213\274\362\013b\275\027-\363<\237\331\024=\316y\313\275g\206\306\275L\234\314\275Hy\261<r\236\021\274\'n\301\275\007\232m<-\337G<\362\253\264\275\030q\242<\325\347\241;\215\214\341\274S\3175\274\254\352y\275\n\304*\275n\340\001\275\353\261 \275\270\241+<\006\016C\275\344\310(\275\373\250\355=\n\326Y\274;\363Z\274\241\211\327\272\32233\275\376\374\262=\243\257\360\275)\363\211=Ky\263\273hp\240\275\033\034M\275\336\227\264=\230\316C\276;Q\032\276\270\233\233<r\356w\274f\320S\275s\335\002\276ZK\315<\235J\220=\267\036\022=q\305\376\274,\2450\275a\213\337\275g\301\370\275\001i\371<\360!\006=x>\025=\216\\\020\275\246L\241\275\3222\262=\331m$\275!l\232\275\207\007I\275\2437\347\275\362I\301\275\320\250\n=\317\221_<\245@c<G\2062\275(\023\254=S\006+\274\216\366\226;\227\246\'=\016\355\277\272\367\237\246=\360U\343<\333\t\212<\311\256\223=\372\267\204\274\272\235\202\275\001po\275\337_\245=&\325\022\275Q2<\275\250\204\221=\"\213\346\274,\226\232\275\277\005@\274\221\000G=\3757\264<n\351\270=\005\261\021\274\023#7\275\212\274%\274\303\r,<\234A4\274o\033\310\275%w\221=<%\t\275I\222\254\275\223kU<\215\363a\275%\"G\272\r\376\000>\001\007\204\275o\343|\275=o\274\274\352(\254\275\362\336\214\275\325\350\217=\214<J=}\230\202\2756F\327\275w8\360\275f\031\013\276?2\310\274\335*\263\274\333\021,\275{\3350=\210i\276\274~\201\342\274Q\177.\275\302<\240<\270\":=f\207\347=\336(\354=:\375\324\275k\000\350\275^E\236\274\t\310\315\275\364~\027\275}\000\237\273\355N\223\275\327\206\361=\032\0258\275\361\227\330\274r\3129\2723gC=\301A\273=}\2525\275\036( \276P\353\367=\331$\273=\271\321\226\274\2610N\274\346\240\210=\307\335E=EF\245\275]\364m\275u@\354=t\266\241<r\204\001=\265\246&\275\202\270\203<]w\357\275\237\232\\\275Zx\214=\350\2131\275|\224\203\274\200\023\375<+s!\275]\013`\273\004\r\370<6\244\256\274\275\203t\275\353\010\000=\347\240\241\275J\357\267\274\347\354\367=B/V\275\243\201%<\227\'5\274(\233\226=\227`\241=)\213\010\275\035\240\355\275!\205:;.\357\256\275\244\201\270\274\205\370\254<\235\3408\275\203\341\022\275#\310&=q\025!=\242\322\022=\277\032\367<w\320\003\276\337\301\254<\314\251\n=>^\213\275o}\004=*\276\300:^7\323=;o\031\274\313\3520<\207I\"=A=\234=\226Z!=\006\032M\274O1T:&OT\274\352\203\375\274$R&=EE\";\345\370\201<\223A\273\275\202\210\372=^\035p=\202i3\275\2661\n=\350\200)\275\335\026\353<Tta<\345\320^=8I\t<\202\311\202\275\272t\253\275M\256\177=\243o\374=\317\251\351\274\327S\007\276\277g\252\2750\215\216=\3250\2679\r\027\006\276\270\347\272=h\377]\275\333h\202\273\301\344\026=\001\217b=\367\003\262\275\225/ =\317\031\036<\244\331?<\223o\007=\217Sy\2747\010*\275\212\220\222\275\246h=;/;\021<r\272\321<\207,*\273w#R=\266V\276<[\342t\274?\246H\275\031\314\262\273uN\031\275\240et;\222\321\230=\256\241\273\274\"*\022\275\245\232\203<\003\350T\274\364Q\246\273$\253\225\275\"\017\365\272D\223\301\275\250\304h\275a\022\2549\002\260\271=c\220\004>\354\257\3709\023 \010\275G\210+\276\235\247\275<U\235E=\371\260h<\221\035\251\274#!\227=\347\326y<5d\311=/Y\273\275\027\275\267\274\325\244\303\2745WC\275\3231\036\274\241\227\t<\257r\002\276T\374\214=\225.\221;\366&\331<|\034\235\275\325\371\225\274!\330&\275\277\005\025=3F:=\355A\225=\216\244B<\341\030S=\021\364\262\273\270c\207\275L\264y=\366\037\004=\207\001\342\274u\227\357;\n\300\230\2756\257\324\274\263;\277\275\275\312\037\275\312\355\211=w\013\025=,k\231=t\363\003>\307\035C\275\342C\205=\224\2575<m\255\374\275@\007\027\274L\254\023\275\344)\215=QQ\272\275\354\261\035=g\276\221<q\237\013=5\335\213=\350\356\357\272|\212v\275n3\354=[\205\203=`\202\307<\305\337\321=\035\360+\274\241\200\254=\013\\\"=7\277n=\364\346\031\276d\332\225=i\007\201<y\217\347\274\010C7\2741\"\314\273x\222\200<\031\313\253<l;\377\275\200\241\362<\022\021\021>\007\226\177<\005\335\'\275h\375\025<\304\300y\274_\212\033=\230V\240=\363\177\265\273c\363\274<\021t\001=e*m=\227\301Y=BE\250=\033\371n\275os\031=\264\r<\275t\265\336\273\0234e=\035\300\035=\247W%\276\306#\207\2745]\376\274\231L\215=\267\\Y=fM\203=*#\345=\274F\327=/{W\275y*\265\274\202\222\023\276\317\226\222\275$r\033\276\037}\205=\004\337\216=\215*\303;$\204a\275\003\215Y;\340|\254<yL\025=%\272\205\275\23673\2758\352d=Q\204\337;\335@\221=q\234\203\275\353\215\234\275\216>\206\274g\231\013<\200H]=\014\210!\275\252t0\275\345lo=qUV\272\306\255\264=\023\221\232=;\3670<\203\360\341;\274n\251\274_\307\261=S[\276\272E\"\255=\235\346\211<\036G\261\274\3078\366<\263\262\312=\205\270\363\274\266\376G;\261\340P<\3458\\<\377\033>>\3757_=\013\204\356=\341\306\361=K\355\260=A\316\275\273u\361\255\275Y\005F=\3533Z=\257\346y<\262\203\310\274\177\023\217=uU\217=rD\t\275!W|=\276\264\251<R\275s=\017\215\221\275\010\251\022;E\244A\275k\266Y=\221x@\275D\026\n>5\335\307\274w\004\313;\343\276<\275\217\263\255=\334U\247\275\003\020\220=s\250\035;p\224*=Tq\034\274\251#a\275\221\350]\274\250\250(\274\242\311\311<\\u\311\274\233\014\013=\2440\200<\"\025Q=\350\206\327=\267Z\031=\320\321\331\275\272\222\337=\367Q\017\276S%\247=\262\n\332<\325\372,;\3178G=\303\356\230<\341\221$=\002\323*;\200\270\212\275\237\300\025>\207\3067=p&\342:w\375\310\273\260\014\022>\361.\225=r;`=\236\361D\275\342\260s\275\n3\022=|\235\201=\277\327K\275p\024\213<}-\221=\377\311~=\354\317\356\275\034\202\223\274\317\030\211\275\355+\271\274\001\313|\275\343`7=[\010\302\274Z#\002\275\230\013\244\275W)\005\276\030;\204=\366#\220\275\262\337\206\273\232D\224;\001\250\273\275\"\3071\275\0253m\275z\236Z=\257\274\211\274w2\334\275op\177\275\205,\275<\310\305\221=\245\005\317\274\321\356%=\230\274\365<\252\260\235\275\256\367\356\275\243\014\220=\241o\247\274\003\210&<\332\022\225\274\376\266\'\275\036\245\363=\301\213\255;\3538\316=\353iu;\247\375E=\027\271\004\276\347\314N=\230,1<\212\344\202\275\330\316\244\274l\3234=CC\317\275\262\314e\274\024L\204\275VJ\304\274\377Z\276;]\2253\275^\177\023\274j\272\265\275\223\372\373\275\241\370\362\274\037\215\313\275D\305\253\275\235%\253=\022\336\r;\251\003\016\275(\260\364\274\202S\302\274\260\255i\275\225=\347\275\3254\241<\000+\217\272\305\317\314<\371\253\343;v\231J=\025\256\000\275^\340\032\274O9\352\273\241TO=\013\375z\275\3127\257=q\230:=\321\326P\274\026bh\275\203x\252=\2620N\275B\252\311\275\243\326q\274`\310\250\273\374_\217==\277\032=\035\217B\275\005c\r=\364I\206<\024\244\251=\256\3533=>c{<\335\354\303\273~<\t\276\377=<\276\212\334L\274f@.=\322\207\223\275u|\250=\375q\034:\034\202\253\275\300\201e<7G\213\275G\200\227<\254v_\275\343\360\026=\351\005@\274w\221\330\275]\247n\273\310h\037=C\000<=\221\306\325<\037\222c=\302;\364\2679\264`\274|\r\322\273\207\207\007=\332\242-<k\021o=+\0042=\355\331\222=f\236\271\275f\236\037=\345:`\275\345{\016>\022\245\364\274\336\352a=e\276<=\204bb\275\230\256\017=\357&\351;\030\372\314=u\247a\274\326\314 =q\323S\275\303]\"=\013W\271\273:\214\001\275\215\304\007<;\366\007\276V\310\327<u\023\310\274*\277\350;\231\211\322\275\2629\216\275\rYz\275rn\302=\006\245g\274\350\321\211=\366|C\275\312\336\010=\202_\316<E\224\325\273\347\342X\274NA|<D\302\261\2757X\236=\017K\375<\204ws\275Nk1=k\323\007\275\025\207\304=\2244\210=f\267\201\2758\325N\275\274\022\233<J\271\001\276\003\270v= \300\311\275\276\216\274\274^*\005\276\244\035\007\275\345\320\305\275\212\370\207<8+\241\275\324lI\274G\217,<\362\345\212<X\257\373<\221\355B\275\t\002\275=O\306\024\274\227\256\210\2745\255P\274\317\010k<\036\366j=D\263\263;\255f\001>\242O\321<5\363-\275k\322\013:\303\267\256\275^X\220\275\265\216\205=K\363\016\273\263\'_<%bw\275\224\203\341\273\201B^=\347\303[=6\270\334<\351\022\367\274\233\026\261=Y\311\355=/\005v\275\266\362\032<\030P\325=R\254\270=\263\010\374\2743\224\330\2742^/=gg\013\275u\366*\275a.P=\225\006\244={\r\217\275O\004Q\275\355\262\003=\327w\252\2750h\217:\345\203\253=\367r\316\274\243\234\027\274\347tE>\351.\332=\017\224\273=\2408&\276\377\202`\274\004b\300<P5\013>\216\027\001=~\323\215\275\277\022\371\274vE\277\274\204\215\206\274x\272\221\274\276\367\230=\257\360\217\275jjF=\354lr\275:\235\002=\303]/<\271\353\010\276\027E\347<\217\216\306\274\016\230\013\273\251y\355\273\375\270\207=\212\342L;LR\204=\371H\317<3H\017\275:\241\305<\304\376\201\275m$\002\275\262\246\255\275R#\346\274\213\253\263=%1\320=jZU\275\371\373\340=\023 d\275\231U\362<\035\032\317=\013F\200=\330\347\341\274\273\030\324<\365(\036<\313\260\276=\033\255\331\273X\263\242;\355\373\343=\'\255\021\275\252a\347:I\231\274=#\343\213<\2128\024\275\014\316\264\273A\003\350=I!\206\275\025\357\270\275\3178\027=\202}\336\274\211\267\234=\037\007\346\275\242\253A<\372\273E=\220\013\201=\344\315M=l\322H=\r\225\000>\037\225\262<e\251\317=<E\033=\262\310\224\275f\314\310<:\264\243=\017\003G\274.\017\033\275Mm\007\275\251\376\005<\302\330\031=mj\215\275\331\330\270=y\331u=\271\227\034\276\320-\233\275\204\366\304\275*\016Z\275\026Xp<\341\360\311<\316\000m\275\370\350M\275p\"\201\274\023\307\321\272\265\177#\275\240\370\352=\264.\330\275Tb\211:?H/=\371Y\355==\216\\<\007\316\217=\246\350\000\275\014\250\226\274T\211\241\275\321\326+\275c\275\374=\230\335\370\274\024\272\005<\333\260\017=\374G\364<\250T7\275\244D\235\275\333\222W\275\374\316\007=1\225Z;+d\260<\303H\221\275\342\000\216=\323\n\224=\220dL=\203\241\010=r\252\353\274~\256\371;?E\273=\307~P\275\342\216U=\n\035 =\035JN<\377\356\366<?6\002>\247\3232\274\312\213\202=rpi\275;\205\323\275\230\222\016\275\333\202\2329\216\'\374;\0163\314\275\247&\372:\332\264\316\275O=\270\2754o\372\274\2239\322\275\367RO=\362\005\324:\212\261\014\275\367\260\247\273L\330\306\274}\033r=T\023\264=aA\005=b\2515=\016\221\333\274\233\356\\=%\351\226<\351\255\345;b5h=\\\013\036\275\353\264\214;^\005v\275#\326\277;\231f\366\275?Z\t\275C\360\004\276\255}\016\276\206\300^=\265a\010=\372\002\245<\344\230\227=\334\020c=GU\226<\324@\272=\260\237b\275`\201\241=b2\234\274\207#\262=qNQ\274\343\267\261\274\273w\020=\372]\225\275\207\265\205\275\2776\326\2758J\242\274\323\006\342<I\276\377\274\006*\016=\260\231@<\376/u\275\220\364\025=\367p\243\274M\247\310=\'\237\021=\033\002\233\274\342h\214<\337U\327\274\025\372\254\274\372\237\024\274\022\3229<\351\311\215=Q\367\313<-M\277=\036\213H\275\343\\f;\311u\234<\312\200c<\263\001[\273\201\234\223=\"\263\234=\236\\\360<\333i.\276\261\231+\274X\030\020\276\336\234%\276^\217\325<\220\246\325\275\20583=\020\332\201\275\344\332*<Gz\235\275=L\337\275\210\216\025\275\tn\026\275\252V\'\275\350\'\030=\322\275\236\275U\375\273<+\315\211\274h\031\202<\316\000\376:\226\211\204<\250\021y<#\275y\275M\223\014\275{TW;\210\277\346<\263\325\330\275\315\237O=\374jR=\366\275\230\274}F>\275\017&\230<J3C=G?w=\'\337\n\275Y;\2418\234cU\275\216\243U=Vn\'\275\265\210c=\264\304\205\2744\307\201\275>\352<\275u\000\000\276\314q\250\273\305\302\354\272\343\325\204\275\276\220A<l6\272\274T\333)=\250j\265<!G\235<\307\014n=l\322\221\274\030\034\266=r\254\\\276\323\024\223\275\341k=\275\254\214\003\275\340\005Z=`R\256=\267#C=w\203\307\273N\346\001=\356\"$=\305l\324\273Lh\202\274j\205\361\275\020\312\3049r \214=\223\365K\275\317i_\275v\365J=~f!\275V+\242; \245\257\275\255\347m\275mE,=q.\344=nYI\275\256\035|=\036O\236=\010\\\263\274\373\305\274\275je\251\272c\004$=\177\2064\275i\345i\275a\230\212=\206Qf\275\021D\227<\000\"@=\247Y\267=\027\256\251;\310G2\275\254\233A<]\030\300\275\271\253\310\275\317\257\235\270\nc\236\275\nZ\033>\003\220o=\rd\014\276m\311\034=\304\336\255<Am\204\275%\0230\272\363f\243=d\265\367=\266\036\026\275E^\362<\236\332\265\275AQ\223\275\255\205H=\250\234$=\200>,\275q\004\356=\022\275\314\274\223\223\215=\325\000\210<&FH\275\326D\222=\361\033\270\275\254s\262=\204R\271<\204\372.>\222\2704\275\237\270\321\275h\247\225\275oo,<J\217u<=\303\240<\266o\325\2756R0=g}\312=\350[d\275\321\212\276;R\253\005\275\205\"!=\375\323\263\275\366\200q<\277\020\331<u?\301\273c\236L=G\260\022\275d\253\242\275\364:\331<\246\000\270\275$5\337<\017\235\270<\273G\031\275\315O\006=~\302\315<\236\351\342\275Y\303`\274\036\340\314\275i\372\306;\353\332\232=\367\014\311:\334\342u=d\234\233<\373N\370<\355\315\233=\021<\332\275\375\030\225=\311\034\305\275UA\003\275y)\252;\324p\314=\014\031\311\2751\305\371\274\343\242\302=`\220\373\274\375\212\363;\376\334\334\275C\326t;\361\254,=\266%q=\272\273\031=\375\370\314\275\005\366s;:\362\300<\301\205\241\275F\004h\275\333\"F<3x\212\2756\367\205\275f\031T\275b\205\317;\225\211V\275\365\010\010\275UT\225=@{8\275\006\275g=\374\016\037=h\361G\275\211\375i=\013X\301=\322NE<\327)\225\274P.\r<\017T\036\274m\237n=N^\204=\3635\"\275t\302*<\216\276\203=\344\227\211=\262&\336=\212g\003>\177\210\312;o1\214\2744c!=2\303\t=\301\251\223<\244\374\226:\340\037\200\275\326\3750>D\3532\274I\347\267;\031\353\t<\275\230I<p/X\273<\332\231\275\363\250m=\225\256\014\276\320i5=\335k\301<<\310\276<\321^<\275\300}\252=.X?=\207m\210\275\266\271\005\275o8\364\274\177S\323\275y\373\202\274o[J\274\351\303F\275\343\365\341=`!5=\340r\244<\017\377\376\274lG\255\275w\232\352;\267\013\236=Zp\232=8\334k\275\3655\273<\003`\320\275$\037\211=\235\225\226\274\374\221!=h\222\370\274 \223\'=\213f\005>\226\004\274\273\357\216\360<\303\217\363\272\210Y\030=_k\325\274\233-f=\324\010\322:l\316H=\323b\246\275\217}\006=&\262\364<9\332\035<\362\2771<\246\377\314\275\030\017\001\276d\300\347=8\221\261\275\247\342\334\273\326\022\207\275\247\3149\274k\252\222=7\252\217\275q\363i\275*\017\237\275!\016\316\274ZUv=\003A\231\275\264\260\007\274\023\001A=E\234\254<Z\270J=<\323P\275\316\261y=v\345\316=\342\250\237\273U\215\370\274\230[\310<]\243\200\275\000e\311<\002[U=I\347\215\275\255\345r=B\244\251=\351TR\274!\330\202\275\300>$\275>\205\005\276\016\252\261<\203\344\330\2759\305#\276\004\232\016=\200*c=\273\005\262=\336x\021;\013\035\225=\270[\342<\"\232\334<\202\355\331\275\326gk\273\2249\320\274|\233\252\275\334\304\031\274\032Kn=\307\263\200\275\0131\226\274g\'=\275\331q+\275\244)\321=0\347j\274cn\225=\335\216O\275\246b\254\275^O\344\274\206%\237\275\352\363\227=l\310\033>\343\266\243=`W5=\362\\\030\275y\244\t\274y\202!<\211\364\"=#]A=\245\332%\2753\203\007<\023\232\204\275\314/\226<\344\251\316\2749\305\201\275\313\240&=}wO\274\207>\200<\327\211\311<\023R\226=\020\335\301<\262\347k<0\275k=\010\002\263\274s\362\273<]\360\226\275\030\003\001>\214\211O\272\264u\000\276uZ\353\2745\325m\275q\230\367\275Q\302\346<\325%\221\274\356/\202=(wE=\027V\232\274\024\245$\275\373h\"=\350\324t:\224\356\271\273\265\220\271\2750\3521=\323\321\261\275N(\211<\202\001@=7\367\342=~]#;\371\316U\275\317#)\275\302\324*=\202;\200\274\362\364\020>CK^\275>\301\237<f\274\225\275\356\274N<>4\302\275A\234p\275\267Q\022\276\315\000\204=\376\003\375=\373RG=G\332\360\274\3257\"\274v\231\024\276\272\206\243=\210\323\302<\360\353$\275\370\225\325\274\240\307\235=\321\371\206=\374F\355<\010\353\032>M\037\224=\371\375\303;@\026\253<\365\334\257<\327B\207\275\241f\243=\233(\206=x3\212<V\345\274=\337\301\263\275\030J\360=:[j<\003\250\010=\243\3217=\374Dc=\226\003?=\302\232\033\275z\221$\275\370\217,\275\342=\375;\220X_\275~\022#\276e.\017\273:\366;\275\331\014\312\274\303\367.\275\377cM\275\324\314L=\377\366O=o\350\006\274~\007\301\275Mkq\275\2313\347;\372L\017=s\307H=:\037i=\3665\035\274\005\264\025\275\225/B=\226\224P=r\271\213=j\227\230;p_\246\274\246l8=\027\367Q=\376\251\220=C\355\246<\334\273\237\274\307\000\355=;\274\261=i\234\026:\352\316\274;r\200\331<\3506\003\275\331\255\274\275\006\235\215\275\177\372\323\275/\014\005\275dU\037\274\212\342\326\275\314N\032\274\037\364\307\275\231Fx=P7\250=\243\255\250\275\335\037A\275&q\224=N\001B=7\346\200\274;C\005\275\257\226.=\223(\211\2750\033\324\275.\345\231:\177\274\300<\255\357V:vG\027\274\022\272W\275\002\2172=p\354\207\274\365\033\032\274\343K*=y.T\275eM\273<\241\364\370\274\352d\351\275\026\332\247\275\317\232\006=\343\331\326<O\376\246=\376dz=\312\312\205=\325\304\202=\240\005\025\275\321P\371\275l\002\356\274\343\013\314=\270\221\272=\270\257Y\275O\331\362\275\013k-;U\006!\2763\'\213=\313\313\321\274\217\213\200=\372\001\347\275[\013\245\275:{\025\275\360\007\271\275\207-\256=\261\205\220<\332\241\312=\n\272\232<\215\332\221\275\013\230\230\274\216$\n=V\345\241\275\000\341\206\275\356\355\364<\254\034\262\274C\204U=x\\\030\275|`]=\242CZ<\032w\371\274\3334\224\274\206\352\023\275\262Y\220\274\020\337\207=mm\231\274\206f\001<$}7=\305\204\321=\331\031\312<\362\214\242=\253L\311=\210\032\272=\004_-=Yp\243=I\373\233=\360](=\265\212\202=`\tz=\201\3507\275\036\201\036=\371\004\370<\367\340\346<m\253\353\275\t\022\250\273\1778\214;\274\376\260\272\232\204\206=\277\033\275\275x#\264;T\257\242=\340g\355\272\326m\022\275\037%M<\257\232R\275\314\344\333\275\373\275z=\006\2014\274\004\342-\275\374C\276\275{\024\003>\373.]=B\370\335;\367\352\353=\263\320\233<\340N\233=98\231=\326\ni\274\325\017\346<\356\312p=]\304\030=\313\336\032\274\245\266\265\275\010\260\203<\263\203)\275H^p=5\207\262\275\207\374\210\274\0065\202<\370\256\014\276\215\027\366\275f\214\367\273Z)\301=?}\302\275b\354\254<\276U)\275 {l\275D\2622:q\332\333\274\231L\000\275x\274\003:\372\232\214=\333X\204<\213\tE=\220\036\014>@\307\005\275l\226\205;\177W\001\273\264\256i=\007\030B\275Jxf\275\355\263\024\275h\353h\274\377T\021=\253\255\332=\2010\221<z\375\372:\325\237<\275V\330\305:\330pL\276\374\340\230=\177\363\314\273\301\000\214<\273\273[\273~\026i<\360(\275\275\263I=\275\237}\230<\017\262\235=a=\304\274,\204\006\274G\211\324\274\325f\323=\315\373\266=\245+\025>R1\223;\360\267\215\274\301\374!\275\232\300\341=X\303K=~k\266\273y\216\340<|N\241<\3168a\275\234\264\202\271\333\000l\275\003\247(=\361\362R=\364\207w\275t\367\207=\333\034R\274\2471\354</\031\226\273\356\313\241=|\356\256=\006\250\333<\313+\236<A\201\033=\036\224k\274B\000\227\275r\321\362\274\375}\005\275\217\264a:\265\351[<e\312\n\275|\301\007=\027&\204<\257\252!\274\217\357|\275\016ue\275%\262?\275\254E\332\275}\307#\275\261=\010=\004\327.\2740\267<\275V\232\036\275\330\266\005>\237\204\240<h\305\214=\343\210\232=\017n\316\275\177o\202=\177\337%>\315\223\206=T\026\357\275\357\225b\274\264NP=\004.\231\274}\233K\273\275\022\350\274\213\341\264\275!\331\232=\327\212I=\237q\t\272\362\241\212\275\343\210\217=\236\352\315<\360\227\272\274\2768<\275G\2707=\005<\245=u\276T\275l\244\257<\310I\215\275\266\360\261\274\304\222\\\275W\311\216\274t\212\241=H\356\356\275\024\314\244<\177\353\256=X\377\006\276\352\314`\274\033\320\275\275n{\030\275\206\t\026\273\021`\236\274\224\"t:S\325^\275\221\210\311=\366\002\203\274\307\361\243\275N)\211<\372\005\234:\265^};\272\t\014>!\332\311\275\350\014\t\275\320z\341\275\t\363=\276\255$\240\274\247$\210\275Z\"\034=* \244=\177\261\333\275Wv\261={\343\206=\350M\325\274J\027\245\275\033m\245=+\230\020=\323\226\034=4\237\036\275Sa\230\274\nN\213=\340\366;=\300/\016<\220\006\016;\260C\021=|\256Q\275\'\272J=Th\256=\310|\025=\272\225\305\275\234\027\306\274zz\344;\362\304\013>\352\255\357\274\310\270\221<\003x\225=\341\021\237\273\014\3755=\213\257\242=\t\375\014\275\362\233E\275\177\177\026\275E\213\323\275\216\222\347<\261\270\030>0o\211\274\275\0103\275qM\034\275f\361S=\262\374\263\275\364{\243\275=&\216=\017\370\200\275\305\376E\273\274\r\207\274\256]\361<\2360\336\272\233\025\263\274\334\310i\275\026w\324\271\340+\213\275\177\303B=\344q\310\274\274sW\275\037f&=6\324\242\275\t\320\323\275\256\345\000=\343\036\216=\027\241\242;h\340b\274\342\355O\275\254H\354<;\t4=\013H>\275MN\205\275\037\302\245=A\270\332\274r8\200\275n\204Z=\320\357\211\275P\346\n=j=\302\275\200\327\030\275\274\224%\275\223\303\302\2741O\016\275\333q\243\275\014\227>\274\214\270\001=\014\346\266\274|\177\255=\306\300\373\274\246\034n\272.+\250\274\267-\337\274x\233?=\340~\371=)\233\220\275QC\250\274sm\264<-R\371<h\352\225<\2019\020=\373o\241\274jH\277\274\252\370#=\327\324@\275\256\335\032\273\345\032\327\274\264\340\n\275?~\205<\333a\016=\177o\343\275\033\262K\275Uj@\275\\W\203=;z\302<\213\352\224<\221\275\021\274\3427{=\226\203\036\275\332\265\357\274\317n\314;>\264?=\360\3062=\013M\265=\262\016+;\246,\227<_\031<\274~\270\376\275\201\337L<P\354\354\273\274\261\323<a\306\250\274\246\267S=\001ff=\304\310v=\300/\276\275,)\377=j$\200\275\323`\201=\201b\027\275\214\271G\276\320\324\346<7\370}\275\007\253\203=f5\026\275\347\007\202\275e\331\277\274-\032\322\274>\366h<+6\337\275u\341l\274\024\207\033;\231&F\275\371\226\232=\232k\211=wM\305=\377 \032>\250}\221\275\001\376\033\275F.\033\275\374\226\245;\345\232\304\274\016\260\274=\350\2752=Y\036~=u~\347\274\304;k\274%\022\356=\356U6\273`\266\n\274\333\246\307\274!\036\002=\016$\266\275\034y\004=A0\361<R\266:=\204JS=w\334\210\275\216\tV\274U\221\354\275\036\231\214<\205\262v=\272\264\007\273e\313Y\275\2513\243\272\013x\272\2755\344\320\275\312\213\361\275\362c\177=\rAL<\007\201\002<\250\304\342\274?\366\304<\227\340$\270\010\313#=\rx\013;\243<9\276\203\346\221\275FR\313=\374\037\021\275yF/=E\021\274=c\305R\275A\314 <a\231W<=\325\306=,\333\030=\020\035\332\275:\257\365<~|0<\340\017 \276\374v\030\276~\312\245=\203\n\037\275\347\334L\274\354)\336=]\034\201\274V\013\302\274I\022\010>\027\356\300=\300\023/<`\016q\274\254\230\233\275\214I\235=\207FV\275[\365\361<A\2310=\206\366r\274\242C,=\211\247+=\341L\324\273\0215\260<5\010B>({\356\274>XN\275\224N>\275\373f!\275L\316\325;\013\275H\2757\232\202\275a\377\236<&\313\323;\037\254\277\273 q\331\273/\204#=\364j\374<\'\223%<a\323z\275\235\255\201\275Xf\304;\021*\327;\0147\300=$\333\312=\263\301\312<\366\3735>\'\017\204\275\276\251\265=P\252\217=\325Dn=\267\237\315=\262,\340;\211\362\246\274\221\223\250=\337\204G=\262\356T\275I\344\017\275@U\226\274y3\031<\037\317\305\275\377\375\007\276\277\271\347= \335\027:\303\356G\275aR\244=\255\330<=\365\360\026\276\2636s=\371\3617=\306\372\201\272P\352\216\272\376\263\246\274>[\346<\375k8\275\nl\250=D\207\270=\276&\027\2750\377(=\243m\336<P\2571\276?\2255;/|\333\275\223\033\205\273\311\320\252\274\202h/\275\032\2705<D\2337;\361d_:\253\350\023=\354~\216\275z\232\004\276}zt\275\276\022f\275d\255\364<\373\260\241\274HL\230\275\\\365\346;y\320\244=\346g\366=\356\345S=\265\264\033=\205\223\274=\203\264#\275]m\027=L\224\003=\245$\210\274(\002>\275c\027\350<\271\377W=\322\266\271\274\314\225\263=\032u\233=\347\256]<\205\000\037\275\341\334\001\276p\340\233<\261K%<l\026\212<(\370^<j\305!<\031\215\336\273\256\366)<^\201!=\211$\375\275\361\373\331=\365\316\305<\r\325\370\275w\300o=\0179\270\275\366\210\200=x\270\341\273\267},<8\207 \275\202\375-\274\200\004<=\306\020\333=\213!\361<\362.\256=\\#\302\275\3202\032\275\241\266f=\232)%\274\306\t\031\276\237\330l\275,I\235\274\246$A=\035T\217=\337{\311=\003\235\314;\363\360\212\274\3549\005=C\242\335<[\360\217\275\263:\013=\356\001\277\275;\245\313\275\3277\243\2748\302\304<\177\000\245\275Ci\245=\347c\244\274\305XC\274F\207\023=\226\005\231\274\236\232e\275\200\316\030\275\204XA=\230\305L\275\321\nj\275GD\222\274jR\001<\023\027~\275s\242\256<\0363\266\275c\305\014<O\371\214=\342\362\214=,z\360\274\315\343b=\304\214\246=\254ms=\226 $=\034DR=6`0\275\263\211\222\275\262\222%=E\361\246<\324)Z=\025G\264\275\002\\?\275\327\262\312;\314\260\263=\036N\024;\352\366\324\273qM\202=\026\236\357\274:V3\275\272\035A<V\241y\275\2009\261\2755\035\021=y\323\216\274}\307&<\267\346:<}\013\316=\024\000\346<G\314%\276P\265\226=\n\261\222\2754@\370<\204\017\316\275M\326\312<}\266L\275\254\2239=K\342\217\273\227.B\275\214R%\275\317\270\202\275\206\036\345\275:\311?\275>\344<\274\205\345\350\275\250o\001\275b\373-=\026\t\344\275\375\366\026>\032\333\203=\232\331\314<G\313\262\275S\316\004\274|\024P=-\307|\274p&\322\274\267\277f\275\204\323\212:y[\033\274\237k\226=RT\263<\246\222\200=\n \010<BU\312=\277w|\275\306`\035\275B\256\304<\305\310=\274\225\247\210\275\033A\345\275\342S\206\275D\374\303\275\361\250\315=:|\230=\352S\325=\365/\314<\265\033\271\273\013\244_\275\270\027\000\276ve\027=\3454\346<\017\225L<\340\017\354=\301\203\227\274\305\021\264\275\265\302\237<\335\352\021\275]\243\321\274\267\366\'=\237\272}<&\325d=1\333\032\275\255\207a=\325\335\206\275\333\215\227\275\327\031q=\'\321\230\275\372\364\265;\251\361)\275\016*\256<\244J\030\275\211n\277\274\375L\362<\025oy=\177\326\370\274@\344\201\275Q\336\214\275\03292\275\375\267\342\274+\0074\27514\241\274\271\317\010=\363\032\005\275\224\261\003\276\235\033\305<d\234\222=E\3654\274\352\334\037\276\251-U\275\3773\310\275\366\334:=\336\221\000>\366J\264=$\262\001\275o\205\004=>c;=\207[\037\275\371\262+=\322\333L\274_[\004\275\tvc=\354M!=\2314\244=\354\316\344\275\352\375\367=\270\303\213=\307>\341\274\363\300\001\275*\206.<\2153p=y\234\254\2741\245\352=\333} =\021\177H\275t\201\220<d\037\306\274\'5p=\234,\303=\010\226\363\2744kn=\326\261J\274\364\007j<\004\277\227<\212\302$;e\276\244\275\r\364\241\275\341\0271\275\275sb\275\261P!=\014\375\337<5\232\'\275i\221\231\274r\006\374\275\222\311\245\274\\\370\276<\317\215\352<3\001\217<\267\270\356\274) p\2750s\326<\r\373\346\274L\206\003\276\301\207\275=\006\253\"\275{\262e<o+\371<!n\205\275\005=\367<[\361p=\013\034u=9\3662=\206\306\312\274\235B\262\275j\225\324<8\374;\275?\024\370=m\203\234\27551\217\275%I\340\274|\331+\276V\342\245<\3622\251\275\312=\252\274\3227\357\274f\235\351\274\026{\353\275\351*\033\274nk);B\271y\274\014h\037=#\223\257\274 \374\321\274\327F\376=\010\240\354=\210\341\224\275\275\342\036=\232+P=\016<\270\273\234\355\312\275\305\373\023\275\216\027\231=\236*6=\355\241\032=\317J,<\353\240R\2753\273s;s8\300\275\362Qx\275V@^=I[\221\275\207^\217\273\357\306W\275\221oF<\300F\017\276op*\271\255\025\t\275\013B\005\275\327\336\007\274~\214\3008\3723\250\274t\371\213\274\313w\341\274\207Z\200\275\034\336_\2750\200\005>\361:\273\275\"\0309\275A\342]=\374\355\354\275\264A~<\373HF\274q<\204=Rm\036\275?\"\037=\245H\216\274j\264\317;\220IP\275\270=L\275o\370t\274w\034\t=\013s\004=\'\003\305=\332&\031=!\203\205<\204\026C\274B#\270\274_\226\227\275\345\354\002\276-4\344=\336?\362\275\013\206\031\275\375\024\341\275\346D\331<\245\374F=\201\211i=\036\004\013\275+\372\366\274\232\375\323=\"{\n<\253J#=\244\' >\206\027\330\275\256 :\275\202\300\032=\323\301\220=\2572\206\275\265\257\307;\226\355\303\275\232\211\034<\347\265\363=\317|\233\275td\247=\307\252\006\275\360\336\236:\030?\007=\371\032\243=?\250\313;c\343\'=s\200/=\313\222V=\301\264\245<\002_$>\t\222\010\275\014H`\275a\351\227\274X/6\273yo;\2758\314\241<\344\021\312\275\275\310\032\275\362\315V\275\226,m\275\013b3\275\266\232\336\274o\364\321\275\207_\306=\t\216/\275C\351\032\275jTi<\316\2064<\2217+<2\254B\274R\271\010=O\276F=\325A\n\276\005\030\245\274p\203\376\273\002\230\227\275\000\240\203=\025\305=\275\222\355Y:\014u\351=\275\274+=\003t\207\275\212B3\275\377\231Z\275/I\223\274Ef\263<\312b\212<\233\327\322\274\317t\370=\311\201!\275\335\206\364;\344e\267:,\267\016\275\341G9=\336\255\022\273\332\033\365=s\275\346<\331\203\256<\353\227\373<\227P\371<\245\277\250\275\214\021\222=l\231w\275\177\"\212=\246\3533=\202k\332<\331\013V=\201d\237=f\326\312<\221\334\036=\246\306w\275\213\334\336<\366W\205=8\326`\274\371~\241\274\035{\032\275D4s\275X\275}=\344\277#=\230\014\275\274\003\261\350<\271\326\200=J\013^\274D\326\002\276\006\257r\275\247\231D=$\304\'=\255\325J\276i\024n<\332\211E\27528V\275l\005\356\274\210\022\222\275\034\001\342\275\337\242Z=\374\273E\276\331\341\202\275\360\002X=l\231^=\365@}\274\010\225g\275\276!e\275\3661N\2752\212\241=\316 \331=ik\253\275G\251\n\274\264\3539= \344\366<\303U\305<=\3469=A\343\207=\312+\217\274D\223m=\032\263\231\275\314\026U=\344\3325<\303\307\000=w\267\\=\027\026\343\273\211\253\222=\020\365\000<\033\025\235\274\357\240q\2753\362Y<\200H*;\364\021\032=\265X\213\275\361\356&=Js9=\250d\260\275rT$<j0\303<\233lE=]\005]\275\261\357\360<\206)\263=\276\301\257;j.%\275\333\203\n=\010\370\027\276pJ~=q)@\275\367\337t<\r\240\334\2759\341\210\275\3650\254\274\237\246\264<\002\373\247\275\374\016S=7\177\243\275uG5<\204\261\214=\237\211<=\266y\254;S\341z\275\241\006\002\275\366\361\003\275V1\262\274]s\r\275\352UQ=\365\251\226<\014+\214=\227\024\017\275\\s$\2748\237-<\334\324R\275\272\214\022\275\247B\252=\201<\323<\253\240U\274\232\315M\275\036\360\247:,\254g<\357u\200\275\215h;<0\366\365;U\013B>\2568\233<\350UM\275\225<t\275\244\350}=r\037\360\275D\\9\275\367\204`<x\220\357<=\207g\275\301e\022<\\\031z\2755\014\235=\351\305\267\275\314\2358>_\007}\275\013\247\331\275\313m{=\305\334\320<\377vK\275ZC\235\275\256RC\275\001+\021\274m\001L\274\222d\210\275;\376#\273|\215\355\275X\201-=.\236+\275\277\262\027\276SU\030\275qO\002\276\332\321|=\216\273m\274\222\333\024\273\006\271\230=\0201_\275\306\352\255\272jH\244\2757\225\266\275\210X$\275\316\233\007\2754\332\252\275K\251\251\275s\267\210<\336V\307=\201T\306=\203t\006\274,2\230\275c\343\000=R\021\247<\023/\355<\024\201\255\274K\327\010>\245\356\360=\366@g\275\336\376\201\273\266\213\203\275\327\211^\275p8\004>\032\277\216\275\247\351p\275\345\025N\276\356\366\320\274\345\274\033\275\202\217\311;kF\222<{\277\265\275\032t\252\273\253\247S\275M\3175\2744 \026\2755\223\271\275s\267o=\323?\242=@\350\322;O\017\034=\307\256S=3X\355\273\225\374\204\275\345=\221=\331\256\273\275|\014\036\274\347W\207=\001:\"\276\265\r\301\275\374\205[=\200)$\274+\252\342\273\373\346\026=\345\220\016=\247\366\\=;\260\366<\310\362\205\275X2y;\013F\227=\367\230\372<\307\342\235<\212X\364<\365\205\307\273\261kW=Es4=\200s\005\275\036Bv=\372\210\257=lb1=\237\253\233=Z\362;\275Y)\207:~!\370\274:\021+>Pw#\275\212\000\335=<f\330\274\314;\211\274 at=]n\373\274:t\232\275\236\322\370<\240[\315=!R\332\274\0038\347\275\212L\223\274\227\022\203\275X-~\2745\227G=(\322\367\275\020\356N\274\"\213\370</\177\177<\345\262\006<7\306\227<\330\026\221\275F\200\244\275\371\177\210\275\030\361\343\274?\200y<\247\245\036\275\007\003\212\2723\241C=\327\2617\274KoU\275Z;\275=\025{\361\273S|\331=<\362\311=\217\327\267\274>\302N\274\026\214\350<\230h.\274\360\256\252\275(\225u;.D9=D(\001\275>\363\266<\373\201\247<\302\315$\275\214mA\275\001\247J=\001~\024\275\246\304\262;6k\014\275eJ\323\275\024\004\356\2745\n\003\274\316X0\274\027q,\275\263n\214\275X\257\036=\024u!\274\032\330\271\275\200\264\014=\247%\n\276\371\236X\275~\203o=Y\354(=\343\203\254=\265\307*=\373\010\365\274\221()=\374\3505\274\300\315e=h+J<#M\374:>\016\307<\367o\312\275v\001\300\275\371\005\010=\013x\242<\014f)<\2319\235=n\245\225<\233\336\214\275\236\235\244<\320\337\024;\032\260\337;Qy\222=\022\216\203\275\035Y\\=\255i\336\274\375W\371\275\033\222\317=p\037\205\275\212P\347<\3716\313\274\215]\234\2754\334\311;\257\021l\275\200\035.\275`+\n=(%?<dJT=\202\314\303<\225d\010\275\211{q=Z\014[=s\200%;\245<\261<Z\233\303\274\312\021D\274\335\332\207<\335\230\341:\225\254\231\275\275\243\370<\360B\\\275\233~\037\275\273[\027\275.F\025:p\036\014=\224\200\215\275u\\-\275 S\344=\\3\n\275\314\334\355\274\225\221\024=Y\235(\275\027\270r\275\376\350\035=8\322\003\276\372X=\275-\306\224<\335}\257=/\250\227<\035\216\013=\354\036\201\275P\212\"\275s|\232\275s\307\262=\312,\232\275[\303\222<\345\352E=\007\t\221\274<\010\356\274\336\303\261=\215;\260\275)\226\364\274\366\352(<P\tN=4\331\247\274\350vx=Y\032Z<\010\243^==>\311\275\306\315F=3\3163\275\265mi<\240\364\302\274oc\202\274\306\271I\274\006>r<\210\007G=\342\216\253=\2460\306=5\361\233<\322j\352\275\177\213\217;\n|v<\255\334)\275\321?\204=\225\220\n\275\273\343\024\274\256pb=\240\251\360\275\264\244\034=\251(\217=\364\255\356\275\206\320@=`B\302=\350\230l\275\2707\205\275\034\211\277\275\253\244G\274\201\013\025\274\227\322F\275\017!\r=\233\026~;\244\037\224;\365\003x\275\n\3712\276\267\331\220=*\360\273=4\257\341\274\023\371<<F\252\204\275\023\3150=b<1=%iw\275\226\253<<\215G6>^B\317\275\025Y\205\275`\3670\275W\302\212<\226^\005=\242\251\017>\351\326\240\275\264{\305=\335\202\271=\013\\:\275\276!\266\275\350\373\203\275\207\222R\275T\035\202=\377\231\374\275\001\2068\274\365\\\007=\353\262\243\273(h\274=N\226b\275\367e{=Y\251\030\275\346\366\326=\214\217Y\274\260\207\254=\274\302\324\272k\354x\274\006\275\024>\327\314\275\273\264\373.=\243sp=\312\343\223=4\375\271\273\013(\t<C\241b=w\234\210<\022\257r\275\201$\276<V\316\260<r)\214\275\342\243\020\275\203\022\364\274\037\254z\272\223\037m<_\014/\275=\257l=\313\327f=xbg=\312\332\305=-\213\223\274\362=\261=I\301\262=a\340\363\275,K\005>;l\323;\217\r\233\275\304\t\004>\234\354\232\275\014V\300\275\362\013\025<\256^\221=\016\346\330<6I\223=\336\326\256\275\212\017\226=7\326\t\275\373\271\273\274\331\255\222=rf|=#W\276<(\261/\274dV9\274\341\223\263=\234\277\002\273\272\017\364\275\370F*\275f#0\275\245G}=\200\033\207\275\025\372|\274#\347g=#\024\233\273\017m\331=x\304\326=\022S\273<f\262\001=(\200,\275\tIL=\367\310\255=8-2\274\306l<\275\r\213,=\356\346\237\274\021\227+\275\216\021\013>\354s0\275f\370\342=\035\247\350\275\203\332\254=0\2177\275i\376\243\274\350\022\351\274g1\r\276W\326\354=V\366G\273\033\200\313=C\226\371<\034I+=\216\344\236\274\"\250\010=&\214T:8|X\274O\'\024\271\315\245\253<|\276\261\275\312\250\266<h\257/\275\251\322O=\2207`=\017{d<\246\336H\27387K;\317\217 \275\347zs<\340\207\304<\316yo\275\275\337\203<\206\244\315=~L$\275]\243\333\274\tdJ\274\017\003\334\275\363\225\014\275\330\021\263\274\236Q\365<\226#.\275\345\302|\275\267i\\\275\364\206\033=/\364\322<M\272\251=\"9\265\274\266\201D\275\253\327\316=\274\211+>\302W\353=C\036&=n\n\274\275hV3\274\031*\214=\265\364\236=\366\037\264<\236Z\325\274\2636\000\276\366\332\001\275\314&\230=Z\013\344<:C\271<\r\273\033=\277\231\341\275\022\254:\275\325D\234\274\215\335K<\320t\030\274\2518\t>QW\242\275\243cc\274\177\303O\274V5\'=\230.};t\271\016\275\032\022\221<\nU[<O\300\304<1\023\360=\245\216\221<\241\231\\=;A\243=\262Py=\tw\353\273\276\307$=L\207\342\275?K\032=\277\313G\274\261}E=5\266\333;\345\351s\275\031\362\021\276\374L\314=7\332+\275\245d\010=\361\036A< \030\356<\346\010\246\274O9\350\272\001K\237\275\334\247\263\274\ng?\275\337\330\263\275\337D\346=\352\251u\275\306\301U\275b\020]\275\350\277\371\274:V%=&\242\210=)\030K;\251$\303\274\240\223p\275T\272\022\275\032\001\357\274\001b*<\207\302\244<\352S\314<\000p\316\275\324\331\006\275\313\366\223=-\004`;~?n<\241\352\235<\tN\245\275\241\021\240\275\005?_=\264\200\337\275K\242/\275\0165o\275\261\302\036<\"\263;\275\347z\227\275{~\025\276\222\322\255=\243&\245\273\252E\223\273\3636\235\275B\243\006=r\330\222\274@\253\001>\\\255\020\273\271\343\020<\2606\305=8?\272<X\213n\275\205\342U\275{\253x\274\224m\223=\252\223\006>\257\246\245<\326H9=\235j\252=}\243\341=4\360}=\371\352\230\275,M\332\275\306\334\200=\343\374+\274\213\211\031\274C_D=\376\254;<\357\334\003\274APN\274\224\"\001>$[\246\275\340\346\023=\311\004\306=*\355\351<h\353\304=u\261\252=\334\002\372\274]\025\357\274\337\030\317\275\223\023\305\275\026\315~=\325\340\005>\306G\230\275\177.\225<\3779$=\373\374\005\276\022Le\275o\210w\275ID\201\275\276\206N=/\243e\274\371H\220\275k\213\374<\027\324\206\2745\243$\275\3173`\274\037\t\374;\350\202\t>\017\350\314\275i\243\215=\306\013\203=-\3635=.\210\256<rB\242\275\260\253\214=RJ8=q2\247<\240\355(<\243i\233\275\2379Y=u\366\027=YQ*<\227MO\274\206+\316<\270\003_\275\005}\356\273\207\355==\246\216\210\275\022\333\"\276B\375#;Y\006+\2750\026\335:\036~\277=\031v\021=\020\3065\275\350\371\230\275n\034\002=\316\035\303\274\353\363\355\275\215\252\277<\314\232K\275\205\t\232=B\242\316<\370&\236=\036\325\330=\211\271\223\275\301)T\275Q\217\200=\250\372\341\274\276\265P<\272\307$\275<\330f\273\321gd<\332\355\000\276\205\366\353\275\353\310\217\274\243Y6=^\300\303=i%\257=\002\300,\276\246\357\227\275\323@\304<\215\335\264\272\271\'\260\275\314\373\236\274\n\024\351<\000\271#\274\270\016\232=\312)\301=c\356@=:]\246:A\026d=\\\351\232\273YX\373<;\241W<T\350\256<\332\345G\274\265\320d\274\333k\356<<\331\346=\253\200\231\274\205A\205\274km\376\274\016\034\202\274A\371\334\273\235z\232\275\307\330A\275\337X\226\275]\310\314\2758\0375<\323\255\277=R,\374\272\227\245\033\275\007\204\274<Q\305\330\2734G:=\310\240\036=\233\200\324\274\324\205\340\274\321\201P<<\031\255<D\007x\275\244\007\306=\006\031\325\274DUt\275_\323$\275\"\366m=\260_\207<\377\334\377;\304\203\277\275\222ui=\220\000v=\031\204\207=\326\247\354\274\322r\375<z^l\275z#\272=\321\217\325\274\316\005\205;Q\345C=\027\207.=\241\270\272:\374\360\231=\202Yu\275-\264\235\273hG\210<\256<G\275\365\327\335\274\247$\252\275\374\024\313=\n)\235<\211z\021=_\003\335\273N#Z\273]\241\201<\330\363J\275y\332\224<\345}E\274\362\265K=j\301\335=\336\252\005>\362\023\257;\350\213@\275\363\330k\275M}\276\275\036\014\n>\322\372\203=\275\020\001=\tJ\325\275\315\\\261=\353\200\360\274\324\330\226\275\242\2168>\347\357\343\275#\365l\275 \014!>\347{\256=\305\000\233=\r\323l\274\177\373\227\275k\315:\275w\306:\275\346\216A\275r\263\374=\216\017\206=\004 \202=\3110\271\273\356\200\262<V\010_\275\322w\370\274?]\324=\253\234Y\274\260n\367\274S\376\302=\244\204\245<\364\360\001>M\001\215;\tHi<\2243,\274?\326\"=\374$\036\275\\\311\266\271c\031\303<$\"\306\275\002k\250=\002p\227=\326^\205\275\361l\352\273%;\321\274\025\350\221=\205\\\246\275^\211\353\275Yi/\275\030\242\304=H\003K<%\357\343<K\033\303:\377bk=\202\023\301=,\241\235\273\"\361\260\274\256\031\'<\022\002\002\274@\356D\275\256$7\274\251\303\217=i\023\304\275\353N\357\274i\356R\275\322\370t\274\366\213.\275\272%4\275\307\202j=GV\005>Xe\275<\231\340\307\273\241\020}= \200\266=[\265\242\275\010P\253=\227\222>\274\374\302\251=\322\014\200=iVb=\036\363`=\017}\231\275\204> =Z)c=\212e\206=\037\270\231\275\360\361\006<\030\2348=#t3\275o\3260<x\005\247=\350\230\312\275N\004|<\302_\004>\331T$=\003\255\351\274sC\276<\325\'\205=\000]\257\274P\257\275;)u==}H\261\274\'r\307\275`\234\350\275\346\236\032\275\317\330\001\275HJe\273\331\316\255=\355\264\377;\\\325\035=\337:\325<5\326p<\035H\252\275\n?\215\275\271c\202=\225\251\"=f>V>\250~p<\340\021$\273O\217m\275\214\245F\275\000\335]=IZ\324=\276\377\334\274w\250F\275\256M\363\2750\373t=\315%\342\274\202\221\223\275q\214\255\273h\202\200=1c\246=1+\377\274,\341\005=+\247\300;\362\026\241\274X0A\275S\355\254\273)\256\t>?\333\373\274\332\321\205\275\"\322g=K60\274\321\334\216\275\201^\036=\366V\t<,\021\020=\270\007+=\270r\241=\375|\324;aU\330=:@\217=\\\227\026=\333\320\257\273\002\316\r<\010\324\334;\025\356\260\275\021\034\330<#\235A\275zW\250=#W\005\275\256\2144<S\014^=@`9\275\023\362\324;\333\363\356<\324\3577\275\231\004!\275m\215\022\274\031g\242\275\276&Z<\363\204n\275h`\217=\247\352\332\275t\365z=\363\270\310;7\267\227<p\025\244\274\020\336\346\275\020\273\234\275}\257z=\203U\243<R]\222=\234\365\204=\331Q\003\276\223\022\356\272\366\007\343<\007R<;\243\236\327\274\032\3101>\330\261\215\271\253\031\224=\354G0\275z\236[=\265\211\271\275*\360\236<!\312\312=\305gb\275\226\250\222=6`\244\272cd\203=\261\336\256<\tP\237=>G\244\275\000\177\374;\211\004\024<\261\260\022\275\315\253\267=;\255\035:n1\177=\230\341\217=\003VE=\214OR=\205u\013=Di\017\274\035\212t\274\373\\\324\275d\310\267;\243\344\301;4O\222\274\223d#\276(\367\350\272\303s\236\274\224\357\256\275\337\360f<lL\243\275\261$\276;-\240\267\273f)\247\275\341\377<=\226-\313\271BXk=}\305<\275e\303\237;!\010\000\276\356j\\\275\266!P\275\305\037\357\275\374\215Q\274\027s\347=\205\250\027\275\357\312\260=\032\367P\275\r\315\331\2750\t\377\274\264H\231=\365N\034\274\177+\274=\237\324.\275\373\032\250<\025`\222<\345\3161>\270o\266=\242&V\275\237\375i\275si\231\275p\177\000=1\277\002=\211%\"\275(\300\343=\020\345c=\217\364\324=\010\270\t\274\004M\262\275\002\277\252=\200\333\232\274\243x\026={\211!\275\003I\004=j\203l\275.\333\364\274vd%=n\n\243=-\177\013=\267D\202\275\343:|\275)\021\010\276\337jt\275\211\005\360<\215\214\001=lf\232\275\332[\017\275\234\271,=_\354\233=\305E\211\275\030\330J\275\253\023\357\275H\003\006\273y8\031\275\021\366\242=\014Q\030<\312<\255\274_\367\213\275\207\355\225\273\324\353\373={%\251=\0317a<\254 2\275S\337\211=\355A/\275\010\255\004\276S\230(\274y\031\227=\3765\004>\344K\374=c3\351\274RVZ\275l\300)<\3531\375\274z\001\207=\236\202\236;Dk\253=\304\t\212=\021W\202\275\234&>\275-\354\272=\341\220s=N\225\340<\270y\353\275\301n\030=g\246c\275\305\006\301\275\206\372\237<=\214\270\275\304t9\275\217\313\014>4\355\227=:\342\304=\266 \202\275}\325!<\244t-\275\205PQ=\224\021\026=`e\206=\376\207\\=9q.=\224\323\037=V\225\254=L\203\245;\324Q+=\272LQ\274b\361\204=\323\013\236=\006\361\352\275\016\257\326\274\227\347>\274\026rT\275@\371\034\274\335Y\273=D\203J=\372\000\346\273\036X\236\274P\261Z<\005?\314\274\355\306!=6\t\n>vQ\243=\254\202&=x\007\005=\203MU=7t<=sM\265<p\374\236\275\026\3629<\177\350\265<\n\257\266\275\222\n\366\273b\227y=\311>d=\253H\330\274c\213\000<\241\323t\275a@\177\275n\352\271\275\027X\">G\367\005<\342\366\377:\246\022\376<\246\276\237\274\223\2113\274u\362\202<\016\034\257\274?\276\343<go\201\275\365\003b\275\027\032\\<01\342=\3355\300\274\tZ\025=>f\270<}\271\246\275\265\375\027=\006\272\205<\177z@<\352B\247\2755$\231\274\343\227\025\274y\364\022=-\021\233\274\257\314\347<v%\301\275_\261\023=\326\264;<\215!\024=\215\352\257=E~\314\275_\317a\275\n%J=QBC\274cN\314;\206\037/\275++\373\275B\260\304<\207\271\253=\374+d\275\255\337%\2758\371=;K^\234\275?b\277\274\204d\375=c\333\220=\220)7\275R\370\n=\177\336\026\274\371\302\201\2753v&\275\321\270\372\275\355\220\322\275v=]<\265\264\004=p8V=\341\307J\275\205/,\275-\372\006>\360\272C\270\342w\002<7.\263\275\240\354V\275\031\344U\2750}\340=b,?\2746c\266;\030-\240\273\366\336\374<\215\212\311=K\343<\274F\017>\275\257yg<\262N\216\275@\237\200\275lM4=\330P\251\274\002\256\264=\024\\\014\275\313Zm<~P\206=\031\021\033\275\260X\272\274\335\027\233=\203Nf<\264&\312=\365`\225=\375lp=\251\333\264=\013\rQ=D\223I\275Qr\365\274\321\246\356</E\216=\333\307\020=M\372\"=:\002b\275)\004 >\2342\314<\026\301M=\022w\205=\004\230\224\275\227Uz;~Z\212\275\006\3643==(#=\024#\325=\351\212\334\275\014.\203\275\305\203\357;\262\275\245=6\253\272<VIM<\3100><8\373\326=\232\271\r\275\177\010\246\275\214)\304=\225MM\273\030\324h=\214\200\240=\r:\253\275\242g\027\275\344\3055\273\207\366I<bL\244<4\212\341\273\006|\232<@K#;\204\037\246=r\025\244; \377\217\274Y\260\230\275\323F\272\275\251T\333=\022\325s\275\236\370j\275\322\201\242\273\306\363\257=\014\004N\275\235&\327\273\260\370\306\274\026\222\007\274u\335\232\275\023?\023\275\034\234\317\275\310n\210\275\2315\235;\230\301\244\275~5\214;~\202\306;\016\234\217=7[\324<am\240\275\323\204(=\346\007%\275*\235T=\\\316\027=\034#\260=\207\024\010>sr\031<\223\316\311;\003b\203\274\202/\025\274\010\266 =R1\250\275\340\037\244<\204k&=\255\267)=v-8=\310>\303\275\225\220\034<< \005>1\224?\274\352^L<8 \323=\002\272\314:\220\265V;\347KV\275\330\\\225=\276yK:\304\234\230\275\362@\225=\350f\244=\207\204\025=>2\030\274\260V\230\275\210@\342\272\247\032\005\275\001}\347:]8\261=Wi\207\275\037\217<;\213F`\274\373\032\005\275\251\001\037=\030\332?=\226\211\335\273\365\224x\275TB\211=\264\022(\275\331:\t\276\275\226\307<\206\364\312<y&\267=\023\017\325\275;\027\212=\356\"\235<\254\345\234\274\262\021\002=I\264\366\274Dn\315\274q\310\332\275\344\017\253\275[\354\362<v\233\342<\335\261\310=\311\225\031\276\203\225\037\275w\245\330=\257\225;=6#\212\274\275\177\202=\037xQ\275\261}\230\272i\337\n\275\205\030\257\274\205o\320\275\205\357\227<j\353^\275\017\2224=\372\231\001>[\374c=\n}\014\275z\034{\275\261\2215=\240!\000<\302\201\357\275y0\215<5\326v<\3334W\274\351\367W=S\003\314\275M\227\004=\216\251\241\275ML\355<\270\301y\273\372\003\223=\002Y\211\274{\263\223=+\310\223\275\255\243\270=!\225\247<\275\360\">L\230\314\274/\347C=\344n\003>5\373[\274c\332\326\275\263\037\014\275;h\243=\336\365D\275\3144H>\315\356\245=\271\210\002\274M\253\271\274$%\317=1\274\017>\177\243\352\275\321\221#\275\354\032\267\271\312\313\373<\342_\013\274\200\255\021\2749GK=\274`b=r3\202\273x$\027\275~?1\275\327\323\310\274\360(3\275g\312Z\273\336(\371<\2769\313\275\243\246o=D(\362<\317\253\002=\237\251\264=\020\007\202\273\320\360S\274\000\272\216=_\002,=S\032\377\275\035=\237\274\336\026\343<\033\3128=\"H\264\273V\323\254<BW0\275|\350\343\274\327\361\273;\010\236\345=\352\223F\275+y<\275kE$\275\031C\233=8;\331=r\307R\275\t>\247=\250ub=L\372\261<\212pX\275\363\333\004\275\321u\211=\324<\312\275F\\\307\275\334\356\205<\255u)\273\\\'\264\275;\355\206;(ZI\275\213\370\r=)\2136=\337k\371<=*S=\3067\036=i\343\261=u{\336=\220|\227\275`X\373<\300n\246=z\264\332;\310\326r<\333;\253<&\260\243\275b+\223\275\214m\245\275s\033\344\274\263|\343<+\020\254=?\246\306;a\010\002\275}s\027=\274_\375<\270\227$\275\345\272v=\345C\333<\003\334\212=\321\335\361=\033\304\032>\217\315\320=\325\202\206=\251<\244<\001\321\213=\362t\343\274\306\221\320\273Z\027\217\275$\345\311\275\300s\230<\255k\333=}A!\275\224\'2=B\t\344=\3778?\274\0256\250\275\001\313b\273\366MO\274\342xq\275\226c\037\275\373\344\302\273\355W\313\274Ed\022=Ci\220\274\3674\276<\255\007F;c\340+\274\310\023\310=\016\374\245\275\241\301\273;\210\224\373\273\264a[=2wC=\005\247\177\275-m\315\275\304\032\263\274Z\274\313\275\037l\234<W\337\232\274D(\226=b5\325\274\301 \362;\273\245\026\274FhW\275\213\313:\275\316\222\353\275@\361:\275gS5=z\200v\275\306\"\246\275\025\r\t;(\215\t=Km\355\274\247\320&\274\346F\305\275\330\314\215\275Y)X\275gW\254=\362S\341\275\272k\233=\322(\247\275\357\345\221==\224a=\035\314\257\273\007b\374\274\341\204W=\017\237s=u\275\256=\367\352(=F\3200\274\237X1=C\032\263;\235\241\t>j\335<\274\257\3128=\242\026\016=\245\303P:\336\327\252\275\271\346==x\027\271=,X(=\227\024\312\275\216\3353\275g0==\027\207\016\274W\023\367=\025\017&=7\247A;\317\013\224\275a\201\265\275j\323.\276C\312\370\275\001\0031=\263dx\275B\204\240\275\207p5=^<\351=\342\335\022=J\324n\274ZP\212=\207\332\325=\201\273L=r\247\005=-\036\022\275)t\356\274T\231\n<1Q\301<C\211=\275\356\2024=#\025\370=(\222\030>\000\342\034=\022g\254\275U\315\021\274\361+\r\274TN<:9\303\244=\360c`\275%\353\320=\265\013\214=\031\232z=\234\333\222\275\362\007\251=\360{\223<\312-t\274\347&\005\275\274\037p\274f\266\256\275\225J\252<1\030\232\275q|\255=;\177\217\274\022\005\255\274\357\305\037=\002\365\341\274\027,\215=\211\205\303<\257\350\253\275F\271\026\275=\025\376=iUG\273\313g5\275\027\274==\357\335\332=W\3562=\324\347\001=\255\343\323\275\035\204\331<\240\220\223=9\007\202\275\347{6=n\005\200\2751\311L=\023N\202\275\315bM<aD\246;\332\030r\275p&B:\226\316\202=\031\327|\275\307\265\243=\030\026`<\302\357\365\275\205\\\337\275\245\266\317<\240\013j<{4\232;\005\256q=\335\002r\272\354W#\275)6)\275RAE=\273\032\371<\246\023\362;\3072\263\272\":p=\251\202!\275\266\330c=\303WG=\206q\225\274\223\276\310\273p\212A;%\270\026;\020\221<=Y\300\027<1\210\240=\027\326\353\274\034\357\032\276A\307+\275\331\272\364\274\234S\004\274\345\027\t\2765\322\254<&\202\265\273\310Q=\276\236\004\362\274\300\337m;\027\333\n>\274p\373\273\303\363\313=\007&\271\275\354\201\310=n3\233\275\036\223\231<]\255L=M\216m=\234\3258<\341\314\202=\206\223P<\370i\221\275/\"*=\336\256\217=\267\310\227\275V\030\376\275\327\215\020\275\363q%\273\327\324\\\275qT\210=\333\212\362<\020\233\206\272&\346m\274w\n\336<:SY=Sa\0229\233\245w\274\253F\360<\240\0162<\344\346\'\2735\203S\274\314\342\207\275h\034\252\274}\010\355=\276tF=>\313m=\370a#=,\365\301\275\333\326\270\2754\266\303<LW\021=\265_\n\275\243\230\024<\035\274J=\"\366\313\273\013\177\365=cj\272<\n\2319=~\362\302=\221\0164=\002UA=\036/\216\275\003\333O\275\275\221r=\366\010\305\275\306s\300=\277\021\275\275\270{==r\356\267\274`\264\r\275\031\217i\275\345\023\243=\256\316\025=\364h\317=\377\021s<\367p\r=(\362\336\275\024\323\230\273!\277l\273\300M\202<\006\323\267\274\302\007[=6\346=\274k\337\304\274(\273\225=\351NW=J\223\375\274\270\314\203=?\336\031\275\035\321\277\275\027\243\337\275\334t4\275\333EN=D\nM\275\334\233H=l,0=<u2=\177l\321\274\030\022\026\275\250K\370\274\005\277\331=\t\302\340=]HO=\376.\210=<\2468=\257wF\275O\017\'\275\217\017\224=\036(\215=\003/C=\344\022y\275_\261j\275\347\037\203\273\246\000\n\276\363&\274\273lr\307\274rR\311=X\324\235\274\034\315\006\2745I\326;+\257t\274\'?Y\274\3314\351\275?>\036\275*\276\355=\336\322)\275W\254&\275A\365\203=\270\347\332=\216\231`=Uj\344\274\256\007\241=\355!\r>\316$\255\274\034:\272=}_\25289\356\316\275\00607\273\r%N\276m=\177\275!\224\260;\243)\257=e\273_<\207\323\235\273\377\320\035<0\010\235\275\001\334\360;\245\220R=\374\344s\2754\202\262\275\221B\233\275\350O\224\275\3108\252\275\210|{\275[\246\022=\265\315[\275\367,F<\'\223t<\240\007\221\275\344[\226=\212\241\316\275\002\200\233=v\356u\275#S\330=f\272\356<\3503T\274NF2\275\365\225\332\274\313_\261\275\016\356\207\275\371\205\225\274\352\252\231\275R\230\032\275J+Y<\244\327\226\274\032\001\225\274]\352\213=\217\257_<\026\207(\270\267\210\270=\240\364\206\275\230}\033<s\260\000=\231\270\350\275\002\211U>\217\013\331<?\251\311\275\202\333O\275\263z\305<\014\345Z<s\217\233<\206\026\030=\234\267\370;\\\334\262\273%\355\246;o\'\360=\262\304j\275\3046\330=&\241n<\370h\323;\t\244\253=G\024\246\275\207\337\262=\372p!=\237\246[=z\222\263\275\310\247\014>4\375\300\274<\362\006\275*\035\305=\310\265e=\2301\230\2754\026@=)\243G=\r\001\232<\tKF\275\334\033\307\274{I\270=\236QA\274\033\362;\274?g\332\273\274\335\361\273\360)7;\261\244\032=\232\374\351<\274+\317=XD\020\276\365}\346;\0302(\274\234\311\276<\357\250\361\274&\326|\275\310`L\275\3029$\275\\G/\275\213C\277\275\237]\241=\262\352\352\275s\3720;\3424\321=\023b\016<|\003R\275\375\014\221\275O\263n=\025[\243\274X\000\230\275\227\377\337\273c\005,\274%\202\225\274\352X\027\274i\213\305;>(\266=\224\362N\274\201\301\264=\370\206\010=BBO=k+\364<\323!>=\327Z\305<\310\333\347<Z\314\371=\252\202\241\275\3437\343\274W\377\211\273\272p(<\327\'x=\340\243\371\274=\223\250<\362\017\262\275\207@\373<\241\235J=\036zq:\200\326\212=\3178\252<\253>\230=\366\035 <\216(\362<\224:\223\272\334;\365;\t[\335\275\030\200\246;\230\343\214<U[\350<\343xj<\223\003\341<\t\351\266=F8\201\275z\310X\274\203E\327\275I\352\227=\375\263\373<\370\177\371;\236^D;\337\332|\275,\035(\275\325\030\221=\013\035\202\274\214\257$<\327\2420>;\304\177\275\037\326\333\274\366\033\240=n\252\231=\362v\312;\315M\221=\216\364\256<A\202\020=\376\273J=\364\016\353\275\325Z@\275\262\247\201<\251\311U=\247\215\207=\301\231\341;c\342\016=\371\326\342\275k\330\221\273\022\016\r\275g\254\221<W\022\274=\335[\224<\251=\235=\264\241\300<\r\203\374=\004)\233;5I\251:5=S:\324\227\224\2754\246M=W{\\\275\263\271\314\275\342h\317\274m!Q=\300\277\265=\276\250\353\274\336]\r=\017\202\315;\033\324\212:\321\312\275\275\270}\255;I#<\275D\235\322;+\227\271=d\016\261;\217W\314;\325\351\033\275\017\270\224=\357\203\311\275\2235\316<H\253\230\275\333\"\370;\036\333\340:\006\362\343\273\207\014\017=\224\251\024\275\326,\300=\300\214*\275A\tY\272I\235|\275\327t\322\275\307l\261;\304v\343\274\312|\222<[\307\211\273\345\007B\275V\223\307=n(5\274_\301\333<\276\026}\275\337%\027>,\017u=\377\266\334;\377\250(=\303\207p=4Np:\314\312\235\275\354\243\003\275D\240\254<a\313\016\276\315\202d;\027\350,>a\2749=\252\343j<\323\036\202=2xl=\346cU=0\364\341\275\255\035\000>\271u\t=\347\206\343\273\t\004\017\276\244\203\2129\2526\211\275\201\001\223\275\210\323f\275\315%\365\274C\253J\274\264\346\356\275\373\316\254\274\223g\227\275\013\244\303\275\311\265\215\274\004Z+=\005\024\256=>\027\251\2733\255\265<_\326F\275\216\362\315;B\340[=ey\321\274Vn<\275\205\345\203\275\326\017\006=;/\207\274\237K\315<\361p\237=\022;,=.\330x\275\007\367\210\275%u\211\271\321x \275G\377\270\274\247\315\276;\236\301H<\016\355\243\274#\351o=\031\376\251\273\373\022U\274lda=Z&\242<)\215\271\274\267R\327<\3730T=[\026\245\274\364\002\021=\272\214\320\275A\345\241\275,\317A<\340\203!\275\255\301m\275\272L@=\236\264\247\274\222\277\006\275\363\"\225\275\335*\330\275\353\016\217\274w\335\246=\205\031Q=\236\327\322\275\357h7>\356R8\276\026L/\276\262M\020\275T\222\001\274,\243&\275M\324\246=\r\242\002\275\315\016B\276;\202\210\274j_\206\275\005F\033\276{K\316<\256\254q\275\342D\202\275<\346\306=\010?\336<2\373a\274\254\246\350\274 W\274\274s\305C;\2312k<V\032\250\275F\234,\275K\306\272:/W\313\274n\266\200=\274\340^=\275\277\004\275\032;_=.\314\237\274\267\260A<\325=\225;W`u\273\371<\204=\260r\t\275\234\250\010<\'\'3=\210z\364\274\373\316j=\335\003\310\275\226\034+=IH\322\274\363\001\330<a\224\215=,y\347\275\277\320\352<\250Y;=D(\212\275\020\203>=!\366\221=B\023!=\361\350:=z-\030=\256\204;\275=\204\256=\376-\250<\331+\020\275j\317\271\274\210\362\304\273\252\274;>\340k\234\275_\013\317\275\331\376\264\274\317Z@\275\274\211T\275CB\030=\030\302\235\275/\t\t<\274\3133=+\341\305<\034i\315=\244]\024\274?\002\207\275\351\236\037\275\320FC=\225\"\r:\027L\n<9\036\357<\312\257|\273\024]|\274\220\327\304=V\260M\275\353h\024\275\224\343\037<_\017\273\272C\241p=\020\332.\275p\252F\2751\362\267\273\177\274*=\217\006Q\275\247\250d</@\251;\006\231\342<\275\226\221=/\216\000=%\327\212=\003h`=\370@J\274H)\t>n\'\343\275\253\314\031\273\214o7=\373\332\323\275\352\332\313<\377\034G\275\223 \026\2766\267\375\274\366\346\004=:\236\022= \255\274\274\356\250\365=\300\222\026=2\240\335<\002\355\232=\016\256\262=\235u\202\275B\001\262=[a\270\275%3\363\274R\220\333<f\270\221<\206\000\220\274;\377x\275\221\233w=\246\215\341=*\014\360=\237\025\202\275\271=y\273\036O\373\274\222\310@\274U\257\310<8\020\014\276T\352F=\361\001\253=\303\240\375\273\270\326\304<Eg\212=\217\3651\273Q\245\035>\2578\204=\013\214\311\275\032\3765\275\220\347R\274\357\366\201\275\301R\237=\337\315\345=\310Q\337=\236g\342\275oSX=%\222o<\2007N\275X]\365\275\350\216y=E\246\212\275\005\223\317=\365\034\215=U\370\203\275\340\221\277\275!<\212\275\232\316\005>G\212\251=s\257\260=J\017\036<\307\234\214\273%\230\361\274\t\311r9Op\016\276\327\313\253=b}\340=\017\024\030=\200^\263\274\336{\030\276\346\227\371\274\201\027%<E\021\234=M\373T=\007\350\235;@\377+<\374\244\340<5\306\245=F\243V<\352 \027\275\302\235\233;\2619\320;i\305\207=rW\265=\\\372\266\275\010\2342=$\373\34691\t\344\274\357\004\222=\250\260o=\004\266Q;\nH\225\274\246\247\254\275\274]f\274\365\304\312\275Sw\213=`1\253=\315\347\323<ES,<=W8\275\233\" \274W\317\032\272A>$\275\005\317\376\274@\361\213\274G1Z;\3078!\276\262\224\223\274\327/\312=\010\212\324\274\353AH:\242\305\251=n\342\233<\\\000@=\333C\233\275\340T\234:8\235\255;\023\224M=\230\231==\214\235\203<\3278\010\275\211>6\274\254\303]\275:D\242\275g\220\300=\253\021$\2743]j=$\013#=\\\337\322\275K\361\254=y+a\275J\361r<\251D_=\321[B;\270L?=\230\325\257\275\343\315u\275\235\377\204\274\"R\232\274P\261\200\275&2\375\274\017\303\221\275\372\020r=5\2246\275s\260w\275\014\n==\031\027\237\275\327\306^\2743\\\323<)\270\255\275\211\037<=\336\342K=R\217D\275{\211L=\311\215X=/\300#\275\204\375\017\275\033\364\236=\354\276:=\300\353\252\275\0008\237\274\303\027Z\275\343\353g=\241\276$\275\251\310\206\275\363\261\223\275\020.\226<l\242\260\274s\014>=*\372\203=\347\036\312=_\022\334\275\366\326\212\274/\233g=\234M\021\275\033\020\311=x+\310<\277\2676<\344J\257\274S\022\002>*j+\274\317\342k\275!\237\272\274\356\325\030\275]\030\373<\003\224\214<\003|\\\275\\\275\027\274\236\264\235;\340A\275\275\354\332\031\276\303$\251=3\034\257\274o-\322\274\252\203[<\036\t:=Q\207\027<\20455\275\364\241;=\216]v\275\213D0\275\355k\021\274\005g9=K!\314\275\354\025g=u\315\225<5\327L<G|\225=\0265\312=\252_\235=e \317\2759\201\260\275\271\354\201\272TB.=\352h\234\275\3279\252\275\244\210\325\275\341\220)\273\214\036\203\275\321;\344\274\206sh=;aS\272\252\325R\275\341\234\314<\257\260\202<R\235c\274\227\304\350=\207\032\002=\220\361\363\274>\367\257=}\303\273=\010l\017\275\317\"A\275\323A\212;\310\251\203\275\360}\270<\001T\227\275\375\266e\275\017\250\345\274\323\321R\274Y\270v\275\367\202\213=\017LP\275M`\333=\355Y\313\274\304\201\264\275J6\364\273\245\330\341\275\316\211\275=\366\3748;)\010\021\276~k\032=\254\250|;\232\306\270<g\257\364\274\210\006\211=\225}\275\274GGY=\353\320\023\275IZ\201<D\373\375=\205$\203\275\260\326P\275\314$\201=\377\303\222\275i\232\210\275\325\251\222=%\267\341<\335\272\025=\214+\030=\340\326%\2755\'\006\275\010G\266\275\372\275\223\274W\373\271\274\245\370\364\275<G\377<\236<\310<\033\245n=\304\372\250;\000F\213\275\231\300\t=\316\364\273\274\307C\371\273\3074\234<\343_B<\300a\021>4\"\265\274\347\242\375=\372I\271\274\316z\323=\222\371\205\274\244\343\327\273\200\2204=\305\243\227=f\337\373\275y\215_=\342\323\244\275\032\216\261\274\362\234\300\275\335H\241\275\022\273\365=\324\215V=\240H\006\275\263\315\035>K\242\307\275\250u\324\275y\343\263<m(\217<=j{=}\220\316:\274;\222\274\013\034\020\275KXg=J\341H>\361]P<)\234(>~\223p\275\275\272/=\210\255$\273<G\216\274\234a\n>|u\320\275\235j\327=\271,J\274Lqn\275I\004=\274\206\214\273\275\306}\027=\020\025\226=s\022<=\323\211\335\275\352\321\024<\330\363\224\275=\010\347<?g\302\275E\267\203=\221\3004\275\242\353\321<\365v\243=\235\352m\275@\346\206\274\332*\371\274~y\r\275\233u\016;\365t1=\0321M\271\220\n\225;\215uD=\354.5\274\344\247j\274jzE\275\357k\276\275u\352\330<\032\365W;m\205\004>\323\366\003=W\273\205\274\\\315\347\2746)\017\274\306u\277\273s\331j\274P\033\224={Q\203\2748L\212\275C\247\331<:V\362\273R\341\032\275\344\037o<\327W9=\311;\306\273\376\033L=\366\021\274<_\265\266\273\200\272\203=[I\313=\34088=\327\360N\275\272\312\000\276\020\342>=q6\305=h!\227=\016\241Y\275\302\022\217<U\262\316=\304+7\274\322<\370=\3465\216\275;\264\257\273\325\315\247\275&\026\300\2744\356<\2751#\332=3k\206=S\264z=q\320F=\364\276\274\274\245\274\332<\320/\024\275\'J\325\275\273\275\037>\3243\006=\230\301v\275]\016\234\275\334x\013=p\"Y\275\366hr\275\231\260~=\025,@=O\307\013\275;L\027\273\220\312:<\034\003:\274hQ\226=q\253\233\274\264=\220=\034\224Q=\251\220\244=W\265A\272s\260\356<\231\342w=\005\374\'\275\353\241\211\275%T\307\274!m\326\274\314Yh<\204\316\007=\222\3653\275,T\300=z\r0\275\342\221i= G\t=\332\236\005<\346\351W\274u\275\203\275\377\227\020=!\320\277:\363\274e\274\371\207\367\275<\231\'=!CT\275\363\266\033\274(\260W=\357R\023\275+\361\224=\367\324&\275-<\223\275\367h\233\273l\363\325\275T\240I=\367m\027\275\371\004\023=\353\250\344\272F\250B=\372\017\211<\340V\014>\350\356`\274_\315\336<Y\313\250\274E\276C\275y\206r\275\316\204\234\274\\r\233\2758\312J=\010\224&=}\226:\275\273!\234=R\271?=\256\005\327\274\315\024\016\274\216\250\2707\342\351E=\302\177\202\275\002\327\022>\004\017\316=r\005L\275\255a\320<\006\222\231\275u\312\310=]\241[\275\243u\260:M\305E\275\031\261t=\313\210A=\255\267\247:\324w;=D\352\203=3\324\021=\347\001t\275m\371,<\204\274v=\277\301}\275\215\202\263=\024\n\265<\345\222\365;\264\3253;\360\023\203=\261\3542\274\232\320\300\273C\221\335\274\303\247\326=\345\037\312\274\307\022\r\275I\250\220\275\363\004\000\274\331\001\315\275Z\337\207=\374\030\265\274:\240x\274\243o:>b1h=a \237;@\310V=x\235J=)!\361\274\25102=\264\303,\2742\334\312;A;\246=\364{\022\275\'\350\314\275\242\235\026=\000\3215\275\262\233\233=LV\005>\265\035\254=\003? \275\007S\030\275%\240\325=C\303\336=\322\274>;\233\254\203\275F\352\202\274(\313\220\275\253>b<\264\314\246<^\354\360\275\215\245\273\275&{\273=R\215\310<\031Z\262\274\351\304k=|\336\216\275cE\300\272\033h$\275}\222\246<%\031\033\275\227\320\r<V\253\265<\347\005\341\275\236\206\033=\267`\331=1K\257<\345\336\251=\274(\347=\207\254\325\275o\t^\275\200\277\030<\273KS=|\234=\275l\217K=\236\353Z=\202\355\222\275|\022$=ft\363\274H\000\341<U*y=p\337<=\363\335\023\273\243\010k=\323\300\235\275@\261e;\306\037L=\n\343\227\275N%S=F\234\213\275<\342M\275D\313\032>\334p\355\275\355\232j=\375g\n\276e\3252=t\375c\275\224\275U\275\234X\200:#Z\340\2756\235\272<\t\033\243;\256\231\323\275r\202C=\213&h=0\262\376<\242\025\021<G\"\027>\302\366<=\263$\025=\277\255\334\275\227\341\002\273\374\325\313=\305\003\307\275!\303\247=\262.\277\275\277m\337=\326\377\253<\240@\033<K\367\233=N\305\220\274\2043z=\237\330\316;9\267\003=\374P\354;Y\345(\275^\033\311=\021\373n\273k@\032\275\275\277*\275\364\236\236\274\035\220\340\275\271\347o:\301\200\242<\2106\260\275fb\245\275\313LG;\374O\010>a\203\373<\232K\261\275\"\313\022=\002\353\247\274\024\246\237\274\353<\331\274\377OQ<HM\005>\330\267\317\273\272s,\274\346\317\251<\301\346\253<i\360A\276\327\257\230=\014x\335\275\261/\037>\337\367O\275p\2218\273GaC=\322^&\275\0160m=\276\207\017=\362e\264=\027\024g\275\010+\025=9E\304=\203\223\337\274t\306t\275\337\277\236\275Q,\330=\252\"5\275\217\303\240\274v\246R<\352\254\257=\346\261\032=\232n\n\275\360J{\275\337s\214\275\233\313\244=s\3451=B\354\340\272\330!\261=8(\017=i\r\3516\336\333:=A\237\373\275\242\360\244\275\212\260\\=\225\357Z=\237\316\223\275P5:=090\273k)j\273\365i\215\275\310(Z\275m\271\315<\022B\222\275}\311>\275CvD\274\225\205\'=1\t\007\275\261/O\274mr\372\275\325\261\004\276.\354\217<\030\243\340\274\031p\201\275\016\266\216\274T\221\200\273\003\245\233=N\322\263\273\240\263\275=\357\261\030\273^\213\225\275O\027\261=L\247B=5\331e\275\211\t#=\005\001\231\275\250\013^\275!\225`=\007\220\017\275O\0344\274\377I\n<\362z\032<#\233\031\275\332\rG=\220l\300\275\261\374\331;\262e\007\276g\265A\274\343\0166\273\373\021i=[_\014<?]%\275w\227\204=\211\261\226;y\021\355;\373\330\230\275\025\372\321\275\242\320\221=\360eY<a\232\244=#\230==\3479N=\337\235E\275\330N{=\014Bc=h\3368<\227\225E\274[  \275\206\250`\275\311\264\253\274\333YB=\327\375\212=\346\375\027\275Q\000\223\274\257}\035\275\3235^=\327\305^=\334l{\275\244\177\021\275E\220\245\272\242h\232=~a\327<\216p\037=\370&\245=\373\013*=x\360G\274l@D=\014-\025=Q\020L=\264NC=\220>\310\275c\023|\275\010R\014;\375\\\377=A\007\340\275\007\016\023\275\210\311V=$\330g<U\246\360\274Z\226l<>9\242\273\020\025<\2752\366\246\274\232\371\222\275\r\245\216\275\322\207i\275\026\205!\275p\370\360\275t\352\260=\215\r\264=\321\304\214\274R\372\017=\272z.=\271\207X=TK\002<r\233\344<\017\256\217\275\nQ\034\274x\024\247\275XR\005\275r\224\206=\321\016\256\2759I\":\206\276\">\266\\I\275\270\322\314=U\032\357<\342*\010>3\2639=\330\363\'=KI\306\274w\025\233<\002I\014=W}{\275!\033\222=\036\001\206\274\004\205\325\275\256\310\266<\233\201\257=c e;\366-I=\346\250\207=wTk\275\316\370\001<\003It:\300Sr=\005/\231\275\363\373\377\273%7\217<\030\037\353\274\350w\273=\364:\313=/\002\204\274J\270\250\275\313\307>:\253\261U<\217~j=B\234i\274\226E\324<\ni\215=\315a\362\275\264F\273=\332\345M\275\300\017\001>\231\036B<\010\347R=cg\231=_\270\223<\336PA<\252c\360<\330.\353\275\225O\224\275\223Q\236\275J\326\204\275\rA\256=,G\351\274x\305H\274\210\337\336=\207u\220\275\375Gn=\022#C\274\256\335\371\273d\325\230=\t\337\022<\377\177#\275\324\216\276<oJ\304\2757\322\022\274\243\342\202\273\005\314\003\276\220\2760=\373\000\251\275\373#\363\274r\270\360=\017\312\007\275F\341\212\275c6J=\272\253\324<\341\236\2339q\000)\272<\0320\275\317_N\275/2\250\274e\251-\275\303\344\240\275\231\311\342<\002\0206\2768\005\311\274V\277_\275\037\373\360=\317\201\005=kb\031\275i\240\205<\271p/\274e:n\275\303\377\271\274\244\234D=\032\257\351\275\002\216\232=1\247\035\275+\337\316=\202>==JVd\275\231\031\212;\014\330\326\274\300N\271\275\357\213\332\274\253<\323\273\325wn\275\340\253\003=\272\274\312\274\331%\226\275\361\032\204\275d\272\022\272\227mE\275\201\n\275\273bnm=\031\356\251=\203&]<\272\2359=yB\251\275HW\245=\266\306\306<Z-\217=\203,\253\273\345^^=\"\212\313<b\271%\274<O\201=\037\356L=`\246\331=\313\023R=]\035\254<.b\345\273\222\372\236\275\276\000\t>\006\212\237<\377\341\351\272P\3300=X\205\257=\375\027\300=\322r\257=D\243%\274\206\034\241\274\226\267\304<\325a\237<\273\223\274;\366K\326<\244\363\235=t\300\032=Z\273w\275+\006\\\275v\311\223\275\366\376\023\274fv\265\274\245 \331<\312\023[\274\352E\235\273\327\264w\274\200\200\205\275\024\326\255\275\214i\213=\205\331\307\275\323q\007\275{\301/\275\377\361\324\274\354e$\274\263\250\227<\265\007b=w\220\205\274\005\273\204<U\327\231\275\232\317\245\275\004\371\036\275cwb<\314\213\203=z\200\214=\"B\036>\243\005[\2758\312E\274q\013\021\275\227<F<\266\'\301\275*d\242=\276\205\331=q\324\361<M\353\224\275\261\334\302\274\332\342\267=d\375\273\275\312\002\014\275\230\365\020>$Q\317\275Y\343@\274\021\030!<\251%\361\274Ka\241\275&\360\316\274%A\241\274\037\030\221\271\213~:\274\247\205\205<\211\030/=\271\211\241\275\2732\372\274\350\221\317\274\010=\202=[\323\325\275J\337\331\275\220\r\333\275\006|\216\274{\315\342=\t\212\261\274\032!V=\247\016\216\275\256Yi\275\303\267\322\275D\252\205=\215)\234=ZFI=D\033^\275\365\247@= \234\257<y\223\024=\241h\334=\227\264\373<\2657\360<\277\205\305\273H\r\031>k\336\261\274\331#\377\273\261m\200\275\253\226\004\276\341\013\243<\346h\227=\256\272\212\275\2341\314;\263N\370\274\211\215\225=\021d\227=+\345\246=eW\247\275^\327\033=\240&\025\274v\357\277=\313V\340\27449`\274\266\370\353=\344\204\350\274v\351j\275V\264\032\275\372\027\356<\207!\374<)\005\255<\204\247\215=\216>\003>\345\213L=\\qk=\032:\021\275,\263@=\231&&\275\260\016\277\273\346t\306<\005JB=\347\036 =\300 \303=\231\246\341\274\334\250o\275\3166\325\275\374U6=c\211\227\275\207\320\030<\2340,=\211\270<\274W\303#<\266\020E\275\367\320%\274\357\316\003\274\031\010d\275\204\344\263\274\300u\222\275Z\324+>\253\334\014=>,T\276(A\247\274\257=z\274M\3118=oYV<\366\002\345\275|\372u;\r;\035=\312G\364\274>\321[\274\010a\313\274\204\255\303= \\\001\274w\237\033\274@\306}:\265WF\275\235lz\273\243\027C\275\r0\325\273\217\234\224=H\311\273\275J\017\247=\205A>\275k*\002\275-6J<\207RN=3\2076\275,\355F;\204S\336\275\346p\213\275{\206\343=\340P\364\274k\035|=\262Z\261=\373{;=H=\246=\333\355+=\261\220\327<\2436\250\2758@\226=\316\220\r\275\"\375)\275\271\272_\275%\331\250=y-\261<M\025\213\274+[C=\217wP\275\357\330\272;\371\002\237<c\021\000\275g;\'\275\205S]=\016A{=+\327\223\274\367\257\035<\253\n \275\25597=\300\361\327\274fT\022=\177\347z=\210\273\370\274\037\366\002=\203{\275\275d\010<<\r\352q=\033\301\302=\010\243\210<\356)\314\275\035\370*\275}\237C\274Th\003\275@\301M=j\337\025\275\226\037\264<n\330G=\\T\211\274\301\010\371\274#\200t\275D\3353\274\016V\251\274\230\026\227\275S2E<k\300\207=\335\006\272\274&\'n<p\340\265\275\316\322\217\274\243\312\327\275\023\363\240<\264dt\274\\1P=\256\022l\275\016\375\216<\\\210\237=\374\005e=\373Z\006\276\261j\006\276\014(\222=gY\375\274\251\300\325\274|\242\201=K_\376<gC\014=\362om\272\303\204\245<\3673\025\276\205\247\313\273n\r\276=\337\023K=9\323\':\300\341\003\276AL\326;\203L\264\275\350\322\377\275\202\331\276\275;A\261=\301\251\232=\002^\014=+k\006>\273\021>\274\302\206\375<n\215\004=\317\276\213\275^\365\017>\250\304\367\275`\224\207=5\203\252=\003w#=\366<\256<\254\034\307\275.\352\202\273\247A&\275\330\201\234\275~ZK=\026j\206=\277<\026>z\225N=q9e\275)\0036\275XO\'=\000\202\241=XN\343=\251\026\303\275\027__=\203\303%\274\220T<=\336\231\266=\007\304\007\275\331(\310=\353\241\253<|V\244\275\267\320\310;\241\341\220\274\232jk\275*\003><\334\252\333=m\244T=?\353\217=\354{\236\274\350\026\252\275h\240\313;\344\363\204=*_\':\262l\363\274[\377\007>Mv\003=7\266w=r\233\222\275\025V\017\274\210\314,=\300\205\366\274\244\373\321\274\002\366\321<S\351\313\275\207\321\214\275\"\257\367<\364\0067=kt\021;\007]\242<OK\206\275\245\345\232=j\365I\275c\002\274;R\351\373\275\235\300w=\216M\360\274@\262_=~&\345\274N\335\030<\262\267\344\273\2408\204=e\007\225\275\277\351\004<\303\315Z\2757\213\216\275ZR\306\275x\327\333\275\376!\000\276$\310x\275\327\321\016=\363p\240\274\233\243\341=\345\234f=\256\355-=+\362\364\274c\366\230;\035\323\'=\374$q\274\rQ{=\305\032\217=y\360\031\274\303*\204\275\375\013\213\275n\207\326\274S-\206;:C\324\275\222\306\270\273\t\204\243=\254K\306<(\"]\275n\226\242\275\354\301\273\271T\344x=\301.\215\274\344#\204:\320\264\346=\227\352 ;1\027P<\233\255+\275X\254\025\275\010h\021\275;\342\231\274\031\263\275\274U\177u<\225\264\030<^.J;\367\003\251=\233\247\376<\376\314T\275c\306n\274\372\354\247\275\341\342M<\027\324\024=\200\361\230=.\243a<+^)\273\243\200l\275\332\237&<df\r\275\317\265\356<\361\344\304\274E\326\231\274@\037\255=aA\356\275\210\233o;]\255~<mr\217=\214\026&=\200\007\346;\"Rf\273\312\343\264\275\211\242\367=\241\273==\014\207g\275s\254Z\274\347gj=\214j\254\274_!\263=T\235C\275\'\036\210<\331\267\375=\212\217\006\275\217\204^=7#$\273\371\326\355\275i\221\314\275\331\374k\275\035R\004\276\245r\021\275VG\240\275\323\2264\275\2408a=\3257\033>y\343N\273\261\023s=\374-\250=\004\007\262\274Zz\334\275S\367\\<\241\010\220\274\317\316t\275\225H\017\274\014\036n;7\200\320\275-U\364:\356\037D\275as|\273\271\342\244\273\270\323\362=qG\271\275\037\376p=F2\247\274\241\333\000>\350\351\346\274\177\004\024< \312\347\275\302)\233\275\307\272\010>9\256\201\273a\023\330=\317\247\346=\352\216-\275\035u\223=\005RR<\346\252\212\274\017\356\266\275\242\325>=\\\030\004\275\204d\217\275\014m\363\274n\362\023=\341g0=\370\276\202\275<\224b=zm~=o\376\022\276\341\373\304\275\250\303,\275\301\2737=\024;\002\276L\222\260\275\002\266\355;\306\324\021=\206a?=\237\324\360\274MC6=C\030\234\273\247\304\201<>*\370\273\332\267\247;\213C\005\275\r\334\010=\004l\255\275BrZ<\355\027$=\217\305\275\275\027\007\243=7\032\233\275t\035\244\275\251>T\275\032&\233\274\341b\005\275\262@\016=\246\342\226=\337-[\275A\262\316\275E\360.\275\362\364z=\030\347!\275F\263\207\2748\365=\275\312\235K=\307O\360<\242\345\227\275\\\032[\275e7\036\275\225#|=\216\220;\274\024\022\007=G;2\275\2376\006;`\007\240; U\347<\3220b\275\272\375O=\255\277\266=\364\317b=\265C\272<qZ\237;\332\020W\274\'\216^\2755w\273\275|\257\353\274\260{\'\275\341K\305<\265\216\236\273\\-\227\275\375\016A\273\240\206\316\2750\000\032\275%}\316=\303U\322=\300d\213\274\036\265\025\274\262\212r\275\330<\346=ca\207\275\326\230+\276\027{y\274zGs\274\307x\372\275\247\224X\273!\327\\=\364n\361=\206b\201=xH\217\275\256\203\025=c\204@\275\\m\256\275\205\207\366</\237y=H\315\260\275\241\024\321\274\275a\210=\031\307\275<\314p\226\275\265\357\342=\315O\200;\'\254\214\275E\2069\276\225\320K=6\033\266\274\003S\252\274\256\264Z=\362\313p\275P\030G=*\213\325\275Z\333/\2757\034\341<\202\0348<\225L\034\275\010F\204\275\354\330\341=\300\032M\274\323\250\371=\000\027\333<\234\275\000\275\005\260\254\275\237\001\207\273;\312=\272\340\351%\276\307A\341=\216\210\215\274m\231\236<=Y2\275\2142:=\021\225q\275m\037\266\272\214\315\002\275\210\242;\275\343\226\261<r\215k<n\004\277\275\301\201\240<\037P\000\275B\221\325\275j\342\210\274\2362n;\302\217u\274G)\230=?|\017\274\374\233\007\276\253u\233<\216\253\211=\301\263\207\275\005~4=s\250\257\273pUG=\320\232\036= d\200\275\005\312\014\274\205\200\265\274\246\034\313\271\263\304\314<a\211\352=\021\375I=\310X\274=\205\\E\275U\"N\275_\362\203<Q\266\370<\273\367O=\016\027\222;\036\265\220\274[\267M\274\227_\032>f9\024\276\354a\217\274\216\321\225\275E\210\220=\204\014w\274\033\000\311<\002\230\317<\330k\264<\226\t\007\274\240\025\337\274\351\336\223\275\256%p=x{\244=\231\326\315\273T\361\255=I\335\020\274\346\234\300\275\352\236$\274\023\233\"<\274J\032\271k\200\t<\343\261L=\245\245\353\275\020\234\305\274\246\ry<\375\377&\275Y\251\005\2756a\025>(NZ=*\206\216\275\277)\272\275=,\343\274W!e\274\315\023\245\275q\335L\274x\233\355\274F\225\013=\347+\213\275\207\010\016>\356sC=\276\203\020\273n\rP\273\302F\004\275T\0136=\233\367\210=#\261c\275\212\035}\275\306\271\010=O2\366\2744\016\324<`\226s=B\370\">|\0353\275\210\235,=9\027\212=m\000\255<h\261\270=\244\025\000\275\226\017C=\001\310\233\274\320\351J\275<\0207\276nl\212\275\310\023\030\275\264\034\224\274:]a\275\223\332\224\275|\177\260=\352\034\240=s\022\200=rQI=\214\033\021\2726c\204=\374y\363\275\205XJ=\206\243\021\275\177\032\000\275\247\201)=\205g\234\275\240\225\021<\246\256\305<T\371\227\275`\030\003\275\236\322Q\275\252\307\253\274\332\314\231\274\346\275U<\370,E=\211\250\317=\257\257\330=F\231\316\275U]\277=\020K\371<\345y\312\275\037x1\273\202\340\023\275\214)\313\274\232yZ=\263\372\007;\241\034\n>8>\233=/\305f\275\005;\271=\317\014\014\274\020X^\275\313>\325=5\263C=\377\323\210=XQ\356:\262Ig=*X\231\275pp\333=\203\271\207\274\342\334\231=\333\353B\275\242\375\210=c \201\275\307W\252;\315\211l\275\361\307\276\274=\242\332\274\243W\241\273\241\004w<\217J\007=\312}2\275\344\255\001\274\241\273\312<\242\263G;\345(\347=\341\372\367\274t\341<\275\334T\275=\305\223r=\242\343<\275\316D\242=\374\007\260\274\010\240g<\226IK\275WV\026\275j\241n=1O\310\274%N\321=\030\254 \275\343\2609\275q\344\026<z\207\336\275\323\235\356;G\376\3369\n3\256=\004,\267\272\035w,=\021d\367<\266\005\021\274C1y\275\247\262\013>9\344+\275\305\023\344\274\031\277\310=\232\001\252\275\241t\214=x\226\215\274\355\273\007\274[\306\356\275\217\r\214<\037\253\022\275\244\253\224\275\257\214\326\273C\271\014=\210\303\316\275\031w\203=Q^\254=\016\232\270=\363t\242=\216W\207=\032\270\357<\221\303\036\275\001\037\244\275{\205d=npD\274W\332\310\274\316U\027=W\313+<\"\003c\273\370\013\226\273\302\245]=\010\3074=\036o\241\275\314\034\006\275\377hK\275\\\250P>} 7\275\322fT=Z\243$\274\253\225\236\2752\326e=\372\'y\275Po[\273\360\016\370<\205{\222\274\2363\215\2752/d\275\307\357\263\275\nZ%<\241\"\261\275\345\2537\275\266\205\225\274\301\305\325\274\311\305\376\275\3764\211;\277q\355<\275c\307=\354\017\275=\313\021$=\263\255]\275%\322\017\274]\262\t=\036\213\365\275\374\307\030=\352r\244<\036\3018\274\272\254\233\273p\364\205\275\273(2>)\335\247\275\276XK=IPz\275\t9\335<\254\227\233\275\027\317\321\274\334:\277<\313\333\374<\216Z\306\275\224\305\035\275\352\257\017=\346l\354<\241AU<\274\261\267<\'s\025\275\263?\031\275\315H\021=\377\332\302\275\235\255\324<>\274\207=\344\274*\275_\307\002=\374\301\026>\337\301\221;\316\206\330;\373\266\021\275\026\334c=\201\370\211=\r\320\307\274"
      }
    }
  }
}
node {
  name: "lstm_2/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_2/recurrent_kernel/Assign"
  op: "Assign"
  input: "lstm_2/recurrent_kernel"
  input: "lstm_2/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_2/recurrent_kernel/read"
  op: "Identity"
  input: "lstm_2/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/recurrent_kernel"
      }
    }
  }
}
node {
  name: "lstm_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/concat"
  op: "ConcatV2"
  input: "lstm_2/Const"
  input: "lstm_2/Const_1"
  input: "lstm_2/Const_2"
  input: "lstm_2/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_2/bias/Assign"
  op: "Assign"
  input: "lstm_2/bias"
  input: "lstm_2/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_2/bias/read"
  op: "Identity"
  input: "lstm_2/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/bias"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice"
  op: "StridedSlice"
  input: "lstm_2/kernel/read"
  input: "lstm_2/strided_slice/stack"
  input: "lstm_2/strided_slice/stack_1"
  input: "lstm_2/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_1"
  op: "StridedSlice"
  input: "lstm_2/kernel/read"
  input: "lstm_2/strided_slice_1/stack"
  input: "lstm_2/strided_slice_1/stack_1"
  input: "lstm_2/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_2"
  op: "StridedSlice"
  input: "lstm_2/kernel/read"
  input: "lstm_2/strided_slice_2/stack"
  input: "lstm_2/strided_slice_2/stack_1"
  input: "lstm_2/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_3"
  op: "StridedSlice"
  input: "lstm_2/kernel/read"
  input: "lstm_2/strided_slice_3/stack"
  input: "lstm_2/strided_slice_3/stack_1"
  input: "lstm_2/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_4"
  op: "StridedSlice"
  input: "lstm_2/recurrent_kernel/read"
  input: "lstm_2/strided_slice_4/stack"
  input: "lstm_2/strided_slice_4/stack_1"
  input: "lstm_2/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_5"
  op: "StridedSlice"
  input: "lstm_2/recurrent_kernel/read"
  input: "lstm_2/strided_slice_5/stack"
  input: "lstm_2/strided_slice_5/stack_1"
  input: "lstm_2/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_6"
  op: "StridedSlice"
  input: "lstm_2/recurrent_kernel/read"
  input: "lstm_2/strided_slice_6/stack"
  input: "lstm_2/strided_slice_6/stack_1"
  input: "lstm_2/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_7"
  op: "StridedSlice"
  input: "lstm_2/recurrent_kernel/read"
  input: "lstm_2/strided_slice_7/stack"
  input: "lstm_2/strided_slice_7/stack_1"
  input: "lstm_2/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_8"
  op: "StridedSlice"
  input: "lstm_2/bias/read"
  input: "lstm_2/strided_slice_8/stack"
  input: "lstm_2/strided_slice_8/stack_1"
  input: "lstm_2/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_9"
  op: "StridedSlice"
  input: "lstm_2/bias/read"
  input: "lstm_2/strided_slice_9/stack"
  input: "lstm_2/strided_slice_9/stack_1"
  input: "lstm_2/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 192
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_10"
  op: "StridedSlice"
  input: "lstm_2/bias/read"
  input: "lstm_2/strided_slice_10/stack"
  input: "lstm_2/strided_slice_10/stack_1"
  input: "lstm_2/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 192
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_11"
  op: "StridedSlice"
  input: "lstm_2/bias/read"
  input: "lstm_2/strided_slice_11/stack"
  input: "lstm_2/strided_slice_11/stack_1"
  input: "lstm_2/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/zeros_like"
  op: "ZerosLike"
  input: "lstm_1/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/Sum"
  op: "Sum"
  input: "lstm_2/zeros_like"
  input: "lstm_2/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "lstm_2/ExpandDims"
  op: "ExpandDims"
  input: "lstm_2/Sum"
  input: "lstm_2/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/Tile"
  op: "Tile"
  input: "lstm_2/ExpandDims"
  input: "lstm_2/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/Tile_1/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/Tile_1"
  op: "Tile"
  input: "lstm_2/ExpandDims"
  input: "lstm_2/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/transpose"
  op: "Transpose"
  input: "lstm_1/transpose_1"
  input: "lstm_2/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/Shape"
  op: "Shape"
  input: "lstm_2/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/strided_slice_12/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_12/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_12/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_12"
  op: "StridedSlice"
  input: "lstm_2/Shape"
  input: "lstm_2/strided_slice_12/stack"
  input: "lstm_2/strided_slice_12/stack_1"
  input: "lstm_2/strided_slice_12/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_2/strided_slice_13/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_13/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_13/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_13"
  op: "StridedSlice"
  input: "lstm_2/transpose"
  input: "lstm_2/strided_slice_13/stack"
  input: "lstm_2/strided_slice_13/stack_1"
  input: "lstm_2/strided_slice_13/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_2/MatMul"
  op: "MatMul"
  input: "lstm_2/strided_slice_13"
  input: "lstm_2/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/MatMul_1"
  op: "MatMul"
  input: "lstm_2/strided_slice_13"
  input: "lstm_2/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/MatMul_2"
  op: "MatMul"
  input: "lstm_2/strided_slice_13"
  input: "lstm_2/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/MatMul_3"
  op: "MatMul"
  input: "lstm_2/strided_slice_13"
  input: "lstm_2/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/BiasAdd"
  op: "BiasAdd"
  input: "lstm_2/MatMul"
  input: "lstm_2/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_2/MatMul_1"
  input: "lstm_2/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_2/MatMul_2"
  input: "lstm_2/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_2/MatMul_3"
  input: "lstm_2/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/MatMul_4"
  op: "MatMul"
  input: "lstm_2/Tile"
  input: "lstm_2/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/add"
  op: "Add"
  input: "lstm_2/BiasAdd"
  input: "lstm_2/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_2/mul"
  op: "Mul"
  input: "lstm_2/mul/x"
  input: "lstm_2/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_2/add_1"
  op: "Add"
  input: "lstm_2/mul"
  input: "lstm_2/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/clip_by_value/Minimum"
  op: "Minimum"
  input: "lstm_2/add_1"
  input: "lstm_2/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/clip_by_value"
  op: "Maximum"
  input: "lstm_2/clip_by_value/Minimum"
  input: "lstm_2/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/MatMul_5"
  op: "MatMul"
  input: "lstm_2/Tile"
  input: "lstm_2/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/add_2"
  op: "Add"
  input: "lstm_2/BiasAdd_1"
  input: "lstm_2/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_2/mul_1"
  op: "Mul"
  input: "lstm_2/mul_1/x"
  input: "lstm_2/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_2/add_3"
  op: "Add"
  input: "lstm_2/mul_1"
  input: "lstm_2/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "lstm_2/add_3"
  input: "lstm_2/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/clip_by_value_1"
  op: "Maximum"
  input: "lstm_2/clip_by_value_1/Minimum"
  input: "lstm_2/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/mul_2"
  op: "Mul"
  input: "lstm_2/clip_by_value_1"
  input: "lstm_2/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/MatMul_6"
  op: "MatMul"
  input: "lstm_2/Tile"
  input: "lstm_2/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/add_4"
  op: "Add"
  input: "lstm_2/BiasAdd_2"
  input: "lstm_2/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/Tanh"
  op: "Tanh"
  input: "lstm_2/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/mul_3"
  op: "Mul"
  input: "lstm_2/clip_by_value"
  input: "lstm_2/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/add_5"
  op: "Add"
  input: "lstm_2/mul_2"
  input: "lstm_2/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/MatMul_7"
  op: "MatMul"
  input: "lstm_2/Tile"
  input: "lstm_2/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/add_6"
  op: "Add"
  input: "lstm_2/BiasAdd_3"
  input: "lstm_2/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/mul_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_2/mul_4"
  op: "Mul"
  input: "lstm_2/mul_4/x"
  input: "lstm_2/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_2/add_7"
  op: "Add"
  input: "lstm_2/mul_4"
  input: "lstm_2/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "lstm_2/add_7"
  input: "lstm_2/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/clip_by_value_2"
  op: "Maximum"
  input: "lstm_2/clip_by_value_2/Minimum"
  input: "lstm_2/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/Tanh_1"
  op: "Tanh"
  input: "lstm_2/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/mul_5"
  op: "Mul"
  input: "lstm_2/clip_by_value_2"
  input: "lstm_2/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/TensorArray"
  op: "TensorArrayV3"
  input: "lstm_2/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "lstm_2/TensorArray_1"
  op: "TensorArrayV3"
  input: "lstm_2/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "lstm_2/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "lstm_2/TensorArrayUnstack/Shape"
  input: "lstm_2/TensorArrayUnstack/strided_slice/stack"
  input: "lstm_2/TensorArrayUnstack/strided_slice/stack_1"
  input: "lstm_2/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/range"
  op: "Range"
  input: "lstm_2/TensorArrayUnstack/range/start"
  input: "lstm_2/TensorArrayUnstack/strided_slice"
  input: "lstm_2/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "lstm_2/TensorArray_1"
  input: "lstm_2/TensorArrayUnstack/range"
  input: "lstm_2/transpose"
  input: "lstm_2/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/transpose"
      }
    }
  }
}
node {
  name: "lstm_2/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/while/Enter"
  op: "Enter"
  input: "lstm_2/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/Enter_1"
  op: "Enter"
  input: "lstm_2/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/Enter_2"
  op: "Enter"
  input: "lstm_2/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/Enter_3"
  op: "Enter"
  input: "lstm_2/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/Merge"
  op: "Merge"
  input: "lstm_2/while/Enter"
  input: "lstm_2/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/while/Merge_1"
  op: "Merge"
  input: "lstm_2/while/Enter_1"
  input: "lstm_2/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Merge_2"
  op: "Merge"
  input: "lstm_2/while/Enter_2"
  input: "lstm_2/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Merge_3"
  op: "Merge"
  input: "lstm_2/while/Enter_3"
  input: "lstm_2/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Less"
  op: "Less"
  input: "lstm_2/while/Merge"
  input: "lstm_2/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/while/Less/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/LoopCond"
  op: "LoopCond"
  input: "lstm_2/while/Less"
}
node {
  name: "lstm_2/while/Switch"
  op: "Switch"
  input: "lstm_2/while/Merge"
  input: "lstm_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge"
      }
    }
  }
}
node {
  name: "lstm_2/while/Switch_1"
  op: "Switch"
  input: "lstm_2/while/Merge_1"
  input: "lstm_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_1"
      }
    }
  }
}
node {
  name: "lstm_2/while/Switch_2"
  op: "Switch"
  input: "lstm_2/while/Merge_2"
  input: "lstm_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_2"
      }
    }
  }
}
node {
  name: "lstm_2/while/Switch_3"
  op: "Switch"
  input: "lstm_2/while/Merge_3"
  input: "lstm_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_3"
      }
    }
  }
}
node {
  name: "lstm_2/while/Identity"
  op: "Identity"
  input: "lstm_2/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/while/Identity_1"
  op: "Identity"
  input: "lstm_2/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Identity_2"
  op: "Identity"
  input: "lstm_2/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Identity_3"
  op: "Identity"
  input: "lstm_2/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_2/while/TensorArrayReadV3/Enter"
  input: "lstm_2/while/Identity"
  input: "lstm_2/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "lstm_2/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/MatMul"
  op: "MatMul"
  input: "lstm_2/while/TensorArrayReadV3"
  input: "lstm_2/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/MatMul_1"
  op: "MatMul"
  input: "lstm_2/while/TensorArrayReadV3"
  input: "lstm_2/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul_1/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/MatMul_2"
  op: "MatMul"
  input: "lstm_2/while/TensorArrayReadV3"
  input: "lstm_2/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul_2/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/MatMul_3"
  op: "MatMul"
  input: "lstm_2/while/TensorArrayReadV3"
  input: "lstm_2/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul_3/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd"
  op: "BiasAdd"
  input: "lstm_2/while/MatMul"
  input: "lstm_2/while/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_2/while/MatMul_1"
  input: "lstm_2/while/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd_1/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_2/while/MatMul_2"
  input: "lstm_2/while/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd_2/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_2/while/MatMul_3"
  input: "lstm_2/while/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd_3/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/MatMul_4"
  op: "MatMul"
  input: "lstm_2/while/Identity_2"
  input: "lstm_2/while/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul_4/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/add"
  op: "Add"
  input: "lstm_2/while/BiasAdd"
  input: "lstm_2/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/mul/x"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_2/while/mul"
  op: "Mul"
  input: "lstm_2/while/mul/x"
  input: "lstm_2/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/add_1/y"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_2/while/add_1"
  op: "Add"
  input: "lstm_2/while/mul"
  input: "lstm_2/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Const"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/while/Const_1"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/while/clip_by_value/Minimum"
  op: "Minimum"
  input: "lstm_2/while/add_1"
  input: "lstm_2/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/clip_by_value"
  op: "Maximum"
  input: "lstm_2/while/clip_by_value/Minimum"
  input: "lstm_2/while/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/MatMul_5"
  op: "MatMul"
  input: "lstm_2/while/Identity_2"
  input: "lstm_2/while/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul_5/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/add_2"
  op: "Add"
  input: "lstm_2/while/BiasAdd_1"
  input: "lstm_2/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/mul_1/x"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_2/while/mul_1"
  op: "Mul"
  input: "lstm_2/while/mul_1/x"
  input: "lstm_2/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/add_3/y"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_2/while/add_3"
  op: "Add"
  input: "lstm_2/while/mul_1"
  input: "lstm_2/while/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Const_2"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/while/Const_3"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/while/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "lstm_2/while/add_3"
  input: "lstm_2/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/clip_by_value_1"
  op: "Maximum"
  input: "lstm_2/while/clip_by_value_1/Minimum"
  input: "lstm_2/while/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/mul_2"
  op: "Mul"
  input: "lstm_2/while/clip_by_value_1"
  input: "lstm_2/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/MatMul_6"
  op: "MatMul"
  input: "lstm_2/while/Identity_2"
  input: "lstm_2/while/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul_6/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/add_4"
  op: "Add"
  input: "lstm_2/while/BiasAdd_2"
  input: "lstm_2/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Tanh"
  op: "Tanh"
  input: "lstm_2/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/mul_3"
  op: "Mul"
  input: "lstm_2/while/clip_by_value"
  input: "lstm_2/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/add_5"
  op: "Add"
  input: "lstm_2/while/mul_2"
  input: "lstm_2/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/MatMul_7"
  op: "MatMul"
  input: "lstm_2/while/Identity_2"
  input: "lstm_2/while/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul_7/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/add_6"
  op: "Add"
  input: "lstm_2/while/BiasAdd_3"
  input: "lstm_2/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/mul_4/x"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_2/while/mul_4"
  op: "Mul"
  input: "lstm_2/while/mul_4/x"
  input: "lstm_2/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/add_7/y"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_2/while/add_7"
  op: "Add"
  input: "lstm_2/while/mul_4"
  input: "lstm_2/while/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Const_4"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/while/Const_5"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/while/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "lstm_2/while/add_7"
  input: "lstm_2/while/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/clip_by_value_2"
  op: "Maximum"
  input: "lstm_2/while/clip_by_value_2/Minimum"
  input: "lstm_2/while/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Tanh_1"
  op: "Tanh"
  input: "lstm_2/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/mul_5"
  op: "Mul"
  input: "lstm_2/while/clip_by_value_2"
  input: "lstm_2/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "lstm_2/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "lstm_2/while/Identity"
  input: "lstm_2/while/mul_5"
  input: "lstm_2/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "lstm_2/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "lstm_2/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/add_8/y"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/while/add_8"
  op: "Add"
  input: "lstm_2/while/Identity"
  input: "lstm_2/while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/while/NextIteration"
  op: "NextIteration"
  input: "lstm_2/while/add_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/while/NextIteration_1"
  op: "NextIteration"
  input: "lstm_2/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/NextIteration_2"
  op: "NextIteration"
  input: "lstm_2/while/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/NextIteration_3"
  op: "NextIteration"
  input: "lstm_2/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Exit"
  op: "Exit"
  input: "lstm_2/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/while/Exit_1"
  op: "Exit"
  input: "lstm_2/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Exit_2"
  op: "Exit"
  input: "lstm_2/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Exit_3"
  op: "Exit"
  input: "lstm_2/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "lstm_2/TensorArray"
  input: "lstm_2/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayStack/range"
  op: "Range"
  input: "lstm_2/TensorArrayStack/range/start"
  input: "lstm_2/TensorArrayStack/TensorArraySizeV3"
  input: "lstm_2/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "lstm_2/TensorArray"
  input: "lstm_2/TensorArrayStack/range"
  input: "lstm_2/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "lstm_2/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/sub"
  op: "Sub"
  input: "lstm_2/while/Exit"
  input: "lstm_2/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_2/TensorArray"
  input: "lstm_2/sub"
  input: "lstm_2/while/Exit_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/transpose_1"
  op: "Transpose"
  input: "lstm_2/TensorArrayStack/TensorArrayGatherV3"
  input: "lstm_2/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1767766922712326
      }
    }
  }
}
node {
  name: "lstm_3/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1767766922712326
      }
    }
  }
}
node {
  name: "lstm_3/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "lstm_3/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 4197597
    }
  }
}
node {
  name: "lstm_3/random_uniform/sub"
  op: "Sub"
  input: "lstm_3/random_uniform/max"
  input: "lstm_3/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/random_uniform/mul"
  op: "Mul"
  input: "lstm_3/random_uniform/RandomUniform"
  input: "lstm_3/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/random_uniform"
  op: "Add"
  input: "lstm_3/random_uniform/mul"
  input: "lstm_3/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_3/kernel/Assign"
  op: "Assign"
  input: "lstm_3/kernel"
  input: "lstm_3/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_3/kernel/read"
  op: "Identity"
  input: "lstm_3/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/kernel"
      }
    }
  }
}
node {
  name: "lstm_3/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 128
          }
        }
        tensor_content: "=r\303\2758-u\275\320t\344\275d\223\222<B9<\275c\257[<\272(\322\275\315x3=H\301d<\370\310\206\275\375y5>`\374\310;\234h>\276SL\336=\355\023U\275\223A]\275\344\233H\275\3557E>e\002\024:\r\234Z=i\247\347\275\253\267\342<\203e\364=f\237\345\275V\365\231=\331R7=/X\223>|\036\020=PT\217;\377=?\275h\357/=n8\262\275\001\023\023>\216H{=\267A,>l\357H\2759\302\253=\342\265\272=R&@\275\215(M\273\341Q\"\274x\242\006>6\332\311=\377\243\262\275%\223y<\223\022\344\275\241!\243<bS\347<0\002\n=_\340\310\274 8\315<\031\317\031=PS\022=\264\336P<\336\265\264\275\245\241\354=\254\360\325=\017d\310=3\371\225=f\211\003>,\317\244\275\231\301\000\276Q\326\030\276\275\275;\275\252\230\223\274\260\327\351<\354\325M\275\037\226\224<l\211Q\274\223d\034\275\345\315d\275\2566D=\200\"a<W\236\257=Jx\333=\264\341\035=\241P\267=\364\276\307=\221\331\337=\237\332\317=\320\251\016\276G\257\263\275\263\261#>d_q\275\307\326%=\025\353\r>\256d,<\355^\224\275\272\253a\275\356,\204\275H\207\021\276\014\3533\27593\007\275\255[\264<\034O\225<\337V\317\275\363_\027\274\230\201#=m\010\234\273\006\336\030\276\007\033\004\275^\340h=FY\206\275\362\236\327\274\207\345\253\274\354f\252\275\004w\213=\373\2705>\317\365\006\276{\361\373\274Q\001\242;O\tU=]}\236\275\361\025\013\276\\\210\204;\330\231Q<\230\000\255=pr\026\276\364\212Z=\036\253\245=\026\362\327\273b\312\242\275,\260\006>\362A\014>x\210\"\276\024\2267=\217\206\036\276#\257\013\273}].\275\r\313\277=\314my\275\233B\244\274J]\362\275\013\325\310\275^u\263\274ht3>\244_\302<m\360:\275M\375\251\273m\332\347=E\354\r\275\346\266\231\275[\217\017\276\247\271\240\274\377\300\021\275\263:H\276\210\022\334\275\324\013D\276\365z\377\275\034/\341<\377\322_\275\032c|\275\271O\337=\275\345\350\275\267Hj\272%\271\246\272`?\247=\250B\256\275\251\027\356={T\221\275\313\217\313<\277~\375\275Sb\260\275\303\033\'\273\351\323{\275\321\210\373<\227\016\024;fOi=.\310\022\273\355\203,;\251\337*>uk\232\275\211\2713>=\266\257=\346Yl\275\240\3345=\263u\241=\016\353\267\275\334\270C\276\327g\020>\341N\233=\214O\001:\202W\215=W\222H>\354[\204=0\237o\275&\010\033\276\005\244\344=\202\000\372:\315v\327=\205\\\220=F\031\000\275v0\210<\367#\204=<}\031=4G\350<\207<_\275\347\214%<\321\265\326=@\037\273=S\216\204\273\201\024\244\274\037Z\243=\310\277\234<\3649->v\350\335\274W\237\264\275\250L]\274n\016\333=W\367Y=\020:B\275\270\354\300\275\316\275\374\275PU\355=\262\365d<\273\256\300\275\314:s\275\216k\356\274\023\373\301=a\323\001\276&W\001\276\326y\370<\311\347\005>\262\326;>\343\373\004\275\300\242\021=4n\347<<\272\"=)\210\r\276\265\3562=y\320!\275\303@\031>\331d\215\274>\311\005\276\0061%\275\177\210\252=-\002\244<\364F2\275\3436v=A9\013\275\201e5>7\035<\275\273\207\254<\347@I\274\021\003\201\275z\314\246\275\217h\362\275]A\034\276)\030\235=\302\306\235\275>\\\224=\300\301\037\275\307*\021=q\361\271\275\312\260\216=\347L\363\274(\246:\273\234F\213=U_\300\274{JU<\256\323\253=\014\003\277<6b+\274\366\323\037>t\303\n\276\"\226\001>\242$\032\274\202@z=\017\t\334\275\352\004\310=\351\1777\275\356\006\225\275\034\306,\276\223gC=Wx\254\275\275\220^\275c\372\346<Z\204\245\275\331(\211\275\035\r\231<\335\035_=-\266\235\275^\245\004\276\000J\232=b\206%\274v\355\">\267\366/\275M\355\356=6u%\276\025r\222=\027\230\250=1\241h\275 O\237\274\001\372\010\274\345\'\010>\274d\371=B\341Z\275\374\273\005\276\231\243\305=\263\327\210=H\\\241\274i\226\220=\321lk\274\357\037\312<\346\177\005\276\001t%\275\343\272`\273-U\221=\223\304\375<\316y\364<\255S\331\275\364\230m\276\252\361<=T&\232\274C\017\211=\025\r\016\275\363)B\276\2060\242\275\037\201\241\275\362\214\203\275\rn\321\275\220\2729\275\341\212\025\275Wa\246<61\272\274\025\0325\275\303\212Q\275\316s\324\274\036\\\220\275S\r4<<ii\274\340k\213\275\211\321]\274\321\374i<\246\206\002>\250A\231\273\3242\237\275\032\370\302=\346\321\342<d\303E\275\021\272\203\275\211\"\300<\031\251\211=]\025.>\365\227\331\275&\256\006\276+{\276\274\364\357\342\274\271B>\276%*\256\274\014\305\216<4\260u=$C\">\366\326\214=RPF\274V\017\327=\277\014\002\275\254\037\t=w\002\232\273\357\017b\275\345C\330=#\356\007>C\331)>FCk\274\375\267B=\227\310\t\276\270\3550\274\253\000\016\276u\260O\275\315\024f\276v\321\n\276h\325(=\357\202p\276#\003\310\275t\030%\2735b7;<\375D=/7\352\273D\003\370=\305\216\225=\315U\322=W^,\275\240\'\316=\242\222\276=W\204|\275\261\276N\275,Q\206\275\256\253\037=\302\272\221\275\206\302\255\275F\3761>H\237I\275\026\345\025=\031\007\316<\016\340\242\275\236\031\r>\277\031%>s\267\330=z\212\000\276\201\337\213<\272/\t=\345\267\351=\260\n\267<6\356S<\334\037\364\275\252\341\213\273c{\200=d\256\216<\362\362\261=~y\316=\333\r(\275\364\020\244\273\027\347h=\021%\352=J\321-\276\262\372\024=\222\020\347=\276\037o=\242\205p;\243T2>MYi\275\014\246\306\275/2\201\275\016\355\245<l<.\274\217\000\253<\313D~\275u]\337<+}\205<#\307\\=\263\021f\274\030\241N<\nL\211<\266\207\260\275)\265\'=\231\'\025\275:Z\336\274\270\027a\275\003\032!\272\350\335\305<\034\252\362\275N\365\343\273^k\235;\\\242\204=\272\347N=0\\\214\275\004I\365\275\3447\261<i\304\322=\361\315#\276$\220\215=6\337\023>\004\316\221\274\255\2113\275\271\316\237<q\027r\275\236\250\330=m\021\r\276\223\341S\275\305f\345\275f\275\252=\337\021\213=H\317_>\362FY\274(UN=\257\220/=\274f\354=\272\206\264=\206\205\245<\3058Y>s\034\356\275gQ\323<@\357H=\025\301\242\272\031r\024\276F;\025\275w\316\303\274\317L\014\276\330\263\262<\341H.>\374\317\315\275\217\342\003>\371\240\030>\304\n\360=M\211\006=\260[-=\203\312\264=\217\006\214=\322E\343=\332\004\010\276\365\310\022=-\313\010\276\365#I<\0002`\276;\375\347\275\343\321\227=e~]\274\312\334\204\275l*4>\304\321\270\275\255\3127\275\337`\366=\245x\303\274\rX\313<\350\214\307:]`\234=\277\374W=\214\330\034\276)\3605\275$\t\270\275\310\021R\275*a\216\275\367\216\215\274\251\375W\275\016\177\200=\260\362\256\275\004\t\373\274\373v\023\275\361\257\035=oZ\005>\031\307\241=\226}\376\274\027\201c=\027\r\314\2759\270\211=(\205==\0074(=\270C\326=\222\271X\275K\325`<\356I\320\274U\210\000\275b\024\327\275;\035\322<\213[$>\275*\326=|\326\000=j7\260\275\332e\037\275\'\006\n\276\016\331\025>E\223\350\275\3508\324\273q\334M\276\311\300\220<\036\266$<\326\307\252\275\301\214\r\275/\317R<\027cJ\274\227\325\341\274\355TW\276}\372\272=\210P\037\276\000[\336\275`k\315\275\342w\025\2767\215\027\276\021\256\304\275,\303\305\274\211\022\255\275q\036\326=\376\210\301\275\303~\204\275a\025\202\275\340\031\222\275\315\252<>1 \037=d\266\375=_U\317\275\203\244\351=\033+D\275\241\020\t\275\177f\204=:\356\026\2761U\020>.\314\343\275\277D\311:q\371H\274\224\272\201=\336\\G\275\352\334_=\314\304\206\276\365*m=\270\371`\275\177\324\007\276\207\256&\2758\217\022\274\244Z\260=\027U\301\273}\341\014:\252\211\026\276\310\324N\274`\006t\275\027\351\005=\203\340\247<>Q&\276\362\263$\276}\311\357\274\327\262f=5\361\263=:3\030\276\030\024\217=\362\306\243\275[\324\037\275\010M\246\275\372\003\221=\3634\226\275\317\005\200\275 \373\">\220z\226\273\016\002\230\275\351\263X;\330\277\257:l\266J=n\027n\274\272\240\221=:\266\006<\350\247\204\273\222\365\304=M\'\007>(\200a\275\330m\222\275Q\177$\275<W*\276\033=\302\274\366\304\307\273\273\225$\276F>\314\275\324\257\216<!X\317\274\005\237\214\275\236\273\234=\\\307\336\274\277\215\017=\367h\354=\'\"Z=\"J!=\242\254l\273\025\327s\275\363\331@=`k\211\275\264w\375<\246m\261\275r\2061\275\232\346\033>2\354\261\271\271\271\275=o\226\270\274$1\006\276\357HV\274\035\270\222=>\262n=x<\341\274\005\344\014\276v>\266\275\337\225\345\274t\340\345=9:\200=\037\310\354\274sb^=qF\257\274E,\347\275_\266\025\276.W(>\327\226\007=\331\247\037>x\226\265=\363\nq=\365J\253\275m\023\204\274\272O\371\275\271\276\036=;\301\202\275.\332\346=\006\242w<\306\n\357\2750[\346=\016\006c\275\\\322!>\216_\007=\204\242:;-\234\243=Z8\003=\255o;=<\254F=\021\241$=\364&\273\275a\2006\275)\361\225<\373\231\361\275L\241\204\275\0162k=\r.\213\276\225\312\222=eW\201\275>o\213;6\222\206\275\272\333Q\275|\351\322;\347\362{\275\300\216p\275\221Z\025=49B=g~\366\275nz\311\275\023\370\366=\t~\244\275\030\215?<a\247^>\356[M;Xr\250\275n\\\331\274\274[*\275\r\004.\273\246\252\301=\357\230\376\273\350(b<\215\252>\275q\004\003=\300\354\024<\203\367%\275\265\345\022\276\3078\263=fu|==\326\352\275Q\206\260=\234\200(=\224\263\374\275\3208\370=\223|U\275\263$\330\275\207\3411\275\t\210\351=\314\267\024\276s\324\277\275\336\0002\276\3549\257=$\200\200\275\260\020\237=\330\266\210:\253\274C\276\177\304q\275!y\352<o\237\227\275^S\226<+\367U<0\277\351\275\034\363\313\274k<e={>\220\2750\221\343\275\002`%\276\251\343\237\274D\263\301=$&\017\2754\312\244\275\363F\023>\236!\005\275\206&\361=\260\317\'>\320\257*>O\220Q=_\206\307\274RA_=\343Y\320\2744\"\213\275\257-p=f\264\327\275\361`A>]]h=?8\200<Gf\374=\237\336\345=\222`\356=\273I\032=\257\336\245<b\002\332\274B\252,>\201U\336=\"\377,\273_)\257\275\362\2157=]\025\221<Z\210r<KD+\276\325$\305\274\313/\241\275\t\317\227=\026\313\007>\273\246;=\234\024\237<\340Jg=\265s\232\275<\356\304\275\332r,=\344A\250=\260\362t\275\216\271:\276\240\366\214\275\020\225G=\325\021\332=\316\217\262=y\354I>sA\332\275\r\035\035>\nR\016\276\240\255m>l\342\031\275\002\331\304=(\344\262\275(\376\004=>_\016\275\202\262\257\275\313n\034\276\206\334\002\275\251\370\227;\220g\022\276\322\243L\273\277nx=\322Q\030\276\213\021\314=\020\335_=V\024\202\275\031\0260>\224\217{=9\020\323<\366\330\245=q\332_=\343\323\244<\253\203\"\276\003\322A=n&\016=\260\245 >\275\255P\275\222t\311\275R\266]<5+u=\t\217\260=r1,=\330\037(\274K\333\205=#\262\275\274r\265\221;\343\321\316;\321\326\201\275\306T\233=9I\324\275\370\211\361=\243v\t>\200%\324\275\005\232\037\276wP\307\275]8\300\273E\344(>)C\r<\035W\336<j\242\377:\007\351\371\275\323D5>\310FV=\225\364\234\274\347/&=\255+9\276\310\027<\275L\372\317\275H\237l<d!\263=\217\377\271<`\232\347\274\021#\261=\t\371\004\276\360K\265\274\030\371\333\274\237\007Q<\356\276l\273\221\206w\275+\256\263\275\r\2365\274\340\t\207\275\341\032\272\275xt\357\273S\313h=\035\317\006\273*\311N=\3417\000\275LU\261=\013\001E\275q9U\275\215\"\323;\331\222e<\242\372\224\275\025U\304<\210\212\317<\022\366\224\275:3\214\275\226\366><\354\274\350\275A\322\014\275X\214_\275\211\207\264={=\025=CtP>#1.\276\247\005\302\275z^;=#\262\242\275Qx\236=\355\000]\275\232\356\356<f\360>>\037\371(><X\024<\257}\202\275\364\227\254\274#\301\221\276\206\230T=\177u\303<,x\221\274\017\377\177=\300\242\364;f\210\r\275\272\267X=\257\374l<\270\235\311\275\266\035N=t\347\273=\244\262\276\274\200\2572>Qc\270\275jF\000\275\241\257\243=_r\237<\313\205A\275\365\305Q\274\324\376\022\276\322\374\307=\202l\325<\377\361\373<\013.\240\275.\263Y>\275\022\365=a\233\327\275)Y\346\275\245%1>W\377\375=\355\3769\276,\004h\274\024\026\227\274\371\264\260\273\355\017\357\274\222\321\226<|\263,>a{^>\021\3343<\266\312\316\275\202K\003\275\252\376\345=\245\237\362\275\344\253\303=\300~\343\275\351\354Y\275\241\365\324=\200)\210=\373\363<\275M\2449\2752\023\001=<\361N\275Q\320\214\274:h\330\272\204\241\257=,d\017>\324\221\251=\"\357\340<\344\033}=*\354\365\272[T\372\275\270\237 \275Z7\230=O*T\274\267\022\220<\271\256y\275q\274\033\275\223\273\002=\232*\230=Tu\373\273,\231\252\274wx\313\272\365\207w=P\242\314=\245J\232;&J$\275\031\316\'=D\0058\275\003\035\\<\236\232!>\320FB=\352\335K\275U\302\200<\251rS;B\252\272<\215\365\021=\337Z&>\311\323#\276\302uh\275\343\007\212\275\370\213Y\272\241\241\254\272\0074\300=\207M\240\275\273.\340\275\275\231 \274\001\315E=U\364\211\2759\251\016>\006U\356=\252\'\260=<\007\216\274\340Hd\275h\254\312:5h+=-u \274\375\222\034\275\331\236\020>\226$\t\275\3439\225=\314|\320\275\tQF\275\315\320.\276\272c\271=UTE\275\026\031V\274\222\260\006\276H\263\331\275?l$\276oN!\275\370\332\246\274|\363\352\274\"G2>\315e\227=\325H\270=\272\002J\275\314\307\256\274-\262\253=\205P\252=\'h\324<\343\344\243\275\t\022~\275\013\327\024\276%\304\217\275y\'\250\273\261\304.=\340\206^\275\322\305Y=K#k\2752|\241\275:W#>\331\273\221\275\236OE\275\254fg=\r\371\215=\006~\204=6.\250\273VB\205=\027\272I>e\030\270\2728\021\003=\320\341\252\274\373\023\016\276Y\246\001=.\355\322=\200+\301=\331GC\275f/\t;\367\223\243\275/U\r\275\270\222\203<\266K\201\274\353\303\321\274kW\225=P\211&\275\324\340\233\2754\3125>\037\021\244\274K\227_=J\022\231\275\260L\027\276\310\220\201\276XP+>X\362\226=<2\372=u^\310=\314\246A\276r\034\207\275jSO\274gwP;\2637\031\275,\342\360\275N\010\343=\325\230\364\275\222F\253;\342\022\243\274f\275\273\274\375\255\251\275\253\213:=\260\250+>\330D\333=SL0\276 \362\332=\000=\'\275c\225\317<\254Er=V\'\036\274[\340\202<\211\255\037\276Z\236\300\275\242\326\260=\276\267\'\275v\005J=0\270\270\274\211%8\272\236/)\275\234\265\027\275\316$\253\273h\240?\275\231\2743\276\232\307\212\275\3538\216=\377\336\027\275\255\336\376<\326\274\324=\315\332\216=\262\027\354=\346\374\025>Vq\345=l\302\024;*;\221\275c\033i\275b(\034=\032\025\267\275\314\366\366\274\241\272\037=\330k\212<\2640[\273\"\004\364:E\202U:c\314\014>p\321\357\275\025\215)=>\220\302= q)>\225\320\232=\203\320\214=\004\000A\275j\037j=\3310\326;\312\355\346\275\330\n$\276\205\025\375=\306\316\325=\274\232\225=\016\312\307\275\255\210C\275\\b\t>\211\223\\<\245\357\356=\366m<<h.\374:\311#\017\276\214\033\202\273\025\357\273=\307\301*>\366lv\274\006:\027\276\244\322\211;\224R2\275\217\201\376=\003\251\261\274x\264\034>\213[\002\274Y\212\210\275\340M\332=\370F\234<<\363\234;\333\361y=\200c\025<V\264\267\275C\010\233<B/J<\262z\201=U+\210>\206q{=\375\342y=z(\006\276M\334N\276\254\204\237\274}\327\021\275BE4<\242\231\032\275\265\013\210\274q\310\021;\233\'\000=6T\213==\275E\275\031\306\026>\354\316\277=\345\254\337=*\n\017\276N\211X=s\001\370=\342\030\372<+\377.=N\315\020=y4\r>)I\217\273\307G\310\275ZN<\275\254[\250;\256:P\274\004\264\207=J\010\"\276\362d\312\274>\252\320\275\227+\211\275E\366S<\023x\376;=\027R<\013\034\312=[\332\207\275\366\354\327\275\214\025\030\276&\267\337\274\220\\\342\275\323\247F>\263\212\241\275\326\257\243\275\345\241\r\276u\227\031>n\357\203<Y\361c\275\251\004\006=\212 \277\274{\231d=O\031m=x\025\362=\3565j=\274-\260\275M\323\374\274\020 \016\276X\341\016\276\025!e=\203Z\237\273\013h\260\275\021\303s=*\341\223=\266\344O=\240\207\027\276b\030\265\275\346\026G>b\323\362;\343:4\276\323\201H=4\366\316\275C\2216\275\226\255?;]\307\006<j\232%\275\035\3534=\037\201\376\274[\301\t\274&\020\341\275\203\002\203=\235\334\262\275\3072\344<\362R\340\274 \025\340\274\321}m=\01484=\206b\317\274\026\354\007\276\214\317\000\276\332\347\275\275\\\2054\274jc\274\273\226\300\">\260\266\027<6\374\016\273&\036\036=\013a\250\274\257\210\274=\017\312\251=\014\211\013=\000 \321\275\303\352\312\274\277\343X=\210~J\275=\343\016=v\366\210\274\206\305Q\276\346\325\374= Z\202\274\037V\n=.PA=\260\203\325\275\211R2=\313Q\346<\206N\306\275\372??=\333_9>\226\247\r\276\223\320\021\273j\261\311=\205\206\233=\342(\212\275\371\241\023=\306\376\251=\207\277\005=\026\030\255=R\314Q=\262\276k=\217g\374\274F0\000\276\303b\202\275V\202s>\360\333\222;\253\262\211\273#^K>\204f\032\276\350\321\342=5\022\372=\345\257\034=\005\2172\276\247c:=e\231\216=\252B\037\275\327\222\313\275\nI\322=\361d\227\275HQ\014=\206H\014\276g\202\240<2j-=\006\246\234\275\"\320%\2751\023K>\312M6\2721@\370<\322kk=P\014U\275\322\206\006>,\221N=\330\343\311<|H\315\275\367\343\343<<\2749>\313\356\315=\026\000\277<\374\233\022\276\'\327\255\274\261m\344;\025\271R\275\373\346\263\275\224\372\265=&xJ=\337\003\001\276U~\337=\255\240/\274\224I\000\275v\264$\274\310\313L=a\200\224\274y\204\306\275a-\304\275\357\306(=@\000\305<\3415\321<\351\361\252=\364\310\376;\361\210\376<\221\323*>\270\002\311\275e\237T<\363\372\206=J\222*=\360D\025=F\213\314\275RL\206=\364\270\300=\334\301j>\241bd=>\3271;\372\020D=v\244\r=\255\016(>I>\220\275k\223\002\275\234n\226=\324\036\026>\375\262(\275\212\031\331<,\002\271\273vl\305=`J\221\2757\030\003>\202\t\355\275\212P\231\275,\375\257\275?{\300<a,k=\314e\201\274h\222\001\275\345\357\016\276D\202T\275\375\002\r\276\2108\276=\205FZ\275\361\266\305\275\217\227D<\366\254\232=\363\2275<\350\320\262=~\026\037>\302d\244=I]\253;Z\004\376\274\376g\201\275\366\305)=K<\231=\313\036\206\276\272\322W=\303\2563\275\301\336z\275C\255\001\274\247\301X<V\"\266\275\020\373j\275?\213\211\274\202\315\026\276z\314\000>\'\026\216=\004#\252<f\n]\273\304\261\255\275z\355\216=\017\017\340\275\331\310\271=\032\320=>\313\316\214\273\374\355\216=\017\020\326=\001\256\360=\352\036\254<\204]X=0\341p\2752B\004\276F\360I\275\3506\353\275\202\220\335\2745\200\321\275\307\017\337<%\305/\275\232}O\276,m<=t\036\314\275\'h\314<^1\017\275\324\3420>\303\3508\2763\357\252=\340G\212\275\317\267\223<ZQ7\276\321\363\214\274\343o);\207\252\037\276i\264J\276@\226^=\223x\367\274\204^\n\275\247U\">\351\242\254=\275\326\006\275!d+=\332\222\354<\275\256\234\2758l\372\275\035h.>\275v>=1\032\347<@\262\033\275\013\211\233\274S\244~<\257\364@\274\353J\254=\242\360\246=\260\304P\275\030\275\274\275\264\311\356=\202\217r=\226\213M=\035y\351;\225\342\221\275%\310\014=\3545\373=\333\2504\273OP&\275\375<-\276\325Q\320=\351uI>\0171\200\275\'_\351\275\224J\315<\217#\254=\267\273\240<I\237\224;\004\003\346=8\027!\274$\350\017\275\317\276\251\275\215\030\221=\262=\227=\260\211h\274\010\033\257=KyD=\351\255\336\2743h\271;\217\242\027=eLz=\025U\017\275\264\344/\275\240\330\214\275T\036\001\274\360\203\213\274\227zR>\027n\241\275`#.=v5k=Yu\344=an\272=\223\307\357=\205G\355\275\017\263|\274(2\243\274\331\206\207\275\033\263\006\276\020z\201\275\350\266\213<\374G\277=\345\365\227<V5\305\275\372\337w\275\260X\035\275\214\306\350<zQ\322\275\366\3122\276\374\372\t:\230g\366\274\311\325\036\275\335\221:=\223\014F\274\214\205\276=\301\026\337=\311\007\026=\270\225\023>k\350\363\275\250H\256=\002~\320\274\330\010\346\275r\367\222<\276\215\200\275\262\346\037>\233\2027\275\034\214\367;\330\223\333;\030\363a<\353\003\353\2757\246\232\275\366/\255=\310JS\275E\007\374\275&6\354\271\020\0142\275$\200\r\276\002\314D\274\000\346\210<\360_\251=\201\031\240=W\213A\275\344a\220=\034J\352;\350\2075=\363\256\300\275\1774\027>\021\243\241:\016\375\245=0\3724\276@7\016\275&h\001\276,6\347=\241#2>\265\266->\226\220\276\275\206s\230\275\243\'K>\265]\003\273\t\354\031=c\250\227=\032\370\333=\304\252j\274|\342\341\275@v\311\274\325\212><\324\326\301\275Y\354%\276h\372\335\267\241\276;=\312\325w\273x\2416\274\241T\025\276%+C\276!\372\263=\330R\346\274\267\326\030\276<_\035\276\216\t\304\275\034\323\240\275\017\320\025\274\205\r\357=\244S \275X\036\271\275\263W2=\022\013\32398i!=E\345\315=Q\265\257==\007\312\274\023\271\223=\322\250\177\276\216\212\217=\311F\317<{\001n\274-\327a\275\250\363\211\275]v6\272\240\026\206\273\313\026n\275\245\356;=Q\314&>\304\217\262\275\177T\002=\241k\n\276w\257==)\307\030\276\025pd\275\307\203\027\276\205k)=g\211\303<\357\332E\274ew8\274e\337\374;b\215\226\275\201\367\330<\247P\r=\250g\224=\224h&\275\2606\361=\241g->\2063\203\275\007\t\252=.|\222\275\326\200\364=\026z\265\2754\266\306<\215\212\374\273\263\244\330\275\367\223-\276o\250\277\273\376\027\250\273|\330\003\276\371v\302<\2122\276=\320\3709\275\330\366&\275\234\347y=\356(\237=\260\001s\275\327\305l\275\346\375z=|\222\240\273\352\217!\275|\213\027\275\033\222\314\275\316&\350<\340\311\240\275\357\036\303=\332\002\215=\036y\304=\367\010\351<\r\306\250;\314\360\017> s!\275\242\317\350\274\037\305\213=\273\242\232\274\316\024/=\307\033\344=\205\362\005>9v\024\276\231\271\261=\3412\207\274\276\240\201\275\'\327\271=%\206`\275\250\247A=e(\300\274w3\306\275\201\017\337=\371M\226\2757\327J\276H\302\265\274E\277\273\275\324\351\263=\010\372\215\275\2274\256=\211\014\316\272\232\317\216\274=\343\307\274_h\247\274\037g\326=\252\271d\276v\366,\275\267i\376:\025\311\336\274\265\233\264=1\210\266\274\332I\221>\243\376\021>\264\200R>Yc\276<\221Y\222\275\302Q\t\276\016\010\356\274\n\277\010\276H\310\317\275B\216\260=\201\010\370\274\327\226N\274\250\005\373<+*\231=)\021\273\274\224\360\314\275?\266\260<\220\310x\274\235\\\r\276\032\037\007\275V\021(<!W:\2753\247\017\275\245\334\347=\277\364\260\2759z\016\276ah\233\275\322\366\205\275\340\341D=\277\216\r\276-\254\215=kN\220\274\374\223\n\276\305\272r\275\313\245t=k\016\030>\217\023\312=xG\213=\374\036\277\275\016\326\265<\240\252^\275W\211\236\275\227Y\003<u4\220\275>\002z\275\300\013\233<\306\030\236\274\366m\267\274\317\344\031>\030}\221=F\223\014>Q6\257=\0206\305=#K\245<^\024\345\275=\220\247:\312\334\032\276ZS6=\014T\243\274&\032\350\275\366\260\'\27455\215\275\374\"\264=\275D\327\274vm\241\274\343\255\001\276% \233\274|\361\331=\320\266\341\275\227t\351\275N\371\230\274\270\216u\273Z1\370;\3768p\274=\341\245\273\373\265\211=\352\005\272\275\023d\321\274\375\003\350<\372\267\311=G4&<4\272\236=\346\016n\274\301_\273\275\276`\177\275>~\021\276e\316\257=\361\312Z\275\216Q\322;)\236\273=\3430\223<\006J\221<\213\364\004\276\275U\033=\034\356\001\276rT\304=\026K\032>\265\254\224\2752A\235\275\253\304\303\275[\325\202\275=<\311=\336\275\032\276\332N\237\275\373\235\246\273L\243Z\275\235\310I\276W\230\355;Gv\333\275\337]5=h\302N\276\274\357\032\2759\022\023>$\0048=cx\246\275\321b\322\2750\360\031> \nt=\036p\256\274DZ\251<\310\350\014\276S\363\004=\312\254U\275~gv\275\211\261\222=ev&\274\212k(\275\301\362\212\275\036`\312\275D\273~\275G\035\265=\315\244$>\254\237\214=\377\024\203\275$\253;\276Vs\010\276\275\210\355\274\253gk\2753m\212<\331@O<\274\241\033>\377DT\276\316\365\323\274\277E\233<k\316@\275?\261\350\275\211\270\264\275+\306O=\341z$<\275d\241=\240*\312\273\217\314$>v\230\205<Nh\364<\340.\366\272\016\232K<\346P?\275\221\321\024>r\335I\275\371iL>{\315\023\276\013e\202=,\310\325=\035f\223\275\340\017x\275\334\362`<m\213\314\274\254y\021>\347\007\002\275:\242W=\031l\200\275\362\322\275<\370\0354\276\035b>=\235\252\305=\241\310\035\274Nc\002>6\tL\275\'m\272=\021%|\275\327\345\016\276\216\362\230\275Z\003\255\2752\246N\275\311\270\013>2t3>HR#=g_\006<\235\000\004\275\353\317\302=\026\204\322=\2067\235\275\r$k\275oT\002>\213\223\312=\202@\337<\244n\036<\334\0216=\205\020\301:\265\035\021\275\272\0134>\254\235\270\275\311\217\242=\320\300\256<\222\233\240\275\251\345\335\272\346\245\013>\204\225\023\276\251\310\353\2751\245\030\276\':x=v\270\350\275\201\035\313\275\251j\021\274\252\237\206=\254\371\007>\323\253)=\335\251\216\275Z\210\030<\017\345\026\275=<\205=\232v\r>\212\353\021><^\343\275\231\215&\274\260\010=\275\270\032+\276U\200\027=$\341.=\023\307U\275@\261p\275\333:\020=i`\331<l\360\037>#\206\300<\316\204\244\275qo\314<0)\021=\274\002\357\275\225C)=D\2573\273\347H\316<\243\276\344=s\033\233=\216\032\023\275\007.\005>w\337\351<\315+\266=\327S\000<g\033\007\276\2721w:\223\316\227<*\2501=\323L\021\276y\342\360=\246\000\274\274e\255\226\275\373#\225=W+\375<\225\372\036\276\214\223$=\022\237#\275&&\273<YIS\275\357\001s=\032\0022=\211\351\305<g\220\025\275^\312\224=\361#\236;\215\003\245>\223]2\275\033\247|\274\300\245 \275{l7\2769[\274\275\024\373\003>\340\016\315\275\035\030U\274W!\371=\356\377\023\276\007}\022\275@\2009\275\301\203\320=\357\300D\275\031\376\230\275y\322\t\276\376f\244<\353\'\324<\331\023F;\255\000N=9/~\275\007\2274>\005\217\327\273\245s\240\275\216\260\352\272\\\006<\275j\007\323<M(\216<+\365+\275\351\312\260<\206.\272\275\314\214\037>\3640K\272U\246\202=\235\327\216<z\345\274\275\331s\024>\203/\007\276\230\275,\276\274\235\205=W(\021<\374\211\247=>\306K>GS\343\275^7\024=\343\030\006\276>\337h<\310\245\353=\276\021_<\227\201\341\274c\315l=\257\"\221<\362\252\211<\024\212\n\275\003\007\311\275\\\255\312\275O\317\\\276\224\377r=\231\226|\274\370\030\361\275K\306~\275g\373:>\322\337=\272\302\017\257\274K\003\201=\222\370\014>$\210l\275\026\210\242\275\3613/<\355gi<m\242\026>\225\236\276=\313\364\206\275\310s\236\274\016\216%=Q\031\001\275j\214\002\275}|\225=Q]k=B!\007\275\374,\375\275\375<\217=\025\246\245<\014\331\332=\223E\254</\331\267=A\254q<I\255\241=A\330\\=e1P\275/p\013\276\347s\254=s\324\025=\242Q\333\271_\327y=\210\323\333\275\260L\360=;\235\366<d\375\252=\3748Z>\0100\310<[\261\346;\357\237\020>\346\256\210=\365}\355<\207\373\3208\323\020/\275q?1=\034-\005=\\T\">\354\025-=\360|\303\275\t\306\246\274X\363Z<\334\026\002>\264\273\r\275`\207\327\274R\231B\275\241\274\031\273[\027\206\274p\355\253\273\222!1>\214_\340\275\300k[>P\230w\274>Z\301\275\026[L\275!\320\303\274T\260\027=\177<\304<\357mB\276t\263\246\275\243\200\352=\025\234\"=Q\001\251<O\242\032<\014,\277\275\031(\033>!\020N>_|\\<\271\014\255\275\034TC\2754\241\037=\350cM=\361\354\246\275\216\231\001=d\010\006\276B\204\031\275u\235\207\275w\322s\275\324W\356=\275\270\025\276\317\371\n>\316\227$\275\377}-\274\032[T\275&\311\312=\006Gh\275NqZ=\267\272\263<\272\340\'>\023\205\313\272\356z\301=\353\352\000>\251\",\274Y\247 >\313\270\301\275Ow\326=S\024&\275n\273\242\275\221J\r\275\267\240\017=BeI\274\254\336\344:\206\342\326=D\004\317\274H\242\036=\270\n\243=\262\371\330=\256t\362\275\"\014\335=C\033\275\275N+\223\275\303\333\275\275\2736\310\275\347\325\017\275}M\367\275\330;\201\275\222h\320=Z\331\307\275U;\214=\243\022\257\2750\212\306=\300\211\007>\302:\230=\272\r\254<\273\320\233=k\3668\276&?\200:\034\223\304=0\336\334\275]*\276\275a\274\036=\345b\223=@\354\325\275\312\326\017>\"R\3628\021\226a\275s\247\330=\026\364~\275\376~\036>%\203\212\275d\301\t>\332L\307\272\227\210\230<\305\366\244=\031\"\226\273\200\023^\274/\326\023=m\275b>\351\225\273=r\374_>\r\303@=a\260\204\2742S\340\275\313\343\021\2769\230M\275\371\'\335\273\213\325\210<\023\034I\275\021\\\267=\335\234I\275\256`\254\275\203\354 \276\357\336\000=\235\316?\274\363\317\242\275\302\311\310\274\355\243\204\275T^\241=t\211|<(\236\350\274\000\213\275;\340\267\264=N\225\330=\010\'-;{\\\022=\201\313\205\274\215!\275=\247p\320\275\220\002\264=\244D\362\275(:\227\275\310\375\306=\222\315.=v\365\222=\377\006\020>\231M\t\276f\017s\2752\302\310\274\010\305\320<\3567\204=\266\224(\274\241w\265\275\245\265\212\275(J\013\276\3129\021=u\246\255=\237\245\370=Xk\233\275\204\304[=k\313*\274\317Rm\2749\250L>\302\323\320\275\272\355\236\274/\251\267\275\261\213\344\275\270\266\323=\366J\247:m\224W\274\257y\317<k\255\211\275`!\330\274\364\331\252=\324\274\372<\013\360\322=\032]\027\275!\356#\275\205S=\275l\006O\275;h\207<v\301\225\275\276\371\2748\345;\247\275S1;\275JlN>\260e\216>-^P\275Kb\366\275\032?2:\371\003\020<\204n1=\326\336\375<\245!\307<\010\231\257\273.T\307\275Z\371\230\275\266\254\002\276\257H\241=\307N\371\274\023\002\016\275\221\222T\274\235\310\375;U\372\255\275\243\366w\275\276\333\272<F\\U>\240Z\000\276\205\260)\275\352\223\221\275T\202\275\275\343h\014=c\376\256<a\026>=\254\334R\2757p\371=\267\310\312;\336\243J=\251\306\324<\026N!=c\227\202\274H\274u= \330\266=\370\305\216\275a\353\343<s1\235\275\375+\320\275#%-=\371\017\341\275\234\3314\275\003\333\017<\207`V=\217l\242\275\275\240\220\2736\312\242=\234\007\330\275$\355\211\275\342\323\376\275\371\217\255=_\033\350\275\360\337\005=\370\370\345<0P\227\274Wr*\275\275\227\211<\307\311\215\275\274\330H<\255\243\217<\324lz\2753\212\255=\202_\271\275\t\366\213<\260\205e\275\330\016\200=\024\256\025>p\001\221\274\"Up\275\261\334\377=\005;\214\275\334P\215\275z\220\030>\213\310\265\274\035\361\305\2746\265\250\275\273e\257=\033\312\223=\3349:=l\352\266=\363\335\264\275\276\274\013\276\365\254\t\276\221L\023=:`\343=-\344\025=\372\252`>\340\010\352<FG\024=\273\037\302=r(\n>\025\"V=;\0049>\006\223\267:\315%F\275]\276\254\275\2675\217=\205F\244<\200\351B\275\236J\363=\355O<\274\2350\021>]\030H\276ag\277\274@\261\245=\234\367\373<\233\231\271<\317\312j=j\023%=az\332\275[=\277=[yb=\370~\363\275Z\036\305\275\303\274\224\276W\346\375=a\303,;|r\303\275\264D\025\276Mx\024>\370N5\276#\n\005\276\262/\025>c\347\342\275\276\177\347\274\217\004\363=\314;h=\202#\217\274\037\207\353\274\326/^=\034\240\357\275\313\363\233=b\226T\274\201\332\237\275\323\374\r\275\244\360\"\275\206\375\023\275\246`\372\274m\261\277\274ePb=\312G\261=\367y\374\275\270\321\354\274\311\324V>\211\237r=7?\316=\3551`\275O@(>gS\033\276/\220\002>\030\333\372\275\223\373Y=\005/\236\276\267\247\337\275\252\374\226=w-\215<\374\250/\276\356\033B=\223\317\341\275m|\307=\037\202t\276h\350\243\275\312\277\034\275\336\345\320<\245\253\317\274\004\343W\2756\323\225=\025\245\215\274\037\t\354\275\022\256\267\274@\017\352=gq\376=<&\233\275\010-\006\276s2e=\271\214y\274\030G\252\274\334Z$>\n\340.=\037\262\000:\244)\306\274C>\030\273\355K{\275a5\020;\356\225!\275\243%K<\037Q\275\275\002.#=\223q\230\273E\355\260=G\022\037<\037lW\274\261\215\212\275\212\242\347=\276\2408<\274B\020>\245H7\276*\360\301\275\002\3106\275tg\225;\025\004+\275l\242\304\274\346\r\271=\337\210\004\275t\017\275<\224\030$>\217\315\033\276n\026\203=\307\017/=\005\317 =\">K\274^\335\373<\373\372\032>\245\257q\275\266|\362\275,\245\351\274\037\243\201\275\032\246\363\275b\341?\275|\322S=\344>\354=&i\254\2755bO=\031\'\013=v,\331\275S\004\004=S7\360:\240\034\273<\203\013I=\034\222\263=\024N\262\273n\027\210\275\tp\307=\020\007\354\274z09>\254<\270\275#\367P<\004\353O\275\323\240j=\330\334\007\276\r\305\316<{\341\367\274DPf=c\370\251\275)\231\341\275\223K\000>\000=\304\275E\202j=)e\026=\252\317[\275L\332\352\274p\034\374\2759f\221\275\346C\332=_Z^=\202\207\243\274-\375=\276\253\007\004=\274/\244\274\263\017\001=\213\243x>%\246\245\275Aq)\276\277\313\204\275\031\200\213\275/$\250\275\326\317\232<\272\216\347;\032\037\331=\2307\020=\323\223\002\276\243\3532;\201\321\362\275@\275\226\275\301\245\231=Sp\000\276p|\220<\003\306\254\274\037\367p<\203\001\217=\307\232\201<\001r\354\275\362U\337\274\242\035\003\276\337\0136\274(V\003=6k\264\275#!\201\274\264\257\001>\331I\345\274a\306\360=\342\2719=F\305\313=\250\342\237<\250\\&\275\221\177K\274d\352\306\274\305\273\266\274T\262\215\273=\247{;\220\026_\275rC\317\275\3309>>\3001\262\274^S\345\275(\036B<,W\350<\263*\277=\2716\016\275\340%(\274&\026;\275>k\001\276Y[\256=O\177\257=\032q\256=\r$(=g\273\005=\025;\364\275}\034k\275\244\264\257\274\372\320\251=\227\325\355=\253\262:\276\317\216g=y\237U>4\330.=E\027\005\276-\300\321=\331\034\205=\330o\005>[\016\223=sP~=;\353\215\275\027\214\027=Q\265\013\275M\344\007;%1@=\007\230\204=\305\212\376\274\271\317\202\272\303\375\305\275.#\302\275\3044\243\275}\324\371=\n\363\223\276Ys\243\274\200\213><\234\037q=\251\272\352\274\n_s\276\021,\321=)q\231=\315\203!>\337;\242<\001\033?=\350\204\022\276\323\252I;i\213\330;2r\212\275\300L?\274\354\325\177\275\223\321!\276\013\223\211\274\226\251\005\275\206l\036=\374\003c;|\2342<>\262\325=D\317\330=\270\0134=\344Vd=?\212\014\276\263\037\020\275\244\313\312\275C\027W=\266\341\223=\037Y\307\275\241\274\307\274\'\023\001>\261\000d=0k\240\275\202@\233<7\336\245<!\267n<\376\024\212=\352\003\361\273gg\261\2752\266\021\275[\301\025\274\021\303\n\275 \023\333<\375\216\307\274B\257\205<O3\203\274\276\013b\275\271\333\376\275:\017!<\242\271\'\276\342\351+\275\254m\211\275He\356;\275\343\306\275W\0353=8]\274\275\257\033e=++=\274\234\335!={\327\253\274wo\336\274\310\230\337:\2778C\273^\375F\276\257=n\275l\2650\275u\213\317\275V\363\340\275\304\344\251\275q\271\274\273\342\375\214\275\013\325\203=\002\375\371<\367q\340;\025Q\237\275\006ok=W{\313\275D5\254=P>\261=\014\356e\275lE\323\275PP\243\274I\335\014>)\232]>\320d\304\275dQ\327<bS\'\275\277\362\307\275Eg^>\315\357_\275W\342\272<\364D\373\274\031\"\177=*&\341=\364\335\330\275\224\331\226\272\261\001\325\273\366\306\014\276\364\257\321=\3110\016\276\365\017t\275\204\311\215\274\377\266\215=\266\0311>C\353\330\274\244\033\361\275\373\2316=\002C\241=[v\226=\362\351D\275\205\200\013>\356S\212\275S\262\375\273my4=\317e\362<\265A8>\003\307\000\275X\337\254\275\206\247\\\274u\204\247\275\301\037\302\274\226  >\355\247\030>e%\350<Y\262\217=|\236\032\276q\367a\274h5\343=E\001\034\275\017\340\260\27331\266=b\234\364\274\3602\267=\230-*\275\316aw\274\215c2>\2030\326\275\273\302\036\275\\\243\337=.\273\341\275\212^s\275hzO>\303\216\356\274\321\301W\275\376\021\210\273R\346\357=\303\014\\\275\374\232q>y\303\261=\366S;=\n}h\275\020\353\270=\\?\234=KN\321\275\316\370(=U3\376<\350an>\026\373\201=\261IB\274W&B\275\250\214\366\275\271I\205=^\016}\275\010W\340=4\036\274=\245`\343\273\222+\205=\233\274\220\275\377,\251<\003\224\024\275\312It\275b\225\202\274\234H\340=\356\234\202\275\216X\256\274\216\216\216\275=\304}\275!\260\247\274\333~\340\275\3362\027\276s\356\306\275\030\347B\2750\325\344=\304!\226;\212\240*=\304\365\272=s\215\000\275\244\217\271\275\337xz=$~\352\275\\F.\2735?\223\275=I\206=|\247\220=8\377\357\275\032}\006\276\'\205Z\275\270\322\345=\307m\217\273Tk2\274p\370u>\210%\001<\340\023\220=|\344\323<\004\302\232=\035\261\004\274\024\257\304\275,\346(=\377@\216\275\203\210\201\273r\234\027=8\035\373<\323\321*=\002\031A\275\3130\004<\307<\001=w\323m\274\210\022\312=\213\374\325\275\0065P\275G\341><\005$I\276JT\230;\371\035\014=\227?5>\001\322\366\275g\247\244;i\214]<\337\264\336\275h\366\323=8\340\003\275\210BT<VI\273\275\372\007\003\276#`6>\270\220\205\275\026\331\314\275>\033~\274x\206*\275\315\t\240\272\313\231\034=\304\016\230\275\240B\272<#\204o=V\323\374\275\315\365\210>\020S-=m\365v=\0010\215=\007R\225<\333%\332=U\246\224\275\221^\233\275f4\203<\220\250\333\274\210\375\300<Vb\006\275\310I\277\275k\2778\274>\334\t<ol\373\275W2\004>\017\267<>\214\035N>;\325\365=\224\353*>\205\367\022>J\374\226\275I%C\275\240\244\007\276]GX=2\245\002\275o\316\337=\037\323\226\275\022\201;<}\217 \276\200\355\361\275#g\324:\0374\241;\355\374%>G\003\327\273\262\367\242\2748\257\354\274\024!\207=\225G2\274w<\363\273\332,\340\2748I#>\003\367\r\275\2440\375\275`/\371=7\2168\276\277\351\005\274g\177\033:\260z\244\275\264\034^\275\371/\252=\372\222]\276r\211V\275\307\303\310\273\206\230\277=\315\246\323=h\t\315\275\025\202\n>\020\257\273\275\334\243\224<5K\212\275\'\334\307<\035R\312\275\307\007\366<A\261\234\275\300\200[<[\017;>3\3324\272v\004\347=\333;Z=g0\353\275\036\370%>\033SY\2766L\225\275\227\000\025>V\263\305=\343\350\375\274I\036\234=D\301\221\274\024\023\250\275\022\227\256=nL\032\274\246\023\310=}\034\225=R\215\022\276\n\004\211\275-\377i=\3057\271\275\222\2228\2726_\241\275\355\274\206\275\363\316\356=b`a\276%\330Y\275\372f\343\274\315\237C\275\261~\"=|4\241<?\013\243=\314\265\301\275\211H\272\275 \310\026>+\247\227\274&u\346\274V$j=\025\010<=\375\177\3428\035J\345<\004?K\275\332&\017<\200I\024\276\220\t\241=\364\207K=\\\030\223\274\210\336\230\275A\340\205=\004\354\227<\3051K\275=\025K=\200\326\027\271V\340\013\272\251[\001\275UL\256\2754y\220=uy\237=A\263\362<\331\357/>k!\"=\t\013g=\310\234.>\002\2417\275\251\334J;\345m\306=\377q@\275\352\356\304;\177\234\\\275\305\321\340<\211\216\247\275\002\026\374=e\177f\275N\327\024=\3573\277\274\n\206\026>S\234\310<Y\301\215\275fU+=\256\220\306=sSc;\271\272\365<6U\031\275\245\232\033>T\t\310=\2328\023>\277P\321\274\204#E\275\355\212\023\275\r\2731<\001\013g=\216\364\361;J\227\200=eX\337=Xv#\276&%j=\'\277\000\276\277\271\037\276]\275\005=\210\300\323=T\357\372\275\231a\375\275X\376f=\022\206\006\275\310LH\276\244\004R\275\207e\3129#\214\205\274^\225\263=\003\304,>\345U\000\276 ,A\273\031@\023>\032y*=\337\327\340<\230\343\311=\030u\253=\010\225\245=\241p<\274\014\\\361\275s\231\217=L\004y\275\377\220\267;\257s\023\275\231~\367=4\023\267<\241`F<\371&\000\276\202\260\">*\235*\275X\253\032\275\347vk=\272\264\336\275\2659g\275H\007\344\275w\372J\276\225\310\036<Kg\025\273\027\334g\275k\311\234<\250>\363=Jy\007>3\345{\275Kj\361<5o\267\274\021\362\223\275\203l\352<\270\272\377\275f\336\337<j\325{\276\301\243\202=\226\264\373\275\255\3258>\302\315\255\275\023\247\320\274\030\203\350;\004\2560=\032%\222\275\016\365\177\273\240\3072>9\342\226;\2731K>\263\342\271\275\337\030[\275\246\222/>\200.)\275\010\321\t\276\036\275\n\274\332\036\367=7\326\363<xh\260=\244\347\305\273\343[U=\351\235\265\275N2\316\275\023\245R<A\030\270=\271\261\013\276\275\223\306=4h\374<\320\334=\275\342\214.<\371\016\312\274!*\032\275X\305\014\275\300\206\311\271\346r\245=n\205\021;sy\334=\212\237#\274*\254>\275wJ\361=\317\347\010>,\333P=I\206\325\275\257eD\276@\207r<\375\315/\275\265\254\345<\0370\255=\334\377q\274\3364\220<\033\246L\274\305\373\253=\275)\313\275\270\373Y=f\265C\275--\260<\235|\241\275\234\003\200=T\026\243\275\326\313\004>Ei\243\274\275\375\361\275\265\337\330<ji>\275j>\242\274\213\007e\275h\210\032=4\224\225\275,p3\274\266\276\245<M\317\245\275\310|\007\276\364\\\352=s\007\306\273\221\000\002>\306\006=>3\324\304\275\370\206\244\275\203`\316\275U\3230>f\234(\275\311\027\017</[A\275\317\250\030\275\302\341\267;\312\374\245=\320\323\347;/\200\203=N\n\352;)W\010\276P-\024>~\274%\275\320\272\203\274\222\374\332\275Z\374\030\275_\204F\276\277\375C\275w\362\201\274\002%\262\274u\245\257<T\321\036<\327\256F\275\002\371(\275K\266V\276\005\303)\275;\326b\275\001\262\032>\311i\343\274\320U\315\273\025}\227=\000\264I\276\355\221\222=\005\226\025=\227dB>{)N=v\006\211=r\013+\275\255\301\212=hp\303\275\372=\222=\216\371\316\274\323#\324\275c\231\341\275\310\217\204=j\246#>\241\325\246\275\0251B\275rs\237\274\213=\236\274\034\245m=N\347\273\275kdP=\323\264\361=\206R@<\346\005I=\340\021\302\272N\313\221\274\010T\272\273&\206\033\275H\244\300\275\271`l<\201\202:\276<\361\007>\301r\036=Gk\265=\332L\024\274]\216\270<\257\rF=\325+\273<\264\246\271\275\026x\010\276\266\267\007=\227)\320\275\234z\211=\274\243\021\275p\373\277=\241\376\212\275\324I#>\362\222)>W\\Y<\224\250\314=\336R\336\273\302\3779\276B\276\227<\2076`<h\327\322\275\362\242?\275H\350\231\274V\220\244=%b\367=P\"\263=\350%\364=\223\317\251\275\327v\322\275\370 n\273$7D=Z\177\346=\240\354\232=\242qe\275\3456\354\2745\265\210\273\303G\221\275\221\225\006>\245\314c=\027\371\200>\220\001<\275\304\241\032\275\237pJ\276\317\355\032<\331\252p<\273s\007=\0378\264\274\344\216\367=xe\n\276\260\2517\275\025\214\344=\276\233\216;\005o\203\275\352\227\004\276\003\310\003>\261\320\023>\322\210\365\275\320 v=\013\376\226\275Qn\327=3\274 \2749u(=v-m=\341\3012\275\253J\203<\354.\322=\t\313\277=\276\010\215<kf\317<\002\301\354\275\2649\205\274\265a}\275\224R\243\275\224\211\001>\032\305\256\275\242\267F>\rnt=\211\025\'>\225b\010\276\305g\236=V\030\222\275\245\212\266\275&\031==5(\251\275\361\034!>.\227\007<[\315\r\275[\037%\276eb\023>\010D\200\275\371\361Z\275\344\241\372\274\204&2>/@\027=\334[\201;\220\304\014\276g\227\236\275T\370!>\332\362x\271\"{h\275#\270\206<h\235\356\275\267a\237\275f.6=\357\220\251\2756\000\256=E+\230\275\277z\010>\301\375\252=:\207\312\275\366f\327=lT\244\275\365\271\004\276\241\207\361<0$\330\275)\342\377\273f2\213=M;\256\274m\202\276\275\3763@\276\367w\212=\n5\207\275\266\311\314\275*~F=\244~\317<,31\275\224V\200>I#\337<b\317M=\r\263\357\273)O\036>\3618,\273+\322P=m]\353\275G\255\003\276\356|\223<\302\017y\272[\376\210>\177P\257\272\345\254p\275\231\020\227=zr\034\274\'x\031\275\375l\274;\3369O=v\331\200\274\346\022L\275\362\"t=\024\006\271=\036\276\215\275\263\010\006\275\340\361L=\023\003\371\274\244\000\217<G\020a\273,\344!\276\205\224Y\275D\251\217\274\356f\">\205\010`\275\333x\373\274C\206\201<[\264\030\273\341j\240=H\337\260=\325\221\344=<I\207<\221\277\353<\rK\310\275\352\ry=\347d\311=\243I\267\275\025\261\246=g\037\207<\356\031\322<\207g\002\275N\206\013=1\206\216\273i\013\231\275 w(\276\372(\225;\363&n<\314\366\250\275\204\366\"\276q\321\354=iw\243;\232\374\315;\017\331\341<\342\313\315=\273\2209\275\200\027\276\275J\334<\275\267sL\2739]s=\276\260\270\274{\374\375\275\202>G=\333*\t=\327\025\314=I\023\250=\025\'\255\273\177\307\027\275M\234\235\275Y\2606\275\032,q<\222\217\n>\334B\306\274\035|3\275\r\277\332\275uu\304\275\207\006\021>cE\007>\033\265\033\276\3754\030=5\"\221<\034\331\001\276\254$\013<\371\230\031=d\362\030< \306\000\276\n\334\341<\247f\237=K3X\275L\315\030\275\350\274\250=\2072\313\274\366C\217=\217}\336=Li\013\276\272w\345\275\237\355S>\373M\002>G\371\244\275\366\367\035:\220\222\204:\244\256]\275\232\332\250\275sxw\275/I\002\275\276$\212=\264\327\331\275\312\364*>\343S[<\240`c=\262N\314=7\230\025>\204=?>\375M\230\275\022\272\245\274@\314\341=\024\031\253:/i\375=\007D\037>\226\215\213>\002G\\\275\261\350\005>\255m\241=\321/\236\275\321!\226\275\337J.>\030\267\023<[\321i\275pkh=\377^\301\274\0222\345=\340#]\274\333\366\264\275y\211\266=\022$E<\302{\021\276\262\313\334<\261G\'\274\026g\374\275\350Q\235=n\311\317=\210\033A=\334H6\275)\230Q\275\253\241\327\275$f\254\275\322\355d\2746\226\366< \316\334=\332\356v<M\331\004\275\013\346Z=:\r\\\2753Jc\275\227\356\017>h\336H=)\036\364\275\2040\001\275\030E\307\275\0333Y=\254 \027;\335\320\256\275\233v{\273\376\301\274=tB\231\27478\375\274d3\253=8\327\001>OD\365\275\307L\324:\013\326D\275)P\272\274F\035\221\275\301\231\267=\202\214\003\276\261\236\356=\207]\027\276\202L^;\364\206\343=\217\030w=\203\352y\27553\222\275`\343\251=\016x\342\275\245\361U\275\253\036\031=\265!\003<W87>\236G\331\275~tz=+\276\235=\255\261\364<\023\010\251<\367\226!\276.b\034\276\354i\213<\213\377s=\335\331\364;3\233\337\275\013v\256=F0+=\202\252\026\276\256fr\275\262%\t=\242\016\261<\223\320\r\276q\251\017\276[+\223<\267}\013=\254$\n=&qQ\276\3339\340\275\263\253\340<k\267\">\245%\214<Pp&=\236\023l\274\236\224\003\276\'\243_=e\322\303=As\254=Rf\341=D\263\206=\n\301\305\275\324uC=n\021\243=Q\317\240\272^\031X>X\022\271=\235,E>}\273~=\017V\023\276>\004\230\274\312\373`\275\351\206>\275#/2\275\000\014\267=%0\365<\343\010P=bg\216<\341\310\234=\313\334\226=\374\342\022=\213\204\303=\037\273\272<\300\016\323;\276I\241\274\375V2\276\334cm=sE\352\274\261M\336;\005Y\t>\370u\373\274\301\217(=\367\357\204=\346\202:>Xv1\273\225\320\377\275\006\203\354\275\234\r\222\275\335X\220<RN<=\254\232`\276W\036\\\275\243Xm=\017\035k\273\211\031\227\275\265\324\227=\242\245\210=\202BB\275l\312v\274#\217\244\275\351\350p\275\201j\207=\036\317[\275\0360\025=E/\305\275\364e >\207\220q\275\032j\014=l\320\351=\301\005\"=\314\213\022\275\t\207\375\275&B\205\275\350\014\003<\224E{=\361\036\362<\034\234\360=\002\236\023>_\223\033;^Q\276=\335\246T\275 \275\214\274?9q=\322W\025:}\216.\274VU\232\275\252\340\310\275\236\275|>\226[W\273\302\"\234;\'\212\002<7\335\244\275\373\325\346<\022\256\350\273@\021\007>\250\274S\275\272\275\324\274\341\357\207\275u\361\342\275m\371X\275\356\r\341=wc\326=P\350\013=\371\\\213\275\314\371\254=\027KT>\303*\235>\273j\244\275#A\251\275\364M\300<\327=\312\275z\220I;\321\301(=\200\374\275\275pg\247<\3678s=\333\330\371=\31727\276\343\243%\2767c\035>@.m\275\317e\337\273\367A3=T\354(>\202\356o<\004\207\364;\r\371\004>\234\033e=B\236\201\273g\372\263\275\305W\211\274\035J\006\276\344\362\270=^\222\250=W\366\036\276\013\307\021>\213V\207\274\036\250\233\272\214\370\215\275X\370\374\275\211\244\241=\342\212x\275\257/\242\274\275\326\236=\326\205n=\001+\212=C\252\231=\355\351\365:\374q\037\275\307\362\305=.\037\000\275F\335\017=j\372\335\275\373K\357\274\356\273y\275g\212\345\275\270\034&<\341&\202\275\032\3525=M\206|=\205\007\303<|\222\310;\200P*\275\364\245\312=h\311V\274\311\372K\275_\037\241\275Q\324+\276\217\340>\275\330\207s=\370\327\200\275\277\322\330\275\363C\262\275\237\324*\276\214i\300\275\326\324\013\2764\007\016=\360\356\027>\352\372Q<\3667q=\236Z\327\273\237\346\257=\242\016\243=\177\002H\275\327ME\275x\2143\276f\356\221=\213G\"\276\013\231}=\232l\026\275c\013\024>\275\270\265<\230b\320<\366&\377=\025\016,=\224e\316\274\n)\340<\023\004\304=\222u\344\274`u\324=\234wP\274\330dc=\240\206\312<\003\013\004\276\334b\\\274\374\374r\276\001_\210\275\266\035t=\031\t\230\275mB\365\275\351\243y<\350\301\245;\031\311d\274,\275\244\274\313\264\034=h\006\247\275\024\364\r\275BY\253\274X(y=0|\217=p\241\005>\221Vq\275\206\365\310<[\345>\274Fx\210\274R\177\030<\214\026(=\023\233\024\275\232\"\017>\031\377_=\262\204y\274\327yv\2756\210G=\242\342\023\275\252{\351;\317\226\312=\311\253\007\276\321\355\320\273\260U\244<n-\021=R\272\345<{\266\334=\235*\247\274Ng\302=+,z\275\236\350\375\274\260o\010\276\355C\354\275+\365p=js\202=\016\013\2379]\025O>\342{R<\273!\365=!m\320</\316\357\275\303`\341<P\224\"\274\360\351a\275\206\211\315\273\312\214s=\344\274\003>\336\242s=\217\243\327\275\202\316>>u(\t=y\010\222;\3006\306\274\304\215\274<\206[\230\275\207\321\332\274\357p\261<g\226\333=\224\277\321=\035\243\372=s\025Q\275\245\317Z\275=\330)><\337\030>=\364\233\275\365\302F\275c\270\003\275=\323\033\275\341\007\023=\356s\025\276U\265\244=@\336\274=\"P\031=\257\271\023>\251\244\351=e\236\020\2768\212\031=#\364\036>\257\310\264<Y\270\025\2768\316i\275\231\3765==\323\255=\233\373\017>\267\031->\205\212^\275\272#\033>&\331\347\274\007\246\317\273\232\224\205=\346H\271<\250\230\001>\207\260\213=l\357\205<\004\365\205=\341e\037\276\332bI\275\244Y\265;\346`\243=\3009\362\275\232\354\320\275m\337H\275\304W\310\275\365\016\226\275\205|O\275qd\226<=\240\342=J\376\236=\210&\021=r\r&=*o\266=n\366\271=l+\037\276\014\272\275=?u\016\275\333\336\320=\316\257\r\273+\016%\276\004]\247\273\341\322\355=z\216\242=\032q7=\020&\337=\001\223_\275\260\244u\275\306\234\314=\226\314\033=\324`\037=\007\224B\276\030R\234=s\332`\274X#\327\275\264\3710\275\327\300\'\276\322\223\305\275\241\264\225=W\270\245:9\234f\275\244\345S\275\341\355\242\275I\005\373\272lO3\276G\2607\275\364\307\236\275\244fJ\275\037\210\224\276d\233M>\203\261\251<1\r5=\364\220\037\276\t\312\002<|\305\270=\261\026(\276\001\301e=Z\254\031<\352\363\324\274sQ<\276o\215\253=\000\213v=a\214m\274\221\372\216=\306\364\236\275/\337\310\275\344^&\276z\235\345=5 z<\201\212\241\275fP\000\274\235\323\013>\374\310\032\276Q\032\264\275\000L\272=W\273\271\273\342\326+>\236\214\000\274\255XG\275\277\023\250=x0\023\275\343-\237=++\020\275J\314\204\274\325\275\312\274\321\021\355=Q!@\275\036\251\233=Zh\005=\201U)<hE\242\275\202T\032\276\257\307\024\276\311 D>\340y\201<\202\177\032=\033\207\323\275\r\'\'<4j\035>K6B=\267\331\022\276\003\320\301=\377\243\034\275\247\023\302\275Ra\246<\320D\202\273\335t\204=\227\277\202=W\263;\275W\210X=\211\263\026\275\226\362\t\273C`\231=1\263 \275R\206\334\275\226\365\336\274\nW\240\272\017\334\220=\031\266f=r%\240=KF\033\276\276ws\276\342F\014\274\264\276\233<J\226F>\nC\267\275\231u\301\274\026Y\347\274\305\370\222\274v\271^\275\245\004\177\274\240x\037;O\274\013\2757\005\262=\345$U\274\340\000\257\274Y\312i\275\343~\354\275\204\340\007>\010\313\317=\000lU=\200go=5\347=<\221\214\215\275\367!\345=[\336f\275S4\026=\036\243\003=\213\273\341<\'\260\300=\230\300\t>\240P\032=\272\307\322\274G\233\373\272\206\003\324<Z#@>)\261Y;\003<\006\275%\276X=\326\030\341<\260E\006;\027\n\210\275\257q\336=70\016>f\314\370<(\021X<\335\021\216=\264{\027\275\'`?<\027\226\214<\342,\263;\374\262\317\275\006\342t\275r\317\320\275Lr\216\275"
      }
    }
  }
}
node {
  name: "lstm_3/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_3/recurrent_kernel/Assign"
  op: "Assign"
  input: "lstm_3/recurrent_kernel"
  input: "lstm_3/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_3/recurrent_kernel/read"
  op: "Identity"
  input: "lstm_3/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/recurrent_kernel"
      }
    }
  }
}
node {
  name: "lstm_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_3/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/concat"
  op: "ConcatV2"
  input: "lstm_3/Const"
  input: "lstm_3/Const_1"
  input: "lstm_3/Const_2"
  input: "lstm_3/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_3/bias/Assign"
  op: "Assign"
  input: "lstm_3/bias"
  input: "lstm_3/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_3/bias/read"
  op: "Identity"
  input: "lstm_3/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/bias"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice"
  op: "StridedSlice"
  input: "lstm_3/kernel/read"
  input: "lstm_3/strided_slice/stack"
  input: "lstm_3/strided_slice/stack_1"
  input: "lstm_3/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_1"
  op: "StridedSlice"
  input: "lstm_3/kernel/read"
  input: "lstm_3/strided_slice_1/stack"
  input: "lstm_3/strided_slice_1/stack_1"
  input: "lstm_3/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_2"
  op: "StridedSlice"
  input: "lstm_3/kernel/read"
  input: "lstm_3/strided_slice_2/stack"
  input: "lstm_3/strided_slice_2/stack_1"
  input: "lstm_3/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_3"
  op: "StridedSlice"
  input: "lstm_3/kernel/read"
  input: "lstm_3/strided_slice_3/stack"
  input: "lstm_3/strided_slice_3/stack_1"
  input: "lstm_3/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_4"
  op: "StridedSlice"
  input: "lstm_3/recurrent_kernel/read"
  input: "lstm_3/strided_slice_4/stack"
  input: "lstm_3/strided_slice_4/stack_1"
  input: "lstm_3/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_5"
  op: "StridedSlice"
  input: "lstm_3/recurrent_kernel/read"
  input: "lstm_3/strided_slice_5/stack"
  input: "lstm_3/strided_slice_5/stack_1"
  input: "lstm_3/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_6"
  op: "StridedSlice"
  input: "lstm_3/recurrent_kernel/read"
  input: "lstm_3/strided_slice_6/stack"
  input: "lstm_3/strided_slice_6/stack_1"
  input: "lstm_3/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_7"
  op: "StridedSlice"
  input: "lstm_3/recurrent_kernel/read"
  input: "lstm_3/strided_slice_7/stack"
  input: "lstm_3/strided_slice_7/stack_1"
  input: "lstm_3/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_8"
  op: "StridedSlice"
  input: "lstm_3/bias/read"
  input: "lstm_3/strided_slice_8/stack"
  input: "lstm_3/strided_slice_8/stack_1"
  input: "lstm_3/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_9"
  op: "StridedSlice"
  input: "lstm_3/bias/read"
  input: "lstm_3/strided_slice_9/stack"
  input: "lstm_3/strided_slice_9/stack_1"
  input: "lstm_3/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_10"
  op: "StridedSlice"
  input: "lstm_3/bias/read"
  input: "lstm_3/strided_slice_10/stack"
  input: "lstm_3/strided_slice_10/stack_1"
  input: "lstm_3/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_11"
  op: "StridedSlice"
  input: "lstm_3/bias/read"
  input: "lstm_3/strided_slice_11/stack"
  input: "lstm_3/strided_slice_11/stack_1"
  input: "lstm_3/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/zeros_like"
  op: "ZerosLike"
  input: "lstm_2/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/Sum"
  op: "Sum"
  input: "lstm_3/zeros_like"
  input: "lstm_3/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "lstm_3/ExpandDims"
  op: "ExpandDims"
  input: "lstm_3/Sum"
  input: "lstm_3/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/Tile"
  op: "Tile"
  input: "lstm_3/ExpandDims"
  input: "lstm_3/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/Tile_1/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/Tile_1"
  op: "Tile"
  input: "lstm_3/ExpandDims"
  input: "lstm_3/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/transpose"
  op: "Transpose"
  input: "lstm_2/transpose_1"
  input: "lstm_3/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/Shape"
  op: "Shape"
  input: "lstm_3/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/strided_slice_12/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_12/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_12/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_12"
  op: "StridedSlice"
  input: "lstm_3/Shape"
  input: "lstm_3/strided_slice_12/stack"
  input: "lstm_3/strided_slice_12/stack_1"
  input: "lstm_3/strided_slice_12/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_3/strided_slice_13/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_13/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_13/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_13"
  op: "StridedSlice"
  input: "lstm_3/transpose"
  input: "lstm_3/strided_slice_13/stack"
  input: "lstm_3/strided_slice_13/stack_1"
  input: "lstm_3/strided_slice_13/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_3/MatMul"
  op: "MatMul"
  input: "lstm_3/strided_slice_13"
  input: "lstm_3/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/MatMul_1"
  op: "MatMul"
  input: "lstm_3/strided_slice_13"
  input: "lstm_3/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/MatMul_2"
  op: "MatMul"
  input: "lstm_3/strided_slice_13"
  input: "lstm_3/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/MatMul_3"
  op: "MatMul"
  input: "lstm_3/strided_slice_13"
  input: "lstm_3/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/BiasAdd"
  op: "BiasAdd"
  input: "lstm_3/MatMul"
  input: "lstm_3/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_3/MatMul_1"
  input: "lstm_3/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_3/MatMul_2"
  input: "lstm_3/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_3/MatMul_3"
  input: "lstm_3/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/MatMul_4"
  op: "MatMul"
  input: "lstm_3/Tile"
  input: "lstm_3/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/add"
  op: "Add"
  input: "lstm_3/BiasAdd"
  input: "lstm_3/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_3/mul"
  op: "Mul"
  input: "lstm_3/mul/x"
  input: "lstm_3/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_3/add_1"
  op: "Add"
  input: "lstm_3/mul"
  input: "lstm_3/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_3/clip_by_value/Minimum"
  op: "Minimum"
  input: "lstm_3/add_1"
  input: "lstm_3/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/clip_by_value"
  op: "Maximum"
  input: "lstm_3/clip_by_value/Minimum"
  input: "lstm_3/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/MatMul_5"
  op: "MatMul"
  input: "lstm_3/Tile"
  input: "lstm_3/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/add_2"
  op: "Add"
  input: "lstm_3/BiasAdd_1"
  input: "lstm_3/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_3/mul_1"
  op: "Mul"
  input: "lstm_3/mul_1/x"
  input: "lstm_3/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_3/add_3"
  op: "Add"
  input: "lstm_3/mul_1"
  input: "lstm_3/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_3/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "lstm_3/add_3"
  input: "lstm_3/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/clip_by_value_1"
  op: "Maximum"
  input: "lstm_3/clip_by_value_1/Minimum"
  input: "lstm_3/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/mul_2"
  op: "Mul"
  input: "lstm_3/clip_by_value_1"
  input: "lstm_3/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/MatMul_6"
  op: "MatMul"
  input: "lstm_3/Tile"
  input: "lstm_3/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/add_4"
  op: "Add"
  input: "lstm_3/BiasAdd_2"
  input: "lstm_3/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/Tanh"
  op: "Tanh"
  input: "lstm_3/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/mul_3"
  op: "Mul"
  input: "lstm_3/clip_by_value"
  input: "lstm_3/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/add_5"
  op: "Add"
  input: "lstm_3/mul_2"
  input: "lstm_3/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/MatMul_7"
  op: "MatMul"
  input: "lstm_3/Tile"
  input: "lstm_3/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/add_6"
  op: "Add"
  input: "lstm_3/BiasAdd_3"
  input: "lstm_3/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/mul_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_3/mul_4"
  op: "Mul"
  input: "lstm_3/mul_4/x"
  input: "lstm_3/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_3/add_7"
  op: "Add"
  input: "lstm_3/mul_4"
  input: "lstm_3/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_3/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "lstm_3/add_7"
  input: "lstm_3/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/clip_by_value_2"
  op: "Maximum"
  input: "lstm_3/clip_by_value_2/Minimum"
  input: "lstm_3/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/Tanh_1"
  op: "Tanh"
  input: "lstm_3/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/mul_5"
  op: "Mul"
  input: "lstm_3/clip_by_value_2"
  input: "lstm_3/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/TensorArray"
  op: "TensorArrayV3"
  input: "lstm_3/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "lstm_3/TensorArray_1"
  op: "TensorArrayV3"
  input: "lstm_3/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "lstm_3/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "lstm_3/TensorArrayUnstack/Shape"
  input: "lstm_3/TensorArrayUnstack/strided_slice/stack"
  input: "lstm_3/TensorArrayUnstack/strided_slice/stack_1"
  input: "lstm_3/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/range"
  op: "Range"
  input: "lstm_3/TensorArrayUnstack/range/start"
  input: "lstm_3/TensorArrayUnstack/strided_slice"
  input: "lstm_3/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "lstm_3/TensorArray_1"
  input: "lstm_3/TensorArrayUnstack/range"
  input: "lstm_3/transpose"
  input: "lstm_3/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/transpose"
      }
    }
  }
}
node {
  name: "lstm_3/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/while/Enter"
  op: "Enter"
  input: "lstm_3/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/Enter_1"
  op: "Enter"
  input: "lstm_3/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/Enter_2"
  op: "Enter"
  input: "lstm_3/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/Enter_3"
  op: "Enter"
  input: "lstm_3/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/Merge"
  op: "Merge"
  input: "lstm_3/while/Enter"
  input: "lstm_3/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/while/Merge_1"
  op: "Merge"
  input: "lstm_3/while/Enter_1"
  input: "lstm_3/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Merge_2"
  op: "Merge"
  input: "lstm_3/while/Enter_2"
  input: "lstm_3/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Merge_3"
  op: "Merge"
  input: "lstm_3/while/Enter_3"
  input: "lstm_3/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Less"
  op: "Less"
  input: "lstm_3/while/Merge"
  input: "lstm_3/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/while/Less/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/LoopCond"
  op: "LoopCond"
  input: "lstm_3/while/Less"
}
node {
  name: "lstm_3/while/Switch"
  op: "Switch"
  input: "lstm_3/while/Merge"
  input: "lstm_3/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge"
      }
    }
  }
}
node {
  name: "lstm_3/while/Switch_1"
  op: "Switch"
  input: "lstm_3/while/Merge_1"
  input: "lstm_3/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_1"
      }
    }
  }
}
node {
  name: "lstm_3/while/Switch_2"
  op: "Switch"
  input: "lstm_3/while/Merge_2"
  input: "lstm_3/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_2"
      }
    }
  }
}
node {
  name: "lstm_3/while/Switch_3"
  op: "Switch"
  input: "lstm_3/while/Merge_3"
  input: "lstm_3/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_3"
      }
    }
  }
}
node {
  name: "lstm_3/while/Identity"
  op: "Identity"
  input: "lstm_3/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/while/Identity_1"
  op: "Identity"
  input: "lstm_3/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Identity_2"
  op: "Identity"
  input: "lstm_3/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Identity_3"
  op: "Identity"
  input: "lstm_3/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_3/while/TensorArrayReadV3/Enter"
  input: "lstm_3/while/Identity"
  input: "lstm_3/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "lstm_3/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/MatMul"
  op: "MatMul"
  input: "lstm_3/while/TensorArrayReadV3"
  input: "lstm_3/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/MatMul_1"
  op: "MatMul"
  input: "lstm_3/while/TensorArrayReadV3"
  input: "lstm_3/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul_1/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/MatMul_2"
  op: "MatMul"
  input: "lstm_3/while/TensorArrayReadV3"
  input: "lstm_3/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul_2/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/MatMul_3"
  op: "MatMul"
  input: "lstm_3/while/TensorArrayReadV3"
  input: "lstm_3/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul_3/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd"
  op: "BiasAdd"
  input: "lstm_3/while/MatMul"
  input: "lstm_3/while/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_3/while/MatMul_1"
  input: "lstm_3/while/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd_1/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_3/while/MatMul_2"
  input: "lstm_3/while/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd_2/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_3/while/MatMul_3"
  input: "lstm_3/while/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd_3/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/MatMul_4"
  op: "MatMul"
  input: "lstm_3/while/Identity_2"
  input: "lstm_3/while/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul_4/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/add"
  op: "Add"
  input: "lstm_3/while/BiasAdd"
  input: "lstm_3/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/mul/x"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_3/while/mul"
  op: "Mul"
  input: "lstm_3/while/mul/x"
  input: "lstm_3/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/add_1/y"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_3/while/add_1"
  op: "Add"
  input: "lstm_3/while/mul"
  input: "lstm_3/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Const"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/while/Const_1"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_3/while/clip_by_value/Minimum"
  op: "Minimum"
  input: "lstm_3/while/add_1"
  input: "lstm_3/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/clip_by_value"
  op: "Maximum"
  input: "lstm_3/while/clip_by_value/Minimum"
  input: "lstm_3/while/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/MatMul_5"
  op: "MatMul"
  input: "lstm_3/while/Identity_2"
  input: "lstm_3/while/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul_5/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/add_2"
  op: "Add"
  input: "lstm_3/while/BiasAdd_1"
  input: "lstm_3/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/mul_1/x"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_3/while/mul_1"
  op: "Mul"
  input: "lstm_3/while/mul_1/x"
  input: "lstm_3/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/add_3/y"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_3/while/add_3"
  op: "Add"
  input: "lstm_3/while/mul_1"
  input: "lstm_3/while/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Const_2"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/while/Const_3"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_3/while/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "lstm_3/while/add_3"
  input: "lstm_3/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/clip_by_value_1"
  op: "Maximum"
  input: "lstm_3/while/clip_by_value_1/Minimum"
  input: "lstm_3/while/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/mul_2"
  op: "Mul"
  input: "lstm_3/while/clip_by_value_1"
  input: "lstm_3/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/MatMul_6"
  op: "MatMul"
  input: "lstm_3/while/Identity_2"
  input: "lstm_3/while/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul_6/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/add_4"
  op: "Add"
  input: "lstm_3/while/BiasAdd_2"
  input: "lstm_3/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Tanh"
  op: "Tanh"
  input: "lstm_3/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/mul_3"
  op: "Mul"
  input: "lstm_3/while/clip_by_value"
  input: "lstm_3/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/add_5"
  op: "Add"
  input: "lstm_3/while/mul_2"
  input: "lstm_3/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/MatMul_7"
  op: "MatMul"
  input: "lstm_3/while/Identity_2"
  input: "lstm_3/while/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul_7/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/add_6"
  op: "Add"
  input: "lstm_3/while/BiasAdd_3"
  input: "lstm_3/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/mul_4/x"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_3/while/mul_4"
  op: "Mul"
  input: "lstm_3/while/mul_4/x"
  input: "lstm_3/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/add_7/y"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_3/while/add_7"
  op: "Add"
  input: "lstm_3/while/mul_4"
  input: "lstm_3/while/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Const_4"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/while/Const_5"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_3/while/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "lstm_3/while/add_7"
  input: "lstm_3/while/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/clip_by_value_2"
  op: "Maximum"
  input: "lstm_3/while/clip_by_value_2/Minimum"
  input: "lstm_3/while/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Tanh_1"
  op: "Tanh"
  input: "lstm_3/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/mul_5"
  op: "Mul"
  input: "lstm_3/while/clip_by_value_2"
  input: "lstm_3/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "lstm_3/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "lstm_3/while/Identity"
  input: "lstm_3/while/mul_5"
  input: "lstm_3/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "lstm_3/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "lstm_3/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/add_8/y"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/while/add_8"
  op: "Add"
  input: "lstm_3/while/Identity"
  input: "lstm_3/while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/while/NextIteration"
  op: "NextIteration"
  input: "lstm_3/while/add_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/while/NextIteration_1"
  op: "NextIteration"
  input: "lstm_3/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/NextIteration_2"
  op: "NextIteration"
  input: "lstm_3/while/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/NextIteration_3"
  op: "NextIteration"
  input: "lstm_3/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Exit"
  op: "Exit"
  input: "lstm_3/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/while/Exit_1"
  op: "Exit"
  input: "lstm_3/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Exit_2"
  op: "Exit"
  input: "lstm_3/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Exit_3"
  op: "Exit"
  input: "lstm_3/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "lstm_3/TensorArray"
  input: "lstm_3/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayStack/range"
  op: "Range"
  input: "lstm_3/TensorArrayStack/range/start"
  input: "lstm_3/TensorArrayStack/TensorArraySizeV3"
  input: "lstm_3/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "lstm_3/TensorArray"
  input: "lstm_3/TensorArrayStack/range"
  input: "lstm_3/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "lstm_3/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/sub"
  op: "Sub"
  input: "lstm_3/while/Exit"
  input: "lstm_3/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_3/TensorArray"
  input: "lstm_3/sub"
  input: "lstm_3/while/Exit_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/transpose_1"
  op: "Transpose"
  input: "lstm_3/TensorArrayStack/TensorArrayGatherV3"
  input: "lstm_3/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dense_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "dense_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.19364917278289795
      }
    }
  }
}
node {
  name: "dense_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.19364917278289795
      }
    }
  }
}
node {
  name: "dense_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 4554786
    }
  }
}
node {
  name: "dense_1/random_uniform/sub"
  op: "Sub"
  input: "dense_1/random_uniform/max"
  input: "dense_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_uniform/mul"
  op: "Mul"
  input: "dense_1/random_uniform/RandomUniform"
  input: "dense_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_uniform"
  op: "Add"
  input: "dense_1/random_uniform/mul"
  input: "dense_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/kernel/Assign"
  op: "Assign"
  input: "dense_1/kernel"
  input: "dense_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/kernel/read"
  op: "Identity"
  input: "dense_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
}
node {
  name: "dense_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/bias/Assign"
  op: "Assign"
  input: "dense_1/bias"
  input: "dense_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/bias/read"
  op: "Identity"
  input: "dense_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
}
node {
  name: "dense_1/MatMul"
  op: "MatMul"
  input: "lstm_3/TensorArrayReadV3"
  input: "dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1/BiasAdd"
  op: "BiasAdd"
  input: "dense_1/MatMul"
  input: "dense_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_1/Tanh"
  op: "Tanh"
  input: "dense_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\006\000\000\000"
      }
    }
  }
}
node {
  name: "dense_2/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.21160368621349335
      }
    }
  }
}
node {
  name: "dense_2/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.21160368621349335
      }
    }
  }
}
node {
  name: "dense_2/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense_2/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1317981
    }
  }
}
node {
  name: "dense_2/random_uniform/sub"
  op: "Sub"
  input: "dense_2/random_uniform/max"
  input: "dense_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/random_uniform/mul"
  op: "Mul"
  input: "dense_2/random_uniform/RandomUniform"
  input: "dense_2/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/random_uniform"
  op: "Add"
  input: "dense_2/random_uniform/mul"
  input: "dense_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_2/kernel/Assign"
  op: "Assign"
  input: "dense_2/kernel"
  input: "dense_2/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_2/kernel/read"
  op: "Identity"
  input: "dense_2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
}
node {
  name: "dense_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_2/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_2/bias/Assign"
  op: "Assign"
  input: "dense_2/bias"
  input: "dense_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_2/bias/read"
  op: "Identity"
  input: "dense_2/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
}
node {
  name: "dense_2/MatMul"
  op: "MatMul"
  input: "dense_1/Tanh"
  input: "dense_2/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_2/BiasAdd"
  op: "BiasAdd"
  input: "dense_2/MatMul"
  input: "dense_2/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_2/Softmax"
  op: "Softmax"
  input: "dense_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/iterations/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "Adam/iterations"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/iterations/Assign"
  op: "Assign"
  input: "Adam/iterations"
  input: "Adam/iterations/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/iterations/read"
  op: "Identity"
  input: "Adam/iterations"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
}
node {
  name: "Adam/lr/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "Adam/lr"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/lr/Assign"
  op: "Assign"
  input: "Adam/lr"
  input: "Adam/lr/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/lr/read"
  op: "Identity"
  input: "Adam/lr"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
}
node {
  name: "Adam/beta_1/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "Adam/beta_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/beta_1/Assign"
  op: "Assign"
  input: "Adam/beta_1"
  input: "Adam/beta_1/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/beta_1/read"
  op: "Identity"
  input: "Adam/beta_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
}
node {
  name: "Adam/beta_2/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "Adam/beta_2"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/beta_2/Assign"
  op: "Assign"
  input: "Adam/beta_2"
  input: "Adam/beta_2/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/beta_2/read"
  op: "Identity"
  input: "Adam/beta_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
}
node {
  name: "Adam/decay/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Adam/decay"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/decay/Assign"
  op: "Assign"
  input: "Adam/decay"
  input: "Adam/decay/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/decay/read"
  op: "Identity"
  input: "Adam/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
}
node {
  name: "dense_2_target"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "dense_2_sample_weights"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/Sum"
  op: "Sum"
  input: "dense_2/Softmax"
  input: "loss/dense_2_loss/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "loss/dense_2_loss/truediv"
  op: "RealDiv"
  input: "dense_2/Softmax"
  input: "loss/dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/sub"
  op: "Sub"
  input: "loss/dense_2_loss/sub/x"
  input: "loss/dense_2_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/clip_by_value/Minimum"
  op: "Minimum"
  input: "loss/dense_2_loss/truediv"
  input: "loss/dense_2_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/clip_by_value"
  op: "Maximum"
  input: "loss/dense_2_loss/clip_by_value/Minimum"
  input: "loss/dense_2_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/Log"
  op: "Log"
  input: "loss/dense_2_loss/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/mul"
  op: "Mul"
  input: "dense_2_target"
  input: "loss/dense_2_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/Sum_1"
  op: "Sum"
  input: "loss/dense_2_loss/mul"
  input: "loss/dense_2_loss/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_2_loss/Neg"
  op: "Neg"
  input: "loss/dense_2_loss/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/Mean"
  op: "Mean"
  input: "loss/dense_2_loss/Neg"
  input: "loss/dense_2_loss/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_2_loss/mul_1"
  op: "Mul"
  input: "loss/dense_2_loss/Mean"
  input: "dense_2_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/NotEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/NotEqual"
  op: "NotEqual"
  input: "dense_2_sample_weights"
  input: "loss/dense_2_loss/NotEqual/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/Cast"
  op: "Cast"
  input: "loss/dense_2_loss/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "loss/dense_2_loss/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/Mean_1"
  op: "Mean"
  input: "loss/dense_2_loss/Cast"
  input: "loss/dense_2_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_2_loss/truediv_1"
  op: "RealDiv"
  input: "loss/dense_2_loss/mul_1"
  input: "loss/dense_2_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/Mean_2"
  op: "Mean"
  input: "loss/dense_2_loss/truediv_1"
  input: "loss/dense_2_loss/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/mul"
  op: "Mul"
  input: "loss/mul/x"
  input: "loss/dense_2_loss/Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/acc/ArgMax/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax"
  op: "ArgMax"
  input: "dense_2_target"
  input: "metrics/acc/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/ArgMax_1/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax_1"
  op: "ArgMax"
  input: "dense_2/Softmax"
  input: "metrics/acc/ArgMax_1/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Equal"
  op: "Equal"
  input: "metrics/acc/ArgMax"
  input: "metrics/acc/ArgMax_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Cast"
  op: "Cast"
  input: "metrics/acc/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "metrics/acc/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "metrics/acc/Mean"
  op: "Mean"
  input: "metrics/acc/Cast"
  input: "metrics/acc/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Fill"
  op: "Fill"
  input: "training/Adam/gradients/Shape"
  input: "training/Adam/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/f_count"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_1"
  op: "Enter"
  input: "training/Adam/gradients/f_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge"
  op: "Merge"
  input: "training/Adam/gradients/f_count_1"
  input: "training/Adam/gradients/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch"
  op: "Switch"
  input: "training/Adam/gradients/Merge"
  input: "lstm_3/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add/y"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add"
  op: "Add"
  input: "training/Adam/gradients/Switch:1"
  input: "training/Adam/gradients/Add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/Add"
  input: "^training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_4_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_1_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPushV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_2"
  op: "Exit"
  input: "training/Adam/gradients/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_1"
  op: "Enter"
  input: "training/Adam/gradients/f_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_1"
  op: "Merge"
  input: "training/Adam/gradients/b_count_1"
  input: "training/Adam/gradients/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/Merge_1"
  input: "training/Adam/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/b_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_2"
  op: "LoopCond"
  input: "training/Adam/gradients/GreaterEqual"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_1"
  op: "Switch"
  input: "training/Adam/gradients/Merge_1"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Sub"
  op: "Sub"
  input: "training/Adam/gradients/Switch_1:1"
  input: "training/Adam/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_1"
  op: "NextIteration"
  input: "training/Adam/gradients/Sub"
  input: "^training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_3"
  op: "Exit"
  input: "training/Adam/gradients/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_3"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_4"
  op: "Enter"
  input: "training/Adam/gradients/f_count_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_2"
  op: "Merge"
  input: "training/Adam/gradients/f_count_4"
  input: "training/Adam/gradients/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_2"
  op: "Switch"
  input: "training/Adam/gradients/Merge_2"
  input: "lstm_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add_1/y"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add_1"
  op: "Add"
  input: "training/Adam/gradients/Switch_2:1"
  input: "training/Adam/gradients/Add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_2"
  op: "NextIteration"
  input: "training/Adam/gradients/Add_1"
  input: "^training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_4_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_1_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPushV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_5"
  op: "Exit"
  input: "training/Adam/gradients/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_4"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_5"
  op: "Enter"
  input: "training/Adam/gradients/f_count_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_3"
  op: "Merge"
  input: "training/Adam/gradients/b_count_5"
  input: "training/Adam/gradients/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual_1"
  op: "GreaterEqual"
  input: "training/Adam/gradients/Merge_3"
  input: "training/Adam/gradients/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/b_count_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_6"
  op: "LoopCond"
  input: "training/Adam/gradients/GreaterEqual_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_3"
  op: "Switch"
  input: "training/Adam/gradients/Merge_3"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Sub_1"
  op: "Sub"
  input: "training/Adam/gradients/Switch_3:1"
  input: "training/Adam/gradients/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_3"
  op: "NextIteration"
  input: "training/Adam/gradients/Sub_1"
  input: "^training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_7"
  op: "Exit"
  input: "training/Adam/gradients/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_6"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_7"
  op: "Enter"
  input: "training/Adam/gradients/f_count_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_4"
  op: "Merge"
  input: "training/Adam/gradients/f_count_7"
  input: "training/Adam/gradients/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_4"
  op: "Switch"
  input: "training/Adam/gradients/Merge_4"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add_2/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add_2"
  op: "Add"
  input: "training/Adam/gradients/Switch_4:1"
  input: "training/Adam/gradients/Add_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_4"
  op: "NextIteration"
  input: "training/Adam/gradients/Add_2"
  input: "^training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_4_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_1_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPushV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_8"
  op: "Exit"
  input: "training/Adam/gradients/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_8"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_9"
  op: "Enter"
  input: "training/Adam/gradients/f_count_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_5"
  op: "Merge"
  input: "training/Adam/gradients/b_count_9"
  input: "training/Adam/gradients/NextIteration_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual_2"
  op: "GreaterEqual"
  input: "training/Adam/gradients/Merge_5"
  input: "training/Adam/gradients/GreaterEqual_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual_2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/b_count_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_10"
  op: "LoopCond"
  input: "training/Adam/gradients/GreaterEqual_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_5"
  op: "Switch"
  input: "training/Adam/gradients/Merge_5"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Sub_2"
  op: "Sub"
  input: "training/Adam/gradients/Switch_5:1"
  input: "training/Adam/gradients/GreaterEqual_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_5"
  op: "NextIteration"
  input: "training/Adam/gradients/Sub_2"
  input: "^training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_11"
  op: "Exit"
  input: "training/Adam/gradients/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/Fill"
  input: "loss/dense_2_loss/Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/mul_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/Fill"
  input: "loss/mul/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/mul_grad/Mul_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Shape"
  op: "Shape"
  input: "loss/dense_2_loss/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Shape_1"
  op: "Shape"
  input: "loss/dense_2_loss/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Shape_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Prod"
  op: "Prod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Shape_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Prod_1"
  op: "Prod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Shape_2"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Prod_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Prod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Cast"
  op: "Cast"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/truediv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Tile"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Shape"
  op: "Shape"
  input: "loss/dense_2_loss/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/RealDiv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/truediv"
  input: "loss/dense_2_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Neg"
  op: "Neg"
  input: "loss/dense_2_loss/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/RealDiv_1"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Neg"
  input: "loss/dense_2_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/RealDiv_2"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/RealDiv_1"
  input: "loss/dense_2_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/truediv"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/mul"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Sum_1"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Shape"
  op: "Shape"
  input: "loss/dense_2_loss/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Shape_1"
  op: "Shape"
  input: "dense_2_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Reshape"
  input: "dense_2_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/mul"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/mul_1"
  op: "Mul"
  input: "loss/dense_2_loss/Mean"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/mul_1"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Sum_1"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape"
  op: "Shape"
  input: "loss/dense_2_loss/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/add"
  op: "Add"
  input: "loss/dense_2_loss/Mean/reduction_indices"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/add"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/range"
  op: "Range"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/range/start"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Size"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/range"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/mod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/DynamicStitch"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape_2"
  op: "Shape"
  input: "loss/dense_2_loss/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape_3"
  op: "Shape"
  input: "loss/dense_2_loss/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Prod"
  op: "Prod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape_2"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Prod_1"
  op: "Prod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape_3"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum_1/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum_1"
  op: "Maximum"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Prod_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/floordiv_1"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Prod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Cast"
  op: "Cast"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/truediv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Tile"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Neg_grad/Neg"
  op: "Neg"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Neg"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Shape"
  op: "Shape"
  input: "loss/dense_2_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/add"
  op: "Add"
  input: "loss/dense_2_loss/Sum_1/reduction_indices"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/add"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/range"
  op: "Range"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/range/start"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Size"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Shape_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/range"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/mod"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/DynamicStitch"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/Neg_grad/Neg"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Shape"
  op: "Shape"
  input: "dense_2_target"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Shape_1"
  op: "Shape"
  input: "loss/dense_2_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Tile"
  input: "loss/dense_2_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/mul"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/mul_1"
  op: "Mul"
  input: "dense_2_target"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/mul_1"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Sum_1"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "loss/dense_2_loss/clip_by_value"
  input: "^training/Adam/gradients/loss/dense_2_loss/mul_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Log"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Log_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Reshape_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Log"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape"
  op: "Shape"
  input: "loss/dense_2_loss/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/Log_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape_2"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "loss/dense_2_loss/clip_by_value/Minimum"
  input: "loss/dense_2_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/loss/dense_2_loss/Log_grad/mul"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/zeros"
  input: "training/Adam/gradients/loss/dense_2_loss/Log_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Select"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Select_1"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Sum_1"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "loss/dense_2_loss/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "loss/dense_2_loss/truediv"
  input: "loss/dense_2_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/zeros"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Select"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Select_1"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Shape"
  op: "Shape"
  input: "dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Shape_1"
  op: "Shape"
  input: "loss/dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Reshape"
  input: "loss/dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Neg"
  op: "Neg"
  input: "dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Neg"
  input: "loss/dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/RealDiv_1"
  input: "loss/dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/mul"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Sum_1"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Shape"
  op: "Shape"
  input: "dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/add"
  op: "Add"
  input: "loss/dense_2_loss/Sum/reduction_indices"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/add"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/range"
  op: "Range"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/range/start"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Size"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Shape_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/range"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/mod"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/DynamicStitch"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Reshape_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN"
  op: "AddN"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Tile"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/Softmax_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/AddN"
  input: "dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/Softmax_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/Softmax"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/Softmax_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/dense_2/Softmax_grad/mul"
  input: "training/Adam/gradients/dense_2/Softmax_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/Softmax"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/Softmax_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/Softmax"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/Softmax_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/dense_2/Softmax_grad/Sum"
  input: "training/Adam/gradients/dense_2/Softmax_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/Softmax_grad/sub"
  op: "Sub"
  input: "training/Adam/gradients/AddN"
  input: "training/Adam/gradients/dense_2/Softmax_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/Softmax_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/dense_2/Softmax_grad/sub"
  input: "dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/dense_2/Softmax_grad/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/dense_2/Softmax_grad/mul_1"
  input: "dense_2/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dense_1/Tanh"
  input: "training/Adam/gradients/dense_2/Softmax_grad/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "dense_1/Tanh"
  input: "training/Adam/gradients/dense_2/MatMul_grad/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/Tanh"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/dense_1/Tanh_grad/TanhGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/dense_1/Tanh_grad/TanhGrad"
  input: "dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "lstm_3/TensorArrayReadV3"
  input: "training/Adam/gradients/dense_1/Tanh_grad/TanhGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "lstm_3/TensorArray"
  input: "lstm_3/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray"
        s: "loc:@lstm_3/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "lstm_3/while/Exit_1"
  input: "^training/Adam/gradients/lstm_3/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray"
        s: "loc:@lstm_3/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "training/Adam/gradients/lstm_3/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "lstm_3/sub"
  input: "training/Adam/gradients/dense_1/MatMul_grad/MatMul"
  input: "training/Adam/gradients/lstm_3/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like"
  op: "ZerosLike"
  input: "lstm_3/while/Exit_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_1"
  op: "ZerosLike"
  input: "lstm_3/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/Exit_1_grad/b_exit"
  input: "training/Adam/gradients/lstm_3/while/Switch_1_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/Exit_2_grad/b_exit"
  input: "training/Adam/gradients/lstm_3/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/Exit_3_grad/b_exit"
  input: "training/Adam/gradients/lstm_3/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/Switch_1_grad/b_switch"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/Switch_2_grad/b_switch"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/Switch_3_grad/b_switch"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/Merge_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/Merge_2_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Enter_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/Merge_3_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Enter_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/lstm_3/while/Merge_1_grad/Switch:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "lstm_3/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_3/while/Merge_1_grad/Switch:1"
  input: "^training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Identity"
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Identity"
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "lstm_3/while/Identity"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_4_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_1_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/Shape"
  op: "Shape"
  input: "lstm_3/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/stack"
  op: "Pack"
  input: "lstm_3/Tile/multiples"
  input: "training/Adam/gradients/lstm_3/Tile_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Rank"
  op: "Rank"
  input: "training/Adam/gradients/lstm_3/Tile_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose/sub/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose/sub"
  op: "Sub"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Range"
  op: "Range"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Range/start"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose/sub_1"
  op: "Sub"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/sub"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_3/Tile_grad/stack"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose"
  input: "training/Adam/gradients/lstm_3/Tile_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_3/Tile_grad/range/start"
  input: "training/Adam/gradients/lstm_3/Tile_grad/Size"
  input: "training/Adam/gradients/lstm_3/Tile_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/Enter_2_grad/Exit"
  input: "training/Adam/gradients/lstm_3/Tile_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/Tile_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/Tile_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/Shape"
  op: "Shape"
  input: "lstm_3/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/stack"
  op: "Pack"
  input: "lstm_3/Tile_1/multiples"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Rank"
  op: "Rank"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/sub/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/sub"
  op: "Sub"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Range"
  op: "Range"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Range/start"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/sub_1"
  op: "Sub"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/sub"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/stack"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/range/start"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/Size"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/Enter_3_grad/Exit"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_1"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/while/Merge_2_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/AddN_1"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Tanh_1"
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Tanh_1"
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/Enter"
  input: "lstm_3/while/Tanh_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/AddN_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/Enter"
  input: "lstm_3/while/clip_by_value_2"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_2"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/Tile_grad/Sum"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/Sum"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/ExpandDims_grad/Shape"
  op: "Shape"
  input: "lstm_3/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/AddN_2"
  input: "training/Adam/gradients/lstm_3/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/clip_by_value_2/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Shape_2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/Enter"
  input: "lstm_3/while/clip_by_value_2/Minimum"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/zeros"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Select_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Tanh_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/Merge_1_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Shape"
  op: "Shape"
  input: "lstm_3/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/add"
  op: "Add"
  input: "lstm_3/Sum/reduction_indices"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/lstm_3/Sum_grad/add"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_3/Sum_grad/range/start"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Size"
  input: "training/Adam/gradients/lstm_3/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Shape_1"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/lstm_3/Sum_grad/range"
  input: "training/Adam/gradients/lstm_3/Sum_grad/mod"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Shape"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/lstm_3/Sum_grad/DynamicStitch"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Shape"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/ExpandDims_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  input: "lstm_3/while/add_7"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_3"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/while/Merge_3_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/AddN_3"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/AddN_3"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Identity_3"
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Identity_3"
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/Enter"
  input: "lstm_3/while/Identity_3"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/Enter"
  input: "lstm_3/while/clip_by_value_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Tanh"
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Tanh"
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/Enter"
  input: "lstm_3/while/Tanh"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/Enter"
  input: "lstm_3/while/clip_by_value"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/Shape"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/Enter"
  input: "lstm_3/while/add_6"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul_1"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/clip_by_value_1/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Shape_2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/Enter"
  input: "lstm_3/while/clip_by_value_1/Minimum"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/zeros"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Select_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Shape_2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/Enter"
  input: "lstm_3/while/clip_by_value/Minimum"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/zeros"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Select_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Tanh"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/BiasAdd_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  input: "lstm_3/while/add_3"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  input: "lstm_3/while/add_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Identity_2"
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Identity_2"
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/Enter"
  input: "lstm_3/while/Identity_2"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
        s: "loc:@lstm_3/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
        s: "loc:@lstm_3/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/Enter"
  input: "lstm_3/while/TensorArrayReadV3"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/Shape"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/Enter"
  input: "lstm_3/while/add_2"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul_1"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/Shape"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul/Enter"
  input: "lstm_3/while/add"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul_1"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_11_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_11_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_11_grad/Shape"
  input: "lstm_3/strided_slice_11/stack"
  input: "lstm_3/strided_slice_11/stack_1"
  input: "lstm_3/strided_slice_11/stack_2"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_11"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_7_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_7_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_7_grad/Shape"
  input: "lstm_3/strided_slice_7/stack"
  input: "lstm_3/strided_slice_7/stack_1"
  input: "lstm_3/strided_slice_7/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_7"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_10_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_10_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_10_grad/Shape"
  input: "lstm_3/strided_slice_10/stack"
  input: "lstm_3/strided_slice_10/stack_1"
  input: "lstm_3/strided_slice_10/stack_2"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_10"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_6_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_6_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_6_grad/Shape"
  input: "lstm_3/strided_slice_6/stack"
  input: "lstm_3/strided_slice_6/stack_1"
  input: "lstm_3/strided_slice_6/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_6"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_3_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_3_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_3_grad/Shape"
  input: "lstm_3/strided_slice_3/stack"
  input: "lstm_3/strided_slice_3/stack_1"
  input: "lstm_3/strided_slice_3/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_3"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_2_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_2_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_2_grad/Shape"
  input: "lstm_3/strided_slice_2/stack"
  input: "lstm_3/strided_slice_2/stack_1"
  input: "lstm_3/strided_slice_2/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_2"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_4"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6_grad/MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5_grad/MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_9_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_9_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_9_grad/Shape"
  input: "lstm_3/strided_slice_9/stack"
  input: "lstm_3/strided_slice_9/stack_1"
  input: "lstm_3/strided_slice_9/stack_2"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_9"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_5_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_5_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_5_grad/Shape"
  input: "lstm_3/strided_slice_5/stack"
  input: "lstm_3/strided_slice_5/stack_1"
  input: "lstm_3/strided_slice_5/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_5"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_5"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2_grad/MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1_grad/MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3"
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "lstm_3/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3"
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3"
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3"
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/AddN_5"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_8_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_8_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_8_grad/Shape"
  input: "lstm_3/strided_slice_8/stack"
  input: "lstm_3/strided_slice_8/stack_1"
  input: "lstm_3/strided_slice_8/stack_2"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_8"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_4_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_4_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_4_grad/Shape"
  input: "lstm_3/strided_slice_4/stack"
  input: "lstm_3/strided_slice_4/stack_1"
  input: "lstm_3/strided_slice_4/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_4"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_1_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_1_grad/Shape"
  input: "lstm_3/strided_slice_1/stack"
  input: "lstm_3/strided_slice_1/stack_1"
  input: "lstm_3/strided_slice_1/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_grad/Shape"
  input: "lstm_3/strided_slice/stack"
  input: "lstm_3/strided_slice/stack_1"
  input: "lstm_3/strided_slice/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_6"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/strided_slice_11_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_10_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_9_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_8_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_11"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_7"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/strided_slice_7_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_6_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_5_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_4_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "lstm_3/TensorArray_1"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray_1"
        s: "loc:@lstm_3/transpose"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^training/Adam/gradients/lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray_1"
        s: "loc:@lstm_3/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "training/Adam/gradients/lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "lstm_3/TensorArrayUnstack/range"
  input: "training/Adam/gradients/lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/transpose"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_8"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/strided_slice_3_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_2_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_1_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "lstm_3/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/transpose_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "training/Adam/gradients/lstm_3/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "lstm_2/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/transpose_1_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_3/transpose_grad/transpose"
  input: "training/Adam/gradients/lstm_2/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "lstm_2/TensorArray"
  input: "lstm_2/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "lstm_2/while/Exit_1"
  input: "^training/Adam/gradients/lstm_2/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "training/Adam/gradients/lstm_2/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "lstm_2/TensorArrayStack/range"
  input: "training/Adam/gradients/lstm_2/transpose_1_grad/transpose"
  input: "training/Adam/gradients/lstm_2/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_2"
  op: "ZerosLike"
  input: "lstm_2/while/Exit_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_3"
  op: "ZerosLike"
  input: "lstm_2/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/Exit_1_grad/b_exit"
  input: "training/Adam/gradients/lstm_2/while/Switch_1_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/Exit_2_grad/b_exit"
  input: "training/Adam/gradients/lstm_2/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/Exit_3_grad/b_exit"
  input: "training/Adam/gradients/lstm_2/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/Switch_1_grad/b_switch"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/Switch_2_grad/b_switch"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/Switch_3_grad/b_switch"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/Merge_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/Merge_2_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Enter_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/Merge_3_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Enter_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/lstm_2/while/Merge_1_grad/Switch:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "lstm_2/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_2/while/Merge_1_grad/Switch:1"
  input: "^training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Identity"
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Identity"
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "lstm_2/while/Identity"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_4_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_1_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/Shape"
  op: "Shape"
  input: "lstm_2/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/stack"
  op: "Pack"
  input: "lstm_2/Tile/multiples"
  input: "training/Adam/gradients/lstm_2/Tile_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Rank"
  op: "Rank"
  input: "training/Adam/gradients/lstm_2/Tile_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose/sub/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose/sub"
  op: "Sub"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Range"
  op: "Range"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Range/start"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose/sub_1"
  op: "Sub"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/sub"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_2/Tile_grad/stack"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose"
  input: "training/Adam/gradients/lstm_2/Tile_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_2/Tile_grad/range/start"
  input: "training/Adam/gradients/lstm_2/Tile_grad/Size"
  input: "training/Adam/gradients/lstm_2/Tile_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/Enter_2_grad/Exit"
  input: "training/Adam/gradients/lstm_2/Tile_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/Tile_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/Tile_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/Shape"
  op: "Shape"
  input: "lstm_2/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/stack"
  op: "Pack"
  input: "lstm_2/Tile_1/multiples"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Rank"
  op: "Rank"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/sub/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/sub"
  op: "Sub"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Range"
  op: "Range"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Range/start"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/sub_1"
  op: "Sub"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/sub"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/stack"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/range/start"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/Size"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/Enter_3_grad/Exit"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_9"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/while/Merge_2_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/AddN_9"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Tanh_1"
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Tanh_1"
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/Enter"
  input: "lstm_2/while/Tanh_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/AddN_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/Enter"
  input: "lstm_2/while/clip_by_value_2"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_10"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/Tile_grad/Sum"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/Sum"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/ExpandDims_grad/Shape"
  op: "Shape"
  input: "lstm_2/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/AddN_10"
  input: "training/Adam/gradients/lstm_2/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/clip_by_value_2/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Shape_2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/Enter"
  input: "lstm_2/while/clip_by_value_2/Minimum"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/zeros"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Select_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Tanh_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/Merge_1_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Shape"
  op: "Shape"
  input: "lstm_2/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/add"
  op: "Add"
  input: "lstm_2/Sum/reduction_indices"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/lstm_2/Sum_grad/add"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_2/Sum_grad/range/start"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Size"
  input: "training/Adam/gradients/lstm_2/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Shape_1"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/lstm_2/Sum_grad/range"
  input: "training/Adam/gradients/lstm_2/Sum_grad/mod"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Shape"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/lstm_2/Sum_grad/DynamicStitch"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Shape"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/ExpandDims_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  input: "lstm_2/while/add_7"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_11"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/while/Merge_3_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/AddN_11"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/AddN_11"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Identity_3"
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Identity_3"
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/Enter"
  input: "lstm_2/while/Identity_3"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/Enter"
  input: "lstm_2/while/clip_by_value_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Tanh"
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Tanh"
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/Enter"
  input: "lstm_2/while/Tanh"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/Enter"
  input: "lstm_2/while/clip_by_value"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/Shape"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/Enter"
  input: "lstm_2/while/add_6"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul_1"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/clip_by_value_1/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Shape_2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/Enter"
  input: "lstm_2/while/clip_by_value_1/Minimum"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/zeros"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Select_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Shape_2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/Enter"
  input: "lstm_2/while/clip_by_value/Minimum"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/zeros"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Select_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Tanh"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/BiasAdd_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  input: "lstm_2/while/add_3"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  input: "lstm_2/while/add_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Identity_2"
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Identity_2"
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/Enter"
  input: "lstm_2/while/Identity_2"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
        s: "loc:@lstm_2/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
        s: "loc:@lstm_2/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/Enter"
  input: "lstm_2/while/TensorArrayReadV3"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/Shape"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/Enter"
  input: "lstm_2/while/add_2"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul_1"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/Shape"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul/Enter"
  input: "lstm_2/while/add"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul_1"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_11_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_11_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_11_grad/Shape"
  input: "lstm_2/strided_slice_11/stack"
  input: "lstm_2/strided_slice_11/stack_1"
  input: "lstm_2/strided_slice_11/stack_2"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_11"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_7_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_7_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_7_grad/Shape"
  input: "lstm_2/strided_slice_7/stack"
  input: "lstm_2/strided_slice_7/stack_1"
  input: "lstm_2/strided_slice_7/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_7"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_10_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_10_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_10_grad/Shape"
  input: "lstm_2/strided_slice_10/stack"
  input: "lstm_2/strided_slice_10/stack_1"
  input: "lstm_2/strided_slice_10/stack_2"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_10"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_6_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_6_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_6_grad/Shape"
  input: "lstm_2/strided_slice_6/stack"
  input: "lstm_2/strided_slice_6/stack_1"
  input: "lstm_2/strided_slice_6/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_6"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_3_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_3_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_3_grad/Shape"
  input: "lstm_2/strided_slice_3/stack"
  input: "lstm_2/strided_slice_3/stack_1"
  input: "lstm_2/strided_slice_3/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_3"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_2_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_2_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_2_grad/Shape"
  input: "lstm_2/strided_slice_2/stack"
  input: "lstm_2/strided_slice_2/stack_1"
  input: "lstm_2/strided_slice_2/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_2"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_12"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6_grad/MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5_grad/MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_9_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_9_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_9_grad/Shape"
  input: "lstm_2/strided_slice_9/stack"
  input: "lstm_2/strided_slice_9/stack_1"
  input: "lstm_2/strided_slice_9/stack_2"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_9"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_5_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_5_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_5_grad/Shape"
  input: "lstm_2/strided_slice_5/stack"
  input: "lstm_2/strided_slice_5/stack_1"
  input: "lstm_2/strided_slice_5/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_5"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_13"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2_grad/MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1_grad/MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3"
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "lstm_2/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3"
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3"
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3"
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/AddN_13"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_8_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_8_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_8_grad/Shape"
  input: "lstm_2/strided_slice_8/stack"
  input: "lstm_2/strided_slice_8/stack_1"
  input: "lstm_2/strided_slice_8/stack_2"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_8"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/AddN_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_4_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_4_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_4_grad/Shape"
  input: "lstm_2/strided_slice_4/stack"
  input: "lstm_2/strided_slice_4/stack_1"
  input: "lstm_2/strided_slice_4/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_4"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_1_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_1_grad/Shape"
  input: "lstm_2/strided_slice_1/stack"
  input: "lstm_2/strided_slice_1/stack_1"
  input: "lstm_2/strided_slice_1/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_grad/Shape"
  input: "lstm_2/strided_slice/stack"
  input: "lstm_2/strided_slice/stack_1"
  input: "lstm_2/strided_slice/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_14"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/strided_slice_11_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_10_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_9_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_8_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_11"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_15"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/strided_slice_7_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_6_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_5_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_4_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "lstm_2/TensorArray_1"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray_1"
        s: "loc:@lstm_2/transpose"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^training/Adam/gradients/lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray_1"
        s: "loc:@lstm_2/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "training/Adam/gradients/lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "lstm_2/TensorArrayUnstack/range"
  input: "training/Adam/gradients/lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/transpose"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_16"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/strided_slice_3_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_2_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_1_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "lstm_2/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/transpose_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "training/Adam/gradients/lstm_2/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "lstm_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/transpose_1_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_2/transpose_grad/transpose"
  input: "training/Adam/gradients/lstm_1/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "lstm_1/TensorArray"
  input: "lstm_1/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "lstm_1/while/Exit_1"
  input: "^training/Adam/gradients/lstm_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "training/Adam/gradients/lstm_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "lstm_1/TensorArrayStack/range"
  input: "training/Adam/gradients/lstm_1/transpose_1_grad/transpose"
  input: "training/Adam/gradients/lstm_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_4"
  op: "ZerosLike"
  input: "lstm_1/while/Exit_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_5"
  op: "ZerosLike"
  input: "lstm_1/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/Exit_1_grad/b_exit"
  input: "training/Adam/gradients/lstm_1/while/Switch_1_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/Exit_2_grad/b_exit"
  input: "training/Adam/gradients/lstm_1/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/Exit_3_grad/b_exit"
  input: "training/Adam/gradients/lstm_1/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/Switch_1_grad/b_switch"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/Switch_2_grad/b_switch"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/Switch_3_grad/b_switch"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/Merge_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/Merge_2_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Enter_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/Merge_3_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Enter_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/lstm_1/while/Merge_1_grad/Switch:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "lstm_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_1/while/Merge_1_grad/Switch:1"
  input: "^training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "lstm_1/while/Identity"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_4_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_1_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/Shape"
  op: "Shape"
  input: "lstm_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/stack"
  op: "Pack"
  input: "lstm_1/Tile/multiples"
  input: "training/Adam/gradients/lstm_1/Tile_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/transpose/Rank"
  op: "Rank"
  input: "training/Adam/gradients/lstm_1/Tile_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/transpose/sub/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/transpose/sub"
  op: "Sub"
  input: "training/Adam/gradients/lstm_1/Tile_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_1/Tile_grad/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/transpose/Range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/transpose/Range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/transpose/Range"
  op: "Range"
  input: "training/Adam/gradients/lstm_1/Tile_grad/transpose/Range/start"
  input: "training/Adam/gradients/lstm_1/Tile_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_1/Tile_grad/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/transpose/sub_1"
  op: "Sub"
  input: "training/Adam/gradients/lstm_1/Tile_grad/transpose/sub"
  input: "training/Adam/gradients/lstm_1/Tile_grad/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_1/Tile_grad/stack"
  input: "training/Adam/gradients/lstm_1/Tile_grad/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/Tile_grad/transpose"
  input: "training/Adam/gradients/lstm_1/Tile_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_1/Tile_grad/range/start"
  input: "training/Adam/gradients/lstm_1/Tile_grad/Size"
  input: "training/Adam/gradients/lstm_1/Tile_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/Enter_2_grad/Exit"
  input: "training/Adam/gradients/lstm_1/Tile_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/Tile_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/Tile_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/Shape"
  op: "Shape"
  input: "lstm_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/stack"
  op: "Pack"
  input: "lstm_1/Tile_1/multiples"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/Rank"
  op: "Rank"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/sub/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/sub"
  op: "Sub"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/Range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/Range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/Range"
  op: "Range"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/Range/start"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/sub_1"
  op: "Sub"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/sub"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/stack"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/transpose"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/range/start"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/Size"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/Enter_3_grad/Exit"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Tile_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_17"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/while/Merge_2_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/AddN_17"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh_1"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh_1"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/Enter"
  input: "lstm_1/while/Tanh_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/AddN_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/Enter"
  input: "lstm_1/while/clip_by_value_2"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_18"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/Tile_grad/Sum"
  input: "training/Adam/gradients/lstm_1/Tile_1_grad/Sum"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/ExpandDims_grad/Shape"
  op: "Shape"
  input: "lstm_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/AddN_18"
  input: "training/Adam/gradients/lstm_1/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value_2/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape_2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Enter"
  input: "lstm_1/while/clip_by_value_2/Minimum"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/zeros"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Select_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/Merge_1_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/Shape"
  op: "Shape"
  input: "lstm_1/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/add"
  op: "Add"
  input: "lstm_1/Sum/reduction_indices"
  input: "training/Adam/gradients/lstm_1/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/lstm_1/Sum_grad/add"
  input: "training/Adam/gradients/lstm_1/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_1/Sum_grad/range/start"
  input: "training/Adam/gradients/lstm_1/Sum_grad/Size"
  input: "training/Adam/gradients/lstm_1/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1/Sum_grad/Shape_1"
  input: "training/Adam/gradients/lstm_1/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/lstm_1/Sum_grad/range"
  input: "training/Adam/gradients/lstm_1/Sum_grad/mod"
  input: "training/Adam/gradients/lstm_1/Sum_grad/Shape"
  input: "training/Adam/gradients/lstm_1/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/lstm_1/Sum_grad/DynamicStitch"
  input: "training/Adam/gradients/lstm_1/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/lstm_1/Sum_grad/Shape"
  input: "training/Adam/gradients/lstm_1/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/ExpandDims_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/lstm_1/Sum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  input: "lstm_1/while/add_7"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_19"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/while/Merge_3_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/AddN_19"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/AddN_19"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_3"
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_3"
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/Enter"
  input: "lstm_1/while/Identity_3"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/Enter"
  input: "lstm_1/while/clip_by_value_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh"
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh"
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/Enter"
  input: "lstm_1/while/Tanh"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/Enter"
  input: "lstm_1/while/clip_by_value"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Shape"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/Enter"
  input: "lstm_1/while/add_6"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value_1/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape_2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Enter"
  input: "lstm_1/while/clip_by_value_1/Minimum"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/zeros"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Select_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape_2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Enter"
  input: "lstm_1/while/clip_by_value/Minimum"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/zeros"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Select_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/BiasAdd_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  input: "lstm_1/while/add_3"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  input: "lstm_1/while/add_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_2"
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_2"
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/Enter"
  input: "lstm_1/while/Identity_2"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
        s: "loc:@lstm_1/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
        s: "loc:@lstm_1/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/Enter"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Shape"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/Enter"
  input: "lstm_1/while/add_2"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Shape"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul/Enter"
  input: "lstm_1/while/add"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_11_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_11_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_11_grad/Shape"
  input: "lstm_1/strided_slice_11/stack"
  input: "lstm_1/strided_slice_11/stack_1"
  input: "lstm_1/strided_slice_11/stack_2"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_7_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_7_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_7_grad/Shape"
  input: "lstm_1/strided_slice_7/stack"
  input: "lstm_1/strided_slice_7/stack_1"
  input: "lstm_1/strided_slice_7/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_10_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_10_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_10_grad/Shape"
  input: "lstm_1/strided_slice_10/stack"
  input: "lstm_1/strided_slice_10/stack_1"
  input: "lstm_1/strided_slice_10/stack_2"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_6_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_6_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_6_grad/Shape"
  input: "lstm_1/strided_slice_6/stack"
  input: "lstm_1/strided_slice_6/stack_1"
  input: "lstm_1/strided_slice_6/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_3_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_3_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_3_grad/Shape"
  input: "lstm_1/strided_slice_3/stack"
  input: "lstm_1/strided_slice_3/stack_1"
  input: "lstm_1/strided_slice_3/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_2_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_2_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_2_grad/Shape"
  input: "lstm_1/strided_slice_2/stack"
  input: "lstm_1/strided_slice_2/stack_1"
  input: "lstm_1/strided_slice_2/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_20"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_9_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_9_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_9_grad/Shape"
  input: "lstm_1/strided_slice_9/stack"
  input: "lstm_1/strided_slice_9/stack_1"
  input: "lstm_1/strided_slice_9/stack_2"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_5_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_5_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_5_grad/Shape"
  input: "lstm_1/strided_slice_5/stack"
  input: "lstm_1/strided_slice_5/stack_1"
  input: "lstm_1/strided_slice_5/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_21"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3"
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "lstm_1/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3"
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3"
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3"
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/AddN_21"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_8_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_8_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_8_grad/Shape"
  input: "lstm_1/strided_slice_8/stack"
  input: "lstm_1/strided_slice_8/stack_1"
  input: "lstm_1/strided_slice_8/stack_2"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/AddN_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_4_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_4_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_4_grad/Shape"
  input: "lstm_1/strided_slice_4/stack"
  input: "lstm_1/strided_slice_4/stack_1"
  input: "lstm_1/strided_slice_4/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_1_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_1_grad/Shape"
  input: "lstm_1/strided_slice_1/stack"
  input: "lstm_1/strided_slice_1/stack_1"
  input: "lstm_1/strided_slice_1/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_grad/Shape"
  input: "lstm_1/strided_slice/stack"
  input: "lstm_1/strided_slice/stack_1"
  input: "lstm_1/strided_slice/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_22"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/strided_slice_11_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_10_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_9_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_8_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_11"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_23"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/strided_slice_7_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_6_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_5_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_4_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "lstm_1/TensorArray_1"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray_1"
        s: "loc:@lstm_1/transpose"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^training/Adam/gradients/lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray_1"
        s: "loc:@lstm_1/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "training/Adam/gradients/lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "lstm_1/TensorArrayUnstack/range"
  input: "training/Adam/gradients/lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/transpose"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_24"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/strided_slice_3_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_2_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_1_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "lstm_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/transpose_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "training/Adam/gradients/lstm_1/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/lstm_1/transpose_grad/transpose"
  input: "conv1d_4/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/add_grad/Shape"
  op: "Shape"
  input: "conv1d_4/convolution/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/conv1d_4/add_grad/Shape"
  input: "training/Adam/gradients/conv1d_4/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_4/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_4/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_4/add_grad/Sum"
  input: "training/Adam/gradients/conv1d_4/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_4/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_4/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_4/add_grad/Sum_1"
  input: "training/Adam/gradients/conv1d_4/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/convolution/Squeeze_grad/Shape"
  op: "Shape"
  input: "conv1d_4/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/convolution/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/convolution/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_4/add_grad/Reshape"
  input: "training/Adam/gradients/conv1d_4/convolution/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/convolution/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/Reshape_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/Reshape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/Reshape_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_4/add_grad/Reshape_1"
  input: "training/Adam/gradients/conv1d_4/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/Reshape"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/convolution/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "conv1d_4/convolution/ExpandDims"
  input: "conv1d_4/convolution/ExpandDims_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/convolution/Conv2D_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\003\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/convolution/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_4/convolution/Conv2D_grad/ShapeN"
  input: "conv1d_4/convolution/ExpandDims_1"
  input: "training/Adam/gradients/conv1d_4/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/convolution/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv1d_4/convolution/ExpandDims"
  input: "training/Adam/gradients/conv1d_4/convolution/Conv2D_grad/Const"
  input: "training/Adam/gradients/conv1d_4/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/convolution/ExpandDims_grad/Shape"
  op: "Shape"
  input: "conv1d_4/Pad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/convolution/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/convolution/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_4/convolution/Conv2D_grad/Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_4/convolution/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/convolution/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/convolution/ExpandDims_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/convolution/ExpandDims_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/convolution/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_4/convolution/Conv2D_grad/Conv2DBackpropFilter"
  input: "training/Adam/gradients/conv1d_4/convolution/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/convolution/ExpandDims_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/Pad_grad/Rank"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/Pad"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/Pad_grad/stack/1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/Pad"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/Pad_grad/stack"
  op: "Pack"
  input: "training/Adam/gradients/conv1d_4/Pad_grad/Rank"
  input: "training/Adam/gradients/conv1d_4/Pad_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/Pad"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/Pad_grad/Slice/begin"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/Pad"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/Pad_grad/Slice"
  op: "Slice"
  input: "conv1d_4/Pad/paddings"
  input: "training/Adam/gradients/conv1d_4/Pad_grad/Slice/begin"
  input: "training/Adam/gradients/conv1d_4/Pad_grad/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/Pad"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/Pad_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/Pad"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/Pad_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_4/Pad_grad/Slice"
  input: "training/Adam/gradients/conv1d_4/Pad_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/Pad"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/Pad_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_3/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/Pad"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_4/Pad_grad/Slice_1"
  op: "Slice"
  input: "training/Adam/gradients/conv1d_4/convolution/ExpandDims_grad/Reshape"
  input: "training/Adam/gradients/conv1d_4/Pad_grad/Reshape"
  input: "training/Adam/gradients/conv1d_4/Pad_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/Pad"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_3/Squeeze_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_3/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_3/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_3/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_4/Pad_grad/Slice_1"
  input: "training/Adam/gradients/max_pooling1d_3/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_3/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_3/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "max_pooling1d_3/ExpandDims"
  input: "max_pooling1d_3/MaxPool"
  input: "training/Adam/gradients/max_pooling1d_3/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_3/MaxPool"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_3/ExpandDims_grad/Shape"
  op: "Shape"
  input: "conv1d_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_3/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_3/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/max_pooling1d_3/MaxPool_grad/MaxPoolGrad"
  input: "training/Adam/gradients/max_pooling1d_3/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_3/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/max_pooling1d_3/ExpandDims_grad/Reshape"
  input: "conv1d_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/add_grad/Shape"
  op: "Shape"
  input: "conv1d_3/convolution/BatchToSpaceND"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/conv1d_3/add_grad/Shape"
  input: "training/Adam/gradients/conv1d_3/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_3/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_3/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_3/add_grad/Sum"
  input: "training/Adam/gradients/conv1d_3/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_3/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_3/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_3/add_grad/Sum_1"
  input: "training/Adam/gradients/conv1d_3/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/convolution/BatchToSpaceND_grad/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "training/Adam/gradients/conv1d_3/add_grad/Reshape"
  input: "conv1d_3/convolution/BatchToSpaceND/block_shape"
  input: "conv1d_3/convolution/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/convolution/BatchToSpaceND"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/Reshape_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/Reshape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/Reshape_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_3/add_grad/Reshape_1"
  input: "training/Adam/gradients/conv1d_3/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/Reshape"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/convolution/Squeeze_grad/Shape"
  op: "Shape"
  input: "conv1d_3/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/convolution/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/convolution/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_3/convolution/BatchToSpaceND_grad/SpaceToBatchND"
  input: "training/Adam/gradients/conv1d_3/convolution/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/convolution/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/convolution/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "conv1d_3/convolution/ExpandDims"
  input: "conv1d_3/convolution/ExpandDims_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/convolution/Conv2D_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\005\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/convolution/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_3/convolution/Conv2D_grad/ShapeN"
  input: "conv1d_3/convolution/ExpandDims_1"
  input: "training/Adam/gradients/conv1d_3/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/convolution/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv1d_3/convolution/ExpandDims"
  input: "training/Adam/gradients/conv1d_3/convolution/Conv2D_grad/Const"
  input: "training/Adam/gradients/conv1d_3/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/convolution/ExpandDims_grad/Shape"
  op: "Shape"
  input: "conv1d_3/convolution/SpaceToBatchND"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/convolution/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/convolution/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_3/convolution/Conv2D_grad/Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_3/convolution/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/convolution/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/convolution/ExpandDims_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/convolution/ExpandDims_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/convolution/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_3/convolution/Conv2D_grad/Conv2DBackpropFilter"
  input: "training/Adam/gradients/conv1d_3/convolution/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/convolution/ExpandDims_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/convolution/SpaceToBatchND_grad/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "training/Adam/gradients/conv1d_3/convolution/ExpandDims_grad/Reshape"
  input: "conv1d_3/convolution/SpaceToBatchND/block_shape"
  input: "conv1d_3/convolution/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/convolution/SpaceToBatchND"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/Pad_grad/Rank"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/Pad"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/Pad_grad/stack/1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/Pad"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/Pad_grad/stack"
  op: "Pack"
  input: "training/Adam/gradients/conv1d_3/Pad_grad/Rank"
  input: "training/Adam/gradients/conv1d_3/Pad_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/Pad"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/Pad_grad/Slice/begin"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/Pad"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/Pad_grad/Slice"
  op: "Slice"
  input: "conv1d_3/Pad/paddings"
  input: "training/Adam/gradients/conv1d_3/Pad_grad/Slice/begin"
  input: "training/Adam/gradients/conv1d_3/Pad_grad/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/Pad"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/Pad_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/Pad"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/Pad_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_3/Pad_grad/Slice"
  input: "training/Adam/gradients/conv1d_3/Pad_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/Pad"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/Pad_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_2/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/Pad"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_3/Pad_grad/Slice_1"
  op: "Slice"
  input: "training/Adam/gradients/conv1d_3/convolution/SpaceToBatchND_grad/BatchToSpaceND"
  input: "training/Adam/gradients/conv1d_3/Pad_grad/Reshape"
  input: "training/Adam/gradients/conv1d_3/Pad_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/Pad"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_2/Squeeze_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_2/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_2/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_2/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_3/Pad_grad/Slice_1"
  input: "training/Adam/gradients/max_pooling1d_2/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_2/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_2/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "max_pooling1d_2/ExpandDims"
  input: "max_pooling1d_2/MaxPool"
  input: "training/Adam/gradients/max_pooling1d_2/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_2/MaxPool"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_2/ExpandDims_grad/Shape"
  op: "Shape"
  input: "conv1d_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_2/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_2/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/max_pooling1d_2/MaxPool_grad/MaxPoolGrad"
  input: "training/Adam/gradients/max_pooling1d_2/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_2/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/max_pooling1d_2/ExpandDims_grad/Reshape"
  input: "conv1d_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/add_grad/Shape"
  op: "Shape"
  input: "conv1d_2/convolution/BatchToSpaceND"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/conv1d_2/add_grad/Shape"
  input: "training/Adam/gradients/conv1d_2/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_2/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_2/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_2/add_grad/Sum"
  input: "training/Adam/gradients/conv1d_2/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_2/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_2/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_2/add_grad/Sum_1"
  input: "training/Adam/gradients/conv1d_2/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/convolution/BatchToSpaceND_grad/SpaceToBatchND"
  op: "SpaceToBatchND"
  input: "training/Adam/gradients/conv1d_2/add_grad/Reshape"
  input: "conv1d_2/convolution/BatchToSpaceND/block_shape"
  input: "conv1d_2/convolution/BatchToSpaceND/crops"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/convolution/BatchToSpaceND"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/Reshape_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/Reshape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/Reshape_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_2/add_grad/Reshape_1"
  input: "training/Adam/gradients/conv1d_2/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/Reshape"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/convolution/Squeeze_grad/Shape"
  op: "Shape"
  input: "conv1d_2/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/convolution/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/convolution/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_2/convolution/BatchToSpaceND_grad/SpaceToBatchND"
  input: "training/Adam/gradients/conv1d_2/convolution/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/convolution/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/convolution/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "conv1d_2/convolution/ExpandDims"
  input: "conv1d_2/convolution/ExpandDims_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/convolution/Conv2D_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\005\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/convolution/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_2/convolution/Conv2D_grad/ShapeN"
  input: "conv1d_2/convolution/ExpandDims_1"
  input: "training/Adam/gradients/conv1d_2/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/convolution/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv1d_2/convolution/ExpandDims"
  input: "training/Adam/gradients/conv1d_2/convolution/Conv2D_grad/Const"
  input: "training/Adam/gradients/conv1d_2/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/convolution/ExpandDims_grad/Shape"
  op: "Shape"
  input: "conv1d_2/convolution/SpaceToBatchND"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/convolution/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/convolution/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_2/convolution/Conv2D_grad/Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_2/convolution/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/convolution/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/convolution/ExpandDims_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/convolution/ExpandDims_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/convolution/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_2/convolution/Conv2D_grad/Conv2DBackpropFilter"
  input: "training/Adam/gradients/conv1d_2/convolution/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/convolution/ExpandDims_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/convolution/SpaceToBatchND_grad/BatchToSpaceND"
  op: "BatchToSpaceND"
  input: "training/Adam/gradients/conv1d_2/convolution/ExpandDims_grad/Reshape"
  input: "conv1d_2/convolution/SpaceToBatchND/block_shape"
  input: "conv1d_2/convolution/SpaceToBatchND/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tblock_shape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tcrops"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/convolution/SpaceToBatchND"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/Pad_grad/Rank"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/Pad"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/Pad_grad/stack/1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/Pad"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/Pad_grad/stack"
  op: "Pack"
  input: "training/Adam/gradients/conv1d_2/Pad_grad/Rank"
  input: "training/Adam/gradients/conv1d_2/Pad_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/Pad"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/Pad_grad/Slice/begin"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/Pad"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/Pad_grad/Slice"
  op: "Slice"
  input: "conv1d_2/Pad/paddings"
  input: "training/Adam/gradients/conv1d_2/Pad_grad/Slice/begin"
  input: "training/Adam/gradients/conv1d_2/Pad_grad/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/Pad"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/Pad_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/Pad"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/Pad_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_2/Pad_grad/Slice"
  input: "training/Adam/gradients/conv1d_2/Pad_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/Pad"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/Pad_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_1/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/Pad"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_2/Pad_grad/Slice_1"
  op: "Slice"
  input: "training/Adam/gradients/conv1d_2/convolution/SpaceToBatchND_grad/BatchToSpaceND"
  input: "training/Adam/gradients/conv1d_2/Pad_grad/Reshape"
  input: "training/Adam/gradients/conv1d_2/Pad_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/Pad"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_1/Squeeze_grad/Shape"
  op: "Shape"
  input: "max_pooling1d_1/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_1/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_1/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_2/Pad_grad/Slice_1"
  input: "training/Adam/gradients/max_pooling1d_1/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_1/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_1/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "max_pooling1d_1/ExpandDims"
  input: "max_pooling1d_1/MaxPool"
  input: "training/Adam/gradients/max_pooling1d_1/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_1/MaxPool"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_1/ExpandDims_grad/Shape"
  op: "Shape"
  input: "conv1d_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_1/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/max_pooling1d_1/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/max_pooling1d_1/MaxPool_grad/MaxPoolGrad"
  input: "training/Adam/gradients/max_pooling1d_1/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@max_pooling1d_1/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "training/Adam/gradients/max_pooling1d_1/ExpandDims_grad/Reshape"
  input: "conv1d_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/Relu"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/add_grad/Shape"
  op: "Shape"
  input: "conv1d_1/convolution/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/conv1d_1/add_grad/Shape"
  input: "training/Adam/gradients/conv1d_1/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_1/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_1/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_1/add_grad/Sum"
  input: "training/Adam/gradients/conv1d_1/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/conv1d_1/Relu_grad/ReluGrad"
  input: "training/Adam/gradients/conv1d_1/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_1/add_grad/Sum_1"
  input: "training/Adam/gradients/conv1d_1/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/convolution/Squeeze_grad/Shape"
  op: "Shape"
  input: "conv1d_1/convolution/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/convolution/Squeeze"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/convolution/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_1/add_grad/Reshape"
  input: "training/Adam/gradients/conv1d_1/convolution/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/convolution/Squeeze"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/Reshape_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/Reshape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/Reshape_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_1/add_grad/Reshape_1"
  input: "training/Adam/gradients/conv1d_1/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/Reshape"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/convolution/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "conv1d_1/convolution/ExpandDims"
  input: "conv1d_1/convolution/ExpandDims_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/convolution/Conv2D_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\t\000\000\000\003\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/convolution/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "training/Adam/gradients/conv1d_1/convolution/Conv2D_grad/ShapeN"
  input: "conv1d_1/convolution/ExpandDims_1"
  input: "training/Adam/gradients/conv1d_1/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/convolution/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv1d_1/convolution/ExpandDims"
  input: "training/Adam/gradients/conv1d_1/convolution/Conv2D_grad/Const"
  input: "training/Adam/gradients/conv1d_1/convolution/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/convolution/Conv2D"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/convolution/ExpandDims_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/convolution/ExpandDims_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\t\000\000\000\003\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/conv1d_1/convolution/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/conv1d_1/convolution/Conv2D_grad/Conv2DBackpropFilter"
  input: "training/Adam/gradients/conv1d_1/convolution/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/convolution/ExpandDims_1"
      }
    }
  }
}
node {
  name: "training/Adam/AssignAdd/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/AssignAdd"
  op: "AssignAdd"
  input: "Adam/iterations"
  input: "training/Adam/AssignAdd/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Cast"
  op: "Cast"
  input: "Adam/iterations/read"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "training/Adam/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/add"
  op: "Add"
  input: "training/Adam/Cast"
  input: "training/Adam/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Pow"
  op: "Pow"
  input: "Adam/beta_2/read"
  input: "training/Adam/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub"
  op: "Sub"
  input: "training/Adam/sub/x"
  input: "training/Adam/Pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value/Minimum"
  op: "Minimum"
  input: "training/Adam/sub"
  input: "training/Adam/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value"
  op: "Maximum"
  input: "training/Adam/clip_by_value/Minimum"
  input: "training/Adam/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt"
  op: "Sqrt"
  input: "training/Adam/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Pow_1"
  op: "Pow"
  input: "Adam/beta_1/read"
  input: "training/Adam/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_1"
  op: "Sub"
  input: "training/Adam/sub_1/x"
  input: "training/Adam/Pow_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv"
  op: "RealDiv"
  input: "training/Adam/Sqrt"
  input: "training/Adam/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul"
  op: "Mul"
  input: "Adam/lr/read"
  input: "training/Adam/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\t\000\000\000\003\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros"
  op: "Fill"
  input: "training/Adam/zeros/shape_as_tensor"
  input: "training/Adam/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 9
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable/Assign"
  op: "Assign"
  input: "training/Adam/Variable"
  input: "training/Adam/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable/read"
  op: "Identity"
  input: "training/Adam/Variable"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_1/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/zeros_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_1"
  op: "Fill"
  input: "training/Adam/zeros_1/shape_as_tensor"
  input: "training/Adam/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_1/Assign"
  op: "Assign"
  input: "training/Adam/Variable_1"
  input: "training/Adam/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_1/read"
  op: "Identity"
  input: "training/Adam/Variable_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_2/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_2"
  op: "Fill"
  input: "training/Adam/zeros_2/shape_as_tensor"
  input: "training/Adam/zeros_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_2"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_2/Assign"
  op: "Assign"
  input: "training/Adam/Variable_2"
  input: "training/Adam/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_2/read"
  op: "Identity"
  input: "training/Adam/Variable_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_3/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/zeros_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_3"
  op: "Fill"
  input: "training/Adam/zeros_3/shape_as_tensor"
  input: "training/Adam/zeros_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_3"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_3/Assign"
  op: "Assign"
  input: "training/Adam/Variable_3"
  input: "training/Adam/zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_3/read"
  op: "Identity"
  input: "training/Adam/Variable_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_4/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_4"
  op: "Fill"
  input: "training/Adam/zeros_4/shape_as_tensor"
  input: "training/Adam/zeros_4/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_4"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_4/Assign"
  op: "Assign"
  input: "training/Adam/Variable_4"
  input: "training/Adam/zeros_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_4/read"
  op: "Identity"
  input: "training/Adam/Variable_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_5/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/zeros_5/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_5"
  op: "Fill"
  input: "training/Adam/zeros_5/shape_as_tensor"
  input: "training/Adam/zeros_5/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_5"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_5/Assign"
  op: "Assign"
  input: "training/Adam/Variable_5"
  input: "training/Adam/zeros_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_5/read"
  op: "Identity"
  input: "training/Adam/Variable_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_6/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_6/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_6"
  op: "Fill"
  input: "training/Adam/zeros_6/shape_as_tensor"
  input: "training/Adam/zeros_6/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_6"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_6/Assign"
  op: "Assign"
  input: "training/Adam/Variable_6"
  input: "training/Adam/zeros_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_6/read"
  op: "Identity"
  input: "training/Adam/Variable_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_7/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/zeros_7/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_7"
  op: "Fill"
  input: "training/Adam/zeros_7/shape_as_tensor"
  input: "training/Adam/zeros_7/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_7"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_7/Assign"
  op: "Assign"
  input: "training/Adam/Variable_7"
  input: "training/Adam/zeros_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_7/read"
  op: "Identity"
  input: "training/Adam/Variable_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_8/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_8/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_8"
  op: "Fill"
  input: "training/Adam/zeros_8/shape_as_tensor"
  input: "training/Adam/zeros_8/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_8"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_8/Assign"
  op: "Assign"
  input: "training/Adam/Variable_8"
  input: "training/Adam/zeros_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_8/read"
  op: "Identity"
  input: "training/Adam/Variable_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_9/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_9/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_9"
  op: "Fill"
  input: "training/Adam/zeros_9/shape_as_tensor"
  input: "training/Adam/zeros_9/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_9"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_9/Assign"
  op: "Assign"
  input: "training/Adam/Variable_9"
  input: "training/Adam/zeros_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_9/read"
  op: "Identity"
  input: "training/Adam/Variable_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_10/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "training/Adam/zeros_10/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_10"
  op: "Fill"
  input: "training/Adam/zeros_10/shape_as_tensor"
  input: "training/Adam/zeros_10/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_10"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_10/Assign"
  op: "Assign"
  input: "training/Adam/Variable_10"
  input: "training/Adam/zeros_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_10/read"
  op: "Identity"
  input: "training/Adam/Variable_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_11/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_11/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_11"
  op: "Fill"
  input: "training/Adam/zeros_11/shape_as_tensor"
  input: "training/Adam/zeros_11/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_11"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_11/Assign"
  op: "Assign"
  input: "training/Adam/Variable_11"
  input: "training/Adam/zeros_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_11/read"
  op: "Identity"
  input: "training/Adam/Variable_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_12/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_12/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_12"
  op: "Fill"
  input: "training/Adam/zeros_12/shape_as_tensor"
  input: "training/Adam/zeros_12/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_12"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_12/Assign"
  op: "Assign"
  input: "training/Adam/Variable_12"
  input: "training/Adam/zeros_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_12/read"
  op: "Identity"
  input: "training/Adam/Variable_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_13/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/zeros_13/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_13"
  op: "Fill"
  input: "training/Adam/zeros_13/shape_as_tensor"
  input: "training/Adam/zeros_13/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_13"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_13/Assign"
  op: "Assign"
  input: "training/Adam/Variable_13"
  input: "training/Adam/zeros_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_13/read"
  op: "Identity"
  input: "training/Adam/Variable_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_14/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_14/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_14"
  op: "Fill"
  input: "training/Adam/zeros_14/shape_as_tensor"
  input: "training/Adam/zeros_14/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_14"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_14/Assign"
  op: "Assign"
  input: "training/Adam/Variable_14"
  input: "training/Adam/zeros_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_14/read"
  op: "Identity"
  input: "training/Adam/Variable_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_15/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_15/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_15"
  op: "Fill"
  input: "training/Adam/zeros_15/shape_as_tensor"
  input: "training/Adam/zeros_15/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_15"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_15/Assign"
  op: "Assign"
  input: "training/Adam/Variable_15"
  input: "training/Adam/zeros_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_15/read"
  op: "Identity"
  input: "training/Adam/Variable_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_16/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/zeros_16/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_16"
  op: "Fill"
  input: "training/Adam/zeros_16/shape_as_tensor"
  input: "training/Adam/zeros_16/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_16"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_16/Assign"
  op: "Assign"
  input: "training/Adam/Variable_16"
  input: "training/Adam/zeros_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_16/read"
  op: "Identity"
  input: "training/Adam/Variable_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_17/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_17/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_17"
  op: "Fill"
  input: "training/Adam/zeros_17/shape_as_tensor"
  input: "training/Adam/zeros_17/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_17"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_17/Assign"
  op: "Assign"
  input: "training/Adam/Variable_17"
  input: "training/Adam/zeros_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_17/read"
  op: "Identity"
  input: "training/Adam/Variable_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_18/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/zeros_18/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_18"
  op: "Fill"
  input: "training/Adam/zeros_18/shape_as_tensor"
  input: "training/Adam/zeros_18/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_18"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_18/Assign"
  op: "Assign"
  input: "training/Adam/Variable_18"
  input: "training/Adam/zeros_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_18/read"
  op: "Identity"
  input: "training/Adam/Variable_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_19/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\006\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_19/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_19"
  op: "Fill"
  input: "training/Adam/zeros_19/shape_as_tensor"
  input: "training/Adam/zeros_19/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_19"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_19/Assign"
  op: "Assign"
  input: "training/Adam/Variable_19"
  input: "training/Adam/zeros_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_19/read"
  op: "Identity"
  input: "training/Adam/Variable_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_20/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "training/Adam/zeros_20/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_20"
  op: "Fill"
  input: "training/Adam/zeros_20/shape_as_tensor"
  input: "training/Adam/zeros_20/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_20"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_20/Assign"
  op: "Assign"
  input: "training/Adam/Variable_20"
  input: "training/Adam/zeros_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_20/read"
  op: "Identity"
  input: "training/Adam/Variable_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_21/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\t\000\000\000\003\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_21/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_21"
  op: "Fill"
  input: "training/Adam/zeros_21/shape_as_tensor"
  input: "training/Adam/zeros_21/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_21"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 9
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_21/Assign"
  op: "Assign"
  input: "training/Adam/Variable_21"
  input: "training/Adam/zeros_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_21/read"
  op: "Identity"
  input: "training/Adam/Variable_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_22/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/zeros_22/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_22"
  op: "Fill"
  input: "training/Adam/zeros_22/shape_as_tensor"
  input: "training/Adam/zeros_22/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_22"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_22/Assign"
  op: "Assign"
  input: "training/Adam/Variable_22"
  input: "training/Adam/zeros_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_22"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_22/read"
  op: "Identity"
  input: "training/Adam/Variable_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_22"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_23/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_23/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_23"
  op: "Fill"
  input: "training/Adam/zeros_23/shape_as_tensor"
  input: "training/Adam/zeros_23/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_23"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_23/Assign"
  op: "Assign"
  input: "training/Adam/Variable_23"
  input: "training/Adam/zeros_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_23"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_23/read"
  op: "Identity"
  input: "training/Adam/Variable_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_23"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_24/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/zeros_24/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_24"
  op: "Fill"
  input: "training/Adam/zeros_24/shape_as_tensor"
  input: "training/Adam/zeros_24/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_24"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_24/Assign"
  op: "Assign"
  input: "training/Adam/Variable_24"
  input: "training/Adam/zeros_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_24"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_24/read"
  op: "Identity"
  input: "training/Adam/Variable_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_24"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_25/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_25/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_25"
  op: "Fill"
  input: "training/Adam/zeros_25/shape_as_tensor"
  input: "training/Adam/zeros_25/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_25"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_25/Assign"
  op: "Assign"
  input: "training/Adam/Variable_25"
  input: "training/Adam/zeros_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_25"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_25/read"
  op: "Identity"
  input: "training/Adam/Variable_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_25"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_26/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/zeros_26/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_26"
  op: "Fill"
  input: "training/Adam/zeros_26/shape_as_tensor"
  input: "training/Adam/zeros_26/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_26"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_26/Assign"
  op: "Assign"
  input: "training/Adam/Variable_26"
  input: "training/Adam/zeros_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_26"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_26/read"
  op: "Identity"
  input: "training/Adam/Variable_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_26"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_27/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_27/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_27"
  op: "Fill"
  input: "training/Adam/zeros_27/shape_as_tensor"
  input: "training/Adam/zeros_27/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_27"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_27/Assign"
  op: "Assign"
  input: "training/Adam/Variable_27"
  input: "training/Adam/zeros_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_27"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_27/read"
  op: "Identity"
  input: "training/Adam/Variable_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_27"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_28/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "training/Adam/zeros_28/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_28"
  op: "Fill"
  input: "training/Adam/zeros_28/shape_as_tensor"
  input: "training/Adam/zeros_28/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_28"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_28/Assign"
  op: "Assign"
  input: "training/Adam/Variable_28"
  input: "training/Adam/zeros_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_28"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_28/read"
  op: "Identity"
  input: "training/Adam/Variable_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_28"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_29/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_29/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_29"
  op: "Fill"
  input: "training/Adam/zeros_29/shape_as_tensor"
  input: "training/Adam/zeros_29/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_29"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_29/Assign"
  op: "Assign"
  input: "training/Adam/Variable_29"
  input: "training/Adam/zeros_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_29"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_29/read"
  op: "Identity"
  input: "training/Adam/Variable_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_29"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_30/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_30/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_30"
  op: "Fill"
  input: "training/Adam/zeros_30/shape_as_tensor"
  input: "training/Adam/zeros_30/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_30"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_30/Assign"
  op: "Assign"
  input: "training/Adam/Variable_30"
  input: "training/Adam/zeros_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_30"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_30/read"
  op: "Identity"
  input: "training/Adam/Variable_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_30"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_31/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "training/Adam/zeros_31/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_31"
  op: "Fill"
  input: "training/Adam/zeros_31/shape_as_tensor"
  input: "training/Adam/zeros_31/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_31"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_31/Assign"
  op: "Assign"
  input: "training/Adam/Variable_31"
  input: "training/Adam/zeros_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_31"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_31/read"
  op: "Identity"
  input: "training/Adam/Variable_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_31"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_32/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_32/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_32"
  op: "Fill"
  input: "training/Adam/zeros_32/shape_as_tensor"
  input: "training/Adam/zeros_32/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_32"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_32/Assign"
  op: "Assign"
  input: "training/Adam/Variable_32"
  input: "training/Adam/zeros_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_32"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_32/read"
  op: "Identity"
  input: "training/Adam/Variable_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_32"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_33/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_33/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_33"
  op: "Fill"
  input: "training/Adam/zeros_33/shape_as_tensor"
  input: "training/Adam/zeros_33/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_33"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_33/Assign"
  op: "Assign"
  input: "training/Adam/Variable_33"
  input: "training/Adam/zeros_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_33"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_33/read"
  op: "Identity"
  input: "training/Adam/Variable_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_33"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_34/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/zeros_34/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_34"
  op: "Fill"
  input: "training/Adam/zeros_34/shape_as_tensor"
  input: "training/Adam/zeros_34/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_34"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_34/Assign"
  op: "Assign"
  input: "training/Adam/Variable_34"
  input: "training/Adam/zeros_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_34"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_34/read"
  op: "Identity"
  input: "training/Adam/Variable_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_34"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_35/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_35/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_35"
  op: "Fill"
  input: "training/Adam/zeros_35/shape_as_tensor"
  input: "training/Adam/zeros_35/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_35"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_35/Assign"
  op: "Assign"
  input: "training/Adam/Variable_35"
  input: "training/Adam/zeros_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_35"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_35/read"
  op: "Identity"
  input: "training/Adam/Variable_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_35"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_36/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_36/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_36"
  op: "Fill"
  input: "training/Adam/zeros_36/shape_as_tensor"
  input: "training/Adam/zeros_36/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_36"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_36/Assign"
  op: "Assign"
  input: "training/Adam/Variable_36"
  input: "training/Adam/zeros_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_36"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_36/read"
  op: "Identity"
  input: "training/Adam/Variable_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_36"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_37/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/zeros_37/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_37"
  op: "Fill"
  input: "training/Adam/zeros_37/shape_as_tensor"
  input: "training/Adam/zeros_37/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_37"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_37/Assign"
  op: "Assign"
  input: "training/Adam/Variable_37"
  input: "training/Adam/zeros_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_37"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_37/read"
  op: "Identity"
  input: "training/Adam/Variable_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_37"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_38/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_38/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_38"
  op: "Fill"
  input: "training/Adam/zeros_38/shape_as_tensor"
  input: "training/Adam/zeros_38/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_38"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_38/Assign"
  op: "Assign"
  input: "training/Adam/Variable_38"
  input: "training/Adam/zeros_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_38"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_38/read"
  op: "Identity"
  input: "training/Adam/Variable_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_38"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_39/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/zeros_39/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_39"
  op: "Fill"
  input: "training/Adam/zeros_39/shape_as_tensor"
  input: "training/Adam/zeros_39/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_39"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_39/Assign"
  op: "Assign"
  input: "training/Adam/Variable_39"
  input: "training/Adam/zeros_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_39"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_39/read"
  op: "Identity"
  input: "training/Adam/Variable_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_39"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_40/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\006\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_40/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_40"
  op: "Fill"
  input: "training/Adam/zeros_40/shape_as_tensor"
  input: "training/Adam/zeros_40/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_40"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_40/Assign"
  op: "Assign"
  input: "training/Adam/Variable_40"
  input: "training/Adam/zeros_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_40"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_40/read"
  op: "Identity"
  input: "training/Adam/Variable_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_40"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_41/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "training/Adam/zeros_41/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_41"
  op: "Fill"
  input: "training/Adam/zeros_41/shape_as_tensor"
  input: "training/Adam/zeros_41/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_41"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_41/Assign"
  op: "Assign"
  input: "training/Adam/Variable_41"
  input: "training/Adam/zeros_41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_41"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_41/read"
  op: "Identity"
  input: "training/Adam/Variable_41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_41"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_42/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_42/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_42"
  op: "Fill"
  input: "training/Adam/zeros_42/shape_as_tensor"
  input: "training/Adam/zeros_42/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_42"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_42/Assign"
  op: "Assign"
  input: "training/Adam/Variable_42"
  input: "training/Adam/zeros_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_42"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_42/read"
  op: "Identity"
  input: "training/Adam/Variable_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_42"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_43/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_43/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_43"
  op: "Fill"
  input: "training/Adam/zeros_43/shape_as_tensor"
  input: "training/Adam/zeros_43/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_43"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_43/Assign"
  op: "Assign"
  input: "training/Adam/Variable_43"
  input: "training/Adam/zeros_43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_43"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_43/read"
  op: "Identity"
  input: "training/Adam/Variable_43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_43"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_44/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_44/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_44"
  op: "Fill"
  input: "training/Adam/zeros_44/shape_as_tensor"
  input: "training/Adam/zeros_44/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_44"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_44/Assign"
  op: "Assign"
  input: "training/Adam/Variable_44"
  input: "training/Adam/zeros_44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_44"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_44/read"
  op: "Identity"
  input: "training/Adam/Variable_44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_44"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_45/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_45/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_45"
  op: "Fill"
  input: "training/Adam/zeros_45/shape_as_tensor"
  input: "training/Adam/zeros_45/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_45"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_45/Assign"
  op: "Assign"
  input: "training/Adam/Variable_45"
  input: "training/Adam/zeros_45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_45"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_45/read"
  op: "Identity"
  input: "training/Adam/Variable_45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_45"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_46/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_46/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_46"
  op: "Fill"
  input: "training/Adam/zeros_46/shape_as_tensor"
  input: "training/Adam/zeros_46/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_46"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_46/Assign"
  op: "Assign"
  input: "training/Adam/Variable_46"
  input: "training/Adam/zeros_46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_46"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_46/read"
  op: "Identity"
  input: "training/Adam/Variable_46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_46"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_47/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_47/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_47"
  op: "Fill"
  input: "training/Adam/zeros_47/shape_as_tensor"
  input: "training/Adam/zeros_47/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_47"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_47/Assign"
  op: "Assign"
  input: "training/Adam/Variable_47"
  input: "training/Adam/zeros_47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_47"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_47/read"
  op: "Identity"
  input: "training/Adam/Variable_47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_47"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_48/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_48/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_48"
  op: "Fill"
  input: "training/Adam/zeros_48/shape_as_tensor"
  input: "training/Adam/zeros_48/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_48"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_48/Assign"
  op: "Assign"
  input: "training/Adam/Variable_48"
  input: "training/Adam/zeros_48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_48"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_48/read"
  op: "Identity"
  input: "training/Adam/Variable_48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_48"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_49/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_49/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_49"
  op: "Fill"
  input: "training/Adam/zeros_49/shape_as_tensor"
  input: "training/Adam/zeros_49/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_49"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_49/Assign"
  op: "Assign"
  input: "training/Adam/Variable_49"
  input: "training/Adam/zeros_49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_49"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_49/read"
  op: "Identity"
  input: "training/Adam/Variable_49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_49"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_50/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_50/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_50"
  op: "Fill"
  input: "training/Adam/zeros_50/shape_as_tensor"
  input: "training/Adam/zeros_50/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_50"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_50/Assign"
  op: "Assign"
  input: "training/Adam/Variable_50"
  input: "training/Adam/zeros_50"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_50"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_50/read"
  op: "Identity"
  input: "training/Adam/Variable_50"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_50"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_51/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_51/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_51"
  op: "Fill"
  input: "training/Adam/zeros_51/shape_as_tensor"
  input: "training/Adam/zeros_51/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_51"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_51/Assign"
  op: "Assign"
  input: "training/Adam/Variable_51"
  input: "training/Adam/zeros_51"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_51"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_51/read"
  op: "Identity"
  input: "training/Adam/Variable_51"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_51"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_52/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_52/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_52"
  op: "Fill"
  input: "training/Adam/zeros_52/shape_as_tensor"
  input: "training/Adam/zeros_52/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_52"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_52/Assign"
  op: "Assign"
  input: "training/Adam/Variable_52"
  input: "training/Adam/zeros_52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_52"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_52/read"
  op: "Identity"
  input: "training/Adam/Variable_52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_52"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_53/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_53/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_53"
  op: "Fill"
  input: "training/Adam/zeros_53/shape_as_tensor"
  input: "training/Adam/zeros_53/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_53"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_53/Assign"
  op: "Assign"
  input: "training/Adam/Variable_53"
  input: "training/Adam/zeros_53"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_53"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_53/read"
  op: "Identity"
  input: "training/Adam/Variable_53"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_53"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_54/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_54/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_54"
  op: "Fill"
  input: "training/Adam/zeros_54/shape_as_tensor"
  input: "training/Adam/zeros_54/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_54"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_54/Assign"
  op: "Assign"
  input: "training/Adam/Variable_54"
  input: "training/Adam/zeros_54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_54"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_54/read"
  op: "Identity"
  input: "training/Adam/Variable_54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_54"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_55/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_55/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_55"
  op: "Fill"
  input: "training/Adam/zeros_55/shape_as_tensor"
  input: "training/Adam/zeros_55/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_55"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_55/Assign"
  op: "Assign"
  input: "training/Adam/Variable_55"
  input: "training/Adam/zeros_55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_55"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_55/read"
  op: "Identity"
  input: "training/Adam/Variable_55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_55"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_56/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_56/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_56"
  op: "Fill"
  input: "training/Adam/zeros_56/shape_as_tensor"
  input: "training/Adam/zeros_56/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_56"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_56/Assign"
  op: "Assign"
  input: "training/Adam/Variable_56"
  input: "training/Adam/zeros_56"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_56"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_56/read"
  op: "Identity"
  input: "training/Adam/Variable_56"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_56"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_57/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_57/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_57"
  op: "Fill"
  input: "training/Adam/zeros_57/shape_as_tensor"
  input: "training/Adam/zeros_57/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_57"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_57/Assign"
  op: "Assign"
  input: "training/Adam/Variable_57"
  input: "training/Adam/zeros_57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_57"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_57/read"
  op: "Identity"
  input: "training/Adam/Variable_57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_57"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_58/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_58/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_58"
  op: "Fill"
  input: "training/Adam/zeros_58/shape_as_tensor"
  input: "training/Adam/zeros_58/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_58"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_58/Assign"
  op: "Assign"
  input: "training/Adam/Variable_58"
  input: "training/Adam/zeros_58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_58"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_58/read"
  op: "Identity"
  input: "training/Adam/Variable_58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_58"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_59/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_59/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_59"
  op: "Fill"
  input: "training/Adam/zeros_59/shape_as_tensor"
  input: "training/Adam/zeros_59/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_59"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_59/Assign"
  op: "Assign"
  input: "training/Adam/Variable_59"
  input: "training/Adam/zeros_59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_59"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_59/read"
  op: "Identity"
  input: "training/Adam/Variable_59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_59"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_60/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_60/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_60"
  op: "Fill"
  input: "training/Adam/zeros_60/shape_as_tensor"
  input: "training/Adam/zeros_60/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_60"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_60/Assign"
  op: "Assign"
  input: "training/Adam/Variable_60"
  input: "training/Adam/zeros_60"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_60"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_60/read"
  op: "Identity"
  input: "training/Adam/Variable_60"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_60"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_61/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_61/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_61"
  op: "Fill"
  input: "training/Adam/zeros_61/shape_as_tensor"
  input: "training/Adam/zeros_61/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_61"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_61/Assign"
  op: "Assign"
  input: "training/Adam/Variable_61"
  input: "training/Adam/zeros_61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_61"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_61/read"
  op: "Identity"
  input: "training/Adam/Variable_61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_61"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_62/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_62/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_62"
  op: "Fill"
  input: "training/Adam/zeros_62/shape_as_tensor"
  input: "training/Adam/zeros_62/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_62"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_62/Assign"
  op: "Assign"
  input: "training/Adam/Variable_62"
  input: "training/Adam/zeros_62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_62"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_62/read"
  op: "Identity"
  input: "training/Adam/Variable_62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_62"
      }
    }
  }
}
node {
  name: "training/Adam/mul_1"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_2"
  op: "Sub"
  input: "training/Adam/sub_2/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_2"
  op: "Mul"
  input: "training/Adam/sub_2"
  input: "training/Adam/gradients/conv1d_1/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_1"
  op: "Add"
  input: "training/Adam/mul_1"
  input: "training/Adam/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_3"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_21/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_3"
  op: "Sub"
  input: "training/Adam/sub_3/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square"
  op: "Square"
  input: "training/Adam/gradients/conv1d_1/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_4"
  op: "Mul"
  input: "training/Adam/sub_3"
  input: "training/Adam/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_2"
  op: "Add"
  input: "training/Adam/mul_3"
  input: "training/Adam/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_5"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "training/Adam/add_2"
  input: "training/Adam/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_1"
  op: "Maximum"
  input: "training/Adam/clip_by_value_1/Minimum"
  input: "training/Adam/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_1"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_3"
  op: "Add"
  input: "training/Adam/Sqrt_1"
  input: "training/Adam/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_1"
  op: "RealDiv"
  input: "training/Adam/mul_5"
  input: "training/Adam/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_4"
  op: "Sub"
  input: "conv1d_1/kernel/read"
  input: "training/Adam/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign"
  op: "Assign"
  input: "training/Adam/Variable"
  input: "training/Adam/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_1"
  op: "Assign"
  input: "training/Adam/Variable_21"
  input: "training/Adam/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_2"
  op: "Assign"
  input: "conv1d_1/kernel"
  input: "training/Adam/sub_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_6"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_5/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_5"
  op: "Sub"
  input: "training/Adam/sub_5/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_7"
  op: "Mul"
  input: "training/Adam/sub_5"
  input: "training/Adam/gradients/conv1d_1/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_4"
  op: "Add"
  input: "training/Adam/mul_6"
  input: "training/Adam/mul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_8"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_22/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_6"
  op: "Sub"
  input: "training/Adam/sub_6/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_1"
  op: "Square"
  input: "training/Adam/gradients/conv1d_1/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_9"
  op: "Mul"
  input: "training/Adam/sub_6"
  input: "training/Adam/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_5"
  op: "Add"
  input: "training/Adam/mul_8"
  input: "training/Adam/mul_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_10"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "training/Adam/add_5"
  input: "training/Adam/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_2"
  op: "Maximum"
  input: "training/Adam/clip_by_value_2/Minimum"
  input: "training/Adam/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_2"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_6/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_6"
  op: "Add"
  input: "training/Adam/Sqrt_2"
  input: "training/Adam/add_6/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_2"
  op: "RealDiv"
  input: "training/Adam/mul_10"
  input: "training/Adam/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_7"
  op: "Sub"
  input: "conv1d_1/bias/read"
  input: "training/Adam/truediv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_3"
  op: "Assign"
  input: "training/Adam/Variable_1"
  input: "training/Adam/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_4"
  op: "Assign"
  input: "training/Adam/Variable_22"
  input: "training/Adam/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_22"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_5"
  op: "Assign"
  input: "conv1d_1/bias"
  input: "training/Adam/sub_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_11"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_8/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_8"
  op: "Sub"
  input: "training/Adam/sub_8/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_12"
  op: "Mul"
  input: "training/Adam/sub_8"
  input: "training/Adam/gradients/conv1d_2/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_7"
  op: "Add"
  input: "training/Adam/mul_11"
  input: "training/Adam/mul_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_13"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_23/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_9/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_9"
  op: "Sub"
  input: "training/Adam/sub_9/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_2"
  op: "Square"
  input: "training/Adam/gradients/conv1d_2/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_14"
  op: "Mul"
  input: "training/Adam/sub_9"
  input: "training/Adam/Square_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_8"
  op: "Add"
  input: "training/Adam/mul_13"
  input: "training/Adam/mul_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_15"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_3/Minimum"
  op: "Minimum"
  input: "training/Adam/add_8"
  input: "training/Adam/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_3"
  op: "Maximum"
  input: "training/Adam/clip_by_value_3/Minimum"
  input: "training/Adam/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_3"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_9/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_9"
  op: "Add"
  input: "training/Adam/Sqrt_3"
  input: "training/Adam/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_3"
  op: "RealDiv"
  input: "training/Adam/mul_15"
  input: "training/Adam/add_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_10"
  op: "Sub"
  input: "conv1d_2/kernel/read"
  input: "training/Adam/truediv_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_6"
  op: "Assign"
  input: "training/Adam/Variable_2"
  input: "training/Adam/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_7"
  op: "Assign"
  input: "training/Adam/Variable_23"
  input: "training/Adam/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_23"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_8"
  op: "Assign"
  input: "conv1d_2/kernel"
  input: "training/Adam/sub_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_16"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_3/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_11/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_11"
  op: "Sub"
  input: "training/Adam/sub_11/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_17"
  op: "Mul"
  input: "training/Adam/sub_11"
  input: "training/Adam/gradients/conv1d_2/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_10"
  op: "Add"
  input: "training/Adam/mul_16"
  input: "training/Adam/mul_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_18"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_24/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_12/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_12"
  op: "Sub"
  input: "training/Adam/sub_12/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_3"
  op: "Square"
  input: "training/Adam/gradients/conv1d_2/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_19"
  op: "Mul"
  input: "training/Adam/sub_12"
  input: "training/Adam/Square_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_11"
  op: "Add"
  input: "training/Adam/mul_18"
  input: "training/Adam/mul_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_20"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_4/Minimum"
  op: "Minimum"
  input: "training/Adam/add_11"
  input: "training/Adam/Const_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_4"
  op: "Maximum"
  input: "training/Adam/clip_by_value_4/Minimum"
  input: "training/Adam/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_4"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_12/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_12"
  op: "Add"
  input: "training/Adam/Sqrt_4"
  input: "training/Adam/add_12/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_4"
  op: "RealDiv"
  input: "training/Adam/mul_20"
  input: "training/Adam/add_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_13"
  op: "Sub"
  input: "conv1d_2/bias/read"
  input: "training/Adam/truediv_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_9"
  op: "Assign"
  input: "training/Adam/Variable_3"
  input: "training/Adam/add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_10"
  op: "Assign"
  input: "training/Adam/Variable_24"
  input: "training/Adam/add_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_24"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_11"
  op: "Assign"
  input: "conv1d_2/bias"
  input: "training/Adam/sub_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_21"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_4/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_14/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_14"
  op: "Sub"
  input: "training/Adam/sub_14/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_22"
  op: "Mul"
  input: "training/Adam/sub_14"
  input: "training/Adam/gradients/conv1d_3/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_13"
  op: "Add"
  input: "training/Adam/mul_21"
  input: "training/Adam/mul_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_23"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_25/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_15/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_15"
  op: "Sub"
  input: "training/Adam/sub_15/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_4"
  op: "Square"
  input: "training/Adam/gradients/conv1d_3/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_24"
  op: "Mul"
  input: "training/Adam/sub_15"
  input: "training/Adam/Square_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_14"
  op: "Add"
  input: "training/Adam/mul_23"
  input: "training/Adam/mul_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_25"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_5/Minimum"
  op: "Minimum"
  input: "training/Adam/add_14"
  input: "training/Adam/Const_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_5"
  op: "Maximum"
  input: "training/Adam/clip_by_value_5/Minimum"
  input: "training/Adam/Const_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_5"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_15/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_15"
  op: "Add"
  input: "training/Adam/Sqrt_5"
  input: "training/Adam/add_15/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_5"
  op: "RealDiv"
  input: "training/Adam/mul_25"
  input: "training/Adam/add_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_16"
  op: "Sub"
  input: "conv1d_3/kernel/read"
  input: "training/Adam/truediv_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_12"
  op: "Assign"
  input: "training/Adam/Variable_4"
  input: "training/Adam/add_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_13"
  op: "Assign"
  input: "training/Adam/Variable_25"
  input: "training/Adam/add_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_25"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_14"
  op: "Assign"
  input: "conv1d_3/kernel"
  input: "training/Adam/sub_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_26"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_5/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_17/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_17"
  op: "Sub"
  input: "training/Adam/sub_17/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_27"
  op: "Mul"
  input: "training/Adam/sub_17"
  input: "training/Adam/gradients/conv1d_3/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_16"
  op: "Add"
  input: "training/Adam/mul_26"
  input: "training/Adam/mul_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_28"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_26/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_18/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_18"
  op: "Sub"
  input: "training/Adam/sub_18/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_5"
  op: "Square"
  input: "training/Adam/gradients/conv1d_3/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_29"
  op: "Mul"
  input: "training/Adam/sub_18"
  input: "training/Adam/Square_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_17"
  op: "Add"
  input: "training/Adam/mul_28"
  input: "training/Adam/mul_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_30"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_12"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_13"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_6/Minimum"
  op: "Minimum"
  input: "training/Adam/add_17"
  input: "training/Adam/Const_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_6"
  op: "Maximum"
  input: "training/Adam/clip_by_value_6/Minimum"
  input: "training/Adam/Const_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_6"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_18/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_18"
  op: "Add"
  input: "training/Adam/Sqrt_6"
  input: "training/Adam/add_18/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_6"
  op: "RealDiv"
  input: "training/Adam/mul_30"
  input: "training/Adam/add_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_19"
  op: "Sub"
  input: "conv1d_3/bias/read"
  input: "training/Adam/truediv_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_15"
  op: "Assign"
  input: "training/Adam/Variable_5"
  input: "training/Adam/add_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_16"
  op: "Assign"
  input: "training/Adam/Variable_26"
  input: "training/Adam/add_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_26"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_17"
  op: "Assign"
  input: "conv1d_3/bias"
  input: "training/Adam/sub_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_31"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_6/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_20/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_20"
  op: "Sub"
  input: "training/Adam/sub_20/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_32"
  op: "Mul"
  input: "training/Adam/sub_20"
  input: "training/Adam/gradients/conv1d_4/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_19"
  op: "Add"
  input: "training/Adam/mul_31"
  input: "training/Adam/mul_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_33"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_27/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_21/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_21"
  op: "Sub"
  input: "training/Adam/sub_21/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_6"
  op: "Square"
  input: "training/Adam/gradients/conv1d_4/convolution/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_34"
  op: "Mul"
  input: "training/Adam/sub_21"
  input: "training/Adam/Square_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_20"
  op: "Add"
  input: "training/Adam/mul_33"
  input: "training/Adam/mul_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_35"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_14"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_15"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_7/Minimum"
  op: "Minimum"
  input: "training/Adam/add_20"
  input: "training/Adam/Const_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_7"
  op: "Maximum"
  input: "training/Adam/clip_by_value_7/Minimum"
  input: "training/Adam/Const_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_7"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_21/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_21"
  op: "Add"
  input: "training/Adam/Sqrt_7"
  input: "training/Adam/add_21/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_7"
  op: "RealDiv"
  input: "training/Adam/mul_35"
  input: "training/Adam/add_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_22"
  op: "Sub"
  input: "conv1d_4/kernel/read"
  input: "training/Adam/truediv_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_18"
  op: "Assign"
  input: "training/Adam/Variable_6"
  input: "training/Adam/add_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_19"
  op: "Assign"
  input: "training/Adam/Variable_27"
  input: "training/Adam/add_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_27"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_20"
  op: "Assign"
  input: "conv1d_4/kernel"
  input: "training/Adam/sub_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_36"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_7/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_23/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_23"
  op: "Sub"
  input: "training/Adam/sub_23/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_37"
  op: "Mul"
  input: "training/Adam/sub_23"
  input: "training/Adam/gradients/conv1d_4/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_22"
  op: "Add"
  input: "training/Adam/mul_36"
  input: "training/Adam/mul_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_38"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_28/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_24/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_24"
  op: "Sub"
  input: "training/Adam/sub_24/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_7"
  op: "Square"
  input: "training/Adam/gradients/conv1d_4/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_39"
  op: "Mul"
  input: "training/Adam/sub_24"
  input: "training/Adam/Square_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_23"
  op: "Add"
  input: "training/Adam/mul_38"
  input: "training/Adam/mul_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_40"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_16"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_17"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_8/Minimum"
  op: "Minimum"
  input: "training/Adam/add_23"
  input: "training/Adam/Const_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_8"
  op: "Maximum"
  input: "training/Adam/clip_by_value_8/Minimum"
  input: "training/Adam/Const_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_8"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_24/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_24"
  op: "Add"
  input: "training/Adam/Sqrt_8"
  input: "training/Adam/add_24/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_8"
  op: "RealDiv"
  input: "training/Adam/mul_40"
  input: "training/Adam/add_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_25"
  op: "Sub"
  input: "conv1d_4/bias/read"
  input: "training/Adam/truediv_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_21"
  op: "Assign"
  input: "training/Adam/Variable_7"
  input: "training/Adam/add_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_22"
  op: "Assign"
  input: "training/Adam/Variable_28"
  input: "training/Adam/add_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_28"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_23"
  op: "Assign"
  input: "conv1d_4/bias"
  input: "training/Adam/sub_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_41"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_8/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_26/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_26"
  op: "Sub"
  input: "training/Adam/sub_26/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_42"
  op: "Mul"
  input: "training/Adam/sub_26"
  input: "training/Adam/gradients/AddN_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_25"
  op: "Add"
  input: "training/Adam/mul_41"
  input: "training/Adam/mul_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_43"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_29/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_27/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_27"
  op: "Sub"
  input: "training/Adam/sub_27/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_8"
  op: "Square"
  input: "training/Adam/gradients/AddN_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_44"
  op: "Mul"
  input: "training/Adam/sub_27"
  input: "training/Adam/Square_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_26"
  op: "Add"
  input: "training/Adam/mul_43"
  input: "training/Adam/mul_44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_45"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_18"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_19"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_9/Minimum"
  op: "Minimum"
  input: "training/Adam/add_26"
  input: "training/Adam/Const_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_9"
  op: "Maximum"
  input: "training/Adam/clip_by_value_9/Minimum"
  input: "training/Adam/Const_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_9"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_27/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_27"
  op: "Add"
  input: "training/Adam/Sqrt_9"
  input: "training/Adam/add_27/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_9"
  op: "RealDiv"
  input: "training/Adam/mul_45"
  input: "training/Adam/add_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_28"
  op: "Sub"
  input: "lstm_1/kernel/read"
  input: "training/Adam/truediv_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_24"
  op: "Assign"
  input: "training/Adam/Variable_8"
  input: "training/Adam/add_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_25"
  op: "Assign"
  input: "training/Adam/Variable_29"
  input: "training/Adam/add_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_29"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_26"
  op: "Assign"
  input: "lstm_1/kernel"
  input: "training/Adam/sub_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_46"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_9/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_29/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_29"
  op: "Sub"
  input: "training/Adam/sub_29/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_47"
  op: "Mul"
  input: "training/Adam/sub_29"
  input: "training/Adam/gradients/AddN_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_28"
  op: "Add"
  input: "training/Adam/mul_46"
  input: "training/Adam/mul_47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_48"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_30/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_30/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_30"
  op: "Sub"
  input: "training/Adam/sub_30/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_9"
  op: "Square"
  input: "training/Adam/gradients/AddN_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_49"
  op: "Mul"
  input: "training/Adam/sub_30"
  input: "training/Adam/Square_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_29"
  op: "Add"
  input: "training/Adam/mul_48"
  input: "training/Adam/mul_49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_50"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_20"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_21"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_10/Minimum"
  op: "Minimum"
  input: "training/Adam/add_29"
  input: "training/Adam/Const_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_10"
  op: "Maximum"
  input: "training/Adam/clip_by_value_10/Minimum"
  input: "training/Adam/Const_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_10"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_30/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_30"
  op: "Add"
  input: "training/Adam/Sqrt_10"
  input: "training/Adam/add_30/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_10"
  op: "RealDiv"
  input: "training/Adam/mul_50"
  input: "training/Adam/add_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_31"
  op: "Sub"
  input: "lstm_1/recurrent_kernel/read"
  input: "training/Adam/truediv_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_27"
  op: "Assign"
  input: "training/Adam/Variable_9"
  input: "training/Adam/add_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_28"
  op: "Assign"
  input: "training/Adam/Variable_30"
  input: "training/Adam/add_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_30"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_29"
  op: "Assign"
  input: "lstm_1/recurrent_kernel"
  input: "training/Adam/sub_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_51"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_10/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_32/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_32"
  op: "Sub"
  input: "training/Adam/sub_32/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_52"
  op: "Mul"
  input: "training/Adam/sub_32"
  input: "training/Adam/gradients/AddN_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_31"
  op: "Add"
  input: "training/Adam/mul_51"
  input: "training/Adam/mul_52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_53"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_31/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_33/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_33"
  op: "Sub"
  input: "training/Adam/sub_33/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_10"
  op: "Square"
  input: "training/Adam/gradients/AddN_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_54"
  op: "Mul"
  input: "training/Adam/sub_33"
  input: "training/Adam/Square_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_32"
  op: "Add"
  input: "training/Adam/mul_53"
  input: "training/Adam/mul_54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_55"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_22"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_23"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_11/Minimum"
  op: "Minimum"
  input: "training/Adam/add_32"
  input: "training/Adam/Const_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_11"
  op: "Maximum"
  input: "training/Adam/clip_by_value_11/Minimum"
  input: "training/Adam/Const_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_11"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_33/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_33"
  op: "Add"
  input: "training/Adam/Sqrt_11"
  input: "training/Adam/add_33/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_11"
  op: "RealDiv"
  input: "training/Adam/mul_55"
  input: "training/Adam/add_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_34"
  op: "Sub"
  input: "lstm_1/bias/read"
  input: "training/Adam/truediv_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_30"
  op: "Assign"
  input: "training/Adam/Variable_10"
  input: "training/Adam/add_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_31"
  op: "Assign"
  input: "training/Adam/Variable_31"
  input: "training/Adam/add_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_31"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_32"
  op: "Assign"
  input: "lstm_1/bias"
  input: "training/Adam/sub_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_56"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_11/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_35/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_35"
  op: "Sub"
  input: "training/Adam/sub_35/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_57"
  op: "Mul"
  input: "training/Adam/sub_35"
  input: "training/Adam/gradients/AddN_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_34"
  op: "Add"
  input: "training/Adam/mul_56"
  input: "training/Adam/mul_57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_58"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_32/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_36/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_36"
  op: "Sub"
  input: "training/Adam/sub_36/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_11"
  op: "Square"
  input: "training/Adam/gradients/AddN_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_59"
  op: "Mul"
  input: "training/Adam/sub_36"
  input: "training/Adam/Square_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_35"
  op: "Add"
  input: "training/Adam/mul_58"
  input: "training/Adam/mul_59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_60"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_24"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_25"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_12/Minimum"
  op: "Minimum"
  input: "training/Adam/add_35"
  input: "training/Adam/Const_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_12"
  op: "Maximum"
  input: "training/Adam/clip_by_value_12/Minimum"
  input: "training/Adam/Const_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_12"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_36/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_36"
  op: "Add"
  input: "training/Adam/Sqrt_12"
  input: "training/Adam/add_36/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_12"
  op: "RealDiv"
  input: "training/Adam/mul_60"
  input: "training/Adam/add_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_37"
  op: "Sub"
  input: "lstm_2/kernel/read"
  input: "training/Adam/truediv_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_33"
  op: "Assign"
  input: "training/Adam/Variable_11"
  input: "training/Adam/add_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_34"
  op: "Assign"
  input: "training/Adam/Variable_32"
  input: "training/Adam/add_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_32"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_35"
  op: "Assign"
  input: "lstm_2/kernel"
  input: "training/Adam/sub_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_61"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_12/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_38/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_38"
  op: "Sub"
  input: "training/Adam/sub_38/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_62"
  op: "Mul"
  input: "training/Adam/sub_38"
  input: "training/Adam/gradients/AddN_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_37"
  op: "Add"
  input: "training/Adam/mul_61"
  input: "training/Adam/mul_62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_63"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_33/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_39/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_39"
  op: "Sub"
  input: "training/Adam/sub_39/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_12"
  op: "Square"
  input: "training/Adam/gradients/AddN_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_64"
  op: "Mul"
  input: "training/Adam/sub_39"
  input: "training/Adam/Square_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_38"
  op: "Add"
  input: "training/Adam/mul_63"
  input: "training/Adam/mul_64"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_65"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_26"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_27"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_13/Minimum"
  op: "Minimum"
  input: "training/Adam/add_38"
  input: "training/Adam/Const_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_13"
  op: "Maximum"
  input: "training/Adam/clip_by_value_13/Minimum"
  input: "training/Adam/Const_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_13"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_39/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_39"
  op: "Add"
  input: "training/Adam/Sqrt_13"
  input: "training/Adam/add_39/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_13"
  op: "RealDiv"
  input: "training/Adam/mul_65"
  input: "training/Adam/add_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_40"
  op: "Sub"
  input: "lstm_2/recurrent_kernel/read"
  input: "training/Adam/truediv_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_36"
  op: "Assign"
  input: "training/Adam/Variable_12"
  input: "training/Adam/add_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_37"
  op: "Assign"
  input: "training/Adam/Variable_33"
  input: "training/Adam/add_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_33"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_38"
  op: "Assign"
  input: "lstm_2/recurrent_kernel"
  input: "training/Adam/sub_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_66"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_13/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_41/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_41"
  op: "Sub"
  input: "training/Adam/sub_41/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_67"
  op: "Mul"
  input: "training/Adam/sub_41"
  input: "training/Adam/gradients/AddN_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_40"
  op: "Add"
  input: "training/Adam/mul_66"
  input: "training/Adam/mul_67"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_68"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_34/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_42/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_42"
  op: "Sub"
  input: "training/Adam/sub_42/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_13"
  op: "Square"
  input: "training/Adam/gradients/AddN_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_69"
  op: "Mul"
  input: "training/Adam/sub_42"
  input: "training/Adam/Square_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_41"
  op: "Add"
  input: "training/Adam/mul_68"
  input: "training/Adam/mul_69"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_70"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_28"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_29"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_14/Minimum"
  op: "Minimum"
  input: "training/Adam/add_41"
  input: "training/Adam/Const_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_14"
  op: "Maximum"
  input: "training/Adam/clip_by_value_14/Minimum"
  input: "training/Adam/Const_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_14"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_42/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_42"
  op: "Add"
  input: "training/Adam/Sqrt_14"
  input: "training/Adam/add_42/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_14"
  op: "RealDiv"
  input: "training/Adam/mul_70"
  input: "training/Adam/add_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_43"
  op: "Sub"
  input: "lstm_2/bias/read"
  input: "training/Adam/truediv_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_39"
  op: "Assign"
  input: "training/Adam/Variable_13"
  input: "training/Adam/add_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_40"
  op: "Assign"
  input: "training/Adam/Variable_34"
  input: "training/Adam/add_41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_34"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_41"
  op: "Assign"
  input: "lstm_2/bias"
  input: "training/Adam/sub_43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_71"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_14/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_44/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_44"
  op: "Sub"
  input: "training/Adam/sub_44/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_72"
  op: "Mul"
  input: "training/Adam/sub_44"
  input: "training/Adam/gradients/AddN_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_43"
  op: "Add"
  input: "training/Adam/mul_71"
  input: "training/Adam/mul_72"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_73"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_35/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_45/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_45"
  op: "Sub"
  input: "training/Adam/sub_45/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_14"
  op: "Square"
  input: "training/Adam/gradients/AddN_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_74"
  op: "Mul"
  input: "training/Adam/sub_45"
  input: "training/Adam/Square_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_44"
  op: "Add"
  input: "training/Adam/mul_73"
  input: "training/Adam/mul_74"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_75"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_30"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_31"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_15/Minimum"
  op: "Minimum"
  input: "training/Adam/add_44"
  input: "training/Adam/Const_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_15"
  op: "Maximum"
  input: "training/Adam/clip_by_value_15/Minimum"
  input: "training/Adam/Const_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_15"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_45/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_45"
  op: "Add"
  input: "training/Adam/Sqrt_15"
  input: "training/Adam/add_45/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_15"
  op: "RealDiv"
  input: "training/Adam/mul_75"
  input: "training/Adam/add_45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_46"
  op: "Sub"
  input: "lstm_3/kernel/read"
  input: "training/Adam/truediv_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_42"
  op: "Assign"
  input: "training/Adam/Variable_14"
  input: "training/Adam/add_43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_43"
  op: "Assign"
  input: "training/Adam/Variable_35"
  input: "training/Adam/add_44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_35"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_44"
  op: "Assign"
  input: "lstm_3/kernel"
  input: "training/Adam/sub_46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_76"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_15/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_47/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_47"
  op: "Sub"
  input: "training/Adam/sub_47/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_77"
  op: "Mul"
  input: "training/Adam/sub_47"
  input: "training/Adam/gradients/AddN_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_46"
  op: "Add"
  input: "training/Adam/mul_76"
  input: "training/Adam/mul_77"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_78"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_36/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_48/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_48"
  op: "Sub"
  input: "training/Adam/sub_48/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_15"
  op: "Square"
  input: "training/Adam/gradients/AddN_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_79"
  op: "Mul"
  input: "training/Adam/sub_48"
  input: "training/Adam/Square_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_47"
  op: "Add"
  input: "training/Adam/mul_78"
  input: "training/Adam/mul_79"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_80"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_32"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_33"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_16/Minimum"
  op: "Minimum"
  input: "training/Adam/add_47"
  input: "training/Adam/Const_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_16"
  op: "Maximum"
  input: "training/Adam/clip_by_value_16/Minimum"
  input: "training/Adam/Const_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_16"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_48/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_48"
  op: "Add"
  input: "training/Adam/Sqrt_16"
  input: "training/Adam/add_48/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_16"
  op: "RealDiv"
  input: "training/Adam/mul_80"
  input: "training/Adam/add_48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_49"
  op: "Sub"
  input: "lstm_3/recurrent_kernel/read"
  input: "training/Adam/truediv_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_45"
  op: "Assign"
  input: "training/Adam/Variable_15"
  input: "training/Adam/add_46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_46"
  op: "Assign"
  input: "training/Adam/Variable_36"
  input: "training/Adam/add_47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_36"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_47"
  op: "Assign"
  input: "lstm_3/recurrent_kernel"
  input: "training/Adam/sub_49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_81"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_16/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_50/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_50"
  op: "Sub"
  input: "training/Adam/sub_50/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_82"
  op: "Mul"
  input: "training/Adam/sub_50"
  input: "training/Adam/gradients/AddN_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_49"
  op: "Add"
  input: "training/Adam/mul_81"
  input: "training/Adam/mul_82"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_83"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_37/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_51/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_51"
  op: "Sub"
  input: "training/Adam/sub_51/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_16"
  op: "Square"
  input: "training/Adam/gradients/AddN_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_84"
  op: "Mul"
  input: "training/Adam/sub_51"
  input: "training/Adam/Square_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_50"
  op: "Add"
  input: "training/Adam/mul_83"
  input: "training/Adam/mul_84"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_85"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_34"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_35"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_17/Minimum"
  op: "Minimum"
  input: "training/Adam/add_50"
  input: "training/Adam/Const_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_17"
  op: "Maximum"
  input: "training/Adam/clip_by_value_17/Minimum"
  input: "training/Adam/Const_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_17"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_51/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_51"
  op: "Add"
  input: "training/Adam/Sqrt_17"
  input: "training/Adam/add_51/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_17"
  op: "RealDiv"
  input: "training/Adam/mul_85"
  input: "training/Adam/add_51"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_52"
  op: "Sub"
  input: "lstm_3/bias/read"
  input: "training/Adam/truediv_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_48"
  op: "Assign"
  input: "training/Adam/Variable_16"
  input: "training/Adam/add_49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_49"
  op: "Assign"
  input: "training/Adam/Variable_37"
  input: "training/Adam/add_50"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_37"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_50"
  op: "Assign"
  input: "lstm_3/bias"
  input: "training/Adam/sub_52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_86"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_17/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_53/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_53"
  op: "Sub"
  input: "training/Adam/sub_53/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_87"
  op: "Mul"
  input: "training/Adam/sub_53"
  input: "training/Adam/gradients/dense_1/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_52"
  op: "Add"
  input: "training/Adam/mul_86"
  input: "training/Adam/mul_87"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_88"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_38/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_54/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_54"
  op: "Sub"
  input: "training/Adam/sub_54/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_17"
  op: "Square"
  input: "training/Adam/gradients/dense_1/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_89"
  op: "Mul"
  input: "training/Adam/sub_54"
  input: "training/Adam/Square_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_53"
  op: "Add"
  input: "training/Adam/mul_88"
  input: "training/Adam/mul_89"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_90"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_36"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_37"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_18/Minimum"
  op: "Minimum"
  input: "training/Adam/add_53"
  input: "training/Adam/Const_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_18"
  op: "Maximum"
  input: "training/Adam/clip_by_value_18/Minimum"
  input: "training/Adam/Const_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_18"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_54/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_54"
  op: "Add"
  input: "training/Adam/Sqrt_18"
  input: "training/Adam/add_54/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_18"
  op: "RealDiv"
  input: "training/Adam/mul_90"
  input: "training/Adam/add_54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_55"
  op: "Sub"
  input: "dense_1/kernel/read"
  input: "training/Adam/truediv_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_51"
  op: "Assign"
  input: "training/Adam/Variable_17"
  input: "training/Adam/add_52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_52"
  op: "Assign"
  input: "training/Adam/Variable_38"
  input: "training/Adam/add_53"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_38"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_53"
  op: "Assign"
  input: "dense_1/kernel"
  input: "training/Adam/sub_55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_91"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_18/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_56/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_56"
  op: "Sub"
  input: "training/Adam/sub_56/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_92"
  op: "Mul"
  input: "training/Adam/sub_56"
  input: "training/Adam/gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_55"
  op: "Add"
  input: "training/Adam/mul_91"
  input: "training/Adam/mul_92"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_93"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_39/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_57/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_57"
  op: "Sub"
  input: "training/Adam/sub_57/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_18"
  op: "Square"
  input: "training/Adam/gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_94"
  op: "Mul"
  input: "training/Adam/sub_57"
  input: "training/Adam/Square_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_56"
  op: "Add"
  input: "training/Adam/mul_93"
  input: "training/Adam/mul_94"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_95"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_38"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_39"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_19/Minimum"
  op: "Minimum"
  input: "training/Adam/add_56"
  input: "training/Adam/Const_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_19"
  op: "Maximum"
  input: "training/Adam/clip_by_value_19/Minimum"
  input: "training/Adam/Const_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_19"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_57/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_57"
  op: "Add"
  input: "training/Adam/Sqrt_19"
  input: "training/Adam/add_57/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_19"
  op: "RealDiv"
  input: "training/Adam/mul_95"
  input: "training/Adam/add_57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_58"
  op: "Sub"
  input: "dense_1/bias/read"
  input: "training/Adam/truediv_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_54"
  op: "Assign"
  input: "training/Adam/Variable_18"
  input: "training/Adam/add_55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_55"
  op: "Assign"
  input: "training/Adam/Variable_39"
  input: "training/Adam/add_56"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_39"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_56"
  op: "Assign"
  input: "dense_1/bias"
  input: "training/Adam/sub_58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_96"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_19/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_59/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_59"
  op: "Sub"
  input: "training/Adam/sub_59/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_97"
  op: "Mul"
  input: "training/Adam/sub_59"
  input: "training/Adam/gradients/dense_2/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_58"
  op: "Add"
  input: "training/Adam/mul_96"
  input: "training/Adam/mul_97"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_98"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_40/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_60/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_60"
  op: "Sub"
  input: "training/Adam/sub_60/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_19"
  op: "Square"
  input: "training/Adam/gradients/dense_2/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_99"
  op: "Mul"
  input: "training/Adam/sub_60"
  input: "training/Adam/Square_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_59"
  op: "Add"
  input: "training/Adam/mul_98"
  input: "training/Adam/mul_99"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_100"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_40"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_41"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_20/Minimum"
  op: "Minimum"
  input: "training/Adam/add_59"
  input: "training/Adam/Const_41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_20"
  op: "Maximum"
  input: "training/Adam/clip_by_value_20/Minimum"
  input: "training/Adam/Const_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_20"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_60/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_60"
  op: "Add"
  input: "training/Adam/Sqrt_20"
  input: "training/Adam/add_60/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_20"
  op: "RealDiv"
  input: "training/Adam/mul_100"
  input: "training/Adam/add_60"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_61"
  op: "Sub"
  input: "dense_2/kernel/read"
  input: "training/Adam/truediv_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_57"
  op: "Assign"
  input: "training/Adam/Variable_19"
  input: "training/Adam/add_58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_58"
  op: "Assign"
  input: "training/Adam/Variable_40"
  input: "training/Adam/add_59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_40"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_59"
  op: "Assign"
  input: "dense_2/kernel"
  input: "training/Adam/sub_61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_101"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_20/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_62/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_62"
  op: "Sub"
  input: "training/Adam/sub_62/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_102"
  op: "Mul"
  input: "training/Adam/sub_62"
  input: "training/Adam/gradients/dense_2/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_61"
  op: "Add"
  input: "training/Adam/mul_101"
  input: "training/Adam/mul_102"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_103"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_41/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_63/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_63"
  op: "Sub"
  input: "training/Adam/sub_63/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_20"
  op: "Square"
  input: "training/Adam/gradients/dense_2/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_104"
  op: "Mul"
  input: "training/Adam/sub_63"
  input: "training/Adam/Square_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_62"
  op: "Add"
  input: "training/Adam/mul_103"
  input: "training/Adam/mul_104"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_105"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_42"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_43"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_21/Minimum"
  op: "Minimum"
  input: "training/Adam/add_62"
  input: "training/Adam/Const_43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_21"
  op: "Maximum"
  input: "training/Adam/clip_by_value_21/Minimum"
  input: "training/Adam/Const_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_21"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_63/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_63"
  op: "Add"
  input: "training/Adam/Sqrt_21"
  input: "training/Adam/add_63/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_21"
  op: "RealDiv"
  input: "training/Adam/mul_105"
  input: "training/Adam/add_63"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_64"
  op: "Sub"
  input: "dense_2/bias/read"
  input: "training/Adam/truediv_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_60"
  op: "Assign"
  input: "training/Adam/Variable_20"
  input: "training/Adam/add_61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_61"
  op: "Assign"
  input: "training/Adam/Variable_41"
  input: "training/Adam/add_62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_41"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_62"
  op: "Assign"
  input: "dense_2/bias"
  input: "training/Adam/sub_64"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/group_deps"
  op: "NoOp"
  input: "^loss/mul"
  input: "^metrics/acc/Mean"
  input: "^training/Adam/AssignAdd"
  input: "^training/Adam/Assign"
  input: "^training/Adam/Assign_1"
  input: "^training/Adam/Assign_2"
  input: "^training/Adam/Assign_3"
  input: "^training/Adam/Assign_4"
  input: "^training/Adam/Assign_5"
  input: "^training/Adam/Assign_6"
  input: "^training/Adam/Assign_7"
  input: "^training/Adam/Assign_8"
  input: "^training/Adam/Assign_9"
  input: "^training/Adam/Assign_10"
  input: "^training/Adam/Assign_11"
  input: "^training/Adam/Assign_12"
  input: "^training/Adam/Assign_13"
  input: "^training/Adam/Assign_14"
  input: "^training/Adam/Assign_15"
  input: "^training/Adam/Assign_16"
  input: "^training/Adam/Assign_17"
  input: "^training/Adam/Assign_18"
  input: "^training/Adam/Assign_19"
  input: "^training/Adam/Assign_20"
  input: "^training/Adam/Assign_21"
  input: "^training/Adam/Assign_22"
  input: "^training/Adam/Assign_23"
  input: "^training/Adam/Assign_24"
  input: "^training/Adam/Assign_25"
  input: "^training/Adam/Assign_26"
  input: "^training/Adam/Assign_27"
  input: "^training/Adam/Assign_28"
  input: "^training/Adam/Assign_29"
  input: "^training/Adam/Assign_30"
  input: "^training/Adam/Assign_31"
  input: "^training/Adam/Assign_32"
  input: "^training/Adam/Assign_33"
  input: "^training/Adam/Assign_34"
  input: "^training/Adam/Assign_35"
  input: "^training/Adam/Assign_36"
  input: "^training/Adam/Assign_37"
  input: "^training/Adam/Assign_38"
  input: "^training/Adam/Assign_39"
  input: "^training/Adam/Assign_40"
  input: "^training/Adam/Assign_41"
  input: "^training/Adam/Assign_42"
  input: "^training/Adam/Assign_43"
  input: "^training/Adam/Assign_44"
  input: "^training/Adam/Assign_45"
  input: "^training/Adam/Assign_46"
  input: "^training/Adam/Assign_47"
  input: "^training/Adam/Assign_48"
  input: "^training/Adam/Assign_49"
  input: "^training/Adam/Assign_50"
  input: "^training/Adam/Assign_51"
  input: "^training/Adam/Assign_52"
  input: "^training/Adam/Assign_53"
  input: "^training/Adam/Assign_54"
  input: "^training/Adam/Assign_55"
  input: "^training/Adam/Assign_56"
  input: "^training/Adam/Assign_57"
  input: "^training/Adam/Assign_58"
  input: "^training/Adam/Assign_59"
  input: "^training/Adam/Assign_60"
  input: "^training/Adam/Assign_61"
  input: "^training/Adam/Assign_62"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^loss/mul"
  input: "^metrics/acc/Mean"
}
node {
  name: "IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "conv1d_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "conv1d_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "conv1d_2/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "conv1d_2/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "conv1d_3/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "conv1d_3/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_3/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "conv1d_4/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "conv1d_4/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1d_4/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "lstm_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "lstm_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "lstm_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "lstm_2/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "lstm_2/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "lstm_2/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "lstm_3/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "lstm_3/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "lstm_3/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "dense_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "dense_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "dense_2/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "dense_2/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "Adam/iterations"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "Adam/lr"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "Adam/beta_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "Adam/beta_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "Adam/decay"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_28"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_29"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_30"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_4"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_31"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_5"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_32"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_6"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_33"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_7"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_34"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_8"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_35"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_9"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_36"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_10"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_37"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_11"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_38"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_12"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_39"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_13"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_40"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_14"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_41"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_15"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_42"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_16"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_43"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_17"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_44"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_18"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_45"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_19"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_46"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_20"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_47"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_21"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_48"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_22"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_22"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_49"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_23"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_23"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_50"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_24"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_24"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_51"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_25"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_25"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_52"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_26"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_26"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_53"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_27"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_27"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_54"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_28"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_28"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_55"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_29"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_29"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_56"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_30"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_30"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_57"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_31"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_31"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_58"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_32"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_32"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_59"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_33"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_33"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_60"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_34"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_34"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_61"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_35"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_35"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_62"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_36"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_36"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_63"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_37"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_37"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_64"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_38"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_38"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_65"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_39"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_39"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_66"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_40"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_40"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_67"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_41"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_41"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_68"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_42"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_42"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_69"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_43"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_43"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_70"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_44"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_44"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_71"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_45"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_45"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_72"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_46"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_46"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_73"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_47"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_47"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_74"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_48"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_48"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_75"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_49"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_49"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_76"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_50"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_50"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_77"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_51"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_51"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_78"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_52"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_52"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_79"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_53"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_53"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_80"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_54"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_54"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_81"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_55"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_55"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_82"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_56"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_56"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_83"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_57"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_57"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_84"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_58"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_58"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_85"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_59"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_59"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_86"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_60"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_60"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_87"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_61"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_61"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_88"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_62"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_62"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^conv1d_1/kernel/Assign"
  input: "^conv1d_1/bias/Assign"
  input: "^conv1d_2/kernel/Assign"
  input: "^conv1d_2/bias/Assign"
  input: "^conv1d_3/kernel/Assign"
  input: "^conv1d_3/bias/Assign"
  input: "^conv1d_4/kernel/Assign"
  input: "^conv1d_4/bias/Assign"
  input: "^lstm_1/kernel/Assign"
  input: "^lstm_1/recurrent_kernel/Assign"
  input: "^lstm_1/bias/Assign"
  input: "^lstm_2/kernel/Assign"
  input: "^lstm_2/recurrent_kernel/Assign"
  input: "^lstm_2/bias/Assign"
  input: "^lstm_3/kernel/Assign"
  input: "^lstm_3/recurrent_kernel/Assign"
  input: "^lstm_3/bias/Assign"
  input: "^dense_1/kernel/Assign"
  input: "^dense_1/bias/Assign"
  input: "^dense_2/kernel/Assign"
  input: "^dense_2/bias/Assign"
  input: "^Adam/iterations/Assign"
  input: "^Adam/lr/Assign"
  input: "^Adam/beta_1/Assign"
  input: "^Adam/beta_2/Assign"
  input: "^Adam/decay/Assign"
  input: "^training/Adam/Variable/Assign"
  input: "^training/Adam/Variable_1/Assign"
  input: "^training/Adam/Variable_2/Assign"
  input: "^training/Adam/Variable_3/Assign"
  input: "^training/Adam/Variable_4/Assign"
  input: "^training/Adam/Variable_5/Assign"
  input: "^training/Adam/Variable_6/Assign"
  input: "^training/Adam/Variable_7/Assign"
  input: "^training/Adam/Variable_8/Assign"
  input: "^training/Adam/Variable_9/Assign"
  input: "^training/Adam/Variable_10/Assign"
  input: "^training/Adam/Variable_11/Assign"
  input: "^training/Adam/Variable_12/Assign"
  input: "^training/Adam/Variable_13/Assign"
  input: "^training/Adam/Variable_14/Assign"
  input: "^training/Adam/Variable_15/Assign"
  input: "^training/Adam/Variable_16/Assign"
  input: "^training/Adam/Variable_17/Assign"
  input: "^training/Adam/Variable_18/Assign"
  input: "^training/Adam/Variable_19/Assign"
  input: "^training/Adam/Variable_20/Assign"
  input: "^training/Adam/Variable_21/Assign"
  input: "^training/Adam/Variable_22/Assign"
  input: "^training/Adam/Variable_23/Assign"
  input: "^training/Adam/Variable_24/Assign"
  input: "^training/Adam/Variable_25/Assign"
  input: "^training/Adam/Variable_26/Assign"
  input: "^training/Adam/Variable_27/Assign"
  input: "^training/Adam/Variable_28/Assign"
  input: "^training/Adam/Variable_29/Assign"
  input: "^training/Adam/Variable_30/Assign"
  input: "^training/Adam/Variable_31/Assign"
  input: "^training/Adam/Variable_32/Assign"
  input: "^training/Adam/Variable_33/Assign"
  input: "^training/Adam/Variable_34/Assign"
  input: "^training/Adam/Variable_35/Assign"
  input: "^training/Adam/Variable_36/Assign"
  input: "^training/Adam/Variable_37/Assign"
  input: "^training/Adam/Variable_38/Assign"
  input: "^training/Adam/Variable_39/Assign"
  input: "^training/Adam/Variable_40/Assign"
  input: "^training/Adam/Variable_41/Assign"
  input: "^training/Adam/Variable_42/Assign"
  input: "^training/Adam/Variable_43/Assign"
  input: "^training/Adam/Variable_44/Assign"
  input: "^training/Adam/Variable_45/Assign"
  input: "^training/Adam/Variable_46/Assign"
  input: "^training/Adam/Variable_47/Assign"
  input: "^training/Adam/Variable_48/Assign"
  input: "^training/Adam/Variable_49/Assign"
  input: "^training/Adam/Variable_50/Assign"
  input: "^training/Adam/Variable_51/Assign"
  input: "^training/Adam/Variable_52/Assign"
  input: "^training/Adam/Variable_53/Assign"
  input: "^training/Adam/Variable_54/Assign"
  input: "^training/Adam/Variable_55/Assign"
  input: "^training/Adam/Variable_56/Assign"
  input: "^training/Adam/Variable_57/Assign"
  input: "^training/Adam/Variable_58/Assign"
  input: "^training/Adam/Variable_59/Assign"
  input: "^training/Adam/Variable_60/Assign"
  input: "^training/Adam/Variable_61/Assign"
  input: "^training/Adam/Variable_62/Assign"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^dense_2/Softmax"
}
versions {
  producer: 26
}
