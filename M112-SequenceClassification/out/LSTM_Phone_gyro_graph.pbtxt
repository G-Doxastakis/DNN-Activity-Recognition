node {
  name: "lstm_1_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 100
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "lstm_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.10793741792440414
      }
    }
  }
}
node {
  name: "lstm_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10793741792440414
      }
    }
  }
}
node {
  name: "lstm_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "lstm_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 5966578
    }
  }
}
node {
  name: "lstm_1/random_uniform/sub"
  op: "Sub"
  input: "lstm_1/random_uniform/max"
  input: "lstm_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/random_uniform/mul"
  op: "Mul"
  input: "lstm_1/random_uniform/RandomUniform"
  input: "lstm_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/random_uniform"
  op: "Add"
  input: "lstm_1/random_uniform/mul"
  input: "lstm_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_1/kernel/Assign"
  op: "Assign"
  input: "lstm_1/kernel"
  input: "lstm_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1/kernel/read"
  op: "Identity"
  input: "lstm_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 512
          }
        }
        tensor_content: "\257G\334:A\222x=)Jb\275\351]\255<\216\312\355\274l\354\315\274>\3753<\237\035\256;\246\177\204\275\300\0028<\021\332\251\274\232\333\201\273\201\343\204=\232e\251\274\270\021\243=\374\227\037=\226\342\237=\351\362\242\274x\317\005\275kE\006=\213\001\220\275\320\320\355\274\355\332==\236 \372;|\266i\275\336\326\325<\t?2\275\325\323\246\273\345\3065=\326\302\200\274\265\342#\2749>\265\275\025\t\215=\014\355\r\274%\002\311\275\203?\330;\362\220\237=\232\240[\275j\026\216=\027\013!<\373\300}\273\353\334]\273\002\222\220=\337\214\362\273\025r9\275\336\346\306\273\322X\237\275\307\337S:Ln\372\274i\242\334\274\306e\223;^\320\334;\003y\n\274O:\220\274\216\230\360\2755&3\275\026A\317=Rm\326\274\333%\000=SZ\243\275\017\273G\274\"k\326<\n@\013;\311\370\274\275T\365\220<\361\254\327\274\371\351\203;\211\r\241=\262Y\261\273\306}\027\275?\270\r\275\032V\311:\2716\342=\234\305C=v\007\t=|\260Z\275\244\rq<\214=\274<\230K\254=^u\330\274\207\364=;x\222\372<\202\256\032\275fF\315\275\271\0060\275\235\332\202:\t\022\244\275\026\313\036\275\304\313\212\2735\227A\274\321Q0=\215\344/\275Ho\253\275\350\032\317\273\267\313[\275v\272\007=\226b\013\274\321U\036\274\0267\246\275\212{\025\2755\006\250\275\315\231\252<\021\2543\275\216\000K\275\257\222\221=\322\002\261\275l\177\002=X\340\303;\257D;=\270d\251\275\356m\241=!\025C\275\350\014\210\274q\377J\275\300\375\021<\263\013!<\202\276\031=84Z<\202^?=LR\033=\261)\214<\333&\273<@\315\255<\254\2743\275\374\031\245;\317\356\004\275\273\356\230\273\245\301\271\273\014\031\205\275}\240\351\274J\265\334\274\001\235\035=\344\333t\274\307\235Z\275\214\245\242\274o>\207\273\340/\233\274Cq\243:\266\213\250\273\301\300\013\274\3444\013=obH\275\362\204\026=\272K!=\374\310\313\274\333P(\2730\306\347<m\333\241\275\265\242\036=.\321\315\274\177\344\334= \315\313<\326\353,\275>A\033=@ \037=\275\251\020=\2769[=\315T\n\276\207\373$\275a\354\205=\207\n\347\274\013\246\315\2737Q\211\275[r&<c\2021<z\034\364< \237\\\275\372iM\275-\347\240:\337\241\263\275FHa\274\211\223\010\274\273\242\211\275\277\312\023<\003\234\014\274\037DA\275.\033J\275/t\266=\311O!\274\234(\367<\034\021@=\266\006\027=7\246\225\275\203\335\336<\213\311\204\273\006y)=F\366<=\006\232~\275\025$\013\274\r\211\314\274\363\350\343\274\277K\2059\346\231\250\274\003\307\031<\002\020D=Ot\263\273Q\252H<7]\206\275\252\305\234=\002@\222\274\213\201k\275\035\212\340\274\253b^=\031c\233\273\366EN\2754Jp=\236`\270<w\350>=\276*I\2753\243\003;\031\241\214<\243\300\256\274l6w=\n\005\336\272\214\037\210\275\265\307\346<F\010\305\273\237\265\226\274U\\\202=)+^=\273G\010\275\220\353\025=\230R^\275\201\245\276<\024\"\211\274Z4:<\372\'\006=\325\n\204\2740\205\341<\352\317\224\274Q\"\034\274\252{2\274\3310\354\273\254F \274\261\266x\275,]\260<\334\002m=gZ\016=_\372\237<6\231(=G}\270\274\271\201\205<4\301c=1[\033=U\263\002\275\026iV;\t\023\026=\275\235\025\272\374\223Y=\242*o=\265\275\021\274\245*\253\273\020\r \275kb\316<:\270\246=\212\314C\275\366\333\310<\354\256\037\275\010\237\325<\r\335\300=\242\346\245=\204j\007\275\204\315\"\275\270\004\247<\236dM\274M\320\220\274\331\200\266\273\371\314\232\275cTV;\254\237\250;\373\231\353\272\226\360\300\275\224\321\331\274#\032\264\274\303H\014=\017[Y\275\276T-=\007E\322\273\217\021B\275<\375\377\274-\360P=\360\256\006\275\337\334\027=\246R\264<&\247}\275#\227\256<\270Q\2279\033y\206\275\353\277#;R\257x\274\304^\345<3y\250=sI\241<\370\351e\275\261a\n=\001\222\321\272\2279C\275\303k9\275\210\334\370<\346\036\254=|m7=\312`!\273TmF\274\0232\000\274Q\2559=\356\250_=\317\372\361;\372\304\305\274\320D\000\275\005!N=\257\005D\275\215ez\275\224\236\260\275\2435\313\274=\242R=E\223\262<_C\352\275\256]\302\2744G\211=\210qR<rq\307<D\264\376\273\327F\212\274\304\237\304\272\375\317H=\344\'C\274\343\271\254\274\035\326\217<eO\032<q\324\242\274\242Sr\274\273\206\036\275\r\322\231=\3653\202\274D\232X<\271mi=(\032\000\275O\246\311\274\241\304K=\236\305\023<_\'3\273\340\331U\275\210\020A\274\314\204u\274G\024b\275\256W\035\273\374\302\014\275\225\240]\275\271Ca\275\214iw\274\005\347\276<\202\365\225<\252d\037=\226\243\312=\207qW\273\312\234\232\274{\"\224\274\240\224\334=\360R\363\274\243\026t=\t\366\201={\304\314<Q\262\205<H\250\221=T\312\320\274x\037\026<\017\207*\275\032\200\322<\260P^\275\240\250\240\275K\022\314:\236\031%\275\200\327\314;\202\377\022=Q_\202\274+\3004\2752{\373\275\364XD\275\333=\251\273\022|\n=S\264\005<;3 \275\"\372\257\2742]^=q\200\004\275rUB=z@9\274l\366t\275\362\237\026=sb\206\275\243r&=\037\251\311\274\034js;U\221\356;\314\016\364=\001V\252<\316\237\371\274\225\221\216\274+\367\300\275\027\246r<\036\341W\273\263e\275=v\252\202=\273\273W\275\2741\275<\203y\030=F\310\240\274\234\216e=jI\272=\227\235X=\017\363\305\273T\342\335<;\213\302<\027x\261=\036<+\275I0\253\272q\232\215<\005M\345=p|\036\275\004\344G=\251.f\273K8\222\274\351&\035<\207\212p\274\343Ze<\356um\275&\351\340;\330\023\310<J\337\234<\221\330\250\274\351\0047=-\223\215=\"\275\374\275T\266\310=\355Q5=\311<9=E\\\274\274\3547\212\275\244\373\201<\371n7\274\343\271\234=g\334\307\275\004\265_<\032$*<g\363p=\357\027h=(l\016\275D\376\"\274\"L\213\273z\0149\275\000\336\216;\313\350\245\274\374?-=\215\377X\274\2419\302\274\212X\204\274\206<\204;\362\364\246\274\307\314a<\327\371\246\274\265N\002=\210\264o;\224)F\274\325\361\231\274\215.\222=\026\243l=\235>V=\231\233\234\274\306v\010<\355\301g\274%\030\010=_g\n\274m\226\327\274eG\200\273\206\000m<\350\205\244\2738\245\002=\303\242r\275U\230\326\274\0017\373<x\301\t=\237\264-\274~L\270\274q\320\325<\370\324E=\305\3255=\026\017\360<\235\312\005\273\017\224=\275\240F\220=\3037\031=\217\222u\274\303\026\013\274U!)=\371\310\003\275\265\365\306<\263K\020\275\022\2749\275\025@\225\275\032\272\237<u\233L\273\004,\322\275\247\001\006\274cA*=yc\345\274\"\263\374<\232\347\360;@\345\231\275A)a\274\177\336\023\275\"%T\2740\201\375\274\214\317\032=\252\004\n\275\310e\310: ys<\\\225\257=\030\014:\274\256U\030\275\261\257@\274\301yf\274\366\205\317\272\232#\277;\351\255\323\274K~\276<\312\304\322<OC\235<g\035x\275\233\353\212=+/\375\274\236\345c\275\352lH<w\254\307\274}\236-=\374\346W=d\317\252\274\320J\334\275)$\205\275:\366I=/\251\344;v\242\373\275\010)[=\220\313\\\273\005\310\335\273\352ru=\322\241r=\001[\344\274\207\336#<\256\235\020=\t\223\\\274\222;\241=\025z\n=\227\2611\275S\223:\275\317fR=\373`t\275 \010\n=\347\216\300\275\341d\227=\331g\304\271\206#\267<\365A\253\274\220z\256\273[\225\3629R\247y=I\272\272\273\205\001?=\271\317[<n\253N\275\353\366\227<\270\263\314\273\217\336\273=\317\023\231\274{\347o=#\032\275\2751P\371\274D\317\254;\200}/=\032\315j=\242\001\257<\270\274\330\273g\333\215\275T\333\221\275\214#B=\342z\305\275k\347P\275\000\247:=<o;\275m\005\024\274\257&y<8\274\237<\376Y\213=\331\372G=Q\312n:.\345\205<\333yD=\222\017\310\274\257;\001>-g-=*\202\017\275\336|M\274\333>A<\371\335E<\340^e=M&:=\373\236\"=Q\361\321\274\0074\024\275\377\262?=\376\266\264\274\306\313\177:\302e\323;#\204\335<pbI\275\327\256\235\275\035\2410<7\360\263\273Kw\320\272\327\266\300<\013\354\346<\320J\212=\002\246J\274\000\335\021<:SS=i,\\\274b\302\t\274k[,\275m\234k=\246\033\317\274f\346\336\274\250M\036\274\254\014\322\273B\331\036\274\004^\373\272\r9\202\275\330\037\303<~\242i\274\223\003B\275\202\033b=m\"\033\274\261\212T;ko\250<IT(\274\251H\214\274\335\tw\273\315,\024\275\246i\274\275\023\035\n=\237z\227\275\027^\000=c\311!<\005\223\263<\212\001\006;\313~\006\273[!F\274j\264\311\274C]\032=U\360\367<\360\274`=>\346U\274-\225\030=\001\013\2127tO\006\275\325\231\033\275\321\344\203=*\335\241<\3605\206<\302]\306<U\262)=\314}H\274V@+<5\264\004\274\246\007\005=^\315\031\275\252O\252<\177\025\r<v(z=\002\002\236<\210{\245<\325k\275<\373\361K;\202\213\n\275+@\323<\325\251@=\001\202\271<Z\332\273\273\241uc<+\363\264;k\313~=\354\333B<\025T\026\275\257\302><\274\010\226\274 x\314\274\346\004/<q\226\214=\305\002\345\275#\265\n<\205\227b\275\304\240|\274P8\025=\203\232\301:3\002\202=B\006\004\274Z/S\273\367a,=\034\367b=\313\233\240\275\236\371}\274y\340(\2754\357\261\273\035\371\251=\213\261\221\273\325\332+\273\365\301\035>\312x\244<\261R\272\274Z\001\211;\305\020\022=\306\365\203\275\237\260\000=S\373o<\022H/\275d\371\252\2740{\362<3\272(\274\206\225\303<\273\326t=_\216\304\274\241\0335\275\025b4:\262\002\351;~\351V<\006+=\274\325\257|<\235\212\353\273\035/\366;\322hq\273^\017\202\274\032\033\221=\323V\214=\367i1\275J\n\004<B\025\204\274i2B<\201Y(\275T ?\274\202T^\275i\214;\275 \355\340\273\310\372Q<\203G\213=\216\323\211\274W\217 =\243t\034\275w\322\352<\014\2024\275\274u?<\350\240\037=\034h\202<T\233\340\274\013\226\310<\014a\205=\335V\257\273\247\215\223=\355\377\036\275J\343\235=\332G\264<\216K\345<q\312\234=w\323\273<\357\274M=\237\376\326\275\372\263\263=Tq\321\275\014\245\021\275\234\214.\274a\177?=y)\334\274\332*\202\275\350\035\016=\033\214\017\275<_\273\274\264\'@=\023\266\014\275<\321\026={\356\226\274\014\337\243\274_\370\313<\217\202\033=[\272\032\275\031sw\274\323\343<\275\362e\341=<0\035\275\301\n\001\275K[z\273z\247^<\346\331\267;\002L\366\274\035\036\272\274\205_\037=\225\235\275\274\014m\270\274\357\353\374<\353\346j=\332\2543=R\356f=\321\334<\275j+ =\027\337\253\274\025\367l<i#\236\273\300\207\t\274\334\242\213\275\3333\336\274\204HY=W\327[=\325Xn=l\266<\274\225\200&=\346\233M\275\321\275\010\2753lR=&[T\275\351b,\274^\365S\275\274\"\275\274,>\225<\3624\252\275\223=\\\274&@\"=\201\226\261\274l\342\200\275#H)=1\025@\275\327\253\243\275k\351\001<\211\331\236\275\nP\366<\364k\230\275\264\236\221\274\377\321\005\274yj\376<*[\302<A\010\230<\367\262\235\274\331\035\016=\r]\"\275{\014g\275\3678\372\274\307_$\275H\320\377\274\277F\261\273\315\205\037<\031\307\365;kf\030\275s\030\347\274hr\265;W\316\260<\020\262\026\275\332\227\246\2752\221^<-:\003\275\254\345T=\204\331k=\205S\351\272D\243\244<3\311\035\274\177\355\022=\251\304\361\274\324\232\243\274\316U\332\272\373\247\222\274\361$\203\275\354\247F<\201\200\013\275\350\370(\275\000\303\220=k\224\240\275q\340\021=\357@3= \0259\274\270\267\"=Pd\037=\371-\214\275\264\366?=\202\\\260\274\345b@\275\335v\376<\211\270I\275:\023P=\016\377\253\274y\307\213\275\022`l=\356\2401=*\314X=\271\267M\275\253Z\221=CK%\274\rNJ<i\211Z=\360B\017;Wi\237=z\203\023=\020\261b=d\0229\275,s\237<\027\262z;YT*\275)\3529\275\205\243\333<K\237\267\275\241-\201=\036W~\275\224_c=\204w\273<\001e\\;\236\202\372<=\377\210\274LNt=\327\240,\275\226\2628=\362b\005\275\327\374\316\274\350kx\275\344:\202\274\216\322\211=\303\016,\275R\"C<\344Rv<\336\372\205<\016S\321\272Z\254M=\310X\262\274^\226\201=2\203v\275\010[O=7j\005<\002rj=\016\216\240\267L7\037=V\276<=\000d\273<lu\276\273\312\262\177\273\345M\202=\031(\357<\252\036\013\274*\177\373\273\220\331\324\273:.\255<\t3\373\273QjP=\"\006\266\275!gi\275\303\326\204\275\024\247.\275\355\233\267\273\320\021\233=\265c\234\274k\363\027\274\223\223g=-(\326\275\243\226\361\274\246^K<0\257\205=\226,\003\276\344\014\'\275\330\231O=\276\r\224=\323\r\006\275\234\231\217\275\241\023G=!\257Q<\353p\264;B\244\365\273nS\024=\317&F=^\312%\275\323F\343<\010 j<\340\215\374\274\005\344\363=/\260\202=+\224\251\273C)u=^- =\263\374\233<\243D\376=N\241\202\275\320\032\266<\177\347\020=J#!=\337\223\024\274\275\370\235\275\212\215a<y\"\325=u\272\243=5\203&\275\211\216S\275\000\346\310\274p\033\303\274\001\322\243\274\275\333\027\275\177\220\371<-\'\274=\301\347\350=\300\321E=.\204\017\275@Q\203\275\026x=\2742\215\002\275\375\312k\275\331\335\345\274\r\331\022=`\027^\274\026\034m\275\304@\326\274\340\3375\275\353\010`\275\230\016\017\275\302\240\215<@\214~\274\205\256*\274\314\004a<J8\234<{\006%\275\337,J\275\302\245\002\276+\031E<p\337\211\275#\275\t=\304\213=\274\366\322\343:\373\271\004=\305\375\215=\327\304/\275\317\241\030\275\373\005\233:/y#\275+g\323\275\201\331\216=\t\347;\275\367L(\275m\275\230=\366w\331=MC\275\274\312\262\356\274\002\255\263\274\017\320]=\335\000\274<\317\310\240<\200\244\211<\340\023A=B@\241\275\343`\225<\026|\024\273\216\235v\275\355`e\275-\310\214\274O\027\234=\364>c;rD\201\274}\2226<\240\003\031\2757<\202=\355\r5=2\236T=\350\252`\273\224\220\016=\367\325k\275\2633+=\340\373\022<lw\237=\000d\362\273\202k\221\274\231\330\206\275=\331\350;xl\n=\013\271\037\275x\240\224:w.c=\376\272\257\274\030v\243<\354[\200=#\207\246<k]\207;\357\t\346<\036\357\241<\320\217\343\274\216\200\315;V\006Z<\316\346\254;\n\343\254<r\313\224\275\272\n\'<r\201\222\275e\232\264<\335\001\265\274p\246\277\274\332\362~<x\361\332<\347\267c=\325B\'=\250J$\274f\327\253\275\307\nH\274\266\340a\2757\303-;l\212H\275\270VK\275A\234\307<\331\022\030=J\"\320\274\000\005\376\274\340\210\373;\335B\372<\311\254v<+\"\335<\367\272\030=\223\206\003=\226jz<\020/\312\274\362\023\201=\375\276\266\274@\031\204\275\340\313\272<+p\314<\346\020J\273\346^\335\274t\302\004\275\366\363\027\274t:\374<\372k\025\275)g\026<\330\266!=:\032G=\221Uf\275\031\350\324;\213h@={\351\335\273\237\3611\275)\201\010\274\r\366\271<>\246\212\275\206\214\201;\302:\353<2\212=\275\304\227\256\275\013G,;\352s\344\274\351\024+=\010t\036=\251\001\340<\'[\001\275w\016s\2730KN<\2732\014<&\017h=P\273\233\275\316\024\022\272\036\315\264\274\305\255V=\342\362?<\202\014\265\274\235\365,\275f\\\031=\306\353\210={\362u\275\227\032I\275\215x\204=\321uO=L\346\007\274\327b\307\275f\216==\235\200\273=,\347\352<\235\271\235\274\033\245&\273\313;\317\274\033\241\022=RJ\372\272\253Q5=\277\312\000\276\t\362\324;\000\201r=Z?\031<A\033j\275bC\210=A2\252<\365\332\231\275\227\036\221=\220<\023\275\367(\314\274RLs\2752h\001\275b\003\037=\203]\375<Z\027:\275\306\r.=\302U\373:E\366\262;\325,J\275\007X\000=i\033<<\372\363\271\274\332\"\211<\301\333\177<\221\340\370\274\t\317M\274\263\367\233\275\257\313w\275A1\000>\351\322\023\276\307\366\245\274\'\0078\275S\300\001=0\320$\273\272^\213<\205G681\373\335<g=\215\275\350\220\223\274\245yz\273\022\261A\275\252\035\206\275\327\332L\274\232\250\'<\010c@=\220\031Q=\363\362\206\274\262\2729=\204Pd\275m\312\022\276\316\213\233:m\211\034\275$fV\274>\376\272\272\272\232,=\270\010\031<\314\3651\275\255\233\360<g\312\370\274\n\343\215<\325\354 =\3650d\2734\241\344\273v\343\r=\010\346q\273P\032\336<\221\262\'\273W\334\220\275\201\343\271\274\030p%\275\367\027,\275\316\023\036=\264^\213=V\230)\275\001\037\016\274\211\237\370\273-\341I\275e0\352\274\372\265\347<+y\222=&3T=\204\333v\275\201h\264\273r\353!\275}\002.=N\221:=B\037]\275\362\356\250=\016\260o<#vU\275\022\016\t\275[\324\216\272wI\007<!\"U<\273-\250=&f\323<ni\251;o\373n\274\257\021;\275<c\300\275\254\352R\275\025\252\370\274\342\030==V\3059\275,\374\277\273\261\315_=\303\255\225\274\022\023\263=f\352\304<\210\376\273\275\343\231\020\275?\333D=w\363\266\2749j\345\273\026\321\005=\262\361$\274\272\201\302\274\346\255Z\275\016$w;\345\236\206=\374V\177\275_9\007\275t\220\006=X4\353\274R\375v<\361\270\350<\257MW=\303\355\341\273a\370s=s\'\224\274<\225\233\274\241\241r\274\203\021\225\275\\V\230\273\3162\341\274\264\346\273<\346\313\362\274\261q\201=\252\247\352\275#r\371\274(\177\246\2751\274&:L\241k\275\240\013\205\275\312\231\233;T\330M\275\320DA\273\302\341\276<\017\307\212=g\270B\274\262@l\275\261\177\032\272r\345\016\275w\302\004\275=\222\001\275\277\356l<\220n\005=C7h\274\253\001\026\275\276\301\361<\317\340q<E\r\374=\037\210N<<\365=\2741y\025\275\260\276\300\275\326\365\205=}\3736\274\010\275!=X\312L\275\350\'\t\2733\213\322<C\370\245=\214\222\276\272\200\342\213\275[|\214<\335\022\270\2759\266S\275hG\341<\002\264%<\271\006\210<\010\215\336=\020\013~\275p\037\333<\266\252!=\223_\263\274\246f\226\275\277y\326\273\177\275\257<\340\301\224=?\n\010\275\203\037\244;j\316\022=\031-\331\275\375\030\r=\036\266\342\272\353R\0279\377\226W<\201M<\275\211\324\274<_\017\t\2754\337\353\272\211U\177\274\267n\242\273\332\321-<.\306\371\274\265\027\216=\345H\311\274pv\333<\227\t-=\374xh<YL\022\275\267;\035\274\322\234\212=\210\311\211<`\200\340<fN\227\275\312^8\275i*\027<\027\306\376\272I4\331:\204\225m\275E\274\341\274!J\007\275\221\204\302=\340~O\275\016\237\200\275\034\366\312<\024\261\375<\307\356\226=\322\023p=\3208\023\275\375\277V=\000\025\024=\\\024\234\275\026\'b\2751 \246\274\317Fs\275\033\263V\275\350\260A\275\274\362\t=\220\310\211=LE$<\2740\261<]H\025\273\376\2274=\210e7\274\236\353\264<\230\024\001=\230d\215\274\"\345\022\275S\231C=\n\261l\273\034I\355<=\255<=\324\206\330<\206Z\023\275\236~U<\231)\237\274\350\206\364<<\366\324;\023A,;\022\373\331\275\305\233\366\274\253^\010\275,\256\210<#J\271\274\2146\021\274-\035\346\274\330\227f\274$?_\274}\236\204=\270-\016=\344\346\227<\203\r\353<Jjd\2756\237\240\275\372\020\002=_\214\221<\372n\207<\t\320\304\271n\236/\275\204\016\262<2W\340\273l \025\275\377\347\346<\260\243\310<\241;f\274\366\334!=U\250e\275\353/+\274\2557\361<\325!\252<\021}\366\273\020\350K=\245R@=0\307\323<\2502d=\327\263E=\341\314\335<\304h\374\275\264\030{=\350g\236;#\n\023=\260pT\274\330\001\031\275\376Y\033\274\212\001\321<tf|\275\314\331\031=\364\323\013\275l\0165=\3357\235<;k\231\274\221\255\023=\367H\r=[[\213<\333@g\275\332\014\245\275X\265\343\274\210\366\214=\250\340\t<0\236\205=\020\005\273;\336\273\234<\202E\236\2746\000|\275\355\332n<\271\017p;\033\231\230=,!\275\274h[+\2755\255\204\275\360\'V\273\271\266P=\265\213\027\275>\333\177=\343W8=\237\306r\274z\341\'\275\372\304\213=\272\235.=/\003)=zc\224\273\242T\001\275\010g\r\275e\203\224\274\326\177\177\275b\235\204\275\2445`\275iFw<AM\034=\"\363\215\275\341\227B=\\]\204\275!%\263\274\354\003\210=G\001\005\2754$\013=\t\356q\275!\\[\275\262\010\030<\337\t^\274$\230\254\275\030\363\371\274\337\2318\274\023\337\200<\026\222\026\2723\"\223\273e\027\242=\035\036V\274\242m\250=\350\256\230\274\215\365\260\273\363\236\346\275\023\370q\274.\314B=\263\325\370\274%u\270\274\377aK=\rW2<\371;\212=\2577L=\227\236=\275\345\210\357<^L\206<\374V\235\274\234\336\270=\265\246Q\275\337z\203=\356lq<\017\t\265\275\r\330\216\274\340\331@=\305;s=\333*\225\275\360\352\212=!\374\"\275\246R\335\274\343\036\316\274 \302]\275\272I\341\274o\317\000\275\316\316\211<\235ZC<\013\'x\274\300/y<\315U\212;FH\253\274\006\375\327<N\373\037\275o\214\215\274\r\271I\275 H\365\2742\246\237=\3612\274\275\245\006\231;\214\006\222\275\306p\342\275\227\320\004\275\243@\237\275\t\033\014<\313\335\230\274o?\020<\005\337\'=\022Ca\274~E\224\275z\317\353<\225\275\244\2742\177\247\273>H\234\273^\247\213\2740il\275\212U\254=/}u<la\301<#\373\242=\212v]<\016\340\363\274,\247\320<\252+\335\274\3549\030\275\036\351\325<\002\327\231=feD=\010\342\031=\305\307\227<n\266\260=\352\327s\275\307|\027<\376\204\302\275#\240\252\273\345\227\002\275\3535\334;\251A\206\275\235\251\014<O\270\315<U>\236=\021^\242<\'m\242=k\220\242<\224\331\210\272p\232\004=\255\013\276<\305\240\266\274\210C\356\273a\361\333<\035\235\035=\375\017\010\275\020\343\023\275\302\244O\275\3141t=[\324\253<\214\262\177=\013\277\264<4\266E\274\013\312\233\275\0248e=<\357]=\272ce=\331\310\003\275d\226?\274\006\332.=\214\201k\273\021\357\261\273@\023\021=\265\024x\274\'\310\215\274\245\016\250<\250?k=\243D\006\275\021N\\\275\374c\261\274U\316\206=\3764X\272\312\226\204\274y#\320<<[@\274E\376c<6t\261\274\366\031q\275M\345\274<S\317\345;h\233Q\275Or\205=\r\333m\274\225\357\240\275\002j\001=\314\375\r=\345*\000\276\271\376\233\275\034\203\223\272\200\022\211=>\271|=\364\243\360\274\032\206\021=\210\023\004<3#\272;\'\274\204\274\0340\343;>u\221\275};S\274c\303-\275O\rE\275\375\177\270\274/\022!\275dx\232<\023[]<W\034-=\203i\323\274\262)#<+\247O\274\262\324\006=\037\231\277<\246q\206\274\3110\000;\337\024\214\275w\2734=\276B\233\274\321\342j<\306\007\014=DEv=\343\225\220\275\241\213t<O@\017\274\255\277:\2752\346H\274\231Z\233<\245Q\223<L,\336;\315A\223\275\010[\215\275\331f\262\272\2174\r\273!\360!\275\270w\034\274\000\004\217=\034\204\241=\t\254E<\210Mk=I@7<\0036+<(\0223\274O\266h\275\215\305:<q\021\035\275;1\2458;\213\002\274\007\234d\274\330\265Z\275U\003,\275\000Z\324\273\027\231\224\273G_\316=c,\264=\307\266E=\'\002j\274E\211Z<C\202\022\275\3513\366<1w\236\2759\273\033\275c\003\027\275\257J\331\2747z\"\274\373\234J;\246\374>=\270\246\025=\033\354\270\275cl\360:\246\331I=_\020\260\275\244\246e\274\215\033^\274!\'\235\273\315\223\362\274\245z\326<\013\304\366\274\366\2700=\"8\320\2731\234\304\273\274\216]=\320\340\246<v@\256\275\021\313\324;R\334L=>\2047\273Y\035?<d\313\322\274\300\272\312<\017\033\013\273\272\177\226=\304\324\275\273\347&\t\2742\305v\275\2433\373<\351\334\010=q\212\326\274\323\037\231=\336\231\336=\013\n\007<\236\352\221\274\377\272\324<\257\223\350\274\364\201\350\274\277\325\023=&\263\262<?\344L\275\332\336p\274\342\222\033\275\313\262\316\273\304\200\232\273J$\370:\270\342\267\275\332\000\374:{\212\241\275\377\306\361\274\006}O\2743\264\355=\211\361\007\275\366\254\312<\323\222\000\275c\002\203\274\245B!=\237b\306\274\312\370\355;tE\202=\035\231\220;\346\3429<h\347\341;F\273\033=N\223\t\273\'\241X\275o\353\264\274\257\216L\273\332\236T\275\026\254I=/\377\216<\001/\200\275\220\302\202\275-$\242\274\350\350\371\273\005e\262\274\210\003\316\272F\t\301\274Q\352\335;pU\365=\206\017\305;L\345\213=(0\257\275eW\022<\357\357`\275~\330\255\275\211\\\035\275\002\3354</K\300=Bf\354;pa\010>\345a\203:\022]\270<9=I<r\010L\273\177\210\224\275\303\334e\274\357\010\355<\325Z\363:`-\325<\300\000^=u.\230\275\365\231\027\275z\377\204<\344s\251<\375\034\235\274\241\207\001\275\324\034\315\274\223me\275Hex=\004^W=\030\350\020=\360n>\275\340\241\234\275?\250V\274\230\316\213<\354\267_\274\n\265\300<CQJ\274\261m\242\274A\304r\274w{j=\'\363D<Of\226\275\264\216\356<;\333R\275d\302\200\275jY\313=\307\364\213\275\346d\224<\264\231u\274\206z6=\325P&=x\347\235;G\206\035\275t\352%\275`l\000\275_\261k\275\354\014.\271i\201\275<\024\207=<1Ai\274\361H,;\271\037\213=\200\347\204\275\301\266\":\371\2544=!\377Y\274\307\035\324\274\325y1=`\016\342;\004\202\211=]P\265\274J\204\205\275&\270\302\273;\241?\275u\264\260\275K\343a=Q\226=={\306\304=i\207-<O\345\306\274\201\023\201\275\374`\267<\325In\275\007\301)\274Q\270\206=V0i<I\314\005=\306\300\366\274\007\320\260<\221\023r=\255\'\376\274\257\221\362\2757p$\275\347Y\303<\232\236)=\336UX<[\0210=d\201\r\274\326\364\342<\343\306\242\274\344\363\252\274e\007\000\275A6\005<lTM=\367\212\253\274\344\347\213\275FMr\275\274/\246\274\3628\257\273\352\3229\272Q\230|;T7\265\273\304\005\204\275KhZ\275\270#\205=L\234\210=\r\026\266<X\370b=\336y\256=V\241\335<\363\243}=\304@\212<(\231V;X\021\216=;A\365\274\216\262.=v\302\207\2757\315\304<P|\253\274\2537\005\272t>\320;\251\372\022=\352k\\=R=\347\274.-\013\276\267]\330<\266\322/<!\0139\273\352\237\005\275\363\247\224\275\352M5\275\266\214\322\274\337\343D\275\005!\'=\237\226$=\025\214+\274\024\247%={\217\235<\013*\332<>\013c=\224\267L\275\361O\227<\007e\302\273Y\232\234\274s\002\374<\310\0333=\033\005\266\274|E\364\273\217\t(\275\215\341\307<\367:\376<\226\331\262\275)\2668\275\341\037\343<\"$L\275\240\247v<#a\004<\326\304\007=\221 \225\2759\230\005;/Qb=\275\377\022=\377U\372\274l\245\205=7p\212<*9E=\212[\022<\351\020E=\350\202\030\275\3727B;\222\310\324\274\225\\;=?\215\307\273\365\022\312<\221\014\215;\352\237R=\357y(=\020\014\237<\033\032\020=\366\327\n=R#\2108\232\275=<\004\004\213\275\325}e=\310T\307\274\246\237\237\275\252\240\002\2755\237\316;7\351\205=\302\003S\275\317j\275<23\224\275\324\272\007=\224x&;`\325\204<\005k\342=\315eY\274\305\373H<R,\320<Y\225\261\274U\235\324\274\014\"\002\2755XX\275\315\216\016\275Z\255x\275\277\"\207=s\r\362<9\274\206=\232\310b\274M\216\307<\207\226\216<\247\311}\275<\350\006=P\230?\274\326\273`=\006\r\200;\363&V<\016\010\334\273\n\036C\275\335\354\204<b\3268<O/F=\036\001\001\273~\353\275\274\245\233\021==ZR\275}?p<\203@\267=\036\004#\275\216\212\246=\251\224\251\273\207\241\277={T\340:\353\223t=\006\360\026=\254\247\251\274\013\255\216\274\376\374\301\274|\001*\275 \302\226<y:\033\274\202\035\277\274\023\246#=\273\253c=\333\243N\275\03474<\023\311\226\275D\225\324<\215=\010\274X\346_=\031r\202=o\337\245=\316\257X\274\232\375\003\274\235\325>=\343x\204\274:z\256=\\;F\275\251$\235=\225&\215;?\315&\275\026M\264\275:\313\021<\256u\007\275\247\304~<p\237z\275\n\320\262<j\3167=*D9\275\016`\343\274h\304p=\354\234\007\275\367\232d=\327\2057\274\005\377\206<p/\323=\263Kj;{3\353\274e\354(\273\342\032\022=\242\341/\274rr\200\273\366K\r\275\271\271\233\274\315;\245\274\262\336;\274\225Y\262<\334\203\023=\332P\255\273\334\014B\275\221F\002\275\253@\236\2749\362_\274\3231\177\274t}\n;\240\362W=\356\332\257=\367\377\304\275\237\205\234\275\253:\317\275\305\004\234=\203G\361\274=\327\344<\245vv\274.\244\005=\220\246_<\261O\267\272\031\323|=\267\313m\273\337\377\363:h\302\306=3\031\265<\231*\200\274X\317\210;\250\262.\275B\237J;w\354\217=#\272\023\275\356\002\222\274\351\007\320<m\351\263\275\210\234\262\274\370h\205=\265\201v\275\352\207\351\274\246\2272=\320\221\250;\204\262\026=\027\211\211\275U\266\373<m\365b\275\240\224\222={<;=@\214\267<Wf\032\275G@\230=\271\026\312=A\366\027=e`\266\275}\264\027\275\224D\210\275-k\363<+\302^\274\006|\034=\257.\002\275\242#\317\274%\210\364\272.*\027=!sC=\267^\207=4\t\034=yn\361<\003\0266<\217}\227=\003\347\203\275\2516X=\320 \r=P\t\200\274=\3040\275\033k\315\274\235\334\004\275\340,\366; \221\203\275\275\242==\013R-:\222\"\'\275\222\305!=\333\301q\275\217\025\220=\250\231\216=C\273H=\235\200<\274\003c\325\273\237\347Z\274\366v\273=O)|\275J\206r<s\2134\275:\374,\275E\276\233<\035\016\350\273\215\2321=I\376\315\273V\336[=\016\272Q\275!F\236<4\007:\274G\343Y\274Q\374]=a\220!\275\017\260-\275^\036\205=\356<\354\274\213\306z\274\244\022^=\177b\033\275\205\314\266<BxH\275\267\222<=%\204\325;v*\236\275yw\221\274\2003\202\275\344\203\234;\331\222F\274\227&\034\274\323\365\\<R\354\354<U$y\275\004y\322\274\203\356\010=\365\364N;?|d;\334\304\005=\3207\246\275\210\375\336=GB\321\274?\3562=\215\265\254<h\215%;\243Z\220\274o\1772<\330s\204<\313\227\357;\265Q\300\275\246\004\022\275C\300\262;\364\334\237<#f\375\274>\337\255\275\326\342\356<Z};\275\221P\325;)U\013<\235\r\203=n\370\266<9\202\277:\326Xb=*!\375<\250\260\271=_\225\331=\206=+\274e\036[<\223\363\022<m{K=r\316\005=\314H\306\2735\026\303<\241\"\343<\275O\001=_\210Y\274E\204D<\200\257\375\274}\216\373\274\177|\231<\250\217\350\274\035A\223\272\205t\317\274_\031*\275\'Iy\275O\205\326\273\016\350]<}\334\357<\001\265d<\2537s=~\023\243\274\210\035\237<\362\345\304;|\212\250<\266\177k=\262?\300\274|p\232<\250\t\334\274\353o\031\274_\206\213=\306gy=\332\360\203\274\256\355\006=t\021\353<\030\220\244\274\n\202\255<\250u\226\274\241x\257\275\'\347\000\274\341\270 =\255\032\323<\200\234\361\272\277\335\212;\331\251\r=;\271*\275<:}9\370g\024\275\265\252#=8\2326=H\336\300\274n\260\220=\024\324\226\273M#\276\274~\206\235\273\225\322\211\275\324\026\373\274\302E\006=/\2571\275Q\240E\275{\267\001\275\204,\307\267\275\020\350\273\223\366\326<H\201\323=\020W\267\275\327\027\032<\302!\354=6R\371<\370}&\275U\326\276<\213\357+=\233\311\364:6>\270\275X\373\005=\365J^=RlY\275\r\244L=\322xc<\216\304m<\007\273\203;\006qt\275\177w\003\271\343\264p<W\000\351\272\207\002\355<X|\250<\343\177\275<gUE=\214\332$\2745\217\277<\347\277\323\274\362\310\300\274l\002\376\273\321}\245=a\016z\275M V;-\265\004\275\241\371\230\2742~I\274?,\316<^\'\227\275Y1\200=\3043\240\275\240\216\272<F\226k\271\rX\250=mn\233\274\351\014\345<1\256\371\275\217\260\222=KJ-\275\030xG\275\307\021\017<W\233\246=N\032\222=\346^2=\323e\247<\221\024\005;\177\361j\275~\316O<\232]\002\275\275\263\002\275\246\001\342\273\374z\226<jp\214\273\014\177\314\274G\035\271\274\232pA:^\310\345\275\202w\033<\214kP=\321\253Q\274(\351\005=\244\207\004\275\371\233P\275/\335\204\275m\317\330<+ \341\274\273\201\320=\335\007\002\274\354]\276<Z:\3309LML<\n\304+\275\241\337L=yd<<\2145\237<\203t\350<Q\236\260\275\360\305\374\274y\0349\275\377\027e\275\304\021\336\2750\316\243\2759v\247;p(\032\275\341\243&=O\343#\274.\001\220<E\321\027=\362$\252<\202{G\273v\217\251\273ez\021\275!\254\263\275:\030\237\273\353\363\006=\2670\302\275\207)b=\205\r#=\365\n\371\274\255\254\302<\211-\022=\217\202\220\275\250\223\307\274\212lz=\004?\202\273T\251\216=\352x\327\274L\336\010=\355\273\027\274\314\246\252\273\351\246\037\2756z&\275\376n[<\366B\t\275\232\305\013==H\346<\212\303\014=m#i\275vd\201\273D\002\264\273\335\237\237\273\273Z\352\274u\330\026=\244\023\035\274\032\336\334:\214\033\374;\322\322;=2\253\030\275/3\254\274\360\277\251\273c\017=\275\035\r\020=E\006\226<(\252M\275\266)}=\3777\332\275\207\000r;\307R\372\274\277Z\211=I\371\227=\251\037{\274\301\002\334\274\317\220\220\275j\332\226\275\317\r\320\275o\201\217\275\240\203\253\274\036\301R=\007\326\241\275v\020\361\273k\365\005\273\307 \201;:\305\204\274\333\347a=%)\271\274exM\275k\254\230<M\n\203\274hA\n=_\341\257\275\203\352\373<I\301\241<\365i6<a\224\312<\362y\004<R\263\220\274\210\375\322\275\351q\373<\021\274\376;\t\310\014\275O\371h=\004j\340<\027S\027\274\276$\320<\235\235\356<\020\334\177\274 \361\235<\314R\201\275\243\263Z<J\310\203<\250\314\340\274\232Y\240<\325`\r;\2174\030\275\346\240\324\274e\025\376\274\250\023\010<]\247\032\275Ob\\=\027\265\244\274(\326\'\273\372\007\205\275\346hK<\227\004\241\275\254}\302=\307\332\345;j\377\272<AO\220\274b\263\221\274E\210\344\273\224y\026=\367n4=\263\343\277=r\367\212\2759\363\010>\362\322\207\273\'p\n\272\3622[<\227\372\251\274\022\016\030<\321\264\001<\\g\205\274\230vy\275\364\367\356\273\342\337\222\275}\3626==\226y=\336>\001\27423\017=+\362\036=\257\010!=\257E\026\275w#\225=\"\225\001=\022\275\304\274\201\374\200\275\260a\004=cx\261\274\370i<\274\251=\340;\252\352\204\274\325\351\322\274\tj\035=\340/\213\275)\357\233\274\\\r\237\274\300\261\203=\201\025\306\274{\377/\275\350\r\026\275P\376\277\273\276\266%=\302\247\207=@S\220\275\266\366\023\275\020(\360\2739r\202\275X\355\006=\376y\256\275r\271T=\210\216\024<9k\230\275\306\031\316;D\216+\274:\220\362;0\342\223\275\336\007\030\275[%+<\347+\363\273ye\254\274N\253\205\275\362\333\230\275\331\272?\275A\264\246<\272Y)<24\220\274\355\216k<Fb\243<\350\006#=\335\337#\276;y\231=\272*\241<\"@\017\273\225\370&\275M\273\016;T:\354<\206\220\272\274\211\340\241=\257,\223\274\3031Z\274\007GG<w\205:\273\346\364\325<i\315\223<\375\257\350;O\241=\275\323\321\321<\022\010\032<\201y\371<\0314\024\275nG\227;\237J\236=\306Or=\361\372\277;V\337\035=\264ZR\273\351\343\211<l\345.<+\204\n\2750\020\203\275\254\265\202=\244q@=\250\2339\275\324\037\240\275`\325\246<\037\200:<\360_\267\274\202\233Z\275\222\352u\275\325w\202\274q\343\031==\333&<!\370\302<i\352a\274\336\301\350\273\215OU<#S\023\274\017\\\\=9~\354\274f M=\017\373<\275\334\356\016\275J\341\232\275\010t\205=`\3214=\005P\204<\025{\336<\t\245\370<v\260K\274\243D\003\275 \013\314<\376\031\203=\263#\231<8\201.<\023\323\007\275\335\376\007\275\325mv=\277~\313\274\203\356\213=vN\250\274\304m\231\275\264\211\005<\026P\004\274\315\377?\274\273\334\265=F\272\323\273\315K\215=\335.G\2756\201\367\2747\237V\273d|\006=|\310;=\356\305s= \332k\275\225\350\203\275\304\310\350<\246~-\275O\332\264=\003f\261<\372\3312\275\240\346\211=\303\247\014\275\225\257\205=s}\022<2<\211\274\010\013\027=\2355\026\275\025<\035\275\324\300\216\275\204\376\234<U\253\341<\207\226S=\010N\021\275,\353d=\205s\222;H\247\360<\024f\321\275\032\265o\275\250\256`;\203\t&\275\224\356\032\275\340\311\207\274\304\305\237\273n\177\266\275 \231B=\361~\245\273\202\2570:!\315h\275$\343\276<Y\004\270=e\352\351\274_\276\246\274\247\200\013<\240\360\230\275\242\267#<\346u\214<;\264\206\274\372\312\375<\365\353*\275I\023q=\202N\215\275\305A2=\352zw<\352\036?<\353%\216\275\r<n<J_\363<\247\214\262<g\303a\275p\2405=A_\227\273]\3156\275\242\211\202\274\245\345\016\275\330\230\023\275\255\034\032\275\032n\032\275oPd\2738\262\210\273\224\016\202\274\276\274M=|\357&\275%\347\376\274-m\3309\033/\214<nqz=\323\305\206<\327\223\007\275\350R\034<\317v\026<94\271\274H\300\326\275\326I\214=\236y\\\275DX\273<\326\002\372;\333G\346\273\353;\205\274\362\022\035\274\021\345\016\275\220\255n=G7\210\2753\034J<\245:\200<f\244\312<\341\010c< \034g\274o\016\247=\212\014<\275w\306\314<\250\312\026\275\363\0250=\262M\211\275\374\266\360\274\034.==\301\231=<$uC=9\211}=r\367\245\275\367%+\275\363@-\275\251\316P<6\226\212\274\252\346l\273\324\037,\275\237\273s\274\240.\224\275\006\261\315=\017\347e=[Z;=#\021\265\271\213\336D\275\204zU<\211\213;<\037\353\010\275\347&Z=\306\373$\275mV\307\274V\000\006\275nPU=%v\t\274+\006\242\273\033\217O=\336E#=:$Z;g\n\030=%\370\261<\234\372\r\275\241\355\333\274\357a\254\273\367\014\227<\2613\257=p\261\202\275\261\024\350<\331\370\017<\260\230P=\340}k=\346\0024=zf\316<<x\004=p:\036\274\264\356\331;)0\n\276\250\376\257\274\237_\200\274\'\2672=EzH\274\317\236\227\274\235>\213\275R\271^\274w,\251=\333\224\034\2750{\203\274\177\365\255\274\364\236Q<\3278\215\271~}H\274\334\312\330\274\0363\202\273\303U\211=_\335/\275\024I\225\275E\262\216\271\217\223\241<\273\007\n=\337\232$\275\t\244\005=\377!\002\276\361\255P<\t\250\033=Q\250\202\274`\336S\275)\355d\275)\3775=\237ZP\275\270\307\213\275q\214\340<~R\213;\346+\241\274\"P[=\013`S=e\311D=\336\253\257;\221\215L<\341&\003\276\366\345\347\274\377o>= \331\244:P\223\240<l\241\257\274\362\221\255\273^\261\303\273>\327#\275\025\313\267\275\372\2746\275\243\0236\275\240a\033=\264\355\243\274\332O\260\273\254\242S=\344f\255<\303\201a=/\255\253\274h\345\035\275\230\3012=\331\207f\273&b!\275\360\270\251<\016\330I\273}[\200\275\003[\255\2746\241s=\311\371\325\274\204\331\022=z,\215=V}g;\307\024\234=\315|\216<\264\250\030\275I\340J\274:\304\037\275~\023\362\274\225zL;\260\363 <\270\360\272<\272?\373;CH\322\275-\353E\274\213\221\014\276H\014\346\274\325\037\217<\371\202\022\275\214\n\214=\312\036V;\025,f<\352vI=\303\t\211=|RX\273H\314\202<[\r\270\272r\317\214<\001\253\300<\037uV<\220\370\237\275\211\361.\275\224Y\250\274\002q\245;\261T\370<\236~[\275.v;=\220\202.\2750\313\324\273\212\341\013\274^T\222\275\362\343.\274<=6\275\330\335I=\301\202\016\274\375\270\251=\350\332\375<N\335\367;\262t\244\274\321\236\022=\336x\340\274\013\022\321\273&r\360;\366,J<\347\264\020\274\206rR\275[w\235\273\267\275\026\275\345\030\262=}\246a\275\335\221\226\273Q\252w\274\'\256O\275\350\376\023\273\312\\\333=\020jS=\222i\316=\274C\217\275K\310c=\201\224j=c\251\"<\326\034h\274n\277R\27557P=\032-\251=\037\2577\275\267Z\214=v\254\r=D\276\t\273\370+\215\275c\220\315\275%\331\036\273\227G\243;\006*;=e\355c\275M\232\233\273\203\246\022=\202)\037\275\376\020f\274\202\224|\275\216^u=\252\224\270:\343\340\251=\206\376E\275}\022\006\271\244\315\333<\250|Q=>8%<\025_\257=_\241\200\275\301hF=\020\322\205\274V\022\277<\356\371\027\274A\307*\2746s\210\275\177\333\262<`\004[\2755\343\344<\225\333\323\274\032WI\275K(d\270\003M\"\275Ht_;\000_T=\344\322\266\274o\204==\365\357\022\275\211\232\221\273\210=X\274\327\332\002\275\251\3361\271\231\346\207\275\024/\317\274\"\202\265=\344\270p\275\327\347N\274\204o\243\275\231\034\371\274\365\177\362<Q\320\232=\000\\p=\222\014\273;j\335=\274\260\337g\274\247Ym\275\361T\n=_\335{=e\225\'\275LB\344<#\217\374<\024\257\010\275\024\361\202=\315p\263\275\rG\236\274\357\347\311\273k\212\3559\357@\014\275\006oc=B+h=\351\2703\275\264\3647\275\032,\206\274\021\215\026<\317\0179<H_o\275LPM<2p\r\275\005*\321<\367\371\270=\365\014v=\377\336\\\273\21402\275\316JU=\n\035\\\275\203f\202\275\327\300\206=\262\257\014=2\264\304;oI\230;d\270%<=\001\264<\033[o=\022&\277\274\333\221\206=\325\216\307<\363\014T\274o[\006\275e\333=<\234\241w\274+\305-\272\336\314d;\271\201\275=\340O\264<\365W\347<\210\305\301\273\020\337+\273\200\322\267\274\300\267\205<\204\201\210\274C\235\033\275f\203\205=Z\007\323\274\345\026\201=\265~\267\273\205.\250\272kHs<\034\022J=\244P\340<\300\255\323<\210P\023<\251\004\377<\266\332\2269\005*\035=\210\301c<l\315A\275\\\034I\273\336w\006=&I\360\274E\333\324<\266.\272<!\005\217;\037\342\257=\234y0=M\354\373\273\276<\037\275H\212\007\276J|N;\303\3108\274\320zD=2\344\375\274g\331\331;\n 3=\370A!\275\360Pc=\326\320\345\274 %\340\274{\257\337\275\213\362/\275w\250=\275>\314\302=>i\023\275\244\211\024\275\324\240\221=2H\252\274T\252\211<G\203\030\275\374\264\213\274\333I\261\275\025t\224=C\234\216=\333M\221\275\370{[=\230u\003\274\200\232\035\274_g\236\273\351\220\177=)m\021\275\266\3363<s>]\273\262\3518=k\327\350<_\244\240=\335T[\275\325J\201\274\310\210\333;S\221\313\275\234\\\224=n\332\246\275\303\205}=\210%\305\274\022\340\256<\277\302 <\351\262\304\274\260Xr\275\363\007E=e\253\030;v\020\312<\354\tk<\321\223\024\275J\273\374<\224\023\326\274\027\331\372<\370#5\275K\'\237\274\350\016O\271\270\024|\2755E\003<\240\254\022\275\352(\246\274\376\256\347<\270\036f:\230\002d=\267z\310\275\014\016\023\275\0143\232\274\'\307\021\275\225i\017=\257m\253\274\351\356\233<U8\272<?\036\207<\026\376\035=\236\246\003\274\2246\320;\366\226n\274\314\341\005\273\334\207j=!\217G=\244\312K\275\333U3\275\021\337\260\273\351e2\275\\\212\r\275\360M\001=\240\336\320\272\271\223\241\274q2\332\2743X\325\273\352/\206\274t2\355<\310K\";\315\360O=\2070\235\274F\014\323\272\305N\366<\337o==\214\014\226\274\\#[\275\202J%\274\313>\207<\236\372\334\274\345\207\271<d^w<\223\010\216\275\345\177&\274\335)\035\275EZ\346\274\276\260\016=\024\330\266<\'}D\274\026x\365\273y\004-;r\304E\275\353\200C\275\221\213B\275\'\3700\271\030\224\357\275\306j\266=Y\364\374\274n?\375;\247\266\305<\212$,\275\252\221\336\273\222\325L\275\304X\020\274\324\222G\275\301\206\n\276\326\263D;\214\303(=z\236(=\337_\272<\366\307\235\275\212\362\007\274\033\337L=\265\307\307=\337rq;\354N\023\275\301\213\373\274\357]\203<\274\250p=\270s\014\275z\215\225\274\2236t\273K\370\025=]I\017\274\225\325U\275\215\362\270\274\346\237\317\274A\n\001\275\202W#\275\301\263\277<\210X\267\275-\365\230=\253QX\275g\035\302<\222h\\=\2003\354\275\306\216\211\274\336\207\215\275;8\n=tG\033=Bs\206\272Nmt\274/\332M=\202\336\215<Il\200\275\271\035A\275C\223\213<E\261\002= \016\004\275!H\377<\314\264\241=\001i\222<\233~\\=\372\177\034=l3o\274\3156\344\273wW+\275S\025\334\274\322e\010\275\332\353\004\275\274\260\025\275r\322\364<\2267\022\2742\346\320\274\024H&\275Fb\210\274\003K\240=@\317\003\275>\243,;\264\tJ=\332SZ<\322\363\351\274\216\277\307\274\341C\242=5\215@\274\204S\014\273)8{<\027r\250=\272\374\t\275\377th\273F\371\322\274\t.E=\346`\020\276\n\235\022<y\2027=\373\'\016\274\257\264&=\363K\205\275\302\255I<\220&\324\273\266\221\304\275c&\246\274\234\005b\275\025R\275\275\356Q\327<\257\227\017\275\320\031\217=\222\273\333\275\372P\361<\306\357\n\275\2429G<w?\034\275L\'T\272\372\201I\275,\275\033\273T\224\254<7\310\265=\250z\326<\245\226[\275v\274\220\273\267q#<\310R\266\274\022\033N\275\357\036\n\273^4\230<p\r]=9f\267=k\301\231\273E\366\025\275W\332b<\323\003\330\274\200\256y\273\325G|=\265A\276\2732\316\024=\225\265\262<\232v\002\275a\231\250<\247\276-=)\340\030=\027\341k=>\014\242==Z\226\274\013\201\206=\275GB=Rf\023=\177\346\346\273\222c\305<\323\0273\275\212\325\237;\224\312$\275\207y\r\275\005\216\376<\004\317M<k\\{=\177\"U\275\320T\235\274yl\031\274\203\336\000\275\353\220\005\275#\000&<\313\024\204\275\324\216\327;\016B*<\244\313{<\321\240\307\274&\177\216=\003`\266\275\277\013\230=h\032\026\2745\014#=9\017\007\274\266\254\224\273A\005\026=\350n\204;%%\032\275OF)\275\024\366\322:\350#+\274\252\211b\274Ci\365\273\375d\331<\027^\307\275\225\004\364\274{uf=-I\031\274?\373\200=\240\225~\273\302*8\2746l\232<\332\225n=\302<\363<\367\261\020\273\004\314s\275v|#=)\025\206<\341\344\231\274q=W\273[\007H=U3-=\242\365W\275\205!\r=\270}-=\223\322\207<\020\031\264<c\0045<%\276\004\275\246\226\263\274\342d\221\275\217E\363<\233$j\274\323\216{\2754\005@=\226\250P<?av<X\323\305=\374\024\367<\3771S=\341\371\n> \321\023;#\362\254<\206>\014\275\330\276p\275E37=\324]\027\274\270\001><\341\005\346:\205\224\201=\341\367D\275d\374\021=\t\351\007\274\246\326\201\274\215\247\233<\260\342*=$\2732\275\315\351t<\031\253@=\242\244\205=9*\317\274\255\264W\275Hk\020=&\033\024<u?\274\275\023\236=<\375\257?=\'e\254<\240*M<Si\213\274\302*\313=\232\346c<\010c\220\273\306\014\243<\001@\267<\223J\267;\334\355\221\273\331\266\244=L(h\274\236I\272\275\353n\t=2n\302\275\014b]:\311\306\261\273\271*l=\250\316\325\274\343\263\254\273N\377\371<1\315\217\275\024\377*<\357\005^\274\033\201\276=\3011]<\245b9\274\r\345t=\315_\255\274\302s\216\274\347\374\256<\034\230\231;K7\201\275\324\335\230<6&\002\275b\351v<\264J\251=\352\017\205=\302\311\336;c\257\375\275\2753\215=\025\242\257;\246H\272<\272\300\026=\332\256\264=ry\245=<6\261;sbe<vv\354<-4\232<\226h\235\274\017Z\277=\266\242\222=\332\026\232=z$\245\275\000\033\205\273\255\005\t\275\371\350\371\273\316E2\275\215\200/\274\244\216v<\030\356/\274\r\244\304\271,\3233\275T,\030\275\322\001\306\274\347x\360\273\347\254\271=\244\351\346\272\275V\205\2758E\337\274M\226\303=4\350~<\351\213\346=\337\246P=\3258 =\"\360b<\350,\365\274\002\273\332:\003\344\303</|!=\241\231\266\273\361\2624\275?u\260;\301\001d=5w\250\274\025\327\344;\332X\t\275\212\240\230=G\243F=O\322;<\004=\035\275\177\333\217\274lC1\275\203\234\247\275a5\000<\"J\"=\0056\244=\326%\345\274\026\014\314\273k\364\273\274\240R\352<\'\\\n\275iI\032\273\343\t\234<\343w\203\275fG\361\274\022tJ=Y\r\216=T\203\303<\037\375\302\275\014\365%=<\257\253=\263\r\371<n\027\036=\272z\214\274\203\372s=\314\324\362\274Rn\200\273\227\016\262\275\3642\202=\002\303I=\000@&<\022\320\310\274p\370\031=\344r?\273\021\223\312<?\'\225<\230\036\320\274\364\003\016=\231\344\273\274\026\214A=\220\017\215\274\221}\276<II,=#\t\243=\'\003]=\002\242\316\275\244\020X\274\322\335\301<x\306\255=x\340\251<\215\325f\275!\320D<\216w\213<\250\270\n=\010\270\303\272tw\027=K\371Y<\024\247\234=\221\274=\275\376\372\033=:\371\271<u\213\250\274\032\374\303<&y\254<CCd<+\n\275=\330j\247<U\230$\2759\235\373\273\235\245X:\232p\203\275e\3149\274x`s\275|S\206\274\253Sq<\013\212\273<\201>\207;\315\366\032\275\336)0=:\017\004:\370]\214<\256n\213=\236P\251\275\301S\251\275p\361\274<z0K\2756\331\236\275\377X\372;\363\220\251:*\025S\275\005\"A=\255\222J=s@\032\275\t1\272\274C\201\232\275\370\2305;]\367/=\035\352\301\273\255\254\220=\001\331\232\275EI\356=\341p\200={\225I=\320\352g\275\010\261\216=\305\007\245\273\275\206E<@\276\306:\326\317\227\275H\n\220=\303M\227;>\361\233=\222\211\244\274E:P\275ao\247\275l\226\325=\332\240\"=\347\006\322\275\212\316I=\374\"]\274Y;i\2747\230\304\275\007\303\352\274l}\255\274\326m\331\2737\3159<\3038\203\274U\356\032=\314\355\364;\346\025\260<=\313\274:\334\276\\\274~\375!=e\230\214\274X\235H\275\215\360\366<\341\204=:\303\3701\275I\204g\274be\313\274(\340#=&\365\"\274\301W\001\275\307\201D\274\263\177\231<j\367\357=\370\351><\037\264\032=\255\035\320\274\321G\253\275\216\222\317\275\340\331A<\244nq=*\3068\274v\254V\273e\337\223\275\032\343&=\220\217\251\274\324Xo\275{\370c=)/\234\274\314i\r\275\351\227\232\274L\337\t\274\020\224\271<`L\\<\276\227L<n\2558\274\371\024\034=\313\033F\275\226\362\030=F\221\321=\"\307$=\205\331\200\272\275&u=\362]A\273Aw\037\275R\201\213<j+\003\275\355\024<<\216\245/\275\221\001Q=\232wl<\n\033\377;\260v\331;k.6\275,A\213\273\"\273\326\274S@\014\275\354F\221=Xz\370\274\266^\330<\255\233\326\274\356\014:\274\354\265e\275Pb\017=b\233\220<\203\200\263\275\376?\353<\010\037\233=f}\250;\312b\256\274\316\304\343<\'\200\r=&<\336\275\3254\260\274\2316^=\367`I=v\322\251\2742[\302:\272L\304=(h1=\223`S\273\274\345\275<\243\017\014=\341\256F=\360\035\220=;)\222<\276\362\207;\356{\212\273\355DG;\302\036V<\336\311D\275UN}<\222\217=\274&\312t\275\306\326\210=X\203y\2751\341\256<\007\033D<\002\000\237=\330\224\200\275\320tV=\371\021\206;\375\357\341\274\252\037\315<\374[>;\272]\246<v\356_\273\241\306\311<\266t <\202\245\352<8I\222=J\341(=\246x\013\2753\031\033\273\341{\222\275i();H\367\306</-\321<V\n\216\275\371N\030=\274\r\336\2734\3321\274Dl\240<\317\t\036\275\326\030\217\275\2458\212=\'X\377\273)\324\000\275\251\201\336\275\310}G=_g{\2758\272\366\272\354\261\352\274\356\216a=\242y7\275uu\313\274v\320d<h\351w=\343\023T\275\023\r\222\273g\322\22280\241\261\275\263\310\026\275\340\033\033\275\354\300E=~\324E\275\200\267<\275~v\365<\235\304\025=F.\006\274\353R\213=9\307\007=\245\301\260\275\235+t<\360L|=,\2630\275\350\276\231<\231k\031=\020\343\022=Q\226K<\002\336[;\372l\266\2731\n\250\272\324\274\274\274\330\227\'9)\206\217<\300R\023=\020\312\003<\236\257)=\232\211\210<\002x\257\274\274\n\270<f;\364<\310\352\276\272g{\312<\221Np\275\312 t=\223hT<g\002V\274\217\274H\275\214\207\032=\017\301:\275\007\002W=\356PU\274\341`\210\275DcN=\n\301\036\274\327\325b=\261\361`=\316\231(\274\002\373\242\274O\273\202\275;\274.\275\373\273\224=\205\034\211\275]\200\350<\237\245\220<5\323\013\275\'P\221<\037\266\025=\253\325==\225\312\240<\231\357m=q\254\236\274yJ\260<kg\006=\263\223y<5\325F=\237X\324=85\000=\312H\241<q\217\311<as\215;34\340<\017Lf=\225\351\324\274\260Z\027;\031e~=\264\250\007\275\361\340\344\274\n\361\007\275\010Hj\275\346\306\364\275^\202\010\275K\003\364<\352\215\215=O\022f=\201\364\272\275\244\203\n<Aq\262=\t\266\235\275\213\217?\275\266\224\215=D\250\271<;\344o\274^$\023=\327 \211=\200\214\304\274\360^\350\273\217\324\034=\"\351\271\274xM\256<YJY=S\300\020<)\214\372\273S\230\337;lE\302\2745+\223<\200~\260\274\317\247\335<\234\223\025\275\014$\030\274\354\376\010<s\334\200<.\302\214\274\262?\204\274\361\001\376<\325\277\025=\007\356.=\306g;=o\261\364\274d\256~=~8\351\274\225\236\245\274\247x*=\002]\304\275\210\2106\274lc\366;\314A==\206\275\300<A\"N\275o_d\2754\n~<\024\261\235\275\211\321u=E\014\224;\344\025\036\275\344\214\233;\264\214/=\311$ <\326Q\177<\315\000\262;=\360\242<J\240^;\203\313\361\274\250\013\210=\375p\010\275\002\030\237<Q\360\024\275l\270\246\274\361\304Y=\305\303&\275\257\017\213\274g\311P=\026\266a\274\016)\233<6/\033=\307\035Z\274\022\237\225\274\007\312\371<\305\273\242\273c\331\254<\306\222X\275~\255o\275\343Y\253\274\256\263\021\273\303\342\224=^\302\003;0h\212\275\ntk\275*\304\217\275\3656\004>\260\202\263;\325g\277=\033\256\230<-\246\330\274\266\004\3569,\275\'\275AzV<u\001L\275\006{\370\274\317\300\031\274I\2660\274\372\205\247\275Mm\347\273\207D\217=\307\252t\275T\3733<p\2636=o^Z\275\343\243\257\273`\037\033\274\333\244\351\2743g(<\314e5=\371^\010\275OB\215\275\256~&\275wXq<\262Z\202\275K\265|\273AK\220<\313\3677=z\2168=\304\024\'\275\017\014==BVQ<\rQ\327\274\024\325S\275\361\222\250\274 \247\303\274\276\3408<s\2378<*.\353<\254c\204=Z\360\177\273\337J\t=\201ak\275\270\340E=\204&u\275\3376\302<\2042m\275$#_<\250(L\275\t@n=|e\225<G6\003<&2o\2750g\025\275\314\246\207\274t\317\207=\023J\371<\353w1=o\222\270<\362\033\231<Z\213\267<\202rk\274\223\360\353\272\016[\223=n\307\000=gA[\275\rsO=\270\320o\275_\000\036\275g\230\003\275\234VM=V\025M=\336\276L<\224p\346\274\246\210d=<\327\267<M\352\346\274\245\347\021=D}==\234\323k=\276\032]\2754v\312<\220o\272\275A\310\377\274\260n|<8_j\274\376\215\261\275\326\200\252<,\301\274=G&\026\274/\203\307\275 ^\026=b7\032\275\355\351\352\273m\313\225\274\334j\217\2733\\\252<\241\263\353<\350\035\270\275\221\231\200\274\364\030\261=\327]r=\364\270\356\273v\344[\2736\177{<\217Q\027=\367\263\215\273\373)\213=#J\300\274\270\331\242<\n\365H\275\322\341\210\275\3222\271\274\023U,\275\372\301\210\275\306\251\224=\331nj=K\271o=F\311~=\216|U\275u\231\315<\037\252\247=\337*\242\273\216<\230\273\271Oh;]\344\021=\024\355\021=\265:3\275\n=\254\274\347\320\367\273\2223\216=G&z=\266\271j\274\255\341\341\275\237\nn\274\235\364\310\274\361\357\000\275\237\034\210;\n1R\275\331\373s\275s\263\037=\265\243\316\274\244\350\354<\t2\314=l\321|\2741\'3\274\254d\272=%*\030\275\342y\376\274Tc7<0C\277=\316\212@\275=\001\243\274\376\003\026=\323e\223\273\354\343\001\275R\244\336\274\277\235\303<ng\263;\345\007\313\274\240\350o<\005C\243<\302\021\031\274\375\364\216<T\334g\274\257\234\223\275\343\230r:r\311\250=\327\027\366\273X{N\274\004\364\202\274\326\216$=~\311r\274\270\036\'=y\231\027\275\305\320\276\274N0\027=\035\nT\275d\252\345<c!\201\275o\266\261\274\334\374\031=G\357\024\275f\334\200<\t\036{\275\325\326\332<\036 \323\274\341\266\244\273\242\261F<;\004\311\274\037U,\275[\213\216\274C\211\271\272\274p\010\276\235\301\232\275\016S\236\2758\277\243\274\3375\212<\371\016>\275\031\201\022\275.\227;\275\346]$\275\031\302\030=\213\2350\275\3627Q\275\364\353(\275^\343\025\274F\212\034=\321\265\247=\217\270\227\275\005\004\010<\n\351\247<\370\311\230\275\">\214<\246\024\203\272\213o\351\273V\310)\275\335N\004=\000\353_=\000\r\365\274\177\226\224<\td\213\275\312 D\275d\021\322;M\262b<\277\036f\275r\031\255\274\316\217C\274\342\354\326\274m[\021=s*\312\274\271\021-\2756#\226\274,4\371\274f+\227=\372;0\275\310\260Q=u\375]=\313u\'\2758)\231=\270\210\006=;\026Y<\275Z~<\336B\274;)p4\275h\361\031<\217[\021=u\025W;\220\256 \275\0076e\274\366\216\224<cy\316\274\331\\\274\272hI\276<\310d\205=\251\344\013=\262\020(\273\200}\364<\254o_\274\334j\300\275\306\365\242<\204\361@= \240+;\233R\301\274T5\242\275x\271\212\275\267$\260\274\333P\357\275\211\001\320\274\260bn\275\353n\243\274r\035q\275\270,\373\273O1I=!{Z<\017\301\030=E\250\270\275\262tE\272\216\257\275\274\203\t\373\275\274x\014\273\006\020\255\273|4\302<I\367\005\275\367\261\032\275\\\200\255<HP\320=\272\262\277;B$6<\304\333\213<\006\231\264\275$\364P=s\034!=\2523H\275\333m\376<?4\364\274\223\375e=\005\200\214\275T\276\013=\367\216\217\274x\017\217;\357\356L\275p\314]<\343\223\327\2745{J=\231p\207=2\343\354\274\324\255D\275\303k\027=V\271\220=\321n<\275\236\350\017\274\270bu\275\201\022:\274m\360l\273\324\304\014<\310o\353<\264b\316<.\321\257<\341\204\270\274\370\353\241\272S\275\244\275\005O\221\275\204P\310=\326\345\211\275w\226s<$\251\360\272Y\252\013\275\3609\307<.\363\244\275\255bN\275\220\225?<\313\266\271:\'\n\014\275\246\2345\274\331\2763<}17<}\031\373\273\315\317_\275.\376\210=\350X_\275\336\230\375\275\267\373`\274\022{\214\273s\210\304\274r\341]=x\2634\275#\312\376<8tT=\r\300\213=\226\3621\275\356[\225<;\357\322\274\2061\351\272\351\210%\275\034I%<\177n\301<\n\"1\275\301\375\333=d\013\006<\246-\023\2754\003\n=_\215p=L\225\010\275\231Q\201\275\310\227\354<\307\010\025\273\346D\212<xsP<\3609\253\274I\372\340\273\366\365\275<\311I\017\275<\232\240<\202\030C;\207\313\334\273U\333\013<\314L\210;{n\277\273\346\177\031=\016\017\245=\226p%\275r\213\312\274\3153\363\273\246\312b\275\"\025\363\274\361|\335;\267K\246=\220+><\362\276\215\273\000\312W\275\350\ny\274\250&\242<qNu\275\356\036\261<F\212\344;\025\2501\275\2559\203\275\225\\\034\274&\350\223\275$\212\304\274\240\320\261\273T\241\355\2753\307\246\275\252\271\306<\342\233J\275f\340U;k\013S\275O~\t\275\370s\312<C\032\233:8@\346<\2450\264\274\307\007=\2746!\277\275A\336\301<\033\032\350\275\342\310\225\275v\242\207=\3463s\274\255U\277\274\205\236s=\003\333U=\317\252/=\004\322\246\274\234\375\331\275\025w\240<\332\232\000;U\350R=\231c\217=\356\025k;\304\271g\274\356\223\331\274\366\266\312<F\353R<\341\245\231\274^\213\222\275q\336\r\275\341d\261;-l^\274\003o\300\274b\241\'<O\025\213;\253\225L=\252\331\013=\315OF=\r[\330\274\222\201\037<5\255T=\256\020!<\372\364\\\273\321y\031;b|o=XW\334<\2331\362;\311h@=\3337^=Tn\027\2756r&=\001\322\211\273\300\200\027=\266\003E=6\354q\275\341\003\006\276\306~c\275`\351\223\275\367\304\023;\311H\005=\361\262\016\274\231\340\207=\021\232\n\2751\265\022\275\335\201\256<yt\317<\360\274\266\274\t\222\340\274#D\013\273,\267\252:Ho$\275\266\301Z;_[\325=\251\224\316<c\022k\275i\3166\274\004\312\232<\326M\257;m\257\254=\367C\310;\257\204\257<X\271\001=*\361\201<\177\363Y=I\213A\275\016\362W\273\327\355\n=M\324\032\275\000\343\260=Bz\230<\225,\244\273@\r\373<|\244I\275<\254\234\273@\021\003\275+\177\241<z\322\352<0\234\2077\224\223\010\275\222\2770=\017\212\010\275\000\303+\275R\035\026;\3104\234\273\000\346\254\275\226\267\201<Q\332\007\274K^\211=\323l\240\274q\301r=A\3612\275\374\"p=\023%\332\274U\272\230=\247\'\307=(\036\321\274\211\004z\273\320\334)\274\357\003U=\324\340\327:\262K\347<\313\232\000\275\013\212\025\275\202\023l=\271\265u\275\213\244\313<\305\014@=\217\004\004\275\267\022Z:C`}=\377\353\357<\026\301\342<P(\211\274>\261A\274\271$\204\273\341\250\020\275 \336\243\274\335\200\005=\332F\223=\376X\224\275\361\003@=\215\'\t<\203\202m=\322\375*=\'\350\034\275\331\246\221\275\330\317m\275 Y\265;L3h=\220\262c\274\254+\235\274T\257D<\2710;\273\324U\r=\332<\002\274\220\326\347\273\302T\'<\331P\331<+@\240;\007t\216\275\232\323Z\273\3573E\275\255q\355=\325\3063=\302\023c<\030n\220\275\\:N=\332\323r\272\322^\237\274\207\203\342<\0303J\275\306K2<\343+\230\275\323Z\270;\361\2523=\206\257\016\275M\365\001\273\262\'k<\274\250z\274.j\262\274\355V\312\274`\256S\275~\326\263<\322\354\223<\020\277l<h\300\244\273\224\342\357\273J\035\242\275\231%\226\274\327\207.\275\360(\\=\t\246\017<\304\354\214;P\233\253\275\350\250d\275E9\342\274h\0312\274\235$\025\274\371jI\274\363\344\022=\225\306\266;PD\262<f\362\230\275\352\262y\275,\252\232<\246PM=]\236x=H\026\213\275B\301\335<*\221\234< \303z\273?\2748\275\373<\234\271\231\216\220<xQ+<\010\346\221=QD\226\275\027\014.\274P\250C==\221\317;)\246\211\275\300\0345=\316\203/=\237\273\243<\342\336G=B+p=\004\"\302\275\226\300\"\275*\311\321\274e\r?\275T&\252\274\347~t\275\205c\204\275\030\204\t=k\227\376<\354c\033<)`\017\275$\330}<J\036\020=\320\205\374;\352p\345<\002P <}%,\275\211\206\002\275\006\227\347\273~\\\274<\315\253\223;\010%z\274?\265\005\275p\310\343\273\016\032\310<\2471)=\322\204g\275y\024\254\274;\223\216=M\351\227\274\302u\361\275\300\364Q\275\334+\362;Ph\216\274\325>e\275\365\036\010\275\216\355C\273\346\264\203\275\363\246v\274}\346^\275{\325\220\274\221y\216\275\314_\373\2749\210\217\275\214\323\006=s\222\315\274\2074\254<$\336\322\272\371\331\214\274\356\025Q<\253?K\275\252\334u<yx\246=,)E=\016\2260=\212\201n=\212\347h=C\347\356;\205.\375\274\233#\035\273\336`\334<M?\372\274\353\315\314<\342s!\274\312\037\223\272\267\245\000=\341T\277\2750\363\023=\026\252z\275\363\026\356\273\251\260\262<&=\n=\326\357J\275ek\361=\204o\213=\366c\316\274\201\330\346\274\206\253\004\275\361\020\030\275\311\312s\275yj==\252\007\276<\222\207\326=H\255\002\275\253^\206=;8\000\275E\2547=s\342\316\275|9\334\274\033_e\275\330\231t=\307\223\244\274\345\311\312\275\366*9=C\330\276<\033\272\375\274\312\324M=\201-\351<\261`\212\274\013&\005=Dj\210\274\317s\230=\221\253\007\274\177+,\275\"T\227\272gR\326=\276TQ<\361F[\275\037~\365\274\323\201\342\274h\0211\275I5v:\344\370v\275{\202 =(k\240\275<\275\201\2732\036H\273 \242O=>v\030=K\367&\273\010\013\217=\357 \022=h)\357;q\270\353\272(\216*\272&f\230\274\252\371\321<d\372\315\273\'\003\335\272S\254P\274\214\300D=\214#\337<\366\372u;\022n1\275@\275\001\275d5\217<\031\240.=\321D\025<$1\003<0\325\243\274\033\273w\275g\356P\275\n\253\004<\355\024X7<\314\366\274\201B;=\310\302{=\261\301\201\274\277\302x\275R\356\224<g\'6\275l\262\326<L\304\274\275\225\261O=m\306;=n\022\251<\270\373\305\274\256|\022=\207\344\313\274O_\304\274[\3131<\203~\352;\312\210\246\275\032x\323\274SQN\275\364\377><\370w\230\274\020\323\230\274>hB\275\376\255}=\004\256\374<s\260P\274\367\244\004;_\250Z\275\246\266\\=\232~\360<\001\200(\274\360\240G=\351C\305<v\026\305\275\256\321(<mH\010=+\t*\275k^\331\274S\252\271\275\0029\250=\"\243\201\275-\303>\273\303\246\214\275\371\\2\275\313\265\323=\311\304\353=\221\250*=Xn[\275H<\320\273a\207\006=#\256\350<\254i\272\274/\315%=6\332i\274\373S\036\275\265\r\274\273\346z\256\275q\271\203\275\013|\244<\331\206\024=1\326\207\275\365H\325\274\300\030\3469\014\314}\275\244\3672=\207S\312=\003\274\307<\036\272(\275z\345\\<\331<\323\274E\277\334=\334\025g=\341\025\347<F\2540=X\231U\271{\325\201\275.\307\264;y:{\275Pg\033=\372\202n=\263\321\250=\0109\344\273\007Y$=\204A\022\275.\341\331\275%\361*\275\263\037\377<D\250\037<\025=\201=\364\r\017\274\3105\260\273\235D\032</\252\253\273\370\016\n=\333%\237;\032C\022=\227|Z=\271\237P\275\200\220q\275p\026(\275\213\330\216\275\231\343\315\274\374=\340<\001<G=\036\177\343\274DM\022\273\006~\326\274\273\276\216<\261x\267\275k\243\325\274\342\177J;\2308\004\275\230r0=\354}\'\274/o\030\275\265\337N=9\244C=\001\235#<\302|\000\275\320\303<=\0052\010\275d=N\274X\224\244\275]\277\206\273(\241\303\275e\360\223<F\270&=0\371\221\274\357\322\217\274)\347#\274\334\027\016=\3262\377\2753Q\234:o}e=&\340\020\273\273\354\375\274\245\034\\\275\360\330\"\275\211\031\337\274\265F\272:r\200j\275\223\331\034=\302\022/<\221\035\350=\rF\267<>c\270=\264U\344<m\267\260\275\365\376#\273\376\377F<\3156@<\004\252\372<\025\363<\275>\322\216\274\304\220\271;\373\214\016\274~\340\224<b\203\336;\221\264\376\274 \327\302=\010-\307=:\001\322\274\025\355+=\244ZE\274\017\004~=\301v\242<\2270o\275\350\354\010<\230\245L\2747\\[\275\307n\242<\264p\237\274LY\350\274\021P\244\275|\321d\273\335\332Y=\210\026T\275\320\347\370\274\252\373\014=\310\200\036\2744X\210=.\025\232<\376\rM=X1\226=M\214\035=\225\002\350<\246\2051\274p\356\000\274\231\324\211\275\21105=\016\352\211\275<]\025\275\003\034%\275\237C\253\274\322\316x\275\316\004\231<\207e\202=V\237z=\rJ0<AS\274<\260\315\222\274\353o\304\275\355g\371=\355\314\232=\214\336\364;[c\226\275=C\320;\275\360\234\274\332\033\035<[W\220\273\253\351%\273h\024\317\274\240\320\006\273\275B\325<n\013\023\275\026\337\355\274\217\025n\274\272]J=qc\301<\355p\241<5\233>\275e\340\221=\205]\202<\370P\205<\253$\227\274\3601\243\274\311B7\275}\364I\273\304UA<\314\272u\275\260x\274<\2755t\2759\215B\274\355\334\231=\300.4;R\240\224;\357&>\274\034\345\214\274&\220\275:\251\236\231<^\267\005=\311\025\206\273\376\346\232=%\2620=\036\331-\274D&\247\273t\210*=\226\365\215<\360\274\257\275\367\245I\275P\275\317<\361\010==\271\317\201\275\252\261\236\274\220\0059\273z|\002\275\241\031`=\352\236\301\274\334\032\364\273a\270\250;\250\356\234\275\371\250\371<@\030\361:\2473\"=\310lN\274)o\235\274\2756_=jh$<E\311\222\275\366\005\214\274a\321K=`\215\246\275\027\316\277<\'o#=\217I\210\274\277\177x\275\201\322M<Q\375\253<8X\020=F\365\204:l\267\250\274%\365\305<\r\002\223<f\207\370<\334\343\351=\250< \273\254\355\005=\372\324z=\211\221\244=T \021=\215@o=\262\256\322\273u\177r=\022\301\313<\256{\212<D\356\215\274v\0203=\362`Y\275(-\355\275x\"p\275z\322\204\274{\316J\275l\200j\275v\274\207\274\300\321\001=\260\375\312\275\000\340\260<\221\353,<\252l\346<\326\036\036;b\272\225\275}\341T<Q\227\277\275\036\344\002<h\206p\275\320\361\240\275U\330\317<\373_k\275Sh9\275HmG<$\020\022\274\256\005)\274\207.\267\274B{W\275\nC~:Y\245\024\275\352\3572=\n\300\232<\261\352\315\273&\227,\275\270\360\205=\375\371\207=w{\230\274ml\217\275\001YB=\313|\344<\023;\\=\330q\234<\212\036\214=\'\343\202\275\256i\177\275\016\275\257;\270\276\221<\202{\004\274\365\341\220\273\3629u<h\314H\275\242\007\314<\333\314\264<\025\023s\274-<\212=\251U*=\024\377\324\274\203\321W\275.\2056\275~\350\262\275\326=\317\274\277\001\035\275\366\320\230\274\213!2=\274\321\335<\222\334a\272\000\327X:8r#\275\335\004\005;\177\214<\275\305H\221\274q\327\205\2753O\004=\364\251\335\274\277\013\302\272\207E\337<\177\204\260\275T\313\230=\n%c\274\333\310\321<\330<\235<\216\3146=\233\362\240;*D\317\275\312\232F\275\024|\202\275 \246\274<t\216t=D\030\343<\312\370s\275\377\035\344\275\373P+=\361\034\242\274\361\332\302\274\234\253H<\233\230C\275\233=%\274\006\332\200=\307U\322\274\330\375Q=\261,\374<\031\375\355<x\203\032<\006~\262;\271\325==U\227r\2754\210\300\274\035B9;8H\035\275/\232\330\272\343g\230\272\014k7\275\264@\006\273i\310\003\275\377\342\247=\371M\257\274M\035\224=s\r\260\274v\014\036=\210\004\201=\315\322B=}Q(=U\272\216\274\320yJ\275V\270\010\275\254K\224\2753\230\237\274\240\301\240\275H&r=\301{ \275D=\354\274\236\"r=\000\027\223<}\003O\273\226Ak\275\230\030k<vW\272<\246\001\232=\210\310\372\273/i\017=Xi\352\274\350)\200=\'\204F\275\001\n\350<$Y\316<\350\331\027\275>AO\274\377\001b\275\031\244u=\264&L\274t\200\227=\262b\222<\217E\361\274\226\253\026\274G2\375<\242\0101=\3703\244=.o.\274M\016\242\275x\325==\331x\253\274\327`\334\274\343o\024\274\310!\236;\365\204\276\273\334\026\237<nvL\274\260\345i\275\265\242\236\274\260M\211=\371\206\257=\342\221\024=\272\2138=\274\350\305\273\254R\225\274r0\003=y\031Z\275N}y=\246\221\237\274\201\360\234=w\265\304<\024\254\275\275\351\333;\275-[\333\275\0226/\275i\276(=5;_\275\216\372\034\275\376\367<<\246t.=\370\305\351\274\250\246\311\274\235F\026\274\253\216\361\274\370\245\367\273|\364=\275TO\203<u\370\233<\232!\200=\244j\266\274\260{\270<)\355s\275-_w\275\277\374X=\303\203]\274\343=6=\365k\020>.@:\275\251*5=*\310\255<5\3439\2759\007\206;(\264\002\274\223\002\200\274\256\025\220\274\323\340\241\275h^\304\274\244\373\231=%\232\241\275\024\347\276\274\n\037&\274C/b\274\336\016\r\275E4j<\005J\350\272E\304\231<\010\202:\2749J\022\275uyR=\347\234\310;1\271\353<]\205\200\275d{\204\274 \233f<\t\325\364\274RWI\272E\346\353<!\025\202\274\341H\273=+*\204=\272\270\207<\265\027`\274\2307y<R\271\356<\356\210\263=\223\364\254\273\3327k\275\373\203{<\031\220\307<\227\257\013\274\312.\211\274\255m\366\274|\240\351\274\017\235\347\273\366\212\324;\255\360\307\275\336I\220\274\271A\222<\207\001<=\356\377\037\275\366\273\021\274\023\200\324<\244\037\024\275/\247\335<\025\013\205<0h\332;\203Ld=&\362:=\2122p\2755g\004=o\222\227<6\334\247<\272\213\216\274\227\025\356;\333%\205\275\324\\\027=\254\376\204<\tlL=}\002\034\275\273h2=\r\017\265=)M\220<\302\004k<\237\246%=\221HV<66\010\275p\237\272\275\254y\350<\357\215\007\275\330\r)\274&A\204<\340\247;\274JfZ=\t\2302=s\303\024\274\020\262\215;\025\243\236\274e\306H\274>\240P\274c/0=\010\315\240=\302P\023=\034\026\276\275m!\306\274\307B{<\031h\205=\252\232J<\344\313D\274\021\230\314\274\327z\351\274\022\331A<Xk\006>\377\244x=y\000\007=\354\2056=\303tE\275\031\333\033\275\322^\315= \264\031\273d\017\021\275po\014\274\3121$\275\332/\024=\312\377e\275V\376\225\274\001\271\206\275\247\\\263=\276\034-=\215I\351<\310{\003=\271\303\032=\222\203\237=\t\2533=\364\271_=\024\013\003=\004\302\220\273\371\355G\274\331\014\225=;\355\252<\206!m\275\333&\224\274\030\005\327\274\220\220E=\302U\340\274\226d\306\273\026\237d\275^\224\345\274z\236\371<\340+-=t\013\355\273?\320\217<u\375c\275\315\223&\274\321\033\312\2743o.\275\215\r\'=\366\234N\274+\310\255\275\230\'\220\274CO\350\273)0\226<\343\256\307\274S\016\224=y\354\006\273\332\265\243\274\361\271\204\275\330.\271<\276\177\r<\3626p=w\335l\274\273\271\240<\016\363\030\273<\330\232\275\006\023\347<y\271\310\274@~\005\275\352\217\327\274l\200\022=s\224\001=\270\024\225=\\\337o\273I\331\272\275\241\331\332<\322o\335<\214\247\250\275\005\263\211=d\027\203<]\201\233\274J\256\363;\034(W\275\240\023O=\372\325\320\274~\037\240;qJ\346<\020\350\241;\014\360\r\274W\354\234\274\237\222\004\275\022\317\216\273\013\204v=\302\231\002\274K\221\202\275\355\214W\275\014g\231\275u\314R\275\360F\262<\367 \367;\264x\005=\252T\345\274\224\3654\275\265\347\021\274$\030\327\273\230:4=\334>w<^\r\306\274\272D\225=G58=\251\253\274\274\337\020\022\275\271\371\376=\203\n{\274\275r\020\275\037\317\225\274(\376\305\273\236C\033=\263\210\302\274\213\264/=\341{\263\274\310I\262=\366(\252<\034\336\225\275qV\333\275\306\216\014\274\360n\320<\033[\310\274\362\231\022\275\013\324\372\274\334\224\242=L\242\253\274a:\330\275\214\340G\275\213+.\275\224\'\327\274h\300\343<\274T\341<RW\223=\300\236\361<j\021\232=\255\223\017\274\314K5\274\2365\300\274\361\333-\275\006\034\267\2725h\235\273\301\202\255;r\213\252\275\214A\225;q4\034\275 \264{=\260b\250\274\340<h\275.\251E\274M\247v\274\357h\230<\212P\207<\006\320\200<}\264\221\275-]\327\274\010\024\332<\341\n#=\0224\233\274\233[\212\274\032\037\202<M\341\224\274\225&\\=\324\240&=\271\0262=P\362\002\275\373a\275=z\017\235<\326\343\243<\324\343\000\275\267\246h=X\000\250\274I_\020\275\353\320[=|\235*\274\266\274\033=\253Fc\275cTg\274X\305\271\275\331\312\010=\323\316\324=0\214(<t\203{=\317\356@</\201\276\274\201\205\332\273\364\031\224\273\257\']\274?\\\356\274\216{\267\274&\331\001\275\360\257{<@!\324\274\341\345\000=(\3537=\374\003\025=\365h\304\273\372\016;:\255\267\023\275i\005\213\275\373\340\315:\260\352Q\275\024d\226=h+\037=\216\332)=\302\n\010\275\231\364)\274\255<\r\275\307T\320=:\354q;\275B\310\274\372\336p\275C+\234<\207\235\027\275\327\256\365<\023z\215;G\020\256<Jp\275<=\231\001=\356\200\252\273\354\233U\274\243\003/\275\243\211\207<\325\3665=b!C=\265\241N\274\310\206\270;E-\205<W\030\342;\"Pv\275\004\372\270\274u*\357;,\376\244\274\322\300\204<?]\024\272\362K\260;\241\362f\275\302\241\010=\0300|\275r\324\034\275\222U\013;\343|\257\275\234\032\245\2756\242/=\267\030\367\274S\377J<Z^\207=O\374+\275|\367?\274fI\212<\333I\204<\037Dr\274\360\357\020\275\225\206W\275\231\n\000\274\342?;\275\242\374\004=\016r\273\275\334_\253\274UE\003<5\245\264=9\220V=O\244\222<\237\253<=I`\244<Z\032\232\274C\370\223\274\374o\303;\366\264D\274\341\010\204<\246\231J\275\251=\355;\\\352R=\266\211\030=\232\356\021\275M}\035\275* \272\275\375\266R<\314\315\227\274o\370\"\275\365 \315\274@\232\254\274\325H\034=~*K\275:\253#=\252 \016=\363\216E<M\256\010\275\375\332\241\274\247\013\235<\\\367\255\274M\345\225\275\022\312\317<\364\002\255\273\214L\200;\255p\322<\334\236\202\274[C\024<n$9\275\341&\242\274\217\n\331<\360\327\217;\372s8=\033\010\213=\214\001\213\275m\017\344<\203\027\350<\276_J\274\376h\225\275*\214\345<\n\343\203<\\\337i\275\343\017\001\275\223\013\300<\340\224\003<\206z\332\2740\001\265;y\340\337=\300e\206\275\037\202\007\275\'\355\312=\275\306@=\230\027\263\275v\001\300=p\310\264\2743\233n=\274\241\257=\036\343\267:,Kk<\347M\021=;h\247\275@/\361\274N3\r<\2366\324<\020[\273\275\2611\230\275\212\323\210<\362\024\363\274\010\260\237=\014\010\\\275\346\036U\275\350bK=\'\275\345\274\205\003\241;\261\375 :\236R\213=`\312]\275\251\227\307<\236\017\256<Y\317F\274J\204[\275\364!\356<2nj\274p5\251=\374\373\020\2754\274\352<\356\254O=\371\005\222:\376a\205=\343y\266=\004\346\347\273\376v\314<t7\252\275N\376F\275\341\310\027\274i[\220\275qf!\275\013\340\246;\314\\\225\275\247\260\321< \212:=\025\323]=HU;=b\361$<3\261t\275&\214a\274\222\341\013\275si\"\275\222\216:\275a\320\263=\355\375A=B<Z\275\316\224\316\274&\353r\274+\t)\2751\346\254=\rL6<\224\371(;\343\276Z=\234\215\313\274\317\0257<\301\251\243;v\'\314<\207{q=\027\370 =\257\366\304<R\355P\275A\002S=TZ\034\275/dY=\010\213\302\274\277\306\350:\tc\206\274b\025\235\274d\017\302<\257\216^\273\326]\230\2759y\365\273}\233Q\275v:\240<|\302j\275\2664\326<\274e\004<<U \275\206\316\316\275\325R1\275\026\270\365\274\207\352\025=!3\004\275\016\262(=\355\362\225:^p\275=\262{\232\274\ti\211=\257Z$\275o\253\234\275:B\265\275y\250\":C|b<Q\2629\275\005\t\275<\225P\224\274w\021\017\275\222\251\355;\241u\230\274\232\322i=!\312\252\274\217\211\214\275\247\003\317\274M\272\2679?\375\211<G\376\271\274\30017=\305T|\275\372;6\275\010\365\350\275\362\037\220\274\311\375\001\275f\227\263<RR,\275Q\336\333\273\324\340\221\275J\237h\274\317\356p\275\346H$\275\036@\272\272\266O\217<\006:\375<~\264\202:\241\260\341<\371Q\024<U8D\273d\0229=\030n\335\272<\266#=\t\2532=\222#\203\273\t\332\334=\257\214\332\274%\235^<_b$<\201\306\225\274\241*\206\274\351L\317\2740\035\233\275s\320&\275\304S\233\273xt\202<\212A\035<\330y\"\275\247\335r=]\327\006<\372\340\320\273\352\242\006\275\242\275\264<@\022\211\275L\375U<w\221W\271\021S\000\274@\341\221<uS\213=\223\222!\273\313\020\215=\255\016\236=\372\\\020\275#+9<\216\036*\274\235\211\342<+\237\211\275\'\234\221;&\311\205\275\202\r\232:\272\312\264=\202\322\271\275\361U\336<\200e\253\274\005\034Y=C)8\274\010\331\033=5\3029;G{\324=\3345&\275HD\345<\200\007Q=\251\250\233\274\272[(\275\007($\275\025n\245\275\'\264\247\274fW \275\2228\344<\353\325\211\275\213\320\220\273\375\252O\274-3\351=w-\3069\274\235\306<\343r\362<kT\246\275tgB=\262\243\367\274 \241r\275\320\377:=\0054\034\275\327@\245\274\265~\374\2739\274~\273\260>\357\273\360\023]=\311N6<\272r\226<FC\222\275\362\327\'\275\3308\320=v\251\033=W\323.=h(/\2749q0<!\255\237\274\\p\034=\033M\010=E\233X=\303&i<\307,\243<+\342\031\275\241u\207\274kB\004=K\374V=\224P8\274U\037\216<1\361\034<M@\257<\016\211\362<X\261j<\266\232\";{\013\220\275\214\314\250<+\352\237;\020\031y=\243V\t\275\001gZ\274\345\350!\275\247\353\313=\341\232\t<h\302\006=\316\265\246;\255f\255\274Ds\206\275\245\374\324<\253 \301;\013\315a\274s_\345;\2401\252\275\325\014\213<R\254\223=\330+\247\275\306\301\212\275\326\263\020\274=\356\253\275D\001%=\nc\003=P\266W=\207}\202<\200\333P<B\270\027\275q\017e<\003\323\254\275x\240Q<\203o\236<\364)\320<\366\277(=\301\333\211\274\341\347><i#\016=\266\366\315<py\320\2747=\2329\2221\312\273\310x\302<P\3043\275y\023\272\272\346l\237=B\233a<\335\030\217<B\277\235\275\313\004\002=\353,A\274\002h^\270\315\276\000=+\304l=]d\021\275\017\324R=\305\024[\275\303\266\246\274o\035\222\274\032x\204\273I\335P=q\016\235=\036\250 \275$\265\272\275\246\303\231\275V\207\222<D<\205=<0\244\274\352ir;\022\313\353<\024\257\237=\246\276q=?h}<\313G\336;\004X\317<\033\321\014;00\325\274\272\316S\275\374^\215;\3236\200<\204,}\275%N0=\\\353*=\'\017\247\274q\023\265\274<\252\256=xi\271<\346\322!=\250\361J\275C)\302<_\377\"\275\264L\211=\317\273W<\321\214\234<\217\007\326\275:\"\306\273\205B\353\274:\240\212\274\360T\231=\312cV=5\316\325<\274\333\177\273\347\230<\275\363\374\250=\252M\005\275\262\014\212\275\306N\205=\303\247\357;\002\367\264=\330c\305=\226\203\220\274\371q\370\274\336\na=O\336\301=\000E#=\267y\312=6\334\300\273\370\304h=\226\347\250\274\256GC=f#\375\274\262}\265<\303}\357<]aI<\340\006\201\275$\\\034\275\331l\017=0\257W;*d\203<\270$;\274\310>\360;fP\320\275\222\021i\275L`\250=\3027\010=\366\337\364;\270mO\275\0275\340\274\220\303(=s~\000\275\372\256\233;\231\2753=$\'\261<\014\213-\275\271\315l=\264\362\256=\007H(\275&6\322\274\321\354D=\332\334,\275\220\247\323\274R\266Y\275\253\265\016\274\033\3235\274\211\260I\2740\272\014=!\246\353\273X \220\275\223\227w=r]F=)\026R\274\201K\021<\354Lm<2I\312<\303Z\372\274\265\261\r:\224$\245\274-\026\233=\273\207W=\351i\312;x\372I=EVp=\326\234o<\376\205y\275\276\004\005:\346C\236=\377^,<$\377\360;7LA9\341\335\177=s+\232<\003B\355\274\036\355\030=\024E|<\350pV\274;\371{\275P-\372=&)\277<\241)\014\2750\236v;\002\'y=3<\364=@r\315<$\007\024<\360C\314\274\276\005\333\272n\254\220\275H\353:=\314\330\202\275\200\331_=\3529\260;\351\256\334;\333\275L\275\321\236\224\272\001V\312\275\027}\210\275\031\316\214\275q\217\305=\251\376\307<G\220W=^:\013<h\224\203\273\203\036X=\266\005K=e\263\215\275\250\266\003\273\233\231\000=\220\314\226<\372\236?\274zzj\273>\375\227\275\361\245\317\274tJ\204<lK\375<7\321w\274\225\323B=\265\r :\241\275\245\270&-\202=N\252\243;\300\207?<|\206|\275\306?9\275\225\031\032<\203k\223=\271@\226=\206\237a\274\363\253S=+}\004=\310\331\212<\273\220\224\272<\224\240\274\"\312\271\275}\213T\273\010\272\245\274~l\016\275\212\213\327:CtX\274\201\020\251\275\307\256\274\275u\305\214\2742r\243<\353\276c=\254wa\273\010L\242;\037jc=\243\013\270\274\027^\367<=\232\207=\030\322<=/1\035\275\265\237\037;\254-\232\273Z\211\366;[;\'\275\223\243\315\274\342\200\222\273\353+\255=\365\253\025\275|Z\'\274\225\321\371\274\255B\032\274\272y\214=\250\332K=\375O\273\2743\306\034\275\222O%\274\237\025\326\274\350\\\223<\212@4<^H\371<k\323\323<)S\256=\036N\216</\337\222\275\274\215\246\274\245}\215:a\367\210=\305\325\346\273\274\326@\275W\345\023=\357(\324\274 <\251<gz\264\273\034w\215<\254o\276\274\314\313\376<\'t\210=\362/Y\275\215\376\024<\312\025\035\2755\333\024\275\200\021\214;\265T\244\274\204Y\200\274R\035\250<\210=\001\274\275\371\343;t\300\273=\023\322J<6\314a=\236\375A<\312)c\274\020\222\315;\370\t?\274f}\327\273\321\026\"\275\002\207Q<}i\311=\315@\274<\021\214\300=\r(\202=\347@\224;\220*H<\222\224\013<\312r\021\276\026^F<\255\002\344<!\273e\274\3118\377<\253\347A\275Z\251\364=\2536\321=\374\233\021=\033\335\352\273\037\216U=uG+\274\226R\261\2756%\034\274/\223\267<\267\017\030;gQ(;1Q+\274\'i\337<\336G\310<\265\225\262\275\343z\331\274\247\302\373<\254\351\372;\275\342\215<\274$\317\274_\222\\\274[\210/\275T\010\003=\364\002;\275\322{%\274\014-;=\261%\222\274.\371\322\274\241\034z=U\343\346\274\035\265\350\274\273\312M<\233\022\"=\376\315\254\274\324\271\035\275\251\320\213\274m_l\275\325\261u=V\251\004<h\375n\275\337cv\275(\240\343\274\236\321T\275\217\033\214=\013\025\277<\0064\206<\214\206\223\274?v\266<\035\367\3239\314^\367<\033A\204=\206\246\320<\275\263`=\333^\261<\032\302\357<\021h\256<#\033\207=M\001\376\275\037];\274\364\261Y<\315[7\275gr\374<\242^_\274\014z\n\275\023\356\326=z\342\231<\223\250\013\275\204\205\004\275\260\334/\275\217U\033=\'w\030=\316\303\326:Dm\320<\364u\331<b8\031\2754_2=U\344\026=`\266n\275\246\223\013\276fTJ=\313\035\375<9K\267\274K\373\261<r\327\216\274G\210\351\275\271H =\205C\272\274\267\232w=v{\375\275\315\224\227=9\370\262\274\021\360\010<\004w\214=\215\355\034=W\206\r;\232^\010=\370\314\224=\377\t\356\273=\241\";\225\177c\275WM\215\275\017\3556<\323\346*=\333\240\027=\222\301T;\343>\t;\353\271 =i\320\240=\322=\341<o\327\202<W\030\265\275\374\253D;7$\253<?!\261\274\364s\033\274n\377\200\273\337\265D=i\324\025\275\275\202\246=\354\373\002\275\261\201\003\275\317\0231\275\345\354\033<G\240~\274U\036s<\2527:=1#\242\273y\360t\275\031<\213<\027\3577=\341\312\242\275#u\252\275 x\317:+%)\273\200\312\300\274N\323\326\273j\317\221<\213\315\352\274i\303b\275H\010\267\274T\332s=\225wW<6\365\006\275\226\375\241=h\024\305<\302\352\343;\365\364\025\275:\260\326<xD\035<\251\013\310\273\303d\235<\300xM8Fe\210<\037\351t=\3412B\273\352^\031\275F&\010=(\236\026>\234]0\275\303\'x=\35072\275\273OH=\250\241\350\274\213\001\016=\01362=nN\230<y\244\246\274A(\307\273!0\266<\001o\355\274\0205\310<Lf\226==\2759\275\033\346\032=\225\323\207\273\261\275c=\006\266\037<iz\277\275srQ\275\261\177\005\275\014\255\355;\264s\331<\"\301@=\251\0065\275a#z\275\356\020&\274>\251+\274w\316\277\274ZZ\206\274\343\034\340\275:\265\204<\371r\347<Wq\204\275\226\363\016\274|\331z<7\336\237\274\273\261(\275\331:\222\275F\273\201=s\033!=\003i\212\275Z\371\316<0\017\245=\233W5\275\212B\257<\033\321\201<\n\013\252\275e\270/\275\220\256\312<\021\016Q;\001\353\244=\272\245\330\275\253\255i<\337?_\275\345\237\001=\0206/\275`3(=\307\352\224=])\352<\'\240\007\275\207C<\275\364)w\275I\214\230\274\247,u=N\312\350:j-\205;Q\207\244\275a\367\217\274\277\013\030;Q\2200=\224\244\244<\n\271\344\275\032\202\352\273\322\342\372: \025\341\273{h\031=Q\020\021\274\371\363\021\275\236\240\244=\002oF;\267X\231\274\013\204#\275Y(\000=1\306e<O\310\205\273?\'\'\275\244X\t<f2\265<8Wt==\202\010\275\270\210\327\273\366?\371\274\'\247)\274\036d(=j\361\271\274\350\014E=e\315\262\274z\t!=9pD=\353\014\217:\300\\\307;\271f}\275\334\323\256;\276y\032\275\375\221(=W\330\323<\367\243\251\274\204H=\275j=\357;\255\374,=\221\025\000=\227\345\226\272x!h\274d\276f\274\226?Q\275\360\n\370\274\320\006^=\022\031\201<\210\232\r=0\207\302<\002\225\027\275\031]\302=f\340>\275\343\021V\275\255\317\035\273\337\250\260\2733\021\211;\222\'h\274\330\236\005=\032\300\254\274\267\276\007\273\244\032\225;\201\210@\275\177\235\t;g\331\006<\362\337\217\274I\302\204<\376[\330=,QL\273R\3207\274\374\352_=\257\247_\274\\\037\222\275\223D\343;\306jv<\022 \316=\357\330\336\273\262\235B\274\216\225\236<\220\317\021\275\325h\034\2747d\032=Z:\272<(/J<C\251\034=KK\273\274\230\363\t\275\220\260\345\274/\245R=\310\353 \275\343B\341<\212\000\303;\337\273\013=\246\020\317<\023\230{\275=\227\366\274v\213X\275\377\201?\275\3007\302<\351D\014=\2767>\275\357\'\220;\016%\354\273\200\332(=\000o\347;\2204\326:\266}\202\274\272\300\004\274\365\340\r=\200\0316< \033y=\023\275*=\234\345!=\273\265\216=\242~\026\275P\366\211<\037`\010\275\222r\332<\321O\027=\305\252~=s\266\311<\330I\345\274c\344/\275|ZK<\340^\\\272\003Wa=XF\037\275\177e%=\343\203\321\274\370W\n=o\377h\274?\261T= \345W\273S\\\256;\0249\223\275\2571[=o\326.<\273\375\243\275X\250m=\023k\275\274\332\270k<\034\016h\275l\255\242\275\221\365\t\274v\200\371\274\272\"8\274\316_\177=\"\253\003=6G)\275\314\247\222\274\331\262\237\275$\260N;\223\346%=\331\211,<\010\363d\275\244F\035\275\257\356\202=|\031\023:k\006\371<H\344\267\275_\372K\272\013+\274\274jM\004\275\323\260D=\\\204\216=\202\204@<q\005\275<\032G/\275\362\270!=\000\225P\275\256\017B\272,\342\006\275\007H\023\275\251pu=\360\006\337\274\335\274\001\275Z\332*=-\305t=i\303\237=!$\232<\211\037\357<=\356\035=x-m=\201\207H< \344\342;@#\306<\371\326\351\272\302\276q\275\036|\250<4\354\333<\001tg\275\320\232x=\250\223`\274\353\370\246=&\236\201:GBp\2750\243\251\274\376\262\273\274\031\224\234=\264=\375<N>\363\274\273`f;\271\260\263\275\274iL\275\000\024\216<]kF=\264F\032\275.\320\222\274\266\327\032=UE\247\273E<\254\2749\352Y\275K\274<=\335<\037\275\005By\274\000\223\261<\347~c\273\220{\\<\363\250f;>\302R\275\316\304\323\274u`\330\274\336\321(\275\206\360\317\273\315\247H=\3177\016>\215\322\001=\217\252+\275\210X\255\274+\274\203=\242\201q=6\014\"\273\231\361\201\274\307>e=\275g\'\274\306\254\212=\010\0364<\237\0343\273\336\315K=\346\200\207\275R\351\372\274MK\376<\017\2001=\351\237\202\275W\010\275\274\021?\351\274\353Oq;\347r^<SjZ<\312I\2649%\323n\273\026#~=\006\030\224;\030\207\215=A\017\036\275T\202\230=~\260\227<HUj\274\007$\266<\031\313\203\274L\003\325<\224\210G\275\362m:\272\321\356\210<V\2454=\204\250\210=\001\004\225\274W?N==\203\304<\035\016\307<_\211\250<t\250\312\274\224d\237<\216\213\254\274s\275\305\274f!\250\274\010\304\201\275M\263\304\274\331\323 <0Y\246;w\020\030\275A3E\275\213\247[<\360\200\256\274\302\225\031\274\034\365\321\274h\367Z\273\302\277==\013z\323;V%\242\275v\315\t=\215\001\004\274r\225\266\274i+\223<6W\263=\304>y:\353\264\034\275B\217\223:uoa=\276\367R\275\331\324C\274Xi\224\274\313\tv\275ml\202\2755\346\245=\331\275\310\273\375\335\226<~\242\010<\002o[= \227l=\340\250.\275p<T=\267\263\354\274J\252i\275I\314\304\274\320\321{\274og\204\275\023\343O<=\220\006\275\267\277\2639 r]=ya\013=\346\301\211\274K6\351\274\225\013\017\275\225\233\272\271\250\2770\275\304\304>=\263\221w<s\312\250=\377\014\344\273y\217\027=\340\303\277<\360\250\027=*\200C<yg\323\274\254a\245\275\313\305;=\324\304r\275mk\035\275\304_\214=\027\235\264=4\334\202==u\377\274\000]n\274\232\006\226\275|0&\275&\344\031=\266zC<\254\206\030\275\303[\303\274\265\324\210\274\353\302T<\303\303\3359<\375\204<\311;\207\275.\"f\274-\275\204\274\375\260\231\274n\024\303=\000\207\213=\204yP\275\r\347\263<}\360\202\273nBZ<b\255\021\275\\\017\214=[x\017\275f\263\327\275VA\251\275{o`\275)Xw<2\376\207:\2254\021=\306=V<\315\032@\275\235u\367;3\347\013\276\312\337\300;)\364?\274\362jm=77>=\324;\244<(\363\212=u\263\r\274\376\031\031\275\3761\026=\327r\031;\312\373\271\274\325a3\275\035h,\275X\237\374<\276?\344<uI.\275\257\330k\274g\355c=\001\234\345< {\027\275I\212\233=y$\001=%\027\r\274\210\347\013\275\307\324V\275\330ig\275{\341\307\274Y\274\324\274\027\007\306\2679{K\275\2050I\275I\343G\275\034\270b\274{\333\242=\347f\200\274o\341\005\275d\202\200\274\242[Y=\022\341\212=\007\301\217=,|\210<3\212z;\002a\"\275\204\307.=mF\002\274h\226\r=\316\"8=\221\201O=\032s\013=\360\006\022\275\017\274\320<\244\240\200\275(\242\004=\262<\334=\001\346\217\275\203\"\264\273\"\203\231;=\"Y=\2426;:\211\2433\275X\017(=\317\000\366\274%\312\213<\'\025\021\274 \223\222\274\370\312\237\274\316\036Q\275?\273\361<\302H}<\363\370\221\275\262\371\310\274\371\321N=\367\000e=9\3430\272\375\247\227<=\342\004<\221\014D=\317\313\246=l\036\315\274\217\022\335\273\225\207\205\274\350j[<\374/\374\274\277:\313\272z\222\005\275\025-X;\243\217\250<\t&\270\275\235^k\274w\035\306\275\343\205\254=\231\322\243=S\372?\275\377\\\271<\222\237f\275\177\334\253\275\177\037~=`30\275\000C\323=\177@m\275\364\005\244\273\r%\353\2750\257\033\273\330\266\213\275\257.\025\275\211D\303= \204\032>\363\t\235<+\244b\274\342bI=\274\233\303;\371F\n>g\320\353\274{\025f=\262\350\266=.)S\275\355\341\014=\363\361\203\275p:5=\244\202?\275\370\343\t\274\216\207\247<\350\362\026\275\370\372|=\273\004\303;V\215\216\273\255I\322<.\232\010=\256\275B\275g{W<\346\272\366;f)\255\273k\'\264\271C\034j=G4W<\\9_<C\307+=\345\327\371;=\261E<]\226H\275\223\233\273\274\016\260\315\274\026\354\202\275\266*\032\275\242\023\214<\324\235\201=\225\336\217=\234UD\273\257\263\326;\224g\003=)\251\356;\200\003q=\211\t3\275\035\237\356\274n;\035=\305\245\231\275\273\236F\274\r\356\343\274\347\376\201\275\247\322*<\227\313F\275\026h#=\276\007S\274\277\255@\275\340\001\342\273\003\215b<\n^\027=\213\200\333\274\307\340\234\274\263g<\275\321\003\037=[D\014\275\'\223.\275\007\033\300=\234|\254\274G\027\t=`2z\275\362\031\333\273z;\210\273uT$<\305\035\256=\223\370\267\274\372\022\331\274D?a<\033\305\332={\005\020\275xG\224<\323\203g\275\250\307\222=\355\306\235\274\236\"\\=\351/\237=R\"\343\272\3038\230<|\323\356<\231G\253\275\246\242\006=:h\247\275\361-`<\334\347\243;l}\267\275\232j\223=\265\026K\274\323 ^\275\277\322\235\274\337\345\322\274?/\244=&\364\220\274\232\007\007=\352]\013=\275!\035<\376\023\217=\372go\275n\210\253\274_\377\001\274Q\006\201\275\241OC\275\341\330\232\275\374\362\357\274#\205:=\"s\007=\331\224v=D\027\250\274\211\336\275=\034\227\n=\254\325\307;\277\020\333\274\020\332.\275\324\r\202\274\347&\023<\345\372\251<\226p\331\274\2431\010\274U\275\324\274\337<\304\274\001\231\207=9va<p4\216\275\332\326q\275\204:\206\275Dp\311\273n\276\363\274:\003w=Y1\273<MM2=\275f\243<l\355 \275<#:=\360\337\r\275A\360\322<\216\010\202=\375\321j\274\216\252\304<\023\302\352\273\333\034\235=\300\253\252\274\203\021\211\272\246s\214=Km\203\275\014\267\261\275\217\230\035\274\241\371U<\277\245\255\273\355$\347<\233\000\203=G\302\022\275\313\246\"\275\351\025Y\274\3608\210\2754\343\322\2745\376\226\274S\300\327<U8\256\274\357\277n\275\026\367\216;\3474\201\275i\361\375:\250/$\275\347\031\007=J\343\206\273\366\323\324<\337\347k\273j\240\253\274E\026\217\275~3\235=\354\n\233\274S\307\200=\205+\220=\240F\016\275\372\235\247<~\336\234\275\200\366\340\273\251_b<w\205\262\274Q\3036;\0011\242=+2F\275\016H\016\275%t\307;\366sn\274j\371\001;H#\002=}I~=\r\233\032=}\346\233=\274\344O=\214\320&97\327\016=Xn\262=\245W\212\275\322?8=\336\274\223\274H\013\202<\271\332Y=\351\242^;\317i\t\275\364\025\036=\202,\262\2759\235\206\274\310L\212=\307\261&<\242h&\275N\300\210=\347*\204\275\363\256\350<\231I|=\267\203\264<\265\024C\275\033\246\317=`\006`\27435\004\275\021\221Q\275\355#_<\260|\2329\033\361\303\272,d\341<\\;\222=\273::\275`E\240=\241k\263<U\r\035\275\177\357b\274\016\005^\275\261i\221;\032\330\323<:qs\274/\337\376;\304\323\333\274\226\367\363<U\214\212=\357\341g\274H?\272\274x\030;\275\366\007?\275\304h\211\275\r\243\214=)\321\277\272w\246}<\0002S=\365\233K=\236\311\216=\214\227\016\274Gx*=#\322\377=y4\306<z\363\371\273@k\326\2741`\206\274n\264D\275\200\341\213=\223z\217=\262\237\372;\341>(\275+\317\022=\320\365&=a]\340\273\342\227#\275\215V\r=uG&=\246\242\205\274\232 ^=\267[D=Kz\313<\335\255\220\274<\225\274=\353\025\223\275\214\000\210<z\370Z\275\260S\347<\231\324\033\275\207\027I=\207dU=\301\243l=G\274\347\274\302yT;m-\034=\364\227\207<\270\013>=*\245\270<?\021\205=#\206D=tp\204\274\244uA\275\241\255\376;\310/\306=9\243\217\275:\354\203\274>i:\272\316\\x\275@\345)\275h\235D\274Pf<<\304Z\035=\240\352R\275-\226\267;R\022\233\275a?\351\274$\241l\274\230nE=\317T[=\272M\222=O]\262\275\237\224\303<\366<\276=\376\2274=<\254O\275/Dq=\2348\026\274D\201\322<\233h\r=\342p\030<\263\347@\275,\277{\275 \0006\275Vs*;\370QG=Br\230\275\001$\225=\307cw:\345\244\n\275\330o\023=\032=\026\274\225\254\t\275\230\022\226\275Kr\210=%J\202\275\026A\221<\030\203\225<j)\021\275%\270\005\275\355\2342\274\026X:\275\253\365\327<\350\305I\275XaO\275\026\317v=\231o\240=\250\244\032;\301\031D=\254 \254\274\227\341\353<^\322\342<\255:b=\243\026\037=\272\004\241\273\026\312\005<\t\246\'\275\r\214\335<X6=\274Q\270\034=\323{\244\274\217X\035\274\213\241[\275I6,\275\311\376\257\274\271\016\346<j\305\013<,\264\364\274kS/\275M\206\022>\237\317;\275\010-\337;\350\2319\272\3337\346<\315o\014=|\214\377\274n$6\2759\210\017\275f\275\321\274Y\265\005\275\264\316\345\274\024ET<\360D\231;\346\027\204\274p\321\003<\300V\230=X\203\006\276\317\335\016\2759\006\215=\365\251*=\254\347?=4A\211\275i\246\007\275A\335\"=C\342\313;\340\216p=\3240\263<\335\354\304\274\205\332\260<\340\260\343\274t\206X\275\3537\026\275\307\235\225\274a\335\272<\275<\355\274;s\227\273:\362\220<>}\214=\326\275\213\272\341\004Q=\265\032}<\331\301\233<\313\247\251\273/\270K<_\021\010=\033JT:<\237\270\275s\355w<2\340\006\275S\277\214=l\227\247<\r.\357\272\323B\200<\027L\036=Fu1=\240\335\007=\265R\372<\340HM\274\2377=\275\233\345D<QE\361\273\202^\205\275\342P5<\2528\222<\313\332\013\275\243\227\356<\371\336w;\240\261\305\274\233\353\000\271MEM\275\025z\353<\251\360\250\275\367\"\227\275\205\275\027=N\035E=\207\371\341;\305\327g\275\017\3408\273\365\223{=\001]\003\276\223\272\r=\274\313\":\376\001\240\273\216\017\302\2743\201&\274\025\231\244<F|\276<[\3773=\257\356\\\275\327Z@\275\264\240\315\274&\315\023=k\331\316\273\2370\\\275\264\206\252<\362\265\\=\272>\277\275\02640\275\327\224w\274i\2040\275\300I\216<\2730D=\306\013h\275\024\037\232=\265l\264=\270\367f\275\251Aj\274\223\323\326\273s.y= \352\002<VA0=r\0012\275\365\255(=G\340 \274\'=\341\275\347\021\005=\347\332\305\274[\367)=\006W\371\274\332\233\371\274.vn\275\370$\375<\367\014e\274\354\243\244\274?r\216\275\230\3135<\2066\216<\017\376\006<\274\350/\275\356\177-<14P\273\253\252\246=\223\247\231;\332\010I<\346\223\027\275\240\256 \272\2677\245;\027\311\020\274\013\307\333\274+\260\005=\351\245\210<\3716_\275[\311\312<#\224\366=\224\346M=\237\363\r\275\253\032_=\321K\231\274\332\250\362\274\370\247;\273\255\267\200;go\003\275\233\nv\274\333>\227\275Z1\357\273\364>3\274\"\227\230;\300\231\224\275\'`\260<\3178\020\275\025R\366;\310\010A=X\222\353\274\301-Z=\352#\206<\374\216\301\272P\225|=;\026\254\2737\264\212\275\265Mq\2748\267&<\377\262c\275\262\273$;\321B\352<\207\353\322;\274N\021\274\306y\265<V\211\027\275\271P\355\274%\304\330;N\002\306<\353Ln;Z\361G=\202\030\371\273\316\312\002=z\323\264<\215\222j\275\344\003\004\274!(x\272\016\210S\275\205\341\351<\2515\r\275\"S\021\274a=\204=\254\2545\273\3572\201=\\\n\222\274\272\277!=(FP\2752\360\342\274\017\206c\275n\337l\273\276\005)=\205#N<R\027\036\275[\367\302\275\023{k=\241\354#<\3133\247\275+9\270\2744\3438<FVG\275\000\230 \271\250\330\341\274 \263D=_8\206\275\\\344\017\275\277\360\211=ns\201\275\271\233\242<\321\2217<N\372\370=\213\244\221\273\221\243\237=\007b\321\275-V~\274\334\235\311<\251\020\370\274x\021\034=\314\014\010\2752\311U<\216\035d;\252-T<\261\343\340=i>\264\274\220&\217\273\326\327\213=\267\3226\275\2148\201\274\233\361A=\333>\364\274\262\321\341;?&\351=\325SE\275\203\275\231\275*\024z=pfx<\226\213\234\275\2047\322<\000\276\340<\010\274\354;\253.\021=\260L\324\274\301\374\372;\210\264\235=\256U\220<\001\330\304\274\213\217#;\216\241z\274\231\206\'\275\236\n\264\275\373\325b\275\325\301f\273\0050\232\274q;\255<I\265h;\014\2401\275w\274f=\336\306\207=\035\336\344=j9=\275\234\027\322\274p\3550<8\363\032= \227\'=\021c\200<k\340\232:\253\374\345\274\'\034.\274\275k\346\274\0043\247\275\331 t\273p\320\013=\355\270\201=H\030\036\274\274r\201\2734\336\227\275^Ms\274\244EW=\346\010\214\275N\265Z=\273\332p=\323\350\207;\345\243\342;J\210\377<p\326\005=\326\235{=\210`\200=\373\324\211<\250\217\326;x`W=\245\2712<u\3361<\346\237P=\347\361%=\306h\270<\243k\312\273igm=j\301x\275\205\242i:\346\343\254<\315\235%\275\317\326\000<\250\305w;3\002\350\274\233\026\r:\3151\225<\353!\351\274f\343X\275\233e\322;\276\021\303\275\017\250\233<\351g\372\274o\337\355;\21624\272\r\346Z;\337\351W\275K\372\252=\217N\241<\021I\310\273\263g3\274\301\276)\274\372\017==\245\244\246<m\026\347;v\033\321\272\215j\330\274:]@=\253$\266=\0303u\275s\317@\273Po-<\244&\001<\023\311f=\215=\213\274\256\260\031<\017>T<\342\372E\274\341n\312\275\327\366$\275\007:(<\3404\377<\261\364\027<\303\247\307<\214\272+\275\217\205\364\274t\226H\274D\216+\275\216\255\350<\363Y\001=\362\006\345<\251p&=\317j\037=\017\346\343\274>H\232\274\"\030\017=\357i\316\273\032^\235<\200?\233\275\261\326\210\274a\336T\275aT\243\275\023\243\210\274\254\334\226<K\251W=\270z\301\273\334B9\274u\316\345=3n\264<B\022/=\207s\355;}\233:=\264\004\336\274\23751=\027\224\350<v8\230<k\215\036<.\323\315=8C@=\r\337\007<\'\375\314;\206\300\225=\313Z\003\274R\372\243\275z\261\235\274\031\355\014\276)\262\304=\362\025\252=\003\217G\274=S\177\275\241XW=\343z\002=\266C\255:\241\r!=;!\006\275\347\371;\275\272\320\023<\274\377\207<\344-)\275:\215k=}\325\205<=w3=\224\236q\274\026J\257<D\327#\275\362\325\013\274\356\312\247=\020s\254=\326\356r\275c\274\250<U\010\014=\251\270M={\024\205<{6\"\274\211\007><h5\227<0C8<\334\005\000=\316CC\275\327\360k;\0076\030>\347\362+=\271d+\275\221\277x=\324H8\274}\202\035;m\305\035=\230\202\206\275S\006\201<Qt\035<r\312\210\275zkV\273\022_\226=\352\265k\274~\366\200\275\301\254\346\274?\265\213<\376D\223=d0\257<%\342w\274\t\200o=\034\302\303\274S\016\033\273\361\257\205\275t\026\217\275\327\356H<%\307,>v\214\021\275\371;\002\275+\264\312=\037\t\274\275\314\342\306<c,\266<\322\317\033\275\203\214~\274\324\3377=(\342g=So\t\275K\276[=^\311\211\2751\\\301=\376 \\\275\223\325$<1\255S=4\361t\275\010\277\231\275\217\274\242:\"\201\335<\'\204\"=Z:\246\274\256}\224=qjX\275\330\032H=\202\2179\275Y\303\255\273\006\371l<\t\235\";\317\217\r\275r\3510=\361\320\223<P\373\277<\2035H\275\246\337\262:{d6;&\366@=\372\226\305\274*rG\275\032\220\207\275O\214\244=b\023-\274\232\307\261;\240\211O=\034\3347\275Z\327g\274W\010U=\337\222;\275\237\346G\275\t\027g\275\272q\264\274n\332\222=i\033\204\274\220\320 \275\r\306\307\274\r\353]\274\320\267\203:6\3564\275\354\375\234;R\361\315\275rS\007<9\346Q\275\244\326\033=\tf;=\236\345\023\275\316\241=;W[\234;\225\331&=\367\275\372<\232\250M\275y=\010\275\235L\021\276\346\301!=]u\007;rF\234\273\333\t-;R\004\300\273v\026\365<}\000\002\275gD\025\274\231n\226=\247\'l=\366\336\206=\276\033\235\274M\367\255\274:\203H\274 w\206\273pJ5\275\306\355\276=\r\226~\275\213N\205\274,\365\231=R\205 =f\n\n\274\370\235\016=\333\210\253;\257i\217=D\275\r\275GK\002\275\2436J=\225\314\016<\374\021\227\274t9\210=\2063\036\275\033|\006=yP7=\222\247N=\003C\026\273\250!C\275\360\362\207\274Dq6\273E\215\022=\"t\331\273\337c\215\275\377\\-\275\255^\346<\205\370\257\273:7\214\275\335]\263\273z=\324<\033e\247<\314QU\275\324\347L\275b@\035<9\376\205\275\270\305\221\274\013\321\033\275?\203\225<=\343\214\274@\006!\275f\251\365\274\344\230\201\275(\233\013=\036\343q=(\261\024\275\264\340/=\223\212\223\275i\306L\275P\335\204<\307\341\211\274w;\035<\276\360H\275*\335\236=t\372\343<\027\355M\275\344X\244<>u&=\016\304Q;\223q\212\275\300\332\032=\266l\233\273\211K+<{*\247<\374\244\014\275\274\276x\2739\277\352;\317\351\364<\2535\233=\260+H<\224\371\025\274\300\016\023\275\363S\202\273\021\252.\274\035\225\340\274\232n\202<\255\232H=\300\234\304\272\363\226l\274\260Z\203<bI|\274\243W\002=\263\022\314<\037\341\267=\343\310\237=\370j\366<\265\336\037\275\220`\3739:\203\240=-\000B\2748R\017=\252\246\350<\377y\231\274\314H!;Is\211\273\201g\254\273?m\\=c\342\372<>\345\361<\341\254\200\273\335\373@=\005_\234=\223\343L\274\336\262[\275R\201\376\272\223\357\315;W@.\274\361eI\274\342\234\205;5\217\210\273\215 P\274\260>\225;L\020X\274\211\233\375\274[\273Q\272\266\206\276\274\270\034\001<C\220\270;L\201\013\275\256\346q=\242\275M\273\365U\262\274)\205\002;\314$1\275\271\002\024\275\277B\237:i\252\013\276\005\220\235\274\215\336\022\275&\317|\275\206\235\210=\030F_\275\376\313I<\356\272\265<Vj\002=*\026\234=\226\002\n=\212\361\t\275\312\265x\274\213\311\374<J\270\323\274\017\323\261;\377A\352\274\353\306\264=*\344\205=\355nV\275\366G\207=\216\360C\275D\000\340\274.\'\247\274\256\246\316\274\251[\014\274~\360H<\251\345Q=\263(\206;>\326E<^`\025\275)\rD\275\223\r\213\274\333\333\371\274`;\030=-\344\220\274(\254v<\307\025I\271\030\240\034\273\307\371\217<\351`F\274\365\203#\273V\343\205\275\375\204\245\274\032hS:\217\322\032=\335\026*=\260#\027=\240n\r=k>)\274\2768\006\275\345S\270<\340v*\275\262\033\357=\321\n\322\275AA\240=\240\345\271\273\222\005\222\275\204\230n\275\324?\177=\241L\255=\323G\020=~\264^\275\332\267\"\275\217\177\326\274\235\375w=\314\003,=\021\2152\274c9\213<)G\177\275\234\236c<\226k\362\2748\254\014\274|Z&\275\302Oi\275\207A\237\274\365 \365\275\363\3142\275>\366\332\273\023(\200\274\344\r\302;\251\256\2529\324\036\035<\322\223U\275o\235\225<\221\326\227<\"\027.=n\323\033\275\'\203,<)\214j\275T\354*\275\236\255\267=\344\332\027=*\236\324=\220Z\205\272\230\306\367<\202C\031\275!(\255\274r\313\236\272Z\3549<H\007S8\307\2075\274\252\212\2129m\276k=\266\\\261=\264\234\241<\025\020\214\275v\254\325<{7\252\275\217\312\025\275\224\227\233<\177\237\375<(\024y=\376<\315\274\"\323\276\274\200\201\306<T\354\033<\340\223C=\331G\311<\352\245b\275\242\235\003\275\333\251\274\275a\305\006=8\251\021\275\222\307\032=\312\360h\274]g\n\274b \216\275\035(~\274\340\0242\275\036\004;<B\317\353<\213\341\024=\332f\214=J\206\004<0\222`\275\324\332\237<\023\376~<\231M\362\274\035\212\231\274\257$\341<Q\262\000\275\036\277S=\367d\325\274\233\203\255<\2037\204\274k+\037<F\257-;:\026.<mX\365\273i\307d\275\367\0336\275\322s\024=\014b\000\275\353\213\010<\367\202z=\005-\227<\316\240\"=\3100G\274\n\261\224=\323\027\233=\334\347^\274\344\326\\\274\346\356\262<F\340-\275\343\362.\275\255\223\234\274\302X\321<\235\375\232\275\2374\010\274\271\2043=r\364[=\007\006\221=N\234\203\275_X\353<\364\311\216\273BCL\274\310\351\"=\027?\304<\200;4=J\363\246\274\311o\305\275\260\343\301\275\205\334\004\274\227P\244\275\334l\030=/\3555\275\203r\025<m\212\021\276\177\274\017\274`v\001\274>\030\325\274\335\215\003\275\370\020_<2s^\275\247\3207=\002\207\247<\246e\021\274;g\212\275\325]\253;\322\204)\274.\223\302\275\377\375\033\275b\355\360<\260\354U=\356\347\003;\367\375O=\341\246\204=\232\271\251=D\213t<A\302\371<G\365s\274\237-\227\275\314\337o=\216g\365\273\254\242\000<\016\3155\275\014\271\251=\2669\245\273\222\313!=4\252\222\274\2359\027=\026\022[=O\371\037=.\254\373<]\334\352;{\014\226:\006\006\276:\326\316\326\275\003\031\335\274\355\014\366\2749\222\217<4\002]=\360-\212\275t(\033\275\262\016\242<\031\031\237<*\305\347<k\217\302\274\323\323\313<x\007\264<\304\247C=\234\034\250\274C\274\221=\241\033\307\274\261h\257\275f\300\347\274\374\342J=\2108\371\273\321\314)=\275\326\330\275\014*|=\004\007\r=\035\031\371\274\25225=a\244Y\275\212\234\352\274yN\250<\\I\254;\331\227\376\274\363\356D\274\024\363\236\274\250.h<\270\241\t\275GQ;\275\306>\236\275Jo\360<\264\226\231\274E\007(\275\221r&=\323\352\341<\216\332i\274\274\030m={\315H=z3\237<\251\t\002\275\244\323\230\274\005MY=\"4r\275\363\374M=\357\364\006\274\352e#\275\351+\005\275%\245V<\243L\251\275\031L6\275G\034q\2757\021M\275\036\n\312:\022_t=\025z\221\275%\353e\275\264n\021\275\257\211D\275\014|\263\274a\013\223\274\031\217^=u\004!\275*u\346=\341\270\205\274z\261\205;\227\003\231;{f\223<\306\017\002=P\225Q=\350:\353\274\207\200\203\275\344\010\272<;$ \275?\214\201\275\335\263\373\275\367\262\010\273\313\203O=\326f\000<\320q\005<\206\370\t\275\0219\014\275\227\327\316\273\256\002\230\270 6\276<\370\021\361;\036tI\275\240\202\334=\317O\034\275\347\303\224=}\226y=\232il=C\351L=\332\264\\=s\242N<E\245F\275\204\234\'\275\357xF\274\341\240z\275\323\302\3008\301\230\024=\341\343.\275\363\274\356;\312a;;\354\035\223<L^\035\275\"\243\001<K\262\315\2733i\'<\226\3470=\203\226\"\275\326?R<&Y\336\273\275V\247\274\337<5\275\346g\265\275\211v\256\274\315\223\300\274\307\314?\275\231\201\267<tr\005>\317@\223\273\353\0022\275G\367\013=q\206\000=`\342N=\273\235\250<\200]F\274\243O:9!\300\366\274\202\227\250=?\275\262;:\257\r<w\341g<H\222>=\263\030\374\274 \224L\275>9\013\275d\225g\275<i\006=\265\377\362\274\332@8\275\274\375@\275\367\232)\275\324\326-=T~\r\274%jQ\274\2133\233;\233\364\030\275\317R\232=\332\334\342\273\037\016\001<\001\004T=\3338%\275\nt\264<\212m>\275\222bz;\332\302\313<\017\227\201\275p\260U<\235\262\261\274Qn\226\274\010\360\314<\n\260Q<Y<h\273\376\230l\275\315\234\232=\014\006\351<|\206,=\0147\316<5\304$\275\tl\347;J\206)<\217\262\214\275\364x\333=-~\242\274:\207;\274\254\257\230=G\245\357\274\337\226\271;\227\332\241\273\220\330\210<G(\330<\177\2335\275-\335\010\275\017[\230\274\342k\276<\014\313w\275\261~i<\344\n\266=xI|=$\265\341<\253-\315;\326\213o\274\007\350\025<\362r_=\352[\021\274\372\307[\274\361\352_=Sl\267<^R{\274?SS=\311*\322\274\251o\351\274\214E\244\274\241L\037=}\024H=\245\371.\273q\205D\275\262}\273=\355\217-\275\204\374?\275:\314\n\275\313\347-\273h\326\224<f\302\025\275\363h\214\274\205\223\224<\324O\205=H\322\217\275\2106\303<\375\200\027\276\233\267I=Cz <DTw\274\236\215\003\274O\'\343=ql\251<X\252\303\275\001\223\007\275L^\017<\r\302*=\010\262\r=K\365\"\275\262\310\220=:i\317\273\315Y(\275\2763n\274#*\264<x\215^<\275\234O=\253\331\035\274\212\347\255=\246}\307\274\307\016\211<\316\337\221<\317\340\241=\005\206\203\273a\200\255\274,\353>\275\202\206c=\2558h:K\321\226<\346\236\214=Y$\217\275\315\301\017=\026\321\342\274\2244\020\274\247;\333\274\371\345\031\275\361\243\207=\211 \304<#G!=\221S\216<\315\214\320\273\355\247\347;Y\365\010\274E\276\326<s?\325\2743\243\017\275\234Y\262=\265-\221\275,\373}\274\262\027\223\274#\252`=\215\335[\275\277b\014\275+S\342\274K\257\312<\227\371\240\275q\361Z=\236t\032\275\030WP=\350~\241;\247\304e=g\341\222<\341\321\354\274\306\032\321\275\\a\021=\227\312\263=\275\213*\275^\222\360\273OA+=\261I\022\273\303\231\331\273\270\261[\2751\210\216\275\000\316?\275\350\272\334\270Hzk\274#\253\220<\330v\211; \356\315\274\333\304\246\275\021\347\234\274l\261[\275\325\364\213<\240\303\247=(\"-;60\270\272c\253\374\274\302S\r=h\206D\274\224\037\206\275\312\202I\275\344\2028\274\323CW\275\273\025\226<]\037\227<E;1\275\364\322\177\274*\206\371\274.\327\227=\363\375\\<\33764\274\366Z^\275\020\221\262\274\230\010\237\274\275Y`\275t\371O\275\327_\207<\313s\200\274\221h\244\275\351\220\016=J:\273=\373\246\320\274\376\226T\274\006\370\220=+\343\255\274x\210t=\274\332a\275\335{\221\274\210.\237\273!\213\024=\215\2606=\240\231\037\274\203\"\336=R\026\004<\315\270\004\274\262~V\274\325\350I\274\\\354\353\274\375\311O\274f0(<9+\007\275\005l\203=\340\212\227\275\013\304Z=#\027P=@z\251<\000=\321<Q\256\246\2755B:=\203e%\275\333\035\013\275\216\213C=\210\214\327;\004\247\221=\340\"Z\273\360,E<t\003@\275\356\271\271<:\314v=\320\222N=\217_\212<\252\034\233\275\242\270\202=\237T\357\274\245V\202=\014\266\325\274\004\351a\275\004g\215\2750\220Y\274P\205k\275\221\200\"\275\033T\333=\376-{\274\231\370\215\274\200\373\273\275\326\352\266\274\372\343f<\376\371F\275\204%\352\274\014\331f\274\364\225B=\233\250\341=\206\260\362\274^k\234=&\320\321\275\373J\263\273\343\251\324:\260{V=\021\374\002\275\353\241\t=j\355\267\274\006]\333\274\336\356\";}\263\313\275\231\351\030\275<\342O\273KcM\275W\014\377<\210<\220<\252i\324<\321\021\200=\017\222?\275v\010\221\274Y\266\n=$\250\306\273(>\232=\025\261\312\274Q\rd\275\234\305c\273#T\212=\340g\242\275\347\024\210\274\025\274R;(\257\207\273\377k\n=\216\377B\275\342\377c=\036q\255\275\367*\005=\231\376\205\275\031\000\306\273\341G\302<T\302\247\275\006\251@<?\ta=g\275@=\363\"\315\274~\367=\275\005HP\275\2053\"\274N\212\037\275\027i\212\273\025\316\264<\316\003D=\244y\020<\257\202\001\274\320\001\332\274\245\001\252\274\200\3149\275!!\'<\275?\205=1:y=\236\277\'==\306\227\274\001/R=\246;\321;4x\261<)V\251=\014\210)9d#\372<\225!\306<KN\005=\031\217w=5\350\325\273R\213\214=\255\210\035=\325\273\361<Aq\224=\332\247?\275Fc!;b\010\231=\371\341\317\275\032\245\237<\374)\036=\315Z \275ak\007\275\023$\036\275\335\224U\275\250n$=\0248\242\275,vl<\317\222\212=\002--<\3605\367\274\rM\240=\t?\347\273qOT\274\376\331\356\275Y\036\021\275\211\231\272\274Q\311\230<v\324\277=\373E\220<k\206)\275\243\203A\275\207XF<\230\177\356;%\215\377;\275\2642\275\r;\211\275f\334\033=\241\253(=QV\024<\240=\371\274\331\036F=\237\307+\273\253\213\220\275E*\336\2745\\^<\330?\034\275\"\340\335<\316\314[=\014\351\310<E\204\256\275\341A\306;F\254\033<J;\006\275\242\206\331<s\323\247<\001\242I=\013\344@<\274\333\232;\221\252\265\274&\263\214\275u\253\"\275j\234\202\273\334\275\250<\335V#=o>\267\273\234\337o<tt\032=\226A\013\275\265\324&\275\321 \203=\373\225p<\254\373\242\275uMh\275\356\334\221\274\311\224\331\274]\003\017=o\225i=\'?\020=\315\021\\=\024(\305<\024:\341\274\\4\225\275\026\345\363<{\'\306\274\227\0214=\210\367k=\333A\367<\332\372\025\274\353wH\274\346\256\222=\n\272\241:\336\3053\275\305\252/\274\223\347\255<\214\241B=o\226 \273\031Ul\274\3443B\275\233\030\\=\225\266\357\275=f\253\275P\010\353<%\346\211\275\233o\350<s\335\032=\370\317c\274\230\236\201<\276\006E=\211y\275<\270\036\361\272\251\303\252=hg\213=c\273\035=\263K\t=\313\'\207=\356t\314\274g;\355\274t3\034\275\307x}\275\000\363J=\334|\304<\351n\247\274|(\231=\267p:<\240LB\274>\212\013\275\327^|=J\220\245\274\2056q9\306\037!=J\351V\275\361\021\005\275\373U\000\275\204\010\003=\300\343\305<Ql\027\275\264\323\365<.:\t<n\360\025\274\256\355\220\275:\323\254=*\375\000=\254\037\257;\365\254\224<\327s\202\274\360\245\376<\033\034\2379\276\036\254\274\375\321\302\274o\333\315=\324\032\007=O)d\274\311G\004\275\342L\\<zJ\224\273\033a\t\276\273\021\022\275a\207.;\020|\256=\317r\006=\225\323\t=\327\341\020>\010\225\"<\033V\364<\\ \242=\3409\206\274\236[\215\275F\004O=4\257\374<\233\242R\275lt\004\275\210\3572<\341P\003\274m\222\216;\250\352\205\275\262]\000=\204\235X\274\225\201\t=\366\212\003\275\377\241\020\275b\200\362\274\270\006\177:\214\242\245<\332I\037;:{p\275\336\247^\271.\244A=\266\270\034\274\344E\303=_\201\205;\201\223\333<\2075?=5\274^\275}\323\231\274\335_\t<\023E\374<\2764\211=\227(\322<\377\"#<\006)\234=`\337-=,\343Z=N\315\366\275\314\351\r\274\267\256m\274d/g\275\330\226\250<\rMg\275\031 \001\275d{\026=`\325\033\274>\212\367;\370^\017\275\032\\\315<\302<\226=c\364\301;e7\373\274\265?\237\272\362d6=$\201\361\274\263\361a\273\023\376\226\275}\223\264<\032\233\000=\242\310\265\2743X\361:\327\310E=\224\027\211=\327\226<<\222\305S<.\377\344\275E\244\207\274\325\007k=\371#\277\273)(~\275\240>\000=d[S\275B\323>=\362\334@=P\340l\275\235\347\204\273\256dE=\320\021\024\271(\013R<Q\274\301\274\370\022A=\024\322<;\335a\210\275\021\014\215;\337\246\210\274(\340\214<\254\265V<\232y\006=y\251\014\275\240\243h\275~8v=1\302\n=\261iG<\365\222Y=\244\314\277<\361\032r=\003\020\353<\001z\264;\337\256\315<P~\312<&NL\275z\203\326\274}\316\331;7\255A\273\273\230\364<\277M\221\274\264,\373\274\277\243\004<\027\266\242<\021\317\363<\327\211\274:\374\232\032\274\3518\242\273^\237\327\275\304\027\266\274&\222\000\2752{u\275\325h\244\274\353qd=\363\246y<\n~\346\2747\nE<\300\013\216:\372\262\205=\024\223\241=\246R\217\275\354\262\321\271kP\267\275\317,\235\274\213fd\275\036b\014;Z{\267<\314Yo\275 U\262<\010A\321=\230\240{\275\257\320\243<\361\376\330\274J\027:\275\324\377-<\332U\341\274\300\353\033=\n\200j<\005\273Z</\352I\275\251\210\r<\235z?;\306\313\241\275\206\213C<\032p\200==\350\377;\367s\004\273v\260\201=\321;\257<\357\010\347\272C\270\225<\225\301,=]\277\316\273q\377\302<\301w\242<@\346\223;\224d\243=G71<\276\202J=kE\357;\024\313\303\274\362\375\000\275\017\274\346\274\310\214\345<\223]\247\273\265g\021<\035\201\317=\r.\004=\346N\206\275!{\255<\261\0149\275\324C]\275\233\246\t\275*\225\364\274-\243\026=[\207{=\213\357\306=\372\345P=\322\301O<\020G\324\274\342\341\315<\334\347\237\274\211\242\252\273\206\251H<\260\327\231\274eJ?<-\342\314\274/\245\237<\361\321/=Fn\225\275\303\2106<L+_=\026\315\t\275\027\256\207=\337w7\274\211\007\266<9\367\265\274\303YR\275\014y\023=\351\313@\275\206kH\275\246\207L<\003_\035\275\332\301\205\275\314\004\202=@P\022=\004\207Z=U[\227\274\355\035L=\016\003\242:\366f\026<\342\376q\275\367m\212<Q\025\025\274\233\230>\275G\006\256=@\253\215;\365:\367\273Uv\222;t#:=\316M\006\275\304M\000<s\267\225<\314o,=\211\230\215\274\363\355j\275sq\303\273\027}\216<Q\0021<\026\034\256;U\007X=\264\216\312<\265\346J\275[\216\001=m{\005: \231\020\273){\236\274+~\034\275\250\023\016\274\305\256\212\275\221\254\210\274:?\206=<=\330<\274\177\235:l<\377<\331\324\225\274_a\263;\002\210\222\274\312n\276=\351Wy\275Y\365\363=\373\253]\274,\265\334;\375\354\022\275I\362\353\272B\226\206<\367\213\016<\320\211+==\036\2079\327\027\010\275,\317\272\274\357~[=fn\236<1A\252:\261Y0\275\270ot\274\026\024V\274\336G\247<I\024\267\274\362\367\203=\031\303\210\275\321\263\322\274^\275\010\275\251\014\272\274I\274\212\275\223\273\276\274\371\252$=\366\333C=\223p\037=\020\335V\274\215\220\341\275\027L\030<k\242.=\374\357!\275\351O\205=\371>q=\243\240\\=}:\250\274Td\226\272$I\225\275\nJ\274<G`\254=\320t>=\272\215\240</\025\365;\2672d<\266)\210=\311\357\326<\325\363\327:\235\377[<\377|\203\275!\370&=\355\307Q=\326\020\240;\204\016\266<H\277\025=24\215<_\347/\275\r\204\005;<y\216\275:\343/<\340I-\275R`\201\274\001\002~\275\"\326\233\274\024\307\351\274L\352?\275 \350]=y\212\035\274\254\3333\275\264(=\275\360\245\333;\221_\237<\201\2619\274\3270#=\247g\360\274\010\032\031\275\364n\024=Kj\307\274\\S\232=\231\004\001=\3434\252\274\357 \216\2753\016y:nPy\274\245\007\330\273\325qk=\315\243t=\306\375Q=\251\274\322\274\020\003\276\274\235\212\030=\\\307\342\273\341\337a=\254\013P\2753\254\230\275mK4\275\025\252i\27553h=\364B\341=\267\360+=\275\351\030\275\242\3504=JF\376;M\267]\274c\207a=%v\265\274)\322\334\274/~e\275\260\204R=\362\246!\275o<\027\275\037\364\322\274*Zp\274F\353\310\274K\216j\275g\324\010\275\tD\352\272\027\321\007\274\341L\361\275P\336\227\274\323.\006\275\373\\\311\275\030\367\210=\n?\333\274\342*\206;O\\5\275\024e[=\332L\224\275\311\2420\275\364\300\245\275\330\244\025\274\351I\032<r\313\357\274\212L\333<J\2263\275~\334<<\302\240\363:8\263(\275\006$d;ti\014\274\t\241>\274\341s\220\2754\233\263\274\344\027\236\273\255\311\243\275\242\326N=\3475?=\207\366\206\275\002\305\013=\003\004D=\230n\242\274\'%9\274yT\330\272\007)\235\274\321\375\222=\016O\265<4b\230=\230\212\306\274\030gH<\215\323\222<\224|M=g{\345;;\224#\275\013\247\203<\213!S=\325\352K\273N\003+\274  \272<\370\271\263=\204mp=\200\261\211:4\037\307\275G\364}\273q\260x\271\302g\n=\353\235\003=!\265a=\255\010\036\275\346\222\207=^\224\213\274D\253\000<\240a\222=\246\003\250=4\322[\274\204\270\313<1\241\237=\310\307\375;\264\005\300<\r\003H\274\032\000\022=x\327\214<#\226\365;\350\251I\275\374\360\356\274-s\320\274a|\001\275\252\210b\275\257Y\225\2751\324\237\2749\333I<^U\214<\220\024\033\274*\264\343\274B\022t\274\222\217\364\275S=\017\275\245\001\200=\373a\204\2742\301V:F\303P\275\321\0356\275\233E\206;\343\241\254:\331\317\306\275Q\265>\275T\216\003<\367\016\215\273\355Wt\275\002\202\342;YB\214=B)\367\274\211+\314\274\322d\216\274d\337+\275\246\321\024=\360D\023\2763^\211\274\031\265\365\274h\240J\275\225\231K<*\220\211\275X7\322<\006\020\202<\275\036\227=\275b\364<\362<\210\274\267\245\375<\257\005\350\274\017\234\033\274\361\t\317:\340\261\034=\361u\232<g@3=\016\373\205=\211\267k=\\\366\373=\313#\213\275\270^\225\275\364!\210<\3004\235<\326,J\275\023\222X<$\032A\275f>\211=\000\376\250=\033 c\273\222a\221\273]\331l=1\240\211<\206b\375\273K\375\024\275\245R]9|lE=\256\336!=\245\007\341<c\316;=Y\236U=A\337a=\321^\337<\273q\t\275\325!f\275\356@\276<\215\301\023=\253\264\237<\273\014\001\274p\363\235\273\344\302\032<\334\3474\275\327\226,\274\312\307\240\273X\343\341<\2638\332;e\214\227\274\227(}=m2\255;\010HH\275\263\032a<\224\021\001<\\\215\353\274\014\322\206\275Y(\242\274b\367\257\274\314\266\223<yeb<Yz\033\275\254\"\027=D$\205=^^3<\374m\202\274\213rS\275QOU=\022\ry=\333\002#\273\007\233\324<\200\341\361<\000\257\034=\265\327\\\274x\034t\275\025\r<=V\335\357=\224\\\242\275C\000\003=\035EI\275f\220\223;\014zA=\343Nw\275rv\336;/@o\274(\215\276\274\253\360\364;W\311\300=\344\"\202=qL\236\274\234\327R=\362]\270\274\002\255I<9\031\001=P{\214\275g\203\226\273\211>\006\275\215j2=\007\374\267\274\306\324\004=\245\035d=\242\370;;\316n\305;\003\345`<\023J\304:;\330\244=\252\254\010<\356/\265;fd\037=\331\311d<\241\277\372;\213\021\313=[C\346<\224\324\n\275\217\317\233<C\316\221=\371\307\331<\320\230\364\273\3451%=\031%\225<\220\344\010=\322^\251\275v\302#\275p\356x\275P\001\332=\004\231W\275z\002P\275\351\251~\275+\354\014=\032Q\237\2745\341\331=\346\206\000\2756I\316\274;\217-\275\020\354S\275~zp\275^L\242\274\332\0344=\200\211\007\274W\0335=\357\373\232<\204\247a\275\032l\223;\230\3435<f]\231<\372u\006=\024\357\224\275\337\262\336<\203\014\253\274${\374\275\322>\311=\334h5;%w\212\274\t\220\023=\237\3656=\362\217\n=\265\2557<\276xa\275J\004\231\273\370\336Y\275\022\220\246\274\036\3515<g\341\033<\347\256G\275\272\203,=\365\263\337;\204\316j=\236\363\226:\324_+\272\000q\326\274#cu\275\000\363!\274\236\342K<\032\330\250\274\340\t\374<y\030\006\275:r\037\272J\262\223=\265+7\275z\354\235=J\013\r\274\254\237S<\333X\317<;(\353<\330\3307\274\240\256C\275\032\311\231\274\337A\033\275\0028\n=\361\261\251\2749;\364\274\260L\227=\033\021\223<\250\247]\273.\014\325\271\371\244\r=\326K\303\273\036\016\017<\235M\341=\2719\033=M<7=B\240\332=\352Te\275\252X\204\266\374\254\316=\362E\236\274^\255\004>\202V\360\273 -\333\274\025\000#\275\326H\343\274\027\367\021\274\202\010\220=\241r\024<\367\0012\274\355\343-=\241\000\032\275\r\241\023=~k\021=\024\231o<\243\335]=-\260\000\275\335\223\270\2735\006@\275\0017S<>\267\303\274\361\320\317\272\326\224.=o+5=x\265\245\274#\255\020;\022Z\264\275\342\366]\275\332f?=\367k\327\274\235\362K<\355\3004=\230\r\217<V\261$=m\373\220=P`\275\274\214\322d\274\274I}\274\005u\363=\356\267\t\275\253c\363:\210\243,=!L\016=\346\2414=^\363\330:/^\260\274\344X\200\275\301\243k\274d\273\216\275\251\332\250\274\302Ar;\264\207\230<\316V7<\232pQ\275\377\033\023\275\202\275$<\254Zx<}\363\257<\361\032\374<j\273\262\274\013\361\301=\232\002a\274&$G\274\252S\377<\n\227M=\020\351\000\275\307\\\035\275\360@h=\"$\212=\346\350\016=\311\027\350\275$+\366<T\300B\274\356\342\027=o\007\037\275\322Y\300<\032\307\265=\307\000\347:\337%\177=\004h\247\274\030\250j;\372\010\354\2732\351\204=\222\272V<\313\300\001\273qb7=\323e\244=hX\326<U\255\336:=\253/==\237\313<\265\206j<7\337\230<d\"\007\275\262\020\260=\205}\231<\2125\270\273Kk\246\275\343\277\275<\252`1\275c\202\014=\270\210B\274\3426\'\275\342\022S\275\217\242\246\275\340\276\313<\250\271\234<L\'\345<]t\235\275(c\207:\266z\351\274k*\221\274\344\214\215<h[H=\013\233\371\275F\372\364<\210\212\343\274\nB\366\274T\342\242\273e\330\236\275\224\200/\275\233\000\342\274`\013\222\273\313\034\361=t\255\355\274\242Y\333\274\323\252Y\275\277\006\226\274\035\357\013\275\353\340\366\274w\031\200=\331\274\211:\225N\006\275g-\266\274J\206\'\275OZ\231<\315R\335\274\024<\310<y\202\025=\2117\336<\246\375\224;\367\0046=n\013\267\275\212#\213<\344\016\324;\255\250\243\274\377Wx\274\310\262\374\274\263Z\306=H8\237=\351\367\r\274x\255\210\275E\343\333\273\361\317\220\275#\303\273<\272\310.<\364t\230<[H)\275\257\241n<\020R\225=8v\270<\322\034W=\351V\310\272t\177\200=\266\032\"\275\334\307h</)\242\273\002A\302\274\224\004\247\273?a\010=A]\254\274\031\\\205\274\013\353C\275\022d\325;\026\007\261=gx]\273\017\222\222\275\277\217\341<2m\177=l\025\240\275Y\333\222\273\337\334\354\274\205\027\033<\030\313~\274\016\234W\275\254m2\274\257\245\017\275T\007\240\273D,\005\275:I\264<lPI\275\364\323r\274\341\'\000\273p4\332<\223\'\245\274\310\t\240<|X\233;\212O.<\254\232\n\275s\372L\2751K]<\336\257\202<\000\233k=9\002\'\275\327c\031=\235\277\364;\265\243\347\271n\017z<\341\376\226=\325KQ\274\337S\000=\241r\235\275>\202\201\275D\023M=\245[P\274\014\303\006<\330k\246<\372\272\215\274\337\260:=\340\227\357;\026\3428< g$\275\222|\361=\036\205\266<\304u\014\274\320\210\364=\'KB\275\216\320\234<\317)\034\274\271_\001\275\037\'\"<\360@\247\275\264\217$\275d\232\340;t\266\037\274z\254\'=\211\033p=w\013\034={\314\240=\337#<= \360\263\274\241\003\326<\010E\321:X\272\211<\323\004\227\273F\345\031\274\275\374\331<\236\355\013\275\"A&\274\2237\257<\026\240U\275w\321\005\275\222\256z<\243\210|=\347\031\214=\201\315,<)\232C\275O\022\026=\257Mo\275\361\341#<\370\362\337<D\277\246=\353 \261\274\032E8<\217Kq<\231\372\206<\'\351\223\275i\376\024\2754w\274\275\201\344\335<\236->\274@,\032\274\215\377\231<:@\231\273(n\370\274)\300i\275\034U\356={)\256<cN\363\275\262\330\204\274\323\241\267<\361A2\274\030\000\277=\003;\207\275\303\211\205;b\"\205\274\237\353@=\341\002\331<\2463\321=7V[\275\305\217\212\275\322\344P\275\212\345\024;\007\316\t\275\364\006\200\275\030\203U=IdY<\316\303\000\275\207\305\223\272\277,^\275MT\350<\330\335\263\273\337\335\203;t\021Z\275\026g\271<\202\352w\274\010\007\t\275=a\276\2743\371l\275\333\243\357<\324!?\275V\266\305\274`fC9\244\223r\274\317`\245\274\274P\341<\312g\t={\223,\275\004\307\216\274d\006\021=C\253\014\275\201\250f\275\257\275I=\303\341\275\273\351\031\304<\000X\251\274\216\033\373=\\Eq\275\034\034\310<\255\321\034=\177\371\0169c{\217:\355\232N=s\231`\275z\3738=\230\352\"=Q\327\357<\002\tp\274o\016\036\274\001\303\300\274f\233\242\275\033\3563\275A\374\230=\271\313x<\214\244\037<\342\246f=\004 \004=s\016\014\275\231\321\260=\2461\031<GL\277=5\366\341\274\311\377\314<\221\236\225=\373\323\220\274\013\033\335=\311x\n=\336\014\342<\210\013Y<|\365\304\274\223\016A=\014\357h=o\311\347\274\263f\223\275%\252l\274\200\245\265\273H\310H=\272\333\211=L\354\311\275\033\263\217;\270sd=o\366\323;*w\225\274v\246D=\330\2420:\210\'\276\275\252z\227\274\007s\030\276\255\271{\275nUo\274\t\232\344\274\013\334>=\330\212\240\275S\213\216\272\357\"\231\275\310I]=\030\340\242\2751\022\376\273\034\037\002\275\236\212.=\r\000c\275\2177\006<_\324\310<\224\022S\275\022\325\300<\277^\206<)u\207=\223$\026\275_I\222=\245U4\275\376`\243=b\253^=\357\214T=\201\242\214\274Mq\220<\002\330\275<S3\036\274jku\275\200\345\036\275\231C\231\2754u\304=\331\n\t\275\246 m<\257L\251\274\242\227\272:i\2279\275\351\277\261<EV\224\274\373U\216\275\375\326\333\273\016\350\275;\017\301(\274\013\325\212<\354\027\325\275\254\253^\275\251nJ\275b\213\317<\244\263\264\274\246~0\275\274\205\004\275]\026\265;+\274\006\275\342C?\275J\\\006\275\020o\023\275ko\026<k9\334\273\330\312\r\275\207A*\275\245\243\230\275ev\202\273d\r\013\275\222\202\310<,\203\340:\327\204\"\275\256k\363;\343[\010=\034\277\211=\"\216\213=\261\021\244=4o\204<\314M)\275\243\350\033=\275\351\304\274\211\205\213\273q\224\246\274\021\356\220\274\335\267\223<T\352\033\2758\265\010=\247\003\202<\312@\261=\t\356(=\332\206R<\316\231\304<\316\005\377\274\271\014\377\274\026\352%;q\030\325;\372\311\376\274\272\352\004=\235\221@=\214o\256\274\246F\342\273\007\341\341<K8\345=\337I8\274\025*\207\274\214\027q9\373\311\006\275d\226\365\273\202\0365\275\030\034\253<\344\364\240:[H\013\275\374\035J=\032`\243\275\276\237\352\274\t\230\223=\241\321\007\275R\340\336<\013\202\360\274\343m\207\274\260 b=M;i<t\311\023=\271\037\000\275\263\365\035\275S\017\213\274\032\307r\275\201\273?\272c\227\324:\273\366\310<\212\327\374<\320\302)=w\217\263\274\243\264\216\275\315\244\237\275\'\000\260=F\355\030\275d\233\0149&\202j=\007[\236\2743\2453\275\225\0258\274/\353a=\324\311\274\2727\265\223;\352\247\350\275\235f+\275\333\244\321\274\240\306\031\274\242\241\342\274B\241\277;\312\254&\273\362\377\277\274\030\231\376\274\017/\003\275\020L\317<\256\212 <\254\321@\275\232$\224\274\324k\204=\230\233\302=\355\t\004\274B\332B\275g\344\017\275\235+\000=\007\031\037\275\266?\004\275\376\272\257\273\351+Q\275\334\311j=\034\177\004<\031\250\222<D\244\212=#\036\002\275vi\016\273\216\023\207\274\005U,\274\210\177\234\274\302\375R\275\342J\206<\352\362 =w\372\000=\224\241\306\275\255\021\006=\205\200\236\274\017\325\261\274b\362\016\275j\333\217;\314:\201=\032\346\205\275\317\354\215<\246\347\026=9\262,=\230\312\006\275\265C)<f\0059<\223\251\227\273\217\244\324\274pE%=q\225\307;Vt&\274w/\021<\230]\341\273\310\303\223<\365\001\331<,\017\233\275\214\001\344\275G\nv=Qz1<=L\237\275\001\177\300;\303\210\352\274\272Co\274\353\240\023\275\206o\371\274\033\022c\274\314\342s=\245\366\001<\323\200a\275\351\305k\272\002\253z\275\357\3471\274\023\201\000<\367<\215<-\031\222\275;`\240\275`\255\"\274n\273<\274\336m\253\2727X\313\274\341\200\010\275w\337\344\274\302w\275=K\272\250\274o\032\242;\217\330\000=\344\036M\275\311J<=&\236s=\370]9\275\3773{\274w\270\000<\253\313\205\275\320r\255=\277\307D=\237\237Y\274\254ew<V\334\034=\036\2008=\315\340\210<\005\375\345<TK\212\275\346Y\220;r!h\273\274\322K\274\344W7=\317\3401=\031\314\271;E\225\230=\354\\\267\273\005\227\243\274F&\340\274\353(\030\274\227\266\261= .\211=\203]i;\\\201\253\275^\035\223<\237\243\237\274l\356\315<t\273E=2t\025=Bh1;\n\227\322;\320(\360;\214\325u\275\034)\266\273Z!\375<b\000\274=E\307\256\274\244\374F\275\255\354\233=\252\010\334\273\r\317\221=\315\'{\275\202\016\225<\356\356\331\274==\213\274\236\2361=\227\302\231\275h\267\306\275n,5=|\226\247<\364\261\251<\234\353\230;\034\275\251= \030\364\274\3044\361<\330\303\210=\262\244\253<%\331\345<Z7S=gJ\304<FF\307<\271V\025\275\232zD=@\263\354:vM\365;\027\373\235\2758\225S<\203\314\010<rH\263=\371\224\336;\to\243=m\014\206=\202\234\200=\220\004\\=\013\212\014\273\323d\312<\222.\201\274\341\330\014=O2@=\307$\230\275\274\275)=\030L\326\275t\261\000=~Qb\275\324k\222=\340L\233=\203\223\335=o\'q\274\247\364]<JmV\275\303\247-\275\325>J=\370\372F;!a!<%\304b\275%@x\2748\365\017=\232\032\203=P\013\242\2755;\215=\335\355\264=\342\233)\2741\332;\275#C\\\275\373\021\334\273\21040\275\366\200g\272\266\202\356\274\215\004\022<\255\301R<\354QU\272y4\222<\270\212O\275z\371\207\274\220\345 =\203U\016=\314\255e\275\005\"5\274\261\362z\274s\227N\274,}7\275\003\250k=K\371\325<\363\325#<\243\361\241=K\257\034\275\372,\250\274oNh\274\230\255\204<\312\206C=\203n\205\275\030z\026=\277\241\026\275\201A\203=d\337<=\242\322\203=#\000R<\272?s;\340\2321\275]W\247\275\350\226&\274$\324\266\274@\361\356=\317\264\332\274\270\264\014;dw\215:2\3375\275~<\261<\332\003\275;\376\330\014=S2\026={\\\204<G\252\365\273\340\350\262=\244\371\202\275\230\305\010=Ai =\244\375\272\274\316\201\010<\312\"\026=W\"\215\274\346P\004\275@\344\303<\231\2410\274\311:\210=\320\307\177\275(\242\251\274\374i\235<\035=\014=\272\377\220\275`\252\233=R\221\323\274\205l7\274\3517\034=\'\266\205=y\217\336\274m\231\230\274\3645\330<TR==\301\226\214=\334\321\377\271\3244\274\274\250n\265\274\023\243n=\302\372\004\273\353\211\017=\013G\377\274\342\024t<HE8=\204\266t;g\215\320=\222W\254\275\031*~\273?R\255\273\251\201\032=\245\017\201=zWC\275SM5\273\223z5\275{\301\274\274\277ZB\275S\t@=\360E3\275@\250\004<\025_\341;\360\024\245\274\220\376\023\275\322\357\243\2740B\274\274\312\361\214\274/\017\234=\245%\301==\375O\273\373t\364<\031\304\261\274\214\351\014=\362\357\261\272\366\020\006=\007\373x=\365h\372<+\006[\273\212\377\203\275mK$\272H\232\206\274w\212\016\275\324\006J\274\r?\036\275,\036\261<\253\r\211\274\260\020)= \223x\274\006\\t\274\213c\251\274\316q\246=\021\232\205<\323\004\260\274\005\337\271\275\320 \245<\025c\233;\342#\216=MD\325\274\235OW<S\254\272=ZI\371<\243*{\274\344{\210;\022tY=\21264\275\205\360\255<\346\233\220=5+P<\325\202\334\274\203\362\004>9x\242<\222\325\005=:v\226;\241\326%==\006$;\020\321\207\275\271\234D\274 \317\000\274\317\302\220\2752\307h\275w[\232\273\224\322q\275\014y.=\261n\037\275*=y<2\250\016\274R\254\213\274=z\001\276\370;\214=\340\205\324<\364\332\333<v\360\342<\025\206\013=\320\321\014\275\326e\235\274\250\031\276<\254\315x\275\214\3572\272B\252n\274\213\027+\275!\002\376<\341\255\214\274\004\366K\275\330s\026\274\027\025\254=\350\364\243\274\030\364\036\275\022E8\275\316\006\203<\"\274\341\267\251\\\235\275\253\227\314\274Xc\000\274M\244\006<)\005T<\234\354+=\325\266h=Lu49q\302\242\275\357\255\227\275}\331\013=(C\r\275\217O\337\274\317\270\250=e\362\004=\217\344{\274\253}J\275\006\215\330<CI\216=\247\223!\275\245\260\217\2748\250\005\276\214rd\275q\'\211=\347\362\300=7W\221\2752\t\202=\033\363\350\275`\213\234\2757h\214\275\200V7=\017:\320<DDR\275\354\316\310\275\341\324\\=\357\036<=\025\351\017<\3340N=\274\306\335<\240\242\244\274\247\351\035=\230\351\303\275\0078\004=]\211\363\273B\022\265<\311\314\254;\243P\212=\251\355\001<\263\2152\275\020|\246\274\373\233\002<$\321\373;]\271\225\274\216\350\262=,\211e\273\240\334\014=\010\254E=j<(=\014[\263<\027\343\204<\267\002\316<\022\246\201\275\223Q\206<\331s};\377\204\242<\217\276?\275vgY\274!k\253<\256u\265\274\006Y\270<Y\362Y<\361\016\215<\203\271\017<\202\330\207\275\256~ \275\373\246\252=\016[x\274oK|;\374\247\001<\322g\352:\253\037c\275\316\207M\275\347@\236\274\253u\212\274\216_\220\273\275\213\212<\034o\320\272\007\200\211\273!\315\231:#&\002=|\331\210\273\235>?\274\303`\025\275\247\206}\275\037\330\371;\307Vm\275/\224%\274:\2349\274.\3442\275.e9=.\240\236<\257(\321\274\215\343\304\274\004\014\233\274\343\364\346:\331\335\037=\367\222d=\206%I\275\024[\024=O\002>7\207\305\256=\006L\203<\005E\231=p\266>\275\024bW=t\315]\274\257\313\205\274\305\332\204=u\315\265<&\022\267=_I\227;,\\\306<\037Z\225\273\267M\364<\036\016\237\2749:#=v3\031\275b!\205\275\342v\334\273\302\215\034=Lt1=\223},\275\311\337\204<\336\007\261;\311\203\205=\215\010,\275S;\233<\221nM=E\365+\275\365\367\316\274\302U\210; \0254\273\372\340u<\332\331.=\212\"$=)\022\036<\001\351w\274\251\270$=\270\364!\274\224l*\275\3422\223\275\265\t\244\275\014(\206\2735}0\2754\337\355\274\324E\203\274\233\336$=\346\036S=$\033\201\274\343:\t\273\010N\017\275\256 \205=l\203\261\275\260\000\024<\010\022\025=\306\003\227<R6\026<\344F{\274\002\036c=0\260;\274\371\363\274\275pG><0N\333<\013\037S=]E\221\274\021\035\243\275\320(l\274[\010 < 7\266=\243\004t<J\372\225\275\177\356h=x/\310\274^\216t\274\215/Q=Q3$<\'\312\211\274\177\236\363<\235\027\326=z~\355<\031(\246\274\217Ge\275\0109\274<\335\264r\274\361\217d=F=\256\274\240o\315<\001Q\247\273\207\326u;\256p)<\332\013M=R\375\251\274_76\274\356A\356\2740qb=)@\016\275q\277\356<\241\350u=\207\320\253;D\023\224<F\313\205=!\235\031\274\243\364\035=\272\264\016\273\343\2660\275\013\332@=\321\364\245\274\254\303\207=\2773\'\275:F\300\274\254 \215\274*y\t\274\364\236L\275$\254<=\323Rc=L\323\312\274Z\323\236=\006\336\214=\253\001?=\355^\027\273\n\376\241\275=\367%=h\0017\275`\367\325\274\236&\232<\004\024\312\274z\357\341<\250 \221=\346\202\022=\256\226)<\004x\253\274C\300\341\273gW\341\274F\303\200<\305Vu\274\352\256\275\272D\017\221\275\266\r\203=`7\244\273\315\262m<\217\271\220=\217\272\021\275^`\314\273\212\354Y\275\224\014\305<0\374\351\273K\230\021\275\235uE=^{-\275\273.\325\272\266\177\017=\016\342\362\274\030\2640=\307\227A\274S\335+=\362\310*\274g\022p:k\200\247<\236c\210\275\310\240G=\373&<<\030\243v<Ho\354<\210\216\021=\247\273}=?\214\332<\205\204\220=3\323G=\010\352@=\266\235\204\273{w\345\274\235\310\233<7`\353\274\211\335\024=\274\372[\275ab\027=\302\235\216\274S\275\355;p\316\315;E\326\350<W\327A\274\225/\205=\032\311\331\274\255e\210\272@\257D\275\3741*>\014\377/\274\331\247@\275\345s\323\274\017\204\t\275O\262\035\275\3518\t\275\374\364\037\274EM\n=\023\362\014\275^\242\022\275.\023N=!\223\207\274\333\314\337\274\344\257\\<\225\026\006\275|(#\274V.\341<\214\024l\275o:\341\275b\014\200=\260\332\212\274\310\225\251\275\'\304\r=\307\013\031\275\244[\357\274q\272e=\264js=\'l\210=.\217\240\273;\231q\274\370\277\027;\301Z\'\274Tp\004=\003~V\275\276\274 \275\351\223\222\273\350\003\373\273|)\327\274\201\027R9B\3678\275t\260\027\275\221\013+\274%Q>\275\327\224\006<W\304i\275\354\013(\274\277L`\275\257\333]\275X\303\205<rjR\275<\316\227\275\236\2452\275\267\377q\274v\3733=\031\216\221=.\361e=\326\2133=\3668\026\275h\020V\275\270=\210\2747\317:<\364m\206\274\'\372\312\274B\035\006\276\233r\210;\202^`\275\262y\031<F\331\220\275\027&\202<I3`=\216q{=\270\270\036\275L\017K\274\251-\341<\355\020D=\2360v<\324\316\217\274\313fY\275\255\275\347\274%\010\233\274\204\033\207<\232\210\225=\004\227R\275\355sH\275\n\371 =c\207\261\275sb\001=D\302\270<M\007\375=\246Y\306\274\355\024\251\274\275\014 =\005\003\006=ML\230=Tk\017\275i\247\230\274\r\323\272\274\032\236\031\275.I\014<N\002\327\274\354\334\364;\247\323\t<\240\nR\273o\261\007\275\265Gy<\211\227\322<\322{\204\273\220\350\274\274h\213\204\275\360\\\367\274!\324\241<\037\272\'\274#\253\013\275\256\2631=\271R\210\275\214<\220<\034I\026<v\314\n\275K\245\234=\n\311\230\275\026\227\205=\367\031_;;\221\356<$T\244\275\272W\232<\010\343\274\274=^\350\275\212\200[=\244_\302\274\"Jp<\226f1\273\242|\237<}\204K=\305f\260=6\241\'=\330\300m=\362-\317\275\\\347\304=#3t\274\232\367\"=\023%\256<I\214r\275\030J`=5n\307\274\000wZ<\n\346K<\177\2312\275\257\024\343\274\273\245\270;BfI\274\017\031\277\274v\014B<\240\260\246<:8\207;\250v\262=3\216\035=\274!\266<T\215\221\275>2\204;\3142\224<\240>\302\274\372\t\252\274t<\253\274\206&\203<C\000;<\375\233\363<=7\226;.\242\235=}T\243\273|\372\331<\022y\225=\252\032S=$i\314\274Jl4=\220\337$=\'P\313<\353\331O<\002\023\202=\337\016\177\275\036j8\274vmY\275\316\264\220=\347\213-\274\236\222g=^~7=8S\367\275\021\275\272\273\n&\237=%\024\027\275\265j\014\275\305\325\320=\301)6\275\217\205\334;\372\\\020\275j{M=Y\262\004\276\034\317=\275\331#\236\275e\325\252\275\r\373\t=\374\210[\274~:B=\237z\324=\335\022N\275\0215Y\275G\322\252=\315\234\035\275\340\374\353<\226\"\253\274\010\232\217\273>#\202=\264&\020=\353\242Q=\277\'u\274\204\032\026=\313\205\371;\202\010\347=A\307\335<M\314\263\274\'\232\300=\350\036\211\274\300\377G<\276y\024\275p\327\330\2733\2231:\357\275\002\274.8\024\275\222zr\273m&l\274\375B\276\274=\204p\273\026\263H\2752\320\250=\261\rV\275lb\232\273\370\005E<G\255\271\274\334\243\260\273;\333\300\274G}\007\274\004\020\236\275\260\230\244\274\365\023o=\203\332\030\275!\034\351\274\207\211$=\372\240d=\003\354V\274\255\030q\2754\010\254<\262hr<0\363@=f\313>=X\215\r=\"\203\035=@t\223\274\312\214\202\275\035\254\003=\313\232\032=]\345\376\274;\201\326\274\316\3454\275\333\350\000=\211\345\330<\215\212\353\274\212\243\345<\245\273\035<\250\252\r=\363\247\275\273\333\0042;\201\240\236\275\273$\305<\\\361;\275l\346X\274\034Y\373\274\351j\241\274L\330\327<\274\007\240\274\265_\232\275\032U\023\274`o\233\275\232\214\024=J4\242\275\337\317\316\275.,\010\274\253Q\032\275e\302\222\274\252\216\265<U>\352\2748\2474\275~^\031=(\224\234=\315\351\246\274\212\300\206\274l\350i<\002^R<\306\213A<\331a\207=i\262!\275\027A\030\273\317\016\323<L.`<f\332\020<\025\365c\275e\312i\275\207\250\334\274\252^(=\340\256\t;\001\006h=W\002\001=\225\233\024\275\253Q\220\275\377\322\244=\326\376\023\275\265\2216\2749\244\024=\322\031\2209\340t\353<\211S\\\275\252\261C=\361\365A\274\276\352,\275o\250\365:V \326\274V\301\276\275\200@#=7\310\300\273\000z\345\274\244`\0069^K\014\275\336\202\t\275\266\204\230\274d\264:\273e\320\341\274\243\r\224\275\377\314,\274\313\005\354\275\326\020\002=hPq=I+\324\274\323\333b\275\220\\\333\273\375\220\227\275J\'\211\274\264\367\026=\373\347.\274\342\375\014<\006\351C\274n\221\316<\366A\326\273\017\306\231<*\031\247=:G\306\274\346K\247=\322\210\020=\247G\211;1\331\203\275\031\323\343\274z\2614<D\210\017\275f\301\317=\203,\250\274\303\204\251<\n\236\240;\223\027\231=\020\230\361\274\363\3647<\177\276\t\275\334\030&\275\351@t\275\033\342\312\274U\355\001<\017\034*=\253\360.\275\007\274\213\275rIY\274ix/=\035\237\023=d\360]\275\276q:<\215\r\367<$\362\211</\022C=7\271T\275:\322\025<\267\215\337=\3236&\274\026*\035=oQ\372\274\\\021}\275\261\260\310\274\203\024v;\001\221\r\275\224\\\010=f\277\235;\030\3321=AC:=L~\205=\024\031\242;\036m\324<[,\004\275\010U\237<\021K\256\272\032\254\341\2744\331\025=\342R\223\274\355\265N\275RM\367<\026\'\242<?\277N<=\016\354\275\210\336\r=\344\373\330\272\201\323K=\021\312\007\274K\303;<G\331\362=0;C<\206\021 <~\240\201<K\210\376<IQ\227<\226\357|<\353\\\036\275!D\257;\222b\231\274\325\321b<@\361-\274b\036\n\2753\374<\274\243t\310<&\014\201==h\003<\216\351\224=J\277B<\333\325\000\2759T\223<\237\272p\272\312\216\222\275\257.2\274\242Z7;\023\324G<o\026\217\274\tB\331\274\203~\032\274\026\326\210\275lh\222<;q\375\274\322\306\256\275#7\211=\251\265\213\275\337\365Q<\2743\303<M<\323\274\372k\\<d%\270\274\212\315\361\274\010\252\375=\367\216\217\274\n\262\331<\340?\224\275\257\221\005\274\260\346\030\272\272\362\'=\316\362\302\275\275\245\325\273\271\271R\273\226\014v=\225[\214\273\034\326\237\275\306\224\345\273:\363\021=\223f8\274i\307\232\274Pr\213=\014\233a<\3435?\275\236D*=:\025\242<+\376|=N7\371;</\371\274\226@\037\275\361P\200=\374h\326\274O\364\223=\267A\224<!*\007<\305\205\177\275Y\177L\275\226V\253<\242 \214\274+\323x\275T\362\010\274]\235\324<\360\362Y=\274xy=\201Tz=\024\360\245<\037\326\017<J\355\020\275R\035\304<\003\003\031\275eV\200=m\034\272<\2336\010\275\023\314\240\275\271\216\311=\367\365V=\310x4<(<\004\275M\344\207;\364\230\034\275BoE=\nI\222=\206F\225=\324\013Z<{\017d\275\004};\275\302\253r=\330\327\300=\013\324<\274\027BI\274\276\252\026=\220&\306\274\331\177\014;\037\210\213=Zu\271=ju\346;zKL\274f\331\260\274\305\327\013\275\231O*=\276\227\002<\333>#\275\347\177\206=N\337\202\274\006\231f\274\235\270\000\276\204\265]\275\240\354\337<\247a+\275\335\350B=\007\034\361;k\307<\274\223\326F<\356\232\374<L\355\021<\016 \241\274\235\326T\275E\340\204\274\317}\322=um\372:+\311\243\273\344\275\021\275&\177.=\005\212\327<\364\307\021=\221\2769\275\010\034\320<G\365\200\274\371;\323\274\273d\037\275=\371\317<\371\001\376<s\341c<\316\273\215\2757\275p\275\222\023\222\275]\"\223\275\316I\333;\375\321\226\274mg\024=\321\377\033=ZlL\275\264\300\t\275V\221t;\326\t\256\274\022\216\342<\220:\010=\351\257-\274\207j\262;\330\374*\275\\\216\003=\340\343\035;\330\347\201\274\027%\016=\306\372\241\275\234\016W\275XB\263\274\255f\247;\236\304k<\232\350\264:\270O\276;_\276\032\275<\326\212=\233\t\005=\311\010\307\274\276\303x=\225B2<:\202\016\275^\022\203\275<~1\274a\265X\274c\320R\273\326\017Z==Y\205\274:\001F;\033g\241\273\323\243\264\275C\305\312<\251-9=\177\\\240=\014\036\200=\357\016N\275\013i\306=-\356w\275\331\206\315<\017F\212\274\374\222)\275\006\3564\274.\324\016\274;\221\020\275\221\004L\275\223R\234\275<\302\305<\232\221\037\275t\234\023\275\363\356q=B\263;=\027F\330<\356\345\303\271\021B\311\274\026\312)\274\230\333S\274l\215b<\337\031s=)\344\266<\250\304\320=\211\303\031=\303\207x=\221e\320\274`\007==|d\276\2742\304\211\275\230hr:-z\362<\305\222\217<\310&\345<\377\373\300<\363L[<\"1\300=\000hk\2756\023\244=\236\202\225<\300\r*\275\\9\365<s\271\"\275\3445\235<\343\210\013\276P\302\254;}\211j\274\037\334\206=\377%g=\250\001h;\244`\242<\373\3734=\\4t\274\270+t\274*\000\306\273U\307s;OE\306<pU\266=\376\243\202\275\333\205\250\274\244;\027=\223\371\t\275\301\250\203=Y\334\260\274\336\342n=\374[d\274\3728\230\274\343zV=\3431\323<X\214\t>\353\031T=\227B\226\273x\246\037\275\253\2133<cJ\"=\n\002\255\274D\257\233=\r\366\032\275\250\350\265=;wR=\327H\264=\013\\\303\274\340)\233<\327\343\331\274`Y\n=\007\275>\274\361\021h\275\036}Y\274\313{\201\275\303g}<\364f}=G\'\264\274\321z\355\274\017\275\217<|\340\216\275\014\272x=\001\220$=\376\354\026\275\022\034\231\275\273R\345\274%\271\244<}\2516=6\357-\275F\003\005<\333\014\353=\' \365<\267\264\237\274`+L=I\\B\2738\031\205\274\316V\037<\233=\275\274\324V\205=\266\207d\273~\277\330<\324BW=g\255\214\275\031\034\003\275\331\240\215<\354\274r<\271\274\220=F\311\3338\000/\243<c\256l\275\025\255a\274\315\262\333\274\002\311B\275ju-\275\3623\273\274z\237\377<\355\016\227<\010&\227<\373\001I=\265\r\037\275A7\232<\026d\254=\340Jm<\356\360\331<\336\337\021\270G\273\222;Q\274\033=:\371\206;A]\005\274\272\023\002=[Y\275<\377<\352\273G\021Y;\331\256d;\322\352\026=\252\356X=\331\202o\275_\211\025\274p\373v<h\260\216;\361\007\225\273\275f\';\335\376\351<a)B\274\210\321\034=\330\246\202=\365\353\020=\035\224\346<`\350\022<\217\322\346\273\207\312\013\275\177\204\'=\214x\237\274\220\342\034=7\243i=\376\2354=\256\310\276\274U\340\320\273\377\260\254\274\213S\323;\315+\254\274\202\2459=\265\360\361<_.~\275\020q\243\274\3106#\275\277\266\223=\nQ\001=\316o\032\275\205\367\301;\216\253\235<\177\222O\274_\305q=V\217\303\275Z.X\275.b\274\274q{r\275\017\324H=\244\214=\275\006J*\275f\237\210<\327B\351=\362x\215\275\314c\311<j\343\006=\360\353<=\247\274j\275\3710%=\324D\001\275\217,\217<\203\006W\275\300\312\227\275*2\205=\034(\177<\220\006\014\274\t\220\322<\225n\337<i[w=\010\311\221\274\362as\274#\251\223<\014;O\275.\326\230<\245\351K=\247\245\332\275&n{\2754\264\227\275\r\271v=m\370\227\273B\323|=A\314\027=yK+\2755\222k=\301\345\373\275e\355\351<\371\240\214=\3277\315<S\020V=\326T\234<V\014/\274_\304\025=M\275\375\274\007\372\037;Y\356\277\272@\243c\275\337\200\243\275S\346\227\275s\037\321<\357\025}=)\313y<\346\225\203\275#\220\327;\317\007\331\275\266\220\n\275\315\273^\275\202\210\033=\333\003G<\3475$<\316\021k=\3329\032\275\234\332[\273e\275\225\275\335\277\227\273\302S!\273\322\361\242\2758[\326;Pc\367\273\355\332\371\274\340%\241\275\323\215L=\301.\377<\3234\247\275\203\324\032<:\250+\274D\255\235<\241\031&;\211\316Q\275GL\373\272\312\335\200\274\370\366\240\274:Y}<p~\003\275ZWq\274rJC\275x\337\206\275\211\361_=b\357\374<\r7\237<\t\346\303\273\306g\005=Z\346\230<\361\225\261< B4\275\037\242\033\275\004\023\246=+mK=\233\306\252;\316\355\014\275\226\245\340<\374Z3=\t\303\214\273\366\233\034=!r\n\275\020E\352<\214>!\275l\277\214\275\377C\032<\341m\260\274\336\373\026\274#E>\274\342>L<DYB=\312 \320\275n\321\364<\371\006\220\275\361\177\375<\305\3218=V9\276<\306\252\323=\324^\361\274\3375\223<H\313\r<\001^X=\323\177\247\274=\346v\2747If=:\217h\274\275,s<\304,8\275\365bA\274\202\245\263\274\244w\215=\021\234\300<<\336\214<P?Z\275\263Q\273;j\241G\275\227\342\331\274\354tS\275\n\256\311\275\226\222\"=7\335\031\275\264\2166\274:x-\275\260\024\246:-A\313\275\367Y\024\274]\356y\275_\005:=\372*\n=\212\252\221\275\277\345\025<\300\245H\274\337hq\275\240o@=\267\242-\275\375\311\241<v\337\t\275\321\331\204\275\346Gf\275\001\311\222\274`dV\274^\316\026=M\351+\275\215\261\016:\003\325\360<\372\346\217\275\221\3028=\230\267p=\345\327\357\275\002\364H=\265\013=<\r\220\227\275\320\270\235=F\005\002\275\034\326\274<\370\367\246\274~<o\275\257\231\254=S1r=#\305\374<\005\335\355<\376\3129=u\036\236=\215\264\315\273\364{\237\275\372\272\034\274a\324\365\274\245\235\311<\222$^\274\007:\357\274\"o\323<\357~\212=!a\322\274\216\305z\274\355\375;\275\330\310y<Uk\030\275\350cd=qU1=\210c2\275f\357\226;\341\'B\274\325\006\266\274\315\315\022=\272\2558<\2475\340\273l\211l\275\277\2662<\303eZ=\342@\340=\341nQ=\327R#=\346\276\"=\324\315\336\272\216S$\275\253\363a=\352\344\203\274.\233\300<{\320\223<\273\251\246\274[Rk\274\006\342\024\274 l\"\275\013\267v\274\265\324\017\275\216\205\260\274[SH=\021\361\010<\234\000\030<@\300\214=\010\031)=\217\312\326<u3;\274g\034\370\273_\212\037\275\236\313\207=R\0026=Ks\331;H\267\205=\270~\\<\202]\254\274B\306c\274\372\224\024\273`\201\017\275\214g(=/:\262\274\370\306$=\277\340\322;\345\240\204<\242\265\264=X`E\275\r\027\211;\204\247\211:\006\211[\275\231&\247<bY\322\273`\237s=,h\275\274\240n\177<=\254~\273?\312\205<~\366z=\237\243\026\275I\003\303\273ROH=`3\212=\350\260\226\274\273l7<\261!\031=2\277\267=\014~\316=\354{^=J\355\204<}BN\273Q\2060=Y\024\013\275_\324\335<\241\363[<;p8<1P$\274+\350v=_94\275\357\210\207=\321+;=\235CK\274\2469\213<\211\233\203\274\n\243\035\274\303\307-\275\266\252\021\274Y\013_\275l\014\234\275g>S\275o\362\"=&\336m\275\341\345\375<\226\3624=vI`\275\211Q\375<\307h\200=DR\010=r\2509\274\321u\n=\007\212\275\275a\373\005<\374n\215\273\023\2662=\374\233J\274E\200\336;)l#<R.\246<\212\2626\275\001\226\202\274\365/\376<x\3608=x\225\026\275\200\343\004\274\312Zd\275s\361q\274\367<F\275\212\307\322<Z\017\237\275+X\220<{\307\345\275\240\211\216=>\225e=\021\375\"\274<\254M<[\323\026\275D\202\001\275\030\225\007</\257[=\256\260D\275y\256\234\275!\036G\274\202x\016\275M02=o\237><\352|\374<\322\2770\275\347\247\225=U7\232<\330\010\313<k@\207:8\021\321\2749[\215=\363I\310\274\220u-\274\200^><z\217r=qS~:}\225\331\273}\356\213\274\257\352\023=\317v\317=\037\020\252\274\017\262\335;\262zG\274\376\253\222\275\277\305\237\273\334C\003\275,\360r\275\311\374\n\275\370\300\004=\206\312\272\272\311\300Z;zm9\275\275f\010=\252&\352\275Z+\363<\311[W<u\340\014\274\035*<=\245\031C=!\205T\275\213Tx\273L!i\272\305H\013=\022Mj<\250B\360=\204G\357<\306\235\332;\267PG:\361r\236=\234(\256\271`\212\206\275iV\224\275\264\343\020=\274\017\204<\023\316\201\275YwO;\264\252\021\275d-\352<,\243\024\275K\204\247=\t\275\237\275\3511\226\275s\327\017<\220F3=\225\210\316;\317\321?\275\205\226\353:\2674l=M\205C;X\242\024=\264\004\341<\2745\023\275\000gE=q\006\005:\032\231\007\2750\247O=\333yJ=\344\330\250\274AJ\267=\221?\025\275\312\265\000=\261\'\202;\223/\320\274\345\204\206:\014\020\366\273\004F\344\275\014Q\027\275\030\303\225=\242_\'<i\005\000=\0263\026=82\023=3F\240<\336Q\033=\376p\230\273\r\335\025=\324\211\230=U\345X\271\331\260(=\265f\232\275\350\301q<\n\327I\272rZ3\275\306\023\352\274\212\035\353<+\316D\275\023\321S=\372\360\204<?\035\023\275\325\001\220<\251\n\225=\0049<<J\t\232<C\002\210\275\244\355;<\016\0343=\005\243U=\214\314|=1(\324=\242\313\'=\207\312\002\274\014\364\036\274)\316\206\2742\366\350\275\307~!\274+\317\330\274\303\030I\275c\032\244<LaF=\n\342\310;0=*<\322M\371\272\030\334/=\032\267\361\273|\264\331<\310z\356=T\001\235\275;|\246=\'\327\010\2746\017\336<\322\\M\275\353\347\217\275\203\372\242=\273\031q<\n\226^<C\374{\274_,R\2758\205[<\201\220\333<\001\261C\273Qvo=\226\205\233;\343B\030=\203\364H\275\350\310$=\3719w\275+\330L\275\222\204\240\272\201\275t=\311\217\331:\224\3325\274\300\343^9\254\304\243<e\265V=\303\'h\275p\226\006\275\351\300\242\275\026\331\333<1\273\230<\360m\304<\212\275\345;\n\337\241\275\350\243\227\273#/=\275\301\350A\275\351\205\274\274\231\372\227\275W\217\363=2@\315\275\025\321\336\274N\361A\275\256\226\232\273\216cb=\310JA\273\256<f\275\344\023\003\275t\033K\275\002s\002=\226\227j<\302\023\230<\177\371\222\271\277\037\261\273\252\323\200\274\177\004\025=&\031\204=\027\222v\274\364l\320<t]\030=\336R\005\272y\372\213\275\000\306\301\274\370\216\214<\036\227\210=\271\316\215\275\377\027\367\2741\301\340\274\0028c=\212\341)=\n6z\275kV\341\2747s\215\274\220\243\2638\260%\021\275\006`\320;5\005U\275;$\203\274<Z\233\273\343\202\253\274\345\203\212\275IFv\275D\306@\2751\372w\274\333\021\354\273\211\017\207\274\335H\251\275\312\211\323<\301!8\274\231\025\353=W\3271=5\236\224\275\322\020\221=\2273\355<\344+d=\240rc\275Bi\025\275\213\371\234\274\206\262\032=v=\251\271n\316&=f\246\204=\037\331W<n\362\217=\337\345L\274\346\225\347\274\014_d\275\276\271U=\343\236u\274Y\177\246<\234.I\275\006H\274<\210\004\033\275\372\024\252;\370M1\274\0234\201\275\003\240\232\275\275\351\003\2757\245F\273\302+];\\:>\275\034?\253<\330\250\213<\003*\001\275`\227|\275;\347\231\274\200gp\274s\274n=?\003\301<\314G\004\275\367\032J\275l;S\274i6\302\274\236\363\240\2740\024\326<Q\3574=\243n\304\273x\365\243=i\'\370;M\212\262\274\2129\024=\330\201\322<s\245\313;Y\276\002\276\254\336\300<\200\303\\<\004&\253=\010@\336:\274\261\330<\3453\002\274\\Xb\275\033c\203=yi\030\273\242\316:=\316\024q\275\264v\"=\274\2620<\033\031\033\274in\262\267\270\255>\274-\232\262<+\035\031\274\017\313\370<\034R4<\314\364\024\274G\204\003<\261\343\375<w\351\366\274De\373;4w\202=\367.$\275L\252~<\027_R<\223\221&\275_\327\346;\371\347\205=\177\304A=\337\212>\275\240/\304\2756\357)=\323\r\356;7\007\334\273\241\016\342=\250\341\303\274\3070\016<2\377\231=\310\371i\275\360\024\212<\023\366\273=\276\030T\273\323\000\025\274\200\373\312\272eP\212\275\373Z\207=OK\247\275v\261\326\273\276\310\201=kQ\236<\033\017\010=l\317\216;\000\221\210\275R(A;^\234`<F\034\340;\245.Z\270\203\005\201\274+p8\275\213S\235<V\016-=\241\225\014=\366\n\005\275\033Y\256\274\265q\262;B\031i=\261\316\232;\377\363\007\276\230\217o=\020J\210\2752\027\277\274j\2101=\375)V\275?\330\376;\213\231;<XU\002<#\227\207<\336X5\275\272s\250\273\255\014M\273\210\263\027<\247^(\275\306)\360;\"x\025\274^\225\031=w\206.\275~\317\020\275\034\317\237<\300\220\266<)u\335\274\260\324\376\273\205\345%<\352\"^=\r\346\231\274-<[\273\033\204a\274\312\013\003=\213H\313<q01:\376\246\003<\020\256?\2753x\253;\\\351D\275\214\225\'\275[\336\244=\312\357\030\275.\035\250<\366\203\010\275\226\206\336;\331\270\225<c\254m<\020\263\274<m\374\200\275\215\006\275:\005\225\341\274i\325\n<\255\250\201=\300\023\335\274\342\206\350;\266\220\270=\320\334@=.\204\002\275_\201.=0LP=\247\227\002=wMB=\025\340\347\271\315\343\301=\017\247;\2753\370U\272\022\215\035\272U\216\325\274\357\300\265\274\313\300\213\273\017P\223\274DZ\327<\356\276\034=\317~\240;H\020\004\273~q_\275\033\310\232\274\031M\210\275\030\321+<m\376\004>\233\301&= G+\275;i\000=\032\014\027\275\226\030\276\275\\\277\322\273y\240X=\036\377\221=\260\n\242:H\3357\275{\355\001\274\345w\360\2746\n\240<$\024\013=\374\277\361=\027\260\204=\355\026\037\274$\017\177=\203\304C\275f\227\346<\363\323\017\275\312-K\274\354\343\213\274?*\264;\304\274\252\274\337\332\214\275\203\024\352;\301\217f\274I\346\313<\256R\310;I`\267\275\245\315\027\275\223\222}\275\210\216\345\274\361\263\200\275\231a\'\275\203\264\222;\265\200\317\275\031\022\t\273\306\247\224\274\236\250\n=\204!\211\275%\023\304;\255\200\224;C\331\377<,\222\204=l\231\002\275V]&\274\252]\"=\213\240\232\275\035\364\323\275&\363~\274\376H\377;\350?h<\273\355\033\273I\013\203\275-^\360=\226\345\013=x\263J\275\370\t\242;\366Y5\275\374\026\007=\361X\212=\357\004\3219n\214\232\275\002\346v\274+;\355\274.X?\275O\376f\275\354\002\231<\255L~\275s&E<g\371\224\274\224\007\304;\310\354#=\221%\236<\253\230p<c\234\217\275W\247(=\250\263{=\035\2632=\245|o\275WI\271<\242\333\010;\340\373\220<\007\232\340<\\\316v\274\233\362\270\275\235fn=\031\2232\275d\3240=\024|\246\272\226cy<\375\3058\274\210\312\325\275\360\024\n=@\350o<\247u\257\275\027\325\244<;\304G<)\2207\274\3269%=\332?\226\274\266\254\375\274\237\220\334=\374\034\332=\2700W;\352\r\257\275\326\351\244\275\331\253Y\275%l?=\323\314\260=\211\273\222=\033\0100\273>\235T=\330\216\354\274\236\245m=*\375\310<93Y=\352\221\300\272q\222\261=\257\257&=/\'\357\274\246e\030=-\013\021=i\231\366<\277x\314\274\375\215*\275\354H\232<\n\364\202\274\331\320\024=\016]\271\274\376\273\"=O\374l\275H\277\357;\025Z<\275S:\215<\345k\267=\037\2461<h@\327\274\037\\\335\274\262\262\225=\016~U=\230\315\320;\240\371\242\275j\\C=\317\034\257;\353\360\252\274\035\243\247\275\252\246\r\275L\031\367\274\017\265\242<V\225H\274\267\204\215\275\217\032\207<\026\177p=\352\227\245\275\375\351/=\215`\334\274=\203\210=\330&\330\275\230t\023<\037\232 =\354\026Y<\351\245\203\275\024Ml\275PTY\273\336\313G\272G4\334\274gd\304\274\216\277\217\274Cv\2639\234\rl\275\241\206\373<\224\225\327;\364W\n=xgE\274+I\205\275{\307o\275w\251D\275|b\240\275\306\211A=\3726\314<\207T\246<PK\t=\354z\302;\275\204\217\275\270\232\270<!p\205=\367x\223\274\257J\223<0)\271\275\007Sm\274\237\245\371:\027/\222=\014\004_=:bO\274\367Az=U\325\031=\244W\200\275V\003\242\274\212\301\263=|V\033=2\347A\272\303\021@\274Vt\221\275\"0<=\206\'3\275\261\313\300\274\352\031K<\325@+\275\324 [\275r\r\221<\214\313\226=Yv\352\2757h2=\370\232F\275j\345\210\275\261_{\274\364\021\025=uju\274\370:\222;+\312\347\274,\230\345:4\234\210<\361yT=[Q\304\273\304\365{<\211\241\240=\26081\275%\216\234\273\324\350\016=r\026\267\275y\207\276\273t\346U\275\356Y\340\2745\212\301<U\377A<\260\355\275=\243\345\000\275\035\264\277=S6\247=\223\334\334\274R\030\r\275d\026\214\274\247\374\010=\373}\243\275K\214\377<\036\374\200=T\307\223=Zv\220<\210\001\261;c\315\374\272\276\266\211<\340\353a;\321\217\315;\036\234}\275\301j\233=\250\340\\\275\201\001\020\2751$\217<\307+:\273\202I\005\275\362F\342\2731-D;F\314\341\274\027\314o=\201S\264<\333\352\226\274\2667\332:/\223\261=\227\357\252<x\322\365<+\370M<\3352\006;\020\371\016\275\371\253h\274M\361!\275\271u\345\274Q\213\017=;pr<\323\013\'<\312\004\n=y\214\234\274M\037J<\250\3751=\347\210\241\274\355\034\007\275\375<2<fW\325\273\230?/=\210p~\2754?(<{[V\275\253J)\275\006\357\022\275o\306\305\273\006\'\260;\177K\003\275Jp\266<,\205\334\272\266\377%\275\337{/\275\345]+=\231G\021\275\364\035\225<\236\303\307\274V\345t\275\276\223\301=\257\253\301;\230y\t=R4\341<\223&\016\275\375\204\322=\'\262\266\275\334/a=\2501Y\275T/\335\274X(\036<\242I.:>n\215=\006z\033<T\275H\274\206NP<\2674\200<\010a\300<MY\305\274\r\233\031\274\262F!\274M\204 ;\024\253\225=\221\367\351\273\365\316$=\\3M<\305\222\375<\025\023\235:Q5\037=\314\376E\275\357\232\274\274\360j\031=O`\372<\215c\344\274\203\371e\274J\375\'=\031Yh\274b\266\377;\373q\224\275\321\266\242=\333\261\232\275\205(\033=\013\273p=\032\365|\274J\005a;E\337$<\224y\203\275+\204\337<\277\361\312:21\223\273k\262\324=\002\346n<\025\n\356<1\021\017\275zv\030\274$\361\371;d\226\277<\014\274\235\275\221h\030;\021\0079;\302\323d\275mIr\274\2116\027\275\235\366E<\004P\225=\222\354\035= [\022=_\371\331\274l6\332\274\376\002\363;\204\304.\275G\236\177\275o\022|\274\246\024\204=\262f\007\275\020\310\333\274\255\356\374\274zk\245=\320\334?\2752\334\256\275\033\202s\275\346NS;.\"V<\332\235\234\275\344%\006<\301\r7< \362\304\274\004\323\270\274\224\325\340<3\351\206=\345\261\t=\203\242E\275D\374\322\274\222V\346\274o\301<\274\314\3119\275]\224\263<P%\002=\215\2450<\321\024\225<\000\211\360<\222\337\316<P1@=\240\037f<!\363\036<\342\216b;\030\325\354\274\373\201\254\275\253m\352<7\225\304=\223\\ <\324E0\275\272?\360<\373\004\353\274y\\\026\274\367\241k\274\'?t<\325N@\275*\365\252<\337\277\215\274\"\000\272\275\240\257\026\274yS\303;`k\310<\264B?\274\305\334x=.\313W\275\225\324c\275J\325\220<\214d\376;\377\236\320\274j\257K=\342\243\244:\004\000\342;\300\025\210<\271C\304\275\242\005O\275R@+\275\353&\253\2758\356\020=\276\255\312\273y\324\270<\370p-\275\343g\177=tB\216\274\023\005.\274BX\264\274\330\334\006=<L\020<\034\376\213\275\376\370\004<\332h_:\000\006\317<\230#\235\274Fc\r\275\257b\"\275\020\010\321=\177\261\232=\021*\200=n\277\n=\270y\035\2737\024b\275V\020\226\273\245\214\030<gj\007\274KDw\275\204\301\005=\256\374\364;\272G\237\273\261\215\217\274\273\"\246\274\031\306\314\275\305$\031<\316nD<Q_\302;@\355K<\225\366!=\330\262@\275\352\266U<\336\336\312\273D\006\241\274p\372\213\274\030,\361\274-P\276\275CQ\226\275u\267\204=S\360\366:\222\005\000\275\327\241\353<\225\013\'=\334\216\375<$\245\224<v\367\317<\0136;=\274\372\203\274b-Y=p\276Q<\313\230\325\273-\'\263<\327\006P\275\0221==\251%.\275|\323\265=-\010(=\036\274\327;$\311R<\005y\217=\022\214\"<\'\031\027<x\204\210<\263\265\206\275\340-\215=?\330(<\030!\356\274\256a\247\273P\373\217;%\302\231\275\341\re=\365\364J\274i\001\216=\ny\331\274t\276\307:|\320\233\274\337=\235\275\265R\207=&\033\375\275\323\334\210\275\216\004X=\371\013\210\275El\212<\'\213\222\274N\n\361<`\261M\275\243@~=\301\030\r\273T\222/\274R\2405<\361J[\275\211_o=\232\303\021\275\234D\371<C\007);\232>O\275\321\3526\275\363\372\244=\201\020\267\274#\274:=\272V\367\274\304\004\226<\021\203\300;\214\273\323<\362\3637\275MX\271\275\277\\\242\275\202G =B)\232=\360\016\025\274\237\031\031=\346`I<\227:\027=5\320\003\275\036\323\351\273[\367\\\274\271\202\025\273S[\262\274\025{\353\273\346E\342\274U\027\333\275\215\371\201;\353:\304:\217\352\347\273\331\030n=\335\212\t\275\361\242;\274\014k\255=\376\212z\274H\255\020\275\353\354\237\275\213z\254;\241\231\305=6>m;\010\014\205\274RE\235\274[6S\273p\361m\275\340?a:XO5\275t\325\206\275\214,c\275\343\274\243<F\256\004\275\252\004\323<\353\305R=\305\224\226\275\035\234\322\275\274\327\214<\327N\355\274\365?f;\336\273\332<\2275\033=\200\211\306\275\333\034\256;\233\260\003=\207=D\275\266\024>\274\031\306z=\244\201T\274\326\243\204\275\225\350\330\275\372\340P\275\335oH=~g\346:\346u\017=\002\r\343\2749/\323;\2241\330\273\241\340\241<\027)B;bv\210\275f\031\223\274\254\334e=\003\027\224<\265\274\233\275\325r0\275\000@j<\300\022\260\274{1\2438u\n\330\274\331\353\255<*0\242\273\227v\005\275G<[\275\344\2046=#\255?=\335\257\032\275\360q\035;;\253\217\274\266J\216\275~c/=\300??\275\335E|=\002\327,\273s_\000\275E\237A=\346i\206\274\022\tC\275\317CD\275\233\252\213\273i\2123:0F\037\275 s\343;\001\237\342\274\221\034*\2759\245\224\274\341^\210\275o\217\223\275\356\261 <\033j3\275\312\303\365<\022\352\271<\330b\007\275*B\233=\351\375v\273 \227\265\274\225\212I\275\364\332&\275SO_\274\360\311\275=\317X9\275f\267\210\271\232\204\253<\317oS<\231\3667=\341:\250<,\336I=\226\264@\275\216\343+\275\266\320\206=\203P\002=\246\366\251\275\362z)<\244\314\332;\312\014c=Sv\227\275I\302]\274\nE\177\274C\274\320=g\031\314\274x&&\275-\372i:\n\t\265\275sx\316\274\305#\332<*\0308=v\035G\275\0341Y<\304\307U=\311.}=\005n\312<Pw\020\273&*G=\354\000\005\275\337?\372\274\201J\224=8\202\301<\370\201\255\274\241\003f<\337>\000\275\256\326\207=\nL\001\274\317S\256\275\242h\020=\250\376]\2749z\336<\262\2231=\031w~<Hr\345:*\306\001=-\003\010=r\014\222;\212\311\357\273\243B\021;\342Rd\275\200w\017<\364\350B=\253*\326\275O?\201=\257Me\273\317\221\233\275\265Q\251<wO\027\275\360\001\016=\254\312\233\274\247L\324\275\200\351\003\274\300\200\252\274-M;\275:\273>=\266\3012=fws=\242\350\246\275\3067*=\331\303E;\177\301V\275U?(=\001)\223\273\004\013i<4\334\265=v\246\025=\277\2008=Z.\206=\023h\207=\320\001\232\275\003\000.\273\240C\303=\317\353\201=A\260\353\272:4-\275Pz\3468\227kM\275\254\327?=x\246<=\003\001f<OxR=\353{\261905\340<\\\003\205\275\240Jf\272\230\250\r\275[M\367:\375\353\001\275\372\350\225\275\277Z\376<\377u\213<\261\005\351\273\235\346\\=\270\032\177={l\214<\300\177\257=\304B\315\273\215\330\374\274\315\320\374\274A\347\242=\245\344\364\274\325w\037\275fu\220=tQ\227\275<\351\351\273\352`\027\2759\246\363;\364\336&=\227\004\305<\340\3660\275\366@\311<\177\305\003=X\227\242=\026\274\226\274\017\264?:r\244\342\274G\317\234\273\"\304\270\273\212!\207<\332\236$\275\342\263\302\274(j\\;\"\321r=\0310\334\275\207|\255\274\374\2316\275\204\363\203\275\244%\374;d\341D\274\272\177\007<\374\0319\275\317(\r\275@\3206\275B\364\024=\214zf=c\010\355\274\224b/=\374M\031\275\305M\315\274\35064=\346W)=\270\247\272\274m\336\257\275\373\255\201\275\2170\231\274#\0201\271\3240\372<\022w\014=\366\233\\\275-\370P<\272\257\317\274\235\274+=\365\031\"\274A\266\355=\266R\342=\352%1\275\261\355\213<E\253\002\275=G\033=\255\276\240\272\250,1\275Q\")<O\243\314\273\342\013\271=5\241\017=\032<\177=Y\301\036=\215M\037<MR\332\274 \365\241=B\252\222\272\2254\346\274\373\030\273\274\360(\235\274:\352~\275\2446F=\265\325\273;\025\344\214\274\236\347\257\275\372\372\236\274\347\351\265\275I\324\017\275n\212X\275\035\r\300:_\212\206\274\325\370r\275 \002}=\257\017\377\274j\344\206\274\362DR\275K$\345\271\212N\200=\215N5=\234\016\354\274>4,=5o\226<!\321\n\274\213\275\034\275\337\222\210=\262l3=a\313G=\343\357\340;\217\351\027\275\347q\264<~\2710\275\264C\311\273\231\260`\275ED\316\274\276\361)=\0076\361<(e\216<\216Y\313;;\027\223\275\232%\323\274\316$B\275a\205\217\273\362\332b\273^E\232<\331\177\365:\330\200];\316\340J<\007\214\326<2\032E=\316\350F=\210I\201<\261\262$\275\034\305\224\274L\340\231\274F\247,\275/\030\271<\2421\014=\247|\027=\223;\026<\337\026_=\351\325\245=\023V(=\013\273\214\274\321nn<+\246U=\264+\225\274\353\002\021\275\233\220\230={Zs=\0179_\274\253Y\224=v$\330:\274c\\\275-\002\233\275F\004\307\274\344s\202\274\r\225\326<ZH\206\275\233nP\275\"\244}\2743\004\352<Vx\212<\225\357\013;I\374 \275\025\321\200\274\373/\354\274\302\000\354;-q\331;\352k(<0=\010\275|\345,<?\231\345\274\200U\300=\377{\366\274\025X\221\275:\317\031=I\033\025=@T\204\275\362\201q=\267\357\013=D\330\203\275\271\014\341\274J\035\275\274\322\356\022\274H\')\2745E_=E\365_\275m\235\201<\311\343L<.j\312\274\204\344\253<\270\361\223:\307\\\213\274\337D\207\275\275\252S=\316\317^\274#A\355\274\\}\246\2750\353,<\217\037i\274d\337k\275A\316\014\275W\270e\274\207ci=\247\200L\275\025\014\310\275\270\267\340=\t\224\230\274\022q\2729\326\023\2719!\356,=\326z\327<\303\271\257\273\244\323\006=\334!\307<e\026\037\274\324\177\362\273-y\244\274@P\221\275\242\327\201;t-\006\275\035\357g=\241\312P=\315\037\002>!\212\025<\317\035\\=PW\"=|[\340\274\007*\370\274o\311\246=N\321\r\274\220\257{<x\310\335<\215\206\"\275r\244\315<\031\334\337\274!\232\023\276\343\236\363<\235!\372<\311\035\250\274$\201\235<\031\373\034\275=\363\202\274\266\201\024\275\252\376\224\273\036\255\223\274\342i\253\272x#\207\275\027v|\275\240\255\004\275\020\304d=&~\315<\026Ak<m\261B\275E1\002<x\322\374\273\372t\253\274\002\277\220\274\242\340L\275\026\010\221\274J\376R\2748\211\315=\223\256!=\020k[<tO\275<\363\276\034\275\027\010:\274\357\021\031\275M]\376\275\305\315\027\275\237D\242=G\243\213\275\256\256\346<(\231\252\273\372\377\002<W6$\275n`\274<\254\355\235<8\372\254\2726\345\200<\321\272\016;\010\302%=\2762#\274d\267\267<9\230\032\275\254\010G=\221\312\245\275\337\242\234=\024q\341\274\000\221\277\275\253e\376<\253\357l\275\246\276\246\274E\264U\274\177\315\264<\324\372X\272\202\377\023\275\257\2631\275S\331\206\274b\271\243<\231\253#<\317\033\356;=? \273\204P\221\274\261x\033=\010\314@<\033\357)<\333\326\005\274\317\362\330\275;&\256\275\203\035F;\351,\302\274\374/\014\275/N\350<;\013\375<\031\320p<\345\337\030=T\3704=2\311\035\275y5U=\235\251\210\272\333\261\215\275\326\3408=w\2652<\324\001\035=\360\373\267\274\357?\241\274\210\362!=\0230\213=^\320\320\274O\233\033>\320\337\'=\230h^\273\256\336\331<\003\372]\275\270\360\034<S#b=\377\230\000\274\342\337P=\213{\203\273\337\266\217<bs\315;v\'\277\274|\226\243\2747\253\344;\000\201\343<\252\353\236\274\224Sn=\242\0379\275#\245\371<C\033\371\273>\232\301;\323\217\244=\021-\335\273\243\345\233=\351nl\275\007\322\367=J\202\353\272g\3278<\036Bd\274\355i\203;\367\027\363<\001j\234\275\262\301.\275\3156\034;\326K\021=\020\356$=\307]p\275Q\273\316<\352O\212\275\253\346\235\274\036\016i<d\206%\273\003(5\274\360\235\250;\374\206:=kgU\275[\000\210\274@\322j=\204\300V=4\331\232<\342M\265<\214\265\021\275\033\366\342:\030^\007=%\222\201=\\\037K=\323[D<\374\014\204=\341\005\345<\247\363\354\273\326cg\274\331\027\311\273\334\222T<\346\032#\2755\366\262;\372\222\201\274\223\370\206=\3119\362:\\\216\215=g\371A=\271)2\275pp6=\035\352\331\274\013\356H\275\235\237\030=\326Q%=kV\214;8\232\361\274^\261\244\275\032rb=X\336(=4\013&\274h>D=\221\274B=\364\023^\275\037\037%\274o\254\204<\\0\214\273=\256s<\262km=N\t.=\\VI\275\202p\262;\017Q9=\360\216\230\275\370\016\030;\003;\223=\220\274\265=.9\311\272V\367:\275\347\360\244\275\026\307W=B\227g\275\237\360\251\274o\327\264=wTD\275^DO=\371\254\315<[{\305<E3\325\273\006Q\t<\001\017\'\273\n \206=\306|s\275t\022\325\275\214\206Q=\200K\217\275\325\025\264=\257V+=u \024=\301\021z=}\330\310<`C\033=\255\n\010=\350A\272\275\362\260T;\276\360Z\275\330|^\275\365\341$=N\036\341\27395\307<\344\376\373\274\026\'\254=\255i\234\274_\037\014<\332\342I\275\021\371q=\350\000\373\274\014\334Y=\001\020H<\220\244\226\274\264\\`\275|\034v\273\370\251\305<\220\335\304=Qre\275#\332c=\331\356A\273\013Yz=p\326\267\273\320fu\274N\231\237=\277\242\300=\021p\224\275\\\010T\275\233.\312<\321\336S\275u\376\272\275\331\367\255<\300J\014=\324\2564\273S\222\217\273\035\265\205\275<P\241<\355\0141\274\316\377R<\337+s\275\332\227\017=\253\336\t\275\314\327\226\275\265\004\371\274\343\';={\264\240\275\254\004\026<>zR\275r(B=\010\340&=H_c\275\251|\035\275\313\251\263<W\023\265\274\203\3025\275\224\372\247<\213\310-\275\372\000\004\275\216J\217=T\211A;}\331\261\274\372\355\033=\0245\222\275\372\030;<,\303@;v<\375<\203\000\214=\223\210\205:\017\t\207\273\022\356N={\013\235\273#\034\270\273J\2315\275Z\255*=\014`\354\274\023\307\237\275FPp\274\325\360\022\275.\310\177\275\247\312\277\275E}z\274\017l\003<2J5<P\217*=\370\330\270<\202\201\020<\021\243\364\274\337\203\212\274\014\335n=}\253D\275\250i\222<\225\311\272=[\222\231<\356\313Z=\037\202.=\312p\025\275\211\275\272\271\364\244\031\275\245\n\365;\312\314\013\275\225n3\275\310\377}\275e<\026\275\336\327\217\274\304\305c\274~\322\250=\320\r\325\274\3335\302\274\237/\010\275_\214W<>$\321=\374m:<\332&\014=\013]\017\275\376\231\361\274\376+\335<\014\357\266;\220\214\322\273rF\005=\273\334\275=\356\313\231<\347MV=\n\033\243<\203\225\227=\2104\373\274\006\330Y\274g\345m\275\243s(>y\332\341<\360\024\027=\234+\023<\220\265\215<-{u<\353\340j\2740\317\231<\003\037\022\275\265\206\232<\203\271!<0S\310;g\260\263=\275\330V\274\310\356X\27403\270\274\210\\\241=\000&s\275Yv\r\274\220\234\237\274*x%\2751\320\242<\222\333\317\274|\366\301\2748a\257=Hk\004\272\n\210\325<CA\263\275\262\212\025<H-\320;\245\367\n=\376\213\032<!w\324=r@\334<\255\225\215\275k\014;\272E\244\207\273\307\234\014:\353\2729;Y\244\222=\376}\272\274\315:\315\273\377\320\316=\323b\265\274{\2035\275Lc,\275 w\010\274\355\362\371\275\003\312\021\273@\016\207<\210\362\213\275\366.\256=\0027~\273\257\231\230\275`\277\333<\362\013\367<\214\325\207<\3633\343;\200[4:]dO\273\362.m\274\025\251N<X\267}\274\204\302>\275 s\017\274\n\274\355<\265\034c\275V\231\021<\260R\200;W\305W<\320\323\331\274\204\212E=\263s\210\275\r\373^\275\270gA\275\234\363L\274\303v\250<\333\234\324;r\247I:rX\231\275ef\010\275<T\263<\"\034\243<D\316m\275\007\251?=\257\251\212=I\316\261:\271F4=\376\337\007\275\206S\235\275a\337\203<\177\2069<\025\016\261<\324F,=F\"\201\275\212I\235<[\nf\274\3274 <\036\221\233=*\2122\274\333\t\334<R\006\016=\201\2332\273\\\312\\=\021I\274<PG\001=\025\001\235<^\346\336<\232\'T\275 D\301\274[\346\234\274\t\330\013\275\007^\'\275\365\302\333;\327\372\007\274H\243k\274\267I\274\275F M\275!\270:<\226\220\244<Z\305\030=\241@\013\274\270f\376<$\002`=u\265#=\026U\210\275)\023\203<\2565\363<\202\312\307\275]~\253=\341\3104\275!vh<\352\355j\274\027\237\037<fk\243\275\377\320\275;\3500\335<\214\350]\275\027\376/\2755Om\274\031b{<\221\366x=\030E\355\273]\n\227<-u\243=\2172|=\373\037E<\355\006\350\274\002^\347\274\274\021\307<\203vX\275*\220\356\274S\233$\274\232\370\262<\re\342<OSX\275\233\313_<\252\263K<[\347\360<\200P\033<2\261\014\275\272\2539={6\376;\031H\257<Gu}=\334\263\022\275\017\301\306\2746\3730\275\264N\006=vt\'=d\211\332=\250\315\207\274D\311\177\275\374\302\324<\013\221\310\274\200\345\205\274e\020\222<|s5\275J\0373\275\245o\201\274\217\235\003\272)?\000<\006y\350\275\256%\034<\271\177\213\275\002\022\r\275\310\303\027=\311\363/\273}l4\273\372b\021> \010\202<\363Um\275\315\226\334<\274\370\255\2723\261\221\275\2510i\274\231*Y=\366\342\206\274\033\335\031\274\347\274\264\271\331\350\210\275\001\344\252\275\314t\254\274\304\201\233\274\256\314\023\275#\010E\275\362\2072=\313\314H\274y\267\317\274G-_\275\375\210\340<z\321J\275q\204\211\273\004\205\006\2753\321d=\256B\260\274\337lc=\021\003z\274\25534<\312k\370;\262\361\234\275.\014\216=W1\201\275\333\303\207\274\010\033q=z\236\233\274x0\330\274\347\301t<+\345\r\274\346\357J=\372$\204;\360*E\275s\037O\273\322W\r\275\302\212\340\274\265J\220\274e\000r\2745\241G\275,\307<\275\3479\027\275d\263\226=M]m<r\r\306\274p\267\264=\222v\207;(-\264<\312\315\017\274\275\363O\274S\331\320<\365V\'\275:\342\004\275\220\203\206=L\267\265<\342\016\322=\302\373o\275\027 \316\274\311\211m\273\216\307\305:\211\360\250\275\324&\0068[\026$\275\327q\217=\027\377\240=YQ\233<\365\264]\275\2722L\275\212\265\241\274\377M!=~|b\275\246#\343=\214r2\275\027\346\000=P-4\273\031\225]\274\030\304c=aV\271\272x\203\027=\277\212\n<Y\033~\275\006\207\204=\244\354L\274M\035>=\206CB\275l\375\353<\346s\217\274\210)\304;$\373f</\031\035=\240\265\010\275\264\311b\274Q\211\364\274\221\342\310\274/\260\003>\357\262e\274{\025\356\274\331y\023\274\354\350P=\364jE=\264C\253\2750\270q=\'\360\265\273\274J\341<OU@\275UF]\275\247\242\002\275\2079k\275,\271\003\275\340\247\254<)\037\376\274\225r\251\275=@\316;\277,l=/\306\363;\2628\005<\335\354K=+\355\246=\205\264\201\274\241\377<=\203\"\322\274C\335\341\2741\303\226\275\013\004\004\274\n\356D\275\233\241\177=\35102=\275\342\303\275\001\364\317\275\364\357z=\010\3629=\211\207\t;\252\3246=*7\021\275\302;[\275\326\230/<X\202+<2\024\323=\244\331\201=:\010\206<n^\275<\345\363\261\275\300\343#\275K\344z=\333\202\201=MH\311\273\254\240\361<\255\377\004=d%&\275\006\303\001;\315\324\317<\210\263\317\274\264)!=?\262\316<\205\3709\275\026\"\036=\303\260\010\275Xo\020=L^d=\001|r=\002\277F\275\225\350\354\274\247VD\275\272O9\274k\266\303\274~`\326<\246\352\234=\274\250\362\274\326\014\212\275s\003\373\274e\'\202\275d\312\212\274\365\362\244\274\323^,\274\300vs=\000\331\344;J\216\023\273A\277\001;\246:3=\260\216\023<\236=:\274D\276\304<Z\214\336\274\027\347g<lm\022\274\345:\203\274\340\202\356;\205=\\=\234\240\335<\330>M\274K\212\345<\t\362\234<\351<+\272+jI\275\311\343|<\320\230/<\000\352C\275\314M\267\275\361!\035=\005\325\0219:\345n=\025\373\270\275\210\322\351\274\030\r\210=\030\366\341<\257(M=B\201\273\273\224\315t<\"^\271;\372\353\353\2730tN=\257\312\017=\231\230\245\274\220W9=\037\rE\275\021r\024\275\224\357(\274\213S\027\274\243\370\026=\025\017Y<jo\226<\177\031\244\274\264\265\325<\200RW<\336\201\007\274\023\227\033\274\313\272\263\274/\343\260\274\r\333\217\275\316\204\241<1y\302\275\275\236\312<\240\2553=w\312\251\273y\243\324\273\264\273\323\275\317\010\266\275\244\305\265\274\251z\354\273Z\240\217=\236\374)\274U\353\017\274|\003\202\274\253\236\237=<\227\007<\r\023^\275F|\272;adB=\001\343\261=<\227<=\177\225\221=Q7\025\275\370\"\250\274{=t\274v\333\014\275\277I\207\2737\363\000\275\27338<\0207V=\306\237+<@P\334<\177o\216\274\013\310\265<C\235\260=2\251\256=\231P\233\274w\023z\274-\020\002=\363$\025\274\316r\n\275+\223y=2\354j\274b:\333=b\331\304\274\303\246J\275@A\240<\306?M=3\312\001=1\275$\275\"\232<\275z\016\020=\276\036a=\300\3605\275\275\235\014\275\031\304L\275\357M\330=\230\224\n=l\255\264<\217\237\244=\260s\315<\363#\376\274\223\016\031\275\003=\020=_E#\275\0215E<\312\262\032\274}%9<\253<\213\274\r\306\301=z\244v\275\332\024@\275a\236\022\275$\"\361<rG\004\275Z\245\017=\315\"[\274#<\346<\001\377$\275x\227\332:$f\\=vTD<n\n\014=\302N|\275<m\3359?p2\275\274\373W\275\000i\005\275\014\221\307<\357\330u\274\260\'\300\275\366\310\016\273<\322\306\275:m\232=\316D.\275\355\257U\275\357\374\234=\341&\217=V\3323<\321\256\311<\220\230\035\275\224\353b\275\206\020\231=\356\207\353<x\316\'<\317\224\250<<\277l\274\3319\353\274\244\353\t\275\034\300\'\275\276\273H\275k\276\240<\232f%<g\374Q=\246L\303<B\324\235\275{4\220=\254!\374<\312\375U=\215K\325=\270\213M\275M\334\206=\033\313\037=\240\016\203=H_\267;U\261\t<dtE\275\341Y\224=1\360\026=R\264T\275\274T\224\274\307\271\330\273\272\326\350<\245\002\207\275r\257\013\274\330\354\266\275\244=\232=\216Dh\275\370\213&=\241#\270\273(l\223\273b\320\020\275\36548\275\327:\216\274\202U:\272\371\302\233<\304\316r<\216\206\261\275\000\007\003=\246U\226\275\203#6<\261\252\233\274-\322\202<\265f\200\274\2146-\275\314M\027\275\235\002\217=\320g(\274\246\361\200<DUP\275\033\207_\274\237\252\033\274\354\316\230<:\270\215\273fO\330\274\':\035\273{\212\210=\332\007\224;\332B\316=;x\343<\366\307\366\273?e\273<\374\010C;\342\277\203=\316:\234<;)|=\321~\327<\311$\264;\271!\322\274,\\\206\272\256\323\254\274O\246e=\364\316\251\275G\332@\275\273OR\273T\2423=\330{8<)\025\367<\312\340\352;\232\212h\274\222.\033\275\202\346\311\274]\274S<^`\326;\360\230\266\274{\201\356;\002\366\203<\274\020\325\273Q\t\216\275\340lM\274\225\006\014=\311)1=\243F\333\274\0022\275<\315#\033=\270u\321<Z\205\305<\033\332l=\276~\006:\214\363!=\026\333\204\275_\226f=s}\217;\366C\367;\306\033.\275\247JD\275\t\377\233\274\003(\031=\267\005\255;\306\334\036\275\332\355-<\001%\353<\327xN\275\245\330a\274\0311\213\275\257H\003\275\354\312\317<\244\327#;L\231,\274?\322B\274I\306\313\275\244\255f=\346;\032\273JP\327\273+[}=\333\025F\275\350\245\020\275\241\264\210<w\312D;\301\201/=d^\221\275z\2744\274\354\352\242\274\302\301\003=SG\253;\365)\'=\031\331\010=g\224}=p1\242=[\327\273;\272PU\275\2573\216<\264Rj\273|:X=\300\376\302;cln\274\361O\013\275\357XZ\275\356\017\324\274g\347\212\275iF\006=\224\310\"\275\256\034\327<\227\336>\275\343q\014\275\020\344\027\275\232\330\306<\001\322\235;9~\247<-\240H\275%/\177\274Ap\007<\213\371m=\227\240\017=\200\205d;D8\036\275S\363#=\214G\013=+\006\261\274\014R\205\275\003\224\222\274O|\223\275D\243^=\376Yk=\340m2\275D\262A=!\322\241\2734&\277\275\246\264E:\334A\r<\322\002\231\274\303\007\261=\326\333\037\274\345$\222\273\235q\245=W\210\212<\317{\020\275u\201R=S\202\313\274\370hZ=\036$x\275D\234\217\275\377\232y<\232I\202<\t=\004<\351\337\010\275\010p=\274\336\362\032<\372\346\236\275h<\203\274\030\3602=2\226]\275\252\314V\274\320\225\342<\252\013\036<\212\tq;\021\026>=\000\033.\2750r\017=\005\237\177\275\370\333\026\275\325\344\343<\025`\321<v\221\241\274E>.\273,*\033\274fq\013\274\027\244\255=\370\034\350\274\2670\230=\201\370\233\275iB\026\274\3111E<yj\032=j\177W\275B\320}\275\2501k<\316\365\205\274\243y\222=\244\031\247;{s\001\273R&\240\274\255\242\206\2759\2517=+\224\215\275iB\263\275MUd\275V\223&\275\017\363\221\275\334b=\275\201eB=\no?=Bj\240\274S\272\240\275)A\002\275h\355@\275\2643\007=\2130F\273\215\375]\274E\363{\275b\260I\273\302sb<n\2373<\026&,\274\201r\343\274\210\267\304=\032\245\245<3W\227:7q\360<w\305\274\274\177\031\001=\202\337\207\275\273r\247=C0\212<\332\3437=\207\240\t\2750\004\313\274NK\240<\277\332~=\363v\333<\233\302\354<\243je=\207\316\257=\323\244\255\274-L\022=\276(\266<W+$\275xj*\274\035d<=\367\243\031;.\030\037<\333\323\006\274\312\270j\275\005(J\275\350\\P\274\255\263\201\275=\360\222=\212o\010=\260\367\\\275\351?7\275X\372c\274\017\337\301\274u\325\003=RQ\242\2735\325\342<\010\255k\275N\3372\275B\017u=u\021\273;m\215\216<{\254\033=54\272<B\037\231\275Z\246\242=\251]0=~J\0339ht\322=\007\211.=\202C\256\274\355{\242\275\365z`\275n\355?\275q\033\216\271I\207\2229A\201{\275\264\315\353<\265G[\275\336$H=\341i\013=#l\210\274\340\365\275=\261\226l\272\344wS\275\003\334\354<\353N\020\272\366 p=\211\264\263=\226+\237<C\221i\275\223]G\274\253\321M=\317\301c7\330l\005\275m\222\263;\335\'\216<\201\036\340\274\271j\016=0\346\213<n\314\035\273\222\n\001=M}\000=fhL=\236m{<~\243\311\275\316~\240:r\021\314<\342L\200=>\256-=IN\352\275\347\214%<\220\350\010\2753\013\336\275\237w\\<t\215\253=\303z\214<[\220\274\274\371\2654\275\300O\351\275\tR\305\273o\326\261=\276\370\300<\221;\322;\252/\244=\306*p<|\321|=>\367\341<\230\367^=\233b\372\274\037_\275\273\\\377$=\314;\346\274\206\370%\275}\002J\275\221[\035=@\233\215\275}\365;=\027\254\016=\000}\201\274\t\317\377\275Y2\221=n\3625\275C\230)=\351F\272;H\201\365\273\302$\207=q\0035\274T\035F\275\014z\235<\'\212\337<\334\004S\275\261\351|;J\367\257<t\323\320\275\212\245\264\273\367\210\216;\316\363\n\275H\230\364:#\237\373=\341\356L\275\023n\'\275i\342D\275\344\0037\274\310\326\367<&\2514\274\017e\255\274\236\030\004\274<\000\"\274\257\026\030<q\234\201=w(\230=\315\022\014>\016\215*\275 \235\234\275k s<\036\r\226=\014X\300\273I(|=\002\262\234=\004\250\340<\361\221\341;\345R,<)o\037\275\377J\272\274\036x\357;\371\371\216\274\311\247\354\273\n\201\327\274\351\350\357<\332\347A=\265\311\212<\217\363a\273\222\242j\272$\205U=\004{s\275\203y.\275\246\354\376\274:D\004\274\245\020\335<\327\332\216<\225\2160\273/\237D<<N\255=\315\0317=\323\350\211\274R\376\200\273\217[\206\274\247(-=(\325f<.,Y\275Ll1\274\013\203\220\275\373e\316\274\264w\274\274\032\010\205\273$\325\257\274\233\265W\275tJ\246\274\2117u\274\351\312\205=\233\300\025\275\300M\003=\2108|<`\020\205=\233\2337=\337h\317;\317\332\302<8\330\007\275\300\\\216=!\325\363\274\270-\360\272j_\340\274\272\324\224<f\215\227<\020\254\216\274\225\303\236\275.\233\302\273#n\230=\243n\256\275N\355?=\204\220\346<\316E\001=K\235i\274%l\030\274\007\261\234\274N\020\315\275\274\352\\\274c\320\242\273\350\235U\275\035\003\255<\227\310\022=\\s\261<\t\033\353<\353\2742\274r~\254<\374c\230\274Jf\214=p\327\205<<\rl=\236\016\267;\250\273i<%\223%\272\366\263\317\274\211\332\335\2756\'\240\2721(#<\350u\036\275J\254\2158@\356\207;X\370f\275\351u\242=\257R\247\274AE\347\274\367y\215<\033\3112\275\261\203\207=\274\242\216;2\363\035\275\033O`\273\227\331\351<\'\265p\275\203n\r=\001y\202<\"\315\261=\305\264\253<\277\221\211=\304\376\207\274\215\331\366<\316Z\333;\'Y\202=\231\252\354\274\0078\316\274\"\324W=\243\005\247\275\333\322\265:\315\010*\275\225u\225<\263\237\275<\344\030\023\275QU\324\275\237\3252\274\007\n\200\275Y:\256=&\204\244\274t\362\010\275\310I\301<\223\364\020\266\266\016a\275\375\230\305\274Hhr\275\307\200\343<\337V\312\273\027\207\026=\315\217y<\330\323m\274\313\0065\274Sl::\232\240\224\275\251>\357\275\004\363\310\2758I\267<\332\375\216;u%\235:<b\275\274\037_\324\275\300g\267\274{\225\207\274\014\273\323:\t\342\226\275n]\260\273\315@R=\310\004k:\030\000T\275\371p\264\273s?\204=\r/\270=\307\017E\275/)\030<m\247\023\2753\370\304\273\300\024\'\275\327\216A=W\240\236\275\315\ra=<x\216=X/\220<4\301\310<\336\212\217\271i\311\000<\241\256\023\275e\361i<\232YV\274\315\364>=\202*\204\274\275Dm\275X\360h\275\002:\240=\0203\205=\270\353V=j\235U<\373n\210=6\245H\274\232W0=I\322\325<\265\255\002\2749\350\244\273\215\212\335<\222\320Y=a\342\232\275\276(<=Z\3549\275\211\250\320=\246\200c=gj\030<|=\260<\267\007\315<\244\2139\274\330\271\331\273\214\312S=\272\326I\274\377(}\275\200-x=\001\253Q<\204E1=\3064j<\215\256?\275\201\206e\275\005\263L\275\276\201\302;u\025\000=\244D\361\274\031\277\212\274\203\275\244<\355\324\336\274\215\227\364<\023\234\225\275\243\373\255\274!^\014\273nZ\231\275\337\210\000=\227\331\304\274\234\034\347:\322\033:\273\271Ji=\374\254\253\274\260\"\305<1J\212=\226\354\024\275\222;7\275\314\004\006\274S\226b=g\342K;\226;\317<I\0226\274C\336\213= \3149=.\001\272\273\357\033/=(@g\274\317\345\233\275gs\226<\234\021x\274(9\237<\343\254\021=\357\322)=\003X\346\274\315y\221<\336\257\237\275N@1<\356\335\314<\007\260n\274\311b\246<\003\3217<F5\277=\021\004\377<\376uM=\263\3338\275,\377\037\274\343\026w=\226\006\256\274\214\366\344<\231U\320=s\021\020=\215\2607\275B\355L<\266\201\237=\022\027\230=\236\266\212\274K9\344<\260\016\246\274\243\241\001<]\331\006\274\000\347\355<\274r\217\274BA\276=&\255,=\014R\260\271\264n\313<\277\"\223:\210F\010\274\016\272\212\274\266(\211<G}\306<\204Mu<\033\305\373\274\325|\025=\250\2112\274\322\243\204;\221u$\274\276\326\"=(V\362<\357\302\311<\003\nx=\317F\240\275\3601\241:+\222\222\275\205\331\320:5)\027\275A\352\336\274\356\010\216\274\n\331\353\274\340\306\266\274\r\023\364\275\025\177V<O\222\016=\272\',\274S4\216\275J\222\252\274~\266P<\250\336?=\244\010\200=H{4=*\330.=\327\325\230\275\276S\026=\226\252\233=\'\230\030=@dA=\3244\231\275\r\251\302<.\372\243=iW\350\275\267?\371\274\n\255>\273\323^\233;\360i\006=@\346b\275\305\221\361\274\331\252|\275\022<9=\313|\031\274\202\237?;\"\302\014=\004\360Z<Q\213\363<\023?$\274\371\341\264<\003\316U<_\0168\275\265$G\275\n\266.<\363u==.\017>=\230\236\265\275HA\351<\272\013\260=\374\370\244\275 \376\241\275\345\300\r\275eb\302\275\303)\216=\326\323v\274W]Z\275\026H\305\275mnK=smv\273+\356E=E\200?\274d|\2169?\001X=qo\3669\352\\X\275\232\204]\275\243\023$\275X{\367\275a\007\214\275+\365\000=E\353\037=\327\376\304<\2517i=.+\237\273\026\033\263;y\244\337<w\3204\273w\004h=y\326!;\031\035i\275mU\355<[\373\215\274\264(B=\324\337@\275\003\376i<j<!\275C\354\373\274\026\215\275<\000vd\274\316O\020<\365{\277<\014\363L\274\371\270\246\275\346\256\007=d\235t\274\305\247\027=\321^\317\275<\007+\274j\263\346<\364^N\275\020i\023<pPH=d\376g=Ea\223\275+p\244\274O\301\272=\214\321P=C\307\036;\216m\030\275X;\017\275O\233\314\274\327q\251<\332+\211\273\314,G\275~-\367<\216\021\357\272\316\230w<\263j\021=\206k\366<\203\330L=\353\305\353\273\347\017F=\200\002\010\274Q:\327<+7s\275\177\261v\273C\353\273\2741\341\306\274\005k\304\274\215\027L\274;,\026\275\025\273g\272\340\002H\275t\020\310\274\372;\026\275\257Q\311\275\365\274E\275?\363\316<\276\241\220=O\207\332<5\312\024\274\001\363\240\275\246\366p\275p\371A<\270)x\274fVn=\033\215\346=\323\373\"<\313\260)\275H{q=\302\201\013=HCV\275\317\342\263\274G5g\275U\003:\275\224\034\010\274\265y\251\273D3 =\243X\036\274\225\037\337<\005\374\310<?\350s\274\307\226\311\274X\263\236=!\341\020;\220\026M\275s\341k\274^7C<<P6\275l\266\020=:\327\261=\022\025k=\202\221\301\273o\321:\275\206\322Q=\007\342\317\274\031\230X<x\353d\275\376\313a=\372\374\302<\031]+\275N\205V\275\014\330\375;\333\334\013\275\'L?\275\261M\256\2758\335\177<!\344G\275\\\3424\274\240z\034\275\025\315\343<\264\366g=4\232%<_\337R=\016\257\246\275\200XP\275\236\314\247\275L\2631<%\336\261\275\027\302u\274|Y\270<\310(}\275\301\227\257\275- >=\217@\213\275\276M\025=\254\303\002=mV\227;\2709U=R\227\334\274\202\215\006\275NQ]=`\034,\275\351\002<=\327\221\003=\006\r*< \025\016\275\303+r<5s\t;9\313z=\033\016\n=\370\300\373\274W\r\217=`\210\225:\201X$=\335(\257\274\016.\347\274\251o\325<\024\202,<fu\377\274\346\2333\275\021\2000\274\306\002N\2759\207%\273O\373m\275\322\326\215;\3275\220<\034B\035=(\267\204;~\311\225\275\375k)=\033\301%=\372\320\215=\335[Y\274!\314\004=l\024\'\275\350\213^<\336\360\242\274%I\232=c$\226\274n\213{\274\323\3001\275 3x\273\017\030v<;f\241\274j\017\254<\0027\234=\230O\005=\251I\370:zI\211\274_\334\025\275\366\265Q\273\374n\371\273=_f\273\364\024\235<\000\360\245\275\200-\215\274x \264\275\367\323\353;\260j\254<L\247\004;7ou=X\'o=\022\316 <\272\206\032=\240\327\222=\007\265J\274\212\033\n=~\223o={$\031=\243t\223<n\375\021=\315\365a=K\225\233=b[T=\2031\263\275<\325\371\273P}\022\274L\206e=O%\252<\323\337\027=\262) \275B\364T\275\036:\334\275\236\340\314\273\243\230&\275X\323V;561<\311\273\307\275\326\246\314<~-a\275\021r\303\275[\354\240=9\216\212=Z\377\343\273\n\342\245=6_\214=\266\366e<i\202f;d\203\021\273\342hy\275\255\351\216;p3\316=\244!p=\232\245\303\275\243\017\247\275OF-=\301\257\017=5$\276\274\363-N\275\036\250\234<h\317\366:\004\321\333\274Uj\301=\200\272\017<\007\323\201\274\017T\035=\354\023\334\274\232\226\342<\323\335\213\274\303?\202\274}R\320\275V`X=,@\034=\350\376{:\334\004\004>\364f\037=\246\2217\274\300\034\345=\212\333\265\274Zy6=\323\027\260\274\343\300\000\275m\377\250\275\262\321\314\275*c\2729y\310!<\362ZQ=n.~=\313\234\244\275\n\351A\275z8\212\273t\230.\272\370\217\211\274\343\006i=q\337f<K\371Z\274`2\321\274\262\302\262=$7\263;2\276\006\275_<\233\274\367\272\376<I\016V\274@\370\326<\213]u\274\303c\007<\277\t\252\275)\271y=\021-^=s\021a:\031\311\r\275\2120\361<\312\340\264\275E\270W\275\240md\275\213WE\272\342\270\202\275 \035.<\333\354\216<\277\3373<x\300>=\256?i:(i\034\274\227\rk=\205\177c\275\372\216\320\273\007_\275;h\326\200\2750\t\255\274-\360\002\275\021\241\255\273\034\307\252\275w@\332;(p\260\274p\313\241<\316\275\032\275!A\212\275G\243\307\274@\273T=\252?\027\275\350GV<z |=S\013\332;[R\374\274~\251<<\276P&=\344\246\356\274|\037I<\177d\364\274\247Z\260\275\2677g=\230\255\360\2745\340\014=\026i\360;\201\347X\275\035\023G\274\001y\221\273\3078\272<\313&U\275\321\007\n\274\330\000\217\275;\010%\274T\004\322;\227\221\231<\357\377\250<L5\016;%$\212=p\021\204\275!\002\010\274\334In\274il\235=\"&a\275\033@;\275\324\304\274\274\037\000\313\273H\320\270<\263\002\204\275@\311n\275;(\\<wF\213\274F\217\013<r \232\275L[W\274\250\264(\275\235(\277<\220\236\204=53k=o\266L\275\221\250\037=\301xr;\365v>=H\213\265<\321\231\250\274\255\214\024\275\255\220@\275\3305B\274P\014\251;\227\376F=h\233\354<\246\265*=\307<\256<\023#\240\274\352\337\262\273W;\227\275\032RK\275\336i\341\274\376\256F\274L\355.=\261,\320\274\262f\010\275t\006\004\274\315v\257\275W\362\272\273:PN\275v#\010<\307\335\323\274\251/\007=~q\224\275\r=\027=\371\2156\274\327b\252=\303\016\232\2738\330\031\274\206I~=%\037\240\274\323Y\006\275R6K=\024F\323\274\311\307\254\272\242\345\203\2755r\343<\255k\267\275\177\314\315\2746\275\177=v\251A\275\272\376\306\275\362\000<<\010\2379=B2\r\275\203\'\333=\233\3272=\304t\274<v\313\016\273@\354p<7\022\326;\342\203x\275\247\036l;\277\0358<\222m\223<\263\271\256=\010\270G\275WfE\275nQ~\275G\221\201\274w\350\203=\260I\026=\351\357\333:\300QN\270\272J\310\275\305\330*<\013\255\262\274S\222\307<\r \226=\256\256\221\273\245\021\251<H\347?\274r\366W\275T\252\236\274\364\204\312\275}h%=\263Wu<\177>\022;\263\016r\275\227\231,=\306(\334<i`/<R\013\201\274<5\327\274\331\203-\275\313\225U\2753\314P\273\371\003\311\274\245\027\333<\341\265\017=\\\001\250<\267\210\366\273\214\374\362\274\315\r\022\274\260\003\3619\275.\t=L\366\311\2753~\252\273\030Xg=3w\373\273\206\236(=\305\r\362\273\013\017h<\340\236\250\274\271\324\234\275P\305\035\274\2629\200=\333\266\260<N\366+\275x\366\266\273F\256\265\272\221hk=6\\\304\274\271\227\037;h)`\274\246A\036\274\010]\017\273A\272!;\272X\252=O\017\207\275\241\316\324:\274\312\317\273\032%#=\234\344L\275\200\201\305\274,\362\270<\243\r?=\344\352C\274\203_H<5\317\374<<\010\304\273\373\021\004\275\017\267\004\274_\021\335<\300\366\232<)\215\311<\3377\217<\317\003\334\274\315\026J;\237W\210=+\351\240<\036b\256\274\224\037\276<\366\371\030\274\366\\\320<?\251\323\274O\234\024\275w\310\272<\321\321-=\233D\231;\241\311\227\275\027D\315<\007w\300<\250d3\275#=\331\274\233p\207\275G\021N\275\210-6=+\271\023<\200\036\341<\225c\243<J\307\275\274\000\203\361\273\336v\325\273\"\367\032\274\004\312\247\275RF\262<\213N\326<P\310\353\274\272\262\354\274\321\241r<\205\245\024\274.\031a\275\357\350\235\274\266\010|\273\343.m=\336\272\236\274w\374z=\304\326\321\274Cf\005\274\231\t5\275a\271\000\274\204n\257<A\364j<\241\343\026\275\035\033\005<I\241\215\275\330\364#=\346\001\317\273$\367\215=R\345\251\274\007\300\223\275k\347E<\2260\\= \364\332\273\305U\257\275\226\344\025=\246Q\270<\373\234\252<I\361\302\275\341\321F<bw+=^wF=\010\3541\275\016f\026\275\024\206\315;\224a\234\2746_\337\275%A\276\274\325\336\252\274\307g\327\274\234\366\360<\013\372\214<s\243\244\274;\000/=h\341(<\302\2344<M\261\235= \352\035\275P\300\251;J\231\221=\200p\226;\272\2363\274\333\2429=\255b\214=\306\236-\274\211\3133=Y\274\236\274\354b\034<\373\2078=\265\021\202<{\014\006\275\237\001(;&\354\031\274;\212\343\2740\324\330<\272\356=;\017Kj=~\217\236\274\277\240,\274\301,\265=\334\275\203=\026\305\302=\350`\252<\354j\250<\022\371/\275:^ \275~%\234=\213z/=s:\034\275M#\245\275d*\271\274\026\357\211\273\315\375C\274\233\017E=\275\261\003>\2540\313\274\305\022\247<\345_\367\274nq\337=\232\020K\275\231\245\205<\241\243\357\273\376\305\221<\271a\201=\256o\327\273&\236<=\223Z\211=\322A\271\272\270}\002=\375\307X\275w\313\223<\235\213S\275\034w\2079@\335\202\274\203\023\036<\253\352\241\274\267\361>=D\r\205=\300\221\355<\220\215\253\2748\344 \272\264\216\234=\301\247\322=h\265\\\275\304\017\275\274\000\342\212\275\200 %\275\037\251\254\274\177;^\275\277S5\273\001{\217=:\341\245<\027\014w\2752\232\354\274<[\016\275m\307e\274zd\036=\0176T;\250\240\000\275\345<k\275\223\273\243\273\235\220\216\275\257p>\275P\347\234\274Q\232X<\242\342\035=\305y&=\336\223K<pG\"\273\373PI\27527\017\274\372\267\314\274bm\332\274O\302\321=\033F\247<\212\305\202=^2\304<5\004\250<gI\312\275\245#{=h\255u\275\200\'\300\273\274\261\275\274\220\026\250\275\261t\272\275eF\201<,\277%\275\267\344\206=\'f\035\275\243EB\274\233\347m=\245\300~\273\2160\t=\227\242u;\326\022\261\274\025\205\017\275C\3771\274\335\317k\275\200\312i\274\n\343\243\275g\263\321\274\346y\216<O-\325=\\2\351<J)\335\272\311\320\000=\312\330\034=\264\316\305\275\314\356G\274\227\227\n=\034F{\274\2507{\274yy\037\2746\317M<\201\321\217<q\001\241\273\320J&\275!\214\303=\005\357q8\234\204\205\275\315g<\275r\036\020>\273\350\270\275\307\003\302<<\205\005<\304\377\317<\207$\333\2754$&;\r\007s=\"\037\r=P\302\354<\267\236~=\306\2735\275Ou\235\272\026dR\275\ngQ\275r/\353<\225\037\260\275\355\255\236\274\221\220\276\274=)y\275#\263\010\275b\203G=G)\222;`\013c<\264\237\356\274\203\264\270\274\373\307\037=\002\341\247\274_J$=\325\013\202\274\340\202\262\275\233\':\274\221\210\377<\001\221O\275\325\017\235\275\346H\207<\343N\261<\333\346\261<\275\020\240\273\025L\315\274\352\321D=\315\341\210\2743\214V=\202\306\205;\033\335Z\275\242\247\322<\014?\016\275B\372\211<\020\360\3409\350Lz\272\"\020a=\342\216\247=\331L3<\211\231\324:\024\337\022\2740\010\371<u\013\300\273\345\327\253\273>\232+=p7&\275\316\207\t=>\256\223\274\357\2000\274f\204\3049\237\363t=E\350\244<\034,\016\274\210\035\304=\253\267M=\327Lb=\335o=\273\344\301\267\274\0073\006\274\300\237\323\274\2768s=\253K\005;oab=\005\2357=\025@\206<44\207\274\220d\212=\202\027\315\274\212\244\242\275#\341\252\275\343\327\301\273\0331\312<\004g1\275q\260\303\2740\252\235\274\371\211\002\275\363%G\275\344;\237\275\224\241+<C\2146=|\305\354\274\246_\221\274\0238\242\274*\275\215<\221\200\205=\222ro;_\035H=\022\257\323<\002\3437=\237\204(=5\313D=\\\276\n\275-\017C\275\323V:=O\300\211\274ghC=\271\217\241\273\035gr=&\r!\275L\220\250=\030\313\376=\360\211\332<\224\014\r=\257\204\243\275\252\316:<|\327L\275\351\3501\275O\256 \2743\201\321\274\024\200\256<@H\227\274\334;\002=\037F}\275\017fM=\255\211o\274\330M\023\273\255\017\322<\371t\006\275Z\322P\273\203\361/=\235~\202;\361\364\032\274\3433\317;U\225\255=R\370~:\207C\336\274\312#\275=\207u\321<\"\334+=1$\032\275\216\270h\272\210z\317<\270x\014=#\371y;06H<\243Z\236<\275\371$\275\357\321\272<C\035\233\274\354\225\225\274\213\233\031\275s\337j;\321\203!=G3\310\274S\243\r\274T\004\260<\"9P<N\275\305\274Ai\356<5\316\365=\303Qf=X\377\022=~\224\036>\322\252\225<3\366f\275\035\024\316;E\014$\274D\330\256\275\247\355Y=\027\2474\275\351\372\300\274p\037\200\274G_\037<\355p\026\275\260\320?=\250\255J=\241r\213< \250\017\275\317\251\014\275G\204\254\274\306DO=\353\243\013=\323\321\220<\300>\210\273\315\350\005=\215`Z<\r\r\021;3&=\2758\266\252<\345\264\353<\r\324C<v\355\'=)g\323\275\257A\373\274\274\200i=`\310p\275&\327^=\003d\342<\326rm<,\006n=J\310j=2\374\336<\220\262\261\274nS\3139\005\022\250=Qf2\274\331m\035<\310\377\315= \014\272\275\375^/=P\313\205=i\314\324\274\340\036\317:+\322\215;\324\246\370;+]\332<\327\300J\275\323\362C;\0145\212=\"\2700<\306\213(\275\372\225Z\275\230\373\370<w\202\036=)\326\r\274\303\332^<\000*\014\275\233\206\217\275\230\330H=\241\2665=h\2548\275\212\346X\275\323\2034\275\r\211$\274\327\014\n<pS\274<C\275\034=|\255\364\274\374\227m<\324\001G\275\354\'\221\274\313d\317<\236V\310\275.\306\341\274\221\031d\275*\241\227<\256\276\333\275\232D?={1\021>\234z\324<\371\311d\274\373\273\003\275sk<=\253-\036=4\274\252\275\205\376\262\274\231-2\275\203\364\271\272\200\333i<\340\333\\\273g\263`\274\363\300\277<\301\251\355\274Y\026\301=q\346\261<^ R=N\276~;\010\340\0068\314\271\227<\214\024\005\274\272{\266=Jy\226\274i\1770<nWR\275r\320\214\272\021@\376<\200DP\275\311\320\'\275\356\352\000\275\013}\221<\311&&=\0262\215=\244\205{=\202\026o=\312\237e=\336\343\214=\375\317\334<z\363\'=\321\376\236:\236\302N\275\016\331&\274\317{\345;#k\024=\356\035\251\2737U/=g\211-;\266\207\034\275h}\035\275i\263\315\273\251o[\275\250\002\235<\276\027\373<\006\325b\274\240\036?=Jc\336<\004q\326<:\356\013<*\210A;\235uF<W\0228\275>\343\210=\323\215\226\274z\211\247\275:`\354\273\2200\321=n\016\341\272\225\254C\2745>\364\274\260\337/=\245\037l=\217\216\227<[\367\021\275*xA\275\337\034\010\275\327yt<m\300\000=\220\016\227\2758t<=\027_\346;\t\274V\275(j\223\274\214\374\211\273Y;0\275Zr6\275\227\343p<\374\340\360<$@\252\272\r;)\275\273\307c=]\027\n\275R`&=|\264\210\2759k\344<iHx<e\300D\275K\235\271<\272g\206\275\302c\021\275\002O\336<&\026\006<\2706\271<A$U\274M\006e=\032\272\235<\255\3138=Sa\324<r\257\310\274%\207\321=\0335c=T>\213\274!\241\312\2738\333\324\274M\343\222\275(~\022\275wz\372<{$\326\275Nz\262\275\250\244\021\275\027\314g\274)v%\275<k0\274\254\\\331\274\033\273\325<)\001@=<d\217\275\206\023\244<\017\214:<\244p%\274\237\321@\275\354\016\327\275\312\337\t</7\260;\003\265\217\274\304\345\001\275.&\313\274\231l\243\275\342\266@\275\033\353\t\275! (\275\366\033\342\273\257J\207=\225id<B\355\"=C\343b\273t\252\323\272cZ\030=\230\033\202\275\276#x\274\203\252\336<\177\013\232\274p\366k=\304\247\262\274\002\302u\275\241\212\006<t\031\243\272\361\237\264=(1\236<\241iw=\350\035\037:\225\352\200\275sl\215<\373\306\261<\335;W\2754\221\341<\303\270`\274\007R\331\275\330\032.\275;)Z\275DDX\274i\034N\275\317\\p\275\366w$\274\210\252s\272\213\2412\275\002[U<n2\376:\204\314\262\274\351,\017\275\220\372\303=\276\234(<\236\037B\275\331\003\356\274\376\204y=d\3566<F\320\222<\226\253\n<\377\247q=\327V\016=\217\024\266=!\343v\275p*A=\352\271\274\273\037\376\214<F\017\344\273\265A\200<\204\364\361<\212\270\341<\"\346\232\274\0258)=\3066\002=\226F\322;Z+\225;m\177\235<\230rF=\032\205G\275\226\004\'\275\302\021\017\275\215\312\030=\326\273\225\275\213r =\377\305q\273G\364\255<\346Zj<\220\033\017<dBa\275\275\275\261\274\326-Y=\253\010P=K\017\033\275(\035\323=\347R.;\3203\006<\361\352\341\274\273\220\277=\326\375j=\014\227\002\273\341|u\275A\016+=\251\0360<\360V \275\317\313\373\274\230\271\273\275T\3134\275h\256:\275)S\\\275Z8\177\2749\340-\275\253]\242=\306\274\026\275\0310\000\275\215@~\274<\274?\275\324\000~<\237\000\225=<\305\366\274\346b\356\273sI\262\274|8\231=d\305\223\273k\200\273<\001\216\211\275B-A\274\204\232\364\273\303\255\260\274\343\376-=8G\205<Y\355\000<CJ\371\271**\005\274\013\333\370\274\252\263\034\275\374\276$=\000\021\327\274:\206\231\275\217\327\005=\t\325\305<&\271\001\274:/\246=\273)C:\037\023\346<\374>\271<\207\010 ;\321z\230<\037\341.\275\253+\030=\212<\033=D16=\260\r\025=\313\376\217\275G\r~\275\275l\237\275\261\312\303<I[[<\375\021\202=\205E\024\275G\245\223;x\301[<_\215\266<\305=z;d\207L\275\301\274I\275\001\020\023=\004\031\004=\205\002@<7\206\216\274\313U:=\275\313\'\275\277\364\331\274M\2764\275\207\013\215\275(j\331<\007\246\222\273\0263\010=Y\210i\275\332\277\353;\220\352\247\275\306\032\222\272+\222\320\274\366xI\275\021\"\355\273\221\201}\274\370\030\222:\277\360\027=\330\033K=\345\304\213\275\214\203\022\275Lc\265\274\326\306\254<U\252\317<\223\273&=fX-9\364]:=M\032\"\274<af\275\207Q*=O\202\316<\373\312\003\275\343\271_=k\367\251\275\224\327C\275\344\330\373<.\322\337<\370u\030;\324\035O=\311\nB\275\211\256\217\274\234\016r;\312\013\t\273M\201\r=Y\270\315<x\255r\275\331T\007=C\246\333;\361\345b<\213\252\"=Rz\002\274_\230\276\274AR\221=l\224\270\274\342\305\270\274N\341R\274\007f-=\366\374\261\275\311&Z=\220\305\234\275P\275w=E\255\201=\367\252%=\001\3438\275\252\342\264\274\240\274\237\275H\364\311\275\355f\227;m\322P\275B\034H\274\325\324?=\300\026\214<\202\365\331\275U\256i\274\224\227\3519\313\216w\275\024r\177=q\362\255\275i\331%=\216\356\271\274(\324F=A\311\200=Lo\206<\223\305\010=D\264\314\274n&!=S\021\263\275\255I\247\274\244\334q\274\215\253\234\275\002\006\270=*z\306\274\030\247\247\273&\377\000\275g[\375\274\257$6\275j\322m\274\271n\206=\216\350\007={?\213=W\353%=\273\376\036=\027>\264\275\220\353<<\355\0009\2742Ku\275D\"1=\304\nX\275\245\324\034<9f\035:0\326c\274\266\301\303=;X\000\2759\207x\271\347g\245\274\367?0\274\003\010\232<\300\374\200\275h/\232\2743V\260<\016\313\323\275\250\006\t\275\3458\254=\013w\232:\215\270\001=o\360\010\275R\227z\274\234f\315<\274\337\202\274\252\370\037=.\344\004=\026C\033=\334\027\237\274.\206r\274\214\203\215\275.\314\237:\377at\275^OY=\271\311<=kl\375\275\334\220\205=\236\255b:\377Rr\274\325\371\375=;l6\275\356\277\260\275#\220%\275\311a5\275\021\004R\275h\r\021\2756\002\245=\26789\275\0271\223\272MH\261=\0032\032=\325\031\244=\360\347]<\277X\210\275[/\224=5\256F\274\021m\350<\210\224\231<rR3=\222\252I\274\225G\237<\231\272\021=l_\263<D\200\014<\247\233L;1\205\247\2758\346\241\275\211\372\007=\373\t\311\274\027q\231=E\035\375<<\027\333:\225&\320<\2721\377\274\371\352\035\274\336\\\003\275\260\205\220<\022v\'\275ZKA<\261\335\'=\270(\206<\244\203\020\275K\t\333:\037\371\206;e\242\000\275\2066F=\036+\323\273r\327C=\'#\225<\365\361\214\274 Y\025;B\306\264\275I3\363\274\343\t\202\275mAx=\276qT\2749\200\363:3\027\316=)\026\371<1P-\275O\375\375<\031A3\274\0240V=\0355\326<\303\366\014=hc\023=\233w\310\273\010\246\312\274Z\274-\275k\022\026\274\016\276x=\327Av<\216\261{=\260\3471\275X\035%=\312\231\004\275\022r\311\274\226\355)=z\214e\275\216\022\000\275\322t\202\275]\347k\275\3003\037:\001\010\224<\340#\253<L\023\247\274\241z\020\275g7\003=\220\334\361;\337k\331<y\376o9\027\353\033\274%f\214\275t\303\327<&\214<=\347\253j\274N\225><\225\350-<\036D-\275i\212\252<\337\224V=#\373<\275\032@ =DA\323<\262\030\n=\035..\275\245\371\r\275!\033\014\275e/\200\275\232\351\230\275\2648+\275$\237\005\274\320\365\353<\352C\345<2\203\330<M\367\224=\226Fy\274\272\374\252=r\310\251\275\223\225\024=\374\031\030<Nl\005=,\361\013<;\243\253\274P\344\000=\2632\260\273\342\246\340<\236K\352<F\001\361\273\254\365\336=8\346?=&\205\006\275\254H\217\275\334 \211\275}k\350=\257o+=\357\355\3359y\307\271\274-\344\305\270\010\241*\275F\014\344<\316\317\361\274e\206*=\347\330\265<\372)\031=\210\346\306\274\005\252\246\275\032\371,\275`\2022\274\373iJ<\312\002P=\273\357\n=c\337\362\274*5\243\274\017\003:\275}-\244<\345Y\\\275\000\356>\274\214l\004=GB-=\3674J<_9\210<\261\207\230=\014\305\035\274\005R\177\274\240U2=N[==i\257;\275y}\025\275\362\032\235\274K\231\253\275\0172N<\334\303\334<\024\303\006\275\240F\271\275Z\034\302\274\234KH;O@_=8#~=\304\327!=\243\006\252;\005\315c<\326\233\324\275\005\241\373\273\332\357\031\2755\231X=\332\222?=\006s\333\274\366E\003=\213<\214<\"\213\204=\253\3243\275\353@\273=\323\177\260=e>h<\212\006\337\273\000\260\021=<W\014\275\333e$=X\272\240;\224}X\274\005\203g\274C\036\226<b\033\335\272*\021M\274\366!8=\3707\230\274\211PR\274\352\365J=\222P\007\275\372\256\246=C\210#;\373\275\002=\020\237\364<\231)\304<\204\027\300\275^\260j\275q{\003=\334\236\261=\027\243\217\274\035&\341\274\204\224\013=>\272\274\275\326\212\314\274\246\367c=BK\307<\345\313\242=#@\025=\014\373\331\275\323\020\265=\364\034Y:\223\235\263<\266\246\204<\311\014\177=\325\352\232\274\026\200\'<x\373\200\2739\217\\\275\236j\001=\316\344\233<\264\037)\275\270\234\246\275-\274G=\345\325\364\2744\317\204\274<\"\356\274\315\006\267\274p\031\023=\n }=\317\224\220=\331\235\206<\231\206\241\274\360y\251<\312=\001\275\306Y\007=L@\253=t=\362;cT%\275\240%\246:7\001\330=\262\210\237\274\261q\316=\273\242\256\274$\323\014=&\301$<\201\007\233\273\025J/\275\322w[\275\326\205b\275K\3077=\235\232~\274\273\022\304\274k\254\360\274\000#\242\274\2357\362<\265\346\320\274-)6=\225B5<\005g\200\275\366\245\344<Z\306\371<K\304^=\254\211\212\274\331\356-=bm/=\312\017\221\275\017\021\037=\367\216C<V\232\221=\245/ \275\023pn\274\257^\036\275\353\362\225\275\205\t6=\304>\000=\340\020\005\274\236\265\276<?\374\370<\301h\027\274\312\326y=;\373C\273Cg\030\275b\016\227\273\272\3063<\312\273\366\2748\360\001<#\3175=\375\231T:\252V0\275\013\016\207\274\037;\201\275G\3765\275R\367\021<\312\032\212<\307\225\242<|C\303;,~O=z\333\274\274\246\355\313;2\'<=o\3147\275\235)N<:\2602\274\245rg<y\265q\275Cj\325\273\373\373\225=7w\271\274\266YX\275\377\034\321\273~\226i<=o\215\274\241\362-=\216\027\251\275I\260\274<-\323\213\275^\362\265<\364\204I\275\027\257\003\276\177\260\251\275\002\024\243\274H\322\001\274\251B\300\274\326\224h\274\247$:\274B\223/\275\354\212P\275\341\335\013\275o=X\273_E\003=\326\007\207=n\037w<w\243#=\257\246\233\273\024#\200\273\262\202\226<\247\342\320;A\300j<4=\215=\203w\204=\212\177\210\274\362\010\030;\332\021X=\t\360\205=\213\2773=\314\212\254<\024Gh\275\264\014\'=\001\335\260\274\255mJ\275\177\206;\275:L\234\275\376F\034\275+w\003=\304\270\262<\270\235\227=\223\027g\275\000w\010\275\366wU=\275|\336\273\220\246C=\231I\247=\274\201\302\273L\341\313<\350\037!\275\247`\021\275\211Q\306\274\211P\371;\237\255\371<\350a\364\274\315\316\223=\023/\213<R\'\220;W\263\265<\313\251u\275\361\201e\275(a\021\275\260\201\366\275dd\257\274J\267\242<\215\016\337;FF\350\275\265\310Y\275\324\273\020=\311\355\315\274\310\334\025=\226\353\205\275\316v\027\274\213\330\006\275\370\265\001\274\203\231\230\273\376J\232:R\337\000=~\234\022\275\301\035X\273\322\317\311\272\245\276\305\273\027\246 =\004\212\201<Z\350\334\273\021Xw<\270\235\016=\331y\036\275d\036\220\275\216WQ=Ao^\274\266\303\317\274\323;O\275\"\266t\274A\300n=\032\277\220=\321\326.<\241N==et\3719v\000\213=\250\331\022\275\210z\307<\212<\355<\177k\006\2758\267\360=\212\372G;\244Mb<\217-$=\265SB\275\025\272.\274\275p\314<|\2767\275\241\320i\275\t\372\364\275%xF=U\316\313\274I\000s\275\270!\212<>9n\275\330\022\244\272\250O\241\273\034C\245=8^V\275G\372\200\275\033\226\006=\r\350R\275\270\332!\2746\335K\275H\232\244\273\274\213\331\274\365\261\341<I\226\014=Q\324}<\366\240@=g\0337\275|\376\013=\323\005\204\275Wy\240=\352\243\035\275l\036r=\201\010\372\274\332\214\013=\305\224\016=\373\337>\275- @=:\325\277=\242\226\322=\342\314\021=y\010\034\275\\\331\234\274?\317\335<\237\353\014=\206\352p=\\\306-<\3417\352\274+\311\253<\321L\023<+\026\025\274.\362\266<*(\n\275\'\245\244\274\376at;Rc\256\273~\372\274<\330=\240\275@\333\321\274H\307V\274|2\006=7B\242\274_.^\275\255\362Y\273\023pd\275\274:N=a\233S\2759v\220\275\335\301\223\275\355M&<\264\313\235=3d\235\274\246\213o\274Q\321\035\275\332\tT=.\340\223<\211\271P=6y\255<\022\273c=G\000\211\275f\371\215=\360\207\252=\252pr=^\2525=f\021\306<\210\276\361\274\036/\305<3\340\361\273\241d\214=\022\020\365\274\3634\016\275\'\213\267=\244\333\023\274\245\266>:\363\363F=\257\255>\275\335i\245\275B\216\350<0w\221=I\364><R\"\212\274\3619%;\t[\234\274\375~\347<\246>\'\274\334\340\221\274\3258L=\014\315\275;\3033\025\275Rx\226<\251\214\333\274\274R4\275}t\035\275\266\354x\275h\024O=Q\371\226:\205\350\265\275r\322 \275\345\333=<we_=\276{\260<+\274\352\274\202X\263<\372n\261\274\013c\334:\276\0024\275\322\373k<<\255\241\275\320\220\277\274^\3577\275H\320\363;\tcf\275?\203&=\344\361P<\316r\237<\006l\034=\360\344\023;\032\2355=\213B\336<\"-+=0!4\275h]\356\274\336\023\001=\0064\270\274~\035E=\355\213\341<\303\327:<\332\017\037\274P\236\207\275\336\235\r=?\305\367<Z\302C<\t\343_<\213|O=\253\235\020=R@5\274\372\2217\275E\262\320\274Ld`;\232\213\213\272\201\021\226\275c\304\006\275t\177\215=\275\t\264=\311Tb\275]=\002=<ub=|\345\213\275\216\342\260<,\212\003\275\345\210\327<2(\202=\331m\263<Ny\033\274\2547\246<\305$/<JFQ\274K\265\"=G\231\306\271g\203\354<\214\214\277;\245N\230=\020\224\354=9\214\260\273Qe\325\273\353A\225\275\265\017\352<\367\351\213=\221\271\207\275o\255\305\275H\226\260\274\275<\316=cc\205= /\350\274O\326!<\310[\021\275\003\255[\274`\323\023\275f\272\023\275L\301\245=\305F\304\275\341\326\000\275\250\225\222<L\024\315=\247\030\006=\226\260\273<A&b=\350U\243\274\260\360\035=\0307\202\275\026=\337;gv\233\27584\321<\2510z=\255\242\257;\020\246\036=\030\024,\2720\030\234<\222\3679=q&K\275\001yM=\220\367\333\274\255\270)\275~\304\216\275^\254(\274y\006\230\274\317o\212<T\235\355<%_\006\275\225\325\243:\353\341x<+\224\230\274P\031\356\275\214\365\340\273&\3452\275\300\356\212;{\326W<+\002#=%\313\345\274)\253\203=(<\311\274Z\006m\275\203\242=\275e\214\021\274\033\3226\275\010\346\260=\237x\207<{\242\221;\361\034\316\275\322\361\247\275\003\216\202;\327\366\221\274;xv=\273\013\272;o\021d<\"\262\316\274\237/h\274\357_\322<a\002g=\3252\311\275g\311\007\274hp\363;96\027<\207\377P\275\204L\234=\\Wx\2745\035\";\226\341\254\275\345\n\235=\322\375\013\274S\230U\274\343\365\203\274I\271i\273\201\001\002=a&\345\274p\216\214\274P\204};\261\334\264;C\356\221<\354\"\234\275\354\345\255\274\310\3708\275\3364\361=\321\220~;Pn\227\275\256\207h\275\346\3209\275\2464x<\223`\205\275B\263\251<\367\206\201\275Ms\333\274f\251\342\273\215/L<\370\223=\275.\222\360\274\014PB;^m\031<\\:\227=\213j$=W\001\363\273kb\200<\304\333\374<\220\217\260\272-\263\006\274Y8\337\274\257Xz<\251\032\217\275\331\034\016\274`bP\2751\340\353<Yr\371<\000g\'\275\316g\205\275\223\017\031\275\312 \234=q\037\t\275\307=\227<\250.R\275\252\335k\275\221vH\275C\\|\274s\320\352\272,4\006\275\032\367\010\275\226X\024=p\027s=\3744\240\275T][\2758Y\230<\354\263\001\275\335\266\021\275Ar\320\274\315\344\263:\216:&:R3\023\275\240\013d\273\027c\036<\3432\020=\304\263\227;K\324p=r\314\030=^/\221\275\304\340n\275\203\221]\275\r\025z<\360\351\020\275\035\'\225=\177B\353\274\312\034\261\274\252\037]=\036\207\352\274\341\240\030<@!\364\274\217\361 \275\211y\200\275c\255\311\272\177[\205<L\213@=\216\362*\275\007\221r\275\240\004\346<\251\3222\275\320n<=p\325\262\275\026\005b\274\375\306f=\255.\231=s\300V\275\3702\260<\225\253\305\274\232\006\321\274\312\027/\275h\035T\274&\333\212<\330\265\004\275\001d(\275P\355\222\2757\335\023<z\226\340\274\360:\233=zJ\305\275\204Yr\275l\222\233\274\027\304^\274\231\324\021=\260\347\263\275\356\324\"<\2039d\274qP\341<:c\333=b\365\033<\343\003u\275\013Kj=\201\254>=\347&p;.,l=m(\311=}\237\216\272\324\372\256<\207\273\210\275/i\212=\247s\205<\n\224\330\274%\361\205<\245z\251\275\362G\231=J\243\203<\034m\274<\027h\222\275:\376~<(q\225<\323\374\254=\031Wr\272\010\254\327<v\'\202=L\226(\275\242\357\202\275$$R\273\351\203$\275\034\264\250\273A\365\221\273X0\006<\373\255O=\275\211 \275p\"3=\"z\214\275\216\n{\274\351\360\346\273n\017S\2752\303\213:\211[6\275d\215\375\274\234\314\311<\007\236\212=\205g\232;$X\312=\300\230\363\274V[\202=uL\234\275k\216Z=&n\005:2\211\230=\3650\270<\347@5=\0033J<k\300\003=tm\306;(\320\220<\225\237\036<F8\205=\026v\'=\271*|\275\252\242\235<s\306x\275|\037\351\274\024\3774<\226(\372<Ch5=S\305\243=\325]~<\2362\031=E\323\323;\004[*\275\263\306\211\274P\307\244\274K\262\367\271\356\016\310\275\313\320\227\275\310\347\016=9\272\236;\260\ri<N\365><\030\"\014=f\006\213\274\355zR\274\267\361\201=\013\315\035\275\347\354\225\274I\\\332;&\014\037\275x\304O\275\035\331L;\026\003\025\275\236\345\223\275\326|d=\313\tN\275\311\006\256<\201K\035=S\364S<]\212\220\275]\305\031=/\304\235\275m!\007\275\326\222\212\275\220^\223\274qR\226\274h\276\355\273\037\n>\275_\247\224=\331\261\230<\205\367\373\2720\210\254<7L\241<\025?\357\274\206\321\007\276Y\345\204\273\315\003-=\3203\303;K\206\357<\342\275&\273\360<D\274\366%o:\036\003G;\321\365\370\274V\232W\274!rz<\024G\224\275M\3120=\335W\326;\262~\200<\263\026>\275\311\034\031\274S.!\275\275\353r\274\342\223\260=\240\352{=\274\177x\275\370P\374\274`\2543=\013\017\250<\274\243\234;\253zr=\253i\032=\241\255n\274\236w\240<bL\272<m\263\225<\267\305\352<3Y\316<\036\240\244\275\300\254\230<\360\332\016\275\206\220\007=\223\201E\275\264G\340\273\242\227\t\274\232\005\361<i\231B\272\303\370\224;\313\362\030\275\2202~=wM\255<\300A>\275\356#\341<\004\345\216\275IU\342<\241\261\346<\237\235\206<zz\222\272\027 \240\274\242*\313<s\001\230\274N29\272\313\255\205<>\215~<\256G\344<\2527n=\251z\n=\030\261j<\243n[=@j\236\274\200\212\221\275l\240\220=\320\372\302<\246\335w=/\262\243<\211\331\277;!\217\010\276\355\014\005<!\317\020\275\027\302\363\274\214\233>\275\273\177V<S\032o=\215)\257\275\225\004A=\026\024i=\227\246\373\272\221Z\302\275\235\306\342\275\344\200\240<\303\010$=R\336\350\274J.\266\274L\373*\275\260\017\376<9q\336<\267\254\036>Q\375\005=YSh\274\376\220\031\274\244\321a\275BS?\274\245\227\226\2735A\000=\0263\n=TOf\275\003\217J=\255g\221=\345C\211<f\021]=L\375\034=\250\244\244\274\314\376\235\273\367\300\303<_&\273;\305\255\340\274P\205\366\274\255\360\273<\360\304]=\343?\314\274\rhg\275\272\352\027\275J\314\027\273\213N\207\273\312\265\217;\n\346\247<V;4<\022C\221<\333+Q=\242.8=\256\232\274\274\360\032e\274\260\212^\275\373\273H\275\324L\206\275}m\324<\222\232\362\273\366 ;=\2338\026=d\241;\274\212\377\363<\260\324\227<\255\340\034=\374\030\330<\"@\242\275,\003\314<|\\%=9v\014\275~\256\240:\"3v\275\354\302\267\274\252\227\004=\361\302\200<\274\333\367:\n\211J=\002\260\366;\265\2314=\261\375\024\275?#\247<3\253\035\275\211\334\376\274\"mH\275\317X\212\2757\255\352\274j3\004\275\230l\206<Cs\224=O\250\277=\247\\\277<<\261\016\276\334Z\253=\n74<\274\024\034\273X\017\242\275T\275&\274\244}\333\273\377\357\273\274`.\326\275X\240\346\274d\031\207\274zFD=.\016B\274\231\201w=\201P\317<%mm\275\225\006a<E\030~\275\3071H=\3251\007=\321V-=$P\357\273\257\002W\273\273 \321;k\203*\275\004\017E=\271\223H=w\343s\275\314`\217\274=\361\022=\207:\216\274\244\006\'\275\022\316\375<\337\036\t\275\253\274\203</#\226<\033\263\240<?\3632\275\026K\234<\rs\000<Fj\273\274\031.\245\274\215\301\236\274\327\367\271=\266\247\332<\207\242\013=.+\240\274\016\335\346\275\232\370\270\275T\241\036<\'\030U=\232\2452\274\362n\217;\361\026\251\275\010%\240<\335\226H\274\023\274w\275\371\267f=\332\002\022=\014\264\020=\262T`=4T\360\270h}\242=}\265g=\267 \353<\020\030\332;\0371\254=t$\370=9\r\210\275\330r\226\274\354|\r\274\024As=\224x\214\274_\304\213\275\270\303\"\275\317\035\223=\000\001\233=E\031\263\272\221\224\275\274\0050\361\270\370\375\233\274s\271\'\275\225G\236\275+\255a\2750\3727\273\321\334\327=\272\372\302\274b\367@\275\310+m<J\t!\275\216\340\343=9\201~\271V8 \275]\263\271\272i&,;\221\304$=_\021\323<}\221)\275A\361\204<q\243\177\275\364\261\016\275:\306M\274\323\226/\274jp\026<\221:\240\274(,\254;A\3740=t\247$\2748\205\262\274\203\252J\275~I\027\275\312\001,=s7\333\274\211=0\274\371b\251<\025\361\320\274H\0107<.\366|;\036La\274\200\2268\273\342l\200<!I\002=\221\007\275=Wrx\275\204\266\234=\221\374/= Y_<\256\316];\217<U\274\222\023,=a\255\245<\215\275\301\274\016\022\222<\311\037\222\274\255\225D\274\033\036\365\274Dm\335\275\227Pk=\005m\322\275t\303\323\273\202[\260;|.\"=\"[\001\275\344\311\211<\323\320\310\274\356M3=_cD\273\353\010\036\274\306\243y\275Z\177\200<\204}?=\352\216\260=Y)L\275\236\234\372<\204I\003=_\255\3719\300\315\027=\t\201\220\274^\320*=\304\237?\275s\334\353\274\350>\220=Bx\321<\r@\014=\343\250>\273\221-D\275\205k\004<\314v\242<\353#7\2758m&<\267Pi;\335\300\000=M\"\205<\254X\026=[Lj=\312\232\351<Bb7\275\327\211\325;4\230\017<\007\342e<D\237-\275]\232\371\272-\3269\274]\020\017<@&/=B:4\274\306\346\224\275\3244\245\274D0\345\274\317\351\201\274\232\025\203\275\370\211\300\273\355\017\277\274\010T\301\274Z\206\205=\337\313@\275hJ\026\275\372\201\343\274\216\353J;2\030\017<-\225\265\274&\263\201=\0145\347<\250fC\275\231`\231\274\264[\301\275\201\223;\274pg\225\275\323\311\302<\217\r#\275\030Pn<$\300\250\275\351\242\000<v\263\026=\272\016\213<\311\312\234<\217\022\034<\256\267\010\276s\332y\275N\214\004=\3379\203\271\027T\311<\316\306\226<\231\216\371:\362c\203\275g\247\355\274q6w\275\265\006\274\274\345\223a\2757\234U=\274\216\326;\034\014\301=\322\017\225\275J\214\313\273`\302*<\250\3430\275\236gY<\230`%=S\311\221\274\364@#\275\233\263\222=&\247\337\274\306\210\003\275\233x\313<x\375\307<\312i\'\275\2152@\275Z\241\032\276\263X\033\275\225\214\272\274\300\253E\274\314\"/\275\"K\236=\234!\321\274^\262i\274+:\020;Y\031X;\230\336W=)g\275<\t\326\273\275\226pw:x^\023=\337\226J\275J\255K=\352\0067\273\271\335;\275\034\014\307\275\266\274\267\275r\022\373=\341$\336<\310\274\235=\222?_\273\"\rG=*w\236\273\254ib\275\303\006I<\244\374a\275W\316\220=\202\223U\275E\307<\275\262\325\372<\216{g<H\020\212\274\356\352~\274\204\304B\274\351\301\023=\217e\200\274\377pW<\031Zz=\320\3657=i\240\300\275Qp\246<\217\310\202<\223J-==*_=>*\220\273\020\306\033\274\340\022\205\273w1\024;\242\304\037\275\353\to=\270\237x\275\266\014\246\274\273\010\034\274t\214\277\274\020%\341;\303P\203\274\030\366\321<{\200\211<\331\362;\275P\247X=n\237\300;W\354\002=\373\\\221\274\255a\2519$\210\"<4\333}\274\000\350[\274\370(\245<9\302\014<\017\205\363;@j,=\034\346R\275\260>\331\275\361\360\205<\\r\311=\300\265(\275\363!\262\273\261d\254;3\211\'=8h\370\273sG\266=\211R\312\273\314nH\274\364D\200\275\334\372\205\274h\230P=!\257\313\274\360\266\220\273>n]\275\276\\\263=\343J\347<\252o\300;Y%\266<\375\254\212=\316\347\306<$)\010\275\322\365\316\274\341{`\275\306r\006\275\330Q\223\274(/e\274b^\314< \032Y=\230\330\323\274U`7<\362\2261<Q\240\321<\357\336\277\275\"\310\201=\342\272\037=\017\022\306=\267K\342:r\371x\274\255\211\205\274\034$\213=_*\325\274\265B@=\254\205\243<I\262F=\000\357\272\273Q8/=\000o\034=vl\334\272\341\365]=\270\213\362\274\343\302R=\024X4\275\236\3564=\244Uu\275\201Bv\275\345\253a=6\221+=\213\0307;g\342\377<\034\034\032<rJ\013=\305\227\232<\367g\251\273\243?z=\003\365\346<\353\230?\275Z(G=0\364,<~\207\002\275[\231\241\274\000m\005\275\227j\007\275F\346[\2750r\233<\227\371?\275\327%2\275\226t\025:\266i\376\274\230\332\214\273\365\332\356\274.\272\370<\256\366\373<\037\330h<\203\261\334\274i\213~\272\013\330\305=\302`\320\274\305\302\241\275\036\032\210=48\204=\264eU=\267I\334< \2113\275\365R\206=\270nW<\316\210\361\274\315A\245\274\034\345\231\274\333\245\220=!\234\225=b\274h=\361>K<\215\'\001\273P\2344\275\027\353\r\274\272\317\374\274/\340\332\274\346\200j=6PX<\2649\325<\254$\203\2746\345\026=l\241q\274\315}\025\275j\013$<Q\315\357:\014\312\272\273<;\265<3t\006\275\221bh\2754\207\240\274\310x\373;\375\235\247\273PlA\275#\352\370<Y;,\275b7\246\2750\314@\274K\037\376\274\025\270\036\274\251\336T\275\0231\021=f\r4\275F\225\003\275\032\376*=\211\021\022<\257\330l\274K\272\253<\003\310S:\300s\004;d\026\247\274N\200\226\273\330o8<\314\020\277\275\345N`<\371\232*\275B\003\025=\006&\333<\004\335\220=A\204%\275C\311\251;\230y\232=\3664!\275X\262\026=\212=\341\274\3544\271\274\342S#\275rg\313\275\356\224\274\275?\362\274<\270g\373<\267(D\274t\177c=m(\353\275\354\211.=\214\n\270<\004,\256<ex&=x\221H=\212y\203\274w\225\207\275\270\264\376\274\340\226k\275\201\345U<\337A\217=\333\022\314<Q\354\232<n\227\025<Z>\022;8\034\241\275\266\215\206\275\030l\304\273\2231\002<\227x\210=]\203\343\275\330\336\246\274J\022d\274z\237O<I\237\332\274\363\300\260<\001q\270\275,5\257\275\005\025%\275\240\311\240\274-#\225\274\346\342\232\274R\345y;\347\335j\274\2654\000\275213\274\357)\310:z&_=\037\271\200:\352\326`;\032N\030<2T\177< \354B\274\037\326\265;\354J\232\2748\226\226\275dPN\274\271\306S\274\0048\337<\327\212\212=\245\324\374=2/\304\274\223i\r\275\334AH=\365;`;\247\352T\275\0232\361\274\010\361Q==\n;:Q\255\251<\261\341\022\275\346\324F=:\320\273=\356q\312\273Y,l\275\337\007\205\274\231\272\342\274u\250\231\274\027\243J\274OT\265=\317Xo\275\200\364\320\274\210A*<\325O\224\274\3109\262<A\010\007<\350\234\t=1\017\341\274\0175\304\274\267\271\316\274_?\"=U\347\'\275f\217U\275b&\034\275\001#\230\274\247\351\263\273\305\354\251<\260\207.<\324u\307\273Zg\241=\342\265\210=Q\327\224\274\332Y}=\267N\354\274\221\343\037\275\267o\225\273\226\'\302\274\n\360\207\274\2036w=R\235\355<\374~\215=\343\316\204\275\300#\270=J\250w<5@X=\230\200\364\273\360\351\366\274\000g\223<\004\231&\275\277\003n;3\214\226\275\004z\200=n\360\370\274\245\2738\274!\323\357\274\032.\217<\361Bl=[v\352\274\024\312\363;\026\333\210<U\255\345<\211\273\317<\017Y\210\2755+/=j\027\212<\325Z\330\274\010\003\204<m\371\377\274\216\232\024=\024Vx\274\262\300\024=\005>x<\310\276\350\275b\365\333\272\344o\354=\312\202\216<\363Y\361\274\240\025\211<\360\237\271\274\014!\253<\243l\026\275x\311\022\274\002n\032\274\027@\004=\210\317\265\274\360\250\341;\026w\322\274\215\376y=?\0263=\252\021v\275\026\217\251=8o\323;+\005\313\274k\316\277\274EV\227\274\340p\215=\311\332\226<l\223\3279\226H\266<\306\352\202<\357\311\037=\206\314\026\273\371\333\202\273\373h\014\273\270\263\324=V\347G\273\001\204]\275\206L6\274\255\202\240\274k\256\341\273<\307\327\274\343\035\312=\004\361\301=\247|\330<\352\026\275\274T\317\214=\3027\375;\277\"j<\202\374=\274cX\326\274\027\241m;\236\240m\275\036\343\002<4\023\013<\217?N;x\212s\274\001\265/\275\240j\215\272l\224\377<\266\260\250=j`.=f\370\036\274\327e\243\274\335\337\001\274\227\266\312<\254iP\275t\202\364<\244\371\260\275\003>4<\362V\211\275\2307\220;aM\345<\315\335\365</%\252\2756\213\275\274D\347n\275(\022\261=\013\343\346<\331\017\016\271w\274\220\274\255\213\333<\022X\234=\374\325\004=;\274L\275\220\331\035\275\373\271\202\274\205+^<6]A==\211\363\273\2143\333<\275B\323<X\020\205\275\'\257e\275\236\303\226\273&\326U=:N[=\331S\371=5u\270<\250u0\275\240\033\365=\241\333\006=\366\353\260\274\262\225y\275^+\\\275\212\223\251\275ast\275\001J\202\274k\215?=V>\030<\360\207\351\274N\270\026\273\346\240\023\274\251\325\213<gQ?\275\342}\210=\024\236\240= sW\273\214\225\233\275Q\365\275\275r\325K=\374\365\267<m\361s\275Rs[\275,\326\271;gdZ\275\374c\223\275^ou\274\345\026\030\275\326f\326\274\326]:<\334]\204<\314_\260<\320<\200;\343\2047\274fw\363\273*{%=\2463#\276\307F\345<D\326\007=\231\211\333=\326\211\315\275\251\"\000=\210\002\253;\351\r+=\300NM=\347R\270<\337\2216=\003!\000=\230\2731\275-\201q\275\373\343\001\273f\247K\274\\\'\322\274$ \202\274\220+\"=\317#\n\272j\216\023=\014p\251;\023\361i\274\224\210 \275M.\275<-\276>\275\001\035f\274\345X\226\274\"3\256=V\310\353\274PC\235<\216\313\272;\264\023\021<+K\312\275\277\251&=\376B\034\275\346\252\270\275\270\311\207=r\377h=\354\230m=\027\021D<\233\265&=\274^\201\275\3078\312=!9\010=\344M=<.\353\332\273o\t\013\275=U\272<f\263\217\274\243L\222\2745\2364\274~\3613=\364\214\360\274\261\377\033\275\010_\204\273\300\206\257<\370X:=\025\216\220<\037\361\243\274\361Q\317\273{\002\343<\021:.=\372\331\250\273\245\364\266:I\360\245\275H\223\017=\025S\324;\370&\366<~\264a=\305D\000\275K&}\275\203\257n<\253\014\365=\263\013n\275l\033{<\217\305\n=\t:!=\031(\222\274\372w8=e\241e\275\256\001i\274\254\334C=\363\246j\275\304\277\204\275\355bR=`\236C\275\033\376;\275\303\317\245\274\002\252\213\275\301<+\275z\0027=\'\346\355;\320j\247=\254\316\025\274\201G\315;\267\010\202<s\n\327\274kP\202;\304}\361<\t^P<\317%6<\030\255\302\2757\222\205<\3210v<\004\330\\=\341_\"\275\023\0220\275#\277\317<\272\030l\274\007\216\301\275\377\371\004\275\323\314o:\305&\250=\225\374\000\274:\023\373\274S\362\320\274\237\360\363\274V\n\351\274rr\223<s\373\200=\235\326\033\275s~\266\2752\276D=t\'\236;\333y{=\037\301a=p\222\303\275\343\371\200\272\3615?\275K\025\005\2759\324F=\204\016\036=>P\217\274\024\224.\274i\013\246\275u\350\261\275$\365\362<\234\345\001\275\377\005:<\223\367\213\273\254yh;\212\017C\275\251\320\245\274\305\356\035=S\232\010\2744\367r\274\265B)<%\364\200\275\341\241\023=S\200G=}\250R=p\t*=\223\0300\2753\321\331<[\344\260\274\264\351\263\275\341\321_=\252\241\007\275i\323}=\346U\272<@a\350<\021\333\372\273>\235\217;\220\371\302<\204\230\004\275\247%\346\274\004-\004\274\232\350\261=\255\301\345<\315R\223;\0261\203\275\337\014\r\275GSM\275$im<-\255\375\274\270\036|\273f\2013:$\234\201\275\363_\211;\322\230\003={\007>\273\017\301(=b\264\362\273S\374\240<T\037\026<!pe=M\350\305\274M.K=\377k&<\023\350J\275\207\212\274\272\300\316\233<\001\325\211=\225\361\252=\367}}\274\264w\016=\027\370\310=\276\202\277\275\234\354U<\361\306K\275\343lD\275 \236\245\2741\252\230\274\213\321\022=\266\346\024\275N\231\222=\322\202a\275\342\374\020=\030\366\207<\257e\273=\231\251\246\274\315\261\326\275`u-=<k\302;\342\263J\274lg\014\273\356%\256\272\375x\214\274\371\333W=a\232\005;/\376\022;\270\244\266\274\266l\337<\210\240S\274\237\002r\275\312\000>\275b\263a\275g\262\251<\364\321y<\\\263\'<4\232\342\2739\3669=\374\376*=\006+\242<)p\263=T\266\353<\363W0=\020I&=\254H+\275\002\360\037\274\351\377\356<\364%\r\2743\205\242\275\226\010\236\274\252\241\032\275\367\023z<\237\305\030\275\353\352x<\231\330\233<t-\216\274\337\002\361;\263\333\274<\niU=\212\013w=\325;\013\275\304d\021=Cr\251\274\347\256\375\275\251\377\253\274%\366\350\273j1\217\275=\320f\274\316\023,=m\001\\\275\235\233\214<\240\324U\275\005\3458\275(d\263;)l\243\273\313s\347\273\275\224\303\274)\237a\274\210\364\200<\246\215N=\t\375\373\274j\007i=\373\340\350<G^\234=\360\331\261<\343\371y\275n\265>=X\365\004\275\234\240\000\275\275g\014\273\241\034\024\275Y\372\020\275\364\211\312<\257\265u=\312<$=A>\201=j\2143=I9\350;\001\276\311\275\305\242\223;I\252\030\274-\225\035=\n\354\022\274\177b\257\273\366\247X\274&\241M\275\231\313Z=A\017\032=\274\227\307<\302{\217\274\306G(=n\341W;\245\t~:\222M\242\275f\010\002\275J$\374<\206\343\267\275\006\330\273<\221\244\023\275\217\321\027\275Kg\242\274\271\212&=\006\\_<<\202N\2752IF<-\345\037\274Y\356\240<\305.@=\340\266\266<\032\237|<\024\264\213\274\370Z\224<\002\251o\275\243\260\023=\226\236\311\274\234m\212\275\235\374Q\275?\017?\274\037CJ\273\230\"\303;\304\361:\274aO\014\274\262\322\372<#\032\317\275\262\272Z=\027Z\307\274,\202\262\274\347\271r\275\376\375\217<\212TF\274\372\250\"\275r\361\363\274\010\201\211\275\3305\016=\252\341\233\273\231\3519\275\021\017/<$\335A\275\214TD\275\026{\035\273I\317\037=\225\277\267=\250 -<\256gw\275\273O\031=Q\021\321\274;\224\004=\213\3671<\001W\026\275\365\245\303\274i\334N\273B\307\226;\022D\214\274\372\013\200<\\A\200<X\013\231\275\335\252(\274\253\204\216<\337-\274\274\347\211\276\274\374\005#\275*1\234=\020V\223\275\013\377\000<\241A\016;\006\235z\274\340m\030\274n\027\365\270\364T\311<\0215d\275\ta,\274\r\2447\275\351\264\235\275\273\211\320<B#\026<\r\362)\274\037\214\245=iE\n>y\255\205;;\377s=\250\360\375:\210R\277\274\n\265G<[_\346<\303lF<\002\010\264<\252!\210\275\362\\\001\273~\264\365\274\364\264+=)\221\006=$}\263\274~\323\364<\326\324H<~\231\016=C\272\261\274/B4<X\354w\274\265ub=\260N@\274\200v3=\007\222\217\275\\\024_\274\366\265P\275\265\241\277\274\204\221\000<~\254\314=\253jW<_\204\364\273W\275\332<nP$=\335~5\274R\376\202\275\2249\206:\021;\203<\367\033\302\274\335\227\365\274\317\246:=*\256\246;\365f\317\274!\362\230\273\010bw\273\252r\026=/k\336\274R\274\226\275\375\201\373=\342p\"\275R\032G\275>U\'\2757)\274\275\252\316\013\2758\334\275=\275\265)\275\240\257X;\240*I\275\351\346-\275\247\263\273;\3173\267<u\2029<(qm;`T\006\275Di\031\275\216\t\241\274\210\007\326<:c)<\377\324\332\274\206\326\242\275\240\375,<=:\030<\007\013j\275H\336\030\276\345\310\235\275\304\356\361<{GG\275\246\355&=\"1\\=\261\037\t\275\2378$\275\246\256\331=d\247\342<\333\326\004\275E\357\316\275u\216\217\273`\352N\275L\004\321<\200\303\221\275\235\013o\274>\206\260\275\017f7\275\205~\267=\235eD;Ud4=\340\270#\274\345\001\327\274\226\352\217\275(\024\256<\213\006\270<\310\3438\275x1\201\275n\306a\275\263\241\243<\204\355r=\246\313W\275c\223?\274\345\210\022=\251\351\224\274\3178\n\274\035T\036\275\337\231\266<\332k1\275\262c\333<\256Q\317;-U\204:[\003\241;\330B\237<od\362\274m\344\302\274\000\257h\274\227<\256\275\241\037\315\274I\277\'=\367Y\211<\214\340T=\343\2728=\r\370\312\275t?\233=FV\326=5[\036\275\217\023\330;\261\377\021=\304U\325<\371\256q\275\332\301#\275Zh\247\275\213\010\270\274\327\n\260<q3\375\274\031\231\335<L\024\336<\200!\016\274\025)\360\274\251\207\036=\371m\r<C<Y\275+\030\301<\245n\224;\246\323&\2744{(=p@\241=\323v4\275\001\361(\275W\324\032=r\005\347=0=i=P\240c\274kVz=<\264#=\355g\033<|\020\026=r\265\274;\3179J\275\206\314\321<t\247.=\204\207m\275\\/\271\2745D\341=kD\007=l\324\213\275\362\313\321\273\000\236\323\275\331C\201=\223\232\327;u\260b\275vq\023\275\267+\347\274>J0;3\332\033\275i\030\363<\017\026\342:\300J)\275\244\"\245\275^\026\221\274\3377&\274\354\257f\274)\303\013\275\030\344\002\276\206\375\222\2752\234)\272={\274=\217\255\312\274b\3537=\344O\257\272\220\334\271<\205g\030=}\031\n=\333\264\276:\"\006P\274\264\r5\275\255\256\262<w*\224\275\216\221\202<F\211k\273S!\033<L\362\323\272%)_\275\021?o<t\322\255:\324o\245;\344\007\231\274\240\372\215\275\'J\240\275\025l\363\2733\345\216;__1=\200\334\336<I\374\244<\264\022\003<w\030\037<\006/b<\3230\237<\307l\217\274+(O=f\351\242\274_p\010=\252\016l9?\235\217\274\246\004\034\2758\020\240=\273V\013\275\224\207\206<\312\273-\275n\270\r\275\312Z7=\223~\314\274\230\223\"=\344\250\316<Al}\274\021\256F\275\212\333\002\275\270\020\347\274,\302\306\272E\024\002<\035 \302\274\340\023B=\007\330\312\275\241}\276\273\346,\204\275\276\266\340;\\\2623=Y\375\274<;\263y;\245F\214<\201 -\274\017\227\201=\033\263c\272n9\251=\265\261\260;m\267Y=\3607\026=\206\277&\275>\205E\275U\332C\275\010\010\254\275\220\033\205\275\227\211\321<i\265\375\274\025\303\251\274\236\355*;\236\264\347<\275\031\336\274\031N-\274\021\337?\274\021\351?=+.\354<\365\362\240\273 \345\005\274VA\007=\235gM\275\024\002\253\2741\260\230\275vz\034\275\377\025\213:\332\243\344\274\271\221\214:m\373\036<\376\277\212\275\307\030`<\372\335\365\274\253\322\r=+\271\333\274r?\032=7KM\275\252\355\243\274W\223\224=\374\202\251:\277w\003=\207\004g\273\270\304s<\312\274\370\273\002\215\304\274i\333\327<\013l\203\275\'r|=\222\037(=\r\222\000\275\212\230\344=\307S\273\274\310Y\251<\263\211p=\375Y\003=\276\337\017\275\351N\351<Nl\\\275\335C<\275\360\371x\273\254\373\264\273\3775\240=\271\353\370;&r\211\274/\334\272;\302\227o<\336-\272:>\262 <G\367\360<m\311\362;\030\242\263<\261o\n=\337\223<\275u\220G=r\227\363<\276\026\004=}z\352;\331\336\344<\021\007G\275\312\220[=\240\035=\274F\242n\275\373\346F==\\*=X\025$=\365\347\001\275)U\272\275\306\252!\275C\312\312<5\300g\275\365Kc\275`\210-\2736\022\224=v\366\216==R*\275\240\257k\274\212\325\246\274&\360\341<\r\206\002\275\232\250$\274\370V\222\275g~\023\273y\304m;\255\370h\275\n\325L=\330\372\320<\025\373E\274Ga\213\273\334\255\\=\2254^=\302\310#<\200\272\'=\212\224X\274\205\334\234=\034\341\340;\255\214\345=\0361r\274\0330\327\274\200\254\276\275[MS=\223\356\r>\327a5=A\217\376\271<4]<\213\207\205=\313[&=\261\021\352<8\022\306\2745\025\202\272\312\254\317\275\262\307p\272\217j\t\275WDL=Y\330\242<_\335\304\275\021\2359\275\344\225\322\274k\233\367\273\207\t?\275O?\211\275\003d\337<{\2567=\010\357v\274\\\222\004\275\323\'.\275\356\234\r\274\276\243F\273\177I \275\324^\275<\235\n_\274\226*\366;\236\"\230\275\010\276%=\257\365.=S+\312<\nUw\275\314E\r<\247zZ=?\260P<\021r8=\027\366\211<\022\001a\275\266z\331\273\177\372\227\275\3118\353<\360\210\203<\010`\206\275\335\202a;G\3549=\231\301\206=D\322\312\274\277%\202\274VP\203=\233\354\206\273\020\241\356=\355j\306<\336y>\275O\224S\275\240\211\000=\321@-<%\3140=\246\360\355\273\325\244R\275V\367g\275\177D6<U\261\255\273\337a\000\275\335\263,\275\027\355\023\275v\013\275\275~\354\330\274\325\243u=\\\313\216=iI \274|\275\031=Ulc<\332\r[=\262\035.<Dj\347<V\206\341=\346\257\277<\023\2367\275\nI\265=NO\213=\331\000\313<He\250\2750\034\031=\370\376\332\273Q.h\275H\207\356\274\377-r=\016G\303\274\331x\023;^\252\203<]\027a=X\314\357\273\'\356N=# \221\275\247\320\264\274:\010\\\275\303\306m\275\324\237g\275J\357\252<8\277)=\304\357\206=\014\222\204=\314{\353;\227\204J\274\306\311\254\272c\335\350<\224T\265=&\341.=\345\306\203\274?\3315\275\322\033U<\006\005\222;\375d\203;z\270\n=/\020u<b\263\203=\217\341\330;W\305\274<\332\001\230=\374d\253\273\246.^\275]4}<\304B\227<\303\353\004\27435\367\274(\302&\275& \177\274/\256\223\274\333\350\245<\223eo=R\3543\274XP\246=\002x\023=\"6\236\272Gw\034\275\005\343\327<\304\347\'<!uu<$\016|\275\236\342_<\t\317\372\274\356\332\233<+z%=}\016\r\2757\373\026\2747\325\306\2749\314\332<\016\315$\275\232\267\355<\340\240\037\275:\332\341<\031y;\275?\n\037\275D\225w\275\336\331\031=y\352j;\357yi<\004\002\347<F\212\245\275\204u\037\274\304\313\333:\036\374\022\275\231\321\036\274\003\033\350\274@\346\350<%\203\303\275\236\313 \2755\241\242;!\024U\274\374\367g\275%F\350<\372\360\"=d\021\235=\232\351w\275\273A\225\272:\010\210=\260\020\305\275\355\002\272<\030hr=\214\203\262=x\231\256\274\003\271\272<\374O\325\274)Y\222;m\234C=\357y\257\275\342R\356<\362\253\200<\257\337\024\275dY\205\275\375\000\365\272\tM\034;\017\247\275=\250\301\016=\220!\335\274\354H2\275\270\'\206\275\277\203\023=a\275?\274g\336\017\2742}\177<L#\307=\377Z\335<\263\225\027=!A\324<\220_\214<\313\323\373<9\007\311<\036\2330\275\364R\353\274G\352\220\275\236\265\017\275\260\257\321\275sDR\275\026#\231;\237\250\201\275yr\244=.\355\243;\257\303_\275J[\335\274\347\004\221\275\267\016w\275\030x\\\275\300_\242<\350 5\272\304\207\224=\022\007\376\274f\247_=e\366\006\274\226\013q=B\213w\275\207M`=\005C\227\273\261\325\200\275\271\235\010\275t\274e=\001\"\350\274t\013\211<\323\033\025=\313\014\266\272\n\366\334\271\215\247\255;5\005\272:\021G\215;>Q\335\273\025L$=\215\373\300<m\026\203;\307\221\326;\353\025\337<@\210`:\230\225\240\275\247o\325\273\327\361f\274\336%S=%\034\020<[\206\224\275e\270p\275\356\010\305=\235v\271= (\263=\303\375\235\275)\330\341\274\030\222\206<}\323N=\260\244\317<\020\231r=\350*J=\322\360\212=\032U\246<\307\023\023\275\312\244\033<\300\246K\273{\266>\275\3672,<\214\237\341\273\251T\204<L\035\302\275\222RM=j\010\230\275\240\314D=\253\215\311<9\205\311<vb-=\213}-\275~Up=\025zP\274\255\354\312\272w\231\224<r\350F\275\322Z\265\2757\312\257\275\3448\213\275}pZ\275b\252,\275#;\223\275\351H\262=\361\227c\274w%\332:+;j<\310\003\215\274`\3411\2748\002h;\004\t\024\275/\200\352\275u\014L=p\t3=\355-\276<\375\227)\275I\341e<\373\330\305<\333_\035<\3701\374\271\036]1=\327\226^\274\274f\221=\203\204\023=%\330\330\2733\026v\274u/\031=\013\300\211\273oQ\223\274\024\236\233=o\311;<\244>\354<+g\256=\006s\217\275\311)\321=\031y!\275J\014\027\275Z{7\274\365[\306\275\361\211E<\030\202\203\274d\320\200\275\376>\323<:\271\261\275\030.\240:\325\334\201\275\264\274\304<\232\025\326<\342\302\372\274Hh\316<\3769\314\275\007\245\232;\376t\344<\265\252\225<\220{\221=:\236\0269\341\342\035\275\270\353\324=p4\242<\352U)\275G\222\371\274{J\221=s\303\344\275\020\322\264<\313w\n=\255<#\275=T|=1t{;\365\311\177=\321;\031=Y\261\307<\326\371\321\274\352A|=\266\245\250\273\26642\275>\331D=n\217\004\275\301^\306\274F\256\027\275q\271[\275n\234\025<\366b\025\275,P\203\275\353\253\307\274\203\224\326\274\241\323\344<\273\231\240\274\364\027y\274\005\253\342;\374\260\031=\005\335\211\274B;\245\272\227\312\354\274\207\005\"<:\361F\2740\275s\274\231\267+\275\352\2637=\364\227N\274@\032I\273\317\207\243\273\002N\265\275&\356\226\274\213\362\226=v\315|\275[\354.\274s\210\026=\252\277\347<\362\321X\275\t\266\220<\371\372\022\275\375\263%=6\025\224\275\033\311R\275f\247Z<3s\013<\362\ng\273\254\265\256\275\364G\362<X\016\254<\315\345\262\274\211\276\234\274\177\271\020\275IL\232\274\242\252\310<\375<\016\275d\271\300<\250\255E=\2512\310<~;\235\274\313\214\027=\27097\275\'\301\346:\t>\264<$\317\210=<\375\022=o/\247=\305\345\032=\373\003\037\274\234\357\370<\r)\272=s\366\224\273\002\244#<\205\231g\272\245R\240\274\003z\032=\302\360b\274\270-\336\275\200\241\'\273\326\271\210\274\332\261\";b\260\203\274\215mP=b\372{\275\002\313\201=\210\357\002\275\273W\313\275m\271\236=\270\251\326<[4\003=\026\017\031\275\313p9<Z7\337<%\330t\275L\234\207\275\013V\013=\227\331\231\275\037>2=\336f\326<B\013P=4\321\257<}\000e<fV\210<\370y\350\272p\320\037;o\361\317<\2607\371<\270n\221\274\204\354\374\274\315P\247=\310K<:\017\035\246\274\353m\037=\257\3705\275\361\224\215\274Z\234\274\275\3151\274\274\236\377\242<L\350H=&\221<\275Z\224d=iC\333<\373a\334<\313\242$<5\232\217=Z%\270\274\225 \316\274N\266\363<\206\3327=\244(\316<\377c\r=|Z\002\275\256\\$=\236\344\037\275\320\026\233\274\337\237\373\273*^\026\2754\004\237<g\237I;\331\314h\275\225B\021=\235\013\013\274\276\237\354<\356\354\203=\257r\036=\366\230G\275\\\260\235\275\260GP=\313\000\"\274\223\005\363<\317\216\n=!\224\t\274^1\234\2728_w<PBS\275\363@R<\242\310\254<\007b\305<\261\353\350\271{|j;\206\316-=\335-\315=\330K\324<\026/\034=o\326\025\275\'\025\367<\253C\340\274>\353S\274\007\257\020\275L\335K\274\277\266\254\274Se\\\275\355gJ\274\306\205~\273\307\337\370\274\210\231\t=\324\323\025=Z\231\364\272\034\206\005\275\242\274\t=\241\326\306<(\267\222\274\334\370\003\274R\340\n<\231\265,:\377\372I\275\332|\374\274k\314u=OU\207=\032Y\"\275\025\205\274\274\2644\247\275\023\006\222\275\317\006c\275N\264\241\274~1\353\273\036\203b=h\274\212<4\230\347<\227\017y=P.\022<g\356\331\274w&Y=T\266\n\273\340`\036=,\210(\274N\301\214\274\357\025W=\263YH=\362\243f=\324\304:=\3766\030\275_\370^=7\034\230\275\234\007F=\345\373~\273Ug\276<Y4\276\274\351\257\304\273\003\r\261\274\223\021\016=\316J\026=\244>O\275S\200\211\273\341t\221\275r\223\032=\202\330\232<\277\237\355<r`\276\275\206\311\351<fF\355\274uF\277\274\223`{\275\010\305\233\274c\022\262\275\331=|\275\311Rj=\275+\333\2743\217\004< w\005=\242\202\250;fz\201=\000$\235=\007\344\035\274\201\230\253\275e\300\201\275\233\211\337\274\0352\324\275eX\3359a\366\022=\200\312T\275\251{g\275A\334}\273\327{\177=\332\347\036\275\353\2646\2755\034-=r\231\365<\300U\321\274\"g\311\275\266\345\'<\002W\314<\335\202><f\257\276<t\262y<\357\243Q\275\216 \365\274\203\230\371;\225P\363\275\"z\001\273\220\020\346<\203?M=\3733\010\275\021\024\273;\025=\214\275\364L\010\275\"\235\023\275T\002E=\355\265R<.\316\221\275Ae\026\274b\027y\275\177\273\000\275xb\n=\200\322\262\273\325\354\224\275U\275\235=\275H\304\274t\252\234\273\375\020\340\275\326\277\322<\352x\345;g\037\003\276U\002\023=\250\313i\274\214\325\031=\234\363\000\275\353\002\243;/D\205<b\357(\273\3271\025\275$\260\004\275\227\276)=\276\030q\274{\337\307=\212&\n\274\016\226\242=\\>\001\274 \207\034=\030rA\275\3629\272<\006\343M\274\201-\004\275\034\251\257<\364\3505<4\325\272=Y\215\235;K\333\243<o\264L=\320\330\037=\377\327<\274\340\225\036\274\023\t0=\226\2420\275\3345w=>\210\242<\216\277\020=A\n?\275\374@W=\272\224\301<\355[(\274\361\217\251<\203\031b\275\301s\372<\271\007c<\036\243\021<RdT\275\370\236\243<\022\314\246=\rT3\275}\"7=xXM\275\n\014K<\260\315M\274j\237\240<4J\031<\214\201\300\2728\375\253=\377(\r\275\301(\336\274t\025K=a\371!\274!\277\227<\322xQ;\252\305\016=\017\375c\275\336\031\272<,\366!<e\002Z=\006^`<\037\200L\275\006\003\232<\361J\252\2751\271\373\275\321-r=\376\331\207=\370\317\245<\225f\305\274\357\3038\275L\242T;{\245\273\274K\3715;o\r<:\001\336i<O\332\300<x\273\232\274\177I\004\275\377*\336\274\256l\261<\362=\214<}\n\036=\213\356?=\224\262\313\275?G\372;N;\214\273\007R\214\275;\253/=\035\260\261;\034\344\372\274M\222\205\273Dl\305\274\262]~\274\'\273\014\276\312\363z;y\014\214\274\3171\331\274n5p=\363\357`\275%A@\274\350\216\326\273\266\255\307<v\243c=o\201p\274 H(\275b\370\367\274 \r0<\312\303?=qKY<\211\024\323\273\035\234\274;<\221\270\2755\224+=0\360B==\357\376\274?.\\;#+[\271r\321\003\275\333\234\316\274ci\336\274A\n.\275\316\302J\2744o\256\275\305\350L;Tw\237\274\337{\332\275\273\365\224\274\353v\247\274h>\021\274Qwr\275LX{:U\346\310=\nFO\274\246C\"=\225\267G\274\347\034\322<\355\324\302\275\246;Z\274\3113\312=\027\3676\275\216!`\275\312\t\215=3\363\200<\351S1=\254\307i=On\267=cC\362\274\347\322\"<>3\r\275\241;\356<\255Ny=\327T\335\274\006\231\362\274\0266]=\031\271\317\274K\n\373<Lo\227=\346\014\242=\367\002\215=\216\346\000\274$\324\362\274\340~8=\207G\213\275\251\031\261\273%@^\275\236\334\230<o\254\212\274#qU\274\266\272\245<\307\273\035\275r\214\207\275\006\232\001\275\210\3456\275)\2516<\247\360:\275\332\255\320<\277>\336;X\245\323<\341\346\177\2756\315\217=^\232\021\275w\335\326\275\327\230\325<J\267t<x\236\032=\307.A\274F|\003\274\227\202O<\364=\260\275\2601\247=\300\265\245<\257D\204\274\261\210*7\033\272\304\274\031\271\023=\036\3675<\2715\256<\207\204^=\326q1\273\2648\231\274\303\273\242=\354t\253=H\n\022\275D1\000\274(\303\256\274yz\232\272\334\241\033=\203\354\252=Y\215O\275\270r\204\274\315\024A=\324\027\263\275\013\314\035\275\360=k=?Z$=\343\033\005\273\016\350o<d\'\257=\300\000\367=F\2731=b\036\262\272=\272\230=\321\316I=\034\361\002\2757\315\227<+\252\214\273\323\232\010=i\230\021\275\335\206M\273~\356C=\273_\245<\027\300\324\274N\213\203<\212S\367\274g\245@\275\275\236U\275Q\211\007<\342{\272\275beF=\010/\361;\231\255E\275\031\224\244<BhJ=\366[\223=y\261\255<\336\006\344;\217x\001\275\262\244\t<\270>\200<\007j+\274\036\373h<\205T\226\274\220\235\"\275\272(\222\274\325\204\021=\313&\247\273\256Vd<!Y%;\366\323i\275\275\264x\275Xv\244=0!\231\273}\254\222\2742<\322;\205;G=6\206S=v3K=\316\"\217\2753\367\241;#\304G=\345&\002\275k\322\201=HQ\001=/?x\275\266\254\317\274|\014\211\275af\004\275\353}\206\275(.\034\274\235&<\273\034|2=\020\243t=\352\221e\274\270\021\266<?:\003\275;\003\350\274\210f\207<B&\001\274\2305\364\275\242^\260\274\236\262\276<{\324\r\275me7<\013\354+\275\3233;\275N0\200\275|\345\366\274\351a\275\274\327\314A\275a\027e\275\307:^\274\266P\363\272\354{8\275\202\203\214\274[I\204\272\256\"@\275\2400\004=:\303\305<H\321H<\315\247\026>2\371\010;t\337\313<Uz\246<\2138\255\274\224\355\264=\024\326\251\275Ne\233\275\324\264\014\2746\034?<fq\023=\222.\037=*\374\037\274\317W\001\274\'j\220\274\031\021\357;\350=\247<\250\267\234=D\201\361<q\025\207<F&\370;\245\306\213;3\377D\274e\216\025\271TDN<\331D>\274\347\337\344\274Q\267\002\275\235`W\275\027\3142\274\310\227+\275\353\351\365\274\227jz\274\177:\037\274\311\3155\275\226\203\007=\032\256\016\274\222,Q;:\036\242=\302\334h\274R}\023;\206\024\325\2744\003\355<\276\331\337\274[F_\274s\256\356\274\225\330:=\321Y\336\274Gd\216\275\371$\305=\3568\214=\240\276r=\240E\317\273\304\007\340:6(E\274\026 \317;\300\324\322<\200\274\367\271\235C)<\323\'#<Fs\263\275\354\354G=#?\243\275\313G\274<A\024\274=\3119I\274\345\332\037\275\310h\006=\317\225\224=\216\025\367=\001\370Z\275|J}\275f\0231=;\031\312=\352\350J\274\247\364\231\274B\322\027\275\272\235\227\273v\335\326\274\207\207Q\275>\033@\2743\033\257:)r\225=\024EX<;\021\374\274\016\367C<\353\304<=\230E,<\207\024\366;\336\233\231\274\357\2244=W\273\"\274\202\264\373\273V\024\2349U\322\2254\320\r{<\205\243\300\274W-n\274K\275u\275\010\032\276<\261p\001\274\236\r_=\372v\217\275eK+\274\377\253\261\274\247\225\373<=}\263\274\312\312\034=\200\207\365;\353\3714\274G\372V<\215q\253<`v\256=\272AM\273mi\366\274+\276\023\275\264+%;R\234E=\254\251\256\274\202\355.=^\200\225\275\200\364\254<\315\347\014\275I\332Q\275U\244$=\020\325\r=\260\340\377\274\007\254O\275o\'\346\274\346CJ=\22720=\351\2563\275\262Q&\2755\310L\275\250\263_=\361\375\355\274-\305k\2737K\263\275\343\005\035<}\200\013\275bW\232\273+\302I\274\016\240\303<\010\340\230\273\250\272\215=>\332\273<KW\202<\204\213\233\274\222\\\"\274a\026\375;\312)\261<W\022\365;\210Q#\274 \311C;\364j#=J\360\226\274P\307\234<o\030Z<\3400a<\331\230\217\274\217\357\244<q\025\325\274\266\013\202\275\253\344\371;\275\2467=9\220\323<\233-\265\274\n\352!=\307\307\333<\360b\352=K\263|\275\233\035\213\273\203\261\270\274\372\263T\272\351ve\275\366\223\271=<c\272<\007\210Z=\230W\241\275n\003\253\275\023\022Q<\320\027$\275\341\313D\2757c\235\273c\334\255<\355\014\200\274A\354u\275\'\270#<\351\331\344:\262\262Y\275\316\211h\275\271{\003=\375\006\362\275\324(\007<\236.-=_\'\231=/\314\373<;]\\=\001\204M\273\372\246\006\275\266\361\014\275\205&\305=E\206\247\274<\032a\2741\322\241<\000p\240\274Y\301\227<x=\316;\351\204\250;\342\334\227;\334\220\004=IG`\274\336\3556\275T\220\230\275\313|\"=s\223\235<\336D\372=q\323\305\275u\032\356;Cc\215\274B\336Z=y\250\256;\001\004\242<s%J<>\355(\274!L\227\275\033\266\262<\\\221\251\274\022\210\254\275\217gC\275#\267#\274\352\256\255\274\225\245==VF\201<\222\005\010:\352\220D\275\\^\220\2749\316O\274T\371\026\274\024+\263\274\310!F\275\004\034\033<K}\375\275^\212\363\274&f\275<\213Y\342<\031N\010\274\314\317\020<\325\0018=&\356@<\3435A=\n\225O=^\003!=\001\342\352:\270E\017=\247\252\020\276\252\320`=\342oi<\237\2507<\217xx<\223\275\220\2734\252\263\275\357Y\341\271~\204\031\275n*{\274\225\332\023=\033N\216=\222\262s\275\033&\033\275\237\n\230=V\231\212\274\331>\364\275A\341\216=\334\345=<\014\333\204\273\331@\367;\0073\310<\302\323\244\271\021\221!=:\336\322\274s\223E<\320\236<\275p\337\035\275C\362\033\274yM@<\371\004\265;\300\312m<&YA\275\310\002\252=\"\004\350\274\354\240\331\274\301\010\226\275zg4\275LPI=\010] <\0223\030\2751\341h<L<\013\273.\334\003\275p\343+<\331\235\'=\262\002\330\275$\r\206=\243+u\275N\207\300=\354\243-\274s\256g\275\334\343{\274\206\274\037\275t*\374\274\335\"\335\273o\204;=uI\366\274\244\025\002<\326\2453\275A*\372<\257\025\264\272\251\364\343<\363\326Y=3\225\200=?4\352\274(\315f=E\223\300=\034r\273=\317j\310\274}\032\322\274*\241\036<\301\337e\275p_\344\274\355\240\250\274N<\352;\352Y$=\320q\323\274\035\355\334\274\256iN\275\200\034\342<\024\000\022=\344|\221<+o\314\271\356j*=\220\333\'<\235\220\251:Fh\353<\004^\003\274y\037\213\275\017\2430\275\254\023\223<\242\370h<\231\366\312\272\222y\031<\013A\246\274J!y\275\3464>\274(o\204\273!O\032\275\274y\340\274%0X\274j\343o=\354[\201\275u\254\014=%f\225\274\245\215\230\275\326]^\275p\273}\275\242{\325<9\273{\274\317=\243\274F\3420\274\214C\335\273\373\367\\=\272\310E<\255[\003=QvM=`\310\033\275\037\345g=\252\3419=\340\321~=\241\006!<\300\356\351\274\252\177\304;\303\206\213\275\321K\n=\311\247&\276\272h^<\213\327I<^\375\314;\213\350\351;\t\241\322\274^\276\211<\210\225\204=\210\250\225\274\250\363\314\273\016-\241\275=Q8\275\236\231\301<\027\231X\275\302\005\316\274!\306\207<\177\212[<\322\324\343\274\300\336\003=\257\034P<\\\320\252\275\235\014A\275\255\266\272:(\206\034\275\310\300a=\326J\312\275P\232\313\275\377\254\231<\307\351\010=\362\033\244<\274\341\346;\234|l=\364\232A=\225\037\211\275\227 \242<\362f\360\274\336\357\207\274\231Jy=:dI=\360\006!\274\370\313\230\274\321$\333;}\357b\274\027\211i\275j\t\022=Qb\352\272\267\231\367\2715\266\r=VA\260\274)%1\274+\007\225=\027\326m\275\212\211Q\275G\370\352\274i\237\376\274\346\373\007<\226\326x<\3503\317\273\300\010\302\2748\232\301\273ww@=*\022\244\275\025Fo\275\371\335\321<S\207\346\274\212F\217=\304w\267\274i\247\324;\211\244h<|\332\006=\345~\337<\365\336\237<\220\202\235=c\264O\274\260\317\255<\310\306k\275\017\020\232\275\272\262E\275\370\305\032\274h\313N\275\326\032;<\233\267\373\274V\223\306\274\233\224\032\275(\021\342\274\"\346\256<\034\010\016=+\300B\275P;\350:*\244d=\271\350\263=\364L!<\241\205N\274\340\373\215<\327\275\341\274.\211\217=`\262\"\275ur\217=\220dj=E\r\254\273\236C\255\274\"\341h=\354\017\336;\371i\224<\341\311X=\252H\263\275c\333\214=J\214\025\274Y\253\232<\017\374\321\273\370\211u\275j\365\267<h\017\226\275\020\362\006\275N\262r\275\262\216\225<\201,\270\274B\'\266=\252\307\010=S\232\r=\300\371\277;hP\326:\232G\272=c\254#= \022\000=\374\211\326=P\276\361\2742\022\020\272I\215\224=\262\351\360\273\265\322\033\275F\232z<K\276y=6\003\352\274/\207\242=\220\222\263=\220pD<G\237V<\210\326\207\275\200\321\336\266\351\307\032\275/\3347=J\330k<:\212!=\r\234\353\273\230\304\212=\264\326\376<\330\206{\274q\275f\275\205c\242\274\200W\231\272V&\030\275\277\270\200\274\261\273\217=O{o<\350vF=\007\214M\275\200\345\205:\341$w=\336:\267\275G\372;=\302>V<\017\177F\274P\314Z\275\3670\255<\245F\236\274 >\250\275\266\235\342<\346m\014=\222\242\251=_[\234=\344\350C=Q\327\235\275sM\013\274\322\201,=\271>i<\271\342\353=\026xW\275\360\375Z\274\2632\000=\256\1773<\010\374M=\323\211\030=\343\352k=P\313\376<\206v\340<\364\212\001\275\310Z\302<\277km=\317i\n\274\030A\213=\r\217\363\274X=\026\275\013\324\201=\203\2207<E;\005\275J\345\\<Z\210\236\274\025\275d\274\225W:\274\347\205\301<t\177E\275}\016|\275\254\227-=\337B\254;\035\312\030\273\320\177A<`bY=\352\274)\274\253]4\275\271[\t<@G}=^\017d=YO\256=\344+p=\222_\266<%\005\247<\246\270|\275\201\326\030\275gZ\014=(\345h=-\235\331;\347\003\"\275\037\020\232<|\305B\275/\373\267\275\2043b<\276\354]=t\360I<\342\202\330\274?\310)=\243zH=n\314\'=\217f\240=\232%\265\274\007\323\251<\221\221\335\274:n\216<\301\230\271\273\025\273\000=\220\207\261\274K\307\341=\313\374\014>w\376\364\274\242\355\315\273,\n\235\275}N}\275&\353+\275Ok\022\274\033I+\275`\344N\271\330\225i\274Td\306\274\003\020B\2750\255\021\273\264?\244\274@I3=\273T\233<%\034G<\r#\267\274\360\301\253\275\001L\200\274\346\346\202\275?\311$=\\\332\210=t\035\222=b\344 <\206\265:<\250\027D\275\272l\342<\306\213i\275\330\n\351<F\023\242<|\266N=\371-\010\275\207\314\031\274\'X <\363]\240;\243\223\351<\264\336\212<\247\373\t=zv;=6\373\214\274]\307+\274J\301\237=$\307\261\275qz\243=\035\202*\274\016\275f=\345\037\272\274A\254\017=\032\261\310<\221\351I\274\247D\236:\322\243\177\274\300\355\327\275\255\340\271\274gz\027\275\275\350{\274wt\356\275\353\177\342<\324!g\275\310\211#;\231\200H\275c\234\177\275\356=\001\274]\333\355\273L\365\031\274zdo;\250P\232<\364\303\277=\031o0=\361YR\275\347\000\n=\353M\334<\335\214\026\274\250\361\253<\217\3573\275`\364\006=\375\227\371;\030MB\273{\247U\275\013sy\274@v\217\275f\351\031<c:Q\275%zd=\300\354\035;E`,\275\021\276\277\275a\305\304\275\253\256\'<H8\252\275\203&\346\273\242<\020=\345(\002\274<#|\274;\021l\274:\373\320<\222\343\273;{\002\322=\020\334\203\274}\347\253;\351\330\035\274o\325\321\275\216\257\315\274\207\005[\275v\206\037\275x\307m\275F8\300\274\343\334\037\275\336\363\364\274(\325\271\274S\261G;C\346\247\273bC\031\275YM\016\275(\313[\272\304\262\302;\336\003\222<\026*\024\275\265\324\221<X\245\\\275\027\014\n\275nX\205=#i\344\274\350\244p=s\013\205\274\253\333$\275:\275\363\274\006Y\321<\031v\307=M\253\002<\361Y1\275ap\275<\215\006f<=\306\214\273A\275\020\275\177\010x\274\263\302\323<4c+;\267\021\216\275rE\252\273.\357\001=\204\370\264\274=\355\234\274`{7=\210;\302;]\035\035<\374L\266\275,\213\203=\356\007\237=\013n\230\275>\241\226\274IK\335;\037\220Z\275\240\206l<D2\\\274AY\321;\177Y\301\273k\243\262=\314\024>\275\025\261\222<Bd\203=\025L\330\273\237\205\360\274b\263E=@\3661=\022\315\346<\037\262)<\303X\351;c9p\274\257y\324\273\025\373\214=\325\2312=\334\254\274\274%\206\207=\310\232\331<[\212D=X\243\215;\030\031\356<*\021\272=\205*\246\275y.&=\311K\334<\224\330\212=\177\203Y\275\010[n=\316ii<\350~=\275\323(:=\316@\024=\371O\235<.\246<\275i\373+=\212\273\014\271\373;\364<\347\"\206=\333G\026\275M&h\274)\346o:\004iK\275%\352\224\274H6g=u\200\026\274P\347\214\275\261(\030\275\010J\346< \023\212\275\274\352\214\273\365w\267:\3437\336\274\275^\273\273\262\373\032\2756I\376<\265\241\034\275\225\225E\273\323d/\274\204)\035==w\376\275\214\206\236\275N\315\244\275\336N\314;\r#\\=\026\254\004</}B\274\305\003@\275\2746\351<K\266\001=l<O\275\260\234\t=\301\277\232=\'\037\025=A\345\204<n]i=\300\215\264\274\302)\301\274JA\262\275\005fT=\336\"\010<\t\241\330<\347=\016=<\336\221\275[\345\260<\303\216\000=I\023{;\017\212\267\274\354\272\221\273\344\331&\275DP\266<6,1<\205\376\347; \035\232;t\232\374;\252\225\333;\372\006\022\274\364\210\t=\005M\016\276n\365\215\274\212\312\270<\016kd\274\311\277\216=\027\366\221;\025G\016\274\032I\333:\231/\340\274;\247q\275\364\003\311<n\237\031=H]\202<s\201\222\275\025*\000=\211\232k<\370\037\214\275\271\217\272<\311\\\260\274\036\252i=C\262\200=\250\2161\275\262\233\035=v\264_\275[\305)=\016e\210\274\337\215\024\275W\302\204<\013W\260\273N\316W\275\036e\377<\201\202#\275b\363\307\275\366&\377\274^/\205=\363\260\010\275A!\301\275\240F\244<\203\010\017\275\362\014\215\275G;\313<\002nS\275q\311\034\275ew\205\274i\326\225<(a\347;G\234\375\274\306\t\207;R\207\272\274\324X\235<\335K\034<>\371\r==+\315=\034\270\326\274\341\373\242\274k\356\017=/\002!\275\360XZ<\014x\014\275\373!\375<\270\273g\275\3140#=\223\225\213<_\200\003=F0\210=%-\245=\264\"]\275]G{\275=U\356<\rx\245;\214\250\347=\356\016\310\275\344$\r<\330d\361<\320\201\231\275Rw\336<\321\260\014\275\256=\034<\235\265\233=ki\344\2748\336\034\275\304\316\347\272\350\272\203\274\016\360\301\273N\340A\274)\030\306=\210K\016;\374>K\275\016\\\261\273\361l@\275\325\331!<_\266\221\275\340\270\200;\033b\004\275v\271L<\251\300i;\211/#<V\321\375<\334x\253<\377\355\202=\244\202\2638\203y\'<\214\207\200=\007\n\245:N\325I=\312j\321\274\005Q\217<\234X7<\347\2443\275\370x\271<iL\016\271\207{p=\037\250l=\3671\276=gm\226\274\225\232\277\274\244\342t\274\373b\345\274[\215\216\274\037!+=\271\363_\275\036A\275\2739\352\017\275\352\201.<4\302\266\274\227\366\245<\376\306\033>Q\270\021=\t\275j=\375\326\311\275\031\371H\275T\244:\275\347iL\275\005\207\273\275L\3126=\3138\237=yu\333<\341\3660\275\322T\352\274\316\311\227=/\251\375<\347\202h\273\374i\253\274?\343\236;[\014f\275UPU=\301\3435<|aC;\327S\365<}B1<\226\265\202\275\253i\"\275`k\341\274\227\246\270=0\312\300<\221\203>;\0063\227=\002\020\020\275\000k\305\275\003\315Q\275\254\202\232<\257W\003;4\234\346\274\322\241\227\275\335Y\305;\232\214\224\275-\006\352;w\275y=+q[\272\347\237\215=jm.=*\375e=\355\240\235<\344\304\241\273\320\036?=\267\000\336\274!\351Y=\016\3443<\314\321\216=\206:#\274\363\377\224<\373\265\310=-m\017\275r\216\030\275mv\307\273\033\251\332\274I\336\204=\372\220\251;;\316K=Xu0=G\n\035\274\306\347\001\273\211\\\n\275\351\221g=\036\324 =\326\232\262\274\322@\217=z$\345\275\311\221&\2759\244\353\270\325\235\205\274\224\266\276<\345o\376\274\352\264j\274\302\034\251=\300\214\202\273\254\321\306\273\323D\254\275\001t\317<\377\346\207=\002O\305\275\206\277S91,P=1}\345<\177\236\341;?|\005\273\337\334\331<\020fo<\325~\226\274#iP:\031\213\317\274\243\264=\274\335^\005\275\366\274\006<\302{}=\202\026\001=\300\032 \275\027\226\024\275\327\214$\275x\361`=\237K\253\271+S\035=O\312\034\273\313f=\275\030DX=\022E\231\273\346a\313<!\030\010\275\304H\261<\036w\027=\303\362\366\274\206\n=\275\037ep:%\346Y\274Z\315\306;<\204Q\273I\201\302\274Ue/\274\367a[\273\273\300u<\304\210c\275\355\361\014\275\335\324,<;\035\316<`\243\276\2740\250\032\275\031pE\275\371\373\326\274\305O\256\273\314\007\r\275\307\357\211\273\336\260\204\273K\303\346\275\202\007o;\206\261D=Sx\361<\350\256\326\273u\267\013=\343\200y\275\264\305\362;\225\301\341=\250+==@b\274;\324\336\030<\300h\\=\266qC\275\257c\225\273\003\333\256\2744\303];*\017\t\276\'\221R=\223\030\217\274\345{x\274\027\000:\274\2474(=\024\372\016\274\215\347^=\302\276\020\275\322\\V\275B\013V:P\270e=q\003-\274a\014\312<\332\336\244;\250\202>=\265\021\231<\004\310\200\275x\301\212<\265\320\266=?\355N=\205k\366\274\241\335\024\275}\332x\274\2756\214=I8\252\274\334-\020\274\210&\201<L\3357\273\2719\006\274\230\"S=`}i;Y\375\210\2754F\372<=\375\341\274\014\023\346\2730\010X=XB\024\275Z\357\240;.\240\221\275S_\020\275/,\022=R\300S=O\346 =\322X\354<;\327u=|m\317;M\206C\274\261\370\221=\253W\311<ed\202\275\034\371\356\274\021d\024\275k\377\202=\301\236\365\274,\264%\274/\251\037\274\336\n\231<\251\370A=\305\321\317<Q\274\242=\023\203\235=\027l\305\274ZM\317:\305 \031<\353\240\275\274\326(t\274\002\250\247\273\210wE=J\334\266=\006\001_=3\306\362<\021\272\007\275\004\035\223\275\250Dy<L_w=\326\213\221=\321\337\234\275\nf#=\225r\366<\272#\177=\233\355<\275\270\275w=SZb\273\327\313\324<\370\022\336<MJ\343\273\344\217\237\275\232V\221\275\034*\245\273\247\036\251=\343\020W\275\332\333~\275\307r\n=a\200\261\274\257V\r<\236\311\r=\266\320%<\361\302\240\273*d\361\274\241\256u\274\t\227\032<m\347=\275\315\314\216\274-\275\216;\033\352x<\340m\000\275+\n8=Gq-<\226\206K\274\305k\240<y\222f=\235\355\205\274S \035\275t\320\274\274xl\377<\377\250D=\225\332\246\271s\214)\276G-\232\275\376\317\264\274\3761\204\274\023\3410=\253D$\275\322w\272<b\376\013=:\320\014<\032\013\271=\003G\037\2743TR=\343\251\026;\031\027\322<k\2341:+\206\244<\014\204\322<\006\211{\275\201\205\255\273\315)u=q\355\211<d\301!\274\302\363\177=e|\177\275>r\021=M\227\352\274\262\006\312\274\215\240\365<v\356&\275\374\235F;*R\357\274\365\221\356=z\014K=[df;\017\315\312\274\301 \263\274\031\356\251\274\341O\354<\010.\223\275i_\374\274\251\201\304\273\232p\254\274 F\220\275\320w\226\275\351\375$\274\006g\327\273\340\007L\274\005No=\320\240\300\275xe\267\273bJ\205\274\026zs\275\3313\274<D>\256\274\325S\362<%/\357\274\303\227}=\006\214\002\273\366\373\007\275\024;\220<S\206\275<Y\336\006=\363\242?\275P0i\2747\3660\275\215\310\332\274\211}\200\274;\375\210\275\023H\230;\003Z\211=u\023\253<\2205|=\272\031}\275\272s\215\274\267\357\035\275t9\334<\263my<\2524\242\275\273\3515=\016\325<\274$\027\235:\322\363\024\275\245\272x<0n]=\217\252>=\034T\031=\231\007\341\272}\250.\274\324\243\264<\237i\203=\033S\030=\373%\200=L\030W=s1\243=\214cV\275,\261\306<fA;=j\276q=\177\212\324\275\331\242\001=r\326\346\274o\302Q<i\035\322=\037\327\007\275\330\317(<\226\337s\275\356<&=Z8\226=\265\217N\275.\373;\274u6M<\343*\351\274\336\204\311<\252\356\331\2758\001\004<M\277@<.W\013=\307\'k\275\202%\251:,]\377<F\230Z\274\351\240\216=\355L\202\273KA\206<A\303V\275(\005\225=\0361W=r\342\355<\214\340G\275\232\330 \275\253}\210\275\314\252\306=\252\211\236\274\273\244\254<@\n<\273\202\257\327<(\223*\273\014\001\013\275;\036\201<H\253t<\205\200\345<r\247\254=k^~;\300_\343<\304\2659\275\203\327B<\250\342\021=\\\351/\275\350\320\024=Ae\002\275uA\343<j\357\326;\361]p\275\221\300\275=\342\216c\273Hi{\275\346U8=\"\007a\274!\275d=F\211-\275]A,<l:\"\275\016\362;\275\271\026\014=%\273\030<\310X\251<U7\243<\024\010O\275O\207\240=6\237\204<g\312\253=\210\272\262\275\320\216\'<\000m\030\275\333/\315<i\013\347\275r,u=\022\027\260<\302uu=\35143\275\204\341\003<\037\001\241<\035\320\002<\246Od=\224B\251\275\325<\032\275\253\211\000=\275:\022\275\264MF<{\366<\275\213\307\346\272M\362J\275\014\253\005=A\r\252\274?T\232=\362\264]=\332(\252\274\243a>\274OL\266\275\244\250\020\275\r:Z\275\372\207\302<\026u;\275\376G$\275\257\376\226=\334\321\222\275[d$\275\002P\354:\242\3601=vU|\275rq!=Lt\270\275\3500\236\275\337%\224\274\204\354\352<H7\360;\010\210\017\275f\355\263\274\324\232\334\274q\316I;-\216\215\275\350\0260=\346\264\026\274\237\301\306\273\253\302#=\036H\024=\376l\230<\261\363\221\274\336\263\314<K\355N=C\027\334:\023\343\350<\326\002\344\274<\330\264\275\264+I<\202-\355\274\207\037\177<Y\226\221<F \217<)\307\300;P\004\004=\035\322]\275eF\034\275\261\366\000\275\231\332N=\214\020\351\274\r\023w=8b\001\275\372\326\211=\250\222\315\274 \313\245<$Yh=;T\030\275\325\266\221;\261y\335\273\261;\325<\273\206\025=\371Y\002\275%\007\223=?r\031\275\210\340\243;\214H\270=$3\213\273\025~\020;\220\216u;\315\214Z\275\010\326\245<,\017\215<\301\360\221\274\257\240\267\273\215\2400\2759\215i\275\324\362\001\275\245\210v\275&\206\024\275x\215\224\275\004]7\274\266\210\013\273\206Pd\275\232?c\274\334\032\275<b\377\333<\201y\204\275\236oh=\345\252=\275\361\325(\275+\231\206\275\373\030Q\274i\337\202\275m\263\271<9[F\275\036o\240<b\305\237=\304Zb\275\203M\254\274\325\016\363\274pQ\365\274\232\315d\27552!=~N\003<\261\027\020>\"\344\327\273GbE=\345(\034\275\366\251\245=4C+\275\357\016(\275\321b@\275Rw\373\273\335^\252<5\345\217\275\273X\201=\372\313D:P;\177=\307\330\216\273)\352\315\275W+P=\343[\240\274h\3174=\370\245]=\004*\221=\027\225\217\274\"\247=<  \224;\251?\347=\322L\020\275g\025\305<zV9<\302\006~\274\330\0147=\300!+\275\256E\207\274\340\243\327\274r\253\037\274\010\021\004\275_\375\307;U. <\013\300U\275@\374\024=\353\371q=\210\374\374<2\202\272\274\372\227V\275\362=:<j+F\274s\025\234\275\355M\031<\205\332\244=ch\n=\340\016\003\275\206\376\3629\022\225[\274\237\003\237<\331&\314;\022\306\232\2741L-\275\020>\n=1\207T\275\221\332\254=\n\371\n=%\240\252<t\251\327\274\203`\240=\026~\270;\376\023\207\275\236\275\257<\0260\035\275z\205D<N\351R\275\204Zf\275H=\233\275W^B={\032\267\275\246ex\274\226 -=\254R\223=\023\355M\275\260\023~;ay\276<\300]\374\274\\\r\227\275\345o\003=\224T\271\274c]\343\274\215\332E\275\365\331\203\274^\214\265;{\340~<.9\346;~\335>\275-\216\002=\220\311\277\273\232H\373\275\206\267~\274 \207d=D\253\034\275\316\376A<\220U\316<;\363)\275\023\350\223<\2768\251\274\363D\324<\342=\322=\276\210\215:\203\236\002<\036}\365<\374\240\014\275~\250\210<T\3432\275\007\014\257=Yj\364=\005\241\224=q\374\346\273W\231y=XA\210<\242\323s\274\206w\035=T\202\365<\026XC\273,n3<23\262=\r\024\371\274\006P\373\274\344\014$\274\251\274\233<\n~\376<\313Md\275\212\000\';\275n\247\273\303\2625<\370\215y\274\243\000\\\273Z\232\326=0kq\275{M\030\275\306Z\361<\321\375\255\273@\252\224<\214\365\r\2743L\262\274\\\016\202<\342j\305\274\306>\331<\301Y\020\273\361\376\016=DKH=\034\266\241\274T\370|=\215,~\275=kQ=\2527\016\275\004\245\216<\246\206Z=)$\214=\nd\360<\257?\031=4\241\321;`\016{\275\334\224$=\245~\035=\264\362,=\354F\374\2745\264\211\272\273\032e=\255\330\026\275\275\213\260<\035{\323\274\214,\365\274\352\002\274<\013\315\241\274\034}\217\275\000\016\200;dz:\275\275&\003\275s\267\224\275k\027\231\275-\336p\275=e\031\275\310(Z=Rm\376\271\232l\214\274\322}\t=\302\2273<\027S\203=l\017\031=\370\310\016\274{3O\274\322G\367\273\342\344\236=\205\342\206<\007\014\217\274B\325\316<\317;K\273\245\304\323<\333\241\\\272 \333!=\025\r?\275\364\331.<Wu\024\275\223\364\272\272\n\215\304<s\337\233<r\305\232\274\301\214`\274\221\305<\275Fk5\275X\0045=\316\211\314<-\211\036=\225\217\270\275\302\037<=\236\325\261=\307#\032\275\272\301\304<D\317\332\274\221\233\"=\366K?=\256\342\243=(C+=7\305`<\\\235\314<\232SM\274\017Jz\273\304\332\212\275\t\360_=C\311\216=\300w\326\274\370\245\226<4Z\205\275\241\013\324<\022\307\032\275k\004G<\363\345@\275\352L\362<\334\236\307;\211\234\222\274\370`\324<\213<\220\275n\271\375\274\271mL\274}$\270=\335\0372;\304a\207<F\313\371=\355\343\211\274\010Y;\275\232\330\026\275\032G\226\274\260\030\356\273\363\314W\275O(@;\370\311\370<\371\236\352<\210\020\334\2742\3429\275\310\272:<$\2421=\313!\230=\233K\001\275\241\316\023<\327\226\207<\203*.;\026\212<\275\311\217\200<\037\035\177\273>a\223<\266s\017=\347d\004\275K=\034\274|A\254<\326\271\013\274\313\231\201\275\206\310H<\347\007\263<|5\217<=@g=\371 \371\274r[\202\275\245\000I\275^\336\252=&\034\025=\244\214\316:6\262\352\274*]n<\226\200\370<3\323\232\274\207\332.=0\316\217\273\212c{\275g\345-\274Du\207\275`*\240<\3670\253<$\303b<yZ\221\274\177%\354<\274\303m9%\2619\2740\240\220\275\000f\014\275p\022]=?SC\275\345\024\231=\341ya\275(\010M\274\177\007\301<\025-5=\341R\020\275fL\342<M\336\263<\374\272\325\272w\263y<yy\223\273\316:\200=32\230\274\'\203$\274x\365\344<#\301\247\275}\237\023\275\272\025\212\274\253\226m\274}\301\237\2758<\215<6\364\305\274K\031>\275\333+\306=_$\211\2756h\213:+\354E\275\014Y\010>D\322\032=\262\034\374\274\356\270s\274Aln<Y\215k\2752RZ<h\206\346\274\017\301\030=2@\240\275\337:-\275Vx\270<TH*\274\321\267\031<\234$\014=\230\223\020=\367\245\234\275q\330-<\362e\\\275\r\224\037:\224\325\014=5\364P=\n0@=J\036~;c\372f\274X\3357<o\376(\275\272\177w\275Lz\037\275\264e\026\2742Q\030\275\200\374\027\273ID\030\275\025\336\366<\3718\300<\241<\235\274\n\362\324\274\330\332\376<\251l\277<\270\261\244\273p3!=\232\343\277\273\2373Z\274\265W\371\274}\244\257<#\357\303\272\245ll\274\353\265\220\274\346c\323<\252\324\t\274\304\254\246\274\010K\237<\276\215\270\274\243\007\375\275\310\020/=\372-1\275\365\253W==\224M\275\362\207\022=pS\241=-u\332\2733\025b=\000\374\002\274\245]\000=:\t\010\275\345\223\207\274\263\342\235\274\376\367\242\275(0\004\276f\025v\274\313)\014\275\252\222Y\275\034\352\032\275S\355\263=\371Y\324<\352\346\360;\365o\260\274F\264R\275G\261\221<(N\207\275\025\202(<b4\274\273\216\330X\275d|\266=\236\351g=d\222O<\345\356;=\332\t\244;/\346\017=P%\275\274\20662<\001O\025=\266\220j<\251\373\261<GzK\275\006]~\275\343\n\223\275U\036\r\275\200\253d\275sW\270=\212rR<h\265i\275;\3561=7\211^\2758\223]=\346\256;\273\336l.;$Vf\275\223\225\037<\233\347h=:\251\217=\014y\222<aD\311\272C\032A=\372x\216;\353\367|=\310\371\301<\202\3060\275\\\212o<\325 \333\275^?|\275\0041\224<)u\227<\2545\374\274?r\333\274rtX</!1=\233\007$<7\005\264\273x\3406\275\210F(=\327\035\022\275\032\246\235<c\222\265=\245I\037\275\266[\341:\243\005 <xB9\275\355\234;\275\206O\302<\260Y\022\2752\300\017\276\252\204_\274\330\314J;\261\031\000=-\022\357\273b\370A\273\265\222\261<.xK\275\000\315E\275\373\242\367<4l\276\274\337\273\331<*>\261\275-\362\331<CU\336<\323t\222=m\214j=\353\002\210=\247\333\034\274T\252U=\271\345\326=)\230`<\001@\266<j\027\211=\030\336\316=<\335\204\273\224n\257\273\337,\003\274\025\n\275\273\330\3518=$\377\310\274\020\260\266\274\317\356\230=\316\267\332<\n\204\020<g\220\020=\361SK:>\355O<\3329\264=R\035\347\274\223\376\350;\245\351\207=w\253\200=\203Q^=\315\372\325\274\004\"!=\304]0\275K\253\255;\226*\325<\r\222\021;?@\246;\246\201\242<\320&\263;\213kU\274\013R\005<m\311\003\274\013{\221\274\273\254\360\274z\362)=\225e\001\275\363!(\275\272Y&=F5h\275\203X\020\275\326\243g=+VG\275\"\221x=+\200\024=\276\232\245\274\201\264!=X\365e\274||\002=\356f\017\2758j\323=\025\203w<\207!\264\274x\225@\275n\374\362<\342\264P\274\312b_\274\005Yd\275v\035$\275oh\244\275\213n\335<T#\307\274\213\332\223\275\0257\345\273\002\360\231\272>\003\250\275\347h\205=D9\004\273\217\3169=\260\003\302\273\364\302\027;\211\235\033<+\007K<\337\375\014\274\227\252\016\275}\033\234\275>\201\203<]~R\275\220\315\213=\220\252\177\275\314$\203;\033N9<c\362\n<\342\252\010\275\346\252\222=\247c9\274\303H\225=9\261J\275wf\025=\006;v<\0161\317\272\276Y\252\274\260\201X\275+Ya;\025\260\241;\325\330\346\275hJr=\302\002\266\273jX\\\274\211\305\002<}\177\320=^(A\275\314\325\023\275\251\350G\275\312\371\201=+\321\210=\323\260\233<\300\r\027<\375Ai\274\255\362\355\274\341\342\020=\326\376\200\275\344\226\226;\371v\013\275\022A\026<\274\214.=\371|h=,\243\023<\326~\007\274\262\013\007\276\230\257\036=\r\350\027\275~\226\021\275tn\005\275re\321=\210\254\204\275\335\317\226;0\365F\275Wv\252\275\010\250\211=\211_j\271S0\302;P\230<<t\016U\265\223\006\200=~\202\260;*\375:=|XY<6\254\274\273n;e=\2148\242\274\344\236h\275\014+\322\274\275\237\225<\036\305\314<f\234\024=C\203\013\275\213m\322\274\363o\314=4\222\001\275\275\017[\275\320\031\365\274\3740[\275\346k\252;\357{.\275,\323\276\275\237)\035\275\300\265i\275\017Q[\275\177W\366<\351\")=\016\217\204\275\347\234\024\275\323\246\222==I\024<f\341=\275\340\016\002=n\214r<\255\344\253;J+\035\274\337\231\226=>\206\027\275 \307t\275\367g\006<X%\211<\370\324\205=\277;\245\274\022\222\244=\nV\246\274\025\247\002<\020\017\215\273y\030\017\275$\027^\2751\222\307=Vh`\275V\252w<n\266I\274V\261\211<\r\277p<\036\035\273=\206\000\207<\031\206F\275l\266S;\0218\013\275\314M\365<\261\235\352<eh\213<}\017\331\275\375\260t\274n\322J=}\257\031=\3067 \275X\333)=\341\300A\274\003\241i=\263YQ=\020\315x=d\264\233\274)W\005=)>\006=U\337\225\274-\212\020\275\"=\214<\030\263\330\275/\366\220=\253J\232=\211\347\236=\313\235Y=\365s\006\275\2507\245\274\314R-=)\373\361<\263\310K\275\232\036\250<\024C\363<\371\212Q<\273\264\361<\347\333\372<\213\0170=\026c\271<\214\312\276=\257\2342\274\273B\257<\371\252h=\321\307(=\306\345\352<\257\3243=od\301\274\230\363\020=\224\353\302\274\"\021O=\r\2212:\002\356\205;\357\024\207=\377\307\006=\301N=\275\264\356\316<l\210\261<\221#\230=\023\241\244\273\350[B\272\0376\340\274\033a)=;\210R<\251\263\314\275\252\201&\275A\333\020\275\335+\342\272\262~\375<t\001\307\275W;\215\273HIS<\325\247\333;\235Y\200=\215\324T\275z>\007=\r\023/<\235\3417\275\200\035\215<\221KS\274\371\320Y\274%\240\200<\030\017\027=%\322\007<Dq5\273$\r\013<\313\324\347<\302\326\005;?\rH<\255dz=\263\271\245=\364mo<U\245\227\275\372\022\002\275R\210%<W&)<p0T\275\364\257\034\275\270A\320=\343\344\202=>\340\220=\341K\275\271N\352\010\275\307M\221\272&\312}\272\222V\211\275\027T\025<\232JK=3\271\367<\236)\177=\000H\271<\274\205:=\353\225\242\273\347\236\306<\307\370\000\276\003yr<o\333\277;;n\350:\354\355\010\275\221Y\224\275\367\300\361<\213;/<E\002\r\275*\332\2229\263kT\274/C\367:\364\251\373<t\373\220\275\003_\273\275@A!<u\006\215\274X\027\002\275\253\326.\275m\230S<\365f\323;\027\334_=`\230\336<\217\316K\275\345\326\034;\230\246\204\274\341:r;lk\347<\377\365Y\275\207\325#=\032\227\233\274j:z=\351EG\275Q\014d\274\210\323\203\275\010\007r\273\243c\202\275,\313\336\274\343j\002=\233\003z<\377\2014\275\230\354\001>\262\013^\275\211g\024\274\3605\246=\206\311\224\274\353j\346\274\347{\316<\256\3304\275\3037\214\275\257\225\206=*#I=u\206\025\275PX]\274\303\252q;\267\243`=\227\341\302=\361\3617\275\243@m:\271\303\262\275\024\"\306=\261%A<\323\001N<\005\214\342\275\201y\351<\302\030\240\275\376\026\331<\240E\212=\231\351\304<BV\216=\205\271k=9\'\206=\236w\311=\336,\036\274\346\300\332<\221g\222:\022G\205\275\302:\252\275\"yE\272\272qr\275\352U\231=!\225\013=L2J=\215\331u=\251\303\364\274m\027\'=\265\362x\275\206y\217=\232]Y=>,\334;\340Ey<\244\371\213\275\203\366\241<|\307H=\320o<\272[(\322;\300YF<!{5=\244\254\246\272xi\"=\203\370\001\275\351\266{=\271%\\\275\353\024\247\275\367=L\274<+\027=Gx\033\274\215\207A<\t\364O<\264\315\254<GA\272<\353\257\230=\003\025\256<b\367M\275\244\316\243\274%\242\240\275Na\010\275`}\233;K\363`=)a%=4\321j\274\352(\010\274OnO=\031\211V\274Q\372\333\274+9\363\274\013\227\262=[\267i<\204\233\340\274C\213\276;3\004\013=T\237\264\275\323Ai\275_\311$\275g\035D<\231\006\251\2743\273\010\275\226\036E\274<:W\273\245\361k\275T\020-\274:|N\275\204\210\266\275\217\246<\2742u\010<\270\322\037=\326\315+\275i\324\337:\323\371\240;r\242\200=0\327\327<&\256p<%\0269=.\257G\275\253A\206=\217Ju=)\307\003\275?\357\003=\253\263\207<H;\001<#\320\346\274n5\335\275\353P\200=\331\006\244<\364\272\247=\033,\207\274/\337&=\255+\240<\3337h\275\373\277\225=\264a\035=\301p7<\321\345\n=\377\321U\275\321\272H\275\032\314\211\274\215X\030<\364\0044\275\371\366\262<\242\235\266\274d\3768=\205\345\245<\032\375\362\274>e\244\274\303=w;\311\331\315\274\203h\310<\265`\273\275[o\305;\231\332\332\274\002s\035;\263\033H=d+z\275\021\375c\275<q=\275\244\254\023\275\034t\245\274-h\020\275\272\301\222\274&|\331=\024\220\\=\361N\005\275\257\262t\275\223\274\266<\016\343c<\203\374\032\275F\202\327<\343\256Q\274/\250\013;i\336\301\273\201e\367\275\314\016V\275y\036V<\374\260\252\275\355h\305\274(R1\275i\331\007=\032Km<N\212==~\031t=3\356\202=\006\311\342\272\n\363\036\274\236\206\212;\323I\225\274\327_)<\376\370\232<\371\003\334\274\212\376\236<h\251 \275s\016B\275\211O\007\275\036\261\320<k\350\245<\201\032\221\275\306\275\021=\321\014\333\273\360\230\023<\005\341=\273\303e\325<\207\200\031\274\372\336d\275\234\'\336\274\tyy\275.\3621<\325\311\323<V|\320=\255\352:<\236\200\201=\333\000\024\275\204\375D=\354\362\200<\267\201\343;X\226j\274\220E\374\274\200\003]\273\246\030\350\274\205\247l=\214\360\367<4q\335=\272\312\014=:\206\343<\366 ;\274\333\030\273\273&[\233\274\374\266\030\273\313d\035\272\322\255\036=r\014\203\2753\007\232=a\343J\2755c\"=H\261\250\275@\370\275=\226\2251\275\354\256\374\271\016`f=\353|\213<B\261\036<#\225\252\273\252\364.=\322\227p=U\341\025=\n\357\340<\330u\316=#\315\326<\337\233\363;g\316\374\274\363\025$\274\025\233\021\275Y\327\360;6\005e=d\315\254=*\344\004\274\345\207<\274\213GC\2747\010;=\373\351[;\220\336Y=D#\202=\031\305\214<\217,X\274\r\335\003\275\031\362\343\274FQ\256:\360\211\213\275/\3721=2e\373\272\356\335\232<#z\205\275\254\251C=\252M\321;\177\260^\273\210!\326\274\n-\305=\203#\261<K\352X\275-@\276<\324\216\224=%jb\273q)\225\274\322\377n;\260+X<(7)<\t1\0019\244\024\315<\266G\013=d8\005\275\343\030A<\301\204\352<T\213\267\274\334\234\002\275\200\201\370=\234\3064=\204\307p=\261\374\244<\214\177c;\215\271<=M{D\275d\025\177\275\006\025u\274^J,\274\341\235\253;\370V\237\275\333\266\317\273\210\346\000\275\321lo=\255\222\300\275\315\374A<\226b\021\275m.t=\351\030\035=\3179\204\274\246|\214<m\212\250<\366\362F=\303\241\313\274\343\177\"<\361\235\211=\2602\260<\211U\006<\333\367\275=\246>\201\274\3773\210=\0069\271<\240a3\274\320n\366<O+\235\274\322\003\312<\240\320&\275\300&U\273\315\252\256=\270\344\337\274\376kT=\352n\212\275\353\007\277;\357J\373\274:\264(\276il\005=\200r\007=\177\245\226=\234\355\253=\232\355\351\274\262\301\224\274\360wH\274\257\317S\275\316\341\270\274\372h\001=\025\312v<)k\024\275J\327\277\274]\211q\274W\216\303;\3779\007=\255mT\273~-(<\373\3428=\234\r5=\347g\277\274\253\014\225;\340\354\323<]f4\275\276\327}\274&\326q\275`f\303<\272T>\275\221hP<;\370\332<\006/\214\274\247\225L=\347Jp\273\351\230-=\263\377G=\362q\230=Sf\n\274N\237\235\273\214\333l=\200<\306\274\274\304\365;T\335\363\272BJT=\273\'a=`c^\275=7\223=,\261f\274d\260y=\247\004f=\177\023\244<\346\256\316\274~\025\246\273N\234\021=\203\214L\273\2628\351<\324\252\247\274\207\314\250:O\377\243=\355x\337\273\236:\037<rW\303\273\366\032\330\274\033\227\323\274|\276\205\274n\336\232<\200,\373;\335.J=\356\215(\275FY\235\275K>\211\275\2062\024<\203Lx<\330\221\340<(w\353\274\246\241\334;\254:\353<n\202\321\274\033\034\376\274\253i\314\274\335V\211\275\373\302\246<$\"\327<f\211\357<\376\370T=CJR=*2\200=\030F\222=9\224h\275\216~\371;\320\313\300\275\200aM\274F\217\246\273\325\374\376\274bp_\275\231\376\014\275,n\336\274\210\345#\275\322\021L\275\323\250\023=Yb\307\275\352\227\270=\024\025s<x\206\023=D\272\306\274F\'\244=\337\361B\275x\263\035=\233p\233<\334\363\272;\t\177\371\274\261R\360\274O\'I<\310t\037\275?\331:<Ro\320<rg\341;\271\347\013\275+So=\235\323\325<j\272\"\273\013H\200;\024\233\035<\032B\\\275\357\226;;\214\3149=\026\277\221\275\343 \001=\202\200\300\275q\215~:\022\365J\275\352\034<=\266\345\256;\303\224\350<\337X\213\274<\305\226\275\235\346\n<-*\230\274T\\\212=X0,=\312\261\363\275R\220\265\2744\255]=\2344w=d\377\373<\230\'\017\275\0379\023<,\314\304<\036\004\310\275=\353Q\274\022\223\217;)\3427\275F\205c=E\335\000<\356\177\216\275@T\"\275e;\356\274\320DO;-H\244=\377\235e\274\212\002\253\275\034*\034<\270h\331\273\336\3367=njX\275\371`\225=\302\361\027\275\341_y\275\255\232\030=l\225\t=\333\252\310<t*\360\274\347\231t<\223\370{\275\355\257G\275\217!J\275\031T\206=\177*Z;\267\345\362<\224;\246<\206\244\031<\t|M=\324*\014=\231yH=\017\360\227<(d\301\2753\'C\275\335\\\036\275\314=\351<\"\214\240=\336\362\034\274\357\374\322;\373d\276<\252\224\202\275?\234e\274m\3736=\215\337\221\274\253I\031=\326\334\204;\312\307\024\275\365\316}\275\r<\312\274\001\305g\273o\310(=Sy7\275U(O\273\250\270\n<\366\221\034<\010/\375\272Z\004\201\271\035P\251<\250T\235\274BOQ\275\210\260\355;\276\230\202=1\320>=\270\224\261\275r\276\366<\354<\033=i\r8<2\032!\274\307\\\264\272\254\361\236;_dI\2750Gb=\341,\205\275\002\370-=\314Q\256;\326d\334;\021\354E\275\215\2219<\3113\003<\316\242\254=-\314\207<F_\232<\207(N\275\214\020\324<G\337\t\275\340\244D<\364\332\203\274\271\335!=\352o\350:\265\336\212\275#b\331<+\261\276\274\217\352Y\274\315\302/=\331\203\021=8\215\310<\320o)<D\324\264=\202\367\000\275o\330\037\275\257\201\230;\026\251\006\275\340/\262\275\000\004!\275\351\323h\274\372\2034<\327\346\310=\000\376\231=\336\312\314<\37271\275a\2475=7\364b=\322\272b\273\275\346\264<-\277\n\274 z9\275\242\274)=\336KG=O\036&<2v\255=\362\017\r\273(\314J=\3726\025=\277\240e\274\325\306K=\351\1772<\373\351\231\274\360\001U\275`}S\275\365\371v=\014\340\272\273)3\377\274\037<\237=\346\265G=`\000r\275\2141\205\274\304=B=\372\257\001>\207\236\217<k\345c\274A\320\2768 I\241:\346v\002\275\321\217\376\271\246\3647\275\213\207U\275R$\363\274|\230\300\274\353g\260\275,\365\315<\343\3717\274&\373\277\2749\233\215=\002\264\272<\203\307\026\275N\334)=\023\336.=b\332\307\275\206\271x=f\274\036=%\225\226=\272\346d;Y~\215=.\3408=\323.[\275\324\302\320\274\201\212\254\275\226+\257\273j\253o\273C}\201\271(W>=\275q\004\275k\353\'=\377\303\235\274\237\0030=\233M\215\274\177\260\206=\251Mw=\001-;\2745\030\242\275lz\357<t\377\210\275/\207\216=q \202<\327\211\237=\377d\017\275|\330\026\275\016|L=\310\023\030\275f\302i\274\177\355 <A\036`\275\003\324\256=\367*}<9\016\307\273m\3739\275\335;Q=\200R3<\361\201\275;\324\325\212<\320Jm\273\235)M\275l|\362<\206\031\202\275\256A\316:\336\247\361\275\366`0<\21034:\020`\365<\234\215\226=\232\224c\273\312P\352<\3659\006;\256\337\216\272=\032\372<\241\362!<J7P=\215\202\034=\221\233\257\274e\r\262\273=\276*\275hc\217\275\1774\376<\200\003\363<\263%o\274|\246\242\275~\342\240<\212\017]\2740h\000=\2205\177\275*o\325;(\353\032=\303\030\341\273k\362N\275\2076(=\242x\n\272\215\317\257\274i\356\213\274Xq\230;\304\345\344=\314\360\324<\273SA\274\220\323\017=\005\232\223<;\245\226<_\034\343<\227\216\032\274\301Z(\275\350>\272<r\036V\275\356m\357\273L*s=\336\275\020=0\275$\275r\251\241\2735<\004\275\026\303\023\275\013\260u\274\200\rX<\247\257\022\275\r\034\370<\341\033\\\275\301\245\252\275P\3173\274C\204\215\273\371\205R\275\344\344v<\305`i\273\027\371\004\275\372\306\n<7\216n\275(E\361<\2153\323\274\033>\220\275\261^\225\275N\257\223\274/\0078\275U]\361\274\341J\314\274\257\337\340\274\312\022\277;V\366\036=\305\354<\275\007\252\237\275s\037\243\275nD\371<\231R\307<QgQ<j\002c\275i\377`\274:sL\275S}\235\275sB\333;\226\226\275<\"\2609\274;\203$\274|b\004\274\230\3602=\2378Q<\001\370A=V&\014\274\341\377\362<[\201\031<\237\362\004\275\214\324\r=\337\016U=\211\261\340:;C\234=\003\315d\274.\324\231\275\346Q\223=N\336\313<\264\231C:.\345!\275\273\353u\275\215*\214\270\357\200M\275\275\211k<_{\246\274)\330\247<#i\212\274\204\372\033\275\036WG\274\311\007\237\274\255\260\203<\005\364-=\303\271Q=\0272s=\037\022\000<\311\226\200=\t\245\315<N(\261\275\230\321\223<\033|o=\351-^\275K\371\330\274\027\362\200=\017\372\234\275\331_\374<\313\324\343\274\201\312\210<\331\367\235\275\344V\325\272\014n=;=\265\230\274\237\252$=\251\022\271\2736\222\264\274\317Tg\271\241/\264<\0311\374\274\316c\212\275\322\302\211\275 \336\177<\212aN\274\274=o<;h\242\273\335\037\025=\013\322P;\341 (\275\350\351\325;\353%\276<\273\3710\275\275\302)=\257\263\027\275k\215\007:I\201\236;gk\373\274m$s=\231cj\275\354_\032\275\303Zi=\211\2631\2759\001D\2753t\305\275T\320.\275AU\214\274^\335a=\010\013\213;\245]I<\377s.=`\275L\275\360\306\264<\017\'>=\206\253\013<-i\211<P\306 <@\362\240\275}z-\274\027J\274=^\3679\274\201\332\313==\272S\2751\250I=s[\021<\353\323\231<|\275\227=\026\305>\275\373\242\000\275\323|=\275\214\257\217\275O\356\367\274\304H;\275\251\0053=yS;\275P\036T\275@\300\253<WU\341;\216B2:6\311U\275\'\306\333\275\017\334\233\275\364\221\205;IT;\275\220\260\237\2750)\314<T\361\205\275\tV.:\361\177\313\275\371I\305:M\025\353=\213\233I\273\365\377\017=\312\2151\275\252\224.\275\346\305\037\275P\010\324\274(h\274\274\225\014!=\25099\275\242\242}\275\026\263\037;\236\014h\273\n\275\254<\213G\n\276[GL\275Y( \274B\355r\275o\373\r\275r\222\213\274\314\021[=\352\354\315\273\257\031,=G}\204\274hH\001<\024\022&\275\036\232*\275\342\256y\275\271r\367<p\326\265<\337M%\275*\227W=\177\343d\275,}\311\274{uE<\025\3661\275\020*\232<\234\265\367<\220=\300\275\225\324\254<\302\235\032\275R\261\214\275\207`\026<\351W\205=\204J\253<\276/\000\275W\036\247\275\336\244\324\273\272\257y\275\315\247\205\275\346+A\275\354\302\223\275}X\231\2752;(\274[\267~=\342\205\370\274\317I\223;\344\216\020\276\023\243\006;\222h\312\273\374<0\275p\341\322=\203Y\253=k\261\220\275W\360\316\274>\227\234\274D\301\000=\245c\311\274\234\236$\274e\255\220\275\255:\010\275\200\337\335\273z\236\221\274\026\345\206\274\032\320\252:\376\320\r=\022\263\270<\340\317\037=X?b=\341\237\031\274\314!\273<i/\267=S\2221=\375t\257\2759\274\321<\2639\223\275\270\024\217\275\332\260)<r\221\r\2757\2716\275\370\277\032;\220\343;\275\235\273\030\274-\2110\275\232\340\243\275\035\217\377\274\0207\336<Ap\r\274\000cu=\356K\225\275\265\376\003=M\272*=\373\000\026=D\357\330<S.n<\205\323294\355\005<\271\n\303<\230]S\273{\332\262\274B\001w<\333\245\005=$\026\260<M\230e\275{\006\247;D\271,<\326\343\315<\036W:\275U\224\006\275\nM\200\275\030k:\274oX\006\272\277m\343<G\220\226=\262\\\301\274\036\203!\275~\265w;+\337\204< O\361<F\006\312\274\306\264W\274)\270:\275\305\n\266<\322.\005\275\330\250\200\275\000\202S=\271N\013\275\000\233\256\274\3271\231\275\036\230\222\274\010f\322;\312\316\207=\234<\303\274\243\305\"<\260\\\340\275\353\002~=h\274^<%&\020\275\305\221\337\2746\346\301=\344e\306\273\260\233\354\273\002aq\274\335\031\r\275\200\274\212\274\rt\016=\177Y\226=\034\200\342\274J1s\274\2502\250\275\307\277\027\275K\315\204\274\203X\004>\312nY<\3753\030=FGE<\t\035\334\274u\200_<\301\331o\275{\366\224\274\004=\220\275p\270\316=\312v\334\274mn\243\275\376\244*\275$\367\337:\2647\337<\266\217,\275\013*\332;6\272\023\2752\252U<\376\016\021\275V\312\010\273\331\221R:\251\036\204\274\277C =v\010\210\2752:\243\274\345\262G\275j\000\365<dLd=\022%\206\27563Y=\351&\r\274y\027\n=CT\217<\322\024\334=C\353\320\273\002<\242;\301\313=\275c7\342<V\364\202<\330\0343\275\260\270%<\364\240\201\274\3543\301\275C\324\252<Lz\022\275VG\211;^\302\253\274)\300\313\275\326\"\037=\004\371%=l\214\233\274O\376-=\216]\300\274\201u\271\274\3021\306=\334\201Z\275\222-\301<\251;\'<\005R<\275\256\344q\2743\310\310\274\310\004\016<]\371E\275r/\005=d8u<\334\347\342=\000K\330;\374<&\274\3352\273\274\233\367\240\275\316a%=\305F\200\275M\216\223\273UH\217\274!+\225\275\226\222\223<\207(\016\274\004s_<\257\314\264<\247@\t<^\232*\273\374<K=\233?\r<\027\366)\275\247Q\325;p6\216\275\227\220V\275\265\302\272<\227&\300<\214\221\0009y\t\014=\257\372\005\275\242Y\242<\345\3118\275J`\307<\366\325\230\274\250x\036=0\213\263<\023a\210=\333(\204\275\303\241\211\275\217D\014\276\374\303\210\275\242u\231;\262\010\365<y\313\324\274\241J:=8\356>;\240\n\331\274\341\230\027\275c\357\005\275\030\n\r\2743\200\020\274\265\023\372<\300YR=\006\362*=q^v\275Sir=\241!\332\2742K\234;\002w\214;H\364\372<_\237\244\274\301\267`\275\035\'\343\275\251\3409;\326C5\273\207K2\274\344/(;7\262\356\272\rJ\230<\016[\260\273\223p\3209\013h\277\2754\033\326\274\212p\034\275\tx\025\275*\224\264<\2153\326<\230B\013\274\271I\347\274\243\010\214=\017s\220\272\373\255\205;\333\000\326<P\357m\274\306\035m<\233\";=\361[\215\274}ZZ<\346\235l\275\221\346\235\273\034\373\003\275\000n\206\275\270@\342<\375\261\337<@t\244\275\356\004\325\275\364\255h=am\364\274\025\243\236\275O|#\275~9\r\272\002v\021=Vz\245<\371z\250\275\031TC=P\021\247\274\227\242\311<q2\375<[c\035<\245\224\000=\r\002m:Mr\346\274u2-=\331,%:\247\267\336=\261%\344;\351\300\243\275\216%5\275N  \273\320\357\225\274\264\276&=\364\351%\275\353^V=\023\\\347\274\347x\034=\304wd=\0073\004\274\363\203K=\376}\t=~\001&=\2449\207<\035\246\224<5\r\257<\344\356\026\275\333a\304\274\342\362m=_\230\274<~Y\324;g\320\241<\225\237i=\372\236\032\275\004\371\001<\363\350\204<\247Q<\275Q9;\275+Z\017\275\354\025\267<\221\014\230=4\027C=\213\223~;\211\223<<\245\317\t\274.=\310<!\243\014\275\207&\252\275tl!\2743)G=\031Y\271\275\212\\\031=\273\242\031\275+\343\303\274\227\350Z=r\245/=l\261\2549\247\256\034=\222\344\031\275\025A\301=!\037 <<6\3469\246\343|\275\242\220\203=D\301\034\2756\035\213\273y\245\315\274\247dO\275^\031\215\275w\230\014\274o?*<\356\207t=\331\250<<\332\t\273\273\224\230\323\274M#\233\275\272\036\273:6\227\2728\243R|\275\366\2566\275\336\336o;\324\376S=\332\321\307<U\374\211<U\366\303\273\273\271\321;\006\375j\274c\034\r\274\320\260\253<\355\361\204=\033\3647<\232P\002=\232\307]<{\217\014\276\325l\244=\206~t\275\t\315\201\274\005\331\212<]i\255=\033\254N\273y\210\252\275#=\203\274\316\203\345;E\227\271\274\253\356$=X\032\337\272\334s\233\273)\306\276<\213z\033\275\352\3276=\251\025\214<\363$Y=\305\2277=\034\217F\275\324l|\274\214\275U\275\344\243.\275\201\210\237;\205\204C\275~\311T\274y\335\233=\2045(\275\000\213\005\275\363\220\357<\363\002\342\274\235\335\343\275_B\202=\222D\312:3\022R\273\377\026\360\274\246_H\275\211/K\274dC\244<P\302\216\275mU\224\275\341\"C\275\014\372;;Ir3\275\315@$\275\232\261\320\273y\345\231=\215\036|\273\307\264m=\352\311\256;VZ&=\247\253\217;\350\362\270\274d\245\305<\206\026\206:N\361\033<v\222\2648\261\352\024\276!\234\202<\373\330\300\274;\360\022=\273./=v\370\235;3\321?<\310}\207<\315\263\030\275;y\365<X(V=\367JL=YH?\274U{\316=M\342\225\273v\241\243\275\350\224\225=\360[\252\273>i_\274\267\027\242\274}\323\222\273\247c\312<\037\2404\275<\034\203=>\242\273\274\212v\231;1KF=;n\302<\311\316\201\275lA.=\314f}<\200d\026=\027\214\206\275\222\377\271:\260\255Y\274\241\n\322;\016 \236\274>p\016\275\237\304\031\274\372\243\347=h\206t\274%\305\363<\251\334<=17K\275\313\262D=\202\363,\271\317\330Y\275\035\261I;\374\013\301\273\262\247!\274\341!*\275iM?<\031.\305<\277\346&<\235D\320=\310\350\033\274\323T\333<j\3347\273\302\323\247<\377\373\347<\372x\214<\0146P\275\247\310C\275n\265\313<n\375)\274M\000\323\274ky\261\275\323\354\200\275\371\365#\271\201<4\2743Q;\275\206o\244\275\227N\372<\'e\353<\226\000~\273\020\251;\275CG\007\275\016\200\367\274\0269\244=pP\216\273P\003c\274\235ws\274\305a\\\274C8\037=\217\n\211\275\241p\340\274\002\2572;\241\303`\275\211\001\264\274\300\254\220=\366z\233\275\275\355\371\273\204\361\205<`f\n\275\323\247I\274\017-?\275\205\027j=m\323\355;\377\240\371<\312x$=8}\300\274\345\n\017\275\363\037$\275Q\207E\275\317B\035:\030)6;\225A\306;u<\320<\251\277i\275e\372\177\2749\t<<\372\030\253\274\306\250Z;d\037\217=b\373\014=\315\345\200:\272\016\014=-KZ\274\264\314\014\275\t\017\\\275\t\202\207=b\360\356<>\245\341<J\242[=-\\[\275\271\260\\=fZl\274\360o\";Mn\035=\273\370^=]I\223\273\016\350\344\274d\324\236\274\3668\226\275z\252\350\273V )=+\343\205\274!\206\372\274\361\245\274<\306\035\027;\340\350\031\275\017k\017=\316\253\267\274\311\264\315=\257\256\300\274\215\312\202=\007X\272<\2261\206=g\366\027\275~\246\n=\333\363X=o,o<>\224J\270\251\033d\273Z\025\206\275\313\260\036\274\263\305\267\274\3023\246</\010Q\275\037\355\232<!\271\276=\300\316F=W>,\274|\032\336\273\217\206\265\274\260\312\007\275ox`\274\374d\275<\377\305\352\275`E!\275!\\f;cJ7\275\376\177\010=,G\246\275\337\n8\275j\306\207=\013\272s=X<\024\275\217\022e<\321\312\037\275\271\2045\275\216\207\032=\322\027\352;\310Zc=\252\314p=\345ek\275\237\303\376\273%T\266=\261I\206=u$\303\273\006RL\275\'\226\010\274z\375\203<\314\261a\274;\262\240=:9G\275\256\301\230<\345\304\350<\276M\206\275\256\3359=\364{\316;\250\226\341<\337\002\"=\351\"a\275\007\246E\275\256\367\220<Z%\215=\003\016\216\274\352\317e\275;\255\326\2724\360\211=\324\301\220\2759r\357<1\003~=9\323\177=^`\351\274\375\225\220=\377H\237=\324\003&\275x\333\265\273\342\177\361<a\220\220\2745\250\035\274\335\367\375<0Yc=\343\271\217\274-\374\036\275J\2324\274\264\201\270;dg\301\274&\236\303<=\245\035\275\252\362.=<\332\"=\234\333\220;\306\334\212\275\355\023\2159\234\252\266\274\371\0252\2748[@<v=\277;\225V\370:\020\242\021=\0109\031<\022\3727=\007\214.\275\310ar\275\207kB=(:\005=\254\013\321<\271\337\232<\337CE=\264oW=672=\365\017e\275U+C:\207\204V\275\032\265\212\2747\271\246\274\236\024\213\275\203\355S=\346\356\250=\3572U\274\006\273\031\275m+\262\275\371\276d=\376\334)\275\004\021\265<e\305\234\275\370\"l\275N\364Y=\"7\001\275\356<\310<7\376\207;\303|\210=r\010e\275\210\354K=m\356m\272\353\245\214=e\256\337=Q\260\373<\253\"\217<y\225-=\030\276\r<\374/p<\373&\211;ZJ\241\275\306P\267<\344\337\276=\360\003f=\032\003\203\272\347\263t<y\027\372\273\3673\255<\005\002\350\274\213\357\362\274\275\035r:0\034\207=\336fX\273\233\213h=\023\217\035\275\261\014.;\202\330\203=o\225I\274\202\027\025\274\260i*<\236\326\263\274\031\"\010:\211\352_\274\317\254\264<\317\317\023\276\204\004\246;\367\212 \274(F\270\275\326S\266=X\217q\275k\004\227\275I\331Y=B\201\233;\tH\001=\321u\202\273Y%\263\274/[\001=\343*\034\275\024\221\226\275^\367P<_L\233=\356*@=\345n\202\274\347\232|\274\016\244i=\333\237F\275\n\315v8\035\205D\272x\024\246<^\311\353=fWt\275\234\250\255=\256;F;J\366\242=O.\037<O\240\201\274\204\362\306;>\221\031=N\243\221\273\300\370\312=\334\315\000\273\331\360d\274,F\007=E\346\227=\r\020\215\274@\004H\275\204\017T\274\366\261\254<\273\375\227;\255b,\273x\261\032=1U\014\275)\373\310<\331-\331:\367jF\274+\332\347\274b\335\213\274/\352^\275\320P\272\274\035V_=\320\230O\273q\251\226\2749\2778=\036\027\214<\253|\363\274\236\365\221<\307\315\217\275/\263\257\274\260\031G\275]\301\234=b;b;\344\216G\275\037\252\224<\034\237\007<\330\231\240<$5\331<\344\201\005=\246\0058\275|\2674\274p/\220\274\362\263A=\363\026\210\273\210\345\233=\337\344\210:k\324\373<\006\230f\274K\210\312=\014s5\275\325\3275\274Xa\207\275A&\001=\014e\014\275\306\324\226\274\277\216\336\274\300\215\302\274p#E<\314M9<\362p\240\274\315\263\265<v\261\216=\371\033\333\273\201\031Q\275\327\317\246<j\007\004=WU\201<\301A\265;Yk\366;\220\367l=@\320\306<\230\207\004=\003b>\274\267\216\023\275\314\366+\275\320=\210=\014\007\351\273\001\325\237=\255~\260\273P%I\275\177\253\215=\315\333\226\274\211\365\247\274\346\245 \274\312U/\274I\331G\275\245\265\244\274\326\211C\274\r5\230\274\n\260\023<\245t\270=\201p\000<$\2332=\205\2030=\377)Z<\334\325@\2755;};\363\0215=U|\221=\022\360\204\275\017\177V<\340$%<h-\274;Ct\240\274\375\036\334<\257\341k:\307%\265=1\014\342<\365\345\023\275\320\006\305=\255\024\236<\207\331V=X\017\002=\246\235\344<\242\253\275\275\342\232\306<\310#\206=\374\014\346\273\371\352\201=\023\337a\275m\375N=fn+=\253\376\352\272\226JA<\244\200)\275\267\227\237\275\211\246\351\274P\343c\275|\226\347<\260\225Z=\367\030c\275q\341?=\256\357l\274T\360[\274Rp\205\274\227s\224\275\277\2547<\327\256\244=}\2629=OYB\274\2015\266\275\004\303!=\224\014\004=\221\211\000=z\360\301\275\217p\225\274\376\"\330\274x\266\022= \262\022\275\265A\222\274\301\245\214\275z\007F<ma\267<\276\2160\275\177\004K=\336\035\032\275\305P\273;\312/=\275\241\237\033<\332\032\365\274\333g[\274\372\313\223\272NF\234<s\315n=\263i\357\274 Z\r\275\273\350?<8\254W<R\234\332=\335^\033=\276Av<#\325\t>*\237\371<\004\327\322<\217.\267\274\r\220\252\274\034\261\210<M\334\177<9`F\274\230\n\316\273\334\262T=9\271\207<O\216b\275\2574e\275\"\205\213=e\\S\275kE\323\2759UT\275\225\005:=\274\264m;J\376\223=\326b1=@\336J\275j\344\002=\201\267\035\275\247\204\354<:\352\317\274\247\003\002\275J\352G\275\362#/\275\232\225\375<\227\"\340=\347\254!<CEh=|\010V=)\326\376=&\026\022=0\320\317=\330\265K\275r\363\215;j\255k\274\250w\002\275\230t\323;nn\324\274\251\307\021\275\321\371\232\2757\2561<\205\004\203;\226\211A;&\007\000<\364!o=F\253L\275\213\026\305\274.G\264=\357A\020\275\213\330\020\275\005OK\275;\n\230\274EL\023=\224*\017\275\327b\363\274H8\001\274\250\2512=\376@\212=\203\010\201=uI\333<\232\345Q\275\345&G\275<\217\000<l\250\000\276\213wG\272\346Xz=m\357\205\275\346\010\370<\270\264o=CHs=</\227=kb\026\273?\032L\273\312W\024\275\253\362\244=\030t\213=$\261\255\274l|\213\275\366\360\273\275d\3127\275\335\0246=aI\330\274\303\346\220=\246\247{<\275\236\355;\347Ux=X8\233=`\314\352;\247\002\325<[\237\366\272vU\002\275\317\250\255<\034\355;=v|\232=kC\354\273\223\366j=\326\204\313\275 Og\275\210&L=11\207<A\350*<V\024\370<\250\017\005=\324\364\032\275*dV\275\230\237\030\275u\234\307\273\251\272*\275i\376\032\273S\250:\2755#g\274\326v\207\274\323\265\022:|\202\375\274e\325<=\343\336t\274\225>\303\274\264-o\2749\353\205\274\347v\344\27389\313<f\336\222<>i\276<\200\3224\274w7\207\274\257J\036\275\347\352D=\205\225I=\216\022^=\341\"\024\274y:><\210\320\234;\005[~\273L5&;\354\'\007\273d\235\305;9\225%:\333E:<\370\337\311<pU\267\275,{\344=w\205\276;\020\207\234=\345\306\010\275\254\014O\275\234\221\276=v(\207\275\220\277\236\274)\010\244\272,Y\252\2755\354&\275\326)!\275\272\236}\273\224\364\232=\245K\233=\001@/\275\022\363[=\373)\224\275\314\307\024\274!\017\345\274\002\224q\273~h>=\364q\352<\3014\244;\230\214\202;\366\177\226\275\266\232\275\274k++:T\212\333;\021\274\005\275\305\323]\275D\307C=\350/\263;\256\324\206=\273hz\275Bp?=RXP\274\234\265\217\274\327W\022=\301\312-\275\313\317E=\371\366>\2754A\225=\013f!\274\021\026\330=\320\340\030\275\347/\201;\032\326\253<\375\017\244\275n$\302\274;$x=*\256\311;\373\356\271<\226S\215=\251\024\231<\030>\266\275\246\233V<\254\374\276<L\252\201\275\'\023\240\273\326\266\363<\213\3306=\010?\364\274\354\245\303\273F\036\212;\243\325\226;\262G\333<\216\033\n\275c\261\215<>\244\213=s\256M\274\333%#\275\335\354\235<c5\211=\276)\360;\276rf\275~\326\265\275\320\2611\275C]G\275\264\345/=\370`\301=>u\360<~\032\030\274H\377\312<\274\266\266\275y\205\007=\001\021\364<\022DY\275\r\225\013\275\330\n\002<\226\213\264\275\202\377Y=\330\315^\275\325c\005\275>\267\345;\010D#=\215v\201=\013\022\202\274\276\210\372<\265i\022=\312\337x\274\364\021\023=\372]\240\274\3666\304<\301\017\354<\302-D\273\256\025\315\274\370u\320=\262\265I<$\304\003<\266\253\004\275\370~\212<\036%\313\274\014O\224\275*\200\226\274\327\313/<\376\274\353<\031\240\026;\366\257\207\273\225\223\212\275\370~\350=9_\262\274[C\222=\023+J\274\305[h=O\335\272\274\232\347\263<\351\326\221\274G\0367=\350\332F=h \276\275\206\241\340\273\255\330\020\275X\353f\275\326\352\334\2735\020\253<\272\036\207< \355_=;N\204=\216\370\370<\350c\317<\213\024\344\274\346b\301=\020\017\016\273\\\236\001\274{\350\225\273\374\\S\275^\243D\275\nv9=<l\027<\323\tk\275\264\014)=\323`j=\234\341n:\r\272 <C\024\n<\262C\235=\266\177\210\275\261%d\274\310\233\207=*\032\242<\307T`\275\212\010\037=\031\204\"\275\270F\001\274\355J\367\273 u\370\274\267\030l\274\031\300e=\325\332\225<\377\025\320<8S\026\275mm;<a<5\275\250X?\274\226?p=#Z\313\274[ \"\275q\346_=ZN~=\010\361\202\274\033\371\"=\371X4=\370\202/\274[\362|\274\331\300X\275j\345\265<i\366K\275~\307?=~j\036\275:w<=\317\223\201\273\275\364.\274\313\326\317=`\273\327\275G\'\014<S\335O\275\234\234\032=o[\331\274\006\361/\275\201\233\307\275\330\241_\272\333\372\327:\r1\032=\016\373X=\211(I=Z\316\372\274\324p\333<\262\320>;\201\020\316<Ea\226\274z\353\272=`\262\315;\207\026\251\274\030\371\206=\210b\251<\372@\333\273\226\216T;Z\274/\275\245g\220\274\350\220\243;\327\'\354\274\030\241w9(2\274\274H\256\207;\005\210T\274\031^\023<\366[\326\273o2\273<\257,\223\275\211U\257=\0216\254=\257\230\341\273\020x\311\274m\303\251\2757M]<K\3711\272\220m@\274\335\266\276\273tX\257\274\223M*=}a\246<\324p\017<\nCA\275\0356\024<m)\230=%+\017\275\303}m\274\005\225\235\275\377L\"\274\301h\214<L\263\025<LB\212<\213C\327\2740wv\275L*\007=\203\302\005\273\300\373\212<\332\213G<\245\0231=\004\243\233\274\177\256\030=\321\010\237\274f\025\237=\342\344y=\271W\351\274\232\262\022=S\252\020\275\260<\265;,^\014;\227\n\036<\313\3068=F8\343\273&\372U\275\2544\233\274\312\235\357\273I\0334\273\370\032)=f\237;\274m\037\013\275\204t\207=\347\022\245\274(\320\036\275e\332\206\274N\301X\2734(\310=\304\326*=7\021\247=$v~\275\\99\274\3645\301\274\005\277K\275 _\006>6\362\021\274\362kJ\275\213\253\212:\356\306\034\275\033\200s\274\244\250\013<\031\372w=?\264\r=6C\024\274\032\343]=F\022\333<\254\026\002\275]\256\214=@W]=\323/L=H\241\r=\320\316\204;\023H\273\275\027+\222=\315\326z=\331|\303<\177\246f=C\037d=\315\221N\275\330fM\275hl\216\275\303\356m=[\231\030=l\236O=H\3378=|.m=\351$\330<\357\313Q=\235X\377;\343\331\377\273CI#=\031\317\274<F\003\340<8\311j\275\016\251)<\376`\204\275\365\366*=U\315\301\272)\0266\272GN\322<\225\232\374\273s\227\177=i\300p\275\313\222?=?\257\021=\345\007\205=V\251r=\356-r\272\0335;\275\247\276w<\2129\245<\014\353\264\274IE\271<\206\202=\275\341cP\275\"=\324<\253\006X=eJ\036=\374\301\364\274\376js=+\356\025\275G\220M\274\214\001o\274t7{=p\247\362<G\223Q\275v\002@=\245\001\247\274\024?\020=\303C@\274O\023\212\274i\341b\275L~\336:O\3568\273\023UQ\275\207Y\'<Kg$\275\026\227\260=\313^\r<\26195\273^D0\275:\257\200\272_\366.=\242\236P=gS{\274-Y`\272\347\272\244\274_\223\303<\352w0=\244\024?\274\237\343\225=\213#\347<\222\010\262\275x{z\275\211\335\224\275z\305\027\275\234\004Z<\031#&\275\020\006\350<\367\262\223\275\353gk\275e\177\350;e\004[\273\304\361\n\275\325\231\352<\344>D=\002\211U<\327t\212<\221\240\n=\336\177\252;\344\264\317\273/\360\256\273\033\376\255=\262=\260<\366\013\377\274%\367\323\275\3737x=(\200F=1x\206\275\216p\260\273\267B\224=\\\365\014=)\000\303<5E;<&\010F<\265Q\024=i\275\374\274z\244\032\273M.\346\274P\013\216=DVW\275\304\375\236=\030\310\205;\301\313F=\350\372[=\250P\373<\200\374Q\275\364O\373\274\271\265@\275\250\313j\275\277\275p\275\346!\206\274\370jg\274~9/\275\025xT\275\324\331\"=|\220,\275\332|\257;\241\225\333<N\035\356\274Lz}\275!=\303\274\3107t\275P\260\\<\364r#<\376u~\272\004H_<\024dg\275\374\3449\275\032-\355\272\205\364T\275\222?R\275\215\346\\\274H6E\275%\354\004=\263\2505\275b\213\275\274\263\022\037\275j\242\327<L\240\017\275\302\270\257=W\tj\275\264!\005<\316\315\327:\036G\264\274\021i\225\2745\272\307\274\302\343\361:\364\322\331<\364+\177<t/A=W\220y\273\306\220\226\275\035\336\201<\262I-<\275X\217=\326\212\215\270m\336\306\274\362\375\007\275x\304\357<\341-(>\3243\037\275\314d\224=\311\220\234\274\267\237@\274\020\213\310=\025~O\273Q\025\216<v\264\364:\376%\336\272v\300\300\275\315\212\277<KN\327\275t\221Z=Z\276\252;\263\0105=\370\312\252=\017b\001=\305\t\210=\225\023?<\207m\371<\'5E\275>\2540=,\275\313\273\247\373\230\274\312M\235\275\365\316N=[\320\037\274\264\230/\275\255\021\221<\301<\213=\302\274Y=\303\001\022\275]l\207\274\335\177\006\275\343:\204\275M!4\272:\205\265=\023\260J<\337\3027<w\373\340;i\256\223\273\260CU\273\305\355\263;R\246V\275WU\241<~\214[\275*\211_=\363,\210\274+\337\353\274\013\252+=\213Xt\275\315\264\223=\325\254\271\274\343\372-\275\307\317\323\275\242:D\274\205\341\253=\t\366R<\216\307\217\275\343\3220\275\036\236y\274\013\307j;\250\307\346\274\363,\233<Q}\r\275\"V\022=\r\030<\275\344\337\214:\361\301\231<\221gs<\212\273\006\275\317i\006=\353\207\251\274\250\230}=6\201+\274\034w\206\275#1H<O\346\235\274\246\221\331\2739\333\r=\025\003[=J\325Q\274\nS\035\275U\221\270;(J\302\274S\376\224=\237\030\027\273!-\201\275\323\024\350\274\343\377\233=\'hV\275\311\277\005=\345\327]\274*)\004=\264\336A\275\tNA<\025\326\323\274x\032\336<\237P\007=F\310S<\007\312;;,\004\320\275\204\261b<\312Z\302=\027\230b\274\217\234q\275\357#I=\367\362f\275\2460\020\274\354\275p\275i\005}\274\0368\006\276\312\313I=\262\005R\275:\216\002=\033w\301\274\244\373\331\274\246;6\275\246\006\233\274o\234\377\2747\333\273<o\211\275\274\314\224\242\274\247\256\022<\276\270\215<\232\273g=F\347\320\275!\255\250\274e\322\202=1\343\364;\210^\271<\300\2463=a9\324=\025_\235;m&\201=ep\204\275\226\025\236\274\244c\017=\n\330\2428\357\323l=om\005=C\375N\274\234\020\327<\014-3\273\324L\006=QV\221=\036\207L\275\325\225\022\2740\021\016=\307\313\337\273\273\017\035\275\222\001S\274\330\r\366=\362]\3029\370qk\275\331\267\257\275\206\330\206\274O\250\370\274E\260z=+\3355\275\247\377A\275\324a\227=\362\253,\2755\237\246<\023%\244\274\013\3652\275\310\271\214=\nW,=\316)~<\\i\254<8\277\226\275{\246\210\273\034t\n>\323^\275<\265\206(<v\n\262\275Ggp\275\023\246\035<\241\260\226\274M\315\224\274\251i\335<d\305\031\275\214\275\233=e\324t\274\364\006\323\274\261\t\320<\325\206\300\275^\035\310\274\352\302\300=t\2746\275\253\226\231\274e\217\037\273\207\030\373<M\377\003\275\207\332\032\275m|[\275\357\312\256=\rsr\275\342\232\245<\317\223\242=\231\270v\274\361e.\275\tuH=\306\027\217=\352\262\205=\251h\333\274\246\357G\275\000\372|=\222\026\255<W7\017=m\250\304\274\263\260\340<\353\300\n\274\017\2371=\2042.\275\374\257\237<Tz.\275\300\023h=\213\350\320<\305\017\027\273-\265\205;0\252\203\273\023F\262\275Q\324l<\013T\032=\233eg\274\301g\013\275>\356\337<I\260\002=\202Z\270\274\371b\334;|\256\035<\003\217\010\275o\325S<F\241o=$z\233\274\211i\313\274\265*\005\275\320\260\000\275=\323N=\347\021+=v\331\026\275\033\252\264\274\370r\236\274\n\310\347\274L\226\322\274\357\010\023\274\267V\341\273\206\025\037\275\005\352\370\274\254_>\275/\337g\274\226\307|\274\240\371y\271}d\304<\243\201g<\260\205\007<_l\234<\327x\365<\312\272B=H\244\203=3Er=;6w\273Q\204\024\275\033tM\275\236V\317<\223\034\226;\313\003\251\274\310\273\035<\307\270o=v\345\333\275\332J\261\273K\263\260\275\374e\341\274\001\273\005<\353\200\340\274\342\255[=\323\033\030=\317Z\261=\000+\301\274\265\311\346\274)r\325;\216\305\372;\r\231\224;\220\272`\274\330?\006=\037\225\276<\225\352\200=Mh-\275,\355\000\276C\314\017<\325\222\007\275\027\261\014\274\201\201\r\274\340\333+\275\245Qg<\220\025T<\255\341\017=7\307\330=\303\241\3779\261\240\337\274&\231l\275\250\333@\275l|_\275i\220\313\273\302 \251\2745\236\r\275\335\326\213<\302\354?\275SoQ=\307k\211<}\300\306\274\017\247D=\330\005\003\275m#,;\354]\265\274\244m\366\274\365~$<\327]\313;Q\335\204=(n\200=]\034\245\272\277t!\274C\t\202=\306L\355;\274\n\374\273\304_B<\243\230\035\274\235\005c\274\230\250\204\275\361}\205<F\330\211\272\203\365\262<25[=tA\203\275\272_j=\252\212p\274\364\036\024\275\205\002\251<\217\357b<\351H\255=9\314\301=\356\221\024\275\202\205b\275^\014\210=\361<w<O\303\231<\305\227D=\332\224\214\273|\3559\275\276\342r\275g \347\274\213(\r=\250ql\275\267Z\244<\263P\377\2720\006\267<g$\355<\244\266\303\274\204\230B=\273*\314<d\304\017=?\221\253;n\247\342\274\0239Y=\03773\275uQ*\275\366\177\007\275\003oB=\240k\177<\342\346\362\274\374\255\264\274\252\331\237\273\372e\002<CT\255\274\355\373\344;\203J\235\274\304\334\341\274\232#\377\272\364}`\274\001$\213<\242\201\002>\352\013\232=2|\303<\222\234\275\273\002\334(\274\272q8=h\331\014\273\365\262\312\274n2\201\275\273p\361<\350\322\371\274l\205\030\274#\240\211=\350Ke\275\037\235\362=81u=\'\3222\275\301B>=\343\212J={&b<&\340\214\274\252Z\207\274\250\215\227=GW\'\274\273\216\307\273\302\000\024\275\234\275\366;\036\200\364<\221{)\275\240\246\034=!\r\014\2752\341\300<\243^\025\275eC\211=t\340+\271\360h\207\275\301T\300=\\\026X\275\211\306\347<\334\347\'=\'\022?\275d\242\330<\304\315\350\274;P\373<\224SB=\316\035\215\275,\253\214=\325\351^=k\240\305<h\375;=u\014\201=\345C3\275\365\\8=p\313}\275\031\360\336\274\252\372\350\274Z\235\304\274\225\003\r\275g\365\231<\037\0231\275\231\332\253\274s\327A=\\m\025=\237Dh\275\333\235I<\001\341\223\275\350C\204\272\264\213\242\275\342s\225\275\233\021O\275\021\334\037\2752\340\301\273\213e\201=\275K\247=*\2158\275\026\213Q=2\003\003=\330\374\003\275T\213,\273\\\227\005\275\335\005\271:&%\200\275\361`b\274\305\211\201\274\020\314=<\031D\260\273\002\256\205;\271]\017=\331\021\252\274\277\274G=\352Q\330\274\236\265\316\2731 \263\274\343+D<\344h\030\275>\213\263\275\0170\301<\216Y\r<\334\251\263\274v\037t=\276\340m=\210\317\264\274j5\274\275\365\022K<d.\213;\216\322\315<\270Z\371\274\233kD\275d0*<~z)\274a\2125=E\311\230<F\347\210=j\216T<\316l\320;\355\\\332\274\203k`\274\377U\237=\037\326\024\275\340xc<\202\'\365<?\234\n;\207\014\031<\305\035\013\275\323\217\017;\333\204R\275\352\204\265\274\356\312\037\2734.F;U(\273\273\262\262\326<\365\366\275<\354\300\337\274\007WT\275\321\324\223<5\310>= \227\264\274(\271\253\275\247\213\365\2740\222 \274;5J<\215v$=\364\327\006\274\033(\220=\230\204F<\317\247\263\274\330\225D\275\312\353\225\275ZT\201<\2564\266\275\370:\024=\341\237\342<\215\"\254<\267\304\033\275\256\304\026\274\232\3626\274\313\322\255\275\343\201{=\206\321\034=\365\000\224\275\265\363\310<\031\300\336<[\361\202<H1e=A,\000\275\025\014\227<.\274\203=\032\332\233\273\330X\007\275d=\234<\314\017\312\274\001O\204;\005v\217\273\266\221 \275\023\025\313\274lq\371<^.\360<\374O\3149\305\017\342<@\242\243\274\253\004X;tn\246\274\317\263\226:\221(\342<f\335\211<\366\202D\274\362E\237\274j\002\233;\235\361;:\231>\300<\277\006\320;t\025\320\274\025\315\377;\221:\033\275:\346o\275\335(\344<\335\236V<\r\033W\274\354\2327=\205)\'=\227si<\2246\354<\277\021)=\023\273\361\273\232x\315<\035\315*;u\270\257\275\r\252\375<\265E>\275\363\306)=\331*\312=\247\r\273;?u\253<\327\332\277\275\213\r6\275\330.J\275 \2044=*\345\363<\025\327,\275\261\3753=\361\221\203=4\177\262\273\255\204\354<DlZ\274OV\334\275+r6\275J\331\t\274m\343\375\27537\235\273f;1\274\240CF=\235\021\214\274*\214\202=\376\351+\275\315\\\024=2\333n\274\314]}<\254\333!\275\031\202 =\357+\277<5w#\274\274V>=\216\236\344;\224q\346\272:\320\211=u\3034\273\230D\241<\236\221.=e\246\205<\007\035#\2757(\"=\201#\211<\3451\251=T\363\013\275\320\034\356\274\331\300\342\274r\210\315<y\033\327\272\351\267\352;o\314\006\274:\200\014=\022~\201=\227g\253\274Q(.<\305?`\273\02169\274\371\014\261<)\'B\275\341\240\246=@\220\310<g\320\357\274\332q\224<N\\\255\275\224\332r;\020#`=\304a~<\226\210\304=%\010\231\274\246cz\274+|\235\275\223{\251\274i\246\320=\361\344c=\216\210\004<ipp\275A\365\025\275\262\265\346\273)\214\217=Z\216\207\275\342\362\032\275\306\240\343<\206fA=M\035!\274\353k\032\275UT\213\275\256\360Q<\016\240@\275\207S\"<\234^\260=\270\304\262<,\036,=\316\275\\\274\352t\344<\354\014\200\273\213<\017\274ZT$\2757\210\207=\323\351\016=\0211\0077:\260a\275\305\374\000\275*\217\033=\t\323)\273R\344J=\372\327\335\274\305Z\026\275\362\247\225\274\255\243k<\341)\210;\314\243\306<\256_\377<\210\302\313\274\2157\t\275F\372\027\275\360\231\255\274H\255\207=t\253\206\275\311\352\017;\216\375%<\204]\237\275\t\221\002\275d\247\266<\206\213\010\274\256\256A=\003\266<<\316u\003=M\'h\27504\216\274\273\253\264\275\305\006\206=\2306\315\275R\313{=5\333\002<\363\027\n=\311\232|\274`J\243=\t\376\325;\002IJ=^\376\204<.\301\221<\247\356\004\273\201\243\373\273\245\"H=s\223\372\274\000\360\211\275\3162b<\271l\231=\002l\244;%TE\275\003\351\240\275\325\345J<I\026!\273X\306\253\274\360\334Y\275h\377\355;\312p\207\275\243\302\277\274\020\031e\274\026}\305<\274a\374\272\035\252\035\274\323\221\214\274\341\2272\275-]b=\2421\212\275P\316\004=\261\265\247\274\003\314Z=\300A\377<CR\372:\364\223l=?\300n<m\241\033\274\227<9\275\004\2033\275T\002O\274\376\213-=*l\315\274\251U\266<\'\374\363\274 2L=\223\337Z\275\315\247\307<1\375\317\274w\202\027\274\242g\201\275\332\300\367\274\2727b\275\350I\224=4\271\3418\004.\220\275\211\350\205<8S\207\273\211\330\325;\357\310\203=|\356\037\275\224K\033\2750j\343=w\026`\275)\243\231<\344Z\000=\216_\224=;f\373\275Lb\032\275O\207L<EF\315:\270\0266<\253\321\255=\030\2632\275\371\261\'=gMk<\226W\014\275\2259\235\272Y\212K\273\255R4==\312t\275\226\346\237\274\274\271\243\275\257\357\210\27505H\275\303kK\275\036{\374;\217\2718=\350}\026\2743e\350<\375:+\274D\320%=\350z2\275R9\247\2730\230\212<^j\373<\341\323\017960\264\273\340\013\001=\345\364\315\274\014T\267\275\323W|=L\337\321\274I\212v=\301,p<\206\2350\275\233\365\013\275\000\247\002=m\263\004\275\340\022[\273{u]\273S7f\275`#\225\275\305L\002=\245\021D=}l0<.\273s;\270\262\026=ol9=\332\204\304=\245\342\270\275\200\347?\274G\357\"\273\314\237\016\276[\004\256\275\215c!\274\322\341\2149\305:\243\275<\217i=2\225~=\334\314v\275,\347\211\275,V\334\273\207\'\332\275\271\325T=\216\233\334\2745\016[\274lo\352\272}5(=*\337\227;nN\377\273J-\273;gB\377;\006\375\225=\037\205\217:\000CP=\244k\211<\231\332\330<>\353Z=t\367\024=%\240\327\274\223\315\362\274\370\216\257=\305\327\251<\347\231(=\210o\242\274\371F\222<PB\275\275\025a\034<\367\242f\275\265E\014\275\374\367\375\274D\326\202\275\357#\234\274\330U9=\273\306<\275\r$\255\274\255\346\230\275\014\307\030\275$\366,\275s9\024=\256r\001=\314\013\276=\'\375\262<\354\377\026\275\340qk==\302\320\273\217\320\002\275\212\0329\275S\027\242=\3138I<\364j\255=\233\031W=\016\261Z<c\n2=]\346=<\037]\006=\324\033\313=\177s\306\273\030yG\275\357\326\212=<\302\257\275\217\230\030\276\231Se\275P\371u\275#\001\003\275r1\301<\225\362\331:\030\245\221:\257f\307\274$\377\345<\006* = ]\007;\266Y@\273H\250\010\275\23112\275+\226\326\274y\226\323\275\362\351\236<`\234\204<D~\267<8\006Y\275\344\254\237=J\307\325;uv\337:\227\177\260=%\215I=3\tp\275\360\022^\275\341\245{=\205\035\213\274\267\037\376\274\220\331\t=\007r\337=(E\307\273?\026\337\274\327qY=\253\315\262;J\352\006=\215\307\332<\036\215\325<\241)1\273A\010\013\275=\364\253<Z\365\355<e\255\236<8o\264\273\036B=\275(\257\244<g0\353;\344\364\247\274`?\232<)\256\241\273Xx\227<h\244:=L\344f\273p\010\2649\030_k=\277\3619=\025~!=:\307\362\273\262\202\313;\211|\241\274c\212\274=-\360\220=z\025\222\274m\316\033=\342\201\377\274\332\246\013\275\362\357_=\227\267\206\275\273\002*=\266+0<1\360S\275:\226\253\274r\230\275<#\263G\2757c-<\217\013\243\274\tTu\275)\0176\275\025zR=dp\275<\306\210P=\005b\361\274F&)>`\344\376<\2013~\275s@\311\274\001\\\335<\370D\220<\354\030\366<\2275*=\360\3068>\320\005.=d\016\215\274)\335\242=\224uN=\n\014(=*A\247\274\'\336\274=?a6\275IIL<\202,\254;\204J\217\275\267\251\n=U\203\206<\002\3129\275\322\020\326\275\037\005\014\274i\263&=N\271J\275A\347\261=\306k\276\275zTz\274\363\213x\275\323\354q\274\220\231\"=\223\326\316<~L\013=!\247\022=.=n=\022\022?=\221\365,=\213\203\250\274\305\034\371<\2039X=\342\005>\274\336\227u\275,\204\223:\003\277\005<cR\233\275\'\236P=\300\0204=,\275\355<\213\217\223=\007\344\332\273\3144\232;\301\304\277<\000\275\233\274/P(\275m\374\025\274\260|\354<\024\377\366\274=\201M=\027L2\274[P%<\035*\022=&\254\211\275T\017\306<\023z\306\274\034:\360<\203\312\000\273\n\035*\275\3215\210=\274QD\275R\323\210\274\336\305\004\275\014*\266=\350T\203\275\226`\332<\013y\264<\224f\332\275\202;L=\232\014m\274\006\t\217\275+[\327\274\200\231\003\275\252\341\367\273\347\357\332<\275\200\007\274\240O\315\273!\305\013=\203\241\360;X\261\r\275PEa\275\247\242\335<\014\223\220\275\"\177\310\274\236R\335\274\302`\341\274\312\320\346=\261\231\327\274a\007\252=j\347P<\024\010\253<\367\220M=\232 \211\275\243\315 ==\205\005\274\2706\361\273K\366\233\273\337\275\244<\251[\306\274\322\006\006\2751\212W=\220\2579\275\210\266h\275\366\231\322\274}\301\276\275\272x\212<22\374<\235\341^=\"\000\247\274\310\216\322\274i\261G\274nuj\275\376C\020<%I\006\275\360\n\343\274B\242\335<s\336r=\217\234\271<\022\247\373<\343p\202<\217%\353<\243Ii=\260+\r=`ef;h\307m<;\002\205=\353\375\323\274\347gA\275\237b\333<\366L\234\273\220\257\317\274\004\322\233=\346\026\223\274;$\256\274Ff:<\024\315\203<\020D\242=\360\222 =1\327\233<k\317\032=\214M\367;\303\014<\275d?\031=@{\270\275\314A\346\274p\021\210=\225*m<Y\001k\274\302\304\032\275\311\362\002=9\031\260\274\367?\260:aQ\226=\332\024\037=\257\364\233\275\002/\2548b\330\t<\251\340\207=>P\013\274(n\216<\312\325\021=\274;\230;>\317\204<\342\314Z<\206\265\277<\257\327>\275\350\224{<w\013\204<\033)+\2752\275\335<\211\025\220\275\300{\374<\203\232\203=\007\321\002=\333pR\274\231\242\272\2741\034J\275\237t\017<\256t\254<\347\2630\272\210\263\305\273\201\"\210=\204\023R=\'\370\347\274\315t\262\275X\263\350\274\271\327v\275M\177\020\272\020\204\027=\272\344T\275\331\326\227\273\0011@\274\305e\021\273c\237 =\276;1\274W[\242<\240\267\200<\244\004\217<\350\247C\273\"\314\362\275EK\262=\351\341\204<\341p\377<:\004\003<W48<Vq|\275\321\004R;y>;=\221\220\023<3\310\200<\275\277k\274\232\351Z\274\236v\265\274}\2648=\2006\246=C\370\206\274\203/B<l\214F=\333\231w;\355\034t=?\370R=Y\021\'\272\355\263\\\2750W\022<\312\002\034;\261\243\'=\215,0\275\272(9=-\346Y\274o\325\367<\267.\321<\200\346L=Vr\005\275<|N=\035\016+=\010,\310\274r\3175<\252\276\r=\026o\372=\307&o\274L\013\212\275P\030\024\272\260\017\336\273\212\026\243=4\031\335\2743\0262<\262l`=S\341\243<8]\231=_\353_\275\004m\230=\217\010\242<\020\313\241\275\246\312)<\231\373\007\275X\243\216<F\026\266=?\306\016=\"}\356:\331BQ\275\314\371j=\250\372\371\274\325\222j\275\234o\002\274\301\366_=\351\216_=\331\'4=\364\331\272\274m2Z=\002\306\030\274\037\254\022\275=\223\020=\260\304\201<\356R\032=S\244\341=\272|p\275Z\260\361<P**\274\327h7=\004\373\247=3\237\316\275H#H=\323^\334\274\244m\350;G\016\361<\331\030\251;\373\303\205\274\266\344\230\275\336\217\007=\200uJ<\313\n\020<m\220\027\272\014S\n;,:\036\275\026\204\333\274\377\200V\275q\037\212=\300\251O\275*\205S\274XU\216<\351\245\237=\326\004\205\273A>F\275PU\346<\2025\027\275B\032\344\274\230\033\270\274j \t=\205\201\033\273\326\361+\275\177\241\201=\372\3678=\3560\337\274\244\226\320;\202\257=<\034z\212=Z\372\275<Q\0170<\\\000];\240:\343\275\216\017\217<:\004*=\262K\350\275{Lc\2745\221\021\275VN$=\312\327;=\362\2349=^g\233<6L\233\274k\302h\274\202\246\200\275\241\373\000<\261\351l\275\232\247\033=_!5=\352\267\214\272\354\205+<^\255;;<R\205\275\360\316\242\273zPX=\216\214&\274\353\313\226<\005\t6=\017\207\243\275\252\032\364\274\263mX=s\275s\273s?\307\273\266\026\033\275\001`\210\273;\031o\274Ms\234\274\\Y\020<\325\335\201\274\023*\305<\274\245u\275\323\tQ\275\2611\001\276\262g\200\273\262\332\263\275\216\002\215\274\r\037\252\274[\3436\275\023\303a\275\263\241\247=\270|Y=\242\207/=T\013\025<\213\321\263\274\300;\225<\034\232\274<\003\226R\274\"\245\317<\300\034\022\275\334\256;\273\373C\234=Ki\010\275\234,/=\216\213\350\275\263\321/<;z\362\274\254dl\274\027{q<\377/o\275C\261\250\2733=]=\247\326 <\260\257H=p\0004=RN\220\275&(\207=\360.\017\274\2507\020<\264R\\\274[\037\233\275b\316\254\274\322\257\351\274\001\025\222\275\313c\025=\036\276\224\274\023\241?=\272t\362;\351\343\344;\202\274\253<\266s\217;R\315R=\237%\035<\325m\266=JI$\274\223\301\225<\241\345@;\341<\263<C\266\322={\202K\275\273\203\332\274\006N\215<\025\316b\275\373Y\264\273{i&\275,\240\231\274\013\311k\275\325[f\275\306\202`=\365\n\364\274\253\307\013\274\317\'\253<\036\235\222\274\360\230><\014\266\326:\217\223U:\016T\360\274\2476\223=Q\016F;\365\355;=\302\"\361<\325F\026\275\302\235N:T\314V\274\337\277\206\275Z\231x\275\315\331V\275\"\375\205\274\234\2225=\017\232n\275>#\031=\215\312\222\275\301\017#\275\277L\245\274\341\364\006=\277B\231=\317\252\030<\231\344k\275Q\272:\275K?\212<\264\221\306\272\346\r\211\274\246\234+\275\344\323\227<\241u\"=\227\236_\274\227Q*\275\270V\230<6\n\302<\037\r\267=\357v\223<-\312\346;z\326P<\006E\231\275\264+w=d\242u\274o\222\225<\006F\201=\262\273\372<\311\250\265\275\265N\216<^\210\224\275[\'\201=\"\204\323<\264\220\243;F\252\241\274\353}\254\275\323\004l=\032\251\021<\344\224\275<\223\032\252<\353/n=\254\216\034=\220\222\352<\335\031\307\274\262\023\013\275N\347\"<\227\302A<8\355\316<\236\\1<g\265\016\275\340&\\=\201\264\307<\206\035.<\314=\254\273\265\334#\274\036V\037=N\006\027\274\370\336\330\274\314\257c\274\371\225\000\275\274/\215\274=My=\251\020B\274\254b\017\275\331;\260\275\325\222\273=\240N4\274\343\014\\\274\300\275\241<\005\370C\274\246\242G\275\'\265v;\225\002\006\275(\346\226;G\005\225<\212\231\343<\300<\014\2754\307\214\272\231\373\255\2744\024/<\263wm=-\027\211:\262\036\275\275\264\317[\275\355\025\010=\235X\020\275BX\255<5\256\375\275\014\010+=eGI\275<\274\002;\3030{\275?\331j<3\233\320=\376G\273<hh\320;\2024\276<\243\366`\275i=\034\275\260e\002\274\351\245\206\274\340\253\376\274\263\227\236\275\370X1\274\324\212\327\275\361\241\003=\016\316\275<3\335\237\274\033\372G=y<\262=\207u_<\353\2304\275\r\312\222\274\255\230\303\273//\005=\0041\254\275\376\240\342;\332\251U\275\224\336U<\354g\223=\234v\333\274\210\323\037\274\340\361\310\2741\311a=\360\257Y=\235;\376=n]\216<\323a\271\274\205\212\010\271\212\260\037\273j\\0\274Jq\265\2741\022\367\273\336\272\230\274\312\210\217\275\376\363R<\234\355\326\274HD\r=<\035s\275\352;<<\007\253\361\274\014\225\231=^\371\"=>3\244=\221o\023=MZ\260\274x\273`\275\252\245\002=\275!\026=\274*\224\275\313\351,\275\366;\272<\354\353\251\274m\221M\275\233\353:=\367+x=+le\275\030\345\'\273^\374\200\271E\323\013=o\367\004=\365\000\000\275\024\261\32298B\307\274\256\025\030=~\204\325<\223&\232<n\262\'\275\227\204\324<&\206\363\275\200\203S<*\261\007\2758-t=\320\312t\275\370\246\033=\326Aa=\323+\264\275C\2259;w\265>=\020\r\177\272\030\274+\273\350J\323<\374\202\305<\332\033p=\177\031]\275UKs\274}\361\221=\305\335\205=$g\242\275H\275\006\274\342\013><\376\225\301<\254\371J\275\322\362\037\274+\330\243\274\205\t\246<[\223\024=\0376\312;\277\365J\275\305\001\256;9h\237\274\262\306\303\274`}!\275\021\331\377<\265hD\275q\355{\273\3575\236\274*b\35192Y\265<n=\315\273\324\375\037=D\327\265<\325\301E={T\003=\035\312\253\275\027\307\360=\252\302M\275Q/\373\274\323\032\t\275\3335\353=l\275\373\2740\362\024=\020\232\260\273{\214%=/\023\r=s\227\260\274\014\304\346<\356X\306<\260V\202=\362\371d=\033\362p=\025X\221\275\301H\271\274_H>\274\332\374T\275Wxw\275\024\343}=zS\204<\313\362\273;\367\237\346\273\037r\032\274\344\241\273<\005r\205\274\033*\244\275\206\274\277;D\024\366\2741\013J\274)\325;\275v\033%=\270R\213=PE!\274a\370\274\273~\315\367<\033\366\331<\277\3273\275\030\214\t\275\332\014\255;\356\331s=\000\211\324<c\373\267;RUY=\216\2014\275\255\377;\2753\306\r;%\010a=\277\221\310<\253@s<\317\0137=\301!\303;\334\002\247\274@_\031;;\244q\274\022\000{<\200s\210<|\301\023=7B\272\274\231\372\n\274{\243J:@\237`:\246\261\375<\0231A\274P\361\305\274\267\005\242\275$\374&\275KU3\275\360\231H\275\354H\010\274\247\010G\275\326\251\344\274\267\271\006\275\347^\312\274\373Q\213=L\207\033;\367\270E<d2\003\275\245\360\251=\243\001\377\274\362xO=\321\373.=\327\3406=\211&e<]\353.=lL\017\275\267\027\350\274q{\032=\246P\317<\335H\310\275\331\355\313<\tu\231\275oG\321\274=6{\274D\276\215<J\245\016\2766l\'=\265I\251\275\017\340\300=1\204\333\274s8\021<\376\274\327\273\001\203\207\275\206/`\275\347\354\266\274\321ZY=\211\2422\274\355\362Z\275;\nI=\224\270\321\275\363z6<\330\026\226=\337\206a=W\253$\274\245\2010=\305V\216\275\235\221\014\275\220\346\235=\207\347k=\003\355\265;\307\234*\274\344dG\274\215\023\250<\210\261\"\275S\201I\275\202.\004=\257#\037<x6\035=\002\351Z;\256\230\202\275\302\304*\275\317y%\275\026\363[<\262\t\253=\224f\017\276\243\355\202\275\362G\354<\010@\322\274\301\262C=.\027\004\275\342\200D=\203\2314<\373\275\362\274\305S\242</b\277<\210\327\260<\253!\037=\316)\005\275\217\006\215<\340M\353;\3472\325:\335L\334<\034\\\227=\244\226B\275\312%O\275\027\232\311;\344#\035\275#\317\311\274\342h\211\275\222\210\206\274r\027\034<P\273F\275\3779$=\303\316\223\274\200\363D=\264\272\034=?\\\361;\002\233S=\242\227\016\275U\027\201=.\022\253<\023w\212=S\322D\275\320<\365;\365C\"\275\263\377c\275V%\272\275\277o\202\275\026e\027\274\037\003\347\273\r\277^=\250\330\263\275<\003X=\023\007\235<S9\006\275\253\036\242<\266Nf=FV\202<\366\266x\274+\013\230;\252\260\212\27480\'\275\036lz=\027\305\021=\361\337\311\275\235\300\361\274\262\233\351\273\274\361\375\274b\377:\275\233\334\215;\017D\002\274MJ\225\273\361|+=!\367\206<\320\337|=98\245=\360N\373\274\200C\031\275`\327.\274\336\341&\274\346\336\300<\033L\034=\253\237\273\275\275\034\310=\2224\354;\365\323+:\313\353<=\246\316\016=\371%F=\353\300\276\275\221:Z=\025\240\377\273pb5=\254m\240\275\"@\233:\000\304$=iE\335\274\244\251\247\275(\006\014\275^R\252\274\340\356x=7f\000\275\225(x<\021H\264\275\002[A=)\230@\274\375\025\344;\261\313%\275\325\203\321\275\021vg\275\311\225\225\275\017\346x<\241r\262\274\202\246\354;=\214W=\035\247u\275\306\014\310\274w\320\365<X\005[<}|\\\275\017\373\344\274\030\273\261\274\325{7=,\262Y<|\036l=c\031s<\007\343\025\274\354\335\231=\237\324\323<y\272\343\274\230_\355<\311\006<\274\335\330\303\275\271.\214\274\227\267!=)\303!=VD\216\273hm\"\274\261\036H;\365X\216=p\033\203<\374\327\255\274\233\\\256=\352\026\\<\215D\"=\316\271q<\303\262\207=\236\"\030=\362\036o<\347\332P=M\307\000=\321\266A\275\352\370\000=\211\251\234\274u\217%\275\313/\214=\037U\344<\207|\323<\354\274\313\274)\201\250\274\366\035)\275R\354X\274[\367\020=\035}\230=\316\335\003\274\373\371\321\274\256\036y;I<\202<EI,\275)\037\344<\250\360\350\274F\177S=\2203\025=\020\014K=\013o!=*eB\275?\000F\273Te9=\260\024\212=\177A\220=[=\026=/*|=\221\267\201\275\244J\344\274\307\312u=\016[$\275)>>=0\365\017=\364F\270\275\213b9\2756\014h\275\264\316\201=\264\364\002=:z\014\275\004\377U=\0072\005;\245-\275<\257\232\341;\233\220\201=\332U\351\273`(\005=\373iX\272\207\274\215\273\371(\321<\266/H<~\223@=g\211\221\275\206%\204\274\231\2129\275*f\224\275\017%8\273|\024p\274\321\231\232\275\247M\256\275\325}\273=&\327\215<\205Ot;f{)<\351\217>=\212\260\320;\270\030\241\274\363\324\354<\001(\264<{\272I\274\244\214\340<\207\372\354\275\\(@\274\300M@;\332;\230\270\231\343\265\274\275\341\230<F\033\256;r\000\222<\317\244\332\267@%i\275\030\211\212\274\304\272\'\275\370\0236\2758\316`=!\377\320\274\275\037\252\275hsK<\251,\343\273\353\t\271<\241\027\265:j\364\022=N\317\337<\221X\214\275\326a\373\273\270\274\263\274Cv\223<\261\217\367:\210e\327;+$D=\247\020#\274;\201\021=\3332\n\274\333\241\232<\004\265%=\345\021\030=\255\346\177\274\220\302\204=\376\312\037=\344HR=\225\366\364\2759B\320\274\256\337\025=\233s\265</\240\274\274;\003\252\275\250\246\t\275-[\260=\201\3225=;\300\233\275\341\205\005\275\327\200\033=\242\307\365\274\311\204!\2759\345;\274\304\002\312<\262\006?=\271b\274\274\360.n\275\334\332,\274E\030x<\321\355\314\275\"Ks\2752\313\241\273e\327\233\274\254\240p\275\354\247\006<\267\351m=\212\335\026\275\035YU\273C\002i<\020d\r\274\001\302\365\273\363\317\256\274\201\027E\275ZS\254=B\362\2458\267R\254\275s\245:;0/\227\2759d\310;\336~C<6\\9<y\311\220<=\272v\275\351\373\004=`\374Q=\002H\361\274\036\013\003=\347\256\014<\321k&\275&R\366\274w\371\211=\215\342p\2746D\177\275yt\203\274Q\021E\274\374\302\272<nb\2059o\253\013\275I~u\274\021\267\035<2\3037<Yv\346<\236w\021\275\360\214\033<g\010\031\275Z#\271\275V|A\275\n\376\263=\344\351:=\002\371\230\274\034s3\275A\333\370<\017\031j=y\367k<K\'\230\275\344k\217\275\034\260\236\274\262\342\"\275\251}\270=~\245\020\275GE\231;{\277\'=\222W<\275%\354\303\275\254\237\373<\264\033\216\272\254i\367<\223a\200=\352A\306<rQX\274\272\257\017\275\231\000\2539\237\377e=\n\035*;o\265\013<\361R\257\275\366a\014\275\262\016n=\271l@=\017\267\244\275\"k\033=<\346\220\274\241g\207\275\260BH=\251,\025\275\307\307\335\274n\t\002\275\226Y\273\275\206\242E\275\257\252\264<\005-W;6\310\033\2752\377\014\275A\220\221<8oY\275\357f\'\275\226\356A;<_\013=\335\367t;\330\252,\275n\307\245<v\\f=\215\305j=s\273\215=\307x\224=\375\351\221;\305\364\240;\254&\007:\335\345\242\274\2002#\274\333\254\313;\"`\203\272\357:3\273\235\305\317\271\375\206\304\275\0061(\274\333\222\034=\"\275\341<YS\257\273\026_\003<\316\272\003<\037\210J\2752C\205=\374\212\374\273\236\365\r<\330\306\241\270\373\2352\274y\315\273<\277\325\2569\252F1\275Y<b=\021\244\031\273\204\322\264<w\247Z=\261\256\003=\205\036x=\003\337\016\275R\312\331;\227#\254=>\251\322<\252vb<\220=\241=\272\215\247;\332\276\230\274\270>y<Y\035\006<-@\323\274H\177\374\274\242\243\260;=\010\262=\203\2045\275\330\235\242=i\316H\274\273\027*\275\357_R=\241\351k\274\nb\037\274\315\324\314:\323\275V=\211\354\014=\324B\260\275\375\256j=\177\t\267<u\026\221\272\270\n\'=\205\256\305\274\277?/\275E\333n\273\354Z\010\275\024\301\263=\244>\333\273#\2445=\230\3516\275\304\t\307=F\363\226\273\003u\234<\344\215\301=\377\035\332;\014M\240<H\2408=1g(\275\0307\331\274\340;\221<\277\014K=\246\254\032<\032y\002=\n`B\275\277\001D=\212\251\227=\177\353\241\275\334\317\220=U\313\245\275PZ\362\274\005\354-=\360\316M\275\232\271+<\344\034\030=\330\014\324=\037\354\250<\362\2256\275u,\274\275B\214\023<d\222\006\272h\225\261\275S\263\370;]_\014<[\017P\275O\367\210\275_F\276;\203\007V\273]t\351\274t\351+\274R\252\"=t\3127=\010}@<f\031\023=\005\270\014\275\256\0030;\244\367\2559\361(\264\274\333\332\207<\006\242l\275\204\242m\275T\364I\275X\367\216\275\004_\037=\034\223\335<\334\336\244<\376Y\005=\376\241\"=\016\031\"=\025R\007;\251\330\220\274\317\340[=e\003\215\275\243\327_\275\340\216\260<-\311\034\271\371\025A\275WF\364;7\310\326:\305\305`\274\327\331\004\274:;\271\274\036q\220<\270\367v\275\022\233\342<\226%d<\3615\275:{\010\211=\217\327:<\347\255p\275\317{\202<\004\350\267<Kw\254=\334\320\232<\266\"\\=\030\341\330:\020\030P=\3740\036\275\004\214\255\275\271[ =;\272Q=#\276\340\273EN\322<%7D=K#\271<\270\275\311=\224GK=\026\261d\273;\255k=\320V<=TW\005<\202A\030=\010\262\006<x.\336<\370)\205\275v\251\326=\2008\232=M<_\273\337\334(\274\223-\275<;\237\005\274k\317\223=\217\035n\274a\327=\275\014\2047\275\310\014\330\2744\027\214\275\333\376\212=\013\"f<\020\034(<T\330?\274\346\353z=<\327\n\275\272\370\025\275\036\003\236\274bB\211=<\n\223\275s\231\224=\317\377\375\274\034\031\205<\370&\031<\271A2\275\322\340\013\274q\301\212;a\002\235=7\3620\275\006\337\271=U\373\336<jRQ\275z\233I=k\213C\275b\371\346;q\371\236=QS\227\275\233!\201\274\273\372\323\274\r+X\275\013\221\371;A\263c;\224\216r=\036\340\253\273\006&\240\274jr{;\n\334r;\270\365\334\273L\270\326<.\202\325\274\r^\272\275\\\260\270:\344\273\225\275\305\337U\275a\006\355<\377\332\245\273\3235\361<\366\367a\273\322\351\022\272\251\330\257<\315\335\003=&\302F=\220\024\330\274D\230\215=I4\035\275\336\243\251\274b\310\217\275Bv`=\032\r^\274\007^(=\"&\221=\355\037\260\274.\242\275\273\244\372Y\274\255\362\265<\2149\254=,\330\305\272/\362\341=\361-\260\2744\233?=@\000\344\274\330\204\333<\262\236c=\260\346\032\275\232y\031<\205\217+\274\214\274F<u\233\321<\210\340a<\233~\231=\033\037\345;\253=>\275-\010\254=\340\316^=\332\\!=\304\'\272<\357\200\207\274W\265.\275\235\260\364\273\344\305\307=\220J%\275YK\353\274\255\307\335<\027h\032=\230\364\226\274j=\331<\374P\260\274\225\014\252\274bV\233=\312\321&=>\230\030\275?N\221\272;\313_=9=\234\275\\\375\354\274\205\300\355\275N\322\016\275\273\223\267\274\273\206\222\275\265HF\274\224M[<\022\004\021\275\027m_\274t:\320\275?\345 \274*\234\211\275\274?B=.!<\275&\336\344<6\253\252\275ogP\275B\365$=\242\207W=\005BG\275\261Gq;\361\022\225=b\231&\274\327\305\r=\024\302\200\275\231\215\325\275vz\342<\331\340\242\273{\263\237\275\356\255\252<\266K\341\274eCd\274\243\335\224<\230\376G\275T\020\010\275\210*;\274\323\254o<a\001\274<+F\253=\010\213=:\022$\024=S\201\370\274(\215\211\274\037\363\354\275\277\225T\275\366\022\177\274\370\205y\275\355\321 \275\235\277l\275\316\3705=8\224\223\274\257uF\275T\363\245<\2378\033\274\303[\222\274\177oT\274?|\306<\320\370\341=\300r:\275\003c\252\274:\302\002\275\300=\250<\215I\254\273\246\321~=\267\265\203=\t->\275\335a\017\273\246 \362<\013r\230=\336\331=<#\273\023\275\222\233\376\274\3554\036\275\377\3345\275\327\211\236<?\367\r\274\305\276\301\275U\343\022<99\2177\255\360\215=\010\274<\275\257\217F\275d%\006\275\023|2<\312\223\032=Wt\232;\264\220\233\274\2353\024>C\225\030=\"\304\020\273\344\227\342\273.\201\036\275{\023<<\277\014H\275\313\0337;\322\347\032\275\231\262[=\361\365_\274F%B\275l\240j;\3567\271=v\322\222=\373\366\221\272\314\351\'\275\023\303\026\272\245\315\004\275:\346\020;\231\364E\275\315\335\331<\340n\305;k\247\204=\010u\226\274\330\226\245\274M%\235=I\016y\273\237\335\225<;\2432\275l\372\002=1\262\352=SN\211<\371\262\210=\274\002\314<\262 \023\275\3755\213\275m\027)=\350\243\370\273\211\224\215=l\274\010\274\273\337\300:\035\030\352\2742\350\266\274Jo^\274\233T\221\274?x\234=1\306k;\022s2\274yaK\275\005\215\226<\r:\241=\003\277\377\274I\317%=\n\250\022=%\217\363\274\345\252\014\275h\3751\274\201\253\216\275\273p\312=@|\243=\r\314\370<\203\2703\274\013\231i\275Jd\370:\212lF<_D=\275\032G\217\275b\202\001;dN*\273:\317;<6\037\214\273E\032l\275r\336\263\273M\246\216\275IM\303<[\320N\275\006hE<\037\235j=53[\274\034?\351<tX\227\274\224\256\021\273\253\276U=7\251\217=H\243r=2\377\335\274\310\244\027\274\204\313M=8%\215<w\243@\275/\025]=\030\"\034\274\177\035H<\n\325\310\2742\350\205\275\013\266\312<\321\0308=\241x\245\274#\'\247\275\177\330\227\274\223e\237=49w\274 \350\207=Q\335\002=\r\n\244;J\002\255\275\000\361>=\243\230j\275\364\t\243;b[\234\272\264J2=\340\346d\274_*(=s\216#<\254<U\275F\376J\275e\032H={\241\372\274\330j:=\262Z\006=n\036%\2767\017j;\035\202\005\275ue\317<\007\251\357\274\240\212\230<\362\234\227\274\233\251\243\274\215\264\334\275\2417\n=\242H\027\275F%k\27418\350=.>?\273\265\027_9\025\316\347=\361\230,=A*c\273\312\\~\275/\306\235<\000\366\227=\241\251S=\252\363 =\037\037\031\2744\346\323\274\005k\211\275Tf\357<\215\224\004<\223\357\221\273\340\242\206\275\204\337\213\271\264\317\030\275\223\315\346<\024/\343<\217X\027<\342\004\035<\276<-8\375P\267<\310qS:\014\340\017<\260\361\000\275\375`\002\274\364\263/<:{%\275u\315\n\274\366\210\013\275\010w\223<\243\241\244\275l\223\035\275g\2663=+|\226\274\211\313\336<\340\225\367= +\177\275\312\315\247=\r\270A=\211\234\234\274\260\211\206=\266\313\233\274|\023U=\371\'5\274]B(=p\323+=A\224\221\2742\203\276<i 3<5y<<\205\301\203\275\344R\237\275\233/\326<\022\032\265;\211\225\272<\tj:=0^\201=V\024\373\274G\233s\274\005(\271\274\261\275\240=\342\233\262\274\355`\347;\360\364>\274\254^\316=\014\237\252;\237\035\233=\2509\275\273\034^}<\343PA\272XvH\275\344N\316\274\313=\321=\177\214a=\272\016;:\031\3606\275\231A\234\273\242l\021=\255f\314<r&\340\2758\345\247\273(\215\027\274\236\220\341<R\257\364;\243fe=\267\201;=\\X\002=\260\370\024=\304\230\271=\217\032\217<9\253\024=\267Q\242\275\355\3735\274C \212<h\225\n\275\030tF=\312\225\341\274\001C\316\274\324\220*<\361\2030=\303\"i=\227\312;;S][<\233&(:5fy\274\006\212\256\275\004_\303<\323\303\272=\340\364\356=Y\261T=\324i\005<$^\232=-g@\272\277F\367\274T\353*=\205\227\377\274\335\355o=f\316\355\274 \322%<&\300\216<\025Cx\275J\273T<\355\225\206<i\316\233\275S\335=\274\320>\277<\035\034\335\274\023\371[\272\023t]=\250\213\302<`\325\233\273\026\027\344\271\326\313\007=\346\203\203\27547\261\274s\225\016=gq\001;w{/\274\020$)=\243\265I\275\334\353\260:m\325\217<\212UE\275\360\213\301<\246\036%\274j\245-=\354\276,\275AM!\275\304\331\206\275\206|\346<\032D\010<\001\312\361\273N\016.<\303\226\377:\323\"\371\273\204\356}\274bM\365<\022\230\2549!F\021\274\343\025\352<\033A,=F6\267=\006\017\033\275\311p\267\274\027C\301<\023\263\003<\035\016\313<J%\004=\010\304\370\273\232\006\234\275fXT<\344\177z=\234\"$=I\273\037\275\364\3752\275ON\352<yOm\274\337\275x\275\345\315\237\274\217\024=<\262\'D\275\305\2071\275\'(\023\275\325\027\033\274\370\274\334\274\025\346\212\275\215x;\274\336\205\224\274G\303\330\274\007\373\230=J`\376\273W\237\250\274\330\203O\274\355&]\275\321t\360\274\371`\255\274\217\324\327:\3305\217=B\236(\275\363)\r=\256\036\032=_\375\311\274\320\021>\275\222\311@=\235\227\246\274xa5\274p\312\004;4\270c\275j\326\254\275\262\'d<\201\214\325\275=\276\207:!&\202=Z\214}\274o\347\2139Z\342\t\275x-\374\274\034.Q;T\306]:$\245E=\002\357\336\271Ga;\274\n\312\243=\267q\232=f\2603\273\317t\030\275\343&B\2752\264\246\275u\211\037\273P\220]\273\326\306\211\274vh9\274\223<\227;<w\"=\220i2\274qV\300<\241\2040=\214X\"\273|\255a\274\200\313u=N\376X\2748t\274\275\235\344\025=\227\301\306<\030\203c\275\202\333\352\274\233-\325<\231\201{=q\t\017=\244\252\027=\253M\221<}{\027=\233\300\035\274\373t\300<0\035\256\274\211\370\242\270\272\031{\275\311\211\247;=\213\327\274\276\\P\275\270h\207\274\221\307\004=\n\332\260<\340z\360\275[5/\275&Z\231=b\205%\275\361e#\273\002\3778\274(m\005=N5\316;\332\260\300:\235\315\224\274\377\321\237\274%Dq\275\350\232\206\275\262\313\235\275\332!?\275\005\240\335<\372K\252<|\3247=!\323\3008\360O\007\275;w\220<B\0066=H>\252\274\274\000_=\247\350\243\275\237\361\"\275\257\2567<aS\204<4\334\036<uw\267\275\016\030\304\273Yt\027=P\263\231;^\357<=\340\333\277<\325\202\323:>\317.\274D\306\200\272 q@\273\010\342H<J(\267\274n\247\010\275&!\200\275H\334\257<1]Y\275\002\324\345\274w\310\327<|\3648=c\030\032<\006O\'=\264W\236\274\277% \275(\253\003<\001b\n\275IP\253;\236\230\232\275O\247Q=\3263o\274\236Hu=\266\322\370<@\263.<{T\312<\325\350l\274\341\305\215\275\207\016\003;\341\237b\275\263\372\360\273\017\345@\274\376\0372;\032o\037:\005\210\367;\340d\266\275K\277\223\275\272\n\235;\002D\207\275\037\\\025\275}\243\351\274\033c\274\274\035@f\274\216\242?=\031<+\275\372\034\223\274I\320%\275\303\256\244<\227\353\214\275\242\213$=Nb\211\274\272{\013<\235y\006>\257\010\005\274m\273\336\273\373\255g\275f\327\031\275B<_\273\241f\205=\005s\212\275\031\024\215=F\271\2639Ob\256\274\325\344\246\274e}\342<w\020\036\275N\246\321:\253s\252\2738)\213\275\276\007\204<\267\373\257<A\261\340=I\363\022<\351\005\251\274\264\375\210=\244\035m=\360\346\360<\305\037\276\274*\324z=\005\330\223=\374\033\001\275\371\335\320<V\021e<9Q\330\2737$\374\274\267\0222=\205\376j<\014\335Q=\010\275\206=\317\021S\275\030\312L\274\375\027e\275\215\332E=\262}\013=\260!\336\274\2755\003\276\030\303\243=\201\262\345\275\n\023\025\273\027%\320\273\354\363\342<\241\313:=\300\211\277;n\353\275<v{\317\274$Z\237=\255\267Q;\202\210\317\274\335\344\367<\251\346 \274\271\302\334<\341\260\362\274D\'!=D\201\371\275\0011\324\275\242\373\274\2757\' \275\342k8<\371\177\354<\301\353\016\273\023\336\321\274\246\357\002\275\1774\227<%g\202<\027\"\354\274\247\3605\275\376\342F\275[\223\305\275ru\327\274/\312\336\275\316\200\022=Jz\201\274\022\000\375\272>\276\031\275\352\255\031\272.\177\372\274\230\2401<\243{\037=ZIR\274$\336\221<\021T\333<T\366$=ea!=|\216\306\273\201\346\202<[\305\214<\222\007A\275\301\t\236<\362\033\213;?\010\014=\316\234\206<\372\344`\274[\335\035=\352\335/<\303\256\303\274\275\272\270<\006\264\032=\330L\212\275:\232\222;\345\033\261\271\250wQ=\211[\330\2703u\003=\323oE=E\230\303\275\351\021\010\273\316\236\n<C\377\256=%\304\213=\014\343\010=\207\\j\275[F\340<I\210\302=\311|T<\267!\n<\306\250\302\275\363\327\017\275\334\344\340\274_|\036\275|\354\330\275>ZK=\331\271\300\274\273V?\274\n\314\336\274be|=\334\364\242\274B\224_\275\253\327]<\367`\336\274V\222`=\240u\264=pp/=]H\304<)\236\325<\006(c\274\231th\274^8\357\273\365D\037=-\271\004<7\2004=D\205\250\273\021\241\240\275\343\204\'<*\324\267\274!\343\021<v\010\263\274\334g$=\274\352_<\321\367[=\3408\006\275\353\003>\275\363\246\377\272P\320\204=\204\033g=^$\223<\207)\211\274\177J\360\274\004\230#=[o\360\273)m\027\275#\313\002=\215\374\000\274\010\2424=\212\245\244<M\202/=}V\272=4n\t<\3644\\\275z\240\\<R\351\227;\345 K\274\003\027\246=\354\212\352\274z\026\202\274\341\201R<Y\\\313\274\032\223\256=\314bL\274OR\340\274\177%\270\275\370\353:=\372\016z\275\3372\267\275\206\250o<\256:\201<^\010\323\274\036\014\030\275#w><NV\276\274\223\347 \274.:\232<W_\332\273:\301$=\027I\251=}\301\247=\267-==])\207<$\254\241<@\032\203\275\247\022\246<\260\n\023\274\275\366\320\274\257\373-=rbG=\000\033\022<\2124`\275\242w\306:\0250\"\27570\373\274\343\356\237\274\221\355S=\247\352+<\033\001v=\376\024\236<\246,j=#\003\017\276\211R\225\275e\366\360=\272\374\341<y?\355\273\246\350\244=\373JG=5OJ\275\360\017C=\256\2723\275X\312\n\274|\023\254\272\215\032\034\275\335\203\342<\274c\010\275V\355\222<\035M<=\033\221\225=\324F\004\274\351\234E=\261\300\322\274h\224\264\274<\2679<\317\177%=ah\022=-@\'\275\257\315{<\374q\200<F)\342\274\033N\214\273J\3354\275.\260\332<|-\"<\204\313\037\275\216)<\275\306\202\217\275\017\326\210={NI=\250\274\263\274A\2547=&\267\216\274\267\322\370;\257\267P<\334j\002\276\025>w\274\023\003,\274\307\321!\275\323yv=O\256\351<y\244\230\274\tX~=\312?\200\275\307T;=\250_+=\032\037\252;Q\201\275\274L~N=I\345\022\272\270\360\270<U\251\213=\000\376\324\273\234\220U\2739<0=rE_=\024&`<C\373\223<x\231\220=\325\341(\275:\227N\275\316\235h\275\372\312\261<\\\214\212<\376\366\325\275~g(<g\224\213\275\004\334\352\275\300j\252\274\363\354\350<\347v\310:\235pu=l\026\326<P\230\372;gN\203\275\233\372\254\275\010\007A\275\332\007\267\273\357cA\274\331\035U<\266\203\272\275\257\004\211\275f\352(;3\031i\275\254\342\251\274\240{P\274\241\177\000=d\r\005</[|=\306\037\031\272\364\373M\275_\032H=D\345\307<\361\374\306\273R 3\2742\1770\275\303}\350;\257Vm=\307\371.:\347\264\226;M\242[=\260|(=:2\312\275}\030\321\274\0358X=\334\035]\275Y+\006\275\301\236\235<\317\325M:\346\227\016\275\277M?<\321hS\275(\360\201=,\270J;2\030[\275\n\003\357<\265+\302\274\376\221\\\274U \334<g<\242=\231\240m\272\311\005\353<\332Sy<<\257\205=\304J\332;\363\333M\275\202\023R\275X\222\021=\244\352];\361\256F=\330y\025\274-f\353\273AS\177<\212\241\206=?\254-=\301P\032;\247\277\211\271\344\021\341<@\221;\275\233,f=\016Y\316:\367[`\274\014c\344<\355Et=\317\'\324\272T*#=I\262\036\274\376\204\004\275\367\370!<\333Q\027=\335\246\336<tF\001<;\035k\274k\t\n:\266!\t>\022\323\245\274\013\363\007; \330/<K\355\001;f\017\3779\002^]\274\254\226\223=\002I\365\274\346\207M\275\031\021\022=\215\013\020=\034x\027=\"\213\000=\3134\224=\t\002\246=d\024\216=\357\001\226=\232\334\324<M\342\302\274\355\201\304\274SL\"\275\017\013\201\275\223\010\032\275e\243?=\025\253&\273\030\207N\274J\n\226\275\'\341\036=\"\277\313\274\3052\205\274\357]\354=\361\242\003=\333\247\317\274\302Y9<\275`\303<\255\3124\274-\270t\275\022\265\227<\235\247!<\207\235\327<\364\325m\274\242\227u\275\301V\234\274>d$=\017\016\324:\360fM<\273 \035\275<\237u\275\376\t\000>(\276\232:\364}\321<\224&K:i\312\201=\327\254\036\275\006b\252\272m\212\373;\354A\245\273\231\313\200\275V\223\310<\030\2126<8{\301<YA\037=\277m[=Y\007\016\274\256\014\226\274S\350\273<E\275}=R^`=\263D<\275?\342V\275e>\240\273qb\247\274\210\275\226\274\236\376^\275e\376\001\274\246o\211\275\004>\210\274\331,\033\273a\366\244<$\232\000\275FnF\273\022<;=\360\2303\275W\032\313<\316\323\021;q\3433=:\211\014\275\334\215\242\274\273I\037=\346\2172;\361\2761=^\331\317\274(\2465={\262`=\342\345\271\274\227Tg\274\363\346\003\275\332\274\235\275\353DT\275b\037\037\275mbI\275\303D\255\275\337\020\260\274\'\275f\275X\325t=\t\026\003\2732\230\203<\032\220\251=\204\257`<\264B\t\275\023V\356<\201\362\201\275\217\240\216\275\224V\240<\325\225\007\275\236&\224\275\332Cc\275\327\242\241\274\357A\337::\344\340<\371\353\232=\351M\021\2752\023\321={M\252<\221\275\024=7s\330<\253[\310\275\300\315\223\275\253\250q=\r\255\207\275\033=6\274\":\241\274\250\241\223=\335W\007\275Z\212\201<\252\032\221\274\202}S\272\201(.\275x\017\301\275\'\221\220<\274\306k;\2151\016\275\037\247\002;F\024|\275\033(c\274X\2224\275\3170\024=Y$\000=U\223\305<\2506\027\275\305\025\303\273\237\366!\274\371bV=\010\277>=\241\366U\275\302a\r\275\243\353/<\357\355\026<+\334\357\274\324M6\275@\346\'=<\203\250\274j\254\361\274J\367\217\274\236\230\204\274g\353\311\274{Z\017\275\021f\033=-\351?=-\272p\273\023\205\260\271q\276\265<\034,\214\274\372\016f\2741\250\035<,s\247<\327\354T;J\300\315<\255\251/=\035\256\376<\202{\344\274|\267\023\274\343\r\006\273x\303\325\274U\217M\275^\334Z\275\324\376\204<\034\300\n:D\256\307<\'\222\372=\347g9\273,\033\177=\362ih\274\277\030L<\304\212\300\274\305 \006\275\233?\217=\257X\301<\017l\216<\366\364\251<!\376\220\275\203\017y\274\254\340\003=\007O\206=`\317\207=\377\3564=f\263\004=yf\027\275\311n\245=\256M\t<98\027<\000D\216\275\'P\274;\351\006\326\274\016\205e;B0\200<\'Ak<\373^v\275!Z=<\316\371\277=\266\227\027\275\347\204\255=\017.\r=\336\032\202\275[\212|<#n\'=\364y\256<k\337o\275\344\220\r\274\350\326\316;(P\252<\rM\207\274\230\024\325:\366\204\310\274GD\237\274\243\225\n\275g\263\243<\3375\206\274\354\"Y\275\321Y\331=\'\200\346\274\312jF\275\241]q\275;\004f=c\'\363<\3354m\275\363uF\274v\205\242\275\003\024\026;\367\210\n\275\372&K<\204U]=\t/\307\275\033\325\032=\373\275Q\275\203\373\t\275gn\213<\352\342\216\275\277{4\274\315u9\275\324|h\275\322ay\274\227\337:=s\013\237;K\312\361<r\263N<\205\035\036=\276:\202\275\020\250@;\257%\037\274\350\310$=m\373\037\275\320@}\274\345\272+=\020\252\021\274wa\214;t\367\204=\275t\020=\030\326W=\272\031\243=\330w\217\274Oj\025<\360\270r=\262\264a\275\2022\036=\344!\236\274\004\376\274=\320\333@=?\346<;\314\035|=M\374r=\311\".=Kf\013=&8\025\274j\302\215=k9 =\337\270\014\274\354\221\256=\014\325}\275`rp\275A:\004=\032\336\030=\224T\213\275;\260\344\273\342\364\020=:\342\233\274\353\366\321<\215\377\224\274UZf<\275\230d\275J\203\262;\204\306!=H\355\013\275\275a(\275\336\002T<\306P\207\275\017\341\323=\014)\033\275\022m/\275)T\"<\020@M=u\246W=\222\242\311=9\2531\275W\013\220<\221*\357\275\220\030}<\324\237\013\275\204\323P<\235\324\325<\207\252\220=\231\026[<\214\360i=Q\235`=\n\tJ\275\266>Z\275\300m\027\273T!\325\275]\321\263=&^F=|\361\226\273\302\272\307\274\341\203\364\274\255p\005=\254\022r\275H\201\240<\215\213T\275\267\233\373;\003zM\275\333\374\267\272r\336p\275!!l=\342i\000=\017\221U<~7\225:_\207\202=X\005\034\272\'\236\035\274\326\'x=\014\313\276<\344fO<\254\306\032<\2742F=\221b\372<6\027\014=\314#\037=!\331\013\274\263;.=M\034\255;\376\014\t:\022/\201\275h\215\232<4v\235\271;\277#\275\331&\027=\3552\203\274-\375\204\275\264\313~=LY\362<`\303(\275\323Y\263\273\326\241\371\274`\350\205=\321?K=g\347\005>\321\3037\274]p\031\274XR\023\274\351\356A=u\340d=/T\204\275\261X\026=\276\371\277\274\217\2514<\333\326}\274\224&\211\273\374\001\226=\224C\'=\352\212$\274\211\273h=\\Bb\275\366\323\225=\035^\322;\247\021\217;[\000\360;\375\335M=\264<\003\275\231\000O<P\213\235=I\345+;\305\372\357\273a\346\236=3\3533\274@\206\017\275\034\241p=*\003\272\274j8\205\275j-\242<\217ZA\275\344I\233\274ryj=k\273\270;\004\\\345<\323\257\376\273&#]\274\342\"7\274\201\231R\275\314+<\275\020\222\343\273Gv-;\252\310A\275\241\362l<\224b\025\275\345\337)\274]\263\026=\344\264\321<{hF<\300\235Z\273\247X\356\273.\020\333\274Z8\205\275Q\r\337=*o\342=\361\3336\275\202\250v\275\334\320\r=\202.\231=\\\224o<\215H\310\274+QV:36\356<(\3363<\316\327\204\274\372v\250\274@\233\014\272\320\365k=\377\366\013\275\372]\201\274T\233\204\274|F\234\275\026Y\212=y\026\016=\303\205\200\275\330\245\t<K\334V\275\034`T=\222\362\247;\014\367\226;\021\356\200\274\346\323\004\275\231\231\000\275\032\222\274;\323\275\005\275\030\373\226=\236qe<tD\010\274\325\200\341<:\022\202;|HW=\352\223?;\201\304+=\177\226|\272\370N\362=\367\3402\274\330\204\021\273\027\267\206=\244|\345\274\300\215\r;\271\025\202\275h\216\361\274\272F_\275\234\331\351<\361\344\204\275.\rF;k\317\222\275\022\264\220\274\356\017\001<\203\264\002\275\226E\n\274\250_\006<\340#\227=t\"\253<\340EF\275e\350\275=\244\302S=?\255*=\rOU\275\276\002\266\271\\V\202\275\215 /<\226/\301<d{,\275\246r\000=\230d\371<\312\261\216\274\273\253\310\274f \234\274\2248\224<\376~\007;\206\305\265=\233/\233=\250\023\003>\240\005\335<\3441(=*.\026=\251\016\204<\214\027\032;E[j\272;h\230\275\020\036\330\275\240\265\204\274B\3320=\023\203\000\275c\001\360\274\333\334\334<\211\2302\273\201\250\256;\265\235\215<\373mY=\362Z8=\235\231\210;\226Ui<w\342+<&\312\217<z\352;<\347i\241\274\313\000\037<\277\235\323\274$\212z\275\212\2267=?\230b=RG\033=:j|=\317\365\251<\\\031\250<\2458`:\332\265\343\275\037\335\005=\036>\256\275\016\3465<\t#\n=\337NQ\274.\212\342\272uM\275\275\255\326\336=\305|L\274\304P<\275\311\354k\274\352>\251<\031Af\275\267\252\201\275\335/\025\275\243\3063=\234\321\233<\232\252\235:\213\001.\275\223\353\227=\220\352\302\274\274\004\336<\223\306\332<\356A\203\273\357\016#=Rd\322:n\254\252<2oI\275z\337V=3\000\262=\247\277P=\273\202\014\275)%\235\272&\330\002\274\231\313\320\273\223t\t=\235\255e\275\363\347\252:xDQ\275\342T\224<\006\357`=\0350q\275\005~\035\275*\037\232=Q\270\302<\036?\336<\254M\274=\371\252\226\275\341\363\000=\301\303\335\274\314cv;`\241\227\274\343Ae;F\341(=\206\333\372;\257\356\341\273\033\221\224\274\222\222/\274@\341\241\273\337\020\036=\205\360\241=\331`U=\364U$=|R\206\275k?\n\275\211\245$\274\247\302L\275N\321?\272\240\016*:\177C\001\275y\\\217<\201\311-=\246,c=\316\374\004\275\032k[\274F4\007=\366\201\014=\024K\025\274\243\\8\273\272KP<S\222\010\275\273U\204\274\310#\276<\020\025\257;z\337\023\275\030^\213<N\246\014=\241\214\004\273f\333c<\264p><\0011\364\274\314\201\200\275\033\337\217\275\330L\303\274\236\230\245<\222\222\030\273\264\r_=\010\266\231\274\213\232\204\275\275\324\304\274\307\340\334<\304\177\254<\233Z\032=P\236I\275\353,\030\275h\247\027\275\236!\206\273\322\227\231\275>\210\343<\"HS=K\2333\275\032\327\266\273\223\337\303\274\215+\003\273\302\3305=%\303!=j\023\365\273\000\303\263\272_o\237\275\307\204P\274\037\242\204;|\353<:4\272\201=W5\026=\306\"\034\275\2046\253=&\344%\275\232!\206<\300I\247\275\356R\023\274\326\037\205=\213\345*\275\334k\'=\273#\\=\006\214 \274\030c\250\275Z\272f=\006c=\274w\302\317<K\251\314<\325\254)<c\346\202=\023F\010\275\232o\226=\221\206\211;\354\232&\275\231\356\244=Q\2715=\377\003\335\2727\302\201=DMQ:%?\362<\017Bo\274]\345\243:\202\230\331\272\024\033\203<E\307\363<\330\345\351<e\004\222\275\027\227\272\274VpL;s\316 \275\217a\036\275v\002V\275\241i\230;\227\347\343\274\356\324\\;\225^\226<\t\\\256<\340s\376<\364j\251:+\317Z:\223\232\024=\346\246$;2\'\177\2758\024G=k\336\230\275\301\231\360<\216\220(=\235\226\021=\243\366\371\273<\374\036=\222+==6\250\231:\246\367\200<\nB\034\275\302^\211<\274\240,\275\374f\302\275Q\351(\274\r9\352\275\275\234\220\273\304\263]\275\203\236\231=>\217g\2758\253\235\275\243\342\211=\300\177\205\274\035\276\023\275GCf=\340\305\213=\240\332\033<\237M\227\274\203\r\201\275K\037\267<\341\324\r=mq\245\274\277\236\211\274\216!\013\275\370\213F\274\355\234\330\274TeX=\306\3743<\305T\307<\327\254\335<\255}\023<\227\2620<J\010\224=N\235\034=K\013\223\274\206\274\272<\304\204I\275x\266g<C\036*\274\242\267(\2731\002I\275j\005+\275\313$\022\275cz\300\273o\273C\275\242\213%<@\202+\273G\323\312;\345\305]:\330Df;\242\311\351\274!\024\232\274\333\255\200=\226\023\215<\"!d\273D\237\022<\271\316\016<,\340\247={\216\013\275?a\315<?\241\016\274\035\305\253<.\262\214:\004\014\226\274\354\347u\274W\315_\275\346\020\320\274\336\225\336\273\026\007\020\275j\r\230<B\3700<a\241\205=\317\304\007=\317wz\275\365.\221\273g\234\250\273\021\311.=\334?\022\275h/\263<\245~\266<k\207\004>\256$H\275\261\317\214<W\005\217=\026\230.\275\233\355~=.\206\312\274\r\202\340<C\242W<)\242@=\261\021T<!#\036=\340\000U=]\373\302:6Y\310=\031\260\231=W\362\243;O\320\037<\365\004\375\275\212\354\242\273/\2243=\302\264\317<\\\033\222\275\013\220%\275\253\347H=P\350\000<\234\271\007\275P\307\232<\002*.<\305\330<\275V\260=;0\264\214\273\256%\326\2752\360>\274\255\274\314\274h\214x<\23260\275T\274\356\275\231=N=\211Pb=\357\322{:\333\335t\275\236>\221\274\245V\233=\377\023x\274/_\205\275\324\371\315=\302\217\005\275V\263\256\275,\207\224=I\256\210\275&/t\275D\230\001\275\371\216\241<\345=\364\273\253\366\023=\224\213\010=\232M\213<cu\204\275\023\331\227\275?I\016\275%b\212=\356EX\274\371\003\001\275i8\003\275&\370:=(ZM=n\255\265\274A\2777=\r\362Q<\030U\360\275\t\032\306=\n.l<\226\261$=\271\222!\275\017zN<\256$\r=\240\336\002=o}k=\222\0164\274\336\342I\275\270\3652\275v\242\243\275\220\235\037\275LFD<\014\203\246\275\000\257\\=\032wg\275\\\033\035\274{\0063\274\200\200\004=\211\272n<o\225\221\274@\"\377<\001;\353<z\'\364;\243\247[\275\301%V=ITy\274L\2043=\255\211\335<\004R\252\275z\226\307\275\262\253`\275\347\305\273<\300]\270\274P.\304\275L\006\210=]\357\315\275(Z\206=j2\264<\023\310G\275\207\373\252;\240\3547\275V\316%\274-\265n\275\325\3376\275\356\234\214\275\214\275m<\014\204\266\275{g7\275?\252\037:\357\2462=\322\'\302\274\010\260\244=\262\376\202\274\345VL=`Vy\274\000\000\232<f\266\273=Wk\226=\260\373\034<\325\302\215<>s\202\275\025YG=\320\221}=\032\220\031\275\n\305\200\275\252\242\332<c\033\214=\234\004\002\273r\311)\275*\327M\274+\025\014\274\354\377\n\276\217\036p=_W\374;\017\023\363<\332\337\027=\032lX\275\013\001*\275\"\312x=P\346M=(\337\260\272\247\313\023\275>\244\265=H\202\223\274\347\252\203=~\276\317==S\032\272},\232=\304`\220=UR\021\275\316-)=\253\266\261<\210y\036\272\027\0244=:\266&\275\004?\002<\210ui\275I\177\311<Ln\230=\301\315\231=\233\320\225\275NO\212;;\263\203\274\211\230\033<\351\246\236=Z\271\253\275~G\'=T\326\247<\346;\262=\2672\236\274\213\240\231<\340\360\223<+\364\312\275\302\263\360<\032\357\316\274\330\315\003<\362v\345<$ \312<\013\315\240\275$\322\036=z>?=j\002\004<\235\273\010=\036L\251\274\014\213\'\274\336\352D=w\262\201\275\307\344\264\274\0031\330<y\256?\275c\276\235\2746\"\332\274\340\320\253<\303?\013\273\2472\237\274S\276a=\333v\273\274\275\037\t\275+\001,;\220\364\254\275\241\315#:}\237Q=|\344N\2753\355t\274\361\357Q;E\026\377:\234\237[<\240\217d\275_\343\257\274\333c\212\275\204\033X<_\'\030\2755\327\232\274\216\356\200<\n\346\230\274\262\246\372\273\'\344\327\274\010\314C=\354I\216=\024<\215\275\272N\272<\360\275\353\274\020I\271\274q\301[<\ra\332;\024\206\243\274\211\204v;0\221C\274\345\324\206\275\024\347\t=\017\310\227<t\td<\221\311\230\275P\372r\273\337\360\231<0\\\016=d\361\206<\016\243J\275]\352\334:\253G(\275\315U\t=\033\344<\274\273Y\251=\370\305.=xY\202\274\240[\022=1\350\373\274\216\315\245\275\211\371\360\274\034N\210<ErP<s\203g\274\3127[\274\020a\031\273\244\213v=\252\264u\275\225\347\300\274\3441`<\312\245\372\274]\366\333<\346\031\207<\3762\022;\033\017y\275\335\346u\275=s\343<B\014\233<\371\316y\275\236\344\3269ui\224\274=\242\033=ls.\275\301\027\004=,\034\306\274\301\\t=\013L\270<\224\261\340<\375\324\255\274d\032&\274P\232\360;!\243\360;ot\'\274l\311f=\314\223\343=\343\221Q\275\031C\312\274e\256f\273\271UV\275\352z\300;A\366\354\273\272\237\314\270\027\2622\275\305}j\274\021\233\222<\201\"#\275W\371T<\237\222!<_\007\364<\324\326X=\342*\003\275A\201)\2737\024\206=\216]f\2758\206>=\314\363\231\273\272\300\253;\033\020`\275?-\232=a\314\277<\353`\366\274\207&\024\275\035\374A\274\240\324\\\274\223\352z\274\245\267\370<\335`\030\275\211\001\023\274\334\250\222\275Y\270/=\333`u\274\311\336v\275u\014\270\273)\225\214<\1770F=\365,\016<6\320+\273^e@=\257\307\321<]\276\341\274\004\2118\271\2358\005\275K\236\026=\022#\272\274\303\256l=\335C^<\300ti\274tSF\274D6+=zbN=?\243\256<o\203\373\275\257$p\275\325\023\331\275\350V}\275\324\355\024<\007\210\337\274\027W\353\2742v\272=\310\221l=%\340m=\217X\350\275B\007\177=Wq\216\274k\317\024=3\231[=\250\n\026=,{w=?\005S=\006\213V\274\371\201\364\274\342h5\275\"\372\250\274\023d\260<9!\224<Q9t\275\300\254`\275\356\2675=iB\246;\314\352\214\274\337\257\303\274\235\375}\273\377\214\037=\'=C\275K\231\014\274\232\257\241<d\224R=\361\363Z<\341\177S=\373\277\375\274qZ\234\275\213\035\212\2757\"\267=\2121\240\274a2r\275\021\230W<\027\317\234=?/M=\252\037F=\210\332\200\273\3359\323:wF\310\274\205\340\000\276z\323\003=\3454\225\275*\356<\274\267\361\207\274\024\3345\274:\333o\275X\021\251\275@%\315<\352\233\034\2742Rc\274I\277\312\274\310g\374\274\210\033w=\335\255L\275\321Y\327\274\222`\301<\014\353c=\211>\215;\222\306\246\275\023\251\034\275\270\002\037=\3442\320\273 M\270=\313\032{\275U8\252<\324\2747\274Vi\357\274\365\023#\274\352m\312<\354\261H=>0\001>\305\026\241={&\335<\022\001V\2754\227\225\274\326)\216;\346\322<<>\204Z;\377\352e\275\352\214\336\274\302;\200\274E\201\361:\226V\201\274[\337\271\273-\\g=@)\223<\220\340\221=q\210d\273\257n:\274_\013\355\272RXB\275V\332?=\354Y\335\275\320L\237<\275/\217\274\373\356]\275\2533\234\273o\247Z\275S\357\306<`\243&=\372Q4\275r\210[<\236\223i\275d+\335\274\223\367\203\274{\207b\274\021\036a\273k6\026=\302\326\365\273\211\2542=\022T\332<\2600\272\275\372\213\031\275\232y\204=T\377M=\030pD\275IrK=\177\301&=g\274\342\274T\001W\275C\242\"\274\241\202\301\273Utj\275\271\303\322\274g\255[=\3239\207<\277C\300\270g\351\334\275\030\261\223=\365\025\343<\t\345\027\275\206\210*=u\'g<*\243\306\274\025\036\207\275\214\376\030<\251\311\034\275\375\343A=\211\265\240\273\306\206T\274\004\277\346<z\205\304=\263\270\274\274\035\025c=9\025\220=g\226T\275\234\0228=V!\333\275\363\255\034<Q\275\227<\343\017h=\342\034\t<\\\322><\246\3662=\362\276\247;\236z\267\2745\030\214=\204\377\002=sp\363<\227\356\370;\353\321(\275s\346\376<\206\277\357<\245\030\213\275XE\342<=4\216=\203\346\006</\304,=4\t\300\274\rt\216<\326\332 =\002|\002\275\374\001\355<Z\'^=\273\000\3359x\\\253\275\277\277\347=\204\345Z=\267\345\327\274\275,\016\2711`\203\275\235s\031\275\215e|\275\273\003V\275\2159\027=<jt=\304\320\234\272\374\344\322<=&\234<\177\036%=!\213\"\275\216\313\220<&\3125\274!\244d=i<\360=\310]\276<\221\200%=\324a\227<\'\350\366\273\275]U=/\332\267\273!^\177=\215\031%\274\373\373\212;p\263\231=\301y$\274\000\212u=i{h=x\\\201<\374\037K\274{\2768=\363\223\376:K\'q\275\250\313\347\274\315\250^<\350n\272\275\177>h<\202\377\217<\255\231\007\275XF$\274\375\306\254=\202\226\005=\334\230\241\274@\013\251\274\342_\230\275\034*\"=)By= \277D\275\331\376\256\274\027\305\"<S\225\'\274[-\226\275s\376\323<\366v5\275\030\222\014\275\247\351\316\274\217\310\324:\361*\352;\334c\313\275 R\206<3\"*\273\330~;=\322NW=|\206\267\274\201K\231\274\325\264\213<\247o\240\274\'o\n\275\314\262x=i\005\262<.\244\270<I\302p=:4`\275\316\254$\273\027\344\265\274dK\036<0\014?\274\314\031N=:+\030<\257B\311\274\335\025\2629\275)\220;\234\362\\\275\343\336\013=>\0342<\361\202>\274\302\001r\272\177\360\027\274+\315\006=;\023\024<t\2760=\363\226\261\274E\030\344<Hd/\275\263\357\"=:M\201\274h\322\356\274\264\251\300\274_>\251<\230qL\275\022\352\341<\361\001\270=\226\272\002=\315\332\312<C\215\232;1\013\201=z\225\216<\325\361\210<D\276`\274f\357,\276{\013\264\273\032\365h=N\233\230=\265(\n\275M\353\251=\203\230\243<\202D\306\274\235\326\212=\270\350\371=\315\316X=1L\222:\265\260\264=\267\331\340;\213\216/=af\267=S%;=\330\233\371<\265\0237\274\332g@\275\026;&<<\2204<\202\230\240<y\323\217\275\260\n\256=\212\"\315\274\304\032&\275\251\317\301\273\0261\001<\275\224I<\234\337\345;\2606u\274\256\242\367<\254\314\027=\201u\\\275\274\307\364<\260\321\271=\241:u\275\352\037\225\2756\006\006=\2324\034\275\014\260#=\376\343\332\274\263\021S<\246\3747=\343=\326<\356#*=\301\201\375\2743\\\201\274\033\003;;\345\304\236;3\345\203=%\377\214\275\3259\\<9x\270:x\276\241\275zW\252<\'$\310\272\031\360\340<\277FG\274\034\247\264\275q\007\204\2756\213\334\274z8\000\274\0352$<\244\261\253=\314\216\243=~\304\215\27575{\274u\355\233=\221\225\027\275\350\234\223\275-:f\275\026\004[<t~\037;\332}\022\275e#\313\274$#/<\340\272\n=q\223\331\274\036\252$\275@?\325;\325Q\030\275H4#=\226et\274\005&,<\213\234\'\275\375\330\241<\233\343\202=\335*\216\273\32667\274\330\311\201<\363:9\275\263\003\343=e\343\200\275\301\027\342;,\342\354\274\n\260I\275X\2446<\035- <K\311\245;\244\356r\275\335\352/\275-\013\035\275\r\376\010\274\030\2368\274Q#\350;\265_\242\274)1C\274\333\310\306;\314M*=\317\222\312<J;r\274nA\305<\303V6\273\254\337\206\274\177-\211\274\324\000\211<\205\375\004=g,\216<y3\313\274\234/2;sQ\211\275\260\344h\275\356b\226<\326rA\275\371T\237=\240k\323<\201V\240= \020}\275K\304\002<\002\253\211\275\245\234r:\"\310\026\274\332\201x\274k%\237\274\263\3057=\002\277h\274\264\203\276\274\241kl=\371ml<\377\323A\274\322\356\273\274\222\353\0078\234\001I<ka2=\221\300\261\273).7\273\246h\n\275\006\022\360\274\006~\364<J\006\016=>%\357<\027F\003\275\253b\350;\205\3238=y\377v=\235\n?\275\037\016\022=\022\363\262=_Y\214\275=\264\001=\366\\N\275oq\255=\030\200\207<\026\226y<\\\244\367\274\021\016\213=BZ+\275w\231J=J\214q=\212\326\275\274\240\277\305\274\223>1=\304;\261\272\360\276\360<\267\177\233\274\375\261\246\275\371\242I=Mw\335<\222w\031<\374\310\212\275\327\002\201<*S\256\274\024,\010\275p\223\361\274\344\240\366<\327\237@=\276\335\232<`\265\270\274w\207h<\025\034\304<\241+G\275\346\304k<\224\025W\273\356\363j<:\366\314<\262\221\330;#\211\340<F\022\030\275PY0=S\372[\275)\365{\275\223\347#\275\321\002\027\275\315\305+=F\222d<\3217\244<q\302(\275\364\341\247<p\212\267\273\242\253W=.+7\275q-\276\274&F\213\273\244$\346\274\345\227\211\275\225\330n=\272\327#=\323\316\274<N%\005\275\305\202B\275,#q\272<Cf\275\336\221\037<\322<\262:;\363\007\273\330M\214=\367C\337\272D\226I<\3216\010\275\262%\203<\303\306*\275\217\341\223=\005\353\005=\337\262$\274\360\031\200\274\332\374?\275\256\250@<Qv\262=T\034\023<@\206\272\274\243{)=\353\3235\275\261\262R\274I\332\317\274\007je=\337^\377<\033\006\266;\212\345\276;Ca8\274\naU=b\340\007\275\244\353 \275m\032\343\274\005\332O\275\227\265\010<\315(\020\273\200Hu<\222\266\000=z\251\207<\342]U\272\25455<\032:\246=\207\013\317<\204\311\261=\213\316l\275$?\231;\213c\005=u\340\367\274\276N\224\273o*\254<\367\026M<\347\3105\275&\035Z=\030p\357\274L\212f\274\250\212?\275\265\237\232=\357\315#\275\006\227~\275\314b3\275\330\363r=^F\227<cU\203=D\264\035;\202\261\227=\"\025\315\274\365\214\225\271\026\202\265<x\361\215\274\215,B={NK\275\037\2574=\307\302\357<O\220\231\275\322\323\225\274>\002@\275\313Q\337\273\256\010\207<\314\371\354\274tM\214=\262\261\205=\230s\226=\030#>\274Sl\216=D\302\210=/\254\230=$5\227\275\352\316\007;W\363\225=Ua\266\274\010\027V=\371Fq\274w\251\371\274\004JR=\023n\226<\273k\013=\252Q\205\274\003\225\204=\"\335\'\275^X\275=$\026\206\275\226\370p=\251on\273A\301[=\270\366%\274\311W\230=\307YL<<\376[\274\344\263\246<\260\3229\2750\220\300<u.\226<\2678\257\274\206\262\336\274\260b\344\275\325.A=\245n\242<7\353\224\272\023\266P\275\025w\225=\003)\377\275\303\305 =B\247\225\274q\005&;$[g\274<\017\317<\321\253\245=Qi\005\275\322\300\360\274\035W\377<\314\323H\274\004\207a=cl\'\274rp\254\274\233\"\017\275\"\222\362\274\340\367;\275\010N\271<\366\000\256\275\366\005=\275\005\007\250\275H\'\364\274\263\322#\275\025\350 <\210>\267<\0240F\274\324>8=\211k\310\275g\024\'\275)\203\206\275j\337!\275\301\2419=\220\262];C\264k\275K\036\213\275\337~\240\274w\254\204:\236\313\214<\277\243*\275\262+\005=(!\350<\312\205)\275\033\375c\272\237U\252=\031\330)=\351\356W\275\332\2372=\330.\265;\020\026\304\274w\004\215\274\345q$=!\370\332<9\352\342<\347\302\265<Vq@\275\026K9\275\002`a\274)w\246<\037l\027=V\023\336<\242\317\247<\2262\215<D\"\017\273\247\362w\275\010\3539\275v\272\266<W\030b\275\014\\\350\274`\257\377\273\351\211b=\260\312*\275\377\"h\275\274^\267\274`B\334\273+\352h\275\312O#=I\300\"=R3\212\275\377t+=\000@@=\373}D\275\201\205F\275\277\377\020=2\235&\275Q\211g\275\267W\304=\364\340\025\275x{\236\274\265\232>\274!o\304<\261$\257\275m\346\310\274\035&\t\276\'\315\225\275\357\374*\274\207\343D=\277\334\221\274Z\201\211<\003\3128=\265\373\013=\325Ta\273\013\342\"=\202p\272\274\335-z\275\237_\240=\034\350K=@\023\017=n\213\227\275\377\337\313<flC=\336[\332=u\004&<$\2263\274\211\344\377\274*\207W=y!\301<\210]`\275(\204@=&\276\345<\261\353\355<\237z\250;\367\332\034\273\002\330\001;\304,V<e\301P=mG\000<\345~\014<Gk\211\275\243\325\002\274\314\204\017\275t\250\254=\r\312\273=#\267>\274@\\\275\273z\2353\275\006\370(\275\360Nx=O\277I;q\237\005\275\212\200U\275\314XO=0\317\275<\316p\036<\004\247\343=N\241\010=m\003\033<\251*\221\275\tn\236\273\337q\222\274g\001X\275\375\223\223<\305=\025\275\305\243+\275\032O\216\274\250\325}<w\025H\275V\347\254\275TT\250\275\331\277\223=\020\313,<\271J\263\274\362\202\336=D\221A\275S\031\201<\240f_\275\000Z\215=\336\352\263=2\373y\275\250\033\207<E\210\342;rQ\223\275\233|\204\275G+<\275\307>\234\273\206\006\216\275\213#\225=lT\255\275\217\346O\275N\0333\275\330\353T\275\323\211\007;\212\217\270\274c\026\356=\366\005\010\273,\246d=D\006-:\224\000\263\272\374A{\273\316=\277\274d<\261\274\324\236\324\274\235\364\370\273AO\t=>A\325<\037\332\352<Z\272\277=m\332@\27542\013\275\335\\\010\272\250\t\000<eZ\260\275\020Z\372\274\006\372\014\275\'\277\254\274\014<\005=j^G=\363g\266\273v\025\337<\361s\r\275+$w\275\277\246\354\2721\255b\273\003\363=\275\274\254\255\275\370\204\260\274\036\2637;\226\236&=\376\351k<\265/e\274\004\351\017=\367^f=\216\331\225<I\n\343<\215\306\261\275}<?=\334\002\000\275n\0250=\326\2337;\331\334\313<\026\332P=^\337\017\274\177\277\037=O\347\322\274\017\260@=-\023]\275\273~\263\275s\346\312\274\232\251\035=Z+K=?\014\007\275\000N\357\273\366:\237\274\2628]=\032\365]\275\362Z\236;\337\376\327:k\271\002=PWx\275\263\201\010\275>\243a=d\025\031=U\251\020=\265\255\362<\361S\020<\277\177\022\275\315\323a<\367\243\203;\337\231\017=\272&\215=bY<\274\246\375\320=\002\270\245\274@\227\004=\213$\267\275\264\017\275\273\314\177\265=\255\231\253=\342&P=\300\371\333<\376uY=)\300\022\273X\314\325\273@B\256\275E\374(<\222\273=\274Vq-;\221\211\205<\2265\020\275x\007\031\274:\005\237=DCC=\271\215\227<\024\330\314<\357\325\310;\\\037k=W\307\276\274#A\004\274+\216\340\275/\354\352<\351\225=;\377\267\377<\177\263\257<^\003.\275\372Ec\272(Z\312\274Q\263\244\274y\360+\275B\365%=\211i\212;=\3333\274=%\211=\rN(\273\277\223\340=R\266\r=\260\217\227\275y\030\036=\307\272P\275\377y!\274\226|Z\274E\023^\2752\326E<.h%<3\315_;\276-j<{L\331\274A \013\273z\014\331<\260\210\354<Ggs\274\370\313\265<\317\013_;\314\324\326<\007X8=\360H\325\275\'\354\203\275<E\274\273\241qz;2\320\323\274\300\037\243\274[y(=\003{P=3\034 =\276\241\032\275\001\202(\275\r\330\361\273\215\272\006<\314g\025\275)RR\273*wr\275\0173\207\2756O\335\274\222\332.\274#Vq<\336\334x\275\237\377\254\275\207G\201\274\240\024\317=\336\356\262\275\2042\304\274\360\r\256\275\226\022k\275\343\227&\272\253|\005=5\'\202\274b.\364\274\\\306y<+%\223;@\\o<\311@\274\2745\375:<\000\022\007;\236\251\207<m\031\321;I\034\307;H\225\347<2f\221<r\221l\275\235\200\032=\261p\274\275\372\252\241\275u\247y\275\200\321k\274\231\245\362\275\017\325\024=\351\241\237\275\201j\354;\320?\210=\356\364D=\327\303p\275\035T\203=\033t\213=\374\310\216<vdK\275\262\362\345\275\246\326\020\274\030]\004=X\247?<\365}\211:\016\003v\275[\257U\274p\022\214\273j\200\255=h\364\304\274i\231 =\275\364\222\274\236C\202<\274\016\304<T?S<$\305\326\274X\263\301\274\026c\256=1\242\270\274\205\236\333\275w\340\017\274\217|\025\275d\341F=\'\373$\2750z\304\274\363\343\210;\351h\262;f\227\216<\017\2037\275$\\\305<q\013F= K\t\275\320\016\212<9;P\275q\341~\274TG\213=\330\276\324\271\303\261\205=\000\227<<\344\014\254\274\204\350\t<\327\010\200;\271\021\026\275\274\335z\275XHX<wG\246\273dxr<\t4\032\275r\340m\2757\365\345\274+|\007=\362\267\271<\274\375\262:*\276\017\275?\345\263\274 \232\307<\314u`7\001\nC=\0020\273\274\317\217\214\275\215~>\275\265A>=\320V%\275c\325\024\275\230\251#=g5\033=\017h\323\275\272\322\020\274\014v\236;\364$V;9i\254<`wE\275\364\211\275\274f\311q=\344h\224\274*Fk=d\243\265\275 ]\222\275\335\007\016\274/}\336<\367\003\327<\335\246m=\270\207\244=q7z\275 \253}<\027\366\t<U\351\205;\344j\000\275d9\323\274w\325K<T\0218\274rM\231\274y\032[\274\027\3232<\351d\270<\303o\037=\3157\020=(V\216\275\304\252;=\341\007\254\2751\272\215=\276\315\021=o\255\316<\347Y\266<\373\216-=\375\233:<\260\205\200<\205\331\036=\"\216A=\370\010\031=\251\256}\275*\257\374<\272\365\247\274\364\324C;$7D=\332\225\002:3\316@<\234\332\235\274\035D\004\274\225k\351\273f$!=\321\t\306\274\212#9=\024\276>\275\003\232\005=\013b\253\275?(s;\210\200F=d9\311=\2514&;\241R!\275\256\206V\275M3\022=\233\\\247\273\330\243\356\274\317\\\020=\223\3305=\353\367\301=@\204\253\274I\265\267\274\345\337\213\275\332\207\013\275\277)\347\275~\353\323=\217\212S\275g\2616\275\272\343\310\273>2V;\000\000\207=\276S\214=\325\023\207\275\000:\274\273\331\261R=\232\005s\274\331:h\273\352\244\213<\230\240R\275\221a\351\274\373y\002=a\350\373:\363G\231=\023.d=\201\3771\274\352\t,=]gt=\330\271q<\315\216\240=\005\264\261<`\257\313<\314Q\237<fU6\275\210$t\275d\177\203\274\00230=(\307\251<\313P%\275\t\264\300\274\310\371\350<0\333\236\275\275o\016\275W\336E<\034\322\255\275e\0011<`\232\004=T&\351\274:`\364;\322F\235=\337\216\003\275\2317\n\275>O?<\271\t$=\303\372<\275\345\375\330\274\324X\t\275_\'\261\273\340w\260\275#\261)\274f\246\016<\004\212\253\275\025\211\001\275C\0353=!\322\360\274\310Z\201\274\366,w\275^\271\362\274\3420\335<\371\r\222<\005s#=0\272\200<\010\342\336<Ic\014=\315\213\210\275tP\222<\247\305R\275\303\237\356\274\200\336\346<\352\303V=/u\024=:9\312<\276\255L=\021gf\275\322\216\203<\265\313\020;_E\311\274\005|\t\275\305\271\222<\312_\255=\277\215\341<)\206\203\274\"\202:\274\220\233\266\275\201\210V<\361$\226\274\320\337\230=\332\333\371\274|u=\274h\024!\274\360\216\240<\341\366\257\275\370m\332\275^\212\301\274\'\307&:g\215#\275\252\335;=y\rt=\277\010c=\036\261;=\314\325s\275?5s\275\317\3731;mH\225=R\036\357<~:\037=?W\266<\310\325\214=\224\"\220\275\2475\274\274\"W\332\274\370\004f<gpH=\033\357\361\274\343\377\024=oW&\275\3430u\274\020c(=p_u8\377\342\202=P\215\004<_\372T:Q\215\034\275\016\357\233\275\307\342\230\274\004S\030\2742#&\2754\213N=\206\256M=\0135\260\275\206\206\253<\027\026\230\274\204v\217\275\242x\022=\n\274&=f\234f=\323<B=\007v\022\275\034\307A=3\004\312=\363g4\274\016\033\013\275 $\201\274\247\200\247=\342\251\372\274\243W\365\274\254\303!\275\200\017(=\224l\244\274\276\007\271=\306\221\024= ,\247\275GV\215\275\307\003\340\273\010\360\201<*\264\204<\223F\317<\t@\325\273kY\010\275+Kx=\013\0211= S\375=$I_\275W\346K\275\265\tx=~;\304:-\315y;V\371\326;e\314\217<p\331G=^Wf:\014Z5<7\250\237<\210C\227\275x\320\271\275\206.\223\274C(\271=\345\206\022=\360\242\'=\243B\210:\313S\344<\000-\344\273\261\214@\275u=*<r\"B\274\320\351\343;\001\261u\274\\!\037=\222\021\236\274{Ij\272\347\031\236=\252\021\341<#|\276\273\234\225\215\275B\350\266\274J\326\205<\262\312L\274pl\333<\314\201\210\274\343x\320<\013IG\275\340p\236\274\373^\250\271!\246N\275\233=4\2752/)\275\3227\013\275\3626\237\275\331\232\320\274w\206\037\274\354\256\216\275J\256A\274\275/\202\275\212\t\t\273\313\231\266\274\313\014\261<\277\211@\273O\223\322<\246\025\257\274\251\277(\274\235\265\001=\366\034X=\205\312\332\272m_C\271\315\217\330=\275\010\\\275K\327E=h\031\324<\0246\235<\354E\243\274\315\360\221\274\272\2239\275R^\225\274\344L\374<\325\267\213=\223\255\013=\215Y\273\274\342-\200\2752\275\215\272\r\031\037<\023\2621\274hk\016=\361\355\361\275}Ee=\231V\010=\276\244\333\274\224I\033\275\007\355\347\272\316\035\236\274\230\024<\274\341\226\223<\3767\207\274\335\263!=\001\010\014<\324\376L=\016\t!\275\314\225\217\275g\312\256\274K\304H=\341\037\272\275L\326\177\275\354\036\322=\027\016\023\275G\030\000\274\244\0062=gD\211<\254\026\216=k\340i=\340>\035\275\233\200!\275|\026\025=\233\327K<\346\036\363<\277\212\227<\227\211\013;\272\321&\275\333\013*<%\333b\273*l8\275e\312W=$\030\315:B=]\274-\330B\273F\370\206\275!\201\364\274\n\246\317<\257\224\005=D\277o\275\366\357\\=(\372B=sk};\303\200\257\275e\350B\275\031}\251=\3361\246=z{\304<\316M\244\275\024H\203\274\373\204\002\275\303\033\346<\262_\r=Qo\222<K7\311<X\345+\275c\344\264;\362CJ\275\250m\243=\203\313\234\274k\322\233\274+\r\332\274\256I`\274\227\241\200=\374t\206<\324y\235\275\354\224;\275\246y\366<a\010\255<vZ\t=\2439d\275\232\273\210<\361\214G=56z\273\272\312\277<H\270\211<\305z+=\t\217r\274\276\237\031= WS\275{\333\212\274vP\351\273a\271\370<\321^\324\274k e=0\245\261<\351N\246<t=\202\275\244\317\335<\263\244\017<\024\311.<\364\367\271<\272\240\213=\362\307\017=\226\341\004\274\027}\235\2751\342\271<\264n!:6S\220=/{\246\275\351\306S=d\323#\275@\306\026=\313n\213<\366\0371\273\356g\337\275\341\272\332\274\270y\267<?\251\006<f\\\236\274\367\314N<\033\037\275\275\245\372\352\274\024\310,<~\252(\275\014\236\312=U\276r\274!\235S\274\301?\241;\300k\224\274\202\037\330<\253Q\272\274\310N\336\274\333\271\375\272\004C\335:D\306\230\274lBO\275\r\177\\\275\004\325\034\275\031R\351\274X@o<\362\307\025=\263\302==V\007\246\274g\377|;\255\347\004\275c\ri\275y\347\000=\027\331*\274Z\253\302;|\245\031\274\303\344\n=\224\276\215\275\214(\200;CF\366\273\330\342\207<SL\001\271\202Ui\275\234\267+<\264\337\214\274$0\226\271\326/V=J\311\224\272\020L\031\275\201\325r\274\007\200?=\2157b\275w\2352\275>\301\002=\216 ;\275\375\374\205=\332d\246=\020\2216\275\026\227\203=%K\262<M\026*<n\2267=\374a\200\275\224\025\357\273\270>}=\3700\242:|\302m\274mw\364;`&B\275c\331\366\273]\254\254\274\325dJ\274c\261Q<\200\331\\<\024\223\032\275C\235\205=\021\304(=m2\226\275!\370\262<\316\263\n\275\371b\323\274P\033\223<D\301\272<\0066\215\275\360\334\312\2749\315\246\275f\236\341=\311g\306\274Q\"\024=f\346\256\274Y\205\304\274\031\263\364<\227)\244;\333\227\034=!`\177\275\343\030\032\275m\"\235\274w\246B=:\266\252\274\267G\025\275\025\3655\273\361\315\234\274\026\254\204\274>\203\241;{\265\270\275\361\000\325\275*h\240=\265\020[=<\007\007\275\023\307\345\275\234vm:\'\250\033\2743O\264<\342\001\204=k9\376\274b\307j=;h\202=)\026\240\275>B\031\274Y\227\206=:\234\037\275\211%\247\274\253S\026\275\317\222Z\274\017\323u\274L\3060<4\373Z\275)\363\214\275\2414F<\224XQ=\210\343\273\275D\216\221<X\251\271\275\371.\363<;r\250<\347\227\037\275\231\230\372<[\2743=\244\024z\275&\314\242\275d\230\276\273\365>\243=k\205\010=\216i\003=\037\256\251\275\315\266\212\274@\343\214<\351H\016\274\236\345O\275\232\275\344<\372Mv==\221\331<\000\240\270<=\372i=\271\267\235\275\277m\346\274#G\027\275\036_\000=\315\321k\273\302\374\016\274\312\207\n\274Rbe=\375z\235\275\035\323\016=\275\270\005\276\n\361\017\275\004\327<\275\230g\234=\013:\266\273\343\002\345<[\365\200\274hC|\275\013\356\342<\351B[=6Sz\274\r\326\370\2733&\332\273h\t\002\275\205\330);\272\263\002\274\307\036;=\334V\222=\032\346\031\274\263\225\017<\037\003\350\273;\2119\275\345\240\003\275\006\304Z<\201$\207\275:\314X\275o\237\263\274+\230\324<\376P\262<\220\027\033\275lk\243<G\336n<\222o\313\275;\202\222=c\217\003==\035Y\273`U\366\275t\3246\273\2513K\274t2\030<\374\037\027\275\330\265\005\275k\323\t\274\006\364\263\275\366\211\374\27449u\275\264\236\246\275\262\t =\035\205\376<\340$B\275\274T#\275|S\331\274g\217N\274\277\370\224\275%R\246\274y*\220\274\300\177\010=\252\322{=\222F1<$XA\274q\203\207\274%\3407\275\216^l=\t\025g\274S\2744=\212Q\224\275\334\231\013\275O\022v\275%;\207<s:\366<\007?\247=\227\212%=\265\303l\275\006t\266\274\230\215\212\275\254\243\350\275]\254\270=T,\246\273\027x\222\274\211?\020=;I\360\274^\364\351\272w#K=\272N\224\275\221\017\230<\210\207\231\274\366\255X\275]\347 <\332\005\013>\3329U<I\250\336:\365_D<Dk\346<z\214\307\271\\Z\313=\317f4\2753p\224<\006\025\364\275,=\022\275\347b/=\311)\205=Y\332=<\226\356\312\275\361\021&=C\322Q\275\322\220a\275\322ct=\035\025\231\2743\277\242\271\007\207H=\272/\014=c\242u\272k\250c\274#\002Y;\213\002\355<\354l\221<\23171=V\322G;\343S:<\3430}9\230A\'\274\347\035X=\356Q\321<G>\325<\001(\243;\223S^\274\245\212\212=\304\336\234<\363\260\013=\002\2303\275\005\311\3609f\333\256<\302$\033\275$vJ\275\310K\305;N\033Y=\307>w=w\230$=\243A\302<\2661\n<\3055D;$\342\033\275\220\365b\275\021+\260\274\037k\353\274\210`\004\275\035\377\3419R\257/\274\221j\034=.\360\256:\242L\022\275\021\264H\274|\020\212\275\327\035\037=&\236\225\274\035\246\013\275MR\320\274\244\033\326<\003\232\315\274\033\'@=\034\350\320<\227m\253\273FX\215\274\323\207\266\274\277\177D\275\213\215o<\242\226\376:z\354\010\275\372\270\027\272\264\010\217=\321\304A=\"\203\275\274e\022\254<\357\013G\275\214|\267=\347\022\324\274`\023\003\275\022;s\275vr\372<\r\360G=\301\330\206=\2136\335=H{3=\333-\207<xo\205\274-U\010;\337\360\224=\370Y%\274\013g\t=\221\341h\275\266\304k;9\355p\275f>W\275cpB\275\226\200S=\311\034Z\275{\220\023\273)H\030\275\375(\375\273\322;%=R\001\253\273\222\304\200\275\n\033A\275r\304\277<\016\255\024\275\361\264J<\220\030\274<8h\252<\r\250\033\276\246\333\3359v\301\010=\242\371O;\275\225}=\001N\023\275\024\350\351;O\365[\275GB\325\274\242\013\223\274\241\302!=\315BY=>\357\376<\370\300\243\273\202\344\033=6\030\226;\221#\260<\321v^<\202M0=\233\031\n=\253\0218<*\177&\275Wt\\<\365\"\020\274\360d\201\275\017(\360\275v\345\327\274\030\201\235<gte\274\241\271F\275Q\027U<b\310\225<\263\336)\274\364\344\217\2751aK\275\376\200\021\275`+1\274\217!\010=\320go<\366S\260\274\236U\331;\233z2<T\200\261\271 \013K\275\036\010=\275\211wg\275\220w\304=f\347[\275\230h\302\273\351\"\345<\2709j\275\311\037(\275\212\263?\274\022g\360\273\224\247\320\273\343\243\253<\277\2273\273\316\'B\275\323>\353\274\270X6\275wQ\375;\304\342\234\271\000\260{=\375v\264\275\010N\210<\036-\235\275\347Z\255\273\215\2722=\317D\250\275\201\001L=G\327\337\274\023\257\270<_>\217=\272n\241\275 \365F=\344E6\273~\247)\274{\301\256\274\247I*=\254\263\231\274l(.=\036~\246;\352\344M\275\272Y]\275@U\004=\200+\032=\264z\010\2750\251\227<\267\370]\274\371 \205\2746\'\022\275\353\353\025\275\331m\207=8<\325\274\370\241\031=\301T\177=\276nT\2759\320\335\274\206\335\033>\320\021\341\274\241\303\026<\034=\331<]\247\203\274\3516~=Uz\002=\232\262\264\274X\315F\274\252\315\334=Ca`=\240\002s=oj-=+\207\272\274\316\t\211\2745\311\330\273\177z\023:\223=\333;\314\341\221\275_\253\211\274\353PQ\275\262zL<whd=\330\372\335;\003\037\361\274+>\367<\252Sd9\257>+<\026B\024<\332c\201=\277\246\344\274\233\3169\274\335|\217\274\373\262\301<\306\353\310<\370# \274{\317m=\021\237\360\273\003E\007=\271b\233\275\205l\035\275l\315s;Z\3771=k\334_=~\0362=\341]\245\275v\320\245=\323\277\202=\265e\251\274]|^\275\210)D\275B\273Z\275\"\362\200=\275\211(<-\372l=\023d\n\275A\275G<\247.G=\264\024K\275\300\311\300\274m\004!;\336\243f\274\236\226Y\274\371\304\251;2\363\342;\"\254\202\275\030\031\377<~\344\206\274O\200\366\274xcf\274\177\226U\273\201\261\214\274f\260\013;\207\241\356<\345\250K<\244\266\317\273\202\303\275<\224l\202<\'\r\024\275\375i\367\274\210\324\216\275\315$M\275cK\n=\032\274\247<\301\275\017\275\214Q\033;\3565\213<\344\335s<}\217F\274\340\234\353<\272yE\275\364H\233\274\307\233U\275\351\342\202\274\3247\357\274i;\322<7\300\373\274<\254U\275q\245\177<\372~\r\275[\372\022<\1777\233<\235\261\t>>\265\276\273\261f\317\275\343\330\305<aa\324<\3479\244\275\230p\211<0b\352\275N\300%\274\345\264\231\275q\363O\275\\?w\275\336\200\261;\205\247y\275?\261\314\274(\354\227\274,\365x\275\217\246F<^P\315<p\025\003=\263o\325\273n\202\374<\344q*\271\266\263\273\2749\227\036<\267\320\375<\3356o=\231C\254<\336h\010=\366\337G\275\345P\225=P \231=\325\276$=\277\342\243=\255\244\212\270G\363\313\274Kn\327\274(\3620\273\234\262H\2752Q\364\274\0275G=>\351/=0\253|=\270\351\315;(8\220<\362\340\014=J\037=\275\023z\177\275W\347\304\2738\034\377\273\301\013\3129\362\017`<\337vG\274\030+\246\274\354\267\263\273A6\247=\252(\303<\333\270K<\013\225\236<\375*\324<\356A\326\274Z\271E\2751s\217;\304#k\273_\301j=Lo>=&T\273\274*\365r\275\003,\r\2758\021\225<\261g`;\367&\221;\233\351q\275\311\225\177=\235%\312=gn>=8\034\311\274d\376\177\275;R1=\227\255\013=\262\214\207\275\334\275\204\274\276\222\037\275N\317\240\273A\034g\275TVN\274\271A\333\274\322\025\005\275\216\332\365;\323\2607\274\326\026\374<\363\317\004\275\232\276\004\2752!\215\275\303\177\374;\341\365\216\274\202\374\227<\347c\255\275\n\001\276\275\324\364\212\272(0\223=\337\275u\274 MG\274\366\320\277\272\004\265\330\274\021\337\t=\221\342N=\020}\0049=Y\035\274\352`\002=tbU\275\222\2350\275\373\322\013\274\272\243\013;\335\016\301=~[\332\272L.\361<a\212\316\275\362\325\204=\032\225\242\272\303\n\264<\312\270\376\273\336\276\360<\221\230\204<\0107\223\273C4\255\275\201\270\333<\350\320\203\275m\036\336\274\330\323\366;\352\327\267\274\325!\260\2740m\270=\353R\001\275\342d <\307\027\200\274\025\231!<>c:\275\014P_\275\344\027\237\274\351\325\017=\2406/\275\271\261\324<h\321\025\275\242\203C=\261\372\262\275\001 \246=\201\034\225\274pZe=X.\215={\024\333\274\243AF=6\271\277\275\034\274{=r\324Z\275fM]\273/\022\353=\024\246(\275o\324:\275\370\321\371\274\036\\\234\275\205\n\323\274g\3249\274R\217P;\017\341\357=\276\330\300=\305\002\256\274B2\021=&\030\037\275\273\004l<\300\236\212<\35594=\031\341A=\325\214\211\2759\220\245\274oBh\2758T\356<\236s\270\273\2472s\273\377\002\332=\236Q\303\274V\031\362<9^u;*V\331<H\217\035\275B\335\230=T>t=Q\032\"=\336\313\201\273\363\301\r<M\306\206\274\342f\260=\177\320\275\275\277+\243\2757!8\2750\177\0149\023i(\274]\207\231=\033\250:=\250\376\302;\233\257o\274\253\234\222<\030]k;C~E<\232\363\255=`$\230\274s\222n\2752d\365\273Eq\217\275B\006\252=d\tq\274\3029D=B\267\371\271\'\037\355\274g\347\303\2721\246:\2750@\253<\032\247S\273\3116\202;k%[\275\177\253U<\332j\t\275\262\201\374\274B\022\220\274\363\232;=\265\243\036\275\272o[\274\340\277\232=\257\326Y=2\201\340\274\334\304\243\274&\2049<\202\321P\274\206\355\274=\020s\217\275\331\327\020=\231\351 \274\227\330\306<\264\324\265\274\350;2\275E\221\200=R\377\216\274\217Q\251<q\007\022\275\212il<_\214\007=8>\004=\004\232\351;W$\032<\314\371\032\274\252\320\037=\345\221\237=\373\374\376\274\327SJ\274\331\027l<nx\000=\236\\\205\274r~[=\357\n\026\274XQ\230<&<\221\272\321\332\233=\323s\t=Po\002=s@\002<\251\201s\274\320\2352=H\3134\275\211\237y\275g\331\001=\357mR=\243\000=\275\247\376\'\274`\334\341<\306\302\203;\251$\354\273\244\300\224\275`t$<\357\306\247\274\311\341\212<\021\254\231\275\322`\363<\211\256\301;\177\254\026\275\253\262\263\273\274\317#=K\321\256=\273\001)\275\351k\020\275\023\255\206=&U\007\274\034\244\344<6\002h\271u\35339\225\373\016\275\333\002\222=\177sn\274E\326\243<\275n\255\275\036\366q\274\227\252\320\2757\"v\273\236\316#\274\033\225\262\271\020\355\313\274\326T\t\275^r\"\275\271\250\352\274M|\t\273\021\027`=\354\204\004\276\374Ea=\214\335f;Q\231!=\234?\230<\257\026j=VN,\272\221\rL\273\"\347d\275\037X3\275Z\201\214\274X\330\010=\010\303L\274\234\205\313\274Z\\\250\275\016\242\000\275\022]\263\275\214|\270=\251\373\351<F\221\202=\262\240@\275+\237\214\275\316\216\261\271\335|\222\275\262\t\240\275\222d.=I\210\255\274\377\215\347\274\234\327B<\007\363\265;Mf\320\274Y0\237\275\232\005?=`\016~\274\317\n\343;\004t\000\275W\306\253<\262\230\366\273\377\361\272=\023P/\274\031Ed<\027\351\274\275\2418Q=\370\331r=\307\307\355= 7\031=6\\\207\273\201\314T<\320\301\314<\237\313\271\274R\036)<\034e\003;\262\332(;\220\354j\275\222\276\232<M\022w\274-\342\226\274w5\346<\371\315\233<\316\265\311\274\027\260D< \230\245=\221\300\233=g\261\030=\201[\203\275\022I=<j2\216;\251o\014\275\365Is\275`\350\307<\301j\202=m\316\224<jn\227\274SM\033=\003\374r\275v\014==\244\"\332\274\2731\267\274\371rX\275)x\345\274\020\024\313<\020\026\004\275\2154c<<\237\323\275\020:\331\274\237\307\215=Y\327\206\275\254\351\212=[\360}\275\327\363o\272\234\305[<;s\260;0Y\031=\034\246\215\273\245,\367\272h\330\214:\266:6<\367\244\217\275\006\312s\275\314Zl<\303\203{\272\340\222\033\275\024\245\242\274b\305\014=\322\256C<H\213e\274\363\313O\274XeG\275V~\340\273\244\245\031\275\303H\274<*U\274\275\017I\272\275\007\230\204=\206\260\316=\255\234\225\275\004\271\010=Q\003\277=\004S\005\275\262\232\253\275\2346a\274\345OW\275\310\226M\275H\323\213\275\325J\014\275\215\200m:\323y\304\271\231)\344\274\334X\001={\305G=\374T\r=\376*\307<\345\262\237\275\305W\314\274]\361\010=\224\013K=\226Di\2753V\203\274\204[k=\304A\221<\242\r>=\216\2466\2753\256\361<\231 \030\275v\255F\275\253\367\034\275c\273K\274\354\263\026\275Ia)=\305\364\331\273\265\345\006=\222\001\202\275\354UK\274J\310\325<\241\022.\274\341\323\014\275\r\222\032<\31591=<\t3\275mG\031\275\025S\031\274l\316\314\274?\343\213<9L)\275\343\344(<P\366\373\274:\261\225<pWx\275x\203\212=\333-x=\364\245\316<*\003\031<]T\306=\022h#\273\013\200\004=w\374\010\275\016\224\331\274\302\354\210\273\231\2332\275o\241\240\274\337\360\006\274\\=\370\274\025\344c=iES\272\265\264\275;\230P\000\275D]\215=<\264\240\275\007\327\235<>\210\036\275\r\033\235\275V\265\"=\010\252D=\256\266\230=\234pD=6\212\014=\272 p\275\r\021w=k\346\220=P\nB\275\'\n\340\275*\010S\273\301\203\363\274N0\007=B\241+\275m\027h<R\370\327<\006A\207\275\010\350e\275\220\001\327\274\361\327\264\275\260\376\215<\nmh;\277\2070\274Mt\023\274P\257\320\273\340Q\207=0\t\320\274\316\255\017\275\177|\206\274<\262\245\273\207 \000\275\375)\341<\021\364\332\2726\215\005>\262o\213<\221\200\351<3O\355<\2464\222\274\222\016&\274)\335\0039\343\312\265\275U\242\021=\306Ds=\004u\271<\201b\256<7\227g\273\3436\000=\341\242\236<\376\341\226\275\024z\350\274g/\025=\316\034:\275\034\335=<\257C$=\360\264\005\275\203\331\362\273a\026(;\351\230\351\274\361\276S\274\337\226\205=\005\244\004=\262\016\004<\330\264\243\275\010\221i\2758\031\206\274`\013Z\275\000\366\200=\251o\270\273\343\316\220\274\237a\330\274nO}:\021z\220<\241\231U=\247<\260<\3361\367\274A\254\256=\376\323+\275\273N\210<\317~\007\274m&\032<C&\2308r\347\352<\206#\247<\371\2249\274\333\224f\273\032\307/\275\257.\241=K\356n=\205\205\'=\025x\212;\355\325T\274Yi\263\275.\205K\2751\020e\275\212\354\n=o\263\001\275\374i\'\275\302Y\374<\2267J\274%\353\332\275\370\000\305\275]\021(=\225\376\336=\262\337\202\275NgG=\235\220\305\274\020t\025<@X\241<&V\364;]Y\231\274\177_\377\273\240\267\r\275\330\'\030\275Ig\331\274\023\205\265\273\255\031\237\275\231\3360=\0255%8\262*_\273\026\245m\274\272\325\332<s\332\r=L\267\234<a\250\001=\3564\004\275\322J\346\274\251\316\321\274;\254\327<\344=\200<\246\000&\275\"\0210\2743\302\361<\260\372p\275\216\255\301<_\331@=.\3635\274\023\031\201\275-\256\203\274\032M9\275o\235)\275\347!\001<\031\035m\275\203\341 \274\356\3661=\240\263\232\275\254\"d\2756\270\237<G\325\327<[\344\3469H,\022=\250\265\037\275p\251\215\274\250\305&=\232\240\34691\243\265<]\316/\275\223P\254\274<\264\257\274\021\020%\275\214\315\325<dT\210\275\340\323\245\273\3313j\275\307\241o\274\355\034@<\304\363\230\274\253\234\343\274\207D\230\274S\013\355\273!\346\023=*\343\014;\004^#>\310\314\302\274\375\307\311\273\022@\202<\256\035(<\237V\220\275\324\242K<\305&\352<\037\257Q=\205~\343\274\000\245d\274\013\340\223=\343\220\r<\267\225\006=9\261\230<I\333a\275\301\200\275\275\010A\346:R9%\2751E\264=\037D\303\274\274k\237=\237\263\322\273\0170H\275\214O\375<\234\273\006=\255\300\367\275\213\017\206;\331g\372\273&\273\200\275\336T\232=y\2167=\037\303\311<y\372\244<Y\311\n=B\001k\275\275\367\207:\316\233\206\275\346K\227<\265\352\000=q%\303=\300o\026=\001\332\232\273.\262\023\275\317\\$\275\250\341m\274\0307*\275%\275N=\266\266)\275A#\317;\356\374\033\275\305\211\334<K\214:\275=\340\355<\300-\010\274\344+\315;\177\205\371;\333\275\032\275\215QW<\242\305\307\275\3061\261\274\3040\232\274\024$\003\275\306\032\366\273\312\354|\274\232\314\362\274\001\371\372\274>\362\t=%h\350\274\234JC\275m\252\306<\251\311\313\275\215\263\003<\'\362\221\274\2544H\275\320ub\273\3149 \274\177*5=\036J\204\274\230\243\200<Y2\205<=\314\255\271\216\222[\274,\224!\2751.Q\275_s\365\274\341{\020=K\322\024\275\207{\231=\357=\256\275\024\304\016<?\037\273=\205\340:\275y\343\323<0\255\211\275\202\315(\275x\221H;lT{\275\374\353\355=\305\221\220;\337\343H\275\343 \314\274>\375\232\275\337\364<\275y\300u=\325\243\330<<X*=\'\214\375\272\026&T\275\305\002\351\274\301C\300\2744\0175\274\016i\332\271h\315\330<\276\370E\275y\357\026\275Y\370\363\273\267\306\260\274\307Ww<\203i\214=\252F#=\201w\330<0|\027=\325k\235\275\235\207\031=\035\241\027=\235\204\272=\264\336\350;\276O}<O\334\207\275\3336\261\275z\316N\274?tH\275\307\276\252<?8]\273\0243\r\275\365\300\264\275\266\360\221;\"\350V=\235\233\255<W\252\n\274A\357#=\212\241\020=\327)\301;\240\252/\275x\033\326;\330}\236;\345-i\275@\350\032=/H\026\275\177\262\203=\001}\302;\245\251\246<~q~\275\230\334U<\005\004\211\273\364tJ\273\346 (\275\323\016\330<\027\306\213;\215|\213\274\230n\366;\037\227\302<\241\006#9jH\355\272* o<\237\r#<\036y\255;\037\323&< \232\216\275[\307$\274Bd\317\273\246S\372<\025\374\264<\332+\002\276(\3338=\264\375\252\275\007\362\265=i#\230=H6\034\275\321\327W<\301\236;=B\337\214<)|\356\274\244!\352;\372A\270\274\204>R\275W\302\234<\353z\225\2750\317\350<\221\265\031=\350A\025;\354\326\t<\003\327)<\366q\371\275\252\002\274;Q\336\204=m\226e\275\035\361\016<\020\200\325<\210\317c\275\210\274 =\336\236z=Ms\206\275\254B\006=@S\216<\337ea=\214TZ=\005\222\227=/\307C\274\315\223B<\021\322\034\275\2625\323=Z.\251=5\316\220;!d\r<\361+\257<\276\022\330\274\375\201\346=\305}M\275z\034\222\274:5\213:_\265\242<E\276V=wm4\274\211\2433=\307\036\r\276\245\023\206:\354\230\034\275\022\320d\275\271\306B<\027\240!\275\336B<<L\001\031\275\\\215\314\2751\"\320\274\032[\014;k\337\362\274\240\000\240:\211x\'\275l\245!\275J8\203\275\312\305\327=\350l\035=\246\334\221\274\n\313\270\275!\035\265\274L\233\263;\267\374\020\273s\233z<c\325\316\274\354\370\207\275\242\215\365\272\214\3074\274\221v&\275\r\013\327\274t\006v\274\354\017\304<\025\327\221\275\310\003u\275\001\233?;\256\002\2449\016\312\212=Tq\200\275\216\226\037\274\214\364\237<m\361\361\2759\245Q=\214\306\013=\353\347G\274c\231\367<A,T\274\247\0208\275\032\246h\275W6)\276\340\374O<C\265\024=49\266<\315\265\373\274\323\374\365\274\232\207\031\275yA\301\274.\362\213=^\200\232;\267\353w\275N\222\320<\206\274\307<>\342z=\032(y<E\177\024\275\327\277\324=\014\263D=\366\353\251\274\002W{=_q\006\2759\036\224\275\321\363\210:\373\330\317\274\351qq\274\224\304\230\274\37621\275\367\252\253=q\024\203;\245\201\244=\247\365\t\275/3\271\275fy?\275F\335\277<P\375\217<\002\255\016\271\303Z\016\274\242\204t\275\020cD\275\250\253\300<O\333c\273\215\240\376<oZ\263\274\314\352\350<vG\260<\2306`<\351\264\017\274\312V\022\275h\2711\274\016\317P\273\n\254\257<\006N\022\275\320\374\224<[P\006\273\201K\213<\221\265\310<\3128\261\274\031\221\r\276JH\034\2755\220L=n\273%\274\005\"\270=\035\363\344;*\327\253=_\255\001\274H\373\273=\360-{\275\367\026e\275|\237\265<B\366a\274\022\005/\273\307\234\210<\002\207\226=\232L\004\275\340\303\347<\267\314\230\275A\274\004=\014\323\014:-\216\022<\277*\010=\246\t4=\033\344\252\274\224\271\204=dfr=v\366\300\274qHF\273\372T\275;\331\'\001=\017\376\025<\0233;<\0077a=f\326\211\274\262\306&\275I\326c\274\311\327\206\275c\243\024=\341s>\274\276\335\331<CvQ<\215r\335<\256\312]\275\321\0362=\004\235B=r\252\204=\\\362\002\274\261\253S=\007\223\226\273\356 \260<\324\3229=\026)\201;\037&\302<\277\235\333\274\325\375\346\274D\"\227\273I\341\251<\310\020\016\275\256e\203;p\2730=\352\004\327\275\242\326\304<\t3G=\371\250\327=v<\247=\351\373`\274\010\350\241\275\306\260\n\2748\200J\275\2712\021\275\214\213\224<\022t\001=\264\211\306;\206\\\r=\362\n\016=?\r\247\275\326\001\206\271\322\002\303<8\326\332\274\262\374\363\274\221\016R\275\244~F\274>\224\267=\036\330\032\275\240\354\334=\202\266\232\275\267\316\351;M#\370\2706br\275c\232\367;\233X\256\274\346\3242\275\350\316\305\274\370\235\010\275\242\006\004=\021\273L<\371\273\245:R\247\201=\274s\203\274\272Uu\275Tg\271\274m\200\313<\337\226\313=\257E\031<]\362=\275\203l\256=\255H\341\271L\367\260\275\366\251\232<\214n/\275K\362E=v\005\3607\365jZ\274\337\021S\275\315U\"\272fh\350\274\312k`\275\233\273W<\216\357\221< ? \275\202\244\273\274\004\207\210\275\355\256\200\274\352a\305<\3549\322\272\347\222v=\326\240\340<\270\350{\275\030X\243\275\221&\225\274\336BO:\337\2537=\276\310\270<W\315\250=\373\206Q=\006T\217\275\261\021\030=I\030\\=X\271\013<\300\260\253<\231\357&=N\362a\275\2072\361<\266\200\010\275\037Z\221\274M\234!\275\000J\223\274\213\321\013=K\313\020<M\266\002\274q\031x=F5W\2745,\023;$/\004=\331\324\205=\357\314\200\274Rv\231\274d\311R<|\351K\275\371\354x<\276\375\351\275\013\260\313=\337v\006\275\026\177\214\275\317\022\237\2749\\\013\275\362\301\000=\177\214\262\274m\302\013<\244\345I\275\335\n\264\275N\204\361\273\367o\313<\000\305\200<\215\324\336<\332|\304=\037Od\275\202f~\2757N\277\274,C8\275\263\347\272<\026\247/\275\021\210\204=\314\203\013\273e`2=\3375\266<#[\323\2734\361\016\275F\324\003=\255P}\274\340\026h\275g\320`\275N_*=\035\305\255<\331$\203=v\020\254\275\014\332p\274\221np=\326\263K\274\254\007\337\274\310.y\275M}|<Eg\323\274?\240\332\274\235\274\251;8\360_=\362\261\035=g\300&\275Z\344\375\274\340q4\275~\227g<\355\\,\275\263M\203\275\321\326\307\274\213~\202< D!=\267S\337<9\202\026\274\211\333\312\275\370\024%=r9\325<\222\330\010=,zd\2741\n\306<\301i!\275Z\371U\274u\226?\274\263\364\371\274\372B\300<@lb\275\305\237&<$2Z\274e\300\273\2758S\343\274\331.\241\275\020\361\362<j\361v\275y\354P=\223\355\325\274\356\364\326<\346\014\005=\342\274\247=\323\r\037<\230\331\205\275\265.c\275\036\032U=^\245\306\272\365\301\270\274T\023m\274\257\340\213<\216\000\351\274\326\244\006\275\376\370\306<.c\312;\365\207\316\274`\236\003\275\337U\277=\250\231\013;\305Ne\275\000B\331\274\013Xm=\241\020\353<\\=\016\274\024\200\265\274\274\205\r:%0\201\275\204\001\026=\330\335\014\274\006Q\210\274\333;\247\273\244\264\202<\2767\246\274\364m\246=e\033\325<\376-\327<\rl\331<R\301>=`P7<\003\270\332<#\342\360<d\333I=\324\373\214\274T\276\025\275\3544\016\275\200P+<\277\217\037=5U\200=Q\270\204=\031TZ\273z|x=\263A\201=\204J%\274t\262\026\275 c\244\273\276\004\266<{\037==\250$-\275\001\272%\274I\\\034<<\366\260<j\323\333\275\206z\025\275\351\235o<\301N\003\273\334\323O<\001\022Z\274D&\257=\261\321S\274\370?A\275W\265\377\273\023\206\202\274\221\264 =\331\256\013=\261J\254\274\003\242\017\275\006\210\274\274\033\303\003\275\234\205;=DD]<\235\0269\275T \343\27559%;\247\025\305\275~<\244\274o\303\030\275\302\317.\274O\347\177\275\224ZF\274\035Xs\275\027j\036\275r\211Y\275O\222\347\272\362\312D\275\347T\021\275\230\357E=V\210|\275\366\250\315\274\300n\214<\215s\037=,\233:\274\017\016\311<\377\237\354\274:\342\177=\233K_<\327\177\207\275^\0364=\0267\016=l/:\2744\237\017\273\235\257\240<\347\313\311<\307\353\017=\004\377\330;\276!\347<\246}\023=\244@\003=\242\221\224=\026l\237<>0\244<0\374\205\275\036\353\004\275\021w\220\275\310qV\275\010\346A\275\030\346\256<\315\266\226=?\303(\275$\202\273\273\257Z\322\2741B\033=\023\244\217\273K\223\220=mM\372;\373Q\031=1\343a\275\264\224\027=\344J\316\274\022\236\007=\200@9\274P+\266\273=\202\210\274\0256\371<\245^\036\274I\215\"=y\202\361\274s\304Z=\005\320\356\273\342\250>\275\313\2057\275\245\245\001<\020IY=?\241\230\274\365@\220\275t_G=\273 Q\274~\304q\275\315\233\306\272\240yk;\342\217\305=[iO<\316\307\031=\314~\032\274\345>\270<\332;k\273\247\314\032=\304]%<\222\311\205<%%\262;8s\246=v:/=F\247:=\242\221\237<[\026\323\275\241E\177\274\212\371y=\322\024\244<\300T\214<~\230\030\274\236\253\034\273j5\205<P!\200;~?A:\024;Z\275M\304\205\273\214o\373<^\276{\273\360n\216<8 \n\275[\255p<\205\272\004=\254+;<\245c1\274:\264\231<\001\351\026\275\213\341\252\274\313\231t\2741=0\275=\366\256\274\336S\002<\263 :=\240SC\275X\013c\275\327\027\033\275\316\323\212=\374,\344<\230;#=\022\376U=\256EQ\275N\247\223<\246\270\255\273\357\254\035\274\234\370\314=\311\245`\275\004\314%\275k\020\333<\203\035\345\274w\013\331<\376B\323<\275\223a\274\331\336y\275`PS=\213`\200<V&.=2\206}\275b\374!=\376\215\027\275\003\026D<u\362I\275\230\234c=\3722U=\365VT\275\n!<=\273\364\261=\350e\367\274\306VE=\223\347\301<v}L=\333\272{<\204\236U=\004\016P=\272.\252={\260\245\275V\250u<\260\376\306<\227\207r\275P\207\332<\323h\032=\335\312(\274\334\236f\274V\243\n\275$\227 \275\235\300s=}>\205\275W\365=\274\312\335)=\262\033\024=\322e\001\275f\263k\274\300a\333;\341\246\004<f\037\326;j\000\272\274\021\320\177\274A\324\230=\205y\026\274j\312\307<z4\250\274\266.R=\237#A\275\277t+\275|&\252<\204\332\302:\274\264m\275\245\230\251\275\254\352g\275\305\225\252<\320hH;\323$e\274\256\037{\274\332\260 \275\311m\022\275\232\353\264\275z\277<\274~K\'=\300\034w<]I\213<i\031\023<\000\375L\275C[\273\274\036\203J=\222\025\341\274\022\2354\275\003\023\001\275\226\252\341;\241\235\005\275q\"J\274\203\251\007\274\022Z\310\274\333\3331\275ZY{=\324+Y\274\177\311\362<\324\2743<\362\230\004\275W\237\016\274`q\266<+\377\201\275*\266\276\274d\256n\275\247\310\306<c\206\005<\222TJ=>\337[\275\372\207\277=\004fg\275\354\272\235\273\366q:\275t\323\371<\257}\204\275\350L6\274\347\267\2279\377\227\371;\203\367\'\275{[\275<\003\177\370<\001\303\331\273\307\243&\275\023\205\247\2754H\026\273\356\375\230\274\325D\300=\357?_<\3620\026;\337\316[\275\3315\033\275FV\303=\002\241r=\177\216\003=8\356\\=\207Z\273=7\315\014=\350\037\000\274H\230\255\275\207\210r;\377\351\272\274<2\215\273\262\363?=F\343 \275\322*\032<\026\327\202=\202\366(\275\243 \371<\342\255\2128\257\300\375\274\277\0247=([\232\275\200\257\204=\026\300D=\3474\321:P^\203=B\203w\275\307E@=\305\214|\2751T\006\274S\334\322<!\352\236=W\216\327\274?]\233=\241\264\017;Q5\267\274/\250.<\370\303\301\2741\274\002<>\333{=\305G\253<\310\343\027=\020\277\223\273\214\035\314\274y\332\000\275\255\033f=H\177\205=\\\200\257;\232o\n=,u\301=\213\356\215\275E\024\224\275\031D\356\274\311~\251=\240i\262=`(_=,\316\235<0\224\270\275,\323\273;\t\303\206\274z\2630\274\344\267\"=\237\tO\274\232\224F\275T>\204<\231\3173\275\325A\207<r\325\376\274\262\306\331<<\217\017<\256\016\234\275\001&\016=\270\034+\274\362e\260=2\3168<\262\027\207\275_?M<\306\361\325<\265*\t=n\304|<S7\217<\320\356\306=\177\310f<\027\264\317\273\026\330\233\273\277\250\362\274Z\217K=k\037e\274\325\"q\275\371>/=Cz.\275\nK2=\177\352\317<a\024%=\204]\t\275\357g-\275\317\363*\275\274\0202\274\353+F\275\203y\202<\262\357\361:\363h\'=\202Ug\275\360\327e\275k\365\t\274@\256\333\274\333\231\016\275\254\264*\275\247\204s\275m\345O\274\255x\205<k\3073<UE\232\273\320\006\303\274o\367L=\027\220w\274=\260\316\274\017)_\275t\036\255=\363B\343:\265GW\275\231!9=5c\222=\335\276\336\274\233?\332=/0\227\275\263]^=\313.\351\274Fy(\275M\355\020=\216m\216\274#\277\217<`.\277\274H\362@\274\000f\244=\022\221\025=\252\t\014\275\336\022\370<R\177R\275\306\232\211\274\300\034~\275P\350\213=\327\274\305\275\200Ob\274\266\374f\274\340\004\214\275=\211\270\274\262`\210\274\177\253\236\275:Ov;!)\316\273oo\231<{+G\275\251\241\356;F\357\204\275\340f\326\273\276\025\242\273~K\273\272_O\035\275\246\327)\275\355\240\232=\'\205\022<\241@(<\3376\026=Hd\206\274\r\342\021\275sL\203\275H\224r\275\356\216\236;\217\252\274\274\254)\270;\214\267\014=\376I\020=\355\335\270\274\360\236o=a%V;\252\323\031\274\035\r\263\274=\3516<\327m\202\275B~\260=\016\250\252=\346\233#=\321\270W\275\017\325 ;\360g\345<\247Q\255\275\tir\275\374&>=\3634\254\274K>C=\265\237\317\274\333\205\014\275 do\274?D\037<\031\250\312<\327\034\371\274\025\277\344\274\203\024\314\273|\024\223=\342\274\022=\217\205\001=b\324\n\275\250\024\035\275f\305\201\275\327\366\003=\327\317\005\275\341\363\200=1\365{=\233>F\273\024m\035\275\2469M=\374\341!=\323\212\257<\272\343\035=\013\244\342=It\222\273\030\206\214\275\323:&\274b\372\203<t\326\335<p\244\260\275K\177U\274\013\370W=\257\271u=@\237q=q\231\022\275H\2655=\324\214\217\274\263)\023=\366\320:\275v\274\250\274\316{Y=,i\016=\300\272\274\273\376\327k=8r\027=p\321\254<\t.\213\275\221\236(=\356b\021\275\362U\311<\030\226\026\275|e\343\274\225\307\211;\"6\363\272)j0=\323\220\r\275\262\257\020=\224\327\345<\346=\306<HZ\205\274n\215v\275\004\323s\274\013\273\375\274\236\344\'\275\242g\206=:\177p=\247C\202\275\003T\302\274n\250\223<\235\212_=?\347\014\275\216\325\205<!X\204=<m\215\275\237M\203\275T\0276\275)\020\320<\223\031\276=\251\341[=\225&\310=\344J\306<V1\207\274\2426\333<b\034\215<\257,D=\313\002\273<\206\377Q=.\366\276\274\037\263\217<\314\252\330=MZG\274@\022\302\2738\342\217\275\223J\324\274\210\027\221\273\363\253\017\275\323\304\271\275Pv\257\2754\205\232\275\321,z=^0\267<\\@K=\246\362\000=s\356_\275`\264\230=\340t$\275y\3450=\311\3338=\2044\300<Y>\252\275\360\025\017=\231\231\253\273\r\325\236<}\\\010\274\014\222e=U\007\036<\223\313\262\275=\357\275<\223\255\006\275\'~\260\272\203\267\251<\212,\226\275C\366\025=(\035\205=\000\260\201=\376\005k<-IE\275\352W\214=Bln\273#\030\003\275\037H\003=\013\203\232\274\252>`=\310\247\200<6\216\261\274?\235\241=\020\266\261<\237\\\266=\351\372\n=X\025\370\273\032x\250=\310\\1\275\006b%\274uk\220\275Q#W<\030j\215\275\177=\255\272\307\367 <l\200)\274J\325\205<\267\367\210\275b\333\277\271\346\244\351<t\243%\274>c\216\275\363\306L=04\233\275\006\n4\271\260\260\027\275m{\036\274\240,\'\273\337\356\265<\206\316+<\273\235\276</\263q<\274n\204={\352\331<#\363+\275\022\"\016\275y\204\024=\214\325\n=<\317\'\274\3602,\275U\230\225\275\355U\331\274\227\354\333\275\315i\020\275\373\313\376\274\311#c=\333\221\003=\301b\321\275\r\265\312<\302I\306;\017\200\241=\203\022\366<\337\264\021\275x\327\314<\241u\007=w\031J<?A\014\275\000\021\001\275\013.k<\226\037\325\273\005j\224\275\300\264H=\357B\237\274\037\2400=*\207\201<\337\333^\274?\034\200<\323\256\375:\306T\255\275EMm=\312r\352\275H8\251<d\314\234=h\261\251\275\222,\013=\312\327A\275 Dg\275J\234\270=\261\004\237\275\232\256\222=\266\222\215\274\036`\350<\363o\016=\277\251!\275h\255\261<\004s8\275\361\037\330\274y\212D\274\033\013\213\275;]\343\274\236K\023\275^\341\255\274@b\335<?\260\371<@\265\007=\300\240t\267X\000\225\2756j\013\275^g\360\274\207\257]\273l\257>\275\250\333\331\275\367G\204=\2648\\\275\236)\212\274\010To=\355\035t= \306\005\275]\221\022<%G\r\275\266.\305=\016\030\003=\330\3250\275\250\t\\\275N\007\034<@S9\275\256\350F\274\025b\311<\003\227\202\275\272\017,\275\231O,<<\221\333<\000\324\251<Z\335J\274L\325\245\274~z\322=u\217\316\275u\007v<g\323\276= \231\003\273S;\263\273n6)=z\242\307\274>\272\325\273\343\237\241\273\372\351\010\275\222\333\'\275\220Fc=\216\034,=\311\273\243=p#\315<y\301O\274\312=\326\274\333\3652<v\272W\275\355\036\033\275t\204I;R*r=4H?\275G\363d\275aH\270\275\375\335\027=\222\2712\275f.\233\273\274\001v=3`\241\275\315C\214\275\233\022\243\274^\033\202\275|:\005\274\341\021\224<8E\224\275+Lh\272\332\355D=+\005\234=\313\321:\2748\004\237\274\010\n\214\274\3723\260\275+\355v\275Wg\007={O\220=\261-?<\254\001\265\274\360\345\262\274\027\025\336<B\265\r\275\204\205T\274\313\026^\275\262%Q\275\241\350V=\272;\262\274m\234(=\2767\202:\332\267$\275\257\251R=\024}>=\225\366\224=L\254\264\274\227Ym=$\032\334<\317\322\260\275\275\240(\275$\206\006=))=\275#\264\036=\342\200\206=\t\332\355\274\240W-<K\0207\274\346\353\030=\324\226\005\275\246\224%=\3614I\274\330\337\027<\204\346o\275\347n\261\274\264\363Z=\037\266\255\275_\'\243\274\n]\223\275\000\321*\275\225\026\010=\004\254j=i\017\000=s\370\261:\303\223\256;\005=\033\275\225\231m=\206C\0329\310n\224\274aQ\036=\345\022d<3.?=\006\352\004\272->\013=\022+\325<\301\265\007\273\325]\367\272\345\331\202=r:>\275>\235\267\273\211\232t<\237\314\034=\212\3164=\211\351O<\276\310\214=H\314\251\274\2500\223\274wK\213<4\342q\274\322\321H\275\357Q0=\227\016\332\274\347P\200\275X\251/\275\357\017\210=\330\001\274<\233*\320\274\244\'\033=\303:B\2751x\035=\377\274\001\275QN\253<N\332$=\251S\010=\007\253\207\274J\365\246\272\004\356\337\274\356S\354<\n\240R<<\351\225<\340\277C=ds\235=\231\230\317\274\347\221\r=\372#C=\204\231S:\364\001 =mj#\275\3541\260=\356QB=\226E\010\275W\256\321<\233?\200<N\266?\274\313\266\020=?\3035=\010\262\343\273\317\342\254\275\375_S=|\267\270\275\023\302]\2751rm<\335S\006\275\244N =*35=I\210\036=\267\246\371\274\246\211!\274\017\345\217<\201P;\274+\002\337\274\261\2457\275w\375Y\275\230/2\274U\351\247=i\374\210\274\326\240\202=\314D\001\274,\317\006=\0267\230=UV\037\273+\006\013<q\007\001=\247\036/=r\005\323<\306\324\350;\315[\221\275i\'\210=W\210+=\330\027\245=\363\373C\274{\246L=\341\2668\2751\327-<\203\232\203=\242l\360;M\267n\275A\177\177\274\305b\271\274\346Ke9\001\355\'\275\212L\2279\027\001\371<\265Z\236\273\256\025[=B\372\326\274\224\014P\275\213\257\257\275/.Z\275\235\004\n=\342\320\326\274/\004y=p`z=]:\036=\304{\001=\216\205\207=]2j\274\273\310\236\273\317\376\277\275\355\000q=\032*\302\274\226\371\n=\303-x\275\007\214\021\275\202\000\201;h\177\250\273\031\261\220\273\371\302y\275\330\217\311:\344\311\001\275\344\226\226=\310\010\307;,\212\210<\323_\302;\023\'\310;\336:\177<\022\330\021\275\377-f\275\033P:\275z@\225<\232\306\235<\350\234%\274\331r\006\275\023\343]\275\'\263\r=w>\220=\027\227g=R9\233<\357\355\221=\242^Z\275\373\200t\274\030\004\n;\300\246\272\274\253\367(=,\361\263\2743\353\237;\301\260\\\275\253\231d=S)q=\001\"\310\274\350\264H=\327\362{<P\223;\273\236\005\031<\312\203\335\274p\3423\275\254\004\000=.\010\201\275\266\354Q\272\332%Y=\t\005\331<K\204\000\273\373\356\310\274\231V\351\275\254S\321\2740\023\274<\373SC\273\276\276F=\260\344-<\217\2675\275(\326\235<:\374\003=\004\254\344<t\313\210\275\365\210\230\275.GF\2727\353\311\272\025\311\364<xJT\275h\200\335;\317d3;\203\024{\274k\215$\275\265z\325<\230j\022\275m\177\267=R\214\207\275\314\250\301<\353A|\275\323\252c=\227r\r\275\"\306A=\361\255\303=\347\226\305;D\322\006\275*W\255;9\235|=\341K\221:\323\212W\274U\300\'=!\255i=\270\326\246\273wL\231\274\227\341T<\336Q\236\273\304\340j=\263\206;\275\366wx<\034\032 =\017\007\274\274\377\377\263=z$\262=(\343w<\276\211\367\274\034\325\022\274}\255\327\272;P\201\275?\272\352;\370\311\016\275\337\263\222<\3616/=\213\241\030=\007.\020;\370\3143\275\027T\277<\375\331\037=\375\006e<5\214\274=\240\205\212\274\310\231\317\275\237&1=\370\n\303;\224\315\030\275\302\323%\274\371\206\313;\251y\013=\273>\272\275\260Kg<\326\370\222;\235\323+=K\311\002<\360\035\004\275\334\273-=\325\022V<\001\275P\275\366h\255<W\325N;J\343\366=\"sq=\256\233\220\275\337\214\257<\242Z\031=)\216\335\274\313[\261=|\023\003=\252\277\220<\306\244\323<S4\333\275\215\312\314<\235o\001\274U\303P=A\2711\275\222\024L\275\"7\001\275\344\nK<\262\347\006=&\304\326<1\236\007\275\030>g<k\262A\275\177\217\027<\273Dc=\303rk\275<8\266;.\"\314\274\014Xe\275<\3548=\231f\277<]\307\227=n\014.\275\321\274::],\265\275 \316\230\275\"\246\214\274{Bq\274\017f\007=\336I\010\275N\203\010:Q-^<\"2\256=\t\006\n=\273g\'\274\261\202\027\275*\341Y<\200t\273\274\362\274\306\275\000\020\241=\r\302\363\274\033\025\300<=\2656\274Tf\221=\034\211S=0`p\275\245r\233<\304A\223=GF\215\2722\266W\275\226up<:\323v\274\352A\023\275O\t5\275v\227\007\275\350\231\204<\303s\322\274u\t\246\274m\"\254<`gk\275\350\360e\275\212x\234\275\330\003@=\336R\312\274\355\266\222\275\223\342R=\313\264\026=\320k\307\274S_\243\275\'\r\317\275\314n\212\275\310\2439\275\372\361r\2753C*<@\021\005\275sA\332\275[\237\255\274\214\343\'=\031%\333\274iJ*\273\'\316\010;P)c=\275\215\332\274\016\215\342=Sd\232\274tX\034={TT\274\242\250\254\275\031\023\240\275x\302N\273\300\253\364\274\277\275c=H]\347\274\320\360|=\201\261N<\021\270\n:\220\337\206=\273t\373\274\335\243\265=\244\354\304<\307\235\356<^\223\006\275\010\026\017=\026\001\372\274\025>\004\2753\263N=\004\263\225<\035\330\311\275\325ND\274\372D\227<\327ov=\350{\231\275\373\356\321<\204T2\273\355h\221\275\257\351&<\247\272==\266\r\241\2751+f\275\r+:<O\374E\273Zq\231<\374X\225\275\201:\244\274\\#\234<>wj=+\351\200\274P&\372<\375\351\220\274\364,\262\275 \2308\274\303\026\215\2752\314\265\274\273\3631\275s\344\006\274q\346\\\275\363\346$=\007\252n=\227(\227\275\231z\3218&\'R\275\315v\265\273\374u\216\274\221\203\251\271\006\255\004\272\210Y\225<\213\177P<\362\256H<.\000\212<\346\251\254<\266^\200\275\236\324\242\275$\000\265<\373M\013\275\025=\243\274\034\276\350<\257y\001<\320\2030\275\353\216\311=\202\025\007\275\311\271\025=\232\005\222:EC\261=\037\211g\275\367\277\300<|&\221<\272\326\027\275J\031\211=\225\217\222\275\255\315\267;l\344H\274t`6<\234.)=-\317\022=\311\033\354\275a\030L\275rro=[k`<]k:\275C\242\0359\244\207f\274\321x\005\275\032\004\267=\353OS=\351\030\027\275\251\231\266<\251\275(=\307t\300<%d\324<\336\230E<v\037 \273\260\202?\275U\367\225<\223L(\275\2437e\274:Z\264=\344\376\264=\220N?\275j \321<\004`\244\272\210?\t\275g?)=\347\\M\275\323\201&\275\364\013~<\177BJ<\272\335\010=\210i-\275\211\201\247=:\335\026\274\357\353j=\371$D=H\315\026=\333\204\351\274\366\200v\275\233\243\370\274\"j\303;L\371\024\274[7\342\274\324\363h=\032O\231<\356\374E<\324AH\275\375\022\276<\027C<\274\340Gu\274W\247[<\030H\204=6\365X\274<\256\022<\3568B=\345\330)\275\374\344*\275\232\366;\275P\271\242\275,w\034\275\205\232\276\273\364\276\204\275@\306\003\275\267\312\217=8B\207\275\330j\204<2\272]<\334\236\224<\272\366\026=\320\026\023\274\213\326\024\275&\334L<\247g_\274\036\r\313;G\265\016\274\337M\213\273# o\275M\014\300=\300\005\242=\220kB\275\204.\203=\274j\007\274\254\262\010\275\030\332L\275\245\027(<\362\354\273\274\224(\301<\366EP=\313y\032=\241%\"<\272\342\007<!|\245\274\313k\352\274\314\230\250<\350\001\201<\216\364\020\275\3407\017<\332m\312\274\014IS=\313\032\241;\306\212\243=\372Dd\275vZp\273c\354[\273\376\316\034\275;\300\231\274\243 \334<\002r\024<\262\020\006\275e\013J=)\030\216\274\327-L\274\252\003\034<nOO<\204\215\002<M\025$\274^\007$\275\226\300\242\275\321\363\307<\002\265d\2752\232\336<kt\213\274\346\356\341\275\227E <8:-\274\030\377\026=z+G=s\002\226<Tm\234\275`J\027\275\255x\226<J\226k<3\234#\273\032t\203\275vB&=\027D\202\275\355\301\207<m+\313=\034\211\276\274\206\203\003\275\231,K=P\312\207\274\350\212M=\253\273X= \345\036=\314\201\327\274\032I\325\274U\0023\275\024\356e\274\344\2509<P4\361\274\206\263\213<\337Kf=ug\256<Y\221N=\313Y\321\272\343\002\266\275\270L\177<Ui{\275\367\004\210\274p\303\242\274\022S3=w\316\213<\207 J\275\210\366m=l\006\241\275\003KV\275\332\276\336\275\315\177\020=?\367^\273\237V\367\2751\264\224\273<\321O<\343\223l<\203\234\026\275\220\272L=\235\252\025\275\255\374.=\332\254\035;\212\236\216\274t\364.=\204C\037\274Cm~=\"+\226<\231\374a\274\201\374\245;\263\0042\275\272\261]=\212\332\352;m\274\010\274&\377\346;\274\255\333;\200\354\376;\306G\216=\377k\240\273\020\013\351\274\035\231U\274\317\366\233<\332\271)=\342\342\245;Ul0=v\2563=\n\362\347\274c\364\311\273\345\0305\274\376H\'<\324\\\316\273\230EP<@\276J\274\355\2773\274\036{\223<\n\034\262=O8\270<\022\233v=\353\031u=\024\313\203<\022\211\227;\231\336\231<\247\374\034\275\207z\310=\r\370@=;\217\235;\210\304k\274\004\234K\274\243\344\227=\356\214==\2679\322=\275\274\027\275\224\274\372\274\000\r\362\274e\035(<l\221\261=\010\376n\274y\034{\275\035\363\207<\n&\365;q~\225\272\003\375\244;\266\243c=\256\276\007\275\263\013\340\274\003\365=\274\365\024\023=\307\016K=\r\333P\275\'\262\247=K\347\327<\225\323<;\275\265\233\274\307A\'\275B&e\275\263X\211\274\245\001\231\274\t\354x<-\032\274=9c\026=\221\000\271\274\246\243\264\274\023\264\212<O}s<\366\2242<\013-\366;D8(;\256\370\255=g$d=\206\344\022\274f\343J\275\t\256)=h\245\030=\222;l=(\014\274;\211\017\372\274\211\262b<5\263\006<\372R\357\274\331U/=\364;i=j\207\217\274\266,\322<\245/h=\362\311\'=Z(\203\275\235\362\277<_\253\340:\326\302b\275)\2220<\007B\r\273\350\250\002\275@S\234=\274L\377\273\211tB\274\274\354\231\273/-)\275&Z!\274\035\233\237\273\234\321\177\273vG\302<\327\240\365<\235\0252\274IS}\275\346\224\330;\010\226\006=\024`==bA\271\275\264C\010\275\364\373\010;\3037\202\275\377\271\027\275\360\231 =\214\345<\275\237\367\376<\337\313G=H\'\\=\320\344*=,\031\022\275\212\245$\275\016:\005=Z\211_\275\247\311\246\275\265wf\275\214\275U=\344\265\216\275+\363\020<\375\307(\275\n\231\343\274\034\270\263\2756U\244\274\302R\261<\244U\362\2745b\r\275\257\272\371\273\217\005\007\276e\234I=\357\220\251=\200\331\010>\273\226!=\254\337\241\275V\315\200\275\313\355\224=\301\311\366<C4\006\275Q\223M<3s\322\274#\243\356<?\240\006=C]\257<7\025R<\233q\032\275\000\244\217<i]Z=\273\331\321<\244\264\230<\2629f\271\324!\244\275r^\016\275\"\346\247=\345\357(=\261^4\275O\263\035<\366a\263=w$\003\274`\246l\275\333\274\021\274zU\003\272\207I\234\275Y@%::*V\274 \035\244;\024E\006=\267\327\226\273\345\275\215\275\212\272l=\362\177e<\377X3\274\250\204\235<\360\322\365;\034\305\177\275l\360\000\274\006\020\237\274\240\373\260\275\340W\252=\332\373\001=\026W\026=\376\031&=\210dR\273\330\350\316=\221\2603<\240\262\306\273gU\007>@\036,=\"\r\230=\360\265\256=!\200\025\274J\302\220\274\322\021\257\274\211\021\013\275\006o\206\274]\250\031<x\240\n\275\332\340P<U\301\n\275\311\007T\275\204J`<\376\013\221;\271\320*=}\003\255<\031\310\\=n\305\"<;\305\366\275\303B\301<q\330@<\216>\233<}M\341<\327J\031\275\247ou=\026.\221=(\204\007<U\260\005=\276#\304<;J6\275\342\341j\274\257I\266\274\034\355\203=q\335\266\274\326\310\230=\003\220\223\275\033R.:\033U\360<B\027\252\274]\037\236\274\032\264Y=\323\231\204;\246\325\007=<\371r\275<\253\237<\206Z\256;\330!\266\274\023kF\274Fr\222\275t\205\217\275\360\326J=M\315\350<\354\255-=\003\221\177\274:\275K=\270.\224=\2522\"=\325\217\205\2744\312\310<\025m\020\273Q2\256\274[\214\212=\267o[<\3220\300=D\324\005=\267|0=\236\253+<\033Y\232\274\250o\036=\232g\213\274\016H\351<\270\242M\275H%N<@\231\255\274\343I\300\2750\375-=\316.\027\275\235\345\320<\344\035\227<\034G\305\273\366\347P=\nJD<\222\227\275<\034\355\234=P7\223=\022\200\310<Q0\336<\022\373\220<\3210\266<\357C\227\273\316\353\307\275U(\017\271\022\\Z=\036O]=3\014];/\350e\272S`\226\275IS\316\272\021r$=)w\335<\'\207\303<h\344\250\273\361\236\025=g\230\025=\2355\335<x\023\002=\352\363\034=\000\263\237;|\306f\275b\3304\273x$\203\274\035H7=\007A`\274{\035\225\275|\270\032\2755\324\016\275\232|\220\275\264\356~;Ys2\274\242\210\326\274lo\266\275\001\346\212\275\241\367\277=\275\002\303=O\010\220\273\t\277\026\275\350?\271\274fBT<\215X\370\273Z\372\264\274\242|\002\275YU\271=\234S\313<\350\235\311=\342\253\264<8\312\270<\"ex\275\372o\216=\271\2310\274\240h\006=BT\214=\247Bh=\235\311\227=\001Q\317\2732~\313=\355ms=H5A\275Nq\211=,`&\274\211\273\231=\231k,=\217|\316:\006p1\275e~\304\274F\333\267;!\003\357\274\255\273\341<\224\023\254\275<s\200\274\232L\n=x\225\304=l\371\032=\313AQ\274\335^\247<\277\212\\<\003\347\206\275\304fq\275 \tr= \267W=\010\265\315\272\033m\230=<\226\372=\002\254\203;\346H/\275,\340\306\274\033<\360\274\342\243\357<\340\221`=\222\307\322;\2466o\275p\216\323\2756\261\r\275p\205\236=\337\364\305<\366j\033\275+\230\212<\273\005\014\2745\266\357<\036c\005\275c\234\236<#\343\332<\007\022%\274p\'\337=\323\376\031\274&\237\270<-\233\224\273p\215,=\240x\250\274v\377\217<V\247d;\311:/\275Y\303$=\315\025\211\275u\321e\275u6\r\275\320\303\n\275Aj)<\365`L<\204\037\376;\375\t\207:\037\2772\273zE=\2750\346 \275\027\261\212\274\023=\000=u\216\315<\320\226\027\275\252\0247\274A\206\271:D\366\201\275\247\304\355\274\3722/;\204\335\236\275\260\013\211\274\204\325K\273h\304\330<\366;\273=\261d\034;\203Q\264\273\024k\363\274WT\316\275\300}:=\0253==p\277\265=X\327\253\274@\270\367<\253\222 \2747\374\006=\331\017\220\275D^\212\274\237\274\320<\035\331~\275kF\030=\\\335\016\275Q\003\277<\211\034\017\274\211*\251\275\r\232\250=\252\235\342<\377v_<\255\326h\275]\336d\275\363\336!\275\304\003\313<\355d\363\272\374\020\213=\270bU\275\234\244\226\274\303\300\246<\314\307\222=~\375H\273\253\351\n<\345\304\236=o\037\013\275<i\240\275\261*F<\020\375\234:+d\031\274\355\264\223=\355\034f\274\330\214\244<\326\316\346\274\005\315\220\274T\326\2659A\316\224\274\335n\377<J\226\206=\30329\275,k\027=u\244\031\275J\344\361<\016\323s\274\343\244\207\275\252\243\346\274f\266\210\274\376\260\340;\0346\237<\216D\223;\032\312\030<\262\312\347\273\2056]:^2f\273W)\202\275f?\356<\230\247\277<\223\261\256\274\014\013\007=\310\036\"\275\225\362\363<q/\320<\215Q\217<<P\360<\225h3\274\227\342%<~\3526\275\313\021\313<\320-\261=9$\221<\267q\264\275\010(y\274$t\024=UF\225\275\256!\261\274Z\242\325<\271E\010\274H#\312\273Kf/\274@dK\275|\0325<\177\177\r\274\344\350V=\241L\312\274-\325\225=\334\340h\275\230\334\214\274v\317I<\267\351\207< \"\300\275\323\023K<\216[\304<\242wj\274\021 6=h$\375\274\344\016\211\272\273\325\354=\230\372\023\275+\000\214\274=\220\253\275\005j\236=\226y3\272v\n\311<\341\230\005\275W:\274<*\014\003=\217\021@\274\366\262\032\274\tuw<ae\032\275\255\226#\275\353\211B=Vp\354\274p\307c\275\032\0102=g\005\016\275\330\332\375<\205\202\225\274\032\217\002\2759\026\321=\250,H\272E\370o\275\307\n\027<\300\251b=\332CV=\346\347+=\266w\003<\021l\345=\200\000\341\274\376\225\265\275\230*\214\275\375Y\266<\365\262\031=\021=\302\275\334\212\205<\327F\020=\267\027\275;\363o\343\274V\315\224\274\345\305\203=G\316\322\275\336\016\305\273Y\233\336\274\247\373\010<\276\351\200\274\202\203\241;\024\267\360<\246}c\274n\226\333;\377\326\016\275\374nR=6\203T<$\366S;/\033-\275\211\004(=\355\375\205\275\205\347\336\274_\002\242\275\361\210\027\275\002\016\326\274\016g\235;^\0226=\257\260\021\275Qk\013=k\026Y<w\000 =1\232{=\316E\274\274\315p@\273\014\317\267=t$\263=\233\nI\275\356\351/\275\200V\315=}\n\212\275\273wr\274\t\243\260\274\222J\352\273}\313\211<\316`Y<\215\230\325<`:\265\272(\203\330\274\266S\217;i\024\241<t\346H\275+d\263<]ip<\031\241\223<Y\362p\275\225\367\"\275\370k\"<\223f\302;fHc<!K\352<\373\276&\273(\356\261==B\266\274\274HX\273\032\2744\274@\032\033=t\242\262\274\215&\027\275\220\313&\275\316p:=\304\373v\275\241\233Y\274[\324\241\274\376\352\372\274\337R\213\274u\252\351\273e2\303\273\214\272\250\2740M*9n;\350<\024\337\036=^\335\347<\201\033I\275\344\262E<\266\346K<V\325\253<\010c\230<\345\022\"\273\235\033\270\275,\227\275\275\274\310\003=u\033\203\275^\242(=+\311\";\200\202W=eH\016=\243\023\r=\200\2148\274\333g\267\274\267\333\261<\003:\022\275\027d9\275o\033\241\274\211R\353<<\362c=\267y\350\274\313 N<\341N\'=\235\336\232<\201*!\275,0\207=jz\262\275BBk\275\316\303\202=\334\234\362<a\r<\275Y\355f\275\001]U<<\227G<\304\360\034=\357\256\242<\013\362\317=.\3049;\023\225\034\275\345\231\272\274M\021\013\275\201\264\3559\232\236^\274\371x\264<X\215\000=\027*\255\274k\333\274\275Fh\244=\030\016\302\274\333\2704<\363\257H\273\213\225\214\275\336\210\247<\277\262\312<\337 m<\337\365t\275wP\034\275\206+8\274\363:s:sB\340<\343\320\341<\241\t\027<\036\233M;\023P\227\275i\036M\275|\322e\2749\225\267=mU!\274\2017%\275\222\026\335;~C\260<N\255a\275\t\364`=.~\312\274H\314\334<L\220U\275\r\361/\275\370\2526\275\372\2433=\320\251\215\274\312\326<=ko[=\234\304\374\274\353\3412\274Z^z<\372\023\243\275\361t\212\272w?\352\274\363\206\\\275\376A$=\262\225\321=@\315?\275i\340\206\275\212\"0\275?2)\2751\367F\275L \236\274\336\360&\275t\216\206<\221>s\273\325\354\n\275\333e#\275\255M+=\231\247+=\200A\374=v`\277\274\2010g<l\257\210\274\025O/\275\257\353\365<;\341\231\273>\303@=Kh\020=\214\206!=\345\r\260=\314\202K=R\304&=\314/\223=\312\272$\275\334\355\225=\274C\202=\375~\016=K\021\317\274\336\001Q=\005\366/<\262pM\275*\006\216<8\362\225\275\260%&\275c+\272\274\340(\030=\306T*\275\211\373f\275.\224\237=\321\337o\275\201\030\337<\273\242\214\275q\204\304<\000\005\331<\301u\020<KV\255<\\\277>;\330\323D;\313\345\335<\206\215\214;\247\2238<\217\373\244<p\262\264<\3013\201=o\311\227\275\331\2125\275=\326E\273\344T]=wr}\275\227dk=D\232Z\274\360\377\356\274\342\321,\275\221\2679\275\362\307\\<\222\017\251\275\271:\305<omG=\314\365e=\364<\265\274\301\032f:\365q#<rj\223\275\273b\266\275\206\216\357\274\371\035#\2756\233\236<\004\360v<\350F\234=\214t\361<z\274\250;\017dO\275S\271\342</\324\021\274\357\376\022\274!Zs=w\021\372\274J\322\316=\376\376\026=\231J\266\274\324\347\024=$y\362<\206&#\275\226\304\013\275Nt\026\275y\226+\275m)\250;9I\036\275\316\365\271=\3733\365=_:\205<\002\r\215\275\220J1=\016\371\257<_\376\227\275\220:#\275>O\263\270\026.\247;L\347\010\2731\266T\275\307\375\023\275$\361;\274\356m\263\274\010iG\275u\363\214\274\377\320x=\325\366\300\273$\371\345\274%\222\362<\360(\243;\217\\\271\275<\202\276<*\260\203=!\346c\275\034\211&=s(#\274<=t=\020d\220\275\304\307j\275\234`\326:\025\260@=\345\201\004=\3429/8T\356\201=\206\203~\275\014\321\362<\022\362\223=\275b\024\275K\2604\274\267{?=Q-\'\275\271*\213\275\211\325\\\273\330\375\206=<\303I\274\006z\000=\357\010><\213\223\333\2746U\250\272l\354\303<q\364\022\274\365$\214<X \006\275\3711\267\275pYm\274\314\234\'=+<\206<\223\372\353<\3236|;\237F\233<\234P\275=\210\221\032<\017\031\220<\020\305c=\317\352\272\275\024E[=Y]\245\274(\006\216\274\254\335\226=\246y\026=c\354\\=A\200\200:\230\354\254=.\363$<*7\337\274\206\252\236=\361\006\356\274=\201\277\274\203\025!\275\3629T\273\304\304\270<t\251\361\275\3147\227\275*\324\264<X\302c\275\334\005\232\274\324\250\354<~\375\216\274E@\225\275\211\313\344<\'\376\037\275=D#\275\211\245J\271\312a\261\275b\016\237\275\324\274\244:\364\022>=\177\222\245=I\375\266<w\320\253<\022#\021\275Q\345O\275#\372\253\275S\"\335\272_P\023\275\351C\001<\330J\217\274\023\360\301=\225\225?=\255}\r=g\203\370;\311\001\233\274$;\357\274H\302\013=\352\316\367\273\375\3251=\357*\343=f\203\235<\202\330\373\271\032\362p=\002\263~\275?\256\306<H#\323\274\324\002#\274e,\221<~\005*\273\266\313\244\275\375\260\317<\352S=\275\376*\264\274\304k{\274Y\245t=e\251\226\274\336\344>\274\326\205\021\275\2020\215;\270\006\252\275\r=\204<\210\026\033\275q\301\217\274*\035\321\274\211i\214\274,\251\264;\000\325\203<\034\017\000=A_\206=I\021\316\273\236P\204=\025\261\t;l=\007=\320\360#\275\202\376\315\274\3472\253<\023\304B\273\222\376\226=\030%-<|#\315<\232;\276\274\361\002\235=\220\216\314\274\027\024?\275\313m\306<\330\320\003=\371\357h\273\222j\007<\300\302\235<\343\031\373\274\000\0003=\202y\262<<P-<[n\252\273\263b\017=\337\212\201\274#\2533=\021U\271\275g\266y<\243\200\023\273n\016\222=d?\024\275D\001+\274\316\221\274\274\034\244;=\223\243Z<\340\010\225\274\337;\256:[\3774=\211\300\234\274\316\'\324<}\022\337\275Z\253\002\275\331\321M\275\307\321\340<\346\327Y\275\207|3<i\347\272<\272\310$=\335\351X=\000vK<\373\333(\2751\213&\274*l\004<\013\247*=\3611\316\274\240i\243\274\233\211\002\275q\t\243<\350\n\217\275\026\375\214=\340\246\272\274\221\255\324\271\346\"\227\274\231\236q\275\242~\326\275|fi<\364\273\247\275.\233\226=\251\017\224\273\003\302\241=\225\024\336\273\001\313\035\275\255\034\227\274\264\347\027\275\325j\252<\231\364E<\327\267\307\273O\366\200\274ib\300<s8E=\247\351\362<\025\203\204\2755L\016=sf%<\236\030\215<\000\324K=\n\003G\274Cy\013\275P\001r\273\030\234H=\214ho\275\037O\277\275W9\014=\374\2423=\010\342\325\273\352\314\025\275\204\254\206\274\211\036\261\275h&\207\273\313\222\033\274}\020\372\274\2754\203=Oj=\274Q*\252=\307=k\275\313\301\344\274\267\262\220=\243\021o<\261\033\021\275K\034 =\366\267\217<\324\243\206\274\326\355\263\274\250\241\361;{\035%\275\301\337\225\275;\213\244\275\260\026\225=\310\362;=\241{@\275\311\025 \2741\346\346=V\333]\275\222T>;\240H\354\273\276S\262\275\364\346\220\275\356A\341;0/\201\274\214\252^<3\350\226\274\204\002N\275\331/\233\273\025\310@;6Nt\275\026\016Y\275*\002\342\274\375\322\225<\330\354\013:\034{\253<\231\334J\275\364\220f\274i3\033\271\257\265H\275\006\350\006\275\220$<\274?\376\013>\327)M=o\241.\274\204\231$<\337\227\242:\325~\244\274\350\253\'\275\221Vs\274\"\006\270:T<\345<{\235\027\274E\036\360=\010i\201<y\014\220<\014\352\227\275\264em\275aE\233\274uZ1\275i\225\254\274&\307\365<\030\275h\274\031j\203<\207{&\272\314It=&|\262\274d\301\020\275\352\302<\275\024h\316\274@\255\217\274~I\236\273\\\313\225<\"O\331\274\3135\037=\235q_\274x\220\221=\035b\037<\267\245\265;\251\217\022=\243\266\265\274O:}\275\27160=\017l\340<\207kn\274~\002\203<\220E%<\377\330\213\2736\216\373<Hi\005\275\205K\2638|\206\224=\237\303+\274\261S\003\275\216\233O\275!\244\235\275\021\372\257=.\372\313\274\0032f\275\355u\r\275\201#\005\275\335\256\341\274\367\235$\274H|\264\275U\305H=\343\214\025=\235\336\217=\211cF<\333\310\210=\237\037|\273\365\304\224<\231\3113;\340}\211=[\305U\275@\003\177=\352On\272\000r%\274\024\206\027:&\356V=\366T8\275\3110[\275\211\033\204=\013j\304;}`\031=\260\236\021\274\351$V\275\306[\303\274X\273\342\274t\307\026<\254\272\327<#7#<\233C\234\275/\245\221\274\036k\326\274-\350\033\274\307>\007\275\016kF<\031n\205=\321\317\241\274\344\202q\274\261^\274\275\225N\277<\227\223/\2754@\350\274:T\021\275\270~\207=R\366\351\274\013oE=D\257 \275V\241\252;\212\234\273\275a^\305<]G\000<f\354-=\246\006\242<o\212\221\275qRj\275\271z\005\274\374\177C<\2001\306\274\231\370T<\366KC=(d\006\275P\032\324\274L\234\t\275\2314C=w\213<=:\264@\273d\323\300\274Y\371\201<Z\002b\274\340\373+\275b\310l=\331\221\214\274\215{d\275\322L4=w\014\215=2K@\275>\013\3769\211\256\330\274\271\n\215\275Z\006J\274\270Y\266\274\001\365%<\224\313p\275\326\321r\275\331\203p\275\356\221L=\314P\370< 0\223\271\240\006\314\273H\322\227\274|\355\267<\362\221\222\275\236=\006==\032f=\341\'e\274\036e\243=\322\376\273\275\263\0378\275W\035W\275\344;\205\274\310E\245\274\267m\275=\342\215Y\274\360.\346<r\256\250<\261\225\020\272.5\001\275\317MK\274Hh\204=\237\004\322\275\331\263\236\275\225\351\312;\267\214\216\275\305\217\000\275\313\357\372;^\231\215\274\207\251\r<\301\325\331\2729\343#\275_\022\215=i\357\264\274\253:\203\275\217\203\204<\223Uc\275\370u\330\272\244t&\275\205s\005\275T\336\006\275r\350\202\273x\366\010:\254WZ\275\233\313\026\275\256\3123<Z\377A;\324E\036\275\217\374\223\274\353\023\003=\023\2011=\362Y\257\274\365S\200:\234D\231\275\r \246<\242f\244\274\245\364\247\274\023/\020\276<\372\314<\361\361\223=\323yB\275\364]\316\274L\263\215=\027\256\010=\346w\272<VT\316\274^\332^\275\024\250\305\273 \347\020\271\317\255\243\275\327\305\226\274/A*\275\271\354o=\033\212z<\205\022$\275*\227\236\2743b\004\275w\306\347<\312\355\362\274\260O\237\275\242_\202=\232\311\016<%\367\024\275\366\245\323<6\233\353\274\212uC=b\353\n\275\270\365\202<\371\301\250\274\344i\200\275\321E\205=k\363*\275\017\002\376\274-\234\232<\r\353\342<\033\024\240<\370\305\240=H\272d\275\334\304\201=%\205+=\035\010\251=\377\334#=\035\036\005\275\265E\034\275\304R\276<\207\034\t\275\003\274\250<]\032\016=\377@\314\2759\251\261\274!\177Y\275\\T\244=\222\376\326\275d\335~\274\002\333\226=\005u\032<\232\307\367=z%,<pu\203=\026y\\\275\333\026%\274\000}\001<\375`o\2746Q\005<\252-\355\274?g\234\275E\336\304\273\324I\245\2716\'\352;|\362{=\265\251\n\274N\331\276<vr\033\274.t\232=\2775\340\274\022\023\264\273\221]a;\321~\211<\307~x=T\265\274\274\036\022\n=\254 ?=\272\246A\274\033W\001\275\311\244\316\274\033|^\273\350\0103\274\214\357Q=\276\254\031\275\003]3\275\016\303\351\274\007\244\237;\024\217\242\274)-\257<\360\251A\274\354mT\274\332\r\275<\314\032\246=KKL\275\275\273C\274\355\005t=\001\206v=\374-\t<5\356\215=\300Z,<\310\341X=\010\277\215=\363\272\r>\261\222#=\3227k\275\312\272n=F\237\302;\371\226y=/.Q\275\013\256_<.\010-\275}\013\310< t\222<\207>\177\274\321\335\234:\007\017\222\273\266\263?<W\316\263\274\252\261\204=]l1=\003g\002=+\271\025=\340\332\226\274\0038O\275\255~C=\022\010\014;\206QS\275\335\360);w\350\021\27597\350\275\214\363\006\275\206\003+<\232\3725\274\341c\237\275.V&=0I>=\341\335\260=CW\030\275F4\203\275\242}\026\275X\263)\275\215}\324<o\367t=\355Q\323\2758\231\036=<\307\351\274\200\005\t\275\304Y3\275^_:=\265\256\363<\215\244?\275e\322\254:\002\364\247\272\371\204\260<P\'\014\275\3757\256\272\3168\260\274\014t\022\275\370\231\001\274\005t\202\273a\374\205\274\030\002\255=\006\310j\275v\234>=z\372\234\274.\324\315:9\037I\2749a\376<\2708b=\231\215\237<\325\2426=\360\256\013\273F\256Z\274\271\227\220\275[z\027<Ns\376\273\301\034\351\274\243X,=\243^\365\274!\332T:\023\242\325\274\262\tu\272Z=\317;~\264\324<\272\0320=\017\277E\275\005\214?<\003\354\303\274[\254\221;J\225\264\273\016\300K<\322\335q\273\246*a=\230\236\320\274\252\204R<\214p\340<\326\367\000\275\362\3011\275|a\230\275\225\341\310;[e\2649\363U2<\335)\022\274tO\342\274\002q<\275eZ\022\275\023\357W\275\267\222\344=sL\312\272*t\320\272\274P\274<\305\357\'=\027\032\377\274+\007G\275\372\375\276<\236\225n<*r\343<\276\205\010=X\212U<((\013\275\224:\003\275\357*\262< \354\025=\261~\276\274\r\317\016\275\272\030\200\273\226\322\261\275\006;H<\346\021n=\247\332i<\362\261o\275\241Km\274\226\353\035<\203\035\204\275B\351\343\274\003\321\023\275jq:\275\321\241\246\273\375 \202<\342\321\016\274\367\202\351\275\007\206\245\275\226\371\270\274\rs\226<\207\336\337\274l\237\272=\324\010A<\274\334\031<\250\221\320\274\274\342\266<\311\273\344\274\203fw\275\244\257\004\275L\305\276\272\346\242d=\221\251\002\2744\252W=\344t\221\275\031\177\000=9\345w\275;m\014\275?\t\206;=\225\371\274\274\377\325=9\016|\275E\204\346<2\241]=V\'K<Cz\237\272\002\242\030=\364\2266=t:\215;\233c\203<\274|\252\273j5\240\274*\266\246\275n\246B\275\001\341\335<78B\275+l&\274i\270K;1~\357\275\301\3654=\254\307i\275\241\010a\274\025kK=O\005r\275\340\276w=\223\231\263<\232\261<<:\206\002=jJ\254<D4\314\275\300\333\034=\347]U=\2661\227\273\205,\032;\266\033\376\274(\213\026<\240\370\216\274\026\"\007=\361\244\364\274A\022\230<\002\273\217=\t\312\'\274y\320s\275lT\220\275c\023\033=\316\017\323\273yS\003\276\031\337\205\275lp\226=\344\340j\275\365\276\217\274\265=\020\274\3014B=\313\361(=\214\005\247\274\245H\225<\270\000L\275We\004:\236\236\263;\202\206\220;IM\026\275\017\032\001\276\327\262@\275\254M\001\275\235\251>=\237H\316<~\250Y\275\354\013\240=\322\254\263=+\351V\274\274\246\377\273<\276\230=\t\343\306\273\273m\352\274\240\223\232<\237\217\241<\255\t\260=&\021-\275H\'T\274tj\204<o\214-<\273\022?\274N\325\212\275\334\340\306\275\361\020\257\274\2100:<\324\203\364<\2561_\275\224\r\346<2.r\275\013\350\237;rN\240<\341\352?\275$q\241<*h\004\275\023#\235\273u\r\346<\002\271\316\274\274\325\302=\tU\303\272\224\226-=\327\3108\275zY&=\243\315m\274\312>\324<nM\347\274\223~C\274\230\245\342<\247\tI\275}\355\242<K\036\214\273\014\320\272= \205\306=\204\013$\274#=J=\255\332O<\242\200\027<\337\271\334\274\325)1\275Zn\003>\272\2576=g\263>=P\0304\275>\036\377<~\225\205<7\377\260\2749\347f\274\325E{\275\004\227\023\275~\337\n\275\222!\"\272\236N\375<\025h\245=\316\006i\273\016RJ<\211\315\307<\245\365@\274\361C\232\275\303Z\230<U\222\270=4o\264\275\247(\203\275\352\230\017=\335\266\321\273\373\330\216\273\306\276\257<\025\233c<\371\t[<\200!\265\275\014G\016;\242\337.=Q\023\030=\020\325\255\274}A\232\274c\253\001\275\320\007\220\273\266\002s\274\3146#<\340l\002\275h\217\036\2756\227\225\273\303GC=\252\205\226\274\223\347*=\32520=\035\201\262;\000\350\267;u\310\325\271PLm\275\335\235\207\275z\262t\275UU\267<\327\237\235=I${=\215\251q\275\234v}<\215\356^=\230\344\343\274 sS=\301\333\035<\020e\212\275\304&\220<\362\0309=_\266\370\274\177\231\372<E\322\230=\000\251\222\273\247m\000\275\225\372\324\274\211\333f\2754\264\251\275\222\311\031\274Dg\214\274\355q\002\275\312\305\245\274;\ru\275C\004\216\274\316\305\001\275}_\213\275\026g\203\275C|4=\001\\\202\275M\316\360;\201\363_\275XF\350\271$\272\3049cl\027\2755\260\313\274#H\212<\205\373F\275w[\252<;d,\275\036W\214=\\\254&;6A==\3520\t=\242\335\016<B^M\274M\311\016\275|\0212\273\337{)=\327FA\274\"ZF=\240\336\251<\344\305\212=\205\373#\274G\017\277<\201S\346;\231i\034<\337\3011=A=y\273\213\305\375\273\351&#\274\005f{<\\\263d\274\024\302{< \036\246\274 \255X=\256n\027<\213v\237=\325RU<\2614\365:2\234\001\275\323\354}\274\220Xj;\035\345\255=7M\007=1%\t\275$\270\314\273\312\360\232\275\333\244S\275\377\222\207=\326u4\275+-\374\274\356\261\005<Q\304\215\273\024\223%=M\350Z=W\201\276\274.\372u<\252p$=A\260~\275\324=/=\"\371\217<\364\276J\275\270A\262<u#\036\275\006\221\311<\034|\013=\247~\023=\211\376\204<\322i\204\275\347\357\004\275\200k\303<\037\251\005\275\230\t\240\275cd\317\274\221*\371\273\343\367t\275L\001\036=\3249\321<\315.\306\274\237\226s\273934\273\302\332\020<\237\027\025=\245\277\254<R[z\274#\330L\274\204DZ=\206\241~\275.P\220<\320\227\275=\006\352\025<\235\217\034\275\331\201\202\275\331\336\274\2751\240\256\275h\005\251<x4B=p2\363\274\360\366u\2758\224\205=\262<\227=\340\010b=\235\243\274\274\220\350\322<\354\211\020=/\362~\275\217\244*=\271\320\215=\224\351\t\275\355.a\272LQ\237<m]G=4[\347\274mN3\274\203\244\326<I\377j=+\026\3559M\253\n\275`+\250<&\266z<\343\232\023\274N\313\231=\234C4=\252\214/={\250|<\026#?\275\0037\367;.[[=O\010\335\273g\200\025\273e\242\310\274\t\017l=\004\200\340:;\241\235\274\325\3702=\2239\234=p_\311\275\177K\025\275\0021\017=@\206a\275\333\302\035\274:\370E;\301 \270;\203\207\241=\227e0\275\017\r\345\274\300CI\274\365q\014\275>>v\275}\026\255\274;\323L=o\001\021=\321\301\205\275\007\rW:E\354\260<n\235\262\274B\300X\274O\014-=j\372\003=\27149\275[\220\351:\364\322\010=.\003\302<~\310\014<\204n\237<\304\032\230\275\216\330\254\274a4N=>\\\364<\351\033\205\274m\025x\271\320\355\341\273?\337\225= \264\000\275)Ol=\306\252\025=59\212\275t\333\343;\370\215\271=\243)\277\275n1\232;9\320\267\274\315S\364<\340\346D\273S\312\222\274;\270\000=N\300\206\274Y5\226=\263~\274<\220#(<\207~\016\275\215\201\013\275\266.\360\275\344\332\313\274u\377q:\332\\\031\274C\356\312=\270\320\224<Qol\274b!\354\274W\202\031\273H&j\273\310\374s=j\256S<\301\020\267\27541\004<\017ki<K\260V<\320\212|\274\256\205\250=\301\317\220\275\225&\005\274\266%4=\352\341\200=$\330~\273u\036#\274\256=\224<\004F\235\274\236\233\307=\203Q\256\272\253@E=\205@\220\275$\353\010=\265\244\006\275y\373}\275\223\324\373\274\251\314\325;\201\2246\2750\232\226\275B\006\010<b\345b\274\325>\023<mV\035\275{\316\327\274\260\373\177=\345b\214=\212\266\202\274\325\371J=#\333\330\273\031\re\275\252\317\t=]J\313\274\311\214\254=\252\301[=R\341\241<\220\034\323\273\216s\235<\243\361\231\274\223\3666\275\245:\324<\267\235\035\274\325&6=CNG<Y\2018=Z\016\266\275\242\312\267\275\206\t\224\274I\345\353\273\250\371\277:\003\021\215<\264\037\267=\220\036\037=\324o\211\274kNo=\212a\315;\004\366\221<\370p?=\000 %\275\201L\034\275\3757\300\272?\233\273<\177\034\334\274|\340\263=\354\364Z\274\213\232\310;\246\256\217< \001\026=\242t^<E\366\002=\333\373\356=,\016\335=\336\004f\275\302\306\225\275;&a\275\365\315\311\274:\354\231\275\324\265\245\273\262\031\215\275s\217\335\275(\332\233\275\233\021\254<\332\313&=D)\361<\371\013-\275\270\034u\275\002\317\250\273\342V\301<\372\275}<\333\375\256\275k\025\346\273\006T\347<\256\232b=\264@\221\274\305\'x\275\322\322-=wO\223\274r\262\216\274\237\215\032=\005\2664=g\004\350=\301M\224=j\214\273;\335\031\013\275\203\264\200=*\240\024\275;\321\313<\310\375\261<\n}D\275\207;\206=\373\364`=\365.K\275`\315m<\3772\317<\315j\023=\352\211\227\275\225J\274\275C)\330\274\221\023\000=\316\333k=\351|R\275t\224\233<\205s\000\274\024\326\204\274\273\323\362<\214\206S\275h,R=\251\207\221<\262n`\274\252\261\257\273\250P\265;\000\2653\275\"\351v<N^\222<\225@\200=\200\002\"\275X\234V\275~\357K\274\032W\003\275\t\273\256=6\325\260\274\365\030\020\276\235\375\257<\332N\220=\013\010\253\274\347\253\210\274\200\314\264\275\024\000W=\224s\220=P\277W\275\362\256[\275\316R\255\274w-p<u4\253\274?\371\t=%$\000;S$\002\274\363\202G\275\234\230\306<\221\213a\274h*\323\272\365\330\016=\010\235\344<\300\017Z<\357\n\024\275\223n\315<\006a\224<\275\005\023;\211\220z;\366\3447;\020\303\303=\262\356\206=\235\321)\275%D\204\273n:p\275\306ya=\303kQ=\305\016\273=V\242\227<\3466\375<\374\260G\275\347\0345\274\246\347\203<\3704\240=\234\300\202\274\350\002\272\274o\212\344\273\342W\326\274\026y\013=a~\214\273\215\250\344\274\247\373\245\275%\305W\275\230pb;\350\t\200\275$ke<?\315}=\204!\261<\202$4\275!\241\202=\251\371z=\273\214\351\274\252\336\010\275_B\016;{\231\271\273\204]\240\274\220\315\323<&XQ\274\003\266N\275o\214\272:\340l\024>\242\372\206\275\'|$\274\006w\231<\000T\206\274\370+R\275\221\031\325\273\373\031\014=j\303\372\274\021\307\002<M\310q\274\267x\270<C\307\265;8\327l\275r\361\213=\207\355\'\275se1\274\234\006D=\303\'\005=\233\034D<\327\245x=\003\017\312\274\232<\004\275\r\326\277=\240\334\355<\263\335\002>\035kN=\323\235\313=V\327\017=\356\246\337<j*\302\274Vi3\274\231\362\004<\251\026\004\273\217\357\230\274\213\331\004=\276\000\276\274\306\373\236<\271z\3048}T\020=\246\324\266<a1\376;\204|\247\274\355\302<<J\340\032\275u\0219<N\242\032\275X\214\373<\322\002\212\274\032\013\321\273\3358E\274\036:\315<\001[\336\274Ch(=\234vk=\025\311s=\356O\317\274\035\373|<\352\202t=+\ry\274\244E\014\274\031\274\201\273\365\010\344\274ce\317\274\253\273N=\354\370\327\274Q\363\033;\177\2724=A\375\031=\303\254\347<\226\024\370\274\324\252G<\344\321\025\274]D\031\275\362\306\372\274\336a\036<U\302\006\2750\254\200\275Xu\273\274\313\252\245=k,\211\275\325\r\232\275\026\330Y=!0A<5\213.=\303\234D\275+\372\323;\242To=\026\214\037\273IBE\274\222\271\217\275}F\221\273ui\220=\253\233\021\275\027\231\301\273\002ka\274&\305\"=}=#={\327\245\274\201\177\344\274\230\305\001<\350\322\243\274\247\303\357<ku9\274\330\277\202<\224\'\376;\t\220\251=RV,\275\322\240.\275\207\236\310\274\316\375\334;m\224\337<\2473\n=n\035\032=c% \275\212\240\\\275\315Y\016\272\363C3\274\262\250\001\275\034\3445=\210=r<O\006\315\275XC\233=h\350%=\021\213\331\271#|\221;\364cD=\310\265\262=\336j\212:F\277F\274\376\216\033\275#\304!\275?\226i\271A\352\206\272*eg\2731-M\274:\260\\<\001T/=\234G@<\231:&\274\013;o\275\375\365o\275\245\014\307;\320:\3039ld\224<\333\362\317<\300\221\032=R\247\327\274\212\332F\275\001\204\022\275\200\307\210\275X\201\037=!{\214<\267\345\212\273p0Q<0\206\371\274\346\021\202;w\374\276\275\'j\216\274)<(\274V\243<=\231c\031\275\262\013\021\275\307\026\203<o\217m\275-\215\370\274\315\231\370\274\251\217\020=\255\335\212\275\260K\233\275\003H_<=\334c\275 \376\362<\275\247@\275\010L\000;F\254\376\274\\\241\t=.\350\246=1e\264;\366\021(=\301\345\205=)\245\350=\361\0371\272W\027\372\274\235\354\362<a\\R\274\256\367T\275\0067\023=-\260\205=\036\372\"=\203\241\301=\347\300\340\273zx\367\273B\243i\275[\270\020=\032\022H=%\232\254=\372\225\206\275\230\343^=\341\030p=\2634\031=\234aU\273\305\367\034=\360{\"=\324W\206;p\371\334\273\222\"\271\274\377@y\275\355\324\352:v\014\237=@\320\203=[\317 = \260\230<\335\246\374\272|\205\313\274\255\201\376\274\356\232V\274\004\210s\274H\022\227<N\303\246\273#\314\034\275Y\253>\275\203QG\275\251n2\275\347.<\274\200{`=O\355\346<\271\312\306\275_\242x<U|\354;\333\326\241\274\261\311\215\272\207A~\274t\312\220\275h\347\305:=\274\331\274\2769\231=\251&d=\025\r\200\275FSk\275\234T\331<\027u\272\275Jxt=\241\221\332\275\327\277\226=$)\304\274`\277\013=\255\322\243\274\240\320P\274\242c!=\213\004(=\2233\203\275,{\206\275\272\205\024=\314os;\315\311 =\211\352\"=\201+\275\274\000\211\257\274\210\\J=a)L\274Z\200[\274\203\204\215\274#\221\307\272\303\033\215<\363\232\333\273\255\267\256\275\304\031\200=\231\031(=\364\247\027=\333\020G\275\213\351\234\2744\322\317<@\251\214=\016K\226\275>3\334\274u\276\006<T~\003\275\n\246\210<l\217\r\275\260\335\021<\014(\357\274\332=\210;\371(\225</\334E\274\365^X=\010\274m=\323\013*=zd\257;\026\217\334\274B\270\321\275,\304%\275\257\234\000=a\376\246<L\375\276=\364\0368\274\2328\001:\332\316\250;\032]\231\274\233\022\232\274\007\316]=\322\221t\275w\214\204=\212j\345<\371\360\337<\0056\202\275\0228\337<E\263\227\275\017\267\241=\371\356 <D\001\214\274\345\200\016=\314\353\024;I\316\\=\030\247\301\275\265\007\307\274/\254*<:\334\001\275!\2757=<\274\267=\3431\002<\202\033f=t\212];N\325\217<\031\366\237=\311\230\365<\226\007\244\274g\325\035\275\351\251\332;\302^\266<\235W\226\275N\273o<0\235H=\374\365\022\275\002\222N<3h\376<^Z\340\274\205\253\212\275L\271W\275i\3522<\307\315D=w\217\300\273\"(\303\275\002\347\034<n\305\333<96\270<\202\340(\275v\247{<\303\334\234=\325\243\252;\232_\221=\023Ji;\352*\270\271U\2320\275K\336\003=\"\252\215=\212\314\225=\340\340\314\275\022\315\014=\327\240R=\246\217q\275\340\272\244\275\004\033\350;\322\230M\275OE\274<\007\347\204\275\277;\214\273zX\215\275\255\271\225\273\017\260\362<$\364<=\210;\204\275\270,h\275o\342\366<\324\271\026\275X\351\240=q\251-<gl\246\275[dG=S\334\346\273\330\224\004=\227\274Z\273GJ\034\275\301\341?<\227\014\000=Ea\360<\354o\275=\002\272\254=Kl\2018C\304&=\227\247I=RYx=\034hz=\220}`=7]\035=|\343\240\274\034\001\027\275\357\272\353;}3/=A\270\006:`\2114\275\214j\305<^\371\251\273\201\277E=\347\007\266=\n\006\242=\013\222\002>K\014\251\274\251?\223=Z\0240=<\215g\275X\346\230\274d\340\262\274\271\031<\275\250\277[=\010\374U<g\317k<\0365\022\274\002\367W\273\326|\244=|\307\351<C\331\264=X\r\226\275\362\250\001=\346\341?=\215G\274\274\206hN\275\007q\323<\256#_\275\365K\030=\366\225\024\274Jv\200\275\'\207\226\274\037F\033\275\253\360L=O\322f\274\255@\250\274\305\210\205\274\324(c\273l\365\002\274\251\013\364\274\210(a\275z}\311<t\332\301\274L9W\275\304\243\204=p\233\021\275\325\275w=e\t\253\275\300\235\333\274!\250F\274v\340\325\274\373\010\333\274\016\030\311<Z\230J\274\221\035}<l\275\266:\236\304\260=\324\317K<7\t\004=\347x\r\275p\213!=\261\216+9\245\016\201\274\214`\267<!\000\247<\002y\220\272s*B\275\303P0=\227\371\357\274;\300r\275v\362\235=\376\323b\275\027,\253\273\222\320\013<\262r\221\274)\255\370;\261_\321\274\315lQ<\366-\376<\237\352$=\000\235M\275\0206F\275\302)\202\275\327Y3\275\354,V=\304\307l\275i#\236\274\205W\275<\231;\353=\200{z\275\3303\214==[8\275\223\375\241\274)\351\206=\031\326q;\245\244\241<\277Ht\274\212\346\204<t\226\013\275s{\255\275dJs\274\026\367a\274\355\033l<\272S\010\275\266t\300<\267pY<\237^,=0M\226<kS\001\275l\341\252<\310\\\033=\216&!=PBu\274\201\037{=}\376_<,c9\274\364\177~\274O\332\224\275\3509\377\274-3\211\275|Z\331\274\346\301%<\024\252\023\275?\306\344<\355i,=2\025\002;\345\344M\275o\004\025\275\346\326-;\\\261u=Ki\205=\321\215/\275\334\360f\275xch<\242\346\335=\227L\002\275Ps%=$g\356<\331\006\232\275\355\313\022\275]\342\204\275\206#\221<\006\366\264=\312\324\364;|\223\233=\032\014\243<\363\324v<\036\303\010>%\354\"=g\226\306<\024\032\030=+n\237<\223L\213=2\224\370<\201\330.\275\274@V=\213\306\223=I\255E\273\301S=\274oY0\275\016\202\235;\005\005\244\275\370\246\210\274\267\200\035=\000\235\243=\232\r\262;\364V2=\303\322\264<3\220\353;\230\214F=H\222\252\275\377\024\245\274l\304h=bO\033\275%\010L\274\376j\367<\226\264\235<\036\242Y\275U\224\000\274\213\023\336< Ro=\010\334\013\272\203\242%\276\362E\206\275L\350\005=\'\235\036=\305\207\204\274O\373A\275\224\355\027\274\033*&\274\247\272:<6f\325\271\263Fe=\205\234S=\220Bc=J\224]\275\267QI<\304\220\310\274}\375_\273\020\232y<$\247\350\275\001\225\237\273\'h\230\273\344E\021>\270B^;\245\327\260\274\177\327\262=\354\020 =\227v\221=\035Yk\273\356\200\210\275\004!\252<\332\367\201\274\014\200d<\275\353X=%\303\261\273\030w\353<#.\001\275P\267O=9\340z<\\\250\337:z@\252\275e\300\207=\370\010\205\271GC\315\274\354\325\212\275\251\030\023\274\252\001~=\351&@\275\314f;\274\232\232\337<\271\030@\275f\266\256\275V^\007=\226,F\275\344\306j<\334:\034=\223\251\375<\rY\035<\025\026A\275+<M\275\013\336\302<\322v\030<\371dV=h.\222\274Q\342\030=c\301s\266;\327\025\273\252\332\213\274\221\300\245\273\357\225\317\274<pb\271\270D\336<\223\355\270;\352sZ\274\232\026\247=\017\263\032\275[\373\360<\275\347g\275\203\231\336;\024>\023\275\275U\005=7\305\216=\343\272\023<t\367\n\276_\215\021:\276K\021\275\304iB=Q\321\002\27485\023<\0305\016\275\034\362\032\275\233\251!<\\\223\235\275Vj\211\275J\0178\275?e\242=\354\356\236\275\233\344\202\275o\343\212=\246\215A=\017]2\275!S#=\236G\216<(q4:\324\354-\275\300\306\003=|\305q<X\032\021=\264-\303<\"\275\203<\360y\224\274M{7\274C\265*\275G]\213\274G\375\327\275\333\221\206<N,S\275drb\273AQN\275#\0210=\206\323\206<\311*#=\243\365$=i\356\216\274sp\200\275\\\3137=\320Ac;\0000R=\320\316\366\274x\1773\275\264\303\262\274\303A\230<R6\360<g\312\257=\205\255S\275\255\316\236\274\302\223\304<m!\237\274\017\2550\275w}\002\274\022I\034\275v\325!\274\326g\246<%|y=\303L\220=\222\032\320=DiD\275[\t\305=2\216\216\275\267\"\240\274\\\371\313\274!\372A\275\321 \276<\252Rg=0\013\200=\311T\366<\201@\000\275\332\020\000\275\255>\010=\331\351e=\'\244\202<`F.=\016\304B\275\027V\307<\315z\001\274v\377\020=\325Q\260\274\345\210k\274\221\272~=1\027E=\325\033\277\274\013\024\276<b\243\300<\230\212\354\273|\037\201\275\343O\262<\214C\366;;{\333=s\362\343\274\253X\036=\242\265\003=y\001\357\274\210\007\341\275-\223\215=9\371\375;\013\2756=\230\221\235<\030C\313\274\322\264O<\031\016\260\273\310\345\220=\034\317\005<\021\306)<\367<\t\275\205l:<\337\001x=.\025\311<\252k_=\005\202\333<?w\2069\341\'W\275q\0028=\263)\211\275I`\031\273y\320\301<Wm\034=\001oB\274Y\231\276<\354\352\201<s\024\347\2676\271\003\274\301OJ\275\320\007<;\366\241\201<\r\023N\273\373|5<G#\240\275\237. \275`\331\271\275\036S\360\274\320\357\334<\227\343\375<f\276\303<\006\311-=\362\004\300<\034sG\275R]\315\274\366 \027=\346\353\017\276\315/0\275\375\212\003\275\2510\347<9M\315<@\223\245\274\342K\205\275\020z\333\273\350\265\327\275\217\252,\272L&\243\267\201\311\271<\312\356\213\274\032\251g=h\237\000=\311\276\361\274\377\266\212=\341-\317\274~\222\222\275y\365E\275\260\373\273<\212hP=q\016\036\275\313\260\010\273j\r\016<\227\2004=\0324\017\275:\013\320\273\330\236A\275\010T\202\274,UK=\276\022|;\230\346\216=\025\233\242=\253\207\320\274o\203\276=\024\332s\275\207\370\013\275\245a%<O\244%=8_9\275*\036\325;\030tr\274\372\313\024\275\037>\235=\004\022\276\274\300n\202\274\352>[=\216F\264\275}\213:<\307\234\277\274\005\374\221\275V{\225\275y\272\006\275\235x%=\374\261K<-\'1=_\204e\274)>$<\333\014D:\365O\363\273hl\346\271\004\367\331<\203\301X<\367\356\277<\371\327p\274\370@M<\240\330M=\377z\262:b\324\000=\264\355`<\260\237\3059$K\"\275s\026M<1\342=\275L\345\250<1\267\001\274\')J\275\250#\373<\335&\257\275g\377\241\274\003\276V=\352\305\333\272\264\221\357<\374\315\271\274\360\034\205=KV\274<\231\'k\275\312\205\224\275\340p*=\211?\215<\245\025\367<\340\031N=\220\n\010\273\304\360\212:\367\363\236\274\350\320C=w\240O=V\251\332;\336\t \275r4j=[\3474\275\322\334\227\274x\336\252<>dn\274\225\026\014<\223\010\270\273\353U\312<\335\216\t<U\275`;\007\313`\275\036\363\363\274J\034\367<\354\377\232<\236\246\264\275\220Z\207\275\212\206\244\2748<^\274n`v<r.\371\273o\207\204\274\311\347\325<#\344?\275y\261\177<\335\323\013\275Zu\005=D\314n\275\314,W\275\212*\243\275\356\"r=~x^=n\372\035<&u`;\201I\313<x\307\n\274\345LF=3i\007<\353\376\031<~\321p\275\242\243\205\275\243\256\007=\'Q\r>-ww\274\245Q\264\273\304O9=\257q4\273\265o\305=\355\231\277<\3647>\275\20194={\316\033=u}C\275&2\220\274\234\230\222=\214~\356\273\010\353\007;\361\3324\275\234t\231<\225M\017=\263\256X\275\305\275\201\275m\"\223=\231\365\233=\253\234\035\275\231\356q=\016\256\246<\023\262$\274\375o\207\274=sl:\213~Z\275\222\336\345<i\303d\275\273oA9\364;\006<\000\000\235=\3040\'\274\034\356\247\274\"\350\320\274\235<B\275\320\331\317\274\367\360\237<\200\306\n<p4\312\273(\005\205=\232+\306\273e\022t;\\\372\225<\0276\316<}V\326\274\200\203\247=%\301w<\234\007\n\275\343S\2148\272$\215;\313\004\260\2755\202\273<\021\n\322\273\021\003\351\274\003\210\000\276<\014c\275M\\\352<\007Np=\t\223\355;\376\\l<\254\231\016\275}\323\204=\376e\003\274\362\362C\274C\335:<Zm\212\275\327\215\305\275\014\027\021;\256\304\327\273\202\001\337\275c)\004=+v\341\273\367\026\273=\313\024F=\031\256K\275\020\023J=\211\257y;\324^\263;\353\250e\275\377\310]=9\204\303<\263\360\\=\342YY\275M\334\241=9\251\277<\220Lk;\3233\215\275\177\362\242<h\365\346\274\222\232,=\204\240\210\275y\257i\275\2075R=\255\233\"\275\031\256\257\274\345\334%\2755\263e\274\276\347\214<\330A\275;\013e\231\274\177)\033=n\014\331;\303\242E\274m\234\266\273@\223|<\222Id\273\\S\007>\\m\244=/\"-=\304\340\r<\252\'\'=\321\261\211<\246_\211\275crI=T\337\245\273\351z\005\275\250\241D=\272\277J<B\212\256\275\006D\240\275\231\363%<\033\272\260\274\300r\306<2\t\237;]_\310\273\220\303\376<]\027\223<\224BE\275\375\367\205\274ch\025\272\253\177#\275M\316n=\031\227c\275\263\200r\274\2679\204=(\352\002\274\342j\315\274\306@ \275\241\352\201=\257\302\341\274\037P9;\3204w=K18<\244\214?=\360b\235;\300}\232\275\366\245\232\274Q=\017\275^|\013\273\334\264/\274od\257\275\256\230\373<h\200\310;\027l6=\331\023\245\275\331\340\231\275\025\367\251<\323R8\275\006`\365\274=h^\275\"3R\274\022>\370\274\255z\305\275B\374;\275\261S\247\274\367\337\225=\313\037\251<F.\201\274\232Y\037<:\271E=\304Q{\267\261\t\n\275f+?\275\234,\206\275\313\255\020=\314p\223;\006\204\236<@\306\343\275\373\361\211\275s^\310\275B\274i;+pn=\334{\017=\376\260\316\273\357\325s\274\037}\276<\3572f<\262\213\036;1\3446\275\t\252\330;`\265\\<\2125\273\274\362GO\274\376\201\r\275\322\335b<\225<~<\245\260f<\223|\200\275}\004\320<*\021\244\272\316%=\275<\\\331<\310/\035\275<\220\226\275\253\223\240\274\330\214\321=`\213\256;\343\027(<\"\233}=\217\t\275=\356d\020\275\003#)\275d\217}\274\310EO<\300\253_\275\335\255\005=\311\332\242\274\2313f\275\201\010\205;P\032\037<\325\370\313\274\005\014\301\273\017\023\210\275Y\324K\275 \366m\275\224\216\301=\312\'&\274\002\237\331\274\260\233\202\275\264:8\2754\271P<\247\020\233\275\202&\245\274\264]\256<S\213\271<\031\021\030=\217G2\275<f\037<\352Q\310;\273\257?\275\320\247\267\275\275E\n\275\311^\274\275N\356\321;\207\234`\275\026b\007\2742\224\262=\333\211f\274\245T\356<\024=\276<l\366w\275\310\3532\275\230\036\205=\262\3628<Q\320l\274yz\262=\227\207\302< .>\274\206\262*\275\261\320\342\274\307\257t\275D\260\253\274\003\344\003=\"\360\210\274\2703\233\274\227\346\361\272(K,\275\341@\214=\324\372\327<\021\033\315\274z\371J<\323$\242\274>\262l\275\r&\213=uO\364<\356F\311\273\300\345\212\275Z\214\251\275`B\027\274\324\021\260<5\272\027=,e\364<\244\034\212\275J\247\355:\331\"\226<6q\n\275n\251R\274c<\244\275\370`P=)\201(\275\225\370\3059mc\003\275\241|\007\275ax\220;\300N\362<F\244i<\263sS=\364\t\217=t\224\226=\271\344\024=\036\377h\275w\"\377\274 h\204=\201\360\257\2734\005\221<\255 \001=\207\032*\273\300\037L\275ZP\r=l-@\274\250\033\264\273e\355\317<\335\005j<\307\357m\275^o\023\275\233B\356\273\322\244\306\274\277{\024<\354\230==N\306\335\274(+k\2757I\205=\321\026\352<\200\311h\275hEw\275\2648\215<f\016J=a\345\244=\353L\\=\223\251t\275y(\350<9\344\363\274\271\226\217;\363w\206\275\2057y=\025\220O\275\313\205!\275,d\231\275n\240\276<\023`B=Q\r0\273-\216o=\370\2750<\246\377\225\274\371=\321\273\024_\t\275\231\305\256\274\211A\222\275\250\312\244\275;\327\254;\201\326;<$\364\262\275\314\024\205\275+nJ\275v\205\323<\340=g=8\322\273<?\306A=\0270\353;\230[\320\274\301O_:#\3759\274\362\347\323\274\222\316\020<}\250,\274\341\016\340;\267%`\274<\326\216\275\365\341\355\274\335\366\004<Ci2\275\222(\256\273\257w\327\274\0371\336<\tc\312\274\221LP=\315\037\235\274\250\030\311<B\232\214\274\325\256\257\2741\250v<&\317C<G%Z\275\263\336e\274?7\273<`\306\233=N\244\364<\367\177\007=\215o\037\275\226\223\026=|q(=\262A\007\275\373\366{=~\262\314<\220/\017=\306\205T=*\262\241\274\310d\003\275J\376\350\274\270\345K=\272\365$<\375kf\274\247I\364<\323\221+\275\322\030\316<Sr\211<\030\025\254\274J0\271=\022\304\031=\023;\214=\341\005\303<\010\205b=M\222\342\274RA\376\273\366\204\204=\034\023u\275\355\361#\274M\340\n\274qsB\275;\307\004=H\311\250<\242pA=u\372\r=]\206\036\275}\343\305<\273?\252=\215\'\007\275;\001}\274\242\n\301\274\340\230\257\273\260`7;\204\257\216\275\244\232Q<\340 )=e0\234\273\367X\r\275,s|=\307\221\253\272!\223\202=\034\340a<\225\224\340:\367\324D=\000\322\252\273\036\231t\2744+|\274\372C\331\274=\001\223=\250\350\320<\351\300\207=\252v\024\274\332\313\336\274\301]\355<\030\007\304\275\257\274\354\273\226\356\'\274n}7\275\351\334\025\275w\344\274\274<:F\274\235*\220<\021)\301\274m\270[<\034C\306=\347\236U\275Y\2420\275/R\004\271>t#=S\324\020\275P\347j\275\242\204\177\275\374\324\203;\362;3\275 /\226\275\213J\265\272\205\016i<\314\222r=\221u\010\274jT6\275\304`&=\034\303+;\321\2128\275)h\254=\363\313\207\273\355\360$:\277C\265\274Z^D=l\te=\272\232\312\275q\002\262\274\0207\352\275\370k\273<6\3652\275\022\237\213\274\364\260\016=\350\005P\2737~\246\273\346\352\000=\236\235(\275\272\0327=\021\265\026=3\261\203\2741\361\341<S\217\362<4E\t=C\r\234=\3731\242=\223K\377\273\302\326\206\274Q\327];\213\313\n<(\000A=Q|2\274\177\252\314;vf\376\273\345\020#\275{\254-\275\365h\333\274\\\'\031\274?*\233\274YV\320\273kx\251\275G_S<=U\203\275h\000^\275x\372\r\275f\320\027\275\247zl=\366\'\304<\3210S\275\216\007\346;o\200\205\2757q@\275Dn\222\274\335\200\265=\241\034\217\275\207\354\025=,\362h<\r69=^A\243<(LR\273y\347\351<Qbw=A\315\177\274\362=e=6b\233=\242\025 \275,\027\264\274\t\242\007<\203d\367:\177O+\275h\305\250=?\371`;z\222m:c\026K\274\231\311m\275\r\026\252\275Z\370\013\275\201B^\275l\223\301=\233Z\007<\3649\313\274\371\263\215\274\303\231e\275b\244\323=\270?[=L\233\332\2754\002c<\214\277\031\275V\335\352\274\000\325,\275\034\213\247<\033\2663\275,\353|\275,\014\216<\347\353\377<bH\261=on\302<s\254E\275\317\207:\275\345\256\347\274\343B\016<\204&\n\275\024f:\275\355\314\250=\347\004-\274\021\216\325</Y\226<\247FG<i\270\370\274\\0\300<eW=<\233\372\323\273\206qb\275\305r\023\275\236\344P;\276\230\"=\221\227;=\261K%\275}N\201\275!\'d\274g\3423\275M\303\207\274h;\235;\"T=\275\255\257\177<\036t\253\274\214\246\275\274\345t\263;\264\303J=2\014\357<H\2277=\226h\343\2743\352\314<\243\003>=\301\226\236=9A\315\275\357\214\304:v\262\320<\3179Q=$\237J=\005\214\'\275\206\316\217\2748=\203\275s\372j=\013\274\275<\214T <M\346\254<\304EZ\274sXW=d\361\314\274v\r\342\274\207\233\035=\364\206\356\275k\237$=a\252Q\275\243M|\274HB\306\274I&\210;\007\347w\275z\204\256\275)s\205\275\014\245\322\274\257i}<G\261R=\035}7\275\361\226R\275\017U\267=\344\3410\275\270\351\217<R\2638=\341j7\275\354\210>=\246\326\005\274b\217\314<l8%=\211x\005<^\3300\274.6\216\275\340}H\275F\263\207<\307\351\276=\002\001\\\275\204fS\275G\275\014\276O\204\354\273\270\244\376<ja\227<\257|\n\275\241\261_<\00352=\273\203I\275p\225\275=.\236\177\273q_\266=\374\224\010=\217\310a\275\334m\302\274\354JE\274\301ZB=\346/f\275\353H\311<\214\016\227:\223\010\244<\373\2269<\225\035\237\275\323\006\003;\265A\266\274\220\223L\275K\271\214=KQ\333<\264.9=\255\234\301\275\246l\210\273\350\026\220\274\232\"\212\275\322%z=\177a\025<\0014\266\275\213^\035<\031\262\023=\216O\272\275e\243\210\275]k\325<\035Fh\27540\\=\253\023\203\275\2728\014\2750u\260\272\303\020}\275\277\005\240\274\026`\232<\224\324\231=v\356\261=({\376\274^n\323\273]\323\n\274}\'\324<\306\221\232\275\331M\206<\303+\016;gbe=\325\222\"<\240\006\262;%\220\177=\372\216\325\273\205{\365<\027?\250:\211\344\366:L\370\251\274`8\277<\212\3153\275u\211]=\227\216\245\273\004\243\266\2739\272\223=U\013\213\275\214\250\330\273\253.\207\274A\006\023=6\257\357<\311\337\354=T\017,\275\022\221b\275#E\242\275>\tT;\333V\227\275\361\301\010==\350\202\273\277s\233=\367l\025\276\034R\3209f\007M=\320z\271\274|\310\320<hz\372;\263\251H\275\227\177\003\274I\024\036=v\257\213=\310\233\302<9\236_=\265/\265\273\014\r\247=*/\271\273\271\232\014;\272Z\034\275E\240\'\273o\357\034=\031\222\200\275MW\221\275\224\026\246\2734\361,=\036Uq\274\206\010\003=\240\036Y\275\013\037\313<\006\362B=\374\327t\273\333U\n=]\271\251\275\246e\261<<z\252\274h\250@\275g\330F\275\366\332\006=\230\355\007\2759\002\223\274q\374\304\273y\257E\275\035\332\001=\334\270q<\241[\324\273\302\305Z=\370\335\226\275\021\357q\274\344\035D=W\311\'\275~\315\310\273\210l\032\275\377\222\343<\004\177n=\262\321D<<_\336<?[\350<?\033/=\321N\231\274\034\263\301\275\270.Q=\374\2772<u\002J\275\007\310\362;?\353\250\274\033tb\275\002t\t\275zf\007\275\023y\234\274\342\274!<\2164\267\275Q\025\240;\215\232(=T\231 =\357o6\274w\316\377\274R\262\372;\244\211\256\272\023\214\231<\205\263\023=Cz\305<\232\205R:PD\260<\337\241\226<9\342\252<\200\210K\274\350\217P<\037X\244<3<h<\350gs\275\320R\345\275ZHS<P\027\030\275\227\3556=\247dy=\351\nM\275\352\036\365;\210S\246\274\346\224\371;H\244\005\275\357\334\210=\305\230!\275Z\216&\275\022\031 \274|\306.\274\317\331-=n\275\246<\2612\312\274\301\343\310<\227\322\'=\304\325/<\351\214\000\275\013(\236<\1774\035;&\200\320\275\334.\347\274-P\351\274\306\233\362<\240\345(=\231R\027\272\032\225\017\275jF\350\275m\rZ=\332\372\231\274\212\273;=\3625\223\274\252$\252\275\r&\312\274C\270\341<\350\202V\274\016\371T;\216J\300\273\2731\312<\235\221\005<\020z\"\275\230u\001\275\337/\301\275\027\336J\275\224\360\n\275y\n\316<\3307\006=\332\'\273;A\226\340\274*@\370\274\373\325\371;q\307\217\273\365\374k\275:U^<\201\313/\274\204\347\316<\304\276\200=\3470p\275D\361\274<\347K\315<8\310\272= \354&=\224\344\357\274j\327\213=u\227z\274\266\332D\274z\001\237<4\215\346\273=\346+\274J1>=ee,=\017\016o\275\207.D=\305.\202\273\316@\363\274_\356\311\273N\325\325\273\246\321y=`F;<\220\274*:+Zw\275[J\213\275\001\324+=\240\362\202\274\006\326\343;\005\377\226=\245\301`\274<\320\316<\035\016\335\274\274\032\007=\t\356\014\275\257\302\237\274|X\203\274\371^\274\275\216Yw<\004J\246=C\274G\275\227\204\010\273\n\026=\274\303\245\324<\002\222\033\2751\030\306<N\263\337\273\n\257O;\260\365\373\274\377\317+\275\246LG=\355\333\230<\035B\261<r\331\212\274%\236\314\274\020\201g=\212V\370;\246\305\034\275\200oi=.].=\n^\247;\252(\225<\203O\305\273\332\006\351\274\3761\307\274\3063\344\274\337\350\357\275lNH<\377\247+\275\275}\367\274\316g\210=\026\264\244;\236\204\236<g\263a\275\214\276\235\273Do\273\274\261\370&>cT\322\274\214%)=\341a/;\r\020\230=S\353\307\275\275\277/\274\342\325\376\272;8\021\275R\237\353\272\020l\030\275&\240\347<\215\314+\274\354\'\237;\224\304\267\274\357\t\250\272\374U\246< \326[\274\204\036\251\275\301\272\261<\r\024g<\346|\027\274 \262\210<\335O_\274\371\306G=\222\177\255\27476K\275\013\331\205\275y\375\223\275\371\360(<U\246\036\275+S\014\275\301\271\272\274\377\324?<\0022\342<E(@\274G9&\273\024\210\201\274\322\350g\274u\370\r\275\335\220(=\367>\n=]xo=x\356\004\275\345\227\224\275j\311\233\274=A\323\274S\212\246\274s\304=\274_\365/=\001w\206\274\266\312\205\2753\272*\274\235\007(\274\361\216\301\275\3361\306;\302\341\001=\353\322\210\275\326\311A<\300\013\n\275\361\037\006\275\333\312\017=\000\206^=!a\010\275\024i%;\000}\247\274\305\322\311\274%\372C\275}\245\235\274\221y\001>\333\323O\275\024t\025\275\005\324\004<\316\032\276=N\005l=5\021\022\275\304m\005>\252x8=H\211:\274Y\035\340:{\226K=\265sc\274\262\'\253<\263X\337<\367\247\3228\r\211\021=[\304\373\271E\372\003\275\234#\371<[\213\243<O{;=\361@2\275\002\3652=\316n\321\274\242\036\251=e\016\\=\325a\223<rsX\275\350\026\366\273\320\007\246\274\030\241*<\023\"\371\274\314(\231=\376\242\320= F\240=\002\330\263\273=1\205\274t_\377<&:\320=]\203j\274\352\342\204=au\024\274\344\370\203<%^);\221\373\242<+;\202\275\237\364\347<\334\2331\275\331\317\235<\314\265G=p9\355\274(\227M\274\020\3629<\023E\211\275g~\225\270\344\256\204<\246G/<P\255\317=F\264G=\354\n\036\275\261\305=\275\005[\327<3\321;=\265\220\327\274G\206P\275A\007!=\014g\220=\013\214\010=\352\210-=\263$\024=-\\K=\264T\266=\030\n\021\276\213\360\'=\352df\275!\224`\273\272\3103\275\201\322\250<\257q$\275_C\177=Wr\272\275\307y8\275\227\220\023\275\"=N\274\256\3338\274\022\\\010=S\312\014=dX\373<\225\013\027\275\'\013/\274\373\236\205\275\344\347\230\274\223\240P=%J\020\275\266/\260\274\273n\313\273\253\007\235\273\324x\233\274\260\263\231\274L\2300\275\013M\232\275eB\276<FN\266\275\332$\201<1\177T<\201KH\274~jB\274\365\216==\251O\241<=\021\203=B\364.\275\215(\375<\251;\251\275\236\204\303\274\211\300\024<\307\021\346;fT\237<\345\212O\274\3779\001\275\025\257\330\274\244\375\2149\016n\225;\263\252\007;\310\366N;X\225\215\275\024\277\354\274\351\267\024=\241\353%\275\217H\244<\271\326\026=K\264\213=y=t\272zb\264<a\213\206\274\205^\346\2737$-\274\255\355\224=\n\'\376\274\2162\340\2747\341N\275\2731\365\274\275\255\232=h\2770=<\226\204\273\233:\275\274/K\271;v\216N\274G\034L<\340\274\364\274\347\327\356<%\237\352\272\300\230~=C\270O<Gv\220<\321\214\254=\314kP<\213\006\351\273\373\306\003\275\303(.\275C\251\247<\303\263-=\021\241,;\342\243H=\0132\245<\313\217\277<1\025\373\270\366A\260\274\372\033\361:o\335\313=2E\023<y\234Y\275i\007\305:\204\313\302<`U\244;Z\273 \275/q\020\274\256E\205\275N\357\203;g\321Z;\236K\324<\3424\001=)\233\304<\300^i\274\203\2368\275H[\233\273\245\310\005\274\216B\025\275\345\326\304<\001H\213=t\360}\273\365\254\244<.,\247\275a\002y\272\216\213\230<@\255\205=;;\311=G\204\345\274\202\257\224=\014\324\326\274%N|\275]\336\033=\327}\003=\005\023\210\273G\334\215=\334\345\226\275\021\361\205=\241\201d\274.\233\000\275\026\021\017=\2555\224\274\374\217\033=I0\346\275\324\261,\2754!2=\271\336\203\274\321N\016\274|\330\361<=\317\021<l/\240<fM\326\274F\251\212=\0239\257\274a\'\013=c\200\235\275Gnd=\264*}\275\'g\221\274\246\205\221=\371\203\206\275W\250\356<\332s!=\031\366J\275\274\211`=:\034\202<\237\212\030\2753/R=\303\334j\275\371\024`<g\202\207\274l]P;{\027\225;\r\2160\275\n\272u=\010\310\272<$+\304=\357dc\274q\345\017\275\277\223\302\272\234\374x;\200?\240<\222\352\341\274\026\273\317;T\037\201\275\206h7\274\370{\003\275\344\027\221=Sl\372\274\21258=\023/k\275w{J<\027\030\310\275\031>\246<&\333\376\274\370\2329<`~\245\274;\232\305\275\361B\035\273\177I\343=\000l\034\274\034\327\347;\to\321<*l\241<\213aZ\275\"\313\242\274\331[\252\275\177\262v\275\352\337\212<^*S\275-\236N\275q`n=cr\343\274z\345E\2751\035B=\220\210M:w\024\204=\306\212\337;8\036!=\226@\203\274\354\027\236<\210<V\274\300G\000=\231.\367\274\336\357\024<\037\263\326\273\001\270\236\274\027\364-\274\212r\311\274y\026\026\275\313\266\346<\222\254\232\275\3049\306\274\032=M\275\253@\226\274\007\031\245\275\021\347E\275\303\016\005\275\301\254(<z1\302\275U\301\004\275\206\227\305=\2634\"\275\325J\360\274G=\031\275\034U0\275\276\207r<\333i\212=\335\314\350;\347\263{\275\016?\";\365\0229<\304c\272\274\312\262\233=\324\263\364<*L\367<\026G\206<>\253\266<z\252\2169%\267\217\274y\005\025=\272\253\313<nx%\275\233\306\000<>)\037<\371|\022\275\"f\324\274J\371\307;\267A\253\274\200m\233\274(\032-<^\346I\275\'\367\276\275\360\t\303<Ge\177\274G#\332<\022\310\336<\234j\366<(\260\010\275C\314\314\274\335\n\373\274+\023\204=\013Y\236\275\215\275\177\274\242\273\332<\276\273\235=`\033\343\274\"Q\362<\032k3=\356\225;\275\345m\230:\332\336A=\251\202\225<\351HD=@\326\005=\033\354S=%\234\303<\205\020\374<\034\020l\2747<\205=\370\347b\272*\352>\273\342\026\220=s5\326\275\3633\034=D`o\275\314\354n\274r$\372;\267\\\353\274\305U\332<h\227k\275\324^\310\274b\352\265\275\356O\237<\213\337w=\220w\020=S@\334\275\037\222==\005ZO<\375mi<\rq\317\274\343\335\325:\270\366_\274<r\026;\327\341\201\274\233\236F\275\013\276G<S\315\250\275{9\374\274\036\350\344\272n\257?=^8#<#oa\275\311)\235=\252\240\007=\367S\364;\376\034\256\274P\362\276\274\3630\366\274\3176\350<\306\014\355\274\202\032\223;\225\240\252\273\315\311\321\274\030\337L\275\013>E\275\326B\244<\332\200]\273\321\006O=\304|\332<Of\327\274\302\241\031=\246#\322;\037{g=4\3238\275\247\217\377<\337\334\002;~\022\320;\334\020\024=\030\250!\275\373\330\341=\263\231f\275\267\006\342\273T\306\340\274u\365\024=iP\237<\026\000F\275\364@y=\376\375V<\023\007\007=W*-=\264P\256=/\367\037<V\220\007\276\264\251M\275^S\244\274\376\341\021=\371\345\237:\375\310\250\275\0165><Mc\321\274\232d\274<nDN=\t\326<\274\216\003\345<)\023\321<G\016\236<hu\266\275\270]n\275\302\t\260=\307\007\202\274\032E\213<\275\005\357<c\326\302\274u\350\324<:{{\274g\324\014\276\364W\305<al\250\274w\320\215\274\371\254\220<\313<\351<\346\262\264\274\374\376#\273\347\004\032\275?]\301\2752\037$\274:\204m<e\332x\275\321\004D\275Qy\357<,\366\212\275\014\374\275<B\034\310\272P\235\227\273P\332\307=\034\223\374<\255\357#\275H\341$=\025\347S=\034\027/<h\340\253=.\017\201\273z\257p=_F\030=\260\303k\275\226{w=\354\001\352\275\373\3106\275\344\t@=\254\323\234<\256\2773\2755k\033\275\343\305#\275\002\231\277=\250%\256;\265z\031\274\312\251@\2751\226-=\211\244F<=\264\\<\237\372N\275\243Z\275=.\2415=\340\204\261=\246\'\206=\2359\351<\367V\322\274\2023\343\274Y\241?=\355\263*=\035$\332\273l\341\252\275~\213\375\274j\243Q\275\333u\273=\\\233\237\274\334\335\'\275\266=\240\2758\260#=U\335M<\020[\201=;\000S\273\236k\315<\002\nG=\215\344\212<\277{\242<\352|\241=ZMO\274\305T\377<zGS<!\200\226;)Q\000\273\005\334\300=\253\214\004<\244\365U\274\240;\245<x1\004\275q\230\023\275\361\241\211\275\253\021\206=\301\363i<\300\303W=\2477<\275\004\006]=\t\364\t=\347\022\335<\344\336\314<#T\304\274\224\335E;3\224\352\274W\004\033=\271\016@\275J\016b\275&\271\343;\037\227\320<\230 ^;\2203\203\275\264\305\324=\220\237\014=\361\333\235=\016e\252\273\232\306Z=\024\t\213=\3551k=\311i\201\273t\266\013\274Ti\222\275n\\\317<\214\306\213<\216\203\t\271\322\261\206<\033\027\320\274%\224\275\274N\017Z\274\367\023\027\275}G6\274\203\262\216\275\200\306#<\204\351\313=\007\234\271\273\254\237\t=T\333\270<\2164\263<\221\221\303;\0130\324=B\010\330=\247\244\006\2756{=\274t\260|\274\371\350b=u\257\252=\177?\310<\260cZ=\027\236\014=\257\311\0369\244m\344\274\016\215\221\275\016\327\274<\255\t\013<.\321\206<\276\320+=r\211c\273\316Y,=\320\226\340<\212\334\376\274\3450\317\275\271\371\027\274\371\324O=\231\323A=\243cR\274\007n\353<\270R\375<c\333\343\274\254\306.\2756\356\316\274Z\267\345\274W\363\033;R^\264=\231M\330<\351\316N\275^\254Q;\256\007\344\273V\017C=\233r\276;\363\261\306\274\270\345\213\273E\361\'=/j\253\275\276\036l\275\234\362\324\274W\213M<R\320\270<4,\251<\232\372\377;k\\\253=\272\320N=g\026\210<ew\215\274\300\227\331;\325\365\037\275}\260=\275\205\334\275<\254j\270\275\r\345\201\274@\027.\2756\335 \274\312P\212\274\014\024\227\274?-\316=\002\261\203\2750\267j=\31277\275\231#\024=\026\302\330;>\332\207<p\034\340<\337J\330<\345;)\275f\265\315\274\022b#\275\215\035!\275\277z\263\275\351\001D9\020\301\346<\025T\360<\331\330\031=Af{;\350\034\023\275\360\301\245\2751\265\001\275\377FX=\334\007\334<\305\247O\275\036~\232\274\206\317C\275\025\204\037;\314\010G=O\315\247\275O\320/\274\221X\306<\025\313\034\275\323\256\203\275\332\266\260;\312\216k=\211\206\215<\320\267n\275h\211!=\253:Y<+\t\032;s\220\265<\034SZ\274\026\033r=$<\250<cQx=\022\245\233\273\210\312\326\274\264\216K\275VD\330\275\307\270\002\272\257Z\352\273m\373\321<!\345\300<\030[o=|\361\210<\'\347\022\275\232|W=\260$*\275\253l\315\273\006\275?\275z.\337\274@.\224<\350\341\200=%_\001\275\333z0\275S=\215\273\021\337\032=,\004\313\275\325\205j<\351\224\020<\200Z\001\2752\311\002\274\212\'c<\230\352\t\275\226>\224\274Vd\374\274z\312\024=\0340\210=\224\346\275<]\256\353\274\004\272\001<T\254}\274\356\020\316\273{\273\230\2743\3630\275\006\361\033\275!\307\351\274\2427\"=4\344\213<\035\354\356\274o\004\007<A\t*<\343*_\273\026w\206\274}\276\363<Ww\301\273\255S,<c5\354\275|\312h=9Z\323<<\224`=\346\344\240\275\313\313\262\275\202`\201=\341\177#\275\304}%\275\024\206 \273W\3311<zQ\231\275\225\317a=q\246\237\274>\344[\275\256sf=\035\035\005=\377\357\252\273\\\311\252;=\356\254\275u\3503\274.\020\027\275\334\224\331\274\263R\237;\252\031\206=t71\275\251[\004=w\307\016\272\2240a=\004\004\275<\304\002\231\273\243\302|\274K\233\253\274D\303 =\343\371\251\275\373\210\003<\337#\000\2750\365\276\274c\004\233=\362\322u\274g\305S<\246\336\027=\3459\224=\247r\326=\335;\336\275\313\230\360\274o\021:=\037\271#\275k\320\031=H\255\340\275`Jq\275\374Ky<^\246@\275\314\246%\275\n\231\376;\276\372\270\274*5L\274Iu\021\275\336\nO=\254\303\013\275\330]\304\274\tC\277\273\220\304g\275wBc=\353(\240=\271,\033\275!\374\316<Y\2042<M\217\362\274ole=\001\017\311\274\240\353L;\222\306M\275\355\222\000=\326\357T=\207\002\301=mZ\374\273\r\030\315<Th7=k-\217<\226\253\340\274\204yg\274\247~e=\341\332\022=s\361,\275\036\336\304\273X\342\214\273\367\330\220\275v\031E\273\301\215\026\275\362\004R\274\347\257L=.+\204\275\215!\257<\265\206\306<\375\037I=\361\251\246=\260Zj<y\017\035<k\352\304:\036Z\030=\215\027\233=\267\213\003\2762\203A\274\305\234\377\272T\036\231<*X\303\274\023\342\346\274\320{\341\274\212\221\030\275B\177\005\275\2525\317\274\360E\2008\272\275P\274r\217\336<\374\370\377<\243X%\274yb\021<\330E\211\275\205\251\322\275\0202M=)\360\232\274.\261E\275\'\316\337\273lu\300\275\374\317@=p\341X<\335\"\000\275\252x\205\274(\010\004=\227+7=\304p\232\272\003WG<\200\000\205;\336RD\275\352\342e\273\227\236P\274\302\370N\273fdX=\254~\024;\277\nF\275\373\252\025=\032\207\312\272(3\036\2743V8\275\031\216U=\213\232\206\274\201\3037\2758\336#<z\037\241<\3020\027\274B\rw\274\226\005\245\275S\025e<\203\267\023\275\220\275\337\275\204\3640\275_-\021<\rQ\310\274e\235:\274\026a\334<\261\013\313=\026-\210=\346>\373\274\201\241\330<\230\301*\275+H%<_p\226<\230\201S\274\341\000%\275\220\275\204=\253a\246=Q\324\021=\2404\023\275\303\234a\274*\343\235\274\016\363+\275\273\227(<\260\370\206<\240\247S=\324^><\211\221p=\312}G=X\215\361\273.\265!\274aTB\275%\3626=d\263\271\2750{\001\275\242:\212\274\361T\253\275z\357 <C\'_=@\376$\275\330.\014\275\301\nN=h\216*\271\242\325\223<\333\031\376\274\346\034\253\274\265\255\206\275\313o(\273\357L\033=\357\324\257;j:\">3\311,\2724\271N=:`\347<\353\201>\275\234\342\021\275\3774A<J\361D\275\377\246Y;a\"\222\275\221_\000>&\256;=\374W\'\275\302\323\342<boG\2748\026y\275\221\332a\275\312\263\223\275\243s\314\272\004\235\314<h\017o\275\254h9\273\266T\363\274\004\224\023\275\360k?\274DRR<\260Z\264<\316\034B\275!\222\311<\222\001\036:g\270\256<\370\330\010=\373\362\357\274\234\037\323\274rg\017=\240\203\207\275\241[\372;\010\235\262<M\254\207\274A9\023\275\203\240g\275B\210j=8)\232=Ou.\275\315)\336<,\347\232\275[\210\205=\231\241X\275J\364\216\274\251\001\032=\235\211\235\274\215\210m\275\233\206\366<\021\320\302<\3275\247\274\342\343\236\273\327\323\352\273W\320\243\274_L\217;$P\275\275q\210-=\333\207\265=b\364\345;(\315r\274(\"`\2756^\033=1\002\260;K%\312<\361J4<\017\222\200\275\200\232g\275\027\001<<\212V\253\275\rt\243\274\343\nj<\rFI\275\211\241\255:s@\016=\311)K\2731\002\257<\334\0166\275\324\016\353\274Ct\"\275r\273\263\274\\F\200<\242\r\001\274\351\362\204\274\254O\354\274\350\232V=\245\235\235\274\252\217\026=\341\206K\274$I\014=\223\211[=-\341k\275r\305F\275*\372\230<\237\023\377\275\343\r\203\275\200 \313=\325\220\023\271\227\210\'\275\222\276\206=\n\326\255:n\021\034\275-\2163\275\200\243\327\275\346\313\003=\341ms=~]\004\273\270\271\017<\312\263~\2741\334\252\274;\261\216=P\223\243=^\030\321=\321b\357\275\235y\246\274\r\242&\275\365j\000=\031z\215<\2612\361<N\335\r=N<\216\274\025C\351\274<\321A\274\234\301>\274\3227\251=\212O\205\275\305\2778<\001U\201;YF\0239\334\241\344\274_X\000=1Hp\275\372wJ=k\203_\275\315\261f;\027\247\245=l\253E=\372\'\021\275\2032G\274\367\301-\274*\355\244\2741\031.=\234\222=\275\336\261t\274]\3417=6\374\360\275&;\031\274B\272\231\274d\317|\275\356\027\223=C\246\224\274L\\T\275\374 \340\274\240\310\260\273\036o\213<\014\304\r\275\005\002\221\274\016CZ=_\202\010<l\033\354\273d\242\307:}O\217\275\361\240\313;$\366Z=\334\325\333<t\302\363=&\373\311=6\312\212=1\251\234\274^\260\017\275D\203\334\274+%\246\275\315\037G;1\210\321=\377\301d<\376q\022\273\213h^=|\317\346\274?8\363\272\356\361\250;\026\006\220=\274\224\255;\271\2104\274\t%\221=\\\272l<\'U\217;@\203\030\275\264\365\230<\304\211\210<\337\320\235=\\\023\033=9\274?=c_V=\330\257U:\321Na=\224r\002=\302\213\233<gh\327\271\016\030\'\2713{\002\275\n\352\304\273\302t\013<\006\3241=\343R\232\274W\256\310:\275+\253:\355\372\272<_\022\341\273#. \274\256/\205<95\026\275qL\352:\243\372Z\274\003\337K<\357\234f=\307G\005\274\305\353\221\275\212\254Y\275\0220\007>\2660W\273@\225f=\226V\211:\216\014c=u\007\233=\230\3267\275\244\336*=\205\303\253;^\023\327<\307\244X=\002l\035\274\342\023g\274};Y=\333\036\010:$\323\226<v\314\331\274;\2308\273g\341\177<\031\034\271<\265\307\216\2748\207k\274\034\225\033\275\217\333\356\274\005\276\311<)\004e\274\233\354\374\274`\006/\275\262\242\212=\251\357\r\275\261D \275\241\311\313\274\014\217B\274\307\313\030\275\340c\036=\337\010M\274\025\245\326<\020m\255<i\233w\274\364j\016\274i\304\213\274\250\021#\275\014 l\275\267\312V\272.\351\312<\254J\254\273k\326\007=\217LK\275=\334\006\274\260sh<\311N\\\274.\263\211<S3\365<\371\362\246;\r\020\'=\267\303\230\274I\006\t=\206\nK\273\266af\275\301\340\210<d8n\274[:{=.\016\004\274\336\364\365\274Tf\'=\201B\316\273\033\010r\274 \213\026\275\260\035B\275\265\213L=\250\304\211<\326\033\265;\026\036P\275\233Mq=\234\355\202\273;\354\315\273\177\245\330:\201AN\275G\305\302=\204\263{\275\030|\366<\202\212\"<\021A\010\274B\223\"=\302<\373\274\365\006z\275\033_\001\275\254jS\275\3167\027=\020\tY\274\354}\211<!o\360\271\264\234\310<p\213/\273\014\232\231\275\251c\001=\200^Y\275+\010u<\237k\207\274+\241`\275\316)\242\275\006\036%=H&\235=r\325\332\274\215\355]=[R\212\275\333\315\340<\203\261\266\274\0372_<\377\221\265=\036\366\300<;^\"\275\022\225A\274\264\220\002=\245\215\235\275\256H,=\026\227Q<\315\301~=(<N\275v~\264\274\222\253\t\274\233\350\017=\311\375;\272\352#\300<\236\222\006\275\245\250[;\206\267>\274\311$)\2759\300\255<q\312\200\272s\217\221\275\367\352!=\325\253\242<\304A2\275\251\302\251\275s\245%\274\3421\306;\300\022\373<\010\253S\273de&\274\231\177\340\273\276\320o\275\251\220\343\274/\210W\275\"\020r\275\264\305T=A\315\300\273\031\3516=i\221\204\275\303\242\010\275D\205\313<v\335\247\275\nZO<\346/7\275}=\303=\370\231\242=\035f \273C\2323\275\240f\031=\375\356h=\354\234\221\275\337\1770;4\3709=.\032\312<\342Q%\274\275*\037<\336r\233<\343\227,\275,\302<\275\2703\324;\323S\030=ZqH\275\010J\246\274Us6<B\3418<]\354\202\274\006\312\032\274\016\204\301\273\214\300\335\274\017\\\237=\373\273\212<\002\237W<\031\206\027;\036N\246\275\273Oa=6-u\275\372\342Y<\232\2501\275\2624\240;\277\005\005\275\320{\037\274\350e\314<}\001\321<\340_M\275\277>\256\275\360\342\006\275\350\337A\275\340?5<\236\r_<\005\217b\2731\272\004=\010w\210=\256\031\375\273K\031\301;\366\007,=\201+e\274\224\303t<\235\262\220<\234\2277=%\302 \275\350.\224<\354\243\336\274\\@\006<\265\274.=\353\024Z<\006\224\202\275\2761\226\272s\377I\274\025u\225=g\214\314<\013\276\302\275H\256\245=\234\243\216=\255\275\005<\032]\230\275EcF=\014\027\217\274\332\346\340\274\027\326\224=w\237\303\274\263\267\025=!d\027=\337\363\313; \037\266\274y\336\022=\356\345\205=\216\333\036\274)\263z\275k\371V;\313\224g=&F\001\274Z\325\003<\273\373^=\226\231?=:\374)=?;I\274\330\016\177\274E\310\214\275\t\205]=\255V\320<\257\236\320\275\357O\236\273\347-\362<j\024\007\273k\324\323\270:\332J\275F\201\330<\256\t\036\274\313\232\276\274+\255\034=\304/\363\274cia\274>\214\361<\264\357\277\275\2373\234=\336\304\027;\2767\201\274\t\265:\274@\017\003\276\256;\033=\346#\367\273\202\331\177=\260aK\275\002\227\022>Q!\305<\362,\300<\362\327\344\274-@\221=+\000\265=\352\267\363\274\214~\250<6\351\244;\317\250\334\274\267\256+:\303;\023<\024\\\007=*\231\246=\324C\352=\234\3733<\302\320\210=\245<\245\272\311\253\256=\\\300\311;\233\210\335\274\372\276\223\275\210\244\300;+H\232\274\251e\332\274\214\314\336\275\323\306\232\274\211S\013=\360\022\262=\033\212\024\275\223S\266<B\375\025\275\261\240\201\275\221\241\331<\372\001\233<Z\035\034\275\255\n\036\273\265_\270\274\241Q\375;g\355\212\274|\n\225\274\2238\257=>\261m=\243\205\316\275\216\363\'\275\333\315\371<\244\313>:\333{4=\203X9\275\355E\303<\326%+<rY.<m\306\274\274\307@ =\342\t\302\275b\342\311\273\333\262|=B\315~\275>\352\260\274\326J\204=\025\203\241\274xQ\352<d]\215=6\027\224\274\332%\222\275\213\231\360\274~\320\026\275\035\224/\273\341G\216=%9t\274\252g\010\275\212\002N\275=\254b\275\226^\004\275_HB\275\267\301s\275&[v\273\307\203\221=J\\\201<voE=\213c\004=\214\257\315<2B*\275\2526\266=\311\t\017\275HA\236\273*\362/\275y\014\343<\244\257\233\275t\205g=\314\256\"=`\315\003\276: \024\275\2172\240;,1\000\274\005L7\275\366>\315<\2348\367<\217tS=\322\345\226\274\315\205\374<2\177\330\273\302\t\311\273\345\031\312\274\352\347-\274w\254\333\274>I\344\274[\366J;\271N\251\274\n;M=V\214\275\273\311\311\360=\265a\010=\317\264\214=Jc\244<o\211\256\275FW-\275\006\256\027\275m1?\275\320_\301\275T\350E\275\222\275r\275\260\276\206<\n\3145<9K\\<\013\276_\275\032`\205\274\315\177/=\306\007t\274B\213-\275c\200\037=\3029\020\274\353\r+\275E\372\357\274i\322\014=j\325\233\275\327C\204\273\226\213\272\273\233\3507=\231\326M<\350x%=\213K&=\260\321F\275\255\323\'\275\032\226!=U|\262\274\361\214-\275\271\330?=\241\323\312\274\r\314\247:P#K\274q\341#=\305\303A\275[\346\201\274\220\215f\275/>\207\273\036\213\374<9\207X=mj\270\275\316\377\177\275\355>\233\275OA\241\275u \254\275\247\213\376<V \226<.\201\341<\313L\035\275\240{c\275Jh\251\273\023\244\353<\216\240\213\2753R\343<HZI<\323\211\235;\035<\254=\346\346\330;\344\212b\275\236gz\272hm\223=\013\366\311<{\'J<\r\205s\2746\252\305=\003\217\210\275\033V\220\275\344\3266\275=\3609=\273\357\222\275\273p{=\301p6\274\372z\003\274\371\260!\274~u\255\273\007\241\213=+<\255<\334\353R\274\237\317\000=\233\323\277\275/\302\r\274\220I}<2\366(=3\226\254<Lj\244=\030\303\207=o\254\227<\245j9\275\224\205\351<\035\'\005\275\353\"\243=G\345\365<Pf\013=9\260=\275J\313\364\275\334T0=\3366\206=:\325\'\275\272\321\262\274}\312\347;\321\263\262\274T\275\034=\352\245?=-\252S=b\213\262\274u[!\274\261}\215=\200;\025\275]\231j\274\234V^\275\271\000\";\360\010\325<X\207\377\274\227\347\004=\354\300!\274\345\233\340<&\035\234=\300\331\017>\002\251I\275\206\235`<\344\232\025\275\327\367\225;1lF=\330\351\000=?\377\225=\377&\211\275\334)\030=\316P\226;\266\300w\275\245h4={\264\":6w^<l\023\311<\314\353B\275\353\234\313<\317\222\355\274S\022Z<T\035\214=\336}\233<\261\221e\274\024~e=p\021\204<\360w`=Ql\200\275\002\273B\275F\374;<|\350\226<\3523\013=\010\364;\275\253\030\246=\352\377\325<\366\375\"<\243,\214=\200\376\201\274~q4=\334\215\252\273\377\023\356\274\360\222;=]1\213=\207_\310\274\215\313\230\274\321\264?\275h}\026\275\177\311\'=B]\226=Q\332\266\275\204\272&=OP\266<\361z\010\275D\264H\275<ZU;\223\342\346\275\201\332\r=X\353\254=\214q\003\274)\242K<\252}7\275\324\340\216=8T\007=\241\360\257\274\313\303U=tK\334<\013\n\007:\377\201\352<\242\222e=\006$\234\274\233+N=i\254-=\357t\265\274\257\364\016<\241\0264\274\013\003\275\275\033\266\353<\341\2646=\256\0214\275\357i\373;\324\004_\275C+\261:\254\3343\274d,?\275C\321\025<\201T\304\274\340\343\237\275\323\202\217\275L\016\036=\254\2452\275.\036\272\273\305R\026\275\231H\333\274\263fF=\227E]\275%\304\307\273\206Jd=\247!R\275b\262\222<\260\245\261<\033\271\335;\257\373\356\275\035\231E<*u\000;\001\213F\275`\0145=\2142\203\275\020%\361\274\223\241\266<\331?0=\366Y\277\273\246\255)<\273\331x\274\340R\022\275\240\375\256\274\"\327\354\274\347d\305\273\247\333\034\275\242\224\225\275 \r\242=[\366\r\275\010\374\365\274\016=\021={\010\246=|\224=;\307\366\347\273\202w\331\274\341P\222:\302\034Z=jjN\275/\214 <~\002\035\275\030\204\003<l\353\005=\266\206\024\274\331\022\331=\256J\214\275t\021\251\275W\315\232:\350\330\221<X\221~\275\202\326P;\005\302\361<\275\0324<\304I\014\275`B8\273\037\341\250\271\362\2213\275\337\212\336<]\355\201\275HEq=eWC\275\314\202`;\"\345\250<\330\317F=\256X\353\2744\273\277=7\245\016\274M\t\341<\020z\345=\376\221\350<Wi\274\274wd\351\273\261n\'\274k\342\200\275H\327*<\254\373k\275\005\275\344\274\236\006S\275\003em=]%&\275\316m\251\274\354\311\266<sN\027\275\032\263`=\330\036\021<\326\226r\275\222N\237\274f\301n<)\276\266;\033\377m=\310\252,\275c\333-\275\311Y\371\275AY\322<EN\373\274\035\264m\274\235\301\327\272\033P\031=\322s\t=\310\265\364;\203\275\223\274\202\001\205<\235\362\020\275\374*\003=\240e\207\273rh\207\275\251\0245\275<\337\324<\005\375\213\275\211\315\305\2735\177V=\356}\352\274\2250,\274E\374==;\202\217\274\235\263\200<+\336\212=\274\272\014\274\203\007W\2753\373\005=\345\"\314\275#\316\213<\304`\224\275j8\302<\217\024\264=%\211\220=\3178\356<\336\266Q=a\333\007>\215\267\030\275\305I\\=\243\022\226\275\252\331\242\274\375\373\306\274\240\205\227\272\0234\365\273\256\336\320;\352$\304=kR\222;U\203\324\274^\220\235<K\2008=j=\037\275]\341<=Q\004\273\270+\316\026\273\2473\330\274\254=\020\274\334`\307<\366\221\253;+\037\367\274\203\004#\274\036\375\261\2752\274\336\274?\003\227=\372`\205=\274\227\353\273y\374\250=!\364!=5y7<\243\264\3439)\020&\275\363\026\251<\316\024p\275\213\250\350\273\330\020e\275\201G\345\274\"\320\355<\211\235\327\274 9\232\274\342\365\334\275\246\001$;\321Z\003=\273K\025\275\232\262@= B\266\274\354\\\035=\200\235\005\275\n\334\017;;\233\217\275`\036\261\275\331b\212;j5\177=\006\253\014\275@\374Q=\265\246\213\274V\342\315\274N\355\376<\364b+\275\032\315\262<\2210\210=\326S\236\274\227\215\333=\014e\320\274\022\003\351\274\031[<\274\223Yq=\037V\315<M\034\202<\315\t\234<\243\0161\273\275\3575\275\352\003\005\274=es;kB\253<\004<\222=\244\274\200=K\324.\275g\327\037\274|\"\234<L[\302<eS\220=z\343e<\356K\344<e\211\"\274\3477\230=\225;\202<VpW\274\206\035\214\273\001\3452\275\331\346\223=\207Lq\274m\031\344<\377\245\300\275F\205<=\333\3174<\344H\215;\315T\216<\007\203)=:\310\326=r1\365\274\350\240\'\273\347\020L=\301\202\355<jG\026=\240\276\262<\216\037s\275\273\310\230:$\224\312<<I\022=5X\321:\335\330\202\274qR\r=\356\035\331;\005\310\001\273\274\350\321\274+\245\356\274\365\030\247;!VJ\272;_\244\275\311\024\340<\3020v\275\237\\\222<5\357\266\273\310E\336\2735\341\267\273le\233=\016_\274\275Y\353\277<\037\247|=A\375+\274\354\257\205\275\033V\005\275\326+(<\364P\205\274\r\271\250\274Za_\275\000A\272<\324L\263<\265\230\264<&\2242=\2125\205=\364\034X=\243\005\017\275h\t\027\2741\023\213<G$>\275\0063\036\274\3353\301;#x\245<\t~T\274\351\233\277\274\365\341\213\272\217X\272<\205Q\344<3\356\304\274\350O8=\3578i\275(\005U\274\326\333a\273,\226s\274\360\221\355\274\320\231\260\273\007\221;92}6=\034n\334\272\240\2425\275Z\203\025\275\337\330)<^\370q\275\205\344x=\270\323\031=/]\'=\355\026\351<\374\300I\274\032\204\036\274\317\235\010=wLa=c\203\035=YP\232<\205\247U\275\3674\322\274\307#K=\177k\013\273K\251d=\203<\'\274Z\322]\275\032\265d=^\331\201<\322@\255=R\371\r\275\335\3105;!\255\300\271\227\2307\275\260o\201\275o/\203\275\324\177{=\245\034\273<\307\3629=A\n\226\274\245\006a\275J\362.\275\347\177\003\275?\373e\275\304K\351\274\336\004\231<Yg@\275\305\337\r<\031fM=\207|\231\274\326\253\243;\277\022\327<C\324\031;-\317\235<j\037\304<\334!\005\274\326\034\305<\265/\267:\300\233\004\275\237\372\271=\202\275:=\327#\300<\005\221\200;\205\272\327;sL\033=\005\211\266\275\r\343\020\275\026\207\330=(\260\352\272\233\371\2268\252o\021\275\317\342\346<\264\217\036\274\016dO\274\251\027L\275\237\313\207=\312\340\255<\345\360\334\274U\\\375=7\365\205\275\313\311Y<VQ\217\275\226v\230<0\325\364\273\205x\222=\315l\225\274\266A\366\274eD\'<j\307\025<\354\234\317<@f\333<\203<&\275f\237&=\317\343\337;\373\021\233\275\252E\006\275\020O\360\275\335l\r=@n!\274J_\216\275O\353\206=n\356\357<\215\234\335\274\317#+\274\346\230)\274\"1Y= \357\206\273Z\244\212\2749n\202<\001\r)={\276k=?)\342=\311\277\232<\361\001b\275>\307\017\275^\374\345;\013K\342<\207Oi=\323{\377\274\\D\326\274v\215\201<\325\340\222\275H\276\276\273\227.\266\274\345\010k\274\331J\207\275\3550\275;,\r3\275\301\347\202<\021\374\217=\254=}<MW\326:\000\007\276=\\\271\216\274\267d\330;\237$V\275@o\224\274\005k\231\274\321\250\2159\266/\014\276+\345N=\221\354P\2752@G\275M\361\027\275\357\334\322=\227\230d\274\312\032\361;\302\372\342<\334\262\341=pe\013\274\240\026\010\275T}\t=\017\232\231<\201\t4=-\364K\274-\340\354\2741\014\314;G\016n\274\253\211\242=\364\353\004<aF\363<\200{s\273Q\\\306<DCX=H\356\245\275j\'u<\024\037\304:k\256\006=\034XM<\332\352\001=\000\013\355\271\351p\251\274J\2067\274\326\312\037\275\202q\362\274+\375\345\274\\\264\005\2750\215Q<\256\n\020=\373\212V<p\222\013<\332\367\035=\301F\203\275\360R\207;\301\343T=#[\326<\364\213\256\273L\363g\274\234e0=\001a\245\274\223\334v=\214?\200=\204\263\251\274;Y\255\274\034\265&\275-\255\210=\177\333,\275\237\r\215<j\304\314=\n\311@\275\377\310\001>\316\023\220=S\213\376;\305\226\223\275\362\2679<\2313\364\274\2555\250\274\"Z6\274\2022n=-\274\301\275\241\t\2329\027MH=\201,\257<\311e\346\274\243\274\267\274\306\367\263=\254:\004\275-=\333\273^/\275={\261\002=\205Mp\275j\333\267<~(C\275\331\2350\275\303\354\267;\351\232\307\274\210\232\r\275\016K\020\273#\2577=!s\326<\002\350\006=\017f\365<\177\303\272\275\371\210d<[\330\324<ZX\207=\3557\177\275\227\361.\275\365\207\215\274DC\317;L\344#=\341Y\032\275\332\014\233\275a\314\361\274\t^\362=\021\264I=\311\362\r\275\242\005\274\2749\216(<&\340V\275\374Kf=`\306\025\274\354\366\264\274\027\023\232<\333\233\213\275\240\"\262=\316 *\273\005|j\272\234\252\213=\036.\260\272\360\270\325<\337\261;=\332*E9\275\362\272\275\216\252g=d\306\353\275\323\376\205=\033T\030\275:]\'=\241+\246\274G\n\310\273\004\036\251\274\333\216L\275\300\315\024\274z\204$=\241\317\200=\210\177\240\274\336+\003=I4y\274O\364\277;\244\316\272;\277&\335\274\277\315\244\274\323=\013\275j\261w\275\217\\\355<\217\314\342\274\3031n<1\n=:\237]2\275\022\345\214\274\303\363\013<\346g\215=\030\247\242<\373 \352\274mqY<\211\005\242\2748W\032<D\302\017\276=\331\000\275\301\231\245<\033\241V;Mu\003=8\303\001\275\003\274\203\275\301\276\200\2742\221\325\274g\254\023\274\004\251\006<y\002\251\274;\247c\274\217\240?=\013\356\237\275\231\371\263\274#\215\370<+\2411\275\247\014\357<\255_>\275 D\020\275V@\027\275\320\300M\271#\275V\274\362\220\346\275\216\023%\275\321V\226\275l\372\r=b\002\256\273\260\366\357\272\255\362\000<\301\240\217\274}\377\024\275\207\203m\273\206\025B=U\364v\275\263w\357\274b\303\344;5v4\275\237\261\335:<\325\341\2742W\217:\321G\020=?\305D=\204\001\002<\243\'\006\2753\367X\272\311Je<\357\352!<\003\022\247=\241\014\030;\306z\306\274\272\261\255=a\001g=8\016\210\275\210o}\275\342\202\325<6\366\361\274\216\226m=x\"\326\275 \023\243<\273\224\033\274e\006\217\2741f\232<[\201\255\274\324\305\\\274\322;\372<B\023\001\275\307{\027=Z\343\210\275\221\372\032=\233F\307<\3241\201\274\227\331\207\273K\237\356\274}\301\217<\230\006\336<\301)\336<L\253\366<\321\367\326\274D\217\\=o\233\320\274\000an=y\242\347\272\327\367;\275V\231\343<\347\232K\273\233\3232\275@0\021=\340#\215\274\317\362G\275\230\032\232\274cU\325\275\232l\203=\227\371\030\275l\r\030\275\354\370\002\275\255\241\013<\303Q6\275Y\341S<AZ3=$\227\033=z\361U<b\250\250=\275\322\223= 1o=\023<\324\2725\376\255<\246\350\270\273\370X\341\274\2637\032\275\370\204\246;\221\032\207\272H*0\275k\223S\275\000:\222<\205R\361<\037\021\234\274\260B\007;)7\236<O\272[=\335\202\242\272\206\307\222<\326\370\203\274\241>\224\274\320\231\370;\276=\206\2751@\227=\245\274l<\313\347n\274J\201\257\274[\2578\275f\310|;\226\003\343<\275\251\370\274\246n\276\275t\371\221;g<R=AL\224\274\260m\005\275\275$\272=@\253\203;\247$\364<.\350K\275\264\242j\275\343J\241\274\234z\327\274\217\234\256\273\302\261\242<v\302;\275\013\325\276\274\270\224r\274\271\271O=l^\030\275\rV\313<\016\225Q\2741\372\236\273\275<\350\273\240\206$\2757\335y\274\206\334F\273\222\331\017\275M\233\205\2750\303\007=F\363\004=\235\002\222:\206\217f=\352\216\204=H\035<\275\203\002\201<\225P\037=V\002\306\275\364\372a=A\006g\275\234\3664;\333\225\205=y\017n=\375\2743\275B< <\330\240^\274}m\210\274\023\226\021;\254\371_;\027,\351;Ar\236=P\364\255<9nE=\264\013\'=\233\022\210\275\310m\245<\375\372\210=\214\007\206\275L\224\r\276 \244\272<\227\276\205\275\302\230\266\274&\320\222\275*\313V\275\001M\350\273{\251)\275\300\021o<2\020p\275\002\275\031\274\031\3006\275\252*l<=J\325<\210#\031\275:4\235\272\256\205\233\275\205\013\204;Q\025\265<\014\365\206<\356\004>;\267w\237\275\306Q\331<\024_\000\275{\010\300\275\nB\343<\306\027\273\274\267\306\266\275\020\212a;$z4\275o3%=\002Va=\\\275\325\275I!\000=u2-\2753\026\375;\320n\241<\377x3\2745\212\375\274c\264[=\300|\240\274\353\223\252<\335:\256\273~\222\025\275\223n\266\274\323>p\2756\265\356<\364k\005\275\322\376\017=\364\345f\275I\201\242\2751EC=\203G\236\274k\205\342\272\016o\341=\305\357\353<\017\230C=\034\221>=\006\274\025\275e\347=\273) u=(\214\251\274\270e7\275\265\300I\2746{\355\274\271D\214\275\235\337D=Xn5=\377\272\205\273e\351\336=\037\247D=\336\325z\275!\243\367;\021}\220\275\001\206D=\333\206\222=-VF\275\3529i=\3721\304\274>\344\360<\014<\246=y\371>\275\003\221\374;2z\210\274\216\271`=X\226\352<\345\227\036=\206[-\275&N\331<\025\374\241\275@Q\001<\371R\336<\326S1\275\214\273\236=\3120N=\027|\235=\365\370-\275\270#\202=R\361\352\274(\322\\;\311\265\311<9\000\361\274\311h\002\275\033\205H=gu!\275nM\273<|\313\372\27323\201= \217&=\351\250\244<\200\327\225=\211ae\275\227ce=\343\322\252\274]\n\265\274\227dp\274\'\307\250<\246\003\207\274\335\363\350;\0369\253=\303\315\314=Y\212\207\274g\245A=7L\321<a7\236\275{\342U=F@\303<\256\340\023\275\206c\254\274\314\221\212\274Q\362t<\305\340\216\275\014\2769=\342#\253;\312\217\n\274|\030\356\274\203\006\265\275\302\304\352\274\274\340g\275\376km<\242\330/=\234#\347=\374\276\361;#\300;=\330\364\234\274\017 \016\274\200\003!<+\004L\273U\223\306\274\315\211\330\274\345p\244\274\230\367\321\274}\2519<T\332\254<\315a:\275)\277%\274\014a\023=q\034\037=\351\"\253\274\024\344_=}\316\r=|\210\001\275\276\224u=\017\020\020\274\243\365O\274\'\\\221\275\206\330\007\273O\242E;j\331Q\275%\246(=]\366\201\275\370i\\\275\250r\252<\213\210^<\032P\211<\226\t\321<\214\321\212;6\303\220\2720\203\332=\304\340R\275G\223\266<G\342R\275\203\217\226<XbV\275h\037G\275\301\014\032=XU\024\275\332.\241<\240\365\342\272:Q\035<\311g\325=\033\365\210<F\266\017\275.\272<=\205\200,<F3\253=e`\206\273d\300\332\274\257\014b={6\224=F\3723=\327\326\025\275V(\r\275P\222\232\275%\362T=\023\257J\275\266Q\200\275\002\226\214<K\364\301\274\r\350\216\275\236\350\212\274\037t\232=\221:\271=\025L\t\275\247\024\024=.\275r\273\022\250X=/\363\020\2767~Q=\345\366\203=\272\240J\273f\236)=A\177\226=\271h\233\275\263\002\243\275\022\357k=\337\2308\275\310\263\210<\231J\211=\312C\244\275\3161\330<\375]\346\274Su\241\274\252Z\037\275\375\372o\275\005\365\275=F\361\027=b\004\222\274\240\237\345\274\201gt<Gt\352\274\274\376\244<\242T\232\273Jw =f\314\016\275\2506n<f\265\251\274\2359^=W\316\356\273\373\372\255<\376\213\326<\326\240\010=\277E\272\274\273\206\007\275-\307\030<\031\345\264\275\024\325\'\273\030\234i=n\025\225=#\224\031\275f3\235\275\223T\322<Hp\330;\211{\000=\263\322\r\274\332\360\222\274\235\377\024\274\323\213\020=^\334\234\275L\302\375;\353\301\023=:\240Y;\320\337\257<u\216\377;I\023\014<\217\226\001\275\224\371u\275\257\032\317\275K\230j<\303\335\251=;\rY=\320\341)=\334\2777\2757\'\321;\230]\360\274\244pX\274\311\367\256<\361\215\300<\335\256\233\273\241ZY=\336j\365\274\307\346\372\272[y\272\274\376\270\265\273\202\342<=\245\262\311:{\267\030\274\365{\227\275^\251?=r]I\275\031\010F\275w\241\326\275\r\371\r\274\026\002\217=>\223c<\024Dr\2755\343+\275\026\341\210=\352\233\211<\205\356\211=\207\361N\275\354E\342\274RW\275<!\024{;\007$\375<I\375g=\262\214\202;:@\353\274x2\026=,\010\003\275g\350\020\274\376\336\311\273\241U\005:\305\377\007=\275\350\t:G\314\232<\"\363\201=j=\204\274\227y\224<)$\006=\353|\337<\302\342\014\275\203@\'\275Y\276\222=\243\270D\274P\355\206<I\002\206=Z\t\242\275\177\347\215\275\247\337\273=\007\2630=g\360 \275\247\216\013\275q\ne\275\321W!=\003\327<\275\001\207\321\274c\341\201<\002\267b\274\313lS=\302\361\"\275b\214\010\275\275W\362\274\370\'\215\274Z\034\300\274\352\256\264\275\372\026\032\273\360\265\251\274\213G\003=\357\216\223\274\276\005p\275\261\330o=\014Q\214\2757j\000\275QU\031<\231\360*\274\003\016\326:e&\232=\306\375\271=0\230\202<\347\343\240=,S\252<\264)\340\274\253{H\274\0329/<\025\r\207=\374\242\n=\227\225\014=|\003\023=\205\337\261<o\262\215\275TOh=W,\203\275\235\354\320\274 \214@\275\00694=\215\366D\275\\\004\014\275w\312+<\306\014\212=\007\036\356<\316\216\351\275\235u\222=]\002\206=\307\234\224<\323\306\242=\226\025\036=\301y\261<\037k\006\275(\314\203\2745\227\244<\373\367\177\275\360\267a\275\307\322\025<\347\021\345\273\354\275\227\274\221\366\023\274\0318R;;\007\205\275\303.\215\274\303f\213\275\t\231F\275\323J\301\273u\376\225\271\347\331h<)\347A\275\267Rv\275\357\014\210\273\261\205\013\275\344\206\317\274\177\347\225;\327\257\263\274\214\274\026\273H\033e=%\206D=T\341*=\366o\347\273\336\354\307\2731pT=\n\222\355\274\021\225\322\273\367\313\014=\316\010[\275\207\354x=\271\261\003=G9\231<\033\267@\275\005\020\231<_P\342\273\244\350\003=\230\341\253\274\\S\224=\346a\020=&\335,\274\025s\205\272Coh=s\242!=vS\202\273\267\031\033=\2051C:\375}\000\275\370/\n\275\324\374\266;\244B5=\207\005\262\275s\256\245<j\200w=\"\221\"\275\366@x=\377\3507\273t\026\366<\035\025f\273\202\357\260<l\366H=\n\246%=%\201>=\321\000\330\274\252\303\202\275v\241V\275\327\014\320\274\223z\245\274g\275\031<\335m\016\275\201\313\024\275\013\253\002=\346\346\313\274\365\325\230<\204+\354\2748\002|=\215s\317<\347\nA=o\326\027=\2100Y\275\366\244U=\3741\271<e\342h;\354\360h\275(\2005\273R\203J\275d\223\316<\2540\036:\244\373=\275\244\234?=A\361\312:\326\367\336\274\246\366%\275\363\351\250<\343x\217\274&\256\025\275P\267\314\274\020\200\234<\177j\337=\nt\014=\030u\205\275p\2775\274\310\333\200\273?E\260\275N\246)<\371\3453\275\250yL=\366\207\204\274.y\r\275{\312\016=;\306\247<H\033o\273\343\027W=Y\033\352\274\302w\303\274L\313\342<\024\000\306<lLd\2757\347,\275X\034U</\200\022=|\251\3549\332e\256=:\337H\275\273=\250:S\337\264<u\032\260<,\020R;\326\006\245\275\332\233\232\275\264m*\275\026J\010\274q\340\372\274z\374\232\275d\277\212=\366\377m\275+\036\360<t\250_=]\371\242\275\177D=\274\250\0059=\016\346\323\272`A\337\274\344D\314\2745\247\200\274z\2635\274\302\2659:\264L\004\275\376\371\250<\004;~\275\245\220\037\275\024W\327<\037\315.<\256\r\330\273c}\375;\227i\240=\216\227:\275\367\213\247\274\245H\204=F\324\\\275\305\323k\2747U\361\274\326\360\245\274\250\317 \275khB\274\277\331\262=\224\274y<GO\367\274\276\323\252\275[\375\316\274\320\372G\275\376\315\002\275\264\3104=\231\350\213=\350\207V=\314#\267=\341q9=\270\300\206=\201\341\275\275\260\367\317\274\372\331m=\341\274s=R\016T<\272p$=\342U|=bY\273\275\315\006L<\220K\237=\324 B\273Q\332\235<l=\r<\351\2305\274\333\354/\275\257\220\375<\"\211R\2732[\263;aDA=\226\273\264\274\320\031+=^\220\233\275\364\2443\275-O\304<\230\237\312<\271\005&=8\276\245;\250\230><\362\275h<L:N=\352\304\223<\270\322>\274\"\205\275\273w|l\275\375\277\357\273KDj\275AN\360\274>\230T<\365Q\344<\237\000\315<\326$s\275\365\223\321\274\032\206q\275\262\257\272\274\326S.=D~@\275\316\377\231=Ya\006\275\024`\312<\010\202\003\275B\350\317\273\366\345\324\274\245\374\252\275\337Z1\275&,\222\274\335\231\373\274\324\036\203=\254`P<\352\234\223<,\234\257\275F\203\222\275\256\276\247;v\226v=\264\363\273\275W\353\262\274J\245%\275]\353\361\274\251$\200\275/HT=\005\251&\275\236M\356<\324\204\365<\\\257\034=\022w\202\275\240Z\002:\211/S\275\215\237\020\273h\r\177\275\365*\202<\330LM\275\031(\034=\005k\200\274\016\223\351=\317}0=gi4<\311\305\322;\346\005\247=\212\361\200;N\005f\275Z\007\034\275\333?\227\275$\245\222=*\t\353\273\371\020\212=*\264w:\376\312\243<7\010s=d\267Z\275\235\354\314\274p0s;\260Z\203\2737\223\215\274c\301>\275\371^\201\274\367\352\314\272\030\206!\2748\017\215\275Z\304\276=\241\247\321\2744\223\370\273?\376\366<\031\310F\274#\260+=\232\303\302\274\256k\032<\271Q\332\274\34350\275\345e;\274\256]\365\274;*\342\274>z\025;\347\n\205<\026\332\n\275\334f\013\275\201\r`\274i\357?\275Ovz\274\027aX=\031oX<\031\361r<%\264\307\274\257n\300=\010\363!\271\0149o=\203U\252=\265\033\370<\035\2059;w\267\002\275\364I(\273\034\375H\275-<\320<X\315\345<\370\003\217\274bN\000=\225-g=\270\312\032=\331\260\2119\004\264\222<\346\0064=\237X\327\272\177\231#\274\331f)\272\230\275W<\246#\303\274\021\243\255\274\202\302d\2754{\362<\343v\345\275\206\234I\275\315\261\344\274tp,\274\351\220\361\274*Q\367<\352\327\376;h;%\275\346\360\014\275\231\264h\275\274\021\002>\375B\3619\'\372\251=?\000\221\274\327\214\037\275\231$:<\260\327\001\274\025\271\337\273\006C\251<[\232\331\274\203O\225\274\200\006\020\274%\373\275\275\004b\213;+:\247\275H8\335\273]\303\033=$c\204=B\n\203=\302c\200\275Uj9<\361S\227\274g\353\223\274~\023\327\274\316\2059\275L\320\025=P\310\302\2741\254\344<P\\\313\273<\004N\273\337-\226<\334\324v\275$.\212=\214\300J=\304\226k<\026\217\204\274\031\024\270=\225\177d\275@\314\252\2742\342i=c\262\310\274\210l\357:\246Q\341<t\214\035=U\255_;\023\342x\275\254\317\221\274\351ux\275\345h:=^\353\371<\300\222t\274V\003\"\273\203\327\321=o.Y\275\334\204:\275G\003\341\275Q\032{=\273\375\036\275\225[\276\273M\244\250<\327=\016\275\2226\304\275h\2212=\364\360\023=\334[\201\275\026y\244<\211\013\274\274,\231\232=k\335\304:\260%\241\274n\240>\274p\304\031=g\275\205\275\346Q\250<b\371\330;\235\356q\275\321\273\236<,\220H\274m\000D\275]\0328<\231\004\014\274_\263\220\2755\343\270=\352Y\230<?\201\270<\034\314J<\005+v=\326G\237;\222[z\274\223Y\003<\271\270\367\274\036\373Z=\341\220\"\274\260\246b\274\006\264;\274W}\254<3\340\236\274\005\216\265\274T\204\t\273\025\376\226\274\265\221g=S\001$<\217\2645\275\340\302\206=\013W{\275$r@\275m\261\331<\267s9\275\331H[\275\006\232\371:}\265\234\275T[\210\274\271Z\234\275!\216\266\273\337\246&=\t\016\370\274\373f\035=\251\352A\275\310\301c\275\235\rB;\363\331\206;\223+\217<S\016\355<\215}\000=\241\334~<J\256_\273I<(\275\313\341\316=\217\213\006\274\314\207\223<B\020\322<\235+\221\275|!9\273s\344\230=\003\217\331\274$=\325<f\341\340\2748\315~\274\231\213r\273$o\027;\366\314\010=\231\332\347<h\035\265=Gk\256\274\244w\205=\345\355\251\275o\357\227<\221Q1\275\'\360?<\346\331G\275\tn\016<\333\267\351<\367\2550\275M\314\037\273\210L\025\275\345KK={PK=@+\236\275\033\303\312\2740\273\364\274\005\257,=q\270V=\024\t\234;\237\242\311\273Q\2675=\271\3067=.L\220:H\022\351\274\244ro\275\322<8\275\206\273\341<\321,\341\274\245H1;z\342\254<\231\203:\275a\264\360\273\367\022\201\274\005\344\341<\302+5=\276\035G=\"e\254<Js0=J\321\000\275#\364p\275z9\034<Z9u=\037\247e=_\313o;.*\244=\270\025\262\275\223m\257=\211a\277=A\n0<K\237\256\273\016q\333<\374\223k\275\3424\324\274Q\341\310\273|\023\320<\341s\372\275\023\001\254=?/\263\275\220F\035\275`A\340\274\311\315i\275\r\000]<bmu\275\276\374\010\275\030\364\240\275\301\037\035=\031\213\000\275\266Qa\274yuf\275_\2309\273\351+\223;t\334(=R\266\313\275\001\272\327\274\365EE=e\0033=I7|\275\031\326\304<\2419\3309\356\257\270\274\016^\363\274\333\262\262<\"Eq=\216\361\346<5\207)=\225\310\263=\031\254\004\275\274\231\333=\210\2600\2759\021\200\274N\301\017=\206\362\346<\'\220\256\274\335\r\026<=x\235\274\304L\330\275\214\324\033=\207\037\247<\326\344\003=\201}X\275b\024B\275\253\215\233\2755\363\006\275\304\232\213\275\032\335\266\274{\234\010\275\027\321\201=/\327\032\275VF\026;\310\031\315<3\216\361\274\205\036x=[\0264=\223z\352<\272\367\363\273W\204\2538\0365E=\326\256<\274cQ\\=\t\314 \275~\211c\274\267E\251=Y\034\"\275\013\257\233\275\377\326\215=\311\350\205\273k4\214\275\220S\022=\355\271\321<f\365E<p\321\005\275O~\366<do\202\275\263\256\213\275d\326_\274\002Q$=\271\200\243\275\301\357\375<\323\177\217<\334\344C;\005\243\217=u\3517\273\273\230\026=\016\226\007=\314:\223=\333\226\021=\327\347\242\274\025\3379\274\005:\223\273\204\333\271<\370\360\210=\357\245\246;\236I\357\273\323\324\204\274\312Mf\275\344\0319\275\233\360\204\273\354/\t\275l\312\r=\223?D\275\211\027}:\t\263 \275\220I\024=\210\352\213<\316\201\221\274\376\342\"<\212Vh=\262&t\275\240\376\353\273\'\300 =\246F\310\274l\334\020<\215\023b\275[C\000<!\017\311=\353\306\004<X\201\031\275\031\325y=p,\034<\312\267\033=*\317\221\275k\274\004=A\363\357\274\335\337\354<\274\010\274\274\361\215\200\273\233\210J=\324\302\352\274J\367\000\275\340xt\275\347.\001=\247.\233\275\355x\206=iI\037<n\340d;-\233\343\274\007M#<\247i\346<7\357\222\274i\343\001<\364&\021\273\347\310\036\275\261\323\331=!\225\021;L\237\261=q\037\307=Dd)=\305\026e;\360\304\332<\347\302\254:\2435\210\275\2612\";\237\213\300\275=\t\236\273\021\226\202\272\242\342h\275\313\274\365=\035\357\346:a\253h\275\264d\365<JOB=\204[D\275;\030*\275\267\246\0228Y\016s<\333\026\357\274\007\215k=\204.\256=\305=.=\261\317\035\275\325\033>\272\373\253\232\275\360i\002=\237\026\272<\245@\216<\367\367\243\275z%n\275\264X\203<\335\206\335<t\232\231;\363\177\250<x\2112<*\331\364\273\277\337\031\275aR\035=\360{\240=mpC\274\226\014\272\274\271\314\337<\334\336\331=\300\336R\275h\204\306;_\203\216\275.\205\206=u\312\363\274\230Q\t\275\202\216\013=\336S]\275b\307\032=\230\200\020\275Y\216\341=\006c\033=\322R\212<$1l\274\006\002\375\274]*\347\274\002\347\255<\345h%\274A\221\327\274\317\276\231\275\240\311\322;\211\236,\275Mr\330\275\342\322\346<\243`\245<\201\261]=o\323\220<\374(s\274<1T=r*+<d3\221\275{FE\275\237\316\376\2751\254\013=\377K,\275|\033\241<\321\010\371<\216\255Y=\243]\354<\324\302y\274\246u\260\274\027\330W<\232\215\301;\034\212\376\274\000\243\007;\203\320\344\273\316+\360;4k\374\273\006\255\317=@V\020\275q\266\261\273\242<&\273\2421\326\274\364:\002\275yS\211\275\275q\371\272\266-\341\270\201\331Q=\346\264\231=_C\207\275G\250\233<B{\310\274c\232n\274\366zt=\2603U\274\273a\374\274k\222\022=\223\374\220\273\364\010\307\273c\352Z\275g+\004\275_\207\211<\322\256\261\274\003\303s=\250AB=\370\372\204=!\3763\272k&\361\274\031U\244=h\026K<\316\257\365<8\005B=\225\307\252:\263\007\234;\225\317j\274\317\224\246\274\353\372\'=f\272\014:\364F+=\302\376+=\210`\254<\023x\317<\343\262\205\275\271-\312<[\270\024\274i\212w<+\253\014=:f\273<l\307`\274\036\350\336\273\202\306i\274\025\205!\275\tpv\273\221Z\023=9\005\203:K\022v<\"\263 =.\312\235=P\373*\275l\254\303\274\256h\024=b\'#\275<.\276<\322\304\205\2751xV=\226\003|=\242\224<\274\344\337/\275\327\002\352<C\365\n=\253\023v;\3603P=e\375)\275\323\252\371:\024\017r\274\342\270\212<E \254\275 w\306\274\362L\341<\312\r\210\2757H\310\275\212_v<\272k(=+\260`\275\222\367[=\000\270\214<v\263L\2745\222\332:\365\213\013=\320\206\240;`\032\223<\242\313\350<\334rG=\306\265$\274\t\212\005<\377\'\261\274\360\017\241=\254e\236=\213\014\002\275\303\023\032\274\'\352E<\317\335\246=EG\201\274]\217\215\275\340\3630=v\023\322\274\210\002%\273\253&P\274\264\306\271\273j#U<[\2775\274\257\304\246<n_4\275Y:3\275\347\254r\274$jn\275\243r\230<\275\237\307\274\262\232U\275\002{7\274\3139\013\275\265\203(;\2746\245=p\215\207=YC\353<\262\221\217=\316\222\204=\271n(\275i\331\260<\226<l\275\036l]\275\024WP\274:\221>=\213\230G\274\331\354\276<G\266\246\275Z\365\243\275\347\355w=\032\365,=\365\307\034\275o\226~=l\222[=\237\250P\275\022-\214<T\376l=\304\261[\274\371\235\236=\206\357\275;\000\007\235<X\007\301<\320\372%\275g\205\331;\337\321\376;\002\261\245\274\202\004W\2756px\275\233\252\017\274}\312\204\275Hr*<\024\276\206=\310\005\016\275J\026\214=\033\236O=\362\266\326\274\006\325E<\356\310f\275!\244\020=yC0\275\210\240\374:\255M\321<6\231@=\305\330\t=\3553\020>\373\213\352<\253\034\r\275\352\340\364<\211\005q\275Y\025\223;\351\301\017=\342\333\224\275\204\311\035<\244\232l;\035?\221:\222s \274p^\324\275>\360\267<q\344|=\005fq\274\025\253\212\274\361\356l\275W\3524;\021\274\256<o(\354<\343\364\200\274\001\3076=\304\324\'\275\322\316\034\275\201\3061\275{tm\275\001\367}=\265\025\026\275\\z\024\275G\007\205;[\024\223<\260\226\336\274Y\177\212\275\027\263N\275\277\243\306=\310Lu=r8&\273\235\023\357<\237\271z=;\371\312<^\035\034=\304\033~=\243|\372<\261\240\017\274\024\235\256<\275\227X=\234an\275\002r\226=\254\263G\275\371\325i=c}\367:\033\256\247=2\344\303\275b\367\251=\347\2061\273\346\370\226\275\n\355T=s\000\305\274\366y\315;\232\024\317<\r\235*=\304+\";\243\370\027=t\3221\273\320\026\325\274l\034\277\273\320b\376\275?\231\317\274\r9\256\274\024\270C\275\366\271\200\275Tt\363<;\247\010=S\332>\274\"\350>=h\275M\2755me<\025\tH\273\215\213L=\301\036\357\274\320\347>;\216@5=\230\001\306\274\231 D\275\'p\262=\216[C=\024\307/\274\"\237q\274\332\252\0179\010\323\307\274\210\211x=\313zv\275\263\241\307\275\255\014\014;!\273E\275\360\326\210\275\274\377o\273\315\320C\273%+\201=\350\365X<D\022-9Ae&\275\206\357\210=B\324\n\276\330{j\274\374\3667\274\301\2305\275\247\005\\\275\232\331\216<\202e\200=\342h\027=\032\214\023\275\311\211\270:\311\030O\275#\274\027\274\307!\337=\177yW;\206B\327<A\334\272=\336\177\323<b:\340=\343\t\217<\311\272\204\274J\3755<V_\017<\252&u\274\275\025\225;\326\303\005<6\336\270;\023V\253\275R\304><\304\340Z\274\353\266-=\362\275\340<\272\365\376\274Kx\305<g\373\355\274\334\030{\275\345\235*\275\373\223\352\274N\334\322<\375\000\027<\214\242\255;\006\263#=\236v6\275\'\307\233=C\r\237\275\236\230\365\273\271\362\021<oh\267\273\301\267\276\274\223e\211=@XZ<\202P\276<\033\344!\275s\273\224;\000\332\325\274\250\354\242=\363\322\006=O\003\335\273\371\371\223=\277^\272\273S\241\216\275\022\020O\275\023D\271\274\255S\250<\254\301\321\274\352\005\275<d\335^\274\247A\345;2b\361\273\247\215z\272\027\356\005\275\301\376\231\275,\261\376<\325\344 =\324\nA\275~\3500=h\371\220;\271\222\206<%\246M=\351\211\001\275h\244\247:$\3607\275Z\260P\275\331\255W\271\230\304%=]i\025=\374\211\350\272\226~>\275\345d,\275z1\215;)\257\242\275\227\331\222<16\265\274Fa9=\035\335\343<\264=\202\273\270\350&<\312\320\005\275d]\002=\335\243\223=\234\342\017=\177o\215;S\357w<T\214T=\235%<\273\n\022!=\003\310\025=\367\333\327<L\267Q\275\031\303\227\2750\263\004\273 !\321\274\211\207n=\027\246+<\\\374\263=;@=\2749|\033\274\333w\000\275\257i\020\275\026\366\341\273E\274\210;\342\366\035=\002cf\275#7B<{t\300<\014{\305=\227\253\224\275\023X!\273\0130\275\275PzL=\255u\271;\373o\231\274\006*\006<,\204S\273n\036\234\274\275P\203=xa\217\274G\374\241\274\2034\265\274\332\373/\275\360Y\276;\337\t&=_-\231\274o\342\254<6d\033=\254*\361;D2$=\362\324\177<\364hH\275v_\004=\304\024\260=\223=G\275\341\325D=|\333\321<\311}@<!b~\275Z\360\241\274\240J\007\276;\024\201\273\372\225\252\272\344\010\224\275\322\227q\275\264\222\220=\313\322N=\024\300\342<\351\300`\274\010\262.=\346[\250\275\027\275\351;\326\363\366:B\207@=\203T\226\275\230x =Z\216\317;E/`\275m{\262\274\256#\032;\017\303\244=_\014S<D\336\315=P\356L=0\010\323=\002j\343\274]DE\275#XT\275&*+\275\373|\367<\274F\177;O\261\025=\314\344\214<t\230\276\273\252/L\274\330\016C\275\024*\301;\376X\035\275\306\224E\275\317F!<\277\016K=\242\'n<\3677\212=UOr<WA\214<T\325\231\275\354\204r=\321\253\255\273d\241\177\275\202e\216\275\346\'\034\275V<\316\274\214\207L=\177\212\036=\370\254a\275v0\247=\271\206\314\275\236M\272<\026D\033;\213\262\177=a\021\377<\313Y\\\274\237F\315<\275\017\200\273|2\255=Y\006\377:/\372\214\274\215\306Z\274\217\314=\274\343\376\250\274\340\341\320\274\t\004J\275\323\372\206<\216\3040=\356\222\241\274\237%\374\274\376\337o=\253F\260\273BaK=Wr\211=\035(\002\275\027\352\343<\002\203\234=\220\032,\275\322R:=\023vi\274;s\234;5kE\275\'jb;y\366\355<^X\t\275\003^ \275*=\333\274\325\370\276\274\251\355\205\273{\371\013;\323\234\325\273w\327\234<\222\013\203\275\343S\214;\222w\337=Pz\232=\354\314!\275\027\304\300<\365\020\206\275\277\235o\275\372ww\274\025^B\274w\213b\273\000T\t<\n\252p<\354\360i<\2365^\275\330Rs<\261\013X<q\251\365\274\355C`;\223\372\337\274 \314]\275\267\201\260=\207\3174<V\2118\275,T9=\216\240\017\272\337\034E=R\341\2569\273\013\235<:\010\265<I<\326<\311\005\211\274\364\256\341<\275\315e\275\312\210 \275H\027\003\275H5\252<\300\201\'=\342\214!=\334Ru\274\246\377f<\347\020\235<d\262t\275Y\213\035\275\005\037\023=\307Ue\2752\004\361\274+\004/<&Sz=b\326\210=\306\374\002=`\235$<@\263i\273I\225\'=\246\320\217=\213,\261\2730\310\224<~\250,\273\267\304\017=`h(=\256\232\324\275\217\342\023\273zm\t<\341\0033\275\000\273\010\275\035u\013\273p:\275\275\320\014\277:t\301\037=L\214\336\274\253\237?\274`\023\016\275\324\023\314\273\347\266\017=S\230\275\274\2401\220\275\355\307\023\275*\202\n<a[\032\275\365W#\274es\006\275\334 \234<\2571D\275He\252\274\306J\312<\366[\006=K\335Y;\3762A\273\206\370N=hm\\\275\331r\202=\311A\351<m\320\335<\261R/=\026\274k=[\206\247=m\207w=\032o\261<\033\016R=\021O\374\274(\355\347<\344@\241\275O\342\362<S\031=;\240\216\265\274\027\234E=\314\373\304<\342\335E\275Q\032}=\214$\201\274\327|\357\274I\213\224\274,\256[\274\013/\177=\0370!\275\010\263;=\033\210\314;\315A\262\273\306K\024\274\342\002\227=\2414\006\275\341\324\375\273!Tw<\307\300\330;_+\034\273\376\3432\275r\200\200<\3335\205\275\037\337\245<\251NQ<U&\220\273pD@=\273\341.\273\260l\313\275V\005>\275.V\341<\201\004\215\273\352k\202=?)9\275\023\251\251\274*\247\252<S\177\005\275~=T=\272\002\266=]q\256<:\343\021=\360\242\255:d9\003=t\020\316;8\000Z\273\362\325\320\274\371\227\256\275#\261\3278\334\274_\275\253\255\310=|\020\314;\264\233f\274\213l\177\274\303\272X\274\252\nS=\375\010\303=\021\363:\275)\223\235<h\257\025=\350-\265=b\320\264\274)(\035\275\345\277\344<\351G\221=\352\022\373\274*D\333\274:\034\240\274\031\357\311\274\276\361\234<jC\317\275C\347\222\275\310\204\242<p\217\230<\035\253v\275\"\251\273={\326\023=\232O\362\274\361\300;<\342\2269\275\001[&\275\315\235\"\275\324\252\321\274\317f\231;\265$\240=\310X\231\274\354\252\327\274\323\250\262\274,s\201\274\232\361\246=\035\021\"=\')\307:\302\031\235<\031\032\200<d\204j=b\225\001<\223vh=\362\310B=u,/=\025s@\275@\251\005=\261\2013<\305x[\275\241\373\217\274\332\301u=\372\366\203<Z\335\340\274\360\317\225\275,\321\267=.\253J\272\333\354\253=w\016b=\2567\000\275\026\203Z=\007\007I\275\020\025\023\275\315\206\316\272\242\2541\275\014\r9=0\354?\274\311\361\273<\032U\331=\307\266\236\274\242\361\2059\305\313\010\275\221`\010\275\370[\216=\013\203\224\273Q]\224:\346\274>\2752\2406\275\336.0\275\034\221\326<S\345L<\336\320@\275\356\276\254\274\207\254\372\274p\304\213\275\372@\020\275y#t=\341p4\275\352\233\214;\263H\356<\361w_=&\320j\275\353\221\226\275+\302&\275\365\263\027=\226\370\216=Cw7<*\021\203\2757\370\221\275\347[\234<\376\025S=\'\032\222<\021g\363;8t)\275\305\246\220;_[6<~\336\203=\330+\027\274\356\335\021=\036\200\206\275\227\371\362\274\370\3675\274z[N<\356\000R\275a\027\361=!G\333\272\002\245R\274\210\327\300\273c\236\200<\360\264\022\275\316\356\017\275\2170u=03\326<\316\321\262:|\272\034>hs\317<1\001E<\204>&\274\310\352|<3[\241\274\221]\213=Jt\270\272\367dZ\275~K#\274k\350\250=&1\030\275o\013A=\010\010\273\274.\313\255\275Do\027\275\333\246\035>J:\351:C4\235=M\310\331\273\0032~\274jGA\275\025\327?=\326p\331\274\270X\003=\355\265\"\273Iw\333;\304u\271<c\370\030\275\2606/<Ef>\274\300A\221\275\'\330\241\273g\361\361\271M\304B<\005\240n<\217Je\273\274\035\334<=U\356<\3634\222=d\325\215\275\262\373\366\274\371\000\243\275W\207\203=d\361\306;\257\337/\275[u\023=WL5\274E\022\233\274\204\030\365\274\243[[\274\227\342\214<\354\\\316\274\331\222\373\274Z\265\226=\371OY\275\310\332\036<\023&;\274.\004\226<F\227\214\274\330\212\314\274\016\325\363=\237\211\247\274\255g\214=\255\354\363<\340M)=\267\r`=3K\232<\315#\333\271\177\267\006;5\324\024\275\363?;<\357\321\320\274\217\024\321=\221\016\252\274\352\250\254\274\361\275\037<\252\007\264;\201\312@=\200;(\274\340\370\264\275\245\241\224\274\377\253^\275`\026u\275\360\312\255\274\325_=<\316\333\023=\022n\033\2754\237@\275\316\336V\274\2056\306\274\213\240\354<U\250(;`\372\276<\241\256\n=a\'S=u\371\246\275\323\356F=\342\026\035=\370\223I\274\273\215\377<e\300\207<\251\205\010\275\227O\020=dO\030=.\225\354<0\353f\275\246\254\024\275%]X\275|\276\031;y\315\321\274\340f\336\275=\273\250\274\"\324\274=l\230\005=\225k\366\274@\300\353;\271D\307\274\240:\236\275\320\235\376\271\217:,\275\212\330\207=8\\\000\274\330\371\203=\332\tP=\211v\035<Ue\027\275\354\223\364<\2250\202=T9\267\275\343\237\354<\234hb;^:5=)|\352<k\246\312<\255\364%=w\332\026=\237\341L\275\2772\355\274ln\357<\372SE\274R-D=\224\353\220\275\252\225\001=8*O\275\316\221!\275~\\\002=d\033\251\275\260y\035\275\023&*=\3665\027=\243\342\'\274\323\344\3779\350\310?\2740\304|=\322\300\363<\003\217,\275\367\373\240\274k\035\250=\375DV\275\023(8<O\332X=f\342E=[\212:\275\361\0200\2733\244\374\273\316\316@\275\301\337\276\275\272K\225<6\356\272\2748\252;=\230%\352\274\002\234_=\035\363\003<\243\363\270\274\2032\342\273\244\252\215\272\327z\251\273\242c\020=\372\315\247\274\023\343\004=\305\246`\275^\206\272\274m\311\332<6\354\373<Y\306\300\274\025\316m=>\244\033\275\000\213J=\026K\356\273\307\026p\274\331\307|\274\000\0252\275\335\354\221=\351r\207<\021\2034\275\353\261\265\274\301:\345\273\263\317\203\275\341Z\213=f\231\364\274EfS\274\014\035d\275\250\010~;\266\034M\275\035\306\323<\244?\276<x5\273<?\317\214\274\026\331Z\275\023\336{\274#u\202\272u\355\226\272G\255}\275\233\324v<\270\212\276;\337\344\340<P.\277<_\010Y=x\365\367<\330Z\240<\222\261H\275VlM\275\354\235\211=\240fz<o\006\342<\304\255P<\002\210;\275\327\324)=\342\361\003\274 \204\030\275$\253K=\354\337A<|\261\227\272\004\211\026=\256\232$\273\335+B=:9\010\275k\356\377:t~\034\275\006\337h\275\242\2135\275I\014\224=\213\204\036=k0\366<\200qB<\337L\031\275\245\255\006=W\222\202=s>\221\274\n\274\317=\332\235I\275\212\2043\275\261\305\266=\033]\000\274\245}7=\261\311\315<4\330x\274\277\253\316\274D\2645=\245^{\273O,\031=\341\353\001=\376\361\022<\0270:\274\216r\240=_\367C\2757T\231<=\203E\274\376\221\202<+N\315\274\366D\026\275\312\204\003=\324\272\024\273\312Q\255=\0149)=Z\336\217\275\267\031\220\274\215\313\035<|\371\215\275\022Yg\275\372\342Q\2749D\262<\340B\277=/ \214=A0\306;\213[\270\275\241\203\245\272\024~\317\274aL\343\275\241h\201\275\034\346\353\273^\343\342\274\271{k=\262\350\221=\346\207\021<\361v\341<\336z\251<C\322D\275\356/\210<\345\302\221\275\014\314X\274\014\001\224\2737\370]<t^\271\275\203\0105\274\023\327\322\275$l)=E\374\274<i/\314\274.\343\177<\312\374O=p\323\207\275\370b\200\275\203w\"=\370MX\275k\031t\274\0268\243<\323\270\271\275\031\302\270\274\236 \227=\335\235\361\274u\307\276;F\305\032\275\304]\322<\001\2640\275l>&=\277\215\';\216\010\327<\246\255\377=\326\265\200<\242\257\312\274nd\025\274\345\3169\274\342\234\266<:\270>;oO&=Q\026\211;\332\376\334\274\253\314\347<4\240\'=F\023\274;\316\016H=\001\016\240\274\201c\004=\277\3770=\021\256\245\2746i\262<\031FW\274\351\201\3149\207\342\r=\224\305\202\275\021\327\221;\272\327\344=K\301\020<wk\017\275\267\377\304\274[R#=\360:\304<a\273z<5\215\253\2748\232\233\275LD\205\275\217\363\377\273\245i\017=N!\202=\023\245\372\274\270\222\235\274\345\352\013;pt\220<\310\376M=O\3011\275U\360>=+n:;|\233\255=\251\201Z=\232\333}<ib\224\274\007d\362=\375\037\315;\246\300^\274E\220\217=\223\030$=\"!\326\273\313Vw<%s\232\274\200\271F\275\221\322\021=9\005\254=\027^\355=\026\2507=<;\314<r\035\342\274\307\324s\275\255\217\206=ZZ\025\275\234}#=\336<\306\274U\234:=\355x*\275\033\271\201\275Li@\275[\377\301\275w3:\274\352\256\347<\226\256\235\274k\257\010=\276\237(=\337\333\247;\027\021\271\274\326\304\212\271\377\307\241=g\307\202\274\263Q%=\352\3641<\371\0024=\354O\034=\301\364\240\275\334}\246\273A\366$<\310\241\240\274\330\013w<\033)\206=\304\203\362\274\033\326\232<\275ej=\2253\263=\213q\265\274t?\205=\206r,\275\366\305Y\274\243\222\034\275\035\310\264=\221\263\262;\t\014\342\275\021\300\212\274\345\355\'\275,xq\275\233\230\245<2\347\245\274\334,#\2748\334`=7\367\017=\t#F<\232\350\270\274\260\032\000\275\333\307\300\274\311\360K:\263\274\275\275\320\345\036\275#\212\031=o\262P<\311\321\342:*;J=h\314\026\274\245\307\330\272\344\037\244<\002J\345\274O\252\371:e{\302\275\241\t\370\274\312D\r\274CU\241\274\215\320\001=W\276\233\2752\366F\275\013}s=\037\203\325=-\337\2307\000Z\303<\'\\\177\274<_\363\274|\206\223\274\364\265=;\263\213\237\274\257\316\006=\016%\367<\235\377\333<\2465\277<\217A\324\272\027\311$=\027St\275mN\252;\270j\205=!4\326<\377\034\255\274\322CW\2752cW\275QE\r\275\257\t\306<U\324!\275\032^,<fI2\275\220\257\023=@\315\357<1\214\031;/\264v=\304l*=\0367\213\275s\264\211<\364\177\006=\226\376C=\r\3631\275\202\225\257<\235\366\202\275a\306\233=\251:,<(0v\275\216]\326\274\2349\211\275\244\353\201\275\276uW\275\332\312\003=\'\017*\275W\373\225\274\264\227\252;\371L\273\275\\5\021<\372DI=<\313\243\274\001\255\335<\036\177\215=\331\271q\274\341*\023=\311<\224\274\207\316\212=\361\357`\274K\036\351<\316\035\014=\313;\205\273\217\356&\275\201\206\314\275\007k\307<I\236\231<}j\242\2743\264\266\274\0064\305<\212\367*=+Rg=\207t\232;+r\252\273\225\231\017\275E;\013\275\030\235\025\274\277(\245<6\236\014\275\003\242\223=\232X\254<\231\023\006=\3718\034\274\326\203\216;\325,\310\274)\322W<\215\033\375<\211\014\013\275\3138%=M\242J=\305\000l\274S]7=4g\206\275Fs\021=(\343g=(\352\270\274\220#\377=cV3\274^D5=r\230r=B\312^<\331\334\245=\\\356\330=\262q\017\274KH\324=\003Ne\274fyp:\317\264\331\274wf5<\251\032\263=\233~\365\273\371=k\275\200\354@=\262\000\353<i\227M\275\370\262~\275\254\010\245<=\262\n= _\341\274L\352\226\274\314t\217<\355\315S\274Y\006o=\264|\211\274\275\031\001>2&o\275\004\001\301\272\3343\307\274\200~e\275\026\356\220\274\350M\030\275\266DT=\315\036\377<>\241\255;\360 =\274j{U\275\246\271b\275\256;\007\275\357\366\030\273\255\002\315<h\323\334<\210\237\217\275\013\212>=,@\025\273L\214D;\265\300\300\274i\3274\275\263\330\201=rL\366:\200p\017\274\034t\342<\374~\r=\370\323\232=+\237\t<os\323<\241\357\005\275\322\3532\275@az\275\242A\001=T\350F;l\014\221<Hh9\275\025\250\277\275\022Yh=\203\030\345\275\\\250\310;\3040\256<q\020\004<\272^\034\275T\013\022=\2770\033\275\321\247\267<\347\252\022<\332\326\217=\304\240\004\275G\277\227\273\213J\034=\025\353\'\274\006\215D=*\221\033\274\033\0346\275\246\036\301<\300\006[\274&\2056\2750\333\032\274\322\274a=v\351\317;\000\260\226\275\261\367\221<\331\354\n=Hj\354<\'\245w\274\304E\014<1\346\375<S0\257\272My\023=~\200\022\273G4a\273\307\r\254=[\245+\275\277\371\252\274\236\210\211\273\016\372\225;\265\331\330;k\021\356<H\243\236\275\t\242\245=\302\177\304<V\2125;p\030\021\274,\024\315<8%\036=\200\212 \274\206u\210\275\234\265\341\274\310\3643\275\235S\241\273\254\232\037=r\341\202\274\233\332$;\034\336\322<\236\214\207<\340y\301\275\344\307\r=\333+\367=\3630\021\275V\236\373<?\235b=\345a5\273\027\246\262\274\036E*=H\334V\273\227\334\313\275\251\333\230\275E$\226\275\250\370\362\275\235\362\366<\253<\026:^\357/\275\215*\252=\331\250\316;\276\003\272\275\371Ut<\365\334z;\213\322\250<\203\267H<\3072;\275\335\013I;C\034\253\275c\374z<\262r^\273\265\345\236\274T\013\017\273\374\252E\274\271{\303=\240\333c\274\027\235y\273\023\241\355\274\233\211\376<\241\377\3129\234C\354<{\031\305\274\264C]<z\310\336<3\330\004=\273\2038=\232\316\205=\301\201\'=\035r\025\274;\214\030=\277e\222=+\300\025=9j\246<\003\377?<\3740\276\274\267\255\010=\250\3024;\000c\312<\211\262\024=P\302C\274\376\273\243\273\377\373%=(\200\002=T\227\255:\310X~;~\214\256=2\273\205=\207Wq\274\025R8=\\\333\200=\250Q\266=E\226\305\274\013+\263\275(a!=\376\352\214\273q\371\315\275\227y\032=\312\272:=\251\246L=\360Z\'<\324$\035<5\214\247=&\272\005\275D\035\270\274\013S\007\274c\355\310<%+R<o\020\037\275D\245)\2758q\211\273\345\033(=\346\2535\275\037\211\3617#\rc<&\002V=\226#\236\275\301O\372<t\355\325<\033\000\035\275\037,E=fqR\274\367\3608=pn:\275p\343\276\274\344#\240\274]\031\260\275\244\375j=\311B*\275r\300\336;k\320\363\274xD\033\275H\365\372\273E7\323\274[zI=8\303\345=\250\322F;\235\214\004\276\374\332s=\373wz\275\231\273t=\225\023m=\272\302\005\275;+\317<\245A\245<\331N\024=\361\036\027\275]\241c=s\017@\275y\204\013\275\326P\246\275\002\302H\274\354\336\356<=\247v<!%2=W\273N;\027\2054<\014\221\303\275\203\355\037\275>\222\237\274D\302a\274\3632\373\274*\217\3659@\004\357\274\022\307\210\274Y\3611<\000:\310<.5*;\233l\341\273\024\245\000<\'\262\344=\224\261\372\273\211^b\273\214R\216\274\346\213\261;\227S\323<\311\004\022\275R\345\235\274\315dP\275enu=n\177:\275\230\206\215<F\306\022=\377\013\310\275V\334\020\275\270\372\273<\023 2\275\203\220\346\274\272)\304:&\265n\275\215\020\362\274fh\213\274e\027\330\274\035z\312\274W\262\032\274\020\227-=H\244\323\273\3638\247<\363\352\224\274w\335b\274\034J\206\274_\\\000\275\247@ =nk\363;\340\025\007=\372`\356<\275\345\016\274\r\311\212\273\374M-<-\267K=\243\244J\274)c\267\274(\377d\2751\262N<\005\267\373<\213\263\223=Q\323>\275\016\377E=\252\207\367\274\356\371F<!\022E=h\343\001=K\004\213\274\222\'\241;\217X\265<\241\361\240\275\030\360\221\275\271\210\230=*\366$=+Zb<\221\025\037\275\324\362`;7\350\242<\264\221\364=\241+*\275\363\240s\274\267\036\254<\026\n_=\355\226J=\323\033\033\275\2279\347<\265\270\031:\025\325\354\275\336\226\252<\270\267\026\275\020O\014\275\237\257\026\275\355\356\t=\265\346X\275\223\023F\275\025\251\243\274\332.\177\275\321y4\274\257\010\351;l0\025=\367s\273\274\267\3064\274\260\007w\275k\314\020<O2-=\360\347\352=\251\362Z\274N\366\252\274\307\327E\273\037\314\r\275\020\to=K(\370\274\035\327\377\274\024b\200\274\300U^\275r\242j\273S\337\005\275\376L\261\275c\307Q\274\345\2736<5\204\'=]v\242<\254\033{=\022Z\231=Yu\227\274D\324\350<\321\276\033\275_s\370:A\322K\275\006\t2\275yC\251\275\224\335\016=v\353R<_\211\316;\030|\353;\263``\273\014\340\301;\177\010\245\275\202n\265=\306\237\213<\234\311\207\273\024\376\334<c\004e\275 \305\260;\312r\263\275\210\256\253\271\265\372\342\274d\361\207;\302\n\202=\366\024\342\274{pI=Gxx\273\236=a=jX\243<\347G\017=zv\270\275\271\330\276\275\224\326\003\275\346SL\274e\351\320\274,\254*;\364\010\266<\000\263\202=\344\n%\274\274h\2409\022\252Z<&s\n=\324V\301<\275w\361\274ta\306\274\322\345A\274y\213\221\273_\245\221<\331\227\241\275,d\320;S\330<;f[\274\274\223\222\021=>\276\013\275tU\241=@\240\333<\356p(\275\277z\220<\216\202\347\274q4;=\033\226=\275Q\244\025=&X\345\274\307\010\200;\te\254\274\212\310&\2755\037\325\274I\263\016\2742\234\277\274\217A=\274I\333\267\275LP\343=Mr\214\274e3$\274P\035\266\273<\263\010=\207d\036=\312l\207<d\255\212\274\366\034<=\222\374e\275\024\255z\2736\241\202\275@\203\376=^<\364\273\241\331\024<\255p\203\275\302`\265\275\233\"Q\275\371A\002\275\234\233\030\275\231\013\217\274t\241\330\274Z\020\333<\307W\307\273-\274\014=s\372};C\341\226\274\212I)\274\264\372\245<\031E\321\274\355\352\211\274\200\230\200\274\254\000c\275\343\t\315=\275\332\023;\'G\n\274\215\331X:\2417\t=\302\207\342\273wp*<o\234\034=\325\301s\275\272\336{\275\356\221m<\267\232\240<<\222.\275\251\251\364\2741\235\365<\357Z\001<l\333\203\274\245\t\005=\017\331\020\276\214\210\010=X\177+\273=\016\227;\365\251\355<\337\335j\275\373\035\201<\026l\001\275\260\013_=\225\270:=\353lK=\246C\025\276\361\210\214=[\214\371\274\254\177r\273\253\210D\275\340#S=\353Aa=\345\202\240<\003\200\324<\014\313\357\275LI\307=qS\375\275\"\017\234<\371\214\300=cf\025<6\026\261<\2202*=\260<3<\375\265\361\274U\330a=\265n\216;s\337\215=gF.\272\375{\315<\351\312\301\274IK\300;\337\010\326<\2638R\274\020\361\014=\226o\232<\240\342R\275Q\024\235<\335g4=H`\017\275/\227\275<<\026\232<X\374l\274\301R\241=\276|\352;\325\211A\2754\233\002=\225\013\247<\035\313O\273Og=\275\002\335=\274\023\316\276\274\031\253\246\274\271\t\216;\246q\274<xZ9\274\242\257\006=\374,A<\342\321\254;\344\263S=\020y\025\274\272g\003\275\376\317H\275Ri\017>\307\006\305=\036\022\t<\345t6\274`\\\204<\316\243\227<V\263i<\374\255\315\275\356\316\212\275\235\321+\275\320m*=c(<\273UY\3558\376X\"=\357,D<G\305\265;\256\255\260;\300{\t=\014\231)\275\242\025*=9\301\014\273\001\303}=\261\364\337;q\274r\275\222\315S;\370\243\257=}\256\275;\210\337\305<\220r\"\2757c \275\337\267\332\275{*M\274\\\334\356\274\363\203\304\274\316\322\256\274I\275\001\276F\002\252<\245\231\315=V>\240\272\341\016%<E;\216\275-R\023\275\022\002\027\275\254\313z<z\356#\274\225\003\250<\365\227[\272\243\005\376<\352\235\225<\323C`<c\202\014=\376\274E=\203\212R=]\312Q\275L\230&\274\007\215N\272\305\340\006\273m\252\326\275\252:\207\275-\232C\274z\3769=\253\301r=\322\303\377<u\246\036=\n\344\320<Z\305R<\325Z\016=\216\342H\274\314\"\243=\330\230\316\273,\212\016\275\272/^<oVu\274k\003a\275\371\332\231\274\036t\375\273\230z\266;\315\036\252<\016y\373<7\350\320=\312\344\026\275\307\360\000\275g\333/=\365\374Y:\003ik=\221\006\200=\3668\305\274~f^=\232\360\026\275U\t\202\275\035x\232;\221\330\224\275\302\341=\275\020H\220<_x9\275\236m\304\274\026\203o=pe\310\275p\340X=\304-\021<<\2044\275\324K5\275\222,3=}\024\225\271\334\312\255;\223C\327\274\336\247\213\275\230\245\254=f\"\226\274\"\340\222<\354,\005\274 g\233;\277\215\n=\372\245\277<\t\026&=L\305\360\274p7\\\274|\306J=\304L\002\275\317\313\245<\205\260\342<\220$\r=\342\207\373;VJ7=\362K1\274\264\223\320<\262\362\200<\334\217\222<\321\305\340<\276\200B\274D\233\265\274E\344R\275\336\020\316;\177a\256<\376\234\351\274\372\273\344<ue\315\273\315\337\345\274\227\210>\2759<v:?\376\030\274\2374\265=f\261\317;\324\353\257;\306X\354\274\370\357\307<\tL\377\273\351\356\210\275\217\000\250\275\356-\240\275\013\333\317\274\246/:\274\307\025f=W\223\020<\302\272\345<\316M7\275\325\007\320\273\213|D<\326V\003=\310\353f<\322\004a=\030\221\265\274\016\3779<6U\216;+\371,=\t\367A\275.\266\177;\231\234\t<gk\021\273o\245\336\273\237v\222\274r\312W<\263\224\305<\212:\222=\272\377\240\273\014\316\237\273i\274\"\275`go\273\347l6\275eb\376;\320\364>;\364\313\266=\361\254\246=\347\002\305\275\247\231\302=>\353\354\274pl\272<\237\246\254\275c\202y<,g\320\272\033\237\253\275\334x#:\335N\334<z\242)=\003\304\304\274\261\302\037\274\233\205\237\275\257\\\262\273\tIc=\006\373\304<\270\347\230<<\344\026=8\3113=\022.\254=\273.\331\273.a\201\274\001N\262\275AE\222:\3602_<\212Rf=\333\010i=\3047\244=\322#\356<\200\017\035<\t\230\204=\021I\235\275\271=\303=?$\316\274\204/\217<[\354\032=Fu\237=\211u\027<Z_ =\345\031c;Ig\006\276F%\260\275zS\261=9\252\2439m>\357\275y\334\233\274.h;\275*\370o\275\311\030\302\274u\2243<\262H\347;A<\311;Zn\\=\215R\206<t\200w;>`\234\273\224:\346\273\007^\023\275\367m\307\274\2465\211\275}MM\274\010\224\006=;\203\342;\366I\240\275\333\247W\275N\235\346\275z\352 =-s\212\274\250\177\223<\261\027\321\275\332RO<\234\324\031=\241\330)\274\217\n_\275\231\325\034\275_s\215=\334H\233\275\335)|\274R\344\002\274o\206\354\274\255\003\016=A\346\303\275\021\371\201<\3050Z=\026$\211\2754w\034=\025a\034\275Z\210\352;5\275W\275]\205\253\273\332v\020\274\3329\226=Z\367\273\273r\260\250<\376\206\013\275\345\244_=NdC=\'\031\002\275?\245\337<R\236/=\002\205S<!\312\230\274\002}f<\355Fd<\025C\316\274pl<\267\313\305\221<\256\032\215\274\200\333\235\275\343\320\372<\020\235g=\355I\261=\337\310\273<L\354\016\275\357\010\230=yY\356<\203\301\205\274\243G\004=\312\177\244\274\354\317\024=\026\343I=\243\235R=\313\202a=\364u\311;\344R\250=a\275\263<b\321\243\274\201\000V=f\361B=\rn\243=\221\343G\272\213\213\322\274\216d\023\275=P5=]9\356\274\016\233T\275@\034)=\313\257r\275]\223Q<\262Y,=\272\301>\275\300\010\215=Uh\316;r\023\177=p\377\252=\336V&\275@\226\\\275\225P\257\274\307\003\006=a?\305;\272\251l\275n\342\331<uf\252;\177\353\236=S\323\325<&#J\275\315\350%=\034\276\373<\231\341?=u\017\213<\036D\376\275\246\266F\274Z\013I=1\274a\275\353\010\227\274\264\232\356;\275KI\2742\234\243=\320\244==\220\373\327\273\235Y\313<n\337\220\274(p\031\275M\n\035\275\215\262\n=\230mR\274\023\212\203\275\035\325\207<=\250q\275\213l\261;\023\225`<e\315\370\274\'\252\266<\265#;=$\270\013\275\3124d\275XA0=\026\361-=^J\357\274k\225c<UR0\274tJ\232\275\035J\343\274O\271R=\325\241\237=\370\021\237\274\254da\2756BS\274\'G\n\273\220n\314\274\023U\013<\037\346\343\2732{k=\205\356\245=y\367h\275_\354\316\274\031\350\376<\221\004V=Uw\257\275\351\214D\275\272\375\034=SA\230;\276\016\002\272N\230\323<\277\205\022\271\0350~\275\0074V\275\022!\341<\024\014\037\27586\270\2741t\r=.=\226;\252\350\242:[\031\365<4E\272\275E\376\241\274\323\305,=\337\033\346\274(\210\342<H_\300\275)\'T=B=\213;t\226+\274\006h\255\274\277\000w\275\253\300\257:\2015\204\275\232\002\016\273j\026z=\213@\210\275\035\t\200=\027\207y\274B0\210\275c\260\373\274\300\236x\275\365\376\n\275M\313\332=\257&E=g\036\344<\2669\335<X\307\263\273\217o\023\2758\026\210\271\303\343\253<\207\022\217;\266I\353\274\037yn\2740\260\215\275J\202s\275z\341\300\275\324\375\020==jw\275\341\007\302\2737C\r\274\226\177\245<\370\300\374\274\320\323\020<\322\2356=\210\365\002\274;\206\270\274Z\037,\275\010\236o=8(\242\274p\307\306<\315\260\263\274\263M\367;\356\017\007=\005\034f=\214\235I\274X:\n\275E\220 \275<\265\302<\344\272\331\274\335P\202\275\332\231\227\273s\276\355;t\252\230<\216a\207<\336\262Z\275\373\305\026<[\357k\275\2002w\275\025\372\247=\323\350\037\274\314_\203\274K\205\253\274\346}\014\275*\036>=\344\305\026\275\343I~7\305\266d\274\212\366u\275N\3450<t\370\004\275d^\277\274\246c\325=\225\315\334<\267\003\007\2762\310\237<H.\201\275\013\203\300\271\225\2276<\225u\207=\337\333\360<J 2<\237\022A=\272\0003\275Q$\001=\014.\311<\361/\200\275lf\225<\270cT\274\034\031\001=\356\n\205\274\371&\362\274\256\026\263\274\230\2259=\022\367\033=_\222\204\275\3009\305\275fT\027=N\256`=NC\333<d\320\257\275\231%6\275L\350\363<m\323\235<\244\202\035\275\343r\277=\350\362z\275s\020\256\2740\021\216=\235zt\275\332\205\214\275\022\337\007=\340e39a\315\372\274\217\331%<\027\330 \275\245\217\204\273\243Q\232\274F\317\277\274\326\364\227\273\252\365\36799WQ<\010\r\254<\340\275\025\275=y\000\275\214\3118\275J\366R;\265\263\266\273\206@\006=\246J\232<8*r\275\363\303\266;\316@u\275\025\351\350\274\260:==\0242\335<\346~\213\275p\216\006\275\212-\242<\364\263\032\275\303\025\006\275z$a\274\352\\\264<\267\033\352\272@}\320=\034\240\214=\275\000\"<\320\024\307<\3755p\275\304\346d\275\\\376\331;\305Q\272;\270.\224=z\010\305;\023|t\275\304\222<<P\220\324<j\363\337\274\341]\235<\021s\202\275\322x\264;L\030\247=&O\314<S\331\300\275\t\346\215<\363\232\311\273n,\264\274\r[@=\032@\315\274\334\017\263<\206\245\257\273\2405\024=U3\233=\340r.=\231\317\222<>h\033=\271\245-;H\300\377\274\220\312\261<\033qI=m!\245=\034&\364\274a\371|=\034.\002=\207R\\=\236[\177=\306\001\n=%\250~=\2757t\275\225\304\274\274\371\020S\274n\336\t\274\006\321\225=\t;N\275\\\031W\275e\221\242\275\347&\307\273\354Z\224\274\336y_=\3426;=\323\334\320<E\355g<\367g5\275\302\313\352\274\355kE\275\256\330\262=n\315O=\317\214Y=\202\"\'\275\242\250\203=|\021\034=\250\2617\275R:\373<\250\222\271<Qx\305=\265Q\214\275(iE<H\265\262\273}\304\310<\334\3077\274\315!>=c\030\246\275\310\331\037\274.\200\324\274\367ZI;\235P/<]\311\2629\325\311\276\275\255+\331\274\245Vx\274\270#-=\346W9=i,\211\275\021\212\206\275P<.<Z\0310\274\353\365^\275\003@\266=\203\374Q<\354\210\322\2733 \026\273\242\255[\275\364*\234\275\210\224\373\273\244\333S\275\211/\315=&\261o\275\357R@=\332\022\275=x\315 \273\232\360\335<\231\032/<H\033\n=\225\2017\275\361\317\324;B\3041<\366\304E=\246O\226<\026\024\'\274UE\237\275\033I\010;\322\370;=\231\026\210\274\214\272\021=\250\020\354\272\033wb\275\337\217\207=\030^\234\274\373\326V\275\211?-=\227-~\274\252Kl<\206<\003<\367Z\005>\345k\235;\262\355\271\2743Ag;\322\200\275\274\017\206%\275\307 H\275\211\355\351<\'\322\r<0`\2477\305\360^\275V\266\006=-\023\246\273\233\213\203=\303\031\373<]\031\263\275\347\351\361\274\330LC\275pz\275\274\006\320=\274[\233\345;C@A\2759\316\"\275\337\013\317\274W\225\350\274\030B\221\274\331\273\"\275\303\213\277<\301\265\224\275\231\244\223\2758\367U\2721\241\207\274s+\275<\025\001\201\273\353\023)=\255\265\262<\271\363\222\274-\201%=\365R\251<^\367]\275*Z\275=e\263\\\274\246\307\013=Bc7\275l\274\014\275\030\367\027<H\206:\275P[9<\365\212\233\274\237\303\227\275\203I\257\274~\315\224\275#\026\\\273\235*\002\274\232.\357\273\205oZ<N\255\001=\323\311j=\tgL\273T\007\350\274\006\022\321;:a\252=j\232P=\355\250\210=\001c\237\275\234\300M=\245\355#\274g\301\030<\316n\256\274\341<\205\275\203\344\010\275RI\361\274B<\267\274\331\356\202:.<\306<?\277\037=\352\266\026\275\007\373\235<\r\372\267\275\332\346#\275\021?\253\275\253\\\225\274\315\367\244=i\016w=\253j\275=\305\034\206=\377T\257=[2\305<\0241\177=\264x\007\275\240\035\312\274\326Ok=`\002\252\274\275\233\013=\345\353\276<A]w=\334\\\221\274\032\351\275;>-\177;\377\220\347;Mm\346\274Y\201}<\214\233\225<O\311/\275k2\333\270X\253\345\274\257\347\225;\023\204\324\274\304\377\213\275#\3324\275\r=\200\274\253\207A\275\351x\326\274\372\313D;\1777M=\224\3757=\227\000\002<\333\002Z\275r\237x\274\374\345\310\273_LN=\265Q\025=\324\013!\2744\322<\275%ol\275kI\214=E\2175=m\007C\275\240\n\343<\000\247\230\275\211^\270=\376$\225\273g<\350=d`\032=\014\256,=\362l\027\275y\377\247\274R\327\245<\266\215\206\274\316\271\326\272:\013\346\273{2\224<6\321b\275>\341\004\275u\001\245\275ZH\211\273\302\232Y\275\343Q\240\275J\252r\274\215\272\277\275\014\3643=\207s\030<k\237\200\274\325d\014=\304K\004\275\211n6=\030a\302\274\267(\367\275!+z=\032\031F\275\'\317v\27572\336\274=\177==3\'\253\274\376p\246=\031\250w\275o\317@\275\033\306\313\273s5!\275e\360(=\'\211\020\275\251]\265\275SS\332\275\341\363W=\216\227\261\274R\341\321\274t\214\036\274J\367\323\275\352\357\264<\345\035\223\2756\0257=\214\222\361\274%\300\321\274g\225\256\2720#\032;\313\035\255\2745\300\016\275\210\3002=>\345\t\275\261\362\030\275=\016\230\274\232*/=\014\302\317<\251V\376\274l\245E\275\346\271\345\273K42\275\3267\r=\025\023\031=\272\307\327<\234\250T=\372\371\344:\322\357\330<F0\314<7f\373\272q\345\016\274\347\r\t\275\200S\367\274Lc\257\273\232\270\210=\022\231-=\270\270\221<T\254\033\275\316\323\277<i\375\317\274\331\"\274\274\351R:\275\262\371\'=\023\034\223:P\223 \2752\253\206=\315R\263<Ggt;v\316\202\274xS#<e\2711\275\022\006\221\274-\242E=\210GA=\233\001\000\275\311\306\037<m\355\247<1\263\017\275\272\353\376\274D/\223=\323\024\244\275\010\211\217\275\026\032T;\375\213\304\274\350\246\303=?{c=k\264E=\321f\225<\337\303\215\275\215%\274;q\216\365\274\022b\311:\350M\333\274\025\236c<\301a\242<t\264\020=e\260D=\376Q1\275\\\326\331;P\246\006=`1\002\275\210\306\205<\024KD=\242\2279\275\203\034R\274\035\t\337\273_$\255<5\305\232<\343\213\347\274\271\0055\275dcs\274\3137\026<hC\375\273\257F\246:\376F\354<<\247W\275\322u \274\006\326\232\275\315C\333<\230P\365<a1\204\273H\210w=w\000^\275\037&z<\252\204.=\255\273R\275\271\247x\275\352<\310\274\025\330\003\276\251_4\275\t\377\342\273\025W\035\274\230?\330<\250\263\314\273\261\215C\274\0219\027=\261\334/\274&\273\207=\214\001\327=\245\034\357\274\333a\341:(\277\010\275\210\3239\275\243\362\363\273\006\324\274<E\345^\274\037\277\242\272\343e\344<\322\263`\2745\217\021\275\311\346\352<\270\235\347=\372\316O\275\313\005\342<f(\205=\264\257\036<\226Vu\275\370\346\206=W\2319=\212\023\224;\275\301\277;\213\217\350<e\257`=\364l\264;\311N]\275\221\216Q\275\252S\340\274\321[\322\273\324\355\036\275\027?~=\341\337j=zJ\365<d\345\205<\376o\245\275\324\215\245\274Fg\213\275/\313$\274\330\005\374;\006\327\222\275\246:\030\271&4\020\275\264\034U\275\270\306\n=\000(q\275\002>\320;\\\352#=1\301)<\352\2302=\277\352\253\273\210Z\310=\204\023\310\273\210,\315<\036\020\210\275e\267\276<@\005\231\275M\355\201\275\3224\231\275\377\376\253\275\344;\032=>2\217<{\321\221\275W\363\000\275e\265\213<w\300Y=2\210p\2748~&\274\221\300\"=\255\306\354:\027\354\003\274\203[\264=\224\354o\275\247\227\"<\314\022\363\271\323\347\315;\321\t\275\275L\321\220=\306-\322\273\010c\354\275\253\245\"\275\003|+\274\225\365\204\273>\2143=m[\276\274P\202\306\274\022\315D=I\334\323\273\325\021\326\272\346\254\265\273\303\036\336\274w\360\266=C0g=\301.\212\274\221Z\322<\245q\222<\341\027R;\235\323\213<\350\321\220<>\\\206=\016\217E=\256I\236:\213C\016;\001o\217<\3334\004=\213ix\275\247p\003;\260\374\335\274w#\335\274]\322\260\2749\231O\275\267?\342=\030\004\223\274\247\036h=\236\231\354;a\353?=4\"\232\275\322l\026\275\036\207L\275\030\004\014=}\221\232<\026\031*=\301\362s\275M\363\253<\"\026^\273\264\236\014\274\203\021\266\274\360\241C\275k\332]:a\224\215\275g\277\004=\2320\214<\275\223P</4\265=*`K\275wN[=\320.\256\274\275\002\274\272\335}\230<\356\267\202=S\023\202=4\217T\275\022\237\300\274\263\341:\275\361K\216=Qp\247=\207\200\262\274c\020\315;\232\236\321\274\252\007\356<\270a\032\275M2O\274&\253\333<\314\260\360\274k\026\312=<,\352=\274Q\241\274\351\2703\274\025|\373\274\205\310$\275O\'\"\275\276\267\013\273\240\020q=\277\017\243\274\360\237\323;\221\001m\275\300\020\t:\021=\205=\"\375\360=>*\027\274\362\n\r\275,\357\315=\257\370c=\267\360\036\274\300X\022\274\312\007\221\273\202a\'=0f\275<|\274\222<i\235\035\274\302\207\327\274\301y\'\275j\212\260=x\017\331:\240\000(\275k\036Z<P\207\243\27584\014=\220\221s<\375\312\037=()\224\275r8\016\274\035\020\250\275a\270Y\274\343\305\024\274\370o\230<F\r\001=\260O\t\275\346\326\245=\217\261A<O\2223;E\261\203\275\336\350l\275\034\204K\272O\367#\2747\327\307\270;d9<\346\204\022<\'[\234;\027b\204\275\207%X<o%W\275; \340\274\314\216\243\275\230n6\275e\320\245<\255\366\300\274\200\336\026=\221\266\017\275w\212J9\263\372}<\214\230Z\2747\360\222=\325P\227=\336<\240\275\322\333D;\036\337\200\274\373\250N\275F1\332<\300(\260<\"\222\351<\271h\024\275\215\226\224\275\'\361\301\274J\214\035=r$\025=\364\320C\275\251J\305\275\321\205\320\274\263\326`\275G\200\266;,\300\304:)1)<\323\\k=/7\027\275\033[5=\'\311\271;\245\202\244\274S\327S\274\2575E\275I\201\234<\245\235\367<\247\230\202\275\235\215&\275\374\251\272<\323\317\005\275n3\210;Zlj\275N}Y\274\376=\222=?\205z=-O\240;\3429W=\034\025|=\251\246\322;\244{\361<\222I\266<:3Z<\342&<\274r\330\214<\031\236\232<\004\023y\275G\n\232;s|]\275\325_\022;\023\212%\275K\221\275\274\217\033\247<\334LM=\021\221\202\275f\326\233\274\334$\265\2756\"\027=?\367\334\272\310S\344<\3525\276\274\303\036\004\275q\373E\2749\"\202<\\h\207\274\365\325O=\016\234\3349\271bx\275F&\365;\323\312R=\347`\331<@\215\253<\306\037j<\337\362\203\275\223\275I\275H\023\317\274\220\327\242=\021\226\341<\374\n|\275\233Qu\275E\345\315;_\034[\275t\356\002\275\225&\247\274\366\003\003=\006\345R=$_\024\274\2672S\275\3271\023\275\205;\377;] Q=\323\267\032=n\350\270\274q\245==|\240\\=`m\254\274Mm\323;\343z\215=E\353\027\275\342o2\275\033\356\346\274\016_\204=\343G\006=~\321\252\275FnF\274:\243\220;\313A\234\275\252f3\274kV\226\273ap\336\2758\2129\274\213\303b=\306\230\274\271/P\212\274\027d\236\274\027t\201\274\327\306y\274cL\302<\242T^\274\306\035\257\275\022\236k\275w\360\262=\035u\307<\342~\r\274\263\320\304=7\3655=\034O\251\272\224\207\274\274K3\206=@V\342\274\307:\225=\373\2420=\216y$<\324\277+\275`\363\006\275\353<\226\274\372[\005\275\243\261\214<\035PJ=~x\265<.\020\027=\3446\335\275!\352\224<m\016N=\207\372-\275\014\031\326\274n40\274\336\255\r\275O\224*\275\262l8=\255e_\275\334=\201;\254\207\227\274\373\316\306\2756\340\033\274\354yI\275\217%\327<IG\n=\236\267\272\274\261-\241\274\226\224C\275\014B\204\274\261\200\230=a$\035\275\255\306\013<\304\234\220<V\372\262\272\243P\345\274\027\024\324:\372`Q=-\010\231\273\226i\346<=)(=\301\341\"=h#F<\357\226r\275~_\n\275\255k\000\275^\223\016\275\334\020\252<\010?\306\273\205\216-=\nC\301\273\213\336U=\252\214w\274\351\330\372<\264\332\322;N!\232\275\272\010\313\274\215\021<=\3440\212=\367\263z\275\352g\363\273\r%\361\274\034\341F;\355\346\220\274/\027\036<\252=S=\253E\242\275\261j\231=\232\2303\270\271\212\202\275~\333\364<T\361\374<\320\263\026\274n\350$\274\376\346D\275qG1<\240/M\275(\001f=.\356e\275\037\243\022\275h\260\364<,\322\231\2742\004\005=\037\240f= Q\005=5\275|<\004\266,<;\231l=p\311\222=\025\n\360;\341Y\325<\362\031\307<\221\325\215<\375\200\372\273\225})=\346\032\214\275+Z\003=\311\351\204=hN\010=fj\363\274\031_\016>\307\264\320\274\231\000\276<{\307\261\273\026:h\275\206E\254\275~\331\342\274|zB=\207\026E\275\300\314\361<z\307\036=6\321\021\275\320\350\255\274^\017\257=3\365\257;\271\332C\274\010\302\356<i\301\372;\030\337H\273\323O\245=x\227+\275\013~\351<,#R\274\370:Y;\347\354\253=\325\240G\274gy\235\275\262A\205\274a\035h=lV\242\273\367\254Z<F\332a=J\275\234=Ed\202=\232 \001=Vh\326\274.\321\374<\256J\245\275\033\376\032\275\004\325\233\273r\254M\274\014\341\266\273\030l\233\273\273`\350\2740 \306; \270[\275u\\P\273\026w1<\tW\373\274\354\005\247\273\\\253\"\275g\372\213\275:\016\247<\277\347\r\275\213\'\314\275\363\334M<\352\0311\275\370\362R\275\335k|=\303\303\207\274\272\3646\275\316P^=\274\253\236=v\204\r<4\2414\275\213E\206\275\010\377\003\275I\026K\275>\010\r\275\334\221\222=\221\034\322;\333\261\265\274\364v:=o~\023\275\354II=\221\275c;\314\177\032\275\360\021\276\275\345\330\020\274S#3\275\257\213B\273\217\022\351<\036p\014=\334\000\235=\334A\246\274\323\200\252\275\\Y\326=\235\3511<\200\327\037\274)\375U\275\221ly\273\262\033\302\274\270vl<\324Sv\271J\251\017=\240\272|\274\177\262\026=P\330\300\274N\360c=z\037\004\276\262\346\260\275\016\037\314\274\256\312o\274u>\375<\000\246\215=U[7;%i}\275\374\356,=\271\200\255\274!\266\356\274x\304\223;\346o\010\275\303\201\005=\251\257\236=\362\225-=\237\007\203\275(\374\267\274s\023\216;Q|g\274\365\030\020\275\251\345\273<m\027\037=\331\003\357;o\027\302<T\361B=S\352\022\275\255t0\275k\033\004\274>/\215<\367q\221<b\316F\273\030\341\311=Yw\271\274$\214{=X$\005=JI\363\275X:\004\274P\277\030\273\224E\230<lB\001<\007s\234\275,D+=\311/\010=\301\343>\275\334\200]\275\321p\271<\330^\300<\007\361U=I4\201\274\tT\271<\266\024\324\274j\317\311=N\341\236\274Y\025\214=5\014 \272\2079\265=\304\327.=\235s\310\275~\033p\273\035b\023\275\300\345(\274vx\336\274\324\322\211\275:\235\254\274I\023\034\275\312\214m\274\3650\306<\023W\262<\355%\205<\324\000\321\275\357:\010\275b\355(=\321@l=\037\270\355<\017\352;:\230\302\360\274\205\222l=\331m?=\270|\254=\243\034\241\275\000o\342<t\037\226\275&\214M<\351\016\233<\020\222t;\370T\203\275%&+\275\227\344T\275 aB\275\027\313\215=@\272y\275\01307=\370X\364\274\245Z\216<\036\332#\275\251\356^<\347\356\250\274r%M\273\031e\350;~\031\240\273\r\341\334\274:\263V=\206\302\241<B1 =v\227\340\274\216\361\032\274\025(\036\275\177*\371\274\335\277\277\274\362_\361<4\350t\275\3415l\274\237\231\223\275P\311\302=\023o;\273\374\260\227<\201\177(\274\250c5\273\276\n\n=\206\222\214=4S\225\275\236\355\342\274\307v\r\273\334\211\221=<\346\233\275\317\234\231\275\373>\305\272\033\037\n\275\263\345\306\272I,\251<\014\376\266<\205\365[\275;:\277\273p\010j<\004\005(\275\223\264?\275\"<\222\275\020\212[\272K\233l\274\206\266\203=\3120\002\276 Yx=\337I\215=\223\024\351\275\317\356\222\274\361V\321\275\r\264\215\274\343\270w\275\200\320\272:\244\032\264;\243z]\273 5\227\272\310z\343<\207\251~=\347\017L\274A\332\340\274o\261\263\273D\256j<\204/4=X\352\277\274\321\335\025\275\335C\277\271\'+:\274.\305\242\273x\003+=A\347n<\nxX=g\2475=\\\273\";\316\355\314\274\325=\232\274\357A\204=\205\330\351:\326\265\211=c\252\020:{\256\345<\300L\223\273\345\224z\275\322\005\331<&\275>=\362\\\024=5k\200<\274\261\021=+\360\220\275I\243\0369\017\027\216<\253\234\211\274\355&\324\2745#\303\275\033\243\353\274R\267\310<9$H\275\256>A\273M\030\265=\355\333\311<\266\271G\274]Jw=w_\243\272E\235z\273\005\227\345\274\264\210\220=\332\026x<\227\334\r\275\006/?\273M\310\314<\341r\257=\302\302g\275\024\363~\275\222\263|=\026L,\275\257\343N\275X\221D=\216\207,=2%/={\270b=\350\204b=\316\314D\275\262\377\341<\301\344\244\275^\202A\274\210\311I\275R\324#\274\001?R\275\235\271\234=\343\333d\275\212/\251;F>\252=)\330\374<\007\326\333<\257/\216;\315{c\275\271<\321\274\r\276\001=\001\177\022=,A\r=\216\313\241\275\334\260\256\274\373\201\216<\3771\231;)\255\356=h\324\026=\367\347,\274\276B{\275_Tf=\223TQ\275\352\312\224= \2719\275\362\362\233\274\244$\n\275_l*=\241\002c=D\276G\274\262_\306\275\010 \330\274\256&\355\274\201`\233\275\'\350\303\275\203\3310<\362\370\242\274\336\374\235=J\263\377;K\365\030<#\301\354\272K\200\254\274\231\274\250=?T\327<\374\024n<^\002\374<\242-\203\274\204hE\275\020\356\311\274\241l\004\274\355\205\310<9\306\026=Y\320i<\215\352\n<wT\307\273h\006\207\274\267\221$=\243\006W<?\347\035\275\233\000\246< \322\316\274h\330-=1\205\017\274\036\212W\275=.\n\2725\004\305\275\320\205\303\274T\016\272\274(\270#=\235\255\016\274\205o\244\275\025t\367;\337@\351<H\311\246\2740\177\243<)\223a\275A\273\377;\312\t\033\275\001\257\327;\240\345\236\273\037\245\233\275\276T\330<:\332+=\307c\275=7\275b<y\377\376<\263Q6\274\003\256\317;\001\300\034\274\302\244X\273$\214J\275\033\322\326\274\013\353\231<\252\351\251<\327\356\231<\262(\256<\221:\316=Yj\002\275A+\244\275\320\347f\274\210\205\310<\217D\262=\321\231?\275\017\357\210<A\032\2179P\322\303\274\320\177]\273\260\201\345<\270\2572<\347p\026\275\2037i\275/\231N=\335\231\312;\327\006+=\322X\022=\014\365>=\374\364\365<pE\323<o\263\205<\333\177J\274\017\377B<^\004\017=\225em:U\006\352:\370\367\r=k\310\031\274T\324 \275q\023\313\274w\r,=\215\2727\2758\346\n\275\237/\027\276\006O\372\273|2x\275b\303\253;\206\t`\275\313_\222\275\367\254\006=n\270\344<\321\233q=\333\230I=o\206\233;\275]\036\275k\247\224\275\332\275\300<\027\010\233=W\336\252\274\211\377\274=\345\273j=\233\325\017\275\260u\276\274R{\231\275\251\327:\275w|k<Bw\221=\204\272\"<\205\263}=\256_\323\274\237\316\345;t\220\007\275jx\241\275f\244\224;\"\322\242<=\232\311\274\337\010N:\231D\230=e1e<0\006\010\274\373C\233=\230\004\242=\013\371P\274C\271V\275\010\242%\275\037\367\250\274\3054\266<\3034\214<\243]\022=\355\t\261\274x0\r\275y\206,\274\220\336\007\275\326\001\002<~\215I\275C\251\021\275\373\203\233<F\306\257\275S\201C=\3520\365\274\325\nZ\274\000\277\207\275\233\251d=~{\215\274un^=)\314\301<\316H\254<O7\231\273\347>\301\274e\302\n\275\251\021Q\273\376cM\275\036bg<y\007\212\274\222\376a:D\005\004\275\361\022K=\201*\236\274\022\244.\273\361\270|=q\212d<\345\314 \275]\221.\275d\305$=\263w:\274\252\342.\275\245w\272=\341\"\222\274/e\240<\014\203T\274\317\010\347<\324\031\n\273\301\"\313\273\366\021\220<3\236E\275X\375\277\274!\003/=xf\213\274\237s\264<\331i#\273\273\365<<\355\364e<\325\271o\274`\264\321\274\342\352\030\275\256\020w<$s\177=\023N\221\275\305\025\"\275C5\312<\017\005d<>\275\355\274\364#\203\275\220X\365\2741\203J=\253j\014\275\235(\227=\215\324\345\274S\306M;\027.\'=dh\237<\031^\231<\202\235\322;\341\240\304=\321\337\304<\251\234\257<S\2614=\023KD\275\264\025\027=\236\030\204\275\221\314.=\222\231\226=\220\332\264\274\376\025\034<C\027\325\273\323aU\275\316u\366\274+\177\365\274Nz\255<\212\244\204\274\333*\001=\366\361\226=\335x\270<\000Q\023\275\217\225\267\274\333\233\234<*\235\007=N\312\243\274\3022\367<\033\213\217<\207\r\026\275\r\"\006=\022\370\354\275\261\256\241;VK\226<\336\200l=\274\370\006\275\003k\304<v\320\264\274`\247\237=\224\222;<\231$\360<\376\234\237<\361\351.\275#S\337<i\375\010=T\222\235=\321]n\275\272\322\212\274;\242d\273U\030)\275Z\247\237\274@t\344<Bm\225=\276m\262\272\212h\344<\r\3753=b\357\2239\252\016Q\274\003\274\002>\3551A\275\351\3334\274\323 \275\273v\255\302=\257U\310<e\317\016<\217\247>=\340\374^<\326b\304<\263\207f<|\334y<\035\250\035<<~6=\375\0268\275B\241\303<fF\024\275\247l\"=\376a\313\274=\010\367<\274\252\217<\370\237\027=\250Y[\274\330\\\033;\257_<\274\306/k=^*%=\224l8\274\375 \036\275B^F\274\247\0308=$c\304\274\311b}=\232\035\351\274l\366t<\007\273\027=\355\000%=\321\264\202\275q\3451=\243\361\276<\235\226\250<g\306\306\275W\232o\274\035\0244<j\n}\274\312\202\243\274\350\306\005<9\330<\275\313\331\201<-=u;M\321\214\275\317\010\206\275g\326\247\273F\225K;\273\235\242=x\355\023=\327\327x=\261\340\203;\232z3\274-\336?=\022<\002<\311\0070\275S\337\265\272q\243\'=\035W\246;\244:\010\275R\026\265\271Y8Y\275\367j\333<gV>=]\276\211=\rM\211<L\206G=3\246\242\274\202$@=yf\230=\342\350y=\r\016\005=<\250\265\275n\217\247\275\335\005/\2758\224\336<\343cN=VX \274\017\021)=\260\222\014\275\275\200y<\352P\213\274\265Q\021=\372~\206\275+\347\271\274I-6<b\324}\271\026!\222\274\223_\370<b\004\261=&dR=\376\006\311<$\023\267<\252\343\272;\272RJ<\035\342\212\2753\010>=\277B\361\274\370\263\246\275\014\367\325:\317\3716<\271\025\343\274\204\354\331:\027\212\021=%R\263\274\364\212\037\274\327*\207\275\227Xs\273\033p\247\266\313\265\256\275Qh\213<\347L\232:\242\255j\275\226e\360\274\224n\377\271\264\225\235<\205\346\032=8\3434\2750+J=\351}\016\274;)X=\024\306>\275\177\n\024<\357\326\302\275\265\314\010=\363\036[\272\306#H<\017\342\276\273\"\250G\275\205\032u=j\200\010=\224k\271\275\013^>=\201w.\275L\366\003\274\030\217Q=-\326Y<B\300\273<\333\310r<\024)\304;N})\275\204z\326\274\363N;=\030-\037=\277\203\246\275\225\021\277<\246\250\220\274\330\014\n=zK\207\274\372r\330<3\267\272<f\025\203\273\0346\t\275\257R\261<;\235b<r\376\304\275\311TP;\343\205\307<\221\245\030\272\"\351\243\275\261\332\253=o\033\025\275\203^$\275^s[<\025\016A\275I6\354<}\316\262<W\272;\275l\001\372=\323\250\251=\020Qb=\276\250V\275\3733q\275\323lE\275\274\271\017<.\264\273\275\026\242\360<\373Y\347\275]v\\\275\262\355\341\274\207\024\205=\004i\001\275\335\257]\275`M\264=\246\014\226\275P\201\r<\277\177?=@\263\314<^`\330\274\260\201u=\342\205\254;\031\3369\271\276N\034\275\207\313\016\275\2329\300\274]\261\n=\221\267\033=\207\257\234<\374\343\200;EY\213=-\244,\275\240\322B<\202\030\277\274d\327\260<f\357\001\275\217\255m<\306\333D<#<\237=\320\351\243=\276\260n\273\253\353y\275\006P\225=A{R\273\003W\311\273m\375 \274\257\026\235=\360\352n=\006ue\274)\261N\275#\352:\273\336\350\211\274\360i\213<\370\036x\274\207m6\274\334\001\343\274\342%\311\274\n\rX\275\332\350$\2744\224J\274\233KC=\230h\223=\213n1\275\034\365\272=\241\214e\274x\313N=\343\215\240\275\207\035\333\2743\235]\275\370i\311\274*\256\026=\304X\317\274JF\317<\221\362S<\366\303\030\274\225\327\t\274\3278V\275\201]\023<Z(*=g\275\233\274\313\300\207=q2\371<\201\332\221\275*\234\320<\316\3674=?\3261<1m\205<\343\236\272=\226\213u=\237\345M<.\214\274\274\272\232\236\2758\314\014=~\272\333\275\344\217\233\274wr\177:9\215\266\274\355`\213=\031!\264\273\327>d<\263\"\255\2739\272\230\274#G\001\275g\221]=\215\3120=C\037\321<\2435\023\274\3707\317<\215\007\242<\374\001^:\314\302\345<\002<\220=Z\255\351\273(\322\320<M\r\363<(\310\240\274GLY=\322(\202=N\000Y\274\031\246\245\274\371\014\303<z\301\347\274\002*\302\2754\300,\275^\303\240<f\004$=B\342\232\275c\305V<\201\036\305\274\310\271\305\274\1778\243\274\320\263\307=:\017\225\273\213\337<<\316\240\217\275\374\004*\275\323\217\202\275\363\273\306:\227\002!;\244\233\210;g\375N=\030w\354\274\'\260\264;\255U\201\273&\374]\274\233|v=\275\334\017\276\005$\343\2742\321~\275\372\300C=\000\214\264:?/\024\275\223\005\207=\261\220\004\275\020\001_=\337\260=\274\210\2152\275\004\010e=\213\254\000\275\313\252D=v\315\006\274Iu\317\274\301\024`\275\214\222W\275\313N]=\3129\267\274\3005\022=\000\324P\275\376\007\220\275\271\020\215;\255\334G\275IL\332<\267S\202\274\315\260\245<\340\274\027<c\177X\274&\003\267\274\304\207\255:\376\373\210\275\344\251\301\273\233 V\275\362A\350;\270m?\2747\032\034;40y=\0268\244\274:Pu\275\355\242\241=\275\254M\274\214( 9\321\214E\273>\010\225\275g\277\256<v\024\010\275]\016\001\275\215o\223<W3\265=\245\267\031=\361\252\256\274]M\236\274\320\341\220=\336F\036\275-\325\325<\312\216\302\274\277\202\005\275\035\367\334:\004\300\266\275\340\350\206\274\360\n\353<{e\027=D\005\210\274&j\230<\232n\301;V\340\017\275z\374\232\275\336h \275\237\217\215\274\231o\026\276V/~\275\022\221==j\314\033=\\\277\220\275\026\034\357\274x~0=\306\271\214=(\313\033\275\347)\214<A\226\371\274\213\350\230;#\005\240\275Q-D=\315z\237<h\3720=\373\267\215={\313\221=\355\314\274\27416)<Y\177\341;\t\337\353\273\361\205\245<\025\231#\274\325\214\207;\320D\202\275\006\234\313\275\n\337\234=\230\231\003<\236\256\";@\310\372<\354\327\217=\237q\334\274tL\344=\204\362P\275\243\342\337=.*\242\274\236\232P=#+5\274\203\276M=\313;\207<}\200\024\273\2408M\273\364U\370;\303hK\274\232\3127\275\240\352\273\273`{\342\274&\201\233\275s\353\324<\330\362\035<f\350\240\274\276\256\371\273W\227\'=\330\343\235=\377\037\334<\326\222\336<\362\233{\275s-\267=\325\213\242\274<\262,=\316\274a\275E\313\017<\223\204\222=\201{z\273\026s#=\341\010\030\275:\241\213=\033D\022\274\267V\205\272\017t<\275\345\301/\275x\027\206\274\372\313\235\275h\270f<\234\336-\275\000\340\333\275\322\262\260\274w\377\000<|\276\004\274\376X\313<\027\033\356<\033-\022:\030\233\034=Hg\215\274\014\'\225=~\273\214\274\247\030\220\275\307\346\004\275\217\314\217\273\363\317\335<\371!\307\272\202N\270\274\261D\232<|\255\231=\315V8<\345\223J<\256\236\356\275\300Z\247\274\362/\301<\032\232\262<\005\343\312;-&b=\201\230\377\274\337\213\227\275#\356I\274\331\017~=\257\236\210\275&s\264<\311Q\316=\204\204\245<I&\342\274\247\004\373:\0060\267\273\310\306~\275\021\263\010\273\001\343L\275P]\256\274\032\351\215\274=+\202\275\37417\275r\266\313=\360UM\275\3728.=\007c&\274\337c\255=\025)\024=\352IK\274D\026)=\231w\217=L\021\272\274\315I\276<1g\217\274J\365\\<l\354\256<\333\247;\275\200\377\356\274\276\001\014<Hl\204<O\242\220\275D\325j\274\230\202\004<\320h\022=\206\2265;\241\241\345\271\'\001\201=\224\325x<\267FT\274C)\215\2749\033I<{\205\333\273\201d\250=P\264\016:pN\241<\317sI\275\220[\207=\034\316~\274\312jZ;\223\001\022\275\342\216\377\272\235hn\275j\361\302<\333M\216=\215\363\236:\"v\r\275\003\353+\275o\\`9;*\222\274l\372\311\274\371Yc\274N\016\253\274\322\241\260<w\250\265<\275\264\365\274i?i\274\2061x;\201\023\202;\263&O\274\335^\256\275/\252\263\274\026\367\372<\205\235_\2743\310\362<\273~#\275\250]\215<e\026\324=\267\203\307\270P\353\340\272Qy\314\274\332\016\226=\373I\207\274\26352=T\372u\273H\227\363\275\"/\033=\017\243\217<\343\235\001\275\324\006b=b\232\251\275\200\220M\274h\323\270\274[\025\246\274\323V\024=\247`\021\274\315F\236=\253F\t\274`Ki;\022<e\275`\262U=\210\230\007=\026F\342\274\345H\366\274\354\330\276<\'\355\320<\020\200\363\275\000\216\034\275\322\217\300\273;\000f<pnq\275\273\036\224=A\316\002\275dmo\275\207\033\350\274\033?Q\274\372<\350\274\214G\276<k_\004\275v\t\021=\362\016\242\273\000\276d\274O\371\247\275E\327\227;\233n>\275\213\321t<@\2146\275i1\003<\335\305\360\273&]B<\330\236C\275$\341\201:\202\000F\273K\205%;\322\033\000=\334k\004<E\336\361<\372V_<\330\324\205<0\213\300\275\235\306\000\275\230h\335;\304\253\027\275\347J\200\274K\215F:7\032L\273CO!<Q\360G=\212\352\037=PA\276:\017\336\264\275\264Ao<\022,8<\227\377\037=A\2341=3\026\362<HS\310\2750\003\035=\r\366\362<\303q\224\274\314J}<\224\222\005\274\031Cx\274\374w\023\274\236\201\214;\t$\n\275L\347p=\023\314\005\274\343\343,=\255\t\024=\325\236i\273 \240\235\274\003\227\241<\026x\377\274\374\341\267:\237\254\220=\r\367\0249\276\253\253;}Q\'\275\213\365\002\274\304\312B;e1\257\274SZ\t\275V\350\212=e!\024\274`\225\'=|$\001\275\203\245\220<\202\035Y\275-\343\236<b\n\032\275\000x\277\274g\273\"\274\247\023\321\275\020\363\255\2743\023\006=C\245e\2754\222\362\274\265\260f;\261\310\264<7y\213=XC\023\275\217|\333\274\362\364\037\275\375C\221\275\352\245h=U]\217<\206\3524\275\355\030{\274\214I\240;8G(\275\274\255;=6R\227<A\370o\275\307}\361<\201h\021\274\374\022\211;\242.\377<G\253W\275j\251\300\274%{\247<\004\355\377\273vg\307\274Lt\005\275\373\271w\274g\002\024<X\317\211\273\007\036\302\274Ms\322<3\361\004=F[\273<\270@?\275\031\253r<\305]?<\237\014p\274\224e\257<cU\\=\335\330%;\226E=9\305Z\247<c\356\237\275\275\r\005<d\365\245=\357\010f\274\360\013\030<[\204\r\275i\002m\275\306\027t\273\310\r\242<u\213\333\274./;\275\257r\313\2746\364\237=\005\023\002\275\204R\224<\372\0311=*\325_\275\214\022)\275\303\215\362\2749\354M<\306\243#=!\250\375<\235\337\222\274\010 ]=\302g\374\275X:\235<\2245(;\301\312\365=\023\210\206\274\375\316\216\2754\241B\274\305\026y=\004\252\201=U\246\021\275\213\2144<\211\303\2139R\334g=D\010\316\274dW\257=p\3712\272\276h\300\274W\004g\2734\274\373<\305\234\001=\277\023\373:\374\272\360<.N\304<\361B%=\233\316\304<\320\302\350\274\272n\352\274\321\372E\273N\375\220\275\247\022\235\274\0035\227<O\2572=U@\324\273s\206l=\256\245>\275\350\317\273\274\233%b\275\210\205\313\275\273\272\212<\007\017\237<\035\357P<~\346\200=\017%z=a\032\240<\277\\\224\275{7\237=\232\023\\=\351\265g<\200y\243<\t<\215=\226u\344\274\363wF\274\365\257\345<l\"!\275\231\021\230=KN[\275\326\346\217\274\313E\276<\366!H\273j\377v\275\374\350\371\274\335W\337<O\022`\275c$\357=W$\211\274[\335\364;\"\311W\274\227\315\327=\275H\210\275s)\264\275r(\256;F\365\014\273\324\225\246<2\336)\2741\237\332<[:y\275\367\331\247\275\017\335\353\274&\203\231\275\232R\301\2744)\341\275\203\007\237\273\t<\330=wb,<-\216\t\274T\352\307\274|1L<3\231\221<\352G\177<t\234\004<]\021_=\204\256\273\274\376\r\214\274\325\223s=M#\240\274f\307\003>\314`\003\273\010\372T=D\342\327\273op\344;t\020\227\275n\306\342\274\024\t\245\275}%F\274\232\211\301\275\327\254B\275g\277\340=?\316\026\275\246\353\271\275vq\r<\005\224\035;\0329\010;\257o\262\27452\027\274\2726B=\262\016A\275O\345\035=\035\271\240<\300T\371<>\216\022=Q\220\310:%?V<\372K!\275\022\203$\275\307\315\037<\016\301\242=L6\331=\007\226.<\'\302\316;s4==\n\271\261\275h\333\017\275H7\376\274B\353G\274\007+|\2759\033\326\275\334\253C<\300\333\013\274U\004\230=\023\034\014<?\306\323\274\274\343\227=!Xl=i\303\032=+\233m\275\004%\020\275x$\223<*x%\275\340\004\025\275\230\372\034=\205<5\275~n\255<4b\361;\201\317\341\275\2179@=\335\230>\275\022tf={\263\223\275P\314-\275H\372@=\n\253\202\275(\000\177=AN#<eKA\275p\272?\275\365\274\277<\n@\207=\305\354\205=\354\373\241\274\356_\002\275B\256$=\002\345\024\275\344\366\373<\271\2541<%\035\366\274\313\232+=\204\244\230=\027\315(\274*\246\001\276\305M\363\274p\312\223\275\306y\3209\177Q\275\275S\035\236=\306@\345<\304\3654<%\203\220=\237\261\007<\330\206\235\275\254\317\003\275/\367\237;z\321\215;(\365\227=\340\225\360\274m,\273\274\354\201:<\010(\001\275\364?1= \016\026\275\311\r\0039\206W\000\275)P\\\275\256/\027\273\036\014\324\274\273\237\227\275wC\362:\"\367_=\013\230=\275\323tX<\024\314\243=*b\240<\004\241\265\274\325*)=tN\262\274GL\230\275\264\253\313\274$Io\274\261\256\036=\201\025g=\2136s=\203\277\036\274\nd2=\031\tr=\336$\341\2743\375\022=\246|\245<\020\326\345=\317\247\366=\014\177\032=\334\261_\274\301g\215<\007\222\227=p\004\200\274W,\372:\320\201\302=\314\243\035=\223\010\322\273O\247\323\274\321d5\275N|-=\257\335J=85\201=\025\331B\275\277:\276<\224\322\234\275\310\312J=t~\033\275\246\275\022\274\367\273~=\307&\215\271%8G\275d\277v=|\014z\275E\005\231\274\340\266\276\273\337\256\340\274\333\000\002\275\330\370\250;R\335\010\275\240\200\345=X)\245=\3327\003\274\355\335\212\274\244\306\252\274`\252\214;!\212\346<$\"\004\275\204\037\251<\2126\226=\373$\206=\216%\225=D\327\272\273U\'\307\274\032\2558=\312?\377<\227\'f=0Y\227\274\021J\014\2741[B=|\242x\275\014o\264\273$\374\252\275\231\003\030\275\327{:={@\027\274\364)\211<\245\244!=.\342\235\273\312j\372<\332\314\032\275\216\272x\274o/\304\2740C\212=\320>\032\275\326\325+\274\023`\214<tDh=K\333H<\274\3541\273AS\210<\312\202\236\2742\260/=\306\323\014=\310\305\343\274&\177X\274\243\326H=!\000\241\274i9\317\273\207H\220;\366\213\215\275y\364\021\273\217E!=\265\0052\275\227e\364\274\325\275D\275\370\"\262\271\335\336\236;\264\261\346<\342\003S=Uw=\275y\317Q\275\242}\326\274\276]\272\274\304\324\333\274\036\2455\275Y\252C\274$\2134:&]b\274+\205\022\275\022\250:\275:\200_<~\323\275\274\343-P<\002\256&\274\r\375{=\233\333\263\274\336\345m\274\263k~=\215\243\t=\254\340\211;mX\234\274\242jb<\235\006\361<\017\245\362=\026g\215\275\242\311/\275\037\201\006=\316\"\276\275\003fu:?\376\343\274K\363\223<8~:\275k\226\222\274g\010\014=n\'\356\273\004\253\253=A\331L\274\211k\314\274\321\211\027=:\276\247\274\215\253(\274\317\224`\274\256\233\223\274bf\337\274\004\231g=\333k\375<\303\365\200<~u><\340\331i=j\253\345;\245[Z<\261\341\214<q\013\363\273H\356\207\274\300\363\343;\033\264e\275\0010\211<\2613\036\276d\335Q\275\376\210i=\263\305\223<\025\360L\275\335\342\213<\311\353\341\275b\226\371\274Z\222y;\031O\377\274\300\013{\273W\n\003=Bo:\275\013\234\304\2754j\230<Uo\224:\265\031\241=\346\373\"\275\3772Z\2758u\245=\340\363\230=1\315 <\214\027\n=\273\010l=)\243j\275z\267\215;Tl\234:\003l\032\273$\344\237\275\037\227[\275\177\024=\275\351\370[\275\345\371\246<\375w\223\275\004a\016;?\267\001=f\313\222\272\272]6;\327\350\224=\363`\"\274l\217\337\274\265w\245\274\246@\317;\370\250\022\274\206\030\233;\313\201\353\274\"1?\275\022\210\032\275\332\034\222=t\030\210\275\245\003\265\274\266]A\275[\304\276\274WY\371<\205\245\266;\006\010\374;\315\002\356\274\205\3118\275\014\311\017=8\177\350;\206N\346\274\225\363\322\274\266F\347\274\252\327\206=KFy;\251\256\216<\0148\212;v\302>=\376\366\223\274\016\360\205\275\014\010P\273\357(v\275\200\372\360\274\314,\016;}\222\232<\000h|=\223\016\335<M\277\024=\364\322$\275T\231t;K9\026\275T.\033=\314hV\275\205\263\333<\210\343\342\274\354\021\331\274_&\333=\255s\327\273i\256\000\276\343,Q\274\032i(=\2524&\275\243jL=\231Gd\274\033O\r\275\302\"\014=\037\tP\274rz\260=\215\233r\274m\307\253\274\307\354\200\275u\275\267\275\3023\'=\255\357\226\273\253\306\305;f\214\263\274\367\350*\275\250\241\374\274\030gy\275r\217\000\274\343I\235\273\320\2470<\201[\017\275N\213m\274\034\2238=\207n\223\275\313-\203\275{\231\302<u\262\320\274\236\030g\273\222\204\253\274v\314Q\275\346p\337\274\210\256\030=\036.\342;\307\264\364\274A\271\373<\002\361\004<\273\2403\275\313R\024\275Z\323\006\275\241\033X=\334T,\275)rN=`\213I<W52=\363L\231\275\370\201V\275Q<A\27513\275\275\353}\224;\276A\\\274\236IK\273\333\262\\=\370\212\371\274TH\037\275\353\322\212=\254/\033\274gf^\274W\021\003>\211;P=\345|I=\033\230\241\275\272k\214\275\341)\362<\225\027\253<$\216\014\273\257\317\262\275\036!\316<\3208\032=Ca\n=?\031\224=\357\274\r\275>U\276<0m/=\233\222\"\275\321Y\266=\252\253\202=\321\277U\275>L[9\306\002\227=j\243\237\275a\313B\274I\251\277=\001u~=\333\013\252\275\303z\034\275\320S:\275\337i\r\275\205\273\257\274\230+\300<\023\271Z=\317#\362<&\261\262<\342\234\020=\343*\221\267Bx\207\275\215\371%\274<!\327\273\013\227w\275\003t\207\274\010\214\321\274`\276\200\274%u$=\037\031f\275Jr\004<4}`<\275\372m\275\216_\266\275\221Y2\274\276\227\\\274\216\256\352<\236\334f=\304n\211=E\340\\\275o\256\245\275\372w\t<\333\312\253</\227a<M\224$\275M\372\351<\366]r\275=\343|<t\264\201\275O\370\332=\370wQ\275v\211\272\275\343\210\352\273}\246\322\274f\365\276=fB\260\274\335\314\213<\306\266%=+\'\357:\261\352u\275\227\342\207=\353\260w<\236\210J\275\031\2314<\336\2107=\313\030s<\251n&\274W]j=#\234Q\275\2757e\275\336+\261\272%\2233\275%\201\342<\271\324-=T\347\234<QA\220=\227\324\007\274\224\257\354\274\177T\001\275\273{\225\274\0362\354</\361\311<\252\344\232\2758\252\216\275$S\000=\251\034\363<\233\002\260\275\242 \250=9\234\311\273\275\301\207;N\200\337\274\342\211&\274L\'\311\275\252b\357;\321s-=\014Fz\274\252\317\317<\276L\277<\215\\\005:m\231\200\275\217\251K\275gL\372\274\267\215\337\274\221\210D=\200\211\031=G\324\000= \014\007=\177\215\240<6y\236=\177Z\250;w`\242<\262\312>\273h\364(=\'o\212=\013{\263;l~\310=\267\342\375\273\t\250\035=u\013\240\274\313\313\025=]\341\312\273\212\320\365\274\222\325\233\275%\014\020\275\020\251}\275\235\210H\273\372\250\031<s\201!\273f\226#= \217\263<\261\240\251;1(\212<<p\314\275\373\346F=[\346Z\275e\215\250<\340\244\301\274\273\006\314=\"F<<R\022\026=\362`\330;B\007H=s\342\267\274vh)<\027r\243\275!\302\233\274W\210\010=\265\200l<c\216\222<\030\362\340<\327\245F=\316\3277=\256\250\004\275a\003\253\274~\341\271\274\016\020\013<\tj}\274D\203\224\274\303\270\241<\2046\205\274f\037a<\002\254\272\274\267\256[;\341\265\227<y\346\000\275\'\372H=\007\235@;\302\232\034\275\374\004Z;t\230\303\273\225?\303<\300\325\333\274\tOO\273\375\325>\275~\377\326;\211\237\275\275\374\'\003=\305\271\'=\206B\246<\210\213D=@\224\211\274\247\336>;\004\005E=\036\254\010=\312\007\272\274\267$\213:\001wt=\375\237\014\275\250\226\242=wT\205=w$\342\274!\257\n=n\306\277<\2538\210=)U\330<@W\t=\024\272\332\273q\241E;\227\335&\275e\375}\274\250F;=d+\267\273\302\364`;\214<\216=\3450\035<\320Q\325;\025\017\333\274\017_\030\274\346`\260=H&\007=\021\364\217=\204\254\002\275\261Y\222<2b\024\274\243\243z=\255=3\275\005\177\322\274#w\355<\372\362:\275\346\367\010\275\221?\224\275V*S<\356BQ=\345\021\204\273\355\\o\275\234J\227\275\260O\211<\314qP\274\024y2\275\230*\035\275\257\206\034\2741dA\275\035p\326<\304\335\205\274-\260\213:Z9s=\254\266\001=>h\177\275\210\355\000\274\014\035p\275\373\377\210=\033\226\234=\233Z\255<\027^\267\274\326\217\200=t\212\257<\350%\354:\355\352\276\274\021w\250\274i\260[=ba\350\275\0328\320\274)\256\276<\232\205w\2753\251k;\221^,\275A\266\017<=\363\037\275{{{<\276g[\274l\237\205<\341g \275=\206\033;\247\206I\275\204\216\354\272\322\212\227=0\337\346\275\r\024H\275\204;\2379q\300\222\274\001\320O<\376\005e\275\030\203\335=\014\'\010\274\201\231\365<\003I\355\275\3671\241<+\204\220=\233\177\210\273L\341\002\274\236\315\333\274+4\311=R\005\t\274\311\237P=#\320\237<\271\2769=\227\325\243<U\236h=\221\275\265<$\341D=\253(\312<I\2257<\025\316\343<\201wg<8u\n\275\223\203\205;7<-\274\335\314\027<7\3324=\305\307\037<O\334\027<L\321\036\275\334\256,9\260nm=y\223\201\273\007\244k<\265\022\'=\013\311(=8KH=\336\0275=Fi&=\276\024Y\2755\352\035\275\3557o=\202\371\344\274mC\027\273\223\371\315\273\374/\220=\022r\034\275\345\307\234<\373\231\026\275\007\307\220=r^`=\037\315\003\274\340\351\017\275\211\334\366=W\215k\274D\301\213\274\236\225{\275\372\360\344\273\335\235\212=\'\t)=tX\275;99V=\371s\350<E\304\301<\016\004\370\273L\345\226\274\335*I=\276\037a\275\303\373\334=\005\260\013<gt\t\275\000\351\351\274\234\341\213=\024\251\310;\317Y\206<N\375b=\351\023\322;\367;\267\275M\233\031\275\277|\235<O\253\233=\251Y\324\274\237\372\246\273\330\362\216<\013\016\221<\250\276a=%3\345;\325\233\370=0r$\275\227ko\275\356\'\333\274\263m\206\275\242\372\331\275\024q/=3\374\030=o\'d\275dc8\274bm\254\2755\205\271=Q(\006=\342\263\240<\370U,\274\030#\237<0`\224\275\322S[\275\255XP\275\033[\001\274\310\235t\274\022oA=\302\312\305\274\203\207\247=f.\242=\013\351\335;5R+=\245\341\013\273|fB;\220\352J\274\361\001\220=\346\267\235\275\371S-=\0077\312\275F\240\213=\350h\222\275\004\002\022=\370\026!=@p\361<\036\205\205\275j\311\371<WJ\006=\\\034e\275\265\323\033==\200V\275\004\311b\275\326\353\244\275\\^\303\275T\020\232\272s;\313\274\335\301\210<BV2=\036\322<\275\272\326\006\275\315\221\256\275\314_I\275\242\226\263\275\033?\006\274\177\t\246\274@M\214\275\335-\247\2748\202\241<\201f\324<\213\226 <\354\335S\272\002\332\365\274\376j\201\274\303\234\300\274\001\204L=t-\345<)t\257<I\200)=\030\'v=_\274\273\274aC[\274OyD=7\373R\275\0023\236\274m\362\212<\302(_\275\265\037\322\274\211\225~<+7\036<\3778Z=\177\'{<9\261\037\275\263\234\242\275\200\030\253;\326\336\310\274\t\245\234:\314\371M\275.zl\275/\252\334\272[Z\207=kG\033\273\256\"\247<\277\360\210=Q\264\316\274\264\032\365<\334\233I=\000\213[\275V\275\257=\312kG\275\016\242\271\275\317\220\"=\361B\272;\337\255`=\261T\255<\246\243,=\354\301<\273\032\307\014\274\360\346o\274\365J\000\275\277#\033>$-&\275\210\027\231\273\333\274\307\274\217\335I\273\357L\225\274\367\310o\274\004X\234\275\344\342E=M\376\275<a\373i\274\tK\320<\305%\355<\216\373\262\274\225\222\261=\207\237\000\276 \031==\347>\r=\232I\224\274M\276\271\273-\246\275\2745\363\204<\036`c\275\036\t\010\275p\032\223<%\345\'\274\030X\346<\346.\327:\231\227\221\275\320c\002<\274\252\005=Oq\006\275z\353\271\274n)U\275\260\241\204<\352\2544\274:B\003<o\017/<BD\230\275\000\0309:\037#\321\275*(\360<\353\277!\275+V\311;\251\216\243<\256Z0\274|\204\307<\336\372<\275\377m\231<s\257\271\274\244x~=\334Y2\274\316\235\010=\n\253\234\275\352oe\275k\020$=3r\331\274\373\350\216\274m\222\353<T\203w\274y\231\212\275\246\032\347\272\227\005|\275\377\207\r=\374j:=R\320\262;a\244\030\274=\032u<\030\373\003<\374Jg\275\225Sl\275x\350f\275\262~\267;8\277.=\2440\327:&_\310=n\226\215\273\261V\304<\002\317z:kBZ\272V\367\331</\211\017\275\230(%;x\177\237\274p\303\226<\231\354\360\274\325\023$\275\n|\037<\300\343@\273\322:O\275\323\246@\275bE\254\275\346xq<8N{;\263\304\000\274\215\304\375<\204k\310<E\252\252\275\362HG=3}\242\275lNv=w\322\021<\022@\351<!H\307\275\354\243\010\274\376L\370<X\010\220\275\232L\021<\245&\031\274\334\351\236\275\210\250\272\274\365\230B\273 k\233<\201\367\270=rY\231<\016\235\256\275\"9\333<\013p\222\274,\327,\275\270j\000=P\307\346\274\n1\366\274\216\321\024<\357\3021=Gu.\275f\307n=\356\201\350<\025\344\307=\245sW;\321\215\312\273\204\020\r<\355I\233\274\225F\361<\342\002\263\273\002\245w=W\3636\274h\337\016\275\337&\033<\004M)\275q\236\335\275\231I\021=\271\214I\274i\274\371<\252\356\r\274#\256\205=\0245H\274\345\266\276<\271\016\346\274s\035\215;+\023\333\274\036i\360<k_\246\274]WT=\264\353\256\274\315\350\205;\261FQ\275,\3154<\212N\025=\277\352\037\275m\330U\275b\253%= N`\275B\017N=\010\237\312<^\004\260<\315\3057\275\013\036\223\275\216\232\300<sb\263;\372\225\201<K\344g=TT%=O\265\361<z\225]\273zC\\\275KJ\001=\213\220\327\273~8\234;\032\243?=\273f\272<\213\t\264=.\357N\274\270k\017=~\377\364\274\302\334\362\273\332\244\"<\233\256\364<,\264-\275\363e\362;\372\315\360\274\023\307\266\275{_\020\275\233\246\306<\313h\222\274\027\027\236\274t\000\226\275\263mR<\027\337K=\304\005\t\275Th\313<\265D\002={\202|\275\331>\210=\242\216\370\273T\022\332\273\013~\204<\246&\317<X\327\234<vb\r\275K\021\020=]\373\024=\220\364\017=\021M*=\272C;\274\316\325c\274\016\266y=\337\247\226<8}\213\275\373\316s\274\245\024\203=\037\nB=p\317=\274\300k\316=\363\017\202=\342\210t<\340.i\274\242V\026\272z\n\225\274\377U\266\273\304\226v<8\235\205\274:\334A=:<p=\322\213\221\271\321\025\t\275\021c\233\275\022\032\255\273\364\203#=\244&\037\275\033$\220\275%\014\202=\342j\237;1\255\020\275\024\313j=\356\376\370\2742\001\030\274e\225\022=\247i\033\275U\352C<\273\317\010;\252\336\260<\374\300C<\n\212]=\3207\201;*t\250=\274\331E=\256L\037<\211\237\242\275\322D\370\275\342\336\034;\200\321\300\274\310\304j\272p\342\021\275\217!\237\275\373c\370\273\363\235\001\274\214\202\350<\251\211L\274!c*\275\227\227\304<\003\313\256<\353S`<\237\335\202\275\313A\333<\224\364:\273#\314\305<JmP;\237D~=\232v\253<\245-\304\275\010\375\026\275\311\026\301\273}\334\212:\030tY;\" `\275\322\tP<9\252\240\272$\301b=\223\317:\275\023\364\030\275Ui\211\2749\244\202=\025D\246\274$\213\027<\237{\332\274\010\336\034\2745=\245\274u\214\371\274\276\023<\275b\333\315<\010?\222\275\351\307\262\274X\341H\274\024\246l=\220i\345\274\3434\301<\373\256\206=b\333\267=\306\'\267\274\215\376\200=j\350m\274\036\266Y;N\215\245\2744\'9\274>\253\217\274W\"%=6\236\\\274\354\355\203=gi\024\275\341+\244<<\317\345;\302\332\013\274\t\366\034\275\274\"K=M0\340<\305\231):X\236\323\274\246\236\207=\360\221-<.\212}\274K\253\036=\264\200\216\274\344\241\252<\241\340R;\352\214\340=#\362\277\274m\003\226<\366,\350<\331!\306\274\230\334\307<\034~e\273\200\321\005=\220d\346<\277Zh={v\004=\033E\021\275\005\335\302\274\205\372\373<\371^2<\213\266T<\004{\264\274g\001\246\275\016\331\017=\252\256\232\274\213\033\343<Eg\035=\270tt;x{\223\272R\357\204<Sx\240\275IO_\275\232\204#;\246>\030<x\342\237\275\241\177\246\274L\027X\275\347\036\223\274\233\216\260\275zC+9\213\263=\274$\315\260<\232n!=E\233\210=\201\0072\274\206\013\273\273(\221k<\323\027e<\310\'\001\275z2\233=\375\027\242=b\220\254\273\334\346d<\272\267\312\275\263JZ<\220\251\t\275Xj{;\215)\000<\245)\350;xL\326<a\004e<T\347\000=`\024\301\275\013\255\204=N\326\263;\363\314\255\274\244\003\234\274\347\223\001=~\360\276\275.p\326\275)dK\2748\rr<\016WK<\n\221\205=\343\255\364\274 \002(\275\230~\226\274\326~V\275\225C\221\274:6b\274,\352\231\275|)\005>\003\261\364\275_1\017=\345\202\322<\237+\263\275\323@\276<\335ES< ,n\273\247\210\252;+\320\031\275t\302~<4\271\017\276\230j\377\274\374\273\242=\327\022$=\265\234\002<\261Sg\275\207\3151\275\2144\242\274\341\017;=\343\311c;\020c\305\274\243;\211=fi_=\032\274\272<\342E\370\274\032\353R=t\376>\273-\261\226\274\372\r\343\274\350\227\242=,\206I=_\323L=\230\021\n=<.c\275b\023\010\2750\036a\275>\226\272=+\177>\274\363vi\274\307Z\233<s\177\004=\t\031\345<\274\346\223=]zW\275\272c`\274\254\177\204=cB\220\274\224T9\272\246\204\311\274\335\361\237=KU\272\272\'\237\346<\320b?\275,?\263=\203C\217<n\007\034<\246\351\215=l\361!;\251\214\201\275\2458\275;C\205!\274\267\277\234\274\247\360\273\275\022\267\246\273ZK$=\334\272\360\274\032p\000=\246KA=F\272\341\273\250V\023\275z\366\201=\326\023\001=\362\243\215<3{\233=X\r\337\274g\361\217\273U\257\255\273{\330B\275B>*\275N-j\274\014\356\270<g\373S\274\0308\254\274$\367\t\274=\231z\275\227\257\003\275\353\006X<\324$\317\275\261:Q\275\007(\031=\257\013\226\274\345>\207=E=z\27553:=qy\241<\255x/\2740\'\330\274cuN\274\334 ^=\031j\224\273\000\004\022;s\2741\275G\335\030=\277\231\373\274C\274f<y6\307\275D\242\206\275\301\233\211\273\246\355\272<\344qD<>cF\273\343\246/=v\2239\275\273\243\331<\302S\254<\207\251\352\274\t\263\216<H\201\310=d\360)<\200\027\354=\314\211\"\273\3606\236\275\335\213\244\275\320\316\317\274!n\231<\300\347,\275\277\007B=\272\240\205\2748\327\014;\221\0371=\177\367\275\273fu\304<\005\001\322;\004\223\332<\277\305k=\213v!<\265\335\341;\005\2457<mb\001\274\007\221\377<;\252\202<\006y2\275\2366\241\274&\035H=\317r\246\275\201\003\'\274N\243$\275\361\335}\274\223\rG\275Os\257\273\226\210\307\275G\t1<+K\254<\010\301R\274,\2715\274\376\037*=\354\025\264<t\2651=\325\003v\274\"\017\200\274\326Y\301\274D\253\346\273F\022\336\274q\347w<\255\313$;]k\025=\271E\252=Y\216\344<`\301\213<\362s\240<8.\027=EO\222\275,5\331\274sn\216\274z\332+\275aA\364\272W\325\256=X\r\010\272@\343%\275\227\257\326<\365#\254\274\222=\210=$\305\312\2734\3146:\313e\227\275\304\206(\275\266n\305:pH\027\2745\3070\275\203\357\212\274\007\321\244\274\316zq\273\307\302\014\274\337\235@\275\013;U=V\265&<QT\201=\365\204\250=(2\3029`bF\275\022\376\242=\346\207}\2756[\303<\2656\274=\375\001\304=|\377\216\274\220\2737=\020\246\375<`\217\336\272q\205\213=\233TF;n\261&\274\230\314\205\275\247q\032=\274\352\016\274\2473\021\275\016\241\200\275\327\330\036=\014\340b=\200\260@\274\371\025\355<\010\3500\275\337\371\034\275\"\365\240\275\361\215\366\273\366g\037\275\320\264\316=\t\213<\273\217\346\236<\316R\216<U.\243<9\266\272<!\377q;\230\271Z\275\201\207Q<\201\324\026\273\265\367~=\375d\300<{G\226\273r\351*<\355H\004=|\242s=\350\250\334:\231\315\275\273z|\341<\027\225\230\275\t\226a= \233\000=\247\323\227=\037B\253<0\027\360<\365f`\274\322\370%<\203\225\232\275\247\325\314\275\030\340T=%V\244=\234\232S\275bB:=\312v\364<\034.\006\275T\231\032\275\016\263|\274Z0D\274G \347:\353\031E\2752\347\032\275\202@\356=\241N\257\273\256*0;\013*n\275\334g\370=&I==\007a\\\272`\317;=-\251\362\273^\374\273\275\211\222\207\274\2530\306<\330\356\031\274\007e\237=)e\r=\333\351\020=\201tU<4\210#\275\246\005\215=\n\356\'<\r\022\254\275\013\321u<\00406\273@GB=\303\315\024\2746u\272<\330\322\222\274\377\234E=\317\005_\275\246\312\217;\221\017\010\275\234\376\306<\331\035w\274\252f\310=j\334\301\275e;\004\275.[-=\240\014E\275\314\3314<L,B<\264\2511\275\324\013w<\007\3727\274\326\374w\275\247*]=s\177\034=\361L1<\027V\343\274u\246a<d\020\221\274\2771\200<\256h\335=\225c\00598\247\354\275.\256\313=<_D=\214/\211<\0316\235;\347;\032<\327W\344<\313\264C=\004\r\210\274c\360\244\273*T(<V(\227=\335\201\216\275\037;\004<\273Q\247<S\324\033=\253\030@\274\302\213\214<\275H\025\275/yG;6\245s=%d/\274\314\223\333\274\0278\326\274=\310G\275Lq\302=\365\257\252<\373\373\277\273\342,&\274\023O\272<YU\252\274\217\262\241<\362X}\275\242\210\022\275K*=;\275\'\336<\036\010\375\274P\342\257<\270\021\322<\327\262\212\274`\275\261<\374\377\001:\306\247\013=\353\003\034=\344\034\231\2732 `\2736\337e\2744\245\267\275\333\261?\274\221+\026\273J\224\251\274\021},=w_\034\275\314O\002\276\np\270;\'\210w=\247I\234<\333\330\"=em.\274\374\032\300\272\257\255\020=)\313!=\306(\t\274b\362c=A\332\002=vA\222<n\264\360\274\360\212\307<L\247 =r\3470=\365\232\317=\305\010#\272i\034\220;\332\254g=AvQ<\364d+=\021\027\275<\242+O\275\307\304\366\273\256\274O\275Co\275<\251\025\273\274\272\353\214=n&\002=\320.$=\324\377\235\275\325\007\325\274n_^<]\272K=xj\225<\010\300\244<\027\235\225;k\205.=Ec\250\275\243>1\275\3650\010=\260\274\376\274\033\232t<){O\275!\254\020=\243\324Z=J7\206\274\240k\t\274\232\223\013<\017>\366<Gx\035\275>\320\236<\2468\205<\276\315\245\274\305\346\205;\206\246\031\274\206C\004>U\t9<\022\216\361\274\377\036\016\275w\314\233<|\226\227\274\311f\355;\245\253\"\275\2532v\275\005;\n\275\204[\035<\244\333?=c3Q\273\360\321)\274x\202\241\274\022\255R\274\365\331\241\273\n\255\236\275\374\320\030=\247\357.\275\316y;\275\201\366\203\274\003Q\202=|:R\273@\212\021\275\306\200\000<\227\366&=\303\t\032\274\037v\324=6R\235\275\220\374\325\273\363\367-\275\367\353=\275D\365%<\337\360t=<T\250\274\233\320\021\274\017\345\221=\347\242\233<\357<k\275\242\027\221\275/\325,\272P\251\020\275\313\000\"=\315\001T=v\341\000\274%R\037\275\002d\032=_\220\020=\323h\377\274;\355D\274\006u\035=\341\2241<\016\016\234\274(\026(\275.\274\222=\244\0166\275\252*}=\337\014\363\274\362\"\222=\264\2342\274\315\251\202\275\205\254\302;\003w\236\275T\206\204\275[\331T\274\323\2240=3P\t=%o\027\275\364\353\275\274$$K<z\2725\275@\010\024=\367/\\\27522\267\275,~\3378{\210\232=\270\036\216\274\206\007\270\274\231\372W\275,\026\231=\343\352\200<?,T\275@\235\215\274\005*w\274\307I=\275w\365\203\274\3146\315\274\226\253-\274Dp\360<\337\215\333\273S\325\202=D\177\277\274\036\347p\275\005\037R<\327\032K=\215\211\'<\243\352E\271H\\\266\274\022\034\002\275!\376J=\\\372\005=\336d\233\275\311%\330\274\n\3150\275\212\213\355\272?\303I\273kR\032=\377zD\274X\t[\275\301% \275\024\364u\274@\355\002=\236\246n\275Fz\023=\357\246P<7\373\236\275\271\361t=2\207\272=\034\233\340\275)\237\235=\253G2=\027\355\226=S4M\275\225\374a\275S1\232;,\214\327<\205\377\213<7\353\260\275\241)?=\270\335\225\273\362\r\000<\277Z\343<\200\354\241<\003\254\003=\275(\272\274\365\263\274\275wZ\r;Y\r\004\275\243\342\213=\373|\220\275\201A\321=@\272\311\274W\242P<\224)3\275*\314\252\2743\'\002=M\360\007\275\206\201\245\274|0\221</\206\367<W\304\016=\303\302\265\275\207U#\274\332\365\225\274vG$=\376\263\347\275J\321\235\273\352\010\314\275\373\344\377\274\020y\227\275\001\240\256\275\351\312\341<\001$1\274\351U.\275\037\nt\273c\316\212<\340/\366\274i\367W=\340\000o<\221\366\311\273\3164\245\274|zJ\275\317[7\2741\0102=\321}\302<\3776\254=\303\025\264<\3068j=\363\327\223=\261m\317<\324\254\204\275\310\213\006=q\311p=@\215\324=\025T\034\275|\"\201\274\\\017\320\274\241K\250\275\377\233{\274\241\242\261\274(\236\312<\374\245\233<\227\370\244<sr\n\274\275\265\261=Of =\026\305\247=\023\010\320<\246\277W<\t\354\205<9\355w\274\316\034\351<\341\270\031<YM\237=\204V\001<H\223\245=\376\253o\275\314XY=#\233l<2\223\221\275\221\225\035\274\242\360\330\274en\277<V\t\332\274\276\2643\275\270\303\364\274K\224\262\274\270\310d\274\007\331\001=\027\034B\275\363f\204;\340\277M\275\373D\264=\252wW=\3724D:\031\206\035\275YV+=3\375N\273G\027\206\275\276\270\277=\355%\302\275\'. =mw/=\'\251\265<\210\'\347<\230\032N<\302\324\366<+8\336<5\267\254\274\350\2419=#?\235<\377\225A<\201@\231\274\022\210\334\274\301\307\016\275;Z\013=\271\\\002=\300=O\275\321&\253=\353\353\217\270\264h\243\275\213\373\226=\263\207\337<\232\374\033\274\316\345\227\275\352\273\360\274\333\253)=\254\355O\275\200\257\350\274*\220\217\273$3A=9r\200\273\275j\267\274\255\234\231<\2655\007\275\204\225\212;\266]s\273\241\357\254=f\3558;\365}3<\313o\321;\027\352|<\212s3<\230\276d\274\212\to\275\3337O<\357\205\242\274\252\005\014<]jg\275Q\263\272\275\306\267^:w/\302\275\265\335{\274\372\2007=\334B\320<\347h\212<>\266\007=~\373\\=\034X\222\274\352\300:=\023V\346;W\346\365\271\220\364\2558N\323\264=\355\003&\275\013\357(\275+&\311<\033K\017<S\206\364\274\365\034]\275\032{\251\274\272M1\275\r>\231\275\322\324\365;l\004O=i\326Y\275\327\260\234\274\206\177S\273\214\\\352\274\320\227\204\274\016\'\010\275zR\220\272V\365\200=N\226\314=f\326\302;\2509\016\274\333j\254<O\312V<*\305\227<C\305\266\275\246u\300;dPY\273\272\330P\275\007\322\207=\344\361\030\275c m\275\216<\347;\202d\210<t\303\210<E\003B=\177\274\306<\331q\374<f`\201\274\230=\211=f~\231\273\236I\342=\177S\264<\020\312\221=\317\206\325\275\254\250k<\'\233\347\274\0230\207\273C\237n=\237\302\007\276\244|\211=|\007\027\275Ook\274\366=C\275\022\205N\274\215\371\324\274(Gs\274\236\006\311\274\261\242\301;\270\357\227=\331\304q\275\315\236\272\274U\342\214\273\303\340-\274\353\202\207=\013,\274\275\034\022\343<\247\202\230;m\232\300\273Y\245\212=w\244\224=\234\371m\274\257\2616\275\357\342\317\274\367E\034=\347g\216\275wH1\275M\241\004\275\234\342n<y\257\000=!/\005<(j\007=\005\353\212=\364\\z=\027\270\374\274\267\304\246<w\370D\2754\005V\275\376\245\213<\372\3708\275\036\361\026\275ZQ\252\274\377~\220\275\213\207{\275]h\222<`i\220=\2238\340<g\307\245\273\207#\307\273\266\017\331\274`\215m:\205\241\235;.\031\026\274S\355W\274\362\257\230\274\201\364\230;\034@}=\000\215\272\274\024\271\013\275\244\331\307<\320\354\330\275\036\3325\275\372\262\017=\324\221-\272? \347<\342\365\205<M\341\240\274\275%l=\260\267@\275\340\323_=4/G=\327\257\251\275:H\231=\230\302\223;,\316\014=P\025^\274\304+\377\273\010\322o;\202\372\220=\223\214\352\274\302\033\314\274\247\233\274=?l\273<\'\351\220\275smF<\324\013T=\264(\002\275\373`m\274gb\032=\216\332\350<L\220\214<\331\264\007\275\034\305$\275#\254\255<\nu\356:Y.\211\274\215\325\300=\305\337\n\275\336\270\313;~\304\\\275\200R\317=\027\017\257<^\272\206\274{\306\274\274\317\2555<\336N\271;\377\247\310\274\005\311,\275W#g=\363i;<\001\010-\275~\025\035\275\234S\325<\207\335\260<\256\037\252\274\304\276\230<\334\267H\274\303\n\241\274\231.\202<_(\021=\221O\360;m\307\274\275\262\237X< \n\033<m\224\021<Z\277\225=\316(J=pEF=\204\022\234\274\360\320\304<\022\337\367<B=~\275h\245\234\275\263\021\021\275\223\371\016=\330\377\232=\344P\234\273R\344d=B\376\264\274\037\007*\274\316\033\265=\357\265\263\273\014\030\331<\017\307\300\273\215\334\320\272b|\'=w-\334<\315\316z\274w\300s\275\352\214/\275uT}=\207\2178<\201\272e\275\353\225$\272`/t:\033Y\020\275\374\351\230=8U:\275\352\004\255\273l\315\213\275\362\263\344\275\201\354\301=:\327H<yN\320=Qcr\273\346}\312\274\337\0204=\356\277\324=\027\355A\275\'\224\207\273\241F<\274\253\013\231\2755S\237\274f\201\024;[}\014\275T\023:\275\033\0017\275o\345D=K\005o=\230\240\267;#-F=\226\212\314\274\246s\035\274\221<\215=k&3\275\343\212\276<\202\257\244\273\374\n\177=\3445\211\2734t\204\273N\3407=\276\203\0359\024\377\032=\200\274E=\374.\374<\304X.<\277\374c\2749d\242;e\017[=\321\236Y\273G\342\206\275\326\004\244\274\321\270%\274\277\372\331\2731\343X\274\260\350b=\353k\344<\362~\305\274D\r\010=;\226I\275\022{\036<9\022\032\275\220$\306=f\005\n\274\233\357\033\275\014\344a\275\365\322\307<F\372\244:\"\325\223\274\233t\303<M\037\200=^\016v\273\302\3149=TQ.\274\\\222\350<\024\354\\=\360\340\227<2\023H;\321\331\030=E\266\010\273~\275\024\274\030\350o\275\013\257\241\275\t\211\307\275\265wk\274\317\006\307<\301\275\331\273\251\205\322;\034J\237<\304\323\007=\306\271p=\276\235\017\275\261-\243\2754R\345\275\302\255\342<=\222\311=\341i\035\275-K)>\253c\226\274\251wA\274\304}H\275\270\301\332<\305\331\027=\321\216I=\036z\n=\014\371\225\275\254\007C=\316\234[;\021X\010;\034{!<\370\331\225<\003N\245\275$\t\263\275-=\233\274\376l\020\276\305\023\344;kG.\274\241|\326<\350-\\\275\233\301\250\274,\307\256<\255\310<\275WM\031=\225\n\324=-?o\274\274\227\252;\020(j\274\356\240\023=\224eC<\204+E;vMY;gs\003=\326\243\324\273\314.\312\274\n\342\207=G\020\n\2759\3648=\333c\037=\307;\023<E\303,=\343\3721\275D\0309=\301\204\252\275L\212\252\275\340\342\355<\337\027\243<\212\244\014\274\230*\252=\240\240/=\256\241d\275G\000u\275\003\351\265\274\363H\241\273\3410\207\275%r\314\2749\010\030=8\373g\275\3632\n=\307\246\t:~2y<\021\020@\275-\343\032\275m\343\220<\001\022M<\366\313N=bw \275\267J\221\273\234\207z<\213\236}\275N\034\036\275{\013:=\256\330\262\272kg\201<\312\326\307<\'\2513=\201p&=\374\331\366<\027\263\242;\2503>=Z\255\020\275\311\002)\275\016\024\266\274g\3774\275\200\264\201:\016\221\021\275\201\323\262\273tE\n\274j\007\002=ev\200<\225\245X=@\361<;\207\024L\274\334\254\274\273v\213\217\274\374\244)=\311]\266<^\272\202\275Ay*\275A\2600<\3043+\273/A!=\035\327\276<\2160\177<\3229c=\234l/\274\231\225\220<\355Dh\275\254\006\257<IJ\360<\271e\240<\026I\000\275\n\376\227=\211 \026=\336\370\016<\274\027+=\203\035m\275{}L;\337\325\211:oNW\275\374*\300;\334\362\327\275\337W\265\274\314\302\026\275\301\000\361\274\244_\005\274,\337\316\2748R\n\2754\211\307\274\360\"\203\274k\323V\275\333\014\330<\233\344\316\275\345\236\222\272@6V\275\356\266\345\274M\355\356<\240\010\313\274M\260\014=\326D$<\245#9=\323#\242<\t.O\274\205\365\232\274[\rI=\222EA<\223:t:\0055\373:\234$\030\275\324\310\020\275\207U\206\274\032\241\261<\014\203\274<O\273x<)mi:\021\014\300<\305\204\007\274\200L/=\260\2264=eJ)\274I\246^=^q\213=\330NJ\275\313l\002\275\224\024\365<\245J,\274\232\315\325<\330I\234\273\362\2617\275\377\257\237;H-\267=\211\373\225=\267\312\273<m\317%=\335\340\177\275\230Rb\275\003\232\214=\377\214\220=\376\350\217\274 9\326\275\037f\033=\342\273\227\273\240P\210<\275\177!=\360V\201\271^\254\201<j\303\327=)\265\204\274\224\313\'\275I\352\261\274.b\230\273\363r\205\275\242\315\313<?h\236;\211\242P\275\201\247\265<J;h\274_\211h\275-\204\014=\326\360X\275\250\\\221;g\261\372<\271\320\253=\202V\204\274\260\367\271<:\352V\2756\346\275<ENC={2\013=~=\243<\034?\206\274\243\201i=y\234&\275\220\225\030\275\3660\351\275Zq!<\303<\350<@\007\317\272*ku\275>\001\031\275P\310==\031\226a<\231\001\232\273\277tr\275L)\310;\301\224S\274\334\036\277\274\335\270\3348\304\320\256=\347\236\321\275\253\003O=5\014i\274\343\207Y\275\031\361w\275q\207\002>\006]9\275\343$\252;\336j\377\274\365\020\224<\220\223\227\275~\226\"\274U\272\346=\336W\207<\363b\306\275\371\231\021\274J\331\207\275\034\372_\275\325\361\201;j\227-=\"c\205\274e\266\221\274\232\315\033=\325\227\261\274\365\305\376\274\357\351g\273\022\241\331=\326^\273<\2620_\275\276\264\241:\226D$\275\375\254\206\274R\314\253\273ylx<\302l;=2\032\232<\t\267\370\273n\010\331\273\220\033N\275\247\031\237\274D\235\331=\222\316\013\275\025\213\210\273e\360)\274\"\331^=E?\232\274(\346\215\273\232\\\255<\302l\351<\2534\026;\352\237\247\273~\345>\275\311\262\007;\'\250\014\275\203U\327<c(6\2757\252\031\274.\240\242\2755\236L=\033^T=n\004\243\274_05\275\377wC=\005\322\236\274@1b\275eA\"=\030\237/\274\216QR\275\332\226(<l\377k<\300\265W=\357=q\275r\335\343\274\307~\227<\017\324\324\273\320\260\327=\332\315\215<\235C\204\275\335\231\000={\0226\275\215\006\315<Y\232\260\275|b\246;u0l=f\357\322\273\004\207\277\274v5\303\274\257\232\237;JS\222\275\324\215\000=Jj?;\276\206\003\275\355(\262\275#\321\327<{\367E=\331\365;=%\203\004=#\025\230\274\321\231K\274 \321\010>ci2\275k\035\024=5\256\357<\250*\231\275\226\014\207\274A\366D\275\351\370\003\275\273\331P\275\263/\262\275W#\021=\227\271\326<\220-\312<\363\212\276\275#w\250<\000\316\002<\201B\201<\252\024\224=xV\270\2747\353a\275\203T\360;\233S\001\275\036\022V<\020mz\274\304!C=\344\323\302<\001\272%<\346\023R=\327X\';\247\370\312\274\327E>\275X\031\034<\026C]\275\231\201\246=9\305\325\273Z\336q\275\367\237\250<w\236h\274\n24=\274k\200;\013\035S=\260\026\244=\342\251\230<\251\361\376\273h!\255;\236<k\275AT\312\274\371\241[\275+\257\221=\025\3113\275\251\355\221\275\371r\323=\325\372\334\274\373o\200=\\H$;A\000\242<\360#\000=\314\373\022\275Q\217\027:]L\000\275\253@\222\274-\206\266=\233$\037\274\346E\332;=p\221<\230\330v\274k\205\004\275x\203\305\274\305\303\027<\'-\233\273\342\367\351\273\304\354I=c\352\013<>\254;<\244\363\005<\322i}=\\1\241\275\022\274\032\275\374\2560=\245\356\262\275\\O=\275)q&=\266\351\322\274a\244$=\\d\336\273@`\305\2731\331\252<\327=\007=^*U<\211Kb=;\350\323=\364\263\310;1\2069<7\016\271\275\234\261?\2755\372\016\274\014\243+=\nV\037=\206\325x\275\324\352\243\275\n:\344\271\300\227\252\274\214@\275<\215(\235:1d)<]\223O=\332\234_\274\332\214\301\275\353\242\246<\002\344\006\2748!|\275Ua\306=@\0278<CrN=D]\263\272]\362!\275\347\343`=\337e\336=\261TV\275\207\341\352<f\252\345;\031\203?=2\313\373<\306Qr=\214(S\273\227A\210=A\005o<~7W\275\312BH=ci\260\275V\002\331\273h~\224<\013\np\275\240\366\220\2748%\225<\305\310s<,\316\345\274dX\3339\236\260*=-\322@=\247\r\211\275\330\022\277=\032B\230<>c@=\213\'g\274\264\253\316\274\232\364\261\275\367b\346<\264\350\027<\375\204f=\257)\201\275y\236D=\214&\322\2743%\207<\305,\021\275\313\244\313\274gV\207\275\233\310\250<\377\221\234:\013\0052=\30548=\205zX<\rC*\275P{\323<n\365/\273\363=&\275\211\245\021=8\002b9\261fl<\252X\376;\3639w=\013\262\025=^\204\327\274\214\226\311<\373\305v\275](3\275\232\002\346\274\272\013\361<\264\226\335\274az\023;\r\326g\275|[s=\375\272\325\272\253\305\302\2743\313\240<v\350\013\275cQO\274\216n}=\302\327a</\020Z=Y\344e\273G\354^<\007\016\325\273\023\036\341;4\324\r=X\345\325\274W\014\030\275\334\221\211=\345\232\201=\337\377\200\274\376\313\030=$\363\260\275\362K\307\274\265\345\231<\221\222\n\275kc}=\020\217\311<\257r\223\274\201Hc\274\0132\036=\033F\305<\226\177B=\210\2528=\345h\275=\315\030\t<\335\213v9\361\375\311:\317\3757\275\222.\303<\260Bu\274\322\254\336\273\303\"/<\255\222\001<g\202Y\275\360\216=\275TK\205=\241\276e\275\357\364y\275\366q\232:\027\002\240<im\023\275\256\'\251<=\216.=E\326\r\275\337Ms=\226Ti;\226fb\274\315\343\001<\231\205v=\333\005\227=y\226\022\275_\2219\275\342.`<\023\250\023\275M&\177\275\332\014\251<9\001\220=4o\277\274!q\n\2758o\236\275\356\367\301\275*\206%=\310s\212\275\220&\203\275+%\370<\235\022\322\274\326\240\006=\n\303\270;;\333$\275\244qz\275\202\247\201=`\301N=]k\257<gb\t\275B;\254<g\250e=\240\365\363</\275\372\274\222\363\376\274\252\003\013;\365w@=\3552\267\274\362!F\274\366d\260\274Cg\331<D\216N\274\\\317p<B%c=\255\322\313\274\376$!\2757\263\326\274\"\274b=\340m\224<n\345\261=\303`\030\273\320c\303\2758\203\264<].\002\273\273\222\021\274\312X(\275pb\233<~\007A\275\236\221\212\273C\226\257\275`\210\032\275\352/\323<\275\314\004=\000\227/=\243\344n<\026\357\030=n\247T\275\306X\262<\310W\241\266\241\363\226=\274\\\327<\326\363%\275?c\213\274R\226\216=\366Y==9\214\250;Y)O=\253\027&=\305\0233=\320\340%=5\202L\275\365(\264<$h\203\275\034\342\030=\200\240\031=\271\342\242\274`\374\336;X\222w\275\201\023=;\362\227\340<\276_\224;T\230&=t\240\250:\034\373\301\271_\017\"<\353A\213<A\030+=\317Q\247=\307\215(=\310\345\001\275\312\351#\2754N\026=tK\252\275\004\301\236\275(\212\340<\021\354\203=za\312\275\033\377z\274\025\030\302=]G\212<\300+/=\371\235\303<4D\226;5\316\037\274\335\371\304<\036\222t\273\303\023\210=\315\352\360<\306\365\211=c\335\016\274\310\024\205<t\037\272\275\035\242r<\31704\273\r\2413;cex\275\235_Q<\315\253q=\326\274\265\273\254;\334\274\326\235\350\275\240\371Q\275\033\010h=\2508>;SX\003\273\035\365\341<O5;<v\276\373\274+\352\207\273\316\035E\274\253\314j=t\2615\275\235\370\350\274\372e\230=*\330\222\274\031\025\247;\037\343y<4\262\261< \032\263\275\034wj<\022\201\007\275\270_>=\215\244\251=8 \332\275\010\325\336\273\314:\326\271\226\241\334\274\265\276-\274\234\351\034=\004\357\263\274\305\037\232<\013{\322\274\231pI\274\356\035\347<\311\036\303<\027\037\256\275\005\'l\275/\356\215<o\264.;E\214\177=~\232v\275|\365\206<\301\346B\275XO\370<\221\016f=\r\374\014\274\264\246\316\275p\241\350\274&\236\251<\234\373V=\226\263\322<\037\371\017:\331\245\200\2745\277\024\275\263\220R\275o\004c\274I\255h;\223\236y\275L\275\354\273KzR\275ek\256\274D\352\007<\235\276\215\274\253L\211;\374}\270<j?\251\274\rf\210\275\010\237\275=\3463\227<\021\027J\274\241\014A=Gy\304=\213\303\023=\341\250\325;\242$\363=\031v\t\275\326@\244\274\032\2443\275x\345R=\355M\225<-\301\241<q\027\023\275\370\n\252;b\206r=\203\322L\275w\036>=\004\333F\275;\330\001\274a\326K\275XR3<\337E\263\275d\320\241=^\004\324<\347\342\007=\350\237\240\273\316|2\273>\322b<i\342\004=\014(\374=\215w\035<zF\033\275\352U\214\275\252\275k=Q6I=\311R\320\274\355\256a\275\002\370\201\275w\"@=\266\212\014=\275\016\330=\020r?=)#g<\272h\204=%.j=\360Db=\364\247\343\273\270a5\274\350{\267<1\372\220\274\352z\277<\356\223\252\274{.\315<^\200g\274)\266^\274\276\260\237\274\245\365S\274\347$\232<\374\334f\275W\305\024=\244Y\202\274S\026m<\224\345\263<\313\312\014\274,F\203\274J\001\307<\336X\227\274\222Y\201\274x\351,\274\207\024\004\276\353w~=\222\3175=\3758\247<\001\334l\274iU4\275\013\340J=\032\335\343:\027\032T;\266\357\024=\241\225Z\275 :\357\274\013,U\274jE\217<\265\230>=U\3507\275\232\231\036\275\375\017<=\356\033\020\275\246\252\345\274}\026\270<\316p\202:\247\256m\2751\233\037\275B!\305;\372\312\225\274\234\326\331<\345z\033=\376w\307\274\242\264\005=0|M=y\275^=\300\311\002=\365\267\361<\316n^=\317\330\225\275\\\344\255<@\266M\275w\014\232<\\\032\256\274k\366\017=\236\243\267\274\004\017\253:\247\333\331<NS\266=x\254D\275\026\365\001\273\306I\215\274\303|\034=\226\237\202=\243\222\'\274I\331@\273\373#0\275\026\234\262\273I\231\'<\267I\225<\277\367y<\002\303\253;g]\321<\3165$=\315\024\306;\313\355\"=\006I\014\275\244\365\203\275\334\332\230\274\020\357\344\274Q\007)=\334C\262<\025n\034=\005\350\243\274\252@\300\273\234{\202\275l\027\233\275\366d\022\275\224\317\266\275E\027\206\274$\r\036<m\003>=vL.\274\277\374^=\027\025\233\273\016f\201\274/5\006\275,\010\233\274\211\323\007\275\365\274\n:\\XU\275\303nf=w \257\274|\021\004\274\253\226\376<N\327$\275\033u\327=\002T\014<\324\314\271\273\367~!=\211\263\007\275G\327\203\275\035O,\275\020\205G\275\037\177\257=\016\252\245<\177*\217<\247\226m\272\000\031\210=-G\023=\0107\355<\227\210\215\275r\273\004\275\332\246\353\274\037\204\347;|\357V=\332\365<=\364\003&\274F\223\354\274k\002\377<w\213\302\274Bs\215<C\320\233=b\232\024\273\212\361?<$[v\273;\010\270\274#\304:\275\n\0144\275\013\001\212=\261\013%\275\230\232\374<\345N\252=\266<z\275\333\3610=\310\256>=\212\333\366<\204\224\324<[\340\000;.\220\242\273vNC=\363?\210<,\231\351<\303N\254<i\260\037=w-\274\274\366A\305<\224\273\222=\303\315p\275\304\\F=\276_R\275\2506\3349=\276\246\275\000\311\372\273\367\273\261\273\276\213\232<\355[\021=\322\231\206<f\\\324<\360\265\2259\023\302\232\275\3204\250<\003\256\007\274\215\326\026\273L\003\371\274\311,\241;\247\307\"\275\302\034d\275rT\003<\316!*\274\335\2439\275\031~h\274\246\350$\275\224Bm\274\t\363v\275\030\013\213\27247P=(\277\333\274$\004\r=\347^\200\275\366\341N;+\0263=\306\214\275\275}\266\237<\314,7>\263Hw;\336\256g\274@\321\347<Y\032\250\274\037\n\017<I\353O<\336M\204=\210\206\206\274\311\223\241<\246\020D\275T\307\215\274\177L,\275\217}\222\275\224H2=\345\300\237</\315\005<66\003=BI\273\274H\'\n=`Y\340<\364A-=D\210\017<.\034\240\275\206\257\024\275\024\226s\275\366\367\205={T[=\331\343&<A`C\275\014\211\232=\252b\376\275o\353(\275\271z\247:Q\266\212<\225\375R\274\360l\334\274\301\202\253\274\374\201_<\373\230$\273b\030H\274\312? \274\373ZV=\207\252J=\303\323<\274\227G.\273\203\352\022;\t:\306\275\324\253b<\273\025\240\274X\034\273<\305Du\275\013!\331<\362c\375<\323[e\274H\000t=\362\256\233\273\232j\243\274\274Y\004\275K\345\345<\244\316>\275\304\251\310=\214$\261\271\262\345\005\2757@\017=\200\213\321\274\342\022\242\274\351\340\213= \035\332\275jo\026\274\265\350\024\275\234\3020<\215\347\r;\260\305\304\274\206\352B<\332\206\267<\257W\307<\242\301\\\274\255\t\254:5`\256\273C\312\353\274\005\300\205\275\200\007\336<\311\rO=\004\2035\275\271\031\030\275\037\357.\275p\337\306\274Td\224\275\366C\006\276\363fl\275\210\212\373\273!|\013\275\326 \335\274\345\335a\274q\304\206\274M\2619=\313\324\365\274<\206a=\355\341\203;\311\3014\274\334j\252=\334\245i\275\310~\333;hN\277\274\242\241\364\274q\013\032=\\\016\037=\265;`=\346\240\017\275[Q\344\274\233?\346\275\332}\014=\326\210\316=J\364\315\274\334HF=r\236\r\275\2305\370<F#\270<\215\313#\275\220\221\257\274bI\233=\340\211\'\2755x\225\275\364\315\260=M-@=\304\376\205<HH\000\275\232\036#=Q\t\230\275\032\014z<VM\264;SW\036=\360\235\367\274/\242\315\275\177G\037;6\342\242\2747\001\330<\237\334\234=\257\313\341<\030\036\207\275\217\235Z\275\254G\221\273\034qP\275b\220\\<\355bN\272\254#,<\034\332\\;\306\235C=\034y\020\275|\300\013<\201\252\234\273\347}\307\275\375\314\206\274\377;\2648\307 \232\275|>O=\227\"\n\274\223\240\204<\361o3\273,AG<\255\220}\274\024T\305<:\234\203\275z\267\023=\000\033\276\2748\322\020=_\260\343;\240\345S\274\277\027T\2731\222R=\205(\343=\235o\271<0\2430\275\330\007\027\275\335>\364\274\355k\033\275\300\323\343\273\346\033\344\274,U\243;R\351\257=s\203\362\275_\223\334\275$\300\214\273\306\370\005<\177\253\000\275\203\255\226;\277\252\037\274\034\214b\275\035\272O\275\242\203\021<\367\231\001\273\317\213\212\275\251\261Y\275[\250+\275\0204\301<L\361\252\275\\\334\316<uAm=\255\006m=\376\256/\275\261N8\275\'t];\025s\317<;\324$=\334{\272\274\374F\211=\323\261s=\004\377T=r\3626<G\247\231\274\303\352\244\275\252s\221=\241\345[<\346L\322\2758\237l=6\214\325=\305\232\254=[-\357<\375\304\253\275\264$\202\275qT\336\274\347\374\200<A\375\026:\335O\207=\361\357\016=\251\026\274\274\002\022\022\275k\301/=\033\024\373\273B\273\246=\264\270\301\275o\372\033=s-\254<\201)e\275\242\001\251\272\331\231\251\275\214Uf\274L\347\311\274g\322\314<pP\257<A\r\273\275\232\231x<\316\300\230\275&\203m;\033\030\311\275\346U\222=D\325\345<\342\213I\275X;\220<\267\276\334\274w\362\205=\2457\201;.\330\262\272\225p\251\275U\036\036\274\333\261g=lH\272<]x\276\274\274\003\314\273;\253a;\311\250\253\274\310\215\200=Y\232|\275N\022\373<5x\241<wF\275\272\323J\203<\346\341\241\275h\2150;\366\313\014\275\273\033\021=\022gI<5\332\251<\022\302C\274K\270\021<\216\210\204\275\234\336\251<\\\363+<\037J?\273\311\352%\274z \376<\r\023g\275\306\243<;\274\361F=\377\323`\275\013{\344\274KDd=\032K\234\275\245\376\377\273\254\271\037\275\262i\250<\306!\300;NJ\240=\232\207~\274\331\330\000=\244\006H\272\322\331d\275\332\231\200;*e\216<\325\025\004=\235)\336;\207\203\202\275\364?\244\275\277\311e=2eP<\317\267K\275L2\360;\035n\206<\327@\251;\301!\177<\014\200\216=/w\275\275\342.\250<+\027T\274oJ\317\2748\035\020\275\006)\234\274Ce7=Q\340\302;N\036\321=\371\212\277=\002+B=+\302/<\315\337\007\274\030|\222\274\305\271\332\274\355o\365<\252\223\267\274_\344\252\274\254Q\\\272\r\026y\274\326\257\377\274\372\031\'=\t\355\223\274n\312:\274\351~\230;\363\234\315<\251\304h\275W3O\275v\252\306=d\326\023\275\362\224\364\274K>8<\360\227Y\275h\022\007=\225\332x\275\007\003Y\274\201\267C;7^\212\275R\335\301=B\252\301\273\363\\\"=\326\215\233\274\377\211\003\275K\022\224\274\035 \n<o\340.\275\362\253\265\274x.F\275\344\252\245\275\303\036\251\274M?\241<\213x\202\275\336\342\n\274\315\346\311=\23310<\037\340l<\036\004\340\273\253\314d=\202\355Y=\256\233\322\274\253h\300\275\206\324\367\273V\260\226\275h2\225<\214r\211\275\337\237_=\230\200\260<%\374\"=1z\002<sH\221=%\025\330<\276\224V\275?bS\2754)\025<1\304\027\274\331\033\300=+\'\370;_\224\221\275s\007\234=\277Z5\275\314\265^\275\320\3508\275!\003\000=\3054l<\222{\367\271b\314D\274\313\341\257;\0023\211=\021\224\361<\215\343/=b\177\003\275f_\306\274\233\026\261<\032`\343=`\034\254\275\353\373\206=\r\240d\275)\035t<Zc\020=G)\202\273\304[X\275\242\326\236=x\364;\275\240\335b=iS\343\275H\261\205=\247\270\363\271\033!l<6\275\344;\226\345O\274\302i\225\275Oc\232\274\325C\t=\222M\332\272\367\206\336\274\266\205\254;\332\360\3339\210\034\032=O\276\000\275\214\026\257\274\357w\274=\000\016\232=\316\033\006\275\304\341\313<=\020\366<Xx3\275\336\230\220\274\235\023\326<\013\364*\275\266\374&\275\010#N\273\254W\227;\307\324<\275D\343\223;Y\352N\274\235x\007=E\020\374;d\r\211=\217\007\247<3\274\335<\304\347\201=\'\254\017\275\275d\253=\235\321d\275-\021\227=\353}D\274u\240\374\273\032\236\232<\261q\220=f\220\"<\327\241\326\274qvy=\360\357\215=\353sq\273q\255\365<\247d;=?\3010\275\342\237\006=?\266.\275U\025=\274m\220\033=<-\204<\213\244b=-K\005=oe\313;\361i\345;\327\265A;_\275\352\274\210\216\020\275\355\214\246\275\251C)<toP=\345\313w\275\314/1=m\r\271<\010\244\001\274\2746 \275\207]$;\332c)=\310=j<\251\363\231\273?\310\034=-@=;\375\364\307=\023\232\311\274\305\240\225=\255_=\2752\217\245\275\317E\253\2736\240\331\274\320\311 \275\244\262\035=\373\207\372;\253\303\370=\352Z>\275\215\355\262<$\237f\274\330\272\\=LS\371;<\206L=_)n\274\tt\036\275\033r\261\275gj\345\275\236[\204=\000\310M\274j\232\301\275O\333\232=M\036E\275b\204H\274\337\371K\275h< \274\033\017\202\275I\304\232\274\212\2604\2745\023z;\257W\321<\323\330V\275\210-\177=\026\006d=\267\013\210\275m\254k<\177\313\023=\333\353\332<\231\341\032\275\365G!\275\260\373\003\275\211Q\037=\373)\356=\016\214g\275F\344\216\274\213s@:\003\337\316<@\313\002<\3312W\275!\342\031\275)\327\203\274b\025\330<\212p6\275$)|=\356\200\270:\340\257J=D\203\225<\337wM=\240\205\232=J\353\240<\243B\001\2757\217L<\317\025\332\274o^\347\274r\205(=\226\374\227;\272\273\\\274\225\326\347\271\221\004R=*8\n<r$\005\275j\254\211\274\252BL=\0355\354\274\343\373\247<XX\263<\266\266\361\274\013\025>=\304\312\277\275\225g\312\274\030\321\n=\237\342\001<\204c\032=\205V9;Y\210\010\275\337\2235\274]\347\326\273\001\306\367<\n?\013\275Z\370\242\274\341I\236;Qse<\367\033\313;|\273\346\274i\254\213\274\325\002I==\315\002=\3442\325;{\335\344\271\000\007\373;\347\271Y=\326\306j=\320\376H=\345\375r=\313w\320<\330B\242<\242w\2539G\004\302\2751\007\307\274\324\274q\275O\201e\275\270\325n<U\207\010<n\353\322\275\356\330\022<\272\302\003\276\"<\315<\313\224{=o\205\\\275\363b\343=\025~\354\274\231\262\003=S0\216=\275\351\352<\244\246\240\274\030\030\244=\032E\346\274E\220k\275\333\345\320\275\021(\026<\207\276@\274V\302P=\227\251v=\231\262\207\275\364^7\274\225&\323<X\210\003<\312R\n=\'w)\274\211W\t\275\273\376\266=\301\233\305=PvX\275KBk\2751fe<\023\353\251\275\255\341r\274w\254\210<\234\273s\2753\033\221\274\327\177r\275\177A\236<\\m\025\274;\315\211=\303\034U\275\200\342\265\274<\022;\275\317\027\272<\031)\034\274l\377(\275\225\037\266\275C\246^\275\301\262\205=[\353\233;\303\2075\274\031\306==\177S\350\274\365}\024<\021\230{\275@\226\027\275\214\332\264\274\336\234\036<\250H;\275<:\320<\253\032o<\226\2444:\2442\036=>\373\326\274@\223h\274z\272\312=\347\330\240\2728\343\364\274uF\305\273 X~\274Li\256\275\216\355(=\336!9\275F%3<\367\355@=\230\366\300\2756\356O;\202\234\030\273\360\260\365;}r\203\274[\332\021=\210\034\014=S\332\021\275J\361Z<E\020\213\275F1\257=\231\216\354\273R\216\033\275\25266=H3Z\2749\314o=<\277\010=]\315\225\275\207\304\345;c\244\303\274Z\215\020=\231\370\310\274A\250\351<%\243\032=\237\314!\275\207{:\275\247\037\255;\r\325\004<\340\344E=\322R*\275\362\300\351\274\320\273\324<\346)\216\274\244IS<_\331\025\274\315>\021\275Eo\006\275S\342\222=\037\264x<V\007\235\272\253\177/=h\006\343;1\303\205:i\033\216=\024\344\240:E=\014\274\232\356\226\275Y-\006\275\351B\254\273\211_.\275w\354}\274\221\366?\274]k)=\227\207\241=\230A\304<\034&/=*\211\267\275\353\017\221<\337y\323<@\363e\274\2029*=\262)\203;\007\364\010=G\030\207\275\342\225\314;W\241V\275\022\"9\274\212\020d=\211\004-=@8\005<BZ0=\301\003R\275\361Fc\274\351\270 \274\272``\274\2156\201<nP\240=3\266\205<\304\216\367\274\257\005\020={\375r=L\000\266<\225\212\036\275-W\360<\366\277(<,6\355\274\307\247\025\275P\325\035=\256\303\254=\260\335,\274\335\2405\275>\276\032<p_\237=\246\365G\274\301\266\002=\354\250\201<*\266\002\274I\345C=\t\3349=\0340f\275\014\312\035\274\337gp<\253^v<vC$=\013\023\327<yE\325\273T\323\276\274\353\246\336\266%\333\253\274n\277X=>\3623\274\307\233\244;\237\220\335:J]\221=)a\316\273`\214\005\275=\266\014=\342\304\261\275\317\367\272\275\304\324}=\326A\237\273\234q9=\337\227{<6\026\373\273[\034\033=\325\232(=i\361\037\275\370\032\023\273\315P\257\274\200\276^\275C\310\270\275a\210\216\273\374\320\226<\352f\"=5\014\022=\362\30298I\272C;\350n\000=!\222Q\275#\327+\274Z\000 \275l\376H\274\t%\246<g\020!\2757\377}\275t\325M\275\255G\025\275\024+\270\274\372\364S\275\203q\027=\000v\201=\377n\252<\303<\253=G3P\275N\243\031\275I*\033=b\201\203\273\350j\033\274\331\270\250<\235@\362\274\321:^\272\227\262s<\\\255\232\275\2603\274\274\305rE\274\256\347n=|\350\265=\254\332K=\204Tg\275\200\035\363\273K\226\225=O\326\203=\232\202\270\2731\321\004\275T>+\275\222\232\r\2752\333\206=gii\275\330\371\221=\000\r\212\273\336\372\277\273\341V\232=\340U\371:)o+\275\250\347\366\275x\203-\275\203X\005\274\027o&;\013\255\234;q\314};_\207\370;\372\243W=b\335\346\274\321L/\275\242\322>=\367\0213=\tE\340;\031\341E=\273\232d\274 U\253=\000?\313=\352r\234=\335\341G\275B\242\341<\205\214u<b\315%\274t\315\200<.\261\210\274n>\276;\331\267\016\274\017\312}\275\225\316;\275w\313\301;\242\034\213\273-V7=T;\237\275\345\2008\275\243\311V\275\177;\021\275\026\270\020=l\210\245<\271\226\203\274m\345f=\241\005\245\274\021U\217=18\022\275J\034\031\275\272u\213\274\233\211b<\264\250\371;mNd\275U\302}<\247\324\361<\261\257\354:F\tE\274\207\346\370<\034\2723\275\"A\216;\032\355\265<\233\304E\274\236,\204;\033ej=\341\377\251<\365\224\217\274\"N\223\274\\\360S\275yB =\355\023\312<)\346q;\372\357\342<\374\004\333\275vpl=2\313\226=\263)\264\275\336\'\253\275;N\362:^\203^=\017S\361\275l\302\261;\271\215\245<\006\310\304;\247\337\332\273\005\027\036=\225<\'\272\352{1\274j3\376\274u\372w=t\333\246<\355\351\300\273V\256#=l\225\335<0\222\227\275\212Q7=H/r<{y[\274\243\317|\273v2`\274\205\273\224\275\257\226\240\275b\344\373<\203\307\r=y\310\264\275\261\004A\275\234\205e=\365\003\264=a\254\372\274lt\257=\364:x\273T\250!\275\273\370\354<\302\266\262\274\216\307?<T\214|=\362\323\001\275\212l-\274\203V2\275\031\360~\275\351\330\255\274\261\303\224\273\016v\337<\203\022x\275\235\320\255\275]\201\227\275d\027\366\274\264\177\030\273\314\214D\275[\364\246\274;\215\314\271\354\007 \273M\263\373<__4=X\212\351\274\037\021Z\274S/\263\273\211\220\177:S\260\351;\301WK=\031d\272\273E\006\033\275\345(\215\273\364\010X=sO\300\274\327$\203;}y\027\273P2\234\275\213o\326\274\314\2661<o\336\234\274\202qq\275\212S\000=\347\243\373<S\351\232=\000D?=\201\370\322\274]\343\201=\365\363B<\272\264}\274y\004B<p\370\234\274\032/\244;\213.\263<\300q2\275\337\320Q\275\320\026 =\265\0238=\022\202\345\274\305\tU\275\253j0<A~`=\006;\017=\252\305\207\275\rS\004=\257\235_\274\036r\263\274\003\261G\275\014&\211<\272\301\3659g\007=\275\017{O=\312\'\265;\304/.=\200\236\265\274k\357\020\276\374\021Z\275\241\001\204=D\212\022;\271\023\321<?3\310=8\232k=\027\331\273\274uW\232\275QG\367:\020r\034\273S\207\256<DY\261=x\275\206\275S\357@=\313\300\265=6g\375\273\232`\223\2734P\220;\330\246\223\275\266\177\234\274aF\221\275#>h<D\240H<\265\324\313\274\020\242\267<\236j[\275\364R\027<\r\362\016\275\256\253\006<\201 @\274I\202{\275D\005w=\363p\025\275bG6=\271b\236<\t\217\353<\337(\346\274)\207+\274o\330/\275\211r\235\273M<0;\343\300\316\274g\317\000=\355l\336<\303W,\274r(\223\273\220\236\037\275\0022\206<\022\205\022=g\362B=\342\241,=C\205\356<S\250X\275G\306\362<\263\322\327<\3073\024\275\037\223\365<\300+\030<h\317\010\275)\252\265:OK\236<\227\212\253;\332\261\255;\335\210\035\275\374E\277\274\244\\\t>\024\335(=\240\262r=$N\246\274\364j\014=ks@\275!!\264\275\202\260\201\274\332 J\275\2257_=\273\355\264=\n\332f=Q\306\017=\375\225\340\274x\237\374\274E|\327\272\200\337\236=\262fl\275K\361i\274\370)\206<>A\237<\327\351\307\275\267pk;\231|t=\231U\270<G\300\243<Ax\246<?\322\273<\322\026A\275\350\327\316\275\337\327\230=\333\364\252\273\3460\276;\365\246,:\207\230L\2752\374\263\274\372\300\217\273\267\361u\273\336Of=PP\326<\253@u=lO\261<\366\000v\274\325q$\275\322h\223\274Y\216\206\275\342a\232\273`\246O;CH\256\272\240\235w\274\r\373\251\275uwe\275\230c\004\275\301\372^=\333\024\341<MO$=\244$\233\274\204d\225\275\314\"j=\004_j\275\230.\217=I2\020\274\231*\001\274\003\3731\274FG\007\275\034O\376<|\254\315=\214\206G\274\332N\005\275t\247&\275=aU\275\025\352\2119\235\322\215\274\333\264.<\256\264z\275\036\250\245\274,M\223\275W%0\275G\371\323\274\000\357\327<\314\326\300\275\304\260\337\273MP\325=\036\020\223\273b\345T;S\356q=\274\251\030\274Z\010\353\274E\320\243<R\230d<\211\217\241=\350\215\236\275@\"t\275\025\277\256\274\221;7=U\030\217=pWz\273\237\311i\273bR#\275/q\027=\214\001\204\275MC\220<Qc\274;\257\276,<lQ\007\274{%r<,|4\275\203h\032=\"\341\025\275\205\217k=\244\250Q\275b\300\020=g\322\212\274N\035\367\275\270g\020=~\246@=\033\2114=\354\236\230\275qk\275=\234\245{=\223\205_\274\327\215#\275L\237\n\273H\025\025\275\357\334\020=V\241\005\275\337|j\274\325\247|=\373e\216;\226\237\241<8\344\020<a\312\020=\232\244\016\275\037\330\036\274\265%;\274\366\232\270\275\377%\205\275\212\002\371\274j\3217\274l\254\370\274\23293=q\013\227=\256b\246;\325\273\223\273\262\360\036;~-\216\275\003\323\210\274n\033\311<\265=\337<\017\271\317\274\327v\330\274?&\336;S\022\253\270\300}\363<+>\376\274`\032\210\274?\220\324<\265\014Z\275\246`\300\273\225\2735=yc\244\2746\226^<\221\272\347\274\244\010\222=\253\026\035=w\261Y=u\017\232\272\237\240+\275\010\033>\275k\361\365\275\231\246D\273\253\362~\275&~\030=\271\313\350\273\217\211\206\275\365\257Q=\250C\334\274[\003\032=Df\236<\272-\016\2744s\032=\020\227|\275%\222\021\275R\006\014\275/\3302<\020Nc=4#\350<\210x\322<1\034\025\274\335\233\244\275b\267a\271bH\300;\351\245\234\274\233\230\227\275\313\027\001\275\245/(=\324\214\353\274\371\327\374<U\205B\275WW\310\275\002U\233\275>\277\365;\346C\020\275\373\016%\273\333\004k\274\311.\260<\0067\004\275\326lC\275p\216:<\330\215\036\273\033\024\222\275\202\320,\274\201\005\304<\375q\363\272\242\320\031\275\363+\276\274\t\315*\275j\027\356<\362\t\377\274h6{=\346k\356\274/\374\031=\333\352\236\274\260\033\333\275\333\266\345\274\2128\331;\263\234\355=1\326\300\272\271\013s<\306\341~\274A+{<\034\220\350<a \322\272I)\031\275o\016\240\2754\226G\275#\371\203\275u)%\274\321s \275\223\301\013\275\270\256\371<\321\300h\275\301$\374\273\263\354:<\223\204\215=G\021\n\275\030\324\227\275\277\206A<\006BO\275 \212+<d\317\217\274\037O:\274\362T\301\274\365\361\035\275t\3375\275\360XS=\2027.\274\2531%=\006C\333\2740\\\343\274\242W\223<\324r\200\275\005\310\254<;N\022<\216\2328\275\376<\023<\031\t\247\274\307\330j\274kR\274=\005A5=\353\201\006\275!y\252\274\252\014\032=21\005\273\315\362\034=\323&\026;\026{\270\2740\000\214\274W_\n\274r\3549=EJn=\2317\372\274\251\374\277\274\325Zy=\304\322\215\274\2076j\273\310a \275c\242\333\273\022\274[\275\0078\200\275\000\334,\274\025\\\360\274\274\377\303=*\223o\275^\241\373<\352\342;=\211\344\250\275\311P\263<)\270(<n+\200=\352\322\002\275\305\023h\274\023zL\275\303\372\332<\001@\250\275\327\274\301\275K.\203\274p\202\272=\317\344\024\274E\211\234\275\202t\207=9\331\230<\342\370B;\326\264@\275\267\300\206<\345\304k\2750<\205\274 \007\332<$D\303<\367\313>\275\037\366\307\273\357\210e;\363\223\032<\363 \250\274I\'\346\274\314\314\374\273\301\314\235;\263\244\007\273@\300C\273n\3477\275\353\354\223<\272\276\342\274T\313\037=\347\376\020\274\224\030\275=\361\251\005\274\222n\240\274}\360\'\275l\tY\274L\340<\274V\214\177\275\305\010s\275G\357\024=\344M\036=\224\227\362<\322\334\351\2755\222\233\274&D\221\275\320\363d\275\227\230\205\274D\363\276\274GdG=Ze\t\274\3271\373<2C\023<\362\377\340;;k\270\274\370\256\2219\265\2418\275\035\005\217=R\262p:\020\371\201=N\241n=\206\317\027=\312\250\204\274\037x\322\275\033\310j\275\373\346\300\274\037\212m\275\356{\030=\001\210\177<\320\3118=\266S\247\275;\205\'\275\332\323\021\275\007P\213\274\323$\267<,\361\353\2747/z<\023\231\321<Yu\276=\352Z\205\275S\355\331<\365\251\030\274u\376P\275\332\336:<\224A\036=N\006\274<\257\233A=\200l;=\322\224\343\274Bh<\274\312M\315\274\327X\201\274\364\376\227\274\355P-=\357\024\372\274\266^\017=\375\210\033=P\347\023\275\247\025<\275\001\234\221<a\322v\275\247\032i=\351\307\266=#\006\347<\314o\014;Fo\222\274\300\210\246\275\262\234\t=\272\227\302=\221C|=E\177\351<\332k3\275\331\013f=\rC{<\2427\237=Ud\305=\204\324l\273\322\034\337<\177\206\224\275\001C\211=b\227\220\273\320\345(\274\273\273\233\274^\177\325=\023\343\252=\356c\277<\036\263V\274\224\255\375<\250\363\014\275\227(\264\274\230\351\205=P\336\272=\244\303\323<\'\236\351\273\337\225\221\275=x\240\274\031\023\\=\035\216\212;\301E\014<\273\2373:\267D\321\273\005\037\001=\277lK\275_\332\260\274\242\364\345;\252n\257\275\341\000\212<:%\024=\323e\021<^\267\326<\363\030\223\274<)\211\273M(\214\275\327\232\002=\274\351p=\323\000\366<\357V\331\273\307\350\224\274\246\264_\274~\"\267\275\337W\010=\006,\257=\362~\033<\262\037k\275\367\314\267\274$3l=\243\036\004\274x\300\021\275t\326\263\274\016?\342<\261T\370<WM\332\274\016\035;\275{\265\226=\207x\203<\306]z\273\024\004\377\274\005\364\300;N\324\244\274b\263\033=w\227\355\274\034\212\275<\253/b=\\\360\340\275\335Y:<q\305s=A\014\234<\264u\006\275\030i\345<\270\0255=\274\3647=\010!\357;)\"\201\275\374\201\000\275|\323\333<+\204\314<>(0\274X\347;\275\337\221\231\274\367\277\365:\310mV=U\336&\274\237\2704\275H\002R\275\244\302\254\274\005.\023\275\372\000z<\356Y\260\275\010U\217\275\347T\340<2A\263\275\007\357~<}?\314\275\n\030z\274\024\320\311<E\251_\273\376\365{\275\251\236\0148\326rz;\215o\022>\0329\367\274\314\200\215\274\317\322\354<1]\023\274\370\235G\274\257k\022<\000]\273<[\304D=\260\010\026\2752\373\214=\363d\257<\"\031\343\275sV\364<\216\365\005\275\257\335c\275\021.\273\274]\376v<\315\1775=\272W\347\273\344\265\255\275\013\252<\275q\304\300<E],<\310uG<\266\200\002>\301\305\330<\252\260\206\274%R7=\246\240o\275\243vS<\310fs\274\271=\022\275t2y;`k>=\205tj=js\r\275\021T\314\273\235\255\321;\334\307\315=E\370:\275\370\323r\275\031\212\034=\345V\213\275\022{\020=\273O\247\275\360y\220\275H\327\005=\235z\316;v\364\022\275t#\202<7\370\330\274\320\220X=\255\375\213;$\0211<\005\344P\275\267v\243:!(\370\274\300\245\245=\256/4\275Xqm;\\\213\032;8z\024=Q.\244\274\226\372\025\275\222\360\310<\005\347\224=\332\352\033\275\375\320\022=\216\261V=i\251\305<\364\032e=\245\227\222\275u|\001=\037\206\204\274\257=\016=\265>\256;\224\351\213\275\337\010\240=-\"E<\375\245\031\274\267\305{=\350\217\003;\245\\\274<X\213N=f\267x=!3\027;\312o\316<\2270H\275\036\212\375<\307;J\275\236Jq<2\363\345:\007FA=\355(\227=\3320\204<w\n\'<3c\234\274\227\034\010\275\365\330n\274\312\302>\275\2545Y=\036R\230\275A\376A<\224\225\202<\005\036\320<\376\316m<8\376\306<S\271\252=Z\337\n\275\212G\005\275\331^\342;x\363R\2750\327Z;\263K\341\274+\344\246\272\006\220\233<\213\017\234<\345\002\344<\274\202\020\273t\340\210\274\035\037\275<\226\316\264=`\325u\275\301)}\275z\351\003=\360+\277\275m\024\205\274\310b\346<\3529\323\274A\202\005=\002\255\356:\201G\'=\302\027\330\274\t\026\014=\333\311b\274\353\"\321<\336u\203\275)\271%<\037Kb=\014K\202\275\265\'\206<\010\305\264\274v\034\235\275\352\230\336\274\n;\201\274\031\327\300\274\225t{=\376z\356\274#:W=2\351\273\274\224\364\225\275\007\337t=\216\0263\274\235\202\245\275\007\337 \274\317(^<B\032\347<\265{\257\273\247\035\271\275\204\022\013=%I\377\274\336><\275\001N1=-\223V<hm_=h\3544\274\274\031g<W\'\220=cxd\275\242\204\034\274\223\314\007\275VE0\275\346J\213\273\350\371\034\274$\330d<\263\337\331\272\345\270[\275f\224\227\274^}\225=>hE\274n\"\200=I\226 \275\332\272\256\275\022}k\275\027\261%;\002E\246\275u\3608=\2734h=\363\255\270\274S\367E\273\374)\367\2739\265\376\274\024\371\364\273I\373\020=C\376\200=i\353h;\370\2170\275\222h\005=\372\350h\275\003\366\357<\343\373\177=\275\261\252;!cQ\274p\260\231\274[\250\225=\244\311U<e?\306\273G\006.\275\2438Z=\231\3617\275S\016\374\275\034\337\267=\234\214@\275Is\332<lw>\275o9\214=G\221W=/\271\315<\201X\220\275\034Dt\275\273%6\275\255\335\257\274\037\201\027\274G\326\313<\024\331\200:\252\304\221\274\231\261\201\274\277\301\311<\311\273\241<\311\341\214\274\342l\263<2\236G\275\'_*<\312\240\357\272\317\225\207\274\203]\013<:\014\372\274\233$G\274\261*\037<f\333\017=\377?\003=x\320\231\274Q\356\336;2 \340\273Z-!\275^\374\267\275\365i3<S\343\275<1\311J=\277\365X\274\242\246s\274\244\215|<}\250r=\203fA\275\373\340\262<\203\234\276<%wb\275\204\242\022<\325s\351\274\016A\261=\021\370\226;\314\263\363<\3548t\275\232\267\254\2740G7\275\3307\254<|\272\323<\315\340\235\275r\017n=\013h==\205m\220\275\037\372\177<d\264\355<B\032\034\274\372\253\271\275L+\214:\231\301Y<e\323\273=\263Sa\275\213\204\327\274\n\263\240<\267\355\007\275zj4\275\317\020N\275\203\335#\2758\257\330;?\0314=\366\236:\274\314\341\303\275\355\t\211=\312\336\\\274QYw\274\232m\273=\3763\303\274%\351\356\272\000d\243\274\247\223:\275\013\334\'\275\033\337\211;>\354;\274\371kG=\013S\215<\272 \025\275\036\253l\274\204@\226=\372x\254\2754\000\332\274j6A\275U\007\302\275\203I\r\274\277\016\212\275\016\313\206\275\217\007\033\275\346\024\244=\013x@\275\242Y{\275\356\307\345\274\026U\210\274\006\334\305\274\352\311\207\274\363P\362<\357\227Z=\352\366=<S\036B\274\024kT<c\316\004=d\025\001\274\356\374\240;\222v\361\274\250X\030=\372\272D\275\272N4\273\024Gf\275\263\227\356\274\355\020\305<\215\232\366<c\274\201<\210\250\250=\213\351g=yi\252\274\361\002\364\272\371\307\033=d\225\310\275\010Q\273<nW\250;y\354C=\240\304\252\272dL\353\274\341k&=w3\"\275\263\031I\275\375&\237\274\234\354,\275+9C\275&%\221\275\217\326\022=\262l\370\274\331\244\036\275n\237\241\274\266\3227=\300\024\034\275<\010\026\275gC\302=\213\330M\274&o\361<{\263\235=\304W\307;\313\0048\275L\2074=|6\207=\205\300\202<\321\026\037=\032H\304\274\307Ge\274\027O\313\273\235\260s\274\276\365Y\275\363\201\373\273v\322\223<\363\354\350\274\373\355\027\273!%\303\274\361\263K\275\364Y\213=G\352\316=\367\320\270=\374*\213=\277\027\333\275\234\270d\274AF\355<o\266\345\273@\301\271=`\217\243\274\353VG<\033\002\310\274\374\253\211=\235\226\003\274z\225\301\273\216\0043\275\027\242\253;\264\227\203\275\306D\336<g\203\326\275\t\322\005=\240\0346=iA\225=JOD\275\233%0;6\017#=\332>\027\274~r\365\274\334l)\275\215l4=]\274\200=LQ\000=\247\203\037\2759\210\007\275\313\374\360\273\204M\307=\206\312:\275\207\374\370<\001\310\233<\177\314\344=\010Q!=\017\234`<\274\251L\275r$Y\275EL\304<\n\355\205\275i\231\344\272I\277\\\275\230 \244\270\245#~\271_\025\363;\260\017\335;\315L\371\273A\tv<W\317H\275\013\251A=\326k\302\275{\023\243<\367\360`=\362\322\035=\317\215\203=\003\344\n<\304\213R\275@\224[\2750g-\275\343\361\003\273\376\337\001\275\210\262I\275\266\334\013=\"j\271\273]w-=fg\322=\177\354\263\274\362\353\217\275\266\226\232\275\342\240\025\275\317V\343\274S\262\351\274i\346o\274\032\"\275\275!\033l\275\243\370\213<Q\2205\275\036\330D<lJ4\275*#U<eO\225\274\311\333\215\274\024\214\005=*,\037=\006&\035\274\260uW=\237*\3549\230<}=\320\357\364:\315u$<\007\021C\275\363\360\036=\257_\324<\222;s<\341l\200\274\202&)\274\247\220{=\331\217\014\275\035(\376< b\212:\005\365x=\353\307\255\273e\341\037=VG<=\032\031]<^\220o=\027\032\253;\242\254G\275.\327z\275\314\022Z\273\177\237\300\275Q]:\275\006\371\236;\325c\201\275\'\rL\275\347\377\240=\230\350\214;\375\223\334\274\253V\276<\036\361P;-\370E=\244l\373<\316\222]<\rBC<\013L\317\274\325\254\206<\004\316U=~\317\245\274\2639#=>B\236<\272\001\260\274\2539B=Z\321\235\273{!\371<\313^\022\275\305\302P\274j\032\327<\336\213\362=\037j\265<&\025\264\275\367A\202\274I\200*\275\240Pi= J\0149\253.\364=L\244]=\374\222\034;9;(\275\026\247\033=\311\\\226=Z\375\004<\033<\363<\202N\374;*\221U=G\307K\275\006V\201\275\006\263\022=Y\366\331\275\320\306C<\353\324\277\2743}\234\274\211I\333<\2335\243<G\0357=\350\302+=\377\203\235\275%:,\274\372d\222=\177\266\344=*\224\373\273\277\256\000\275\227a\027=\017~\231=(A\331\275\3218[=\247.&\274\253t\235<\212\206\342\274!6m\274)\201\301\274\277\253n\274\267t\333\273\362\327\353<\316<I\275\243\326.=\3735\313\274\374\2566\275\356\177\250\275\356rG\275k\003\010=P\2157=\202\366a<\nG\233<\377\244n\275{\260|\275\236\006l<\227u\243=\302\250{\275\263xB\2740\202\262<\272\250L=\236\257B\275\235\302\200\274\334h;\275\324\347A\275-\240\203\274\201\007\220;\276L\205\274\356\034\334\274\260\302\314:\323\252\371\274\021SU<\313\376\277<j^\241<\013!M\274}\"\003=\032\342c\274\032#D=\037\000\031=\325\266\341<\353\244\205\275\362\234\371<\214\327&\275A\354\025=\r\361:\275\026v\324<\312%\021=\311\270\324\273\353\004Y=\255\305y<\251\0023=Q\233\351\273\233\262\226;\301\236D<N6N\275>K\236\275\244\301E\274\335\223i\274\364cA\275v\332Q\274\210l\203\275C]_\275\024\353\321\274\003\250\021\275\235^d;\325\326\227=\364\355\244\274\244\222\026<\207`Y<A\240\005\275z\260\274<\361\234+;C\330\321<4\230\255\272\000D\237\272\005\r\313<b\316\036=\357\223\232\274\217\302w=Aq\200\275[b\275;\177\005\2209e\306\266\274[\225\205\274A\002\242\275\005\363\373<2\006u=J\023A;\257\014\236\275I\034I=h\325,\275\367\010\354\273G\234%=\254$\363\274G\020}=@\267\035=\025(\332\275|\013\307<\3478{=~\350\013\275\304\331\024=\2715\212\274\362\216\304\274\'\010@\275\340\316\254=\205\243j<:\3129\275\r\247\325:\243\345\264=a\277\263\274_$\346=\215\017\032\275\025\020\224\274\312\373\310<\347&\020=\270[\336<\034^\272=;\261\216<*\273\277=\214\210:<\220\271_<%\261B<\3016\377\274\261\376L<3\204\243=\023\370\254\274\004I\251;!\275\333<\222R\234=\346l\354<0\036\032\275\310WA==~\201\274\223\024==\236\262M=5p\242\275\277\354\025\275\271?\376\274.\014\335<\356cV\275?\275{=q\013z<J\334\371<\222&\243=\242;\225\275+T\032=\330n\342\274\037\216\222\273\n\365?<q\023\253<B%\356\274\213F\223\274N\031$\275\240\372n\275\304\267\217;\204\372\212<`\264Y=e\361o\274\024\205O=\n\007I\274\213\020\376:\333C\021<R\236\326\274N\002?\275u\332K\274\307\273\361\273\227\021\345<9I\317<\347\325\356<F(\275<\371\356\211=\021\212\267\275\351\270\t=n\243A=\013\214\016\274\317q\241\275\334\223\266\2745\306a\274i\332\237\274\347\327\177=\355g\323;4\230\345\274\352\331\177\275#Y\243=7\210\321\274 \3252=\004>\025=\017yS<\243\354\202\2750\3008;\311\200G=\240\326E=\217\326g\274\361\303\020\275\246\302\033<\3437\225\273@.\363\273\004\354\033<\376\203\374\274I\253\366<!\216\204=\322\303M\275\327\235\306\275\233;`=\276\277N\274\020\007\014;\014\237\035\275\'\207\374<\235\272\037=\342\264\255\273\352\371+\275\010Y\"<2~)\2755\311\233=\372\371F\274\026O\031=\335>\021=\\\313\376\274\'(\241\274i\036\206=Q6\037=N\316;=A\306l\275\023P\243\273!\326\241\275\036\201|<Sf`=]\002\226\274T\273M=\001yC\275\256\213\"\274Y\236\245;\"!\231<\232\246\270:\315-\325<\341\354\022=}\323;\274x\330.=\030\370\r\275(\t\026\275~\264h\275?\316+<\333\224\325;\033\315\r=\254\" =Q\222\022\275\n\2167\272\214\177\210=\357F\206\274\031\374{=\341\275!\275\022\262\213=\234\242\231\275RW^\274\331B^=-E\302<{\226\223=\240\257\366;2\312\236\274\357\365\367\274\254\353\222\274\271\374\327<\372:\211=OO\246\275\036h&=\341\321\313\275V\302%</\252\037\275Y\352J=\236@\225\2742\240.\274\340c\036=ZI\241=\250\r6=\020\340w\275z\341\205=\360\034_\274\332\234\241\275*\325\375:\\\355\353\274b2\027\274\342\036*\275d\313\000\275V\274&=\255\222\021=d\312 \275F\344\202\274\r!#<)n\302<\236\r\262=h\351\037=\367\325*\275\206H\342\274|w\352\274X^\222\275%\312[\275\205\367\310\275| \205\274\351\267\321\274\221\016d\274\326i\010=\361\021\005<\373;\357<\0017\317\274\262\024\377<~vb\273\031\261\327\274D#U;\240\235O<\227T\004=t\200p\274T\025\262\275\234\356\242\274c\374\272<\242k\210<\334\350\206<N\320.\275\316-\354\274\r.\005<\316\r\254\274\031\312\271\271a\235\247<\032\324\202\273Ki3=\233?\272<\002\216U=13\322\274xV\022\274\270N\365\274\272\250\345\274\262l\322\273\213\006\275<\223\020\355<?1\374<\241G\003\275b\331\223\274\333\232z=[.\262\274\3023\263;\215\262y\274\006\317\202\275\321\247-<\3756\352\273\2234M\275iIS\275\265E\007<\206\350\241<\006\224!\275DK\211\275\"^W\274\252|\203\272\025\320$=sx\314=.\313\212\274\005\367\323;@ju<\236}\250=\032\377\322\274L=\250<\2726\036=\213\244\021;;\200\205<\261-C<\036\035s=\346\362\010\275<\331\201=\341_\201=T\'\274<\031\275\214\272.x\270:\024>\277=#\212\027=\241~\203<%\272\313;\232\254e\275\240m\r<\250a\202\274\2312l\275o\322\205<\3727\236=Li\241<?\270\260\274\233\232\253\275\220$\243\275\264\3602=i\326\220=\333\2502\275\276DJ\275J \250;\347i\245=Ar~\275k\r\245\273\013:\013\275<\327\253<\031e=;\366\027y\274L\025\326<\211\337\"=\261\032\250\275|\031]\274*9\354\274\\\331\345\273\273\266c\275\'\235\212\275Z\032\231\274\261\330J;\371\343\001\275\241>\213\274aE\247\273b\2047\274\327\205\354\274QME\275\276\016<=\365\354\336\272\230=\325\275\265-e=\345\367\245\274\362\017z=d!\341<\223@\376\275Z\320\220\273\2123d=+y\233\274rZ\024\275\220\236\230\273\365?\251<n\371\355\274-g\361\274@\306]<\341{\024<J\214\273<\353\232f\275\344\374\337\273 \313\310=\t\325\342\273\271\335\325\274n\026d=\222\256{\275\306\021\257\274\255\257\317=\225\235\261;}\315\371<\225ix={\254/={K\254;\202\013n\275*\275\254=d\310\017\275\027\022\277\274\347<\r>/\207T\272\240UT<\002\356\022\274@\263\205<H>\253\275\232\265\335\275t]\206=\274+\210=qR\254\274O\204\002<]Y\223<\024\303,<-\004S=\261\337/\275(\336_\274\363\374*\275\326\277\025=\250\215\205\274\253\035\230\275\363)1\275\007\2248\275\252\231J;g\\\177\275|k&<}\345\206\275\3522\231<\005N\312\274\225\004q\273\340m\245\274eF\017\274\326\303\007=L\364>\275\034#4<5\325h\275\3607\225\275\247\275\312\275\356\220\330<\303\345\361\274>\270V\274\007\227\343\275\205\360\315\274\350fz\274&\276/=\205\314\334\271-\271r\274\307\000\337\273.\313\036=~%\000\274\323u\377=4\266\255<\375\3470\274\261\3359:K\317\314\274\205BZ\275\3149@\275\372\201#\275\016\ri<3\323\202\275r=\231\274\212\246\331;\343\025S=\302U\273\275\2775)\275uW\314\274O\033$=\3601+\275\372\017\\=ZR\343\274\'~\261\274\357d\303\274f\331\316\273D\335\252\275\301\265\350<\350\313\244<\317\335Z\274I\275.<\343[\301\273\271<\221<C\367\217<;\215\253\2742-\003;\027:\331\274u\215#\274o\026{\275Jk\204=\245k\207<\316d\356;\304\036\203\274E\222\310<\364/\360<?4B=M%\336\274\241\223\250=\001!I\274zj\315\275HCG<t\312\235=y\334\256\273\273\270\225\274\333\261\213=J\2128=\001`\370<\354\355L=z~\361\275\357\362J\275\357\177X=\251\332\234=\345\022\243\275S\201\240<E\223\231=,\321\256<\177Bp\275\035\215n<\214\232\340;*\234n\275:\220\240\275\026\016S\275U\372\373<4\241A\275\236h\003<[Rp\275:\331\033\275\020\363Q\274\317\230~<\021\353|\275\321\336;<\374\352\'=\263\204j=P0\313<\251\305\206\2738s\022=\360\310\276\274R\223\230\275\347\024P=\353\377Y\275\276\030\010<l\321(\275\022e\202\275\204\030\216\275,\2079\275wP\004\275\327\020\225=\224\363c=\311\201\320=?\220`<\264\375\200\275\n\370{\275b\037\022\274\244\r\036\275\005\374,\273\352\215\n<\235\006\003=Y\336R\275\037\306\234\275\221\344\370<\315\330\204=\375\273\215<\342\025\264:N\'\037=Y\276\246\273\204\304\n=Y\201\316=!\320\010\275lY\253\2757D\037=L=w\275\206\217\341;\362\036O\275~\275`\274s\007H\275\345:\272\275\332\004\367\274;u\256\274K\021\242<\273\254 =\r\036\225\274Q\253l=)\352\032\275T[\251<\221\344a\275eYc\2757*\023\274%\035\353\274.\272\267\2742\217\272\275\377\243\027\275\270z\024\274aq\010:\353m\342<\3779\353<K\017b=\255\344\n=\213\177\025\275\303\001\253=e\327\034<oW\220\274\276\347\345<b\342\217\275$V\024=7\371\363<?gY<\224\273\232\274r\335\022\273\nZk=\001\352\260\273=E\227\275L\305\374\2746PQ\275\\\366\207\275O5\256<\367R\005=\260.q=jV\354<K\1776=S\243\027\274\326\354\251\274^\205\225<\375\032I<G8(<\360\243A\274\010<A\271+\243\003<\257\221#=\2348\025<\004\243\004=\024bL\273\303\2779\274\307h\352\274\242\336\231<\221[\236\274l\031\215\275\235v\214<V+\232=b\006\020=y\017\246\2747\371\354<j\202N\275\344\273\034\274\324e5\274_d+\274w\335\003=u\031{\274\177Jm=\030\036p;\363Pz\275{Y\266=\242\247\365\274\327\242\006<{\216\246\275\201\347\271\273[\"c;8\373*<P@2\275\347\200]\275\320W\033=O\327\256;\206\260\222=\367\251L<Z*\023<\217*\202\275q\036\207\274\344\344\367;\216\323\017\275\374\224i\275O\006\031\275$\240\256\275i0.\275\021\262\264\274:gl=(\037\345<\031\334\264<P\212A\275\251yL\275\\\0076<n\305\330\274\351\324=\275Z\270\367<Q\243\206=wB\220<\334\025\203\275\216\371\002=\204b\336\273\2424\240<\317\373Q\275\235n\363;\267H\300\275\351g\367\274mmU<q\362\022\275\210\267\001<\363\201(=9\255\344\274\220\205U=]\026\036<Yy\260\275\373\231<\275\177\273P<\205M\215=\307!,<\347\262o=\272\364\264<\361\210u\274bC\\\275\242]\"\275N\352/\275N\206\013<\003\207u<c\037S=\232\375z<\303\027\342=\366h\262\274b\321f\274\362b\322:\323\355\250<\230)_=\302O\374<^S,\274\345\337\372\275\245\365\225=b\264\351\275\022\322d;\275\364\016=\374J6<\335\314`\275\327Q\226\274C\235d\275\301\227\232<$\".=\245h\341<\277sO\275\325\365u\274\237\334\240\274?FC\274\316\346\307<\233\364\316\274~^\253=\020\247\023<\305\224\345<\257\222\354\273\214\006y\274\275~N\272\276\361u=^\2366\275,\027T\274t\024\326\274\331\276\250\274\027\216\211\275\363?\';q\364\224<3t\307\274\272P\356\274\247%\032\275\212\016\211;C\370\200<u\304C=\220\250\303\275\315\004*\273\250K(=w(\325<\024\037B=\324\251\210=e\3470\275\357Yo\274\375(\302<It\006<\031\016\021\275}\331\225<\355\337\220\273\236\363{\275Q\346\\\275,\326\236<-=\235\274\3274,=D%T=\317\343\250=K\245\306\274c/E\274-\276I<\344\320u\275 \005\202=\245\305\273\274\'\336V=\267\235p\275\0377/=\316j\262\274\315\310w=\226,\276\273cE\210\2756v\210\274kg\034=\372\345\255\274P\311\336\275\335\312\331=j\276\244;\036HZ<P3\242=\325\357\023=\003\376\232\273Q\002\223\275\335\247\310\274\247\270\370\274Dz\247\275\352`\'=<\3507\274\242\0068=l\303\027=\376\213\227\274\266U\201\275\222\222+=\222kB<\2751\234;\n\364?<\225R\207=?\027`=\354\350\235\274\337\005\242=K\233\004\275O\020\003\275\357\030\205\274K\2035\2756U[;88\033=u\363\205\275\013,?\275%\266\263\274o\207_\274>\342[<\004{\235=\341@\370<\001\332\"=\373\347\325=\213.\357<\023\033\217=w&+<\342\2727\275N%\016\275\024\207\215\274\024\tZ\275o\344\007\274\010\377\210\275o+\204=\037\037e=y\266s=\005o\200\275\022;f=&rE\274\020\231\263\274\02320\275\277\356g\275H6;\275\341\006\003\274\325\353\005=\373\224\034=\315mO=\222N\211\275\253\010\265<\216Gd\275p\342\034\275\030\014\226=A\005\n=/\375\220=bTu:~\324\267\275\374\002\255=\025\033\263<\345\246w=\277]g\274x|\022=\364\313\014\273\035\317\221\273.\252\367;\350\007d\275+?\233\274\320\235M<\365\217\014;\233\326v=\222[\333\274\241\265v\275~9\206\275\tmn=\003\372_<\206\211\3509n\214\r=\374\245/<\247\002\031\275F9o=KE\323<\005kb\274\200X\3129}\277\247\275\370I\225\275\262\"o\275\204\324\234=\263#\344\274\\\n\205\275\214%\304\274\332\327D\275X\252\240=\032 \375<1\277_=2F\231\274r\007F\274\222)\020\275\315U\247\274yf\340<\325kB\274\313\253F=7\\\374<\315\203\202=!\272\204<Xo\036\275\307\006U\274\006_M\275x[\206=I0s<\307\253\233\275P\003a\275\236\322\226\275d\335\227<\322\332[\275\361\231\303;,\312\303\274\342\222\022;[\'\277=q7S=\316z\233=\014\026\301\2738\334\217\274\211\240E<_\232\232=V\266\241\274\242\263?\274\354\177\315\274q\215\271\274\331-z=>\231E<\351\253X<\334!\310=\347<\'\275\321i\310:\250T\034=\237\211a=\203\035$\275\363\240}\275\004\354\213\274\032\0339=\373\217);\233\365\035=(F\255\275\027\232c=\200\260\271<n\365\350\274\225\346\205:q\031\376<<#\255;]\030%=\356`\366;\250kX\275\021\002\201\275\314\376$\275\343\020\245\275\221\364\013<E~\230<&\214\205\2739N==\306S\310\274\261\257/\275\326.\300<\371\365\t\272\017\355\242=\300X\240\274\220\334\300\274>\344\320\274\3337<\274/\363d=N\304D=G\3319=\360\315s\275\276\212\323\274w\375\302\274i\007\334\274\324\203\302\274z\027\277\274\254\314\235=/\271\242=s;<<F\005z=\337\220\221\274\372\253\305;\"\316G\275\265\240!=\0211)\275~0\376<\267z\226\273UYP=\275\277\351<)\234\254<c\200\251<\200\250\302\273\371\323\260<\256\r\003\273Y\252d\274\030\251\026=A\262\234\275\013\312\224\275x\320 \275cs\320<\333H\206\274\323\340\337\274\235\014\340:\021\001\334;\203}\222<w%\323\274/\220N\275\256\306\233<\023\032\306;\226\261@\275\033E#\275\261\305\223\273G\203\254=\310\270P=\251\234F=\234\305\033\2740\346%=@n\314\274B\243\036\275\217\"\031;7\310\235<\352k\362\274\335J\014\275\0212^=S\215\234\275\355\372\201\274\022\347\035=p\345\246\275t2\342<\013\234q=&\265\370\274\247\200\225<T\010\211<\207j\306<t\260\232\275\t7\013\275\226\215\237\274\325H}<&\343X<\301\267?\275h\350\214\275\370\321\266\274\301\313\227;z\\\350<\014\264\314\274tj\"=\313\235\202\275a\rv\275\333\256a<\264\232\317=\226\300\002=O\275\007\275\036M\343\274F\025\276\274\322\272\201\275JQ\376<\374`h\275B\244\216\274\202N\026=\227\000\204\274\n\001\256<\225\230\022\2753\350\004\275\232\200\346;\030\315T<\027\006\340\274\0065\260\274\005\331\271<\343\034\266;e\265\251\274\351\250\201\275\016\0007\275w\331\344\274\340g\373\274\312\365R\275R7\275\275\326\307\"<\000\374h=e(\260:\031\004\300<\253\235\223\273L\014\344<z\354\326<n\377\263=\315$Z\275\017M\265\274\217\231-=\340\326%\275\2153\001\275w\305\267\274-`\237\275\036|?<Y\234\032=\206t6<!I\025\275\303\022x=\033\371\235\275:\344\300<\375E\237<\334\2135=v\347+\274\2037z;r\362\r=ur\021\275\221\231\350=\234\037\230\274\2176\210\273\351\207u\275GK\246;#\272i=\213 B;\263\343\306<\377\355/\275\245\022W\275\034\022\270\274\030\244\200\274\272\014\223\274\307V.=\026a\032\275\030b\335\273%k\347<\"b,=\215\335\211\275%\016\331\275\036\206\334\274Z\203\352;x?\317<^\001\177\274\247\361\273\275\217F2\275}\326\364<\0051\231<\262Kh=/o\024\273\334\250$=\324\226\220\275\245\322\203<(\363\223\274\336\223\371\275\373\250\206\275\356\346m\275\322|\207<\237\000\036\275\275o\252\274h\353\230<\n\201,\274G\265\255\274K\347d\275\236AF;0\037\241=h\364B=\332\372\021\274\355\203\221\274a\002\203<*\237h<\027s\220<c?\331\273\220DL\274W\002!\275\254t\201=\226\335\016;\024/a\273l\262|\2726\2651\274(P\217=\220\204\361\273@\364\221\273O\303E=\363D\013\275\355\255\025=\t\203;\273e-U;\016\315\n=\203\224\245;\260\305G\275\222\030I;\'\r\324<\263\306l\274\014\032\005=\365\3518\273\004\205p\274D\245N\275\326)l=2\230\017\275y\024l;.\221\262\2729;\010\275\350\204a\275\367\0106\275\3000\366<\002\334,=t\3607\274,K\321\273\265\217\021\274_\263N=6W\244\275hH\354\273i\362N\275\244a\264\275F\347\336<\352P\366\275<\275\306<_mk<\362\364\257\275\013\373\212=\217\342E<\370Z\002>Ty\273=Z\204\264\272au\251\274\271J\177<\355\014==\331z\023=PB\212\275\304q|\273\277\260\351\274\036\332\236<b\341\216=\013\327D=r\216L\275fJ\262=\332x\032==:z;\235x\300\274K\200::D\213\013\275\264\016F=\314\326\316=s\001\233\275sH\211=\274(\337\274\000\253*;\354\001~\275\376\334\365<.t\330<\001y\353\274\354\355H\275\333&g\275\273\333\274<\252\202\320<\211\"3\274\266\216\013\275\326\005\224\275\360:8=&\211\220<le\000\275\265\220\334<\300\016\267\274\345\265\033\275\223p\000\276|g\023=\264\312\342<\267\004\216\275g\311\364<\324,\237<\330\354\374\274\275\234$=\"_\256\272w\207.\275\316\200\023\275{\334\201<\217\240\014\273\302\264B\273\216:t<+m\257:;\t\366\273;h\373<\246\031Z\2753\364\212;m\030\243\274!\243\314\275|\"\006\275\261\025\337\2745gw;\363\217\217<d\001\177\275L\005n=.\263\010=R\331;=\341?/\275\357+1\275Kf\027=jH\274<\036\311\321\274T\310C\275/pD=\021 9\275\364 \256\274>\214\362<*\256\227\275\202\366\365<T\212\030\275\304\232\250\273}\370\224\275\034\000\004\274\225\276r=T\337\330\274]q\016=L\250\267<\272\271\033\274\371\320\004<\341\371/\275#[\260<\362PE\274\314\324c<\344F\206<zA\376\273\361\244\335\2749\327\021\275\2734\263\270f\363\325;\001\217&\274\367y\030\274\021\332\356\273\2339\017\275S\315\260;\235{l\275\207}\244<\212\220\265\274^\330\374\274\335\3274\275\374o\r\274\273\202\302\275Y\377J\275\313\014\276;\240\221\247=\"F@\275\344\334\205=F\270\002=I\200\256\273 ?D;\032\355]\274S\006\032=\311\303!<r\234 =\220\2045\275A\324.\275}\373\307=\3040\037<\037)F=\312\254.\275 \376\031\273~&b<\343\205\000:\374\312\255\274[_\n8j\315\213\275l\253\242=\221\n\205;\314.\314\275\355\277\213\273iq~=; N;\234\267\352\274\256L<<~\230#\275\032@\223<\304v\027=Q@!:\r\001\025=\017\355{\275\241\253s<\2436B=\323\303\205=\244\243\243\274\331%\221=\346\210F;9\370(=\030\204\327\275\375\213\370\274\317\236S<H<\320<\2040\200=\233\035\202\275)\203\272\275\241\0279\275\364\307\231\274\363\013\254=*\031L\2746G\335\274\250\244Q<\277\204D\275\276\247\014\275\000r\202;)\302\000=N\267\023=\036\235\r\275N\266L\275Q\2544=\017&2=\245\221@=\363,\006<\245\0259\275\335T\335<\364\004\265=xw\245<\314\0353\274\216\316F\272\212m~=]\251\002=\001\310\351\274{Gw\274\210w\223\275l\265\"\275\372\336\030\275\271#\232<\350\345\223<t\244\214=\304\2416=b\024Q\274\334\356\241\274VD\213<\251\005\013=\327\274T=\007\222\013=m\007\255=\330\341\217<_\375\014=\353\257\214<\260\350\326\274\204~\033=\217{U\275v\n\246<\034\177l=\213\275\352\274\223A<\275\300\237\267<\217\331\213<\306\224I\275\271\211i\275X\016\200=&B\246<!\246\001=K\177\340\274\001\261\275<\272\3015<\370y\360:\020\372\020<SQ\300\270<\354\003\275X\023\030=\365=\240\275\361\026d\275\240\250\317<\365\213a<\371P\256\274\244\342d;[\266#\274\241\311\214\275=>\217=\242\313P\2757\241\310<\220\031\260=M\237r=\275B\341;\032m\370<i\265h\275J\004 =\34287\275*\016\232;\354%\331<LI?\275\325\252\004=n\014\361\274\032\355\334\275\274B\273<\246}\237<a\022D\275\003y\321=\033\303\214<H\206\014\275\022;\001\274B<m\275\267|\312<\226\014\022=\003\240\302\275\253\226\326\275\304\327\362<\0238\222\275\203\326\373\271=\233\224=\376[@=\365W\224\275\240\257\264\274\024D3=b\312\365\274\322\331\231<)\271\277\272\236\223\332;\314\003\323\271g\267B\275\266\021\000\275\202\005C=}\241&\275\323\261\253\273Q\211\247<P.\315=\rp\251;\246\020\364\274\3262\266=\224\030\333<\347\216\305;\311\203`\274\260Z\331;\377\300\245\275My\216<V2+=\234\376\026\273 +\272\274d|\000\275^t\212<C\355<=\243\256!<\375t3\275\217\340\255\275IZA=\217\t\243;\010\204]\275`\242n\275y\273\214<\217P[=e!\242=\027\355\232<\211\025\341;\356]\034\275\177\"\316:%/(\275\010\321\370\274^y\233\275q\352\310<bR\033\275\354\344{<Q\306w=oM\201=\352\230N\275\177\337A=%\313\333\274\242^\336\2759\203\277\273<\364\256\274\n\300B=C\366\r=\266P\240\275\301\2359<\212\033E=k<\302\274\201\322\213\275\234~[\275q\'l=,U\003>^1?\274\371\311\"\274B\214\2269]\311\220=\336\261\241<\021P&\275x#\225=Z\344\222\274\036j\300\274\303\221\365<M\206\355\274\017_\261=\327\302\177=3M\240:\034\345\334\273vn\177\275F\271=\275\241{E=\224\rv=\016\005z\275x\225\r\275i\201\203\275\322}?=e\2662<\0022n=^M\026\275u\013\002:3\220\357<, \276\275\341\315:\275+M\305<\311\001X\275*\372\233=K\363\033=\252Z\273\275\227Lk\275\326>\320;\302R\005;\364\360\267\274\034\026\023=5\360\237\274\016\330\204\274M\331\027\275\342\326\020=\275\226\204<f\3727<@\273\030=\0344\205\275\236|\235\272\230\225\255:\353\373#\2756n\236=\246\000@\274\006\3146;\320\377\364<E8\020=*\352\342\274(&\244=\300r\305\271YAf<o\306\246\275\231\321\343<\243)\236<\264\210\022;\370Z \275J\247\312=S\224\237\275\300\202\036=h\364\253=R\374\276\274\343\025\216\274\014\263\236<\373T\364\274\306]\324<\242OS\274q\335~\274K\320\0319dzX\275\365v\005\275@G\035<\310\211\376<\300j`=\026\362\205\274\311\244\203;)6\264\275\235\263\014\274\322M\202\274Fbc\275\265U\301=\247\366\223<\205\307\225=Y\250O=\336L\336;\024cH\275+9f\274C\305\025\275mA\300\274+L\357\273\324\274\323<\377\201\363<\257\021\332\273\311*\014=\306;\203< _@=?\251r\270\n\207\214\275\322\032\200=\037\214\231\275\213m\251<S\026\027=\241\273\241\274KX0=\'=\244\274\260\2500\274\036\323\210\275\337\3135;\226^.\274c\n\224<\220\316\260=\023\217\364<\r\004\207\274\313\346\350\274&\364\272\272\212\334n=|;\237\274\344L\250;P\267M<\001]\031\275\344K\013<\320\311\220<\336\357\340;\023\'Y\275\364\027\315\274\244\310\257<c\346&\274\330\341\276\271\202\257/\274\033J\324\274\337]I=;\252\303\274TDq<\374\r\003=M(\007\275\352q\333\273\3173\214\275\342\362{\272\243\323\240;\227\277\250\274k\375Q\274\345\017\204=\221]d\275L \224<d\310\324\274\225E\004=\266\261\373;\370\326\335<\003@f\274v\231\346\274g\350\025\275\n\031\256\274526\275\226d\271<\030\240C\275\242EC=JL\216\274\360n\202\273}\273\332\274\001\025S<\360\211\031=\354z\017\276\301>\250=O\017\257=o\n\212\275\346S%\274Jo\261;O&\273;\025\356u\275%\353W=5\312\001\275\300U\001\275\326\rt\274\250\006\226=n\264\274\274\226o\277\274Z\255M\275\221\371\275\275v\257\246=as\n<H\267\n\274.\302I=\260\010\262\272~O\356\274\206\247\210<\332\314U=yz\312;u\230\013\2757\245M\275\306\032g\275\364\245d<sk\007=\225\225\273\274\323~\337<I\377\035= \255r\275\023\334\004\275\\\023n=\374\266\024\275 \346\013=\nM\332:\375\214\261=\013\024G;r\300D\275\237\330\376\275\261E\236;m\230\372\274n\224\003\275\243h[<\204\211\010=\313\257\306\275\373\371\227=l\006\033=!\372\314<s\371\t=\266!\016=;V9\274\232\361y\275\246\0350<x\236\202\2757\224d<\206\347\017\275\005\233I\275\017s\256\274\332\0023\2758\2765\274c\315\003\275\215\326\251\274\305|<\275L\341\361\274\202NM<&\2072=Z\373\235;\033\256\230\275\361\234m<\256\265`=\364g\021\275\326\255\031\274u:\"<\007\251\001=;\260J\273\201o/\273\303\013\371\271\211$\210=B\270\022\274\275\235\003=\030\272\232\274\354\303\204\275jt\242\275JW?\275\\!J\275\005\306\033=!\356c;.\231\207\274\343\201X\275l\211\220\275\006\202\204\2746\332\260\274v/M\275\300l\006=\245\237\220\274\376\003\314\274q\215C\275\234*P=\324\340v\275O\237\253\275i\254\220\275Bu\246\274\001\367Q<\253\303\336\274\271\"5< \203g=3\367z<$!\373\274x\030\027\274\003\377m\275lR\251;\26311\274_\202\376<=X\300\274\222\242;\272)\357\032=\367#~\275\263\275Q=x\002\222\275\346\236X=+\216\222<j\253\221\274DT\352\274\305\320}\274\005QE\274sg\354<\341\333\016>\350\177\260=\364i\340\274*\330==\014;\217\275*\023\344\274#\376\034\274\3234\036\275\237\004 <\223\232~\274\275\201\024\275\026\310\203<\002{W\275&\010\t=\346 !<i\321\013\275\251u\362<\372\203\221\274\300\355\223=\3658\204<\354U#=\360=\365\273E#\277\274\270\313\035\2757\306\313\275?\362^\274\020\226\201\275\272\226\320<M\200\"\275l\326\013\275\234(\256\2740\325\202\273\002\236\202\2756K\276\274\230g\245<\247\026\374\275\022\016U\274_&\214<\364;\002\275\337\360\033\274\350\304h=\033k}\275\201\241\376\273\331].\275\273\277\231<\355\312F\275R?G<)\266\350<\202\323K\275A\2210\275\036\030\250:v\315\336\275\263F\270\274j\312\224\274y\005\331\273k?\343\274[\376?=\323\345\315\274\006?L\275\344U\341=\352~\367;\002A\036<\356\2032\275\324\313s\274\330\312\240=\240\027r<\323\226\005\275\277\177\026<U\255T\275D\242\334\274\25729\274|\024\257\275\000\370\027\275\306\262\336<n7\023\274\255?\255\274\027\360\373\274u\031\010=\326Vk\275\205\237\354\275#\376Y\275M\311\321\273us!\275\360\312\266=\036\345\254\274\206\253\026=p\262\345\274\253\245h\274LD\216;>\254\235\275R\225\356;\026\326\351=\252\3308=\354\301\312\274sQ\363<Q\233H<i,\314:\376#\001=w\272\007=\r\232;\275)\031c\275\234d:\273\010\220\252\274\221+\177=r-t<`\230\005=\367\177\331\273i\026\314<X\001\352<\006\245\256<\320\275\033<~\277\245\2746\350\360<\244\030\201=E\323\262\275\001\004\270=\240\211%\275\337\"\206\275\224\\\362<\0148\260;\340`.=\301a\235=v\006\177\273*9\206<\330w\021\274\327\373]\274Ro\216\271/\311\r=E.\017=\366bk<pY\323:\272\374\006=\360=^\275\">\202\275\366\243f=\275\246\230<\201\ry\275\375^\334<\317\370\n<:}v\275\327\303\030;#0\364\274Ie\003\275\255\270-<\035B\222\275\245\205\204<\304\231\375;\3322\361\273\340:\224\275$\n\234;\366!)<\177\020(<[\340\241\274\362\214)\275\317\000\370\273>\312\021=\001\352\364\273\354\"\215\275;!\316\274\237\305\246<\245\316\034\275\330\201\004=\366\213:\274\257O\037\275\224\237\213\275\tA\263=\222\325\220\275\thB=\037vL=\246\352\035=\362u\025=5g\241\274\317\257X\273\360\316\211=\201\014\366<\247\\\340<\325\337\032<\331\214\237\274\244+d;\231\3501\275\333\r\314\275Q\2118\275\274\375%=\277o\202<n\177G=\335%G=pr\022\275ff\007=\3331\010=\244\226(:\317-\223\274\221s9\275\341\204m=\032\220[<\347\024\014=\262G(=\342\326\275:\221\321\364\274\016\3553=W\200y\275\257\241\317<vT\035\275J\241\215\274?\252\207\274\003p\333<\035\031T=\242\0210;dW\250\272\003\321\211=\364\001\017\274ce\254\275\367\373\010\274\334\003\332\275\302l\363<\255\016\377\274\316\233\022<)\316\343<\035C@;\310\332\234=\034L\244<\375\026\013\275\221\223J=\324\256>\2752\303n\275\206\303\216\274x\305\001\275?\016\277\272\257\220p\274c\177\245\275\205\275\307\274!\367P\275\346\031\320=i}\343\274\034TL=\343\311\236=\213\234\201<\370\215\200\275\002\305\004= 1[\275\213\014k\275\251*q<\3136L=\364\203>\274~\007\307=!h\345\274\241\376\"<x\261\312\274\206\252\210=\365\225\266<\034\317#=\016\246W<a\343(=\275\304\0349\241\t\004\275lI\350<\350F\354<`I\336\274\337d\304\275\243\271\016;}\r^=\251\224q=sD\323;~\210\036=\363\206\320<%\222N=\277<\202<W\237 \275\247\r\032<\036\005\327=|\312\231\274Flr\273\266\236\037\275\325\\\372\274\326\355\302\274\t\033\010>\244\324\026\274\307\323\313\274\361\267\202=\307\343\262\2754Q\214\274Jc\021\275\013e\357<\023\371\2129A\036\264<\303\202\326\274\013\246\305<\357\236\200<\245\230(\275\256\232c\273\252:\207=@\001\247=\0301~=\341E@;W\000\265\275Y\214\360<\353\355\033=M\245%=\322\230\325\275\266\305y=z\233\231\2747\241\261=\010\221\340<x\273\304<\315f_=\207\270&\274s\362\202<\'\210\316\275j\347!=\017\\f=\007\351\206\275\035s\347<\3603Y\272)Ch\275\330m\355;I\364k\274ju\235\274\217\027\233=\254\336t\274\254\214[\275\302\311L\274\216\3561\275P\205\201=\355\026\273\275\004D\223<qY\020\274\376\227,<\221^\037\275\2133\032=5|\010<Y\256|\274\303\003|\275NG\002=\021[\003=E\211\214=M\016\274\275\231\020\322;q\341_\2758w\222<\221\036i=R3\210<\237.\230;\275\356C\273k\325\227;MZ/=\216\370\035\275\246\274\203==\357\270<H5\221\275\2715Q\272\230[\232\275\231\003\003\275P\005\274;\022F\214<\314\226\n<\377?g\275\240\213\201=\001i\236<\321\357o\27533z<\226\331\275< \222O\275:J\376<>\324.<]\r\234\275\264\233\034=H\264\324<\222f\263\275Gb\247<\374Bh=_K4\275\210\016?=\245\247\336\274\327\013\277\274\t\230\026\275\312];<!EJ=\360\264\336\274L9\242\273\270 0=\024\014X;^T\\=\211\032\002=\311n\225\272\331\025\202\274\320\003\374\273\306y\333<uQb\275\264q\001\275\242\022\034<\353\0162\274\332\002I=\365\315\\\273\316\027\373<y\347\203=\\K5\275m\371\001>ST\255\275\275\222\334\274\n\213?<\236\205\354\274\375\316\'=oY\202=\333\206\265\274!>\214\275\221\340\036=\014\221\241=\245\3143\275\212C\357<\216\0235\275\330\200\013\275s5\210\275Z\003\327<f\261\032\275K{\030;[\230q<\200+\002\275\322\003\370<\256\246\253;S\'\233=8\211H<\330 m;J}\310:O\214\007\273`kh<x\310\214=\315\026K\275no6\275\373\003\221\275\235\355/:W\361O\275\2153l=Z~\013>\364S\204=\254\2574<\262\017\245\273\322|\230\274d\375\274\274\307`\214=\364G\351\274\242\302\211\274q|\213\273uX\014=\231\0310=\222\001\377\273\371\330\357:FN\305=\266\342\n<\375\005\255<\361f\306\2755>\037=\207\263\010=\r\024\216=z\003\257;\233Y\353<\215\230\331<\236\204?<\320\364\230=\302\004\256\274f^i<\252\215[=\223\021\306\275\253\031\t\275\000T9\275?\246\233<\252\267\337\272\356\307\246<\207\'2={\031\037<\2433\315\274\037\215\212\275uG.;mZ\361\273\303\246\314\275\307\223\225;0\267\354<\006\356\006<\007p\240<v?X=\333t\330<1\016\223=1\300\235\275Vh\024=\255\356\257\275,\013\035=,\210\375\274\352\352j\275oO\026\274(f\014<o\327\201=y\362\203\274\2128\037\275l\337\261=\322\345\371<V\236\034=\332\025\r=\227\323\210\274\234\341\n<\316f}=\276h==\212\033\322;8\024\307=Q\241\317\274N\001\221\273W\216\r=\016\321\264;DS\351\272P\026\277<\254j\001\275\"\207\215\274!\232}\275\335\221\262\273\220\302d=\256|p=\202\276v\275M\261\370\274\337&\325<>\026\"=\232(S=\261{\004\275\220\210\226\274\020t\000\275\006N\227\274^P]\274\032\226G\274\362\001\204\275T\217k<~|\223<\363M\r=\r\315\313<h\210\357\274IE\226\275\360\256S=\304\325\032\275\036?\201\273\267g\027=\232M\'\275S\202\2338\367C\013=O\221J<YJa\275 e9\275$A9=\301\206,\274\350L\260\273\262\211X\275<m\322;\230\261\202\274*u\007>\304\237\205\274\223G\177=I3i=[\325\241\274\312,\312\2742\220C=/\207\312\275)G\245\275Q\216\n\276\236\272\031=\007O\016\272|T\243\275\255\246\"=5\013\303;m\267\'\274g\027\352;+\354_=\260\306\000\275\203ZT=\010L\004\275\212\363\037\275\nN\241=\'{\013\275\227Nx=x\206w\275y\360\370\274\t#\262;\324\261\210=p[r<\251a>\275\351\206\'\275n~\352\274\266\030\312< 7\312\273(\027(=\310\367\253<\275\320\220<HTD<\371\341\264\274!\2326\275\333v\235\275\253f\030\275\303\375W=\275\013\275\275\014GO<\327\226\251<t\327\016\275\n\303I=\317/\204=\317\325\341<&\363\371\274<\217`\274\353u\356=\370V\223=\215d5\275g\257N=\356\364r\274\037gG\275D\232\243\275\"7\337\274\266>\242=\221z\324\274\204\331\311;{\224b=\224I*;\003E\004\275\014m\3069}\1779=\251\306\340\274\257\n\306<\017\177\306<*\205\016=\306oC=\21498\274 \024\271\274\322\327\325<pcN\274\370\032\035=\371\036I\275\367|8\275\345Z\203<i\004T=\242\373{\2750\022X\274\272\301\231<\214\205\351<\022\315\353\275\205c\326<\371k\201=\274\312Z<\270\267 \275\353\215\036\275\341\345E<-\337\270<\365\317\302\274c\332\r<\364$\352\273\020\256J=Mdw\274\343R\\<t\224P\274/\336\207=\254>>\274\207\351\210=\333\017#\275\233\010[=\302\324\234:\037\335\304\274\373\340f\275\302\017E\275\314\005\005=\340P\031=3\300g=[o\201=\362e,=\354\376\"\275j\274+\273\2063\247<\310\\\353<\214\222\252=\231\363\231\275\035\217!<\331\347\021<\230\235\221=q.I=t\225\263\274\2275\222;\250\213\007\273\311r\'=\323\025\000\274M\363\003=G\\~=\004S\n\274(\245\230\274\322\341\224\274\273\007\306\275\2549R=B\374\035\274.\206\340;!\246\334;\tg\250<u\216\230\274*M\211:\204\237}<X!?<&\026\221\274\247W\332;\370vR<\317\001\246<\033\265\364\274\021n\243<\345\344\370<P5\342\273\360\"(\274\223lP;\253\244\3679yV\'<u\366\267=V\255q<\030\337q\274\227 \212\274h\324\303\273W\252\232\275.\0076=C\360\216<\211U\014<\256\315Y\275\206\210\026=\321;\014\275\3471k=I\322>\274\237\370\r=\317#\346\275\274u\242\273\002\360\306<\211h!\275\224\367\024\275\350\250\337\274\216\352Z=\301dn\275\020\235\014=\353\223K=w\367\201<>/\216\275\030\317\355=\224\206\027\275\325\265\016=F\0377\274\261(\271\275\364r\014\274\025\240#=-QF\274\261*\353<\246\016\350<\325\375r<\360\370\201<@x$={j\\=\023\327\235\274J\330\221;H\275\212\274\374u\025\274\313t%=\255\\\270\275\305\351N;\201R\251\275\210z\221=0\314\235\274\314Z\252<\204I\030<8v>\274\336I@<\377\215\326\274\'PA=\307\037\204=\371\276\201</4K<\025\347\354\274\037\242\373<+\367\036\274U=.\275\206\311G=\271\373\306<!;\316\274\320\372D\2731r/\274\373\013)=\314\350\234\273\300\326F=\332}R<q.\343<bE\023<Qh$\275c\374\023\2744T2=\223\177\304<\302\t\243<E\255\020\275\350\r\023\275\201:\221<\"\260\307\274\010\255Y\275\034CA\275\0025~\275\025\333\n=\355\275\025\275\310\316\030={K0\275\362\005\236;5,\230=|2\271=\347 \277\2737\023P\2756\334\200=\336\031\275;\024\013\225<\370\264\227=\222\025V=\262u{=*_\255\2750B\265\275\r\232H\2754)9\274\007\300\361=\203r\214<\207Ac<\301\341\216=\353\267]<Q\263\r\275\211\246E\274[\254\327\274\353\334\360\274\307\303\005<-\356\334<\376O\000=\314\360R\271\026$N=V\003\210<\311\245*\275L\272\247\275k%\216<>:\275<\030\205G<U\234\214<\342\224\216\274\210K\036=\300J\321\275\361C\034\275\304\306-\275Reb\275J,\371<\006\212\323\274\000\340\324\275\030\370r\2756\347\036\275\330I\243\275\2303\334\274\342\021:= \030\367<\336\363\033\275\310\226\206<\301\230\234\275\347t\023=\025\361\323=\264\350d=Hd\007\275\006\237_=\016\326\210=\244\024\'\275%Ri\274U7\026\275V\004\234=\001\356\'=?\364\204\275I\3565=8\230\211;*\367-;e\373\023=\321\025\260<\222\201\006\275\220\030\242;\324\251Z=\205&\225;\203b)\275\346\275\227\273\027d\022={\371r=.\227\322\274\360\014\301\273G\264\230\274\316\013\007=D\2304\275\263\034\250\274\254u\036=\024\3630=|\277\364<\366\300\304\273A\273\246<\372y\026\275\002\366\020\275$\3515<E[b\275\272;\227=\010S\225=^\2138\274\343\030\340<\004\374\215<#\333\276<p\376`<\276\367\240=\276\301\306<\346\373e=j).\275\322+\215=(bN\275\316\004\367<\3449\246\275\025\330\364<D\027\224<\353\256\033<\001\334\024\275\313\244\313=\021\220\303<\242\036\010\275O\301b\275\306|\r\276\000\347\360\275\335\013\201\275i\343T\274u\343\272=\317\263\370;Ar1\274\3459\327<[s\336\275\314\205\263:K\275\213\275\034I\271<DG6\274\010,\342\275\251\267\346;\022A\215\275\003\004\241\274\226!\277\273\251\345\211<\3115\314\272\211_\370\274\027\017\246\275\202&_=f\310\243=\'\260D=\337K`\275\361\204\206\274\366\314)9\031\366\023\275\026\005\262\274\333\300`\274u\345\310\273\204\322\242\275K\201\020=\220\313\340=\030\334\256;\016\275a\275M\225\335<\257\203\324<\301\027\224\273\007\016\325\274\271\010\266\274\226\0314\275\315\004g\275\006h\372<\321_y\274\253\332\3729.\255a<M\343W=/\340\313=\213\005\021=\352Z\317<cx\213\275M0\036<F\363\331<\032\013\272<\320\260P=\226\027\242\273O\022X;Zx\262\273\001C\264\274\360\3014=\000T\277<~j\016\275&\225\322\274|(\244<\264\017\001=\355\255?\274\320\367\241<\344I\244\275\373Do=\000\270\247;\205\315\272\275\215?I\275\337\3000\274\304\251\027\275\365zs\2758\347s=6\222\232\274<\262\313=\216:`<\233U\371<w\214\203=$o\362\274\277\231?\271:\\W\274\233\251\231\275\253\2766\275\352\327\025\275T\3359=\335\203\345\274W2s=~\313\017<|N\206\275r\273H\275I\244a=gA-<\250+\354;\356\246!\275\226^g=\313S\326<\342\317\363\274\261K\240\274w\255R=/\274\255\274\230\200\252\274\326\034\305\272\275\007v=O\001D=\277\255\373;;\022\306\274\261:\235<\262X\350\274r\214\233<\274\237\025=\236P}\274]k\257=\362\231a\274\245\004\362\274\271\3667=\246\275\272<\322\334\300<\2628\234\273\035S\201\274\230e\373\272`?\201\275.\320h<\317aN=v\226\231\274Sn\356\274P\205\236=\230\330h<J\277$\274\001t\232\2743\336\001\275\037\3271=T\020\245\2752\260\017\2750\033\017<\222\336\366\274\2719-=\023\213i<\000\r(<\331<};,\351!\275&\375\237\275D\377\322\274\353\322\226\274\207~\000\275\026\017x=\271\303\321\275\323\301v\2750\316\371;g\346\373<%8R\275c\210\206\275i!\307<\344g\361<)\004\214\274\177\177\256\274M*#;\256a\240=\215\371\226;\022G-\275)l\275\274w\277\220;\024B3=\305f\324<\257\342\367\274/\242$<\336\014\003<#J\266\272\334\307\037<8\003c\274\350\252\353;u1\345<\345?\347\274w\373\232\273\250{\004\273\302\260\252<\335\360Z<\335\201\303\272\217\312\025==H\260<\212\\\303<{#M=X\271:\275\367\307\374<W\252\020=\204\006\334<\226\363\005\274\234\334\276<\375\356o\275\317\340i\275\206\013\356\274x+\334;\361\035\000<\261\265\266=\225My=pQ\333\274}\2447\275\335,\307=-#\217\273\341[f\274\230\316\t\275\365P\230\274S\201\327\273\264T\275\274\324\227a:*\304\224<\013rU=\013 \201:Q\3015<;_\203\275j4?=\377\003\314\275\023\005\013=/\342\321\274.\260\331<5$C\274\250o\324\273(+J\274\250\231%\275\356U\267\2756e\204\275\017\366\205<b\245\235=.\021\220\275\231J`\275\2265D=\033\251B=\377\005\314\274\205\324h=0\350K=\326\001\354\274#M\377;|\rw<;w\'<\3023\227\274\333%A\274\3376\313\273\355\364\320\273Y\203\377\275q?e=DD\234\274\255\270^=\370\034\211\275K\270\243;A5\333\274\214KU\275\007\031\314=\204y\004\274\317\t\227=\024[#\2754\3307\274[\257\207<\264\230\354<\246\316\344<\014\333\257=\217\275==i\276\027<\005X4\274\357\242`\274\020\n\316\273\023\014&\273\010\260_=\364Z\246\275\027,\241\275<\205\362<$\316]<{\204\212\274y2\036=\243\2067\275\211\033_\275\227\351u\274\345\341\202=\010RU\275]\316\243\275A.\200\272E^\216<\023\322\343<U\307\250\273\024\032\254<9\255\032\275\341i\234<\2347o\275\304-\"=c\3307\275\3425\211\273\231\024\022;\327\203\032=\201\275%\275\362\000\033\274$g\016\275O\031X=P\345\341;\267\273\355\274\364\216N=\370\r\210=\3512P<\253\212\372<\363\260\030\2752\207X\275\214\211\215=\310\301I\274\242\211Y\275\026\031\242<\000\270\007\275\344g\001\274\255<2\275LN\274<e|\002\275\264\252\013\275\232\324+=U\237O\275\333\234\331\275J\027\230=\354\271\017=\000\211\001;(\013\024=\360\036\307=\347\215(=)\327_\273\370^\010\275\2042\345\274\034C[=\007\353f= O==\3248F\275\367\237\313<Yp.=#]\006=\340\030\351\274<\272\323<\304d^\275\225r\335\274\200\234l<\267.w\273\374zE\275-\211\t=+\'\325\273\247A\260<\374\022\372\2745\300U=\366\314\205\274V/\234=\022s\241=\216l\241\274\333\010\231\273\310\320^\275w^\"\275)\013\037=.\303\027<\272\344Z\275\253GO\275\360<\036=q\361\3509,\363\203\275LF\343<\343F\361;\246#9=\016XA=\006v\341<8\335\014=5\3059=}\223!\275\266\205\203\274Z\013\215\274d\377x<4\334O\275\rww=\310\232\\;\313\260\330<\345\310\226\274\2649\024=\227\340#\275\334\341\237\274\370\024\253=\211\202\231<\236\246c\272\264>\346<p\210\036=u\326\222=\351\210\307\274\317\253\023\275\351\205\330\272_D\260=\337\230==\301\366\203\275\027\342\235=\273\030\203\274w&\354\274\365q\320<\324\014U\274{\251e=\2135_\275\330[\360\274\300\370\310\273r\261u\275O\314\037\275$,v\275\316\016i<\034\035\357\274\363r\005\275\302C\263<\026\213\246\274\037\312\350:X\260Q=\t[\n\276\325.\311<\343\347\237;\004,O\275:\356\307<\241\211\031<\223 5=x\254\021\274\007X\357<e\023\271\273X\273\274=\370\257\326\274\017\212 \274`\273Z\275<\335,<\312\251\201\275\276-\035\275>\257\210\275\2728\230\274\253\226\036\274\374\206z\275\177\307\r=\334\366\214\2745; \2757\235E=\037jY=\376\251?\275\250\315\301<\372g\217\275K\2177=\'0\200=s,\210=\270\t1\275\375\r\247=\224\275d==d\220\274\210\356\310\275\212L\223=2Z\'=\000\212\231<\n\272\305<4\221\334\274M\330Q=Q\'\036<\320^\356<\243\025\026\273<0\363<\342\022\000=\272\006S=\231\314b\275\323\345R\2743g\360\274\222\"y\275\020\261\002=\352\374\247\273\327\265:\275\202\'P\274\211\371\261\272^\311\207\275vn\217\2752\210];El\323<\345\371\217\274\200\033P;\333\254\211\275\365\224\356;\271\000\005>D$\341\275\214\003\027\275\201\374\002=g\246B=kf\241=h\347\303\274\243\250b=x/\207\275\370\352\347\273\217\342\207\275\250\021h=\353\374$<\237\276\345\274\030\351\350;,.\314\2741\275i;\nn7=\275\340\362\273\224\312\330\274\374\377a\273/\336\246<W\222r\275\360M\341\274P\365\227=9\033\241<M\261\261\275\326\240\253<Q\204\240\275@\213\234\274\374\206\305=F\223\"<Z`\301<\001\246=\275\\\274\305<%O\231=\374\035\202=B\241\332\274+\207\355\274?!|<\256\315\357<\306B\230<\004\031D\275L\377\300\275\254#:==\216\032\275t\265\003<\274p\257<\014f^\274r\343\244\274\246\244N\275\315\251\306\274_;\362<\027\257\r\275\016\217\247\2749\303\205=\006\022C<2h\222\275\030p\323\272\235G\341<\021\243h=\330^\232\275EQ\300\27332\235\275\362\314V=\274.\264\274TM\003<\034\375\023=\350\227c=\215\336\252\274\304Xm;p6\322<\330o\370\274C\253\177=`\330\227<\031\377{<9i\t=x\262n=\210\343\005\274\242\225\356;}7D=\222\000%<\3474e;\022\356q\2752[\t\275\240\260|\275x!\";!\305==\376\013\214<\345?Y=\351\016\367\273\375\3074\275H\230C\275\361\367(\274\314\305\241\274\371\220\306\274\362\344n\274M\256z=\036\300J=6\362\247<\312\227\221\275\256?\005\275\350\220\271<Te$\275\2263\377\274LN1<\327\004\027=.\220\001\275\303z\362<\223\275\200<6\217\t<B\245\256\274\352\267y\275\370\365\321\271\355`c;\3741<\274\324v2=\242\361\307\273\374\207\275=k$\304\274\272\\\227\2744:H\275\024|!\274iqo\275\351\315\266\274\332\001E\275\316\223#\275\212\305\355\274\344\234\324;\221+\321\274^q4\272$\245\307\274\276\005/=\'Xu=\232\306\253:6\303\002\275\025{\204=^p\342\274\200\\w<\212\216\213\275+\363r<\215\271\224\275#\336#\275\353\"\224=\323\016\t<\252\033\215<+\351\014\274\317f\"=\220|/=\376\333\253<\234$\210=\\\313i=\211\216\307;\231\357\"=\243\216\350\275\344\223\204<!\367\331\274\245\360\274<E+,<\321\274&=WX\316\272\244Mr<\031\366\025\275\350\321\245\274P\305O<\256\204\352\272\354*\244<\034oE\274\303l*\274&\2312\275\230\251\037\275R\311\231=\235\374\317<UD\273=\273\025\353=&\032\304;\016\257.=\273\324\241<\212\300\003\275\326\347H\275\313d\212=w\375\264<\020\0275=A\260\364<\034W\361\274\267(i=R\030\262=\303)\000\275\354eN\274\240\017\316<\351\210\207:*\303\013\275\331\213d<\333\206\206<\017N\334=\257\031!\275\244]\347\274\210\353\315;\213\363\345<w\333\245<\027\355!\274\333\357d\275\013I\241=\204\261S\274\201c\227\275\337*$\275w\021#\275\324p\010=\311z\244\274\311\376K=\3700\247=Zo\n\274)\253T;&\314\304\275:\247\001\275\324\366,=2[\302\274\234\221\031=-\006\002\273\271\241t\274]\013\024\275\005\022\010\275;\246\342\274\rN\312<\326\317\365<\014\273(=\303\214\017\272\360\346=\275M\014@;-\271p=\027\264\231\275\232K\036<j\333R\274\200\n\312\270|~\002<\221!\026=\232].\275I\034Z=\210\231\t=\022\330\241<x\2044=\2743\342:\257\366\004=\017\223D\275(c\265<S\236F;\314\365\260\274\034@\317=f\332\350<\246\222\366\274\302\306\310<\231+f=\262\301>=%4\314\274\235},=\017V\254=]}\311\275i\021]=\200=\013\275\251q$=\026o\223=\327\310\213;\324\324$\2752\344\000<\014\013J\274\006\t6=\305ZK\275\242\234o\274K\245\267\273\204t(=\322\023\254\273\377\372n\274\034\304\324\274h\207\264=\343\034\226\274\2357\215\275\262i\234;\336\034N\273\200i\241\274\022\310\006=\204\030\027\275\306\323\340<)\025\026\275{].=_V\235\273R\221B\272\205\316n\275J\211c<\324\345V=E\227F=\361c\247\273\300\366\204\2733\353\177=\236Ui=}\r|9\242\225\237<\367\366\364\2749=\275=bX\314\274E\033\204\275\265,\262<B\022\001\275\017_\2369\342?6=\322`\245=\360\226!\275\025\200\030=(\014\201=~\337\020\275\2669\316\274<\304T\273#h\213\274A\254|\274\220x\371=\257\250\315=\206\350,\275\251\267!\274\271~\336\273\331F\021=M\003\221<\213\3206=\325(\245;\317\0229\275\324}\262\275\033\342\312\273\230y\363\272\344\202\216\273\333\207\324<\203~V\275\376\300\010\273\252L\305\274\225\270T<\255wP\275&\246&\275J\'\227\273\362\376#<h\335\201\275\235\202\365\274\t\356\272<TD4\275\262/\027=\025\314\275:\217\"]\275\373oh\274\307S\264\273\210\202\266\274\345\367A<:Uo\274\\4j\275\330B\365=\211X\302<\304\214):\302\305\014\275\321\205\301<\370\322\230=\245\354\312=J\217\262\274\222}h\274r\024|\275\277\224\300\273\036D\006=L\344\346\273\217\336.\275\362\335!=\034d(\274\026\344P=A>X\274+N\222\274\265=\020<\207\'^\272\014\262k\275F\356\255;.\310\263\275\224\251\224\273h\t\350\274\376\2707\275s\3103=:\225\t=\236\340?=\236NF<\212\014\275\273\005\3622\272\027\2179=\250]c<\236@=<\023\r4\274\353y\036=\224\346\311<\347h\243<\240^\335\274uK\340<\226\264\331\275\277\006\311\274\262\255\347\272\305\2241\275\223\257#=\364rF=\217\327\373\273\250\306\362\272J\353?=\023\227(\274\340\226\216=n\304W\275`[\346\274\261\254M\275c\262\345\274\332l\354=!\022\263\275E<x=\300v\307\274\243\t\210<\0107\213\2748\321\t\274d\244\212=\013O@=\250r\t\275\035\221c<sC<\275\223,\223<\"0d\275\220\262\377\274\310\211r<\303\216.\275\027\033\206=\310\304\001>l7\320<>o\004\275K\350\216\274(\274\027\2742)S\275\0058\301\275E\032&\275\240G:;S\374\002:\027\320\221\275\370s\203=\303-3=\'\243)\275CY\272\274 H\371=_\203Y=\002A\340<\235\343\316<\267\253\344\273\373d\016\275\240J$;\035`\221<(%\235:\277\311\017>I\3655\275Q\224P=r\247\273;\362\373`\274\371gV=R\217\231=\375\320\203=\202\353\260\274\"\327\\=\332\202o\273\200\324\224\274}\367<=\220$3<\tP0<\321\307\224\274\n\343\025=h\212K;\372\307T\274\333\0375\275F]A\274\246\005\037\275\226\267\027\275\257M\322;\2151\336\274\333V\300<n\305\255\275\016{\266\275\005\017\200=\3056\277=\370\316\227=\200\304E\275W\273\265\275\037ea=,\320\237<\001\322\207=\302\271\031=\t\210\023\275\231\214\203=>\010\241\2729\332\364\273:\345\216=\037\01059\036\244\232\274(\364.\275_\241\253\274\223>R=\242\313r\275x\017\363\274R\000\247\274c\273r<\316\0211<\036\370\273<\340\023\256;\215\210\334<\367\\\234;x\035\347\272\240\314N\275\333:\256\275\274K<<\200\307\266<<\237&\274\255\321]\275\275\247\213\275\026iL=\236\343\275\275S\003\301=G\314\'\275\325\211\226\275Xy7\275\206Yb=7\240\203;_\"\261=3\005\'=p\212\254<\346g\201\273Hp\212\2746\245%\275j>\234\272-\361\225\275\314m\227=\322\305J\274Y\344\n=\243\303\240<\322\252\253<\352B|\275\354x&\274\t\256\276=\247\317\356;\002i\033<\033\363\r\274w\243M\274\375\205\304;\323\206\007<\320\357G\275\234Q\243\273\371\233\343<R\202]\274\016\377\334<\367\364\274<\035\362b\275\004n$\2748\'\267<\254H.=\007\205,=\217<\205\275;\0066=x\364\225=\324\004\300\275\002\177\200\275p\256:\274\277o\332\274:\025s\274\326\310\003<\320_\030\275\367\244\027\275\360\316\010\275\t\212\237<\370\340\306\274\034\243\210\275\031\315\262\275\315\343 \274+\217/\275\222\271\360<\350\367b=\327A\004\275\317\364m=5\373\221\273\2412B\2751z\236<\254\006E\273\207\226a<6.\254;\024\224c=8P\r=\254c\010\275\345$\340\274\242\270\203;h\332\226\274\027P\004</\311\210<\356\227W\275\375d3=:\203c\2758\266@\274\305\r\306=\252!0<\316\026\000;\002\341u=\227=\007\274H\251\210\275Wt\277<\3331\354<\223\177\324;\255d\321<\025\242\215\275MU\207\275\343`\024\274O(\"=\250`0\275{\360\201<b\001\325<b\261^\274\350\027\310=\357\240@=(\202\n=\346\014=\274\202/e<}\016z9s\275\330<av\364\274\037\302\355\274\345\'\342<l\302\336<\304{H\274\027\352n=\323\273&=GK?=\325L\013\275\245\210b=N\240k\274\3240\252=c\221R=\325V\312\274\216c\352<\tlF=4@H\275\372\203d\274Yu\300<?\007\204\275\250\327Y\274 \006\317\274\373\032\215<\255-\014\275@M\337\274\362[\000=\373\364\234<\0057\204\275|\362\365\273\237\007\215\275\217\321\230<r\260\214\275\252\302\303<\261p_=\030s\030\275:\301?\274\261\327&=L\242Y=\374:\203=\013\033#<kI\303<|\032\273\274\277)u\275\'\364U=\250\333?<\034\351E\275\235\236S=&O\034=\270\013\202=\020JQ\274At\007=3GG\275\314L\227\274a=\201=\267\231\223<Ry\177\275\035\022\347<\320\t\326<\251\004\250\274\2419\032=\237%\243\275^Ta\274<>\352=v\236A\275\257Oq=Df\257<\211\261y\274\215)\271=\255c%<\001\021\373<\211B\240\275\013\203\237=\357\266<=\373R\362\274<\376\020\2759P\025=)\313\245\274\017\314p\275\230\347\001=e_\301\274\320\2629<d\233\342<\007\265\346<J\330\343\274v\372\346\274\246hp\275\3010\177\275\202d\224\274@\004;<\026Y\205\274Sw.\275\ni\235\274\000\000i=\027\317\263\274\240\220\270\275\360*\033=\036\263\261<G\2620=\211\021&\275\214n \275<\362}\274\317N\230=\317\016j\274\346\377\247\275i\232R=#\323\305\274(\037\001\275\313\356p\274/\344\201<\242#K=\211$\254\274\220\316D=\311>\027\270+\372\223=u%\027\273\016:\303\273\255\357\034\275\335\361,\275\345\266\003\275H\303$=\007\216\211<\024\373\330\274V\263\314<\214\233\232\273\205%(\274\216U\215=\004\010\311<(\362\212\275^\016K<QT\344=\017o\205\274&\211\004\275\357\221\314\275p$\006\275\374\261y\274\021\"W=\326\213\225\274z\252~9+\177#=\210\313\333<#\002I=w\205V=z\3400;F\320\004\275\253\207\001<\2262\267\2752\256\032\275M_\320\274\357\222\342\274\350a\220<h+\356<\353\316\313<\342\315\204\274\222\326\344\274tU\2279\325\254\003<d\332\301=\307\362\215=\003\375/<\320\374#\275=*\370\274@\343\377<j\245\325;b7\231\274\360\236\341\270\302\374\016\2757\232\237\272_(\343=\243\332U=v\331/\274\230\027\013=\246\260R;\350\',=\202A\303<H1\247\273\343E\024=@\355\370<\226o\372<\231\177S<\213\221e\275\306\364\010\274\327\372-<\265@(=\275Z\326\273V\233\205=IN\242\273\3634\305=\037+\322\274VrA\275\315\177\010\275\005\366\362\272\2615a=\346s\244\275_\250.=Wu\342;\332\352\213\273\017\235\t=<\302i\275\223U\352\274\0230K=`\032\360<X\253#\2755\242\253<\204FD<\334u\235\273\212\363\354\275\014]\n\275\213\004\201</\255}\274\r\366\027\2754\2332\275\217\037\031\273\351\330m<\342MU\275\250*~=\263le<\3546\265\274\027\372\n=\352\215\226<b\334\334=\3723\026\2752\264\212\274\020j\344\273\324\223 <\322\206a\2753?\231\275\233\376\275\274\'\227\r\275\304\035N=\233\325\333<\025#\021>\336\315_=\360\253(;\262\227B\273\031&\342<H1\204<\262\353\"\2753\2530<\371\257{\274\270\224\345\273\306\325y=\202z\276\2748\223\023\275\212.\303=\341\351\271\274\262\230O;\341\n\036==?\317\274\331\036\031\275\310\335\356<\306\306%=\033\350\247\275\301s\260\274$\345\004;\257K!=\327\333\026=\022=\347\275\010#\010\275\222\257\210<\210\375\232\274\327\033\277<\202\320\230<\225\333\315\273O.\337<`r\312\274\356)\255\274\214\016\226<\304\212\007\275\032_\017\274\320\026[<l\244\022\273\355\\Y=\230\217\213\275\211q6\275?\365\304=\010\324L=\300!N<\003\310\241\274\345\023\300=\350m,=K\230>\275F\350\211\271\2508)=\271\341\365\274\023\203\207\275\203\227(\275qc\226\274\215/)\275_b\207\274\020`\323\274\204E\034=\275\333\353\274\300\032\307\274\272\033A;\033\365>\275\025d5;\336Y\263\275{\245\235=\226\373\024=\250\010\357;\245\222\317\275^\207\232<\004\301\313\274X\337(=\350U\207=\376\204$=\360\306~\275\272N\032=\233\362\365\275Np\342<m\235\014\273!\343a\273\317\275q:\246CZ\274\355\2234\275\241\346\311\273iD}=\305M\273\274\221\275\"\274\\\372}\275\346u\234=\227iX\275\351\270\177\274]\303\231\275\256\016\333<\336\177p=\343~\252\275&\366\257<\271\003*\274\270u\256\274\022\215\310\273%\205\227<tZ\261\274\236\n\227\274\373\323\215\274\267\204\202<\2150\275\274u\354\221<S2\227<\375\216\311;\256\202M=\321V\250=\360\351\264\275\344\300.\275{\217L<\024\216\326\272E\341\277=\2245K\275C\207\215=\276\223H\274\177x8\275\303\232\342<cf\350;\262\220\017=3\3756<\263\230;<\271\232q\275\253y\037\275`\t\254=\201Cq\27586\336<\364\255\214\274\355k[\275\013^\201\275rXw=T\327\203=&.\035\274N\326\321<\013\305\001\275;\210\370\275\374R\250\2745\275\356:\371R\223=[\030\001\274\355\323\251\274\220\3526= \275\t=\252\371\312\274\307:\036\275*Vy<\226\313\203\274B\323\350\275\031M<=\274\251\024\275Tp\200=\266\"\272\275dzZ\275A\022\031\274\267\340n\275\027\216\226\275\362 *\275\007\214]=T\212\204\274K\260(:\351\032\006=\254\237\204\274?\205:=I\222\230=.\373\264\274\177\371\320\273\215z<\275Bho\275\220]\374\274`\316\252\274u\\n\275\334\023k<x:\213\274g\210\246<x\215\017\275\321ae\275\204)`=\3637Y;\r2;:\027\266\252<x\223\233<\347\'\340\274\2277m<\215C\003\275\223\372\264=\013~\316\274\260gp=\033\274\266<FF\313\274\360\311\234\275\376\210\214\275\312\263(\275\227\212\264<\214\320\205=\201\360\035=\000Q\361\274\335\377\214\274\1775\000;/e\216\274fmT<\034:\031\274\360\371\250\274O2-\272\270\352\227\274W\265\t<\324\352\336<WC\352<[Qr<3r\035>\307+\320;\303u\3739\343\200\362<\217\345(\275\267S\202=\014y\021\274\034\rR<\217\346\255<\354\204\177\2751\334z;\202\365)<\350\361\274=\354\020L\275\362\314\257= \000J=\001\350\031\271P\374G\275\335\301/=\361\2275=\276H\370\274\216\313\320<\020\352\272<\356\263#<\\\372\316<\342\3110=\271\024\177\275\247\261$\275rG\206\275\213\007\305\273\372~\246\275\314UC\274\244\'\022=\010\320\337<\245\344-\275\327\275A\275\\J+\275\224\226\372<hb{<B\221b= 1\233\275\245\016\240=\022\030\003=P\346)\275\002\243\002\276\231\030\242<f\311\245\275\377\226\275<\355\026\226\272R\311\367\274JN-=\263\363\256\274L\370\373<\227\206\216\274$\371\206<\000\036(=gq;\275q\374\332\275\002a\216\275\364\010\220\275\364\016a\2757Hu<\223V\356<\364\342\001\275\255\017e\273\231|W\275\203\346\370\274\027\261\221\275\024\250\017\275\345\320\207\273U\222\227=\233\352\367\273\263\304\314\275\376\201\274\274\001\244\235\275k\315\230<E+\241\274n8\025\275Q\340\304\275b\361\321\273\323\022\231<}x\025<=\234\014=\r\037\025=\252=\020;\224\350\024=Y:-=\0247(<\201%\222\273\213\330d\275\372\365T=\331\205`\275\211\377\020\275\326\225\226\274\252\325\263\274\3369\243=\227q\210;\242\005\317<Q\327\013=\014\325?\274\327\316\001\275\272\303>=\277\247q<\302I\256<[K-\275}@\201:\033+A\2756\r\374<Zj4<\267\374Y=\312\010(=\247\030\333\274\262^\004\274\325Xh\275e\346\206=5\036\013=;\014\234=S\237\331;\017x\210\274\031\351\230<\'}\345=\347\213j=\344\343/<\302}h=\317=\000\275h_a\273\r\201\266\275\014\330\232;0L\310<UY\036\274\034\027\212\275\3705\355\274\233B\225<\263\342o\273\316\\\016=\000C\202\275O\345\010<GM\207\274g\237\366\274E\277\312<]X\013=i\2373=\335G\375<J!\310\273\007j\332\273Q\345\030\275X\200\256;=4\033=\265y\327\274:\220_=\357vp=\250\247\373<\236\270\321;\344\\\226;$\315-=\312\214\331<\177\315\026\275q\260\261=\004\022\307<\024m\226=/\002\312\275\225\310\221\274\330\"\244\271\220W\202<\365\234W\274vQ\205=\355L\235=ZV\231\275\306\270\231=\024R\013\275l\2433\275\323f5=\230.\030<\003Q\263=\357\262\002\275\362:\331\273s*\364<\004\356\222\2725\205W\275\306\036N\273${\350<x\236\201\274l|\240=\177\307\002\275\3609/=\217\271\227=\340~\210<\250\034\003\275\363\245\001=\331\366\t\275\017\256G\274\233(\020\274%\350\275=\2409\017\2751\347)\272\302\315\227\275=\225!=T\277\207\274>\010(<\023_\232=qo\222\274\'\310\034<\211\213\251\273\337T,\275\001\337`;9X\204\275\201\212F\275u\306\216\275\037\2427\274\236I\032<[\364\336<\354Z\005=5\3538<\263\226\233=\333\2467=/\255V\274\373%\267;\007>\010=\266\370-\275\277\267\211\275\352\322\302\274\316\323$= \367\310\274\217W\302\273\0317\272\273\201b\270\275\274\267u<+Y\343\274Z\3753=\374\034\304\271\262U\220\273~\330\271\274\337\333&;\341\345\207\275\005o\256<R\216\016\274\226\256\016<=*\332=\256\3260\275\212\001j;\205\333\206<\273\031/\275\2223\336\274\201\241\037\274/\316d=\270\325\344=\3443\016\2750<\345\270\343\374\002<\301\370\200=\0237]\275\241\367\271\272\266\332p=\230\362R\275\214+\344<s\035\010=xJJ\275\303\"\324\271\204Y\231=\215E0=\024\225`\274;\200\010=\232\363\213=\245\020\253\273\030\200\227\275Gs\\<k\204m\275\357\272\237\274\315\212\210\274L\rz<?\023\331<t\364\261\274\356S\361;\212\367\367<\034\202\250=q\334\233<\355\301&\274\214\334:\275\000\256}<K\035-=\260>\277<^\000\304<\323\260\3069)O\222\275\354U\220\275\3656\225\274\r\212Z<\313\370\204\275\027s\251\2732\351\223=e.\034\275B\372W\275.\300\271\273826<nV\010=\354\255\270<XG\252=\215\310\007\275xc\351\274o\033j\274\373}%\274\020\024\343;\302\'~<\322x\325\273\253\266k\275\224\t\211\274\003&<=uh0=\372\276\007\275\317Q\354<i\016E=\266\276;=\313\234%\274p\356M\275$`\346<P\321B9k\310\002=}\342\246\274\272Y\245\274;Qf\275Gn\200\273\210\237\007;\246[\342<\231\334E=n\274+<\014\270\263=F\310\274<\354\272\322\273\303\276\243=\014\212\014\275\255}v<PHi=\207`\274=_!\310\274Q\347\016\274\200\317m<\t\333m\274\020\342\276\274}a\360\275b\017\271\273\277s\022\275f\340\272\275P^\254\274^\236;=\372\261\034=M\371\317<\201\357\253=i\001@\274\300\363\240\274\301 \'<\376\215\366\274\240\260\022\275\261\266\363\273wj0=\351F\224=\2451\351<q>M\275\275\325\030\275H\277\214=\037\346\352\275\230p\207=U\322\024=e\244`<\030\'\325\274\204\223\022=\3521f\275\360\274\020\275x\373\253\272\006\025{=\027\234\275=\t!)\275\367\344S\275qv\365\272\007\236\325\271\177\273\001\2758\257Z=\230\360q\272\232zo\275\303{\304\274\314ZL\275Fj\254\270\220\205\037\275\177\330\213\275\272A\336;[YW<i\371#=\316:\003\274\030\271\034\275\350\037\215;\363\211\260<\366{r:\204\337\037\275\225\213==\236E\237\275\3503\310\2742\232\236;\310I\245\272\200\305\t\275\227`i\273\027^1\275?\264d\275=?\366;\036s\222=-\227\234\273\304Y\234=\366F\251<C\363\310;\002Z\027\275\325\345~\275\177\0368=@\303\325\274}\270\037\275\262\321L<\345\335w<\032U@=\376\033\275=\327\363\375\272\373\026,<\233\366\205=r\233\n;B\"\371;\032\026\234=\300\212\021<O\347E=\001\327F<iMY<\002\026y<\356i\214\274\307\303\232\2734\353\322\274,t@<\325&\221\275\376\213\236\275C\277\256\275\307\227]<\345n\204=Y\275\360<\263\301\336<\311V\205<\226?\000\274\2405\233\274\256\204\304\274\340Hq\274H\217\225=\327\033e\275\005\232\272\274\321\232\311<\307`f<\366\023\324\275\020\222r<\221b\016<\2722\235\2757\272o=\271Ws\275&\314\265\272W\347\021;l\200\304=m\267m\274l\035\005;+\326A<\352\333W\274\225.4<\222\264\237\274\246|\263<\251l\200\275|\024\311\274H\214\227; \305r\273\273\271 <\353X\214\274QL\337;\233\217\244\275x\366\016=\317wW\275(\237\037\275\r\345&\275u\237\234=tO\224<\n\211\010=\237\177\341\272\351\341A=\3625o\275h\335\367\273\006\265><\310\217\244\274\207\001\274\275\334\2566<\232\373\221\275\356\337\202\273\034\004\376<\222\326\217=\212\232\327\275\255\311\215=\376\\\234=\221LC=h \212\273\360\251\262<<\330\365<\240\367\r<\361\026*\274\362g\254\274\237\343\242\274\253\316S\274\260\034\377\273\004\254#=\030\373\226\274\022\317,=\303\370\225\275\343\272\365<,\331\266<\000\256n\275\327C\212\275T\020.\275\245\374\210\273\330`}=8\230\030\275S\261\315<a\267T=\025\226N\275v\031\020=\300\363\010\275?\277\274<\310@\325<\317\350\215=\332\005h;T>\350<\036\022\326=\367\225a=\263\314\033<\325\352\020<\230c6=\274\260k<\250\336\217\274\315\033T=\'\n\362<\315\020\357<.J\330;Gg\003\275\340\017T\275`J7:=\373\245\275\030z\307\274\373,\302<2\235\302<Y[\246\273\276\266\350<\301\376\362:F\272\227<\017M\235\274\217\317\350;H\261>\274\n\223\333\274?.\200=\321r\323\274\227d{=\371\315\005=\217M\264=I\241~<\247\224@\272L\303`=.\366\r<E\013\221<\350Y\226\274\342\322Z\274ZS\010<\272S\235\275>\225,\273\320\266\204\275_\354\211\275\3673\317\273\n\201\252\274d,k;e\207#<\214\014\205;\373?W=a\213\271<\2418#\274%\346\r\275^\370\223=\370\233i\274\345\350n\275A\357\201=\233d\371<\346\026\327\274\370\232O<\324\200C<\035\335\010=\362\337\223<A\325\017<\217\\7<\334id<\222w\202\274\322`6\275kP\232\275\320\0268\275\322\300 \273\027[s=C\312\035=x>\n=l\321B\274\205Q\315\274b\307\224<\222\233\311\2744\260\003\275\016\345\244\273\000\322\004=>`\201\274\202\250\344\275\276-\211;\205\3002\275-G\370\274\231>Z\274\016\014\344\274\265h\213;\212\374\372<\034[\234<d\225\'=\010\016\022\275\232d\200\272\026\247\026\274\250\t\362<!\345\264=\005\277\\\275+\034\245<X\241)9\253\375\333\274\267\227\270;5\376\202<\003\227T;\340z\363<\001\234I\275\3019\344;jP\324\274\223\220\006\274\262\325\234\275\361T\254<\236\224+\2757\332p\274\2766\360\275\344\027-\275\367\007\347<w\243I=N\376\247\274\344\265\355<B\007\331<\215\346\210\275}\375\316=\335\350\231=N\367T\275;?&\275\353\004\022=\274r\264\274\323\236\202\275\320I\221;\255\022g\274\355\315Q<\204\035\324\275A\017\322<\0357F=\001\215\313;\221\"g<\266\304\244\274t{\323<.s\202\275wL\224\275V#\203=C\r\236<\025o\036=5&\303\275\022O\347;\346\003\260=\036a\177\275\233 \312\274\254+\373\274\272\235\232<\252c\223\274b8-\275hg3=h\225\217\273\371(P<\352_\333=\364\346\330\273\241\"\324\274\206k\206;W\254q\2756\356{=\032@\353<\245\203\230<f0H\275_3\032>#\025\013=M\234m<\034^\325\273\262\032A\271\337\253\021=\341\356\254;\014\202\250=a\205\201<A\213\034\275*\037\366\273\230\006\350<\205\256\277<\300\202@\274Avs\274\016\020n\275\215\303g\275\222\035\224=\256\023[=N\320\026\274{A\014=\340D\n\275\213x?=\202\351\344<\2502\363\274F\017\024<\027nJ=\023(\313<6F\366<\357~\205\273\010\035\003\274\315g\200<\254\211\t\275\314\207\r:\354>\230=O\351\032=\304%\356\274\315\214\r\275\321\336<=J\330O<\024\211\375<~\000$\275\225\025\355\274G!\365<\366\265\205\274\377\204O;\010\215\265<\226)_<\201\'\250\275\035Z\330\273\362q\t=\353jl\275\232\244H<6\014U\274\275\270\003\275/?\232\274E\345\210=\370\244\\\275\037\002>\2758\225\222<\340N\201\275^d\001\27587\252<a\362\226\274\267\245\221\275\032I\000\275#\246c=mO3\275%\365\234\274\374\222c\274\374\331\364\273\310M;\2756\001K\2752\256\206\275\225\373\227\275\336\253J=\313D\007=\327,&=\016L\206\274\265\273Y\275\031\031~;\303A\241; \375\025=C(i\273\n]\313\274W\001\200=\332\254\361\274K\364\237=^\312\007=\250\207O\273\367\027\330;\023\256?\275\274\\\360<2w9=r\343\260<\035|I\275!\300v<o\217\213\273\344g\315\274|\037\216=\313<\243=\310])=\344=\361\274]n\213;(z\300\275Jf\214=\302\3512<\361o1=\214\020\267\275\021\324.\275\000\177V\275\020\232\013\275\217\t\022\275\003I\034\275\307[<=2\017==\3519\203\275\363j\263\273\253\215\232\2742Il\275u\353\257=\002\277)<5\2375<\025\026T\274\315p\";\261r\234=\032\033\251\273\035\215\203\274kd\272;\332#\241<>o\232<T\204\357<f\266\260\2746\311f\275\302\332+<\335\016\303<\014\0176\274\366\370.\275\273\330\242\274\341\250K=8\230\246=\3317p\274\014\204<\274\216;\264<\222)c;\260\210\345=\nt\260\27527\017\275i\241$<o1w\274;\311+\275W\327\266<\0077\222:8\337q=\346\016W<\333\203.9\376\203\325<\256\301\013=\242\224\333\274\220c\306=\006\316X\275#H\006>=\275\320\272w\272\271\275\360\322\371\274\372g\256<>\261O\275\243&M=mj5\274\331\326g=\301\353\321<\227H\222<zf\314=e\3451<\212\356\373<\244\030\365\274\374\373?\275#7%=\256\200\277\273Xo\251=\277[\026=\000\034/\275\036\006\006\274\362\034\376\274\007\247\035=\271\005_<(\227\026<`\276\330<\217\335\002=Q\254\026\275\357\211l\2737\335\242\275s?\324;\225S\356<\027\245\353<\316\267\r\275\025\300\232\275J\371\034=Pv\254\275r\217\233\275\345\373{\274\220\276\317\274\035\227\214<\337\222\000=\317\271\260<\271\364\013=m\221\371=}\351C;\323\357.=\177\271D\275\215v\230\274\2134\352\274\006(x<8\347\257\274(:;=\202\004\r\275\352\274\036\274C|\261=\215\217\211\274\010\211\323<\377\242\005\276\252\321\252=\223`\377\273r\200\270=\020\334!\2752&\321<\312m\302==\201\214\274\023\263?=y;\021\274dE\n\275\363\037&\274\032h\243;\275\302\316\274\317`\035\275\264g\027\275\201\267!\275\017\214\235\274:\010<=\023\002\213=Dg\017\275\000O\275\275\035\275\023\274\346\252\036\275\\]\024\275[\250\345\274\361\267\263<\243\221\241\273/\010\276\274!\374\201=\273n\323\275R\200\331<hG\263=H=\253<\327\371n:\035\275\376\274\340\371\370\272\331N\243<7*\204=\357\206a;\226\371\207\275`\250\311\274\023\322\305\274:.\353\273\215\010z=\210\031A<\rl\033<n\271\256;\213\317!=8\356L\275,]\265;F\250\334\274\342\241\373;\266D\201=\247s\200\275A\"\267=\201\303\344\272\212\325\023\275\025\224w<\255,\260<\2244\255\273\253\367\030\273\357%S=\345L\325\274f\213\032\275\277\016\375\274w\231\225=?\tx=\311\315h=Z\206A\274L\377#=g\177O=\216\262\034\275\204\371\206\275\014\224#\275QP\254\274\025\272\237;:\261}\2752I}=\264s\330\275\223\016\177=<\217\031\275\307\2526\275\312D\325<\256\361M\275\351B\023=\371\014\\\273\314\244\251\275Z\306o\275\027\321j\275\303\374\251\275\266\3659\275<v)=\307}\244\274\350o\007<J\034\310=%\245D\274\035-\234;\311\213\330\275\233#\263\274\251\241v=\224\225\324\273\003-[<g \256\274\214\256\241<\366\016F\274\332\013\330:\363\257\024\275\262\235\346\274\236o\321<\036%\301\274h\345*=\317E\037=&U1=U\340\222;\022\"e\275\321l\033\2757_\3109\303\354\021\275Z\353\002\275\261@\300=\370\352\'<\235\337&\275\234UL\275\035\337\017\275M\246Z\274\350@c\275[:\030<\203\262H\275\233\365\027\275N\361\273\275\312na=\370+H\274\330B\035\275\\\343\223=sY\270\273m#\352<\002\345\204;\327\235`\275\231\211R=\311\272\317=\205k\010=\376\371\251=y\370\303<\272=D\275\254\351\213=\'\361R\274\213\357\272<\224D\322<\266\243O\273\262\323\300:I@\302\275\3168\325\272Brl\275|\003\033=\343\265:=\r\336\243\275yi\206=\307\000c;\277\206\302\274\347\334\202<A\301q\273\274\235\207;V\017\255\272;\274\227<\222}c=\317\263\224=b\310\242\275\001\261\226=0\355\343=v\307\t=\331\261\010\2758%(=\026z4\275\327\2349=p\245\024\275\222}\333<\336\207D=\343R\375<XV\243=\2374\235=\010\352\363\274\035\033\032\275\372{\312\273ig\035\274W\277(\275\020zm\275\302 \360=\245a%\273\321\271\201=\336\013a=3\246\240\275\236\336g\274\235_F\2757d\365\274`\367!\274-\217\217=\352\350\016=\237\333\026\275\036\333><\305\323\234\275\214]\002\275SJ\271:\236\037\035=EjH\275\'\363\253<2\214\304<\326O\201\275\237*\235<\276\324\242=\223\"\217\275MaE=\213f\221\275m\206\227\273\203\264.\275]\220\247\2748\260>\275\213\336\226;\351\023\365<\304=U\274\255\031-\275\247u\212<>;\212<\306A\203\275l\024w<5\016\300\275HE\345<\017\364\235\275v\333\214<\364\033\000<\375\250@=\337\2130\275D\200\371\273q\277\301<(L_=\027\027\t\275F\345\211\274\233I\\<\305\217o\274\014\241Y\275\371\310o\275\026\225_=\336\020f=\004\"1\275&E\311;\307\232\240<Q7\n<v\022\031<\345\246\341\273\276\002\233=~\216\267\274\244\252\033\275\357\346\364\274\016\n\177=\364\2203=9\353\n=\233\226)=\025P&\274\032\346\343\274\244\346\224\274\026\021\032\271\355\347\344\273\314Q/=\n|\365;\265\025p<7#\256=\205\365\217<79\227\275|\3609\275\351\314\024=(\206\241\274\273\237\267\274\374&\304;\276\326[\275E;\370<d\317\361<t\035\240<\272o)\275\344\267;\274:\311\220\274\271\343V;DY\276\274A\272c\274\210)\017<\221\261]<\362\361\201\274\257\343g=\033\307-=\374r\253=\271,a\275\0171\017\275Y\023\001<1\r\351\275\305V\307\273\2431\246=\310\204\335;\2152\265<\\\252\027\275J\316T<s\347(\275\377~0\275P+,<W\356\256\274\267\255\002=N\'\031=\251F\207\273\265\266\261\275\275\223\315\2740\341G<a\027\204\275\313\350C=\235w\315=#\303|\274\360\350B\274\353\272,\272*\2652<\237\r\320\274\037bJ\272I\266\265\274\334\021\355<uQC\274\227\276\247\274K\212\341<\347\333\373\2746\350\344\274\355-\361\274\036\004\233;mJi\275\377l\267\275\356YQ;6\376\256\2749\236\234<\034\000\233=\206\ry\275\215\266\224\275\034\276\t<\203\261[\275\206\361\023\274e\340\364\273\t\341\217;\000B\217=e\252\027\275\343\336\206\274\231\357;\275)\274X=\203 0=\262\3703\275A\213L=m\371~<\304V\342<\206s8<\361\nR\274\316oM=\205]\254:~\021\374=z\025\003=\035\335?=Y\0107\274\341\237$=\332\233v=\0000\335\274\227\316\006<\253\003\223=\327;\372<j\213\334;zT\025=;\214\002<\212\360\307\274\364\2007\275N\022[\275\207Z\207=\017\325*\275\027\217\231=\242\200\002=p\317D=^&\n=\\;X\273G\320\260\274n\002\236\274\360(\204\275#\305\222=\036\t\354\274\202\304T=\303\327\255;\215\324\010<\023\367\306:%\355\227\275x\240|\2750\341A=3\\\271\275QdN<u\214\364<\370\006\275\275\3332\351<]\373\320<R\010<<;\332\026>*\216.;Y\014j;uW\203\274\013\255M=N:\252\275/\022N\274\373\363\311<.\272f=\300\377\261=\022^\003<4\263\022<\235@\006\275LsO\274\330p\274\274j\013\221\275\2536\263\275\352\217\n\275\007qD\275.\363l;\356/\246\275\340\314\332\274\326\375\200<\317g?\274B\217\\\274@\205\364\273\242\237\002\272\230\210\214\273\030\367\261\275\200e0\273Y`\254\274;\230#=\242\271p\274\341i\232\274DL\262\274I%L\275\377\237\221\275L8.=\214\200\247<[|\306\274\253)c=\364n\036\275\003\201,;\003\361~\275\334T?\275\357\013\r<&\340\277\274\010\200\216<Z\223\036\275\363\003\303=\263\211\205;\177\360!\275X\000\r\275\315M\225<3\306?\275c\242\177<\316\032\003\274\327!\264=\336\253\200<7\014\347\274E\254U\274\025\340\036\274e=\263;I\372j=\253\233\366\274V\234~\275P\214\n=\355\262\014\273=h:;\344\370\247\275\207\203u\275H\244\203\274\232\352\272\274\317\010\330<\235\315/\275eR\222\275\204\353\027<\004/I\274\270\032A\275h\256t=z\340\253<\0267\225\2759\341\202\275\216\rn\274\r\270f\275V\034\021\275.\307\025=\321\302\337<\226j\033\275\3534w=\251\031\277\274\360\335h\275\372m?=\246\247@\274;+\313\274\000\251X<\322\222\233\274\302\255g;\3749;;!\371\345;\211\262\311\274\207\217\233<y\031\217<\r%c=\305TF\275\347eb\274\270?\202\275\032\016+\275\3761\002\274v\242\206<\242\013.<[&\363\2744\325+=1\275\373\274\026\266\256\274/\034\245;b\252\301\274\342\347\261:X\325C\275-\"\000=\323\272:\273\311D\334\274\332\201\213=\3723\020=\375\363\247<\342\3666=\263\252\262\273Z\022\273=\214\214\256:Z\207\026\275\020h\316\273\353\234\315<\377\013\235=\353V/\274MU\207\274\'\240\2469\014zC=Gd\245\275\365\271\257\275i\355\035=59\362\274\203\231x\274\302\014K\273\360\372\230<\"B\367\274lx\240=<U\277<\332\036Z\274\002+Q;\250(\204=\006\017\217\274}\261\220\275$$\270<[\002*\275\323\201\032\275\331\342U\275\014\273j\2747n\222=\000\013\014\274nR\226\273\000\t\257\275g\310;=&\343\024\275\237a\245\275\313\346w=\271\323\372\274n\247P;\227\322\231=\373\360&<\304\033\234=<@\362<\220\352\221\275\235\035E\275N\264\207=\017Y\022\275\324\023\227\274\232F\331<\215\337\324\274d\3573=\212|\033=\036\2354\275\027\266H\274\350P\366\273i\221\252\275\222\225J=\307\005\343=\257\271\335\274n\307:\274\224\354\235\275\217\205\354\274\371\202\250:\264g\202\274=Xv\275\232\306\265\274]H+\275*<\236\274\346\372\225\275\024\343\233=\221\177\267\273\354\\Q=V\031\320\275\363h\313<?\227\270\274\267\361+\275\305=\222=\311\256{\274\316+\207\275\202\320\231<~9\260\273\361\035\270\275E\330K\274\022\022\036<\253\371\234;\022\335\003=\227\221B=\211wt\274[H\342;n\373F\274T\261\325\274h\035\301=g\374 <\357\327\025\2746Z\002\275\321\246\356;\365\222\217\274\343\204\255\275v)u\274\205R\227\275$\225\000<\032\022\216\2753\205\'\275\373\233l\2745^e\274\327VV<;\372\r\2759{\202\274D\367>\275m\255u\275\325\3772\2746,\372\274\177\214b=x\305\035=U\306\216\274\236\1777>\374\004L\274\266#\225\274i\340\241;\013`F<\222\326H=\205\016\341<3r\345\274\362\266\224\274\303G+\275\246\310\347\274\337k\270\274\216\035\177\275\311\235\203=]9\002=\031\332Z\274\304\234\275<\301Y\017=\374:\"\274\264\246O\275\250\316-;\213\355\265\274\2438J<\344\006\220\274\326\312\n=\034\213\256\274\002\270\240\275J\372t=];\260\273\254.\337<\364\371\252\273\344<\201\274+\353\210=\216==\275%Yk\274\333v\222=\334\007\306\275\201\335\355<\237f\034=oM\260=e4\207=K\241\340:\\\251\224=\333\264M<d6E\274ziq=\312\177\021<.5\231=\341mZ\274\3027\235<i\022~=\033\024\204;_[\356\272Q\311N=H<\202\275*QD\275\276\217\224=%\017\034=\010`7<^y\353\273\036\202\007=\256\237\325<\305\266\016\275\373~\321<\343\270\221\274a\337[<\020\320\221=J\212\302<3\212a\275\202\2069=\275\357<\274\370>\006=\322\370\031=\nV\220\275\014\216\r\273:c\005=\211\254\274\273\2621\237<Sb\001=3\030f\275\\\025^\275\301\257\375\274\370\324\254\275\206R?\275\026\2239\275/\264\020\275\027H\326<\213ge<K\223\223\275\037\321\340<\326N\'=\207*_\275\267\023\256\273\360h\031\274)\037\256\274\230\330\355\272X\252\013=a\366\003\275w\277\264=\317\'u=Z\014\014\275\201\002\330<i\244\014\274\260\305+=6\014\017>-\205\363\274\374.\263\274\214,1\275\002;\234\270\224i\325\274\334~\202\274\005\000:\274\0204\035<\027\033q=\200\326\177=\020\316\311;_\037\031<\301\010\330<\211\304\351\270\307\300\233<\'l/\275\036\035{\274\351l\305\274\rX5=4X\321;\264Z[=(\375\\\274\225^\002\275\005n\320<\252o\227=\206:\275<\002\234\253\275\236\271w=\007\014\216<C J\274\222\375\237<\205\315\263:y\005q=\010$\341<\323\255\202<\365%N\275\353\311\207<i\326*\275\366a\021\275Y\025\364\274\247\3712\274\222C\005<\370I\251;\277-\334\275^i\362\274\321\215U\274%lH<\016\024F<\327TV\275\331\254L\275Y\241\224\275\243\212`\275\202\264\244\275\356\372H\272\323p\341\274\267)?=\366\357\'\275\032\356\027<\225\\b\275\r\302\372\274\314\251O=\272U\302\275 \214t=\352\324\017\275\201cg=[a\010\275\370#\014<\301C\032=\315l\202<\367f\352\273\"}\231<Z\301\246=\027\366\326\275\226\375\354<\010\024\311<\205\340w\275\031=!\274\226\212>\2735\370$:\241\207\022<\036\345\000;|q\217<\315\022\254=\200\340\251\274\360\264H<\362\327\265<\235Y\235\274\034\013\006\274\022\030}<\262%\205\274d\221\202\274\307\263|=\234\020+\274\353\212@=\014$\371\274p\310O=\254\321\213\275\024x\365\274\222-\203=\211F\231<\374\203\000\274u\377~\275\272\363I=\363*\013<\037\004\222\274\032$\003:p\016\253=\305W\034=\020\001/=m\303\371;\256\245K\274\354\271\216\2754\025\256\274]\277\244<\227\201?=\253\332\333\273\2230\014=oth\275\262\201L=\003\200z\275}\333%\274\270V\204=\355j\352<\235E\357<\240\217\003=\207\305\207\275s?\206\275\3677\t<_2d=\202\006\325;\365\362\206\273\313\020\203<\026\000\377\274\200\203)\274F\214#\275C\376\363<WJ\201=\024\323)\274\267\037\362:nf\3359]\246\016\275U\177\264=\255\013O\275\246\377\265=\002\010\217<A\324\'\275\000\311M<\257\307f<\206\'\326:\270\265P=|\004e=\220\326\371\274i\216\022\275\003\323i\275\023\356\n=B8\352<e\022\001=q\243#;\226G\030<\225?\333;&\375\207=_\021]\275]`I\275\357\030\274<KV\262<F\360)=\357\004Z\273\207\243c<\267\'=\273r\234\302<.\303\217\274ec\365<\022\\6\275\250\267U=\333\210\211\275\316\252,\2744&\307\274!\024j=C\016\255;\223\0131=p\371\231\274R\342\310\274qx\026\275Y\232G\275_\221\205\275\356{\006<\267\007\274\273\\xg<\020\273%=\373\240\261<\275n\004:\374\237?\274\373\370\325<\343\222\302\2739\024\370<\211}\206\275\026\031)\274\207z\224<XV\031\275\336\350\227=(+e9\010\243\214<\267CE=\312\t\035=\216\247\207<\365 \217\275f,x\274T\255\336<\r\222\244=\316F\223=/\326\352\274_\357S<\370{\000\275\027\031\202\274q\235g=\3377J=\267\337\004\274\'\331[\274\005\264a<\225,\023=,\022a<\313>\237\275\220\374\200=\255\217\304=vM\231<#\036\245\2742D\353:\210\251\004=+&\211\274\344\256\262:?\366\221\274\020=\230\275*R\333<\264\030\312\274~E~\27502\222<\277\3240\275\010\2501\275\324UU=\376\255\354\2749\017\343\275\016k\316;\316\2221\275:\234\321\275\375\305\204\275\272L\237\274\252`\337;=m==\221d\026=B\317\207=\201\355\033=\236\215^\275U\306e=\273\227g=v!\240;\233>z=z\366_\274\264\026\211\275\341\203\251<\334_5;\300$\234\273d\022\023=75\300\274\036W\271\274\347\201$\274\013\304B\2717\022K=\221t\307;!\262c=SZG\275\253\300\204\275\237\300\003=\201\361:\275\211\253\363<\324[?=\025\r\234=\032I\276\273\020\343@\275 $8\274\304\337\021\275\272\274\216\274\350>\252=\375{\370<g\016\r=\177\262\r\275\244\222\004=-\213\226<\344e\375<\214\003\242\273\323\010\305\273\301\r\213=R\3146\275-\021l\273\366@\035<\251\240\213\274\253J\210=\033\007U\272\343\375b<\201\rw\275\371\031\256=:9\250\273\355h\234\275\032?\245\275\347Jn=\243H\220\275\n\213S\274<ml=\240F\357\274\235~\332=4\241\321=R\005\013<\353\372J=k\025b\275\220\001\026\275 \3112=(\t\010\275\211#\242\274\335\261\261\274\0055v\275\312:\r\275\351\321,\274\342`h\275V`l\274i\276N\274\237\320\207=R\016\211\274rk\370\274\241K\205<Y\007-=\033c\252=\255A\353\273\274l\260=Zn\007=\242\001\243=L\262J\274\313\310\\\275z\275\332<\214\354\262\275\r\022\377\274\002\021\236=\250#(\275\252o\366:>\262\222<P\314\300<{\r\251=\013\022V\275\371\310\263<c\343\214=\r\277\264;\031\274;=^\275\226\275\325\253\374\274\265\314\354\274[\361\241=\360Z\254=\363\tm=m\202)<\232\345#\275~\374\000\275\275\332\200;\010M\304<\315P\363;T\266M\272\361\210T;~\346\241<A\331\225<\232\231\304<:l\307<[\035\336<8\n\031=4%\031=e\231\243<\363\276\310\274\3408;\275!V\264\274\"\013\342\274\377$\377<\032\247\036\275\362\265\341;ak\335\274\004\333\243<&\215\202\273\301\243\254:\371p~\274\313\273\220\275\222u3<\221\337B\274.\363\354;\'\016\037\274\370\243\366;\371e-<\327\230\204\274\346G_=\246\344.\273\212\031A\275\2166\207\275Z\274@\275f\321\245<D\241n<\371\014T=\2073\246\275o\022\272=$6\313<\261*\243<\216\324\\\274/\232\226\274x\201\255\274\364!\200=\027,Q\272E\332\265=\214\013\374\274\270\007\207;\0074\253\274<\255\254<\264R\240<\355\220\345;}\271\272;\205\357\312\272b\n\006< 2w=\334\202J<q\tB\275\275\260F\272\300\373E<u\361\260\274\210g\320\275\336\320\311\275\354B\333\274\003\001\203<\362\301\201=\252\321\320\274W\026j\275\016-\224<\034\276\245\273\221\033S<aiO\275\014\031\232;\336\340\350<V\254\203=\307\321\013=HP\033\274\354U\227<(\310\252\274\224\326\244<\240\0265\274\342\r\214\274H\362\204<\204\2434\275\323\204Y=\016.V\274\325\332\026\275\241?\370<\2612\272\275L\230\254\275\246\216?\273\347Xt=/\257z\274\363\010\376;\326\372E<\346\024\374<\031d\037\275\\3\376\273\233Dp=\004FJ=\037\200\034=\330\274\201\275K&\"<\007\2209=[\367\332<P\326\254<\316\335\367\273>\311F\275SZ~<-\341\n\275\n>\254\275\244x\234<\177\261\333<&^\215=\356cA:Z\243\245<\341qa\273\347\236\316\273\212&W<\331\022p<L\023\235=\246\226B\275\253\212\035\275\231\212\023\273L\222\016<nV\357\274\r\264\240=\246R|<<\333\246\272}x\020=|\373\230<\264\3041<\254L\001\275Dc\306=hK\014=<v\330<y\203\022>\2110\253<\375#I\274\2145/\274\222=\222\274\020\2712\275\020k\373:\024L\247\272\026\262\276<\021\330\320\273\344\350t=\244!|\275\375I=\275&\254\037<\013\"\225\275\376\006\227\272N\271\035\274\251\264\214\275\030\2668\274\221\254\t\275$f\204=\235\376\240\274\324{)\273\215\314\013\270\344b\360\274\315\2444=T\377\230=\323\ry\274\363g1<4\331\367<6\321\275=-|C\275\327\n\246:h\244\230=\214#\231\275\341\017i=\227\314\343=%Z\210\274\023\216\271=!Z\267\275\032o+\2758\225\226<\222%E<\2502\236\274\357\351q<?\332\207<\257p\244=n\207:\275JOK=\0042\"\275\253\253\204=\014\275\337<\214\206\n=j\r\031=)\350\223<\223\303j\274\330\210\026>\254f\014\272(\037\013<\340\300\020=[\273n<\226\2174=\247Jy\275\324GZ\275\020\\\237<\323tD=G?n<\271\240\3009\001\217\225=kb\356\274\331@\216\274\211\377\231\274w\257X\275D\367\323<\356`\333\273\002P3\275W\374M<y\2122\275\374|\302;4\005\n\274X\310\276=\341\301\207<Ao\327<Z\\\344\274\364\331 \275\217X\213<O@\236\274\272\376\223<\351\000\337<>\205\241<\262u\202=\311t{=\313C\225\274b|6\2745v\322:\"\322\332\274\275]\277:\036{!=`\312\020>\333\005\241\275\227n\227<i\025\220\271xN:\274\310\334\006=Bhz\275F\334\223\275.\355^\274\307\356P\274\224\311\300<\213l\212\273g%0;\312:\241=\255\250=\275\252\255\215\274)\260\335\273\'\004R<\016{$=\232\2257\273uS==\310\220\254<\377p\036\274s5\021\276`\324?\275\036=\214;Q\206\010;\217\372\272\275\313+\266\274\214\273^=\001Q\017<\212]\253=ru\366;\312\265\021\275l\327\272\275\234\006E\275({Q<\364\200\202=\327\330\366<\312W\210=rb\222=\n\327\202;\362{V=\2657X\275s\035\333\274\337 \250=D\350\352=xZ\375\273\032_q\274\226n\033\275\374&*\275\247PX<\210\036\263\273\014\177\n\275\264z\215\274\025\263\336<\374\220\375\275l]q=c\273\216\274F\241,=x\226r\273\315\005\271=@\323\276\274\273\016\311<\243\351\356;\034^v=\037j\327\272\013\025,\274C\243^\275\3253\255<\343m\225=x\310\'\275\367<\'=b\307\t\275\030\2137=\026\372p<3\t;\275\307\261\001\275K\376\016<{W~\275T\207\022;o\264H\275\320)J=\335,\000\276\237~\001=\313`\274<:Z\322=\220Bn<V\345\200=\332-1=\335\366\323<{\207\266<\345\245{=K\250\306\274\330s\002:x<e\275\025\347\010=j?\014\275\341\250;=\001\025\021=\304\326\254\274;\005G\275\254\335\272<\322\254\204\275\211\210\005\275\367\362x<\300\332&\274\242u\3549K\2035\275\340b\177\274:\337\257\275\310<\336<8\352D=\260\233\201<s\303\235\2747\211?<\000\030P\273\335q\256:_\277\347\273l\206\223=\230\374\021=\333.\237\274\273\265&=Y\032I<\335\'\352\274\375\342\001<[j\257<\347\373u\274\301Tj=\276\307g<P\205\246\274\252\322\236=\346\t,< >\304\273\301\316\210<Y\231\215<dX\310=o]\377\273F,i\274\263\003\342;\200T\204\274m\317\034\273\265\240d=@\245\226<\352\007\210\274\005v&\275y\310Z\275x\r\277\274\217B\207=J\306\267=\027\n\321\274\006(!\275\2610\237:\204QV\275/8\373\274\320hs=Hn\326\274\324\377A\275\230\240\335<\301\355\340;&-\013\275\342\221\267\274\316\267\240\274/\014I=\024\356\231:\242|\277\275`\034f<*\253X\2759\rb\273R\352\276<@\351\033=9W\035=<\241\020<%\350,=<\024\246=\2653\367<\321\3640\275\257\256\206=\305\315\362<0L\"=u\021\265;\333;\256\274\311yD\274\2631\204=\366u\013\275J\013\351<\235\232\035<\242\273>=!!\314\274\007\354\r=\026\312\031=\365\240q=-\006S\275q\220\235\275\035+D\275\333\365\204;>\215\207=\315\367\027=\002\021\r<Z\203\004<\372`\307\274\221\277)\274usI=\024\260e\274\227\377\030<\264\225\024<\330\305K\275F\031\232<\356\217\030\275I\023<\275\004:\265<Aj\306=\332G%<,\177\232=\001\310\226\275Z\371!<\372\232\316=\305\217Y\275ik\024=\004\031Z\274Wi\245<\306b\212=\224\003\020\275\265\216\201;\246Si\275Z1\362<;\364\004\274k\241\233\275\272I \273\345\375s<\016\216\260=\247\217;\275\240&\241\275\003\321\322\273\364\031T\274\241\372\354\274\312}\361<\363\277\265<\020\263\030\275\202\274\327<\247\377\367\274a\226\244<\036\261\276<\364\032)=,\007\336\2746\244\300<z\\\233;\345r5\275\037\031\n<\373U\003\275\211\017\265\274\201\013\335\274\267!\022\274\253c\'=\221\362\013\275\\|\353\274\277\032\206<h\235\266<\307\231|\274\017F\034\272\360:\360\274\317\376+=\207\323:\275\027\337\000=\264\232\177\274\263v\204\275\212\3479=k\212\222<\263\365\017=A\225\026\274\r\035\004<ul}=LE(\275\371\177F\275\235\030\021=w*\334=L\232\365\273;\027}\275\314\302\313;I9\240:\277gF=r\rH\275\220\346[\275\205Y\205=G\322\207\2740T==\357\202\342\274\364\245\207<D\347\345\274U\2543=)\005\001<\325\337F\275\326\310\371\274\221\306\261\274.GR=\3372\276\275\036:\274=`\tz\274\245\000\336<\224\027\247<d\007\322<9\344\033=\265\034\204;&)c\275\201\2516\275\377\177m\273\230\3227\275j\322o\275\003,\243\274\307\357\226\274\245\337X\274\31088\275me\230<JVk\273\331S\336\27428\202<\216;\231;\257 v\275a\270X\2758\300l\275a\243>\274\274\201\345;\301Y\315\274\005\035\337<\263Wd\275i\230V\275\316\342o\273\331 K\275e,\034=o\217]\275\233\227\203=\t\356\374;\214\214\244\275\203\324\276;\233Ro;;\320\226=\376\233\016\274\303tD<8\247#=\240\234\004\275~\034\260={\247\026\274\231\001N\273b\211w<\235\2551;\023}\017=/G*;H\225\301\274\235\246g\275\266C\003\275\016\274\020\275\235_\202\275\235;\\<`\303\035\274\277XU\275\321\313y\275\336Jl\275\215\033\343<\326\342\010\275\323\277\326<m\257\021<\203\367\221\274\t\376x\275%\260\242<\300)\363:]\327+\275\300\357\216=\035\022\221\275|\3509<\327O\036\275i\301z\2754\353J\275\363;\036=\215O\236\274\255\225\323\274\350\377p=\037\212\010<G\002}<\007\320\245=N\rQ\273\007\225r\273\266\360\004=p\215.\272\301\320\001\275\301E\353\274\035\036F\275\2323%=\371*\255\273\360\355b\275\240n\002=E\353\354\275h\177\217\275\363\024\265\273\337\375r:_K\003=k;\013=\313\2715=\213\241\216\275o\0355\275\3572&=\341\373F=\010b\024<M<\264=\221\177J\275\234p\177<O\271\024=\312\361\252\275(@O\275Ad\241<\273e\t\275\004\235\376\275h\226\243<\206\257S\274^\324\325\274\374\343\304<\221\260R\274r\337\005=\007\"\211\275\013;2\275T%W=1V1=\233)H=\333\341d\274r\267\204<\251Qt=\014\360K<\360L\251=\357\365:\274 -\r\275\210o5\275\276W\033\275\357\216\313=\024\343\013\275\357c\377\274?\037N=wQ\242\275\345S\333=\005\026\037\274o\327\226\275\200\374i\275\245\022\037\274h\363\271;\354\023\016=4\217!\275\351J\025\275%{?=\331\211\347\274\304@\333</\220\225\272>\177\251=3\034\344\275\351\005\316<\213W\364\274}\360\344<O\325p;\034\020S=\355\2037\273\332\020\366<\277<\271<i~\200\275_\007\023\274*\027D=1qE\275\325\347I\275kS\256\274\325)\016=!\020\202=X\347\275=\345\"&\275^\256\243\274\244\214\310\271\004\264\224=\3658\036=\376H\365\274\333\367\021\275\372Lk=\371\373\333=\010i\205\274\376\273\303\274Z\336\205<\330\246m\273\362W9\275\033O\017\274\002_\037=\330.*<\246\232e=\202w\330<\214\333\362;c\343M=\227?\345;\257\\j=\343\025o<\033\310\025=\205\310\255\274\365M@\272s\270U\272\270\226\270\275\036\200\254\275.\351\213\274u\001\357\2746{^<\234\201\204\275@\t&\273\342\241\005\275Z\333x\275D@7<\223_I\275W\322;:\206z\031=MG\310\272\\\245\005=}Hu\275\370s\005<\020\337\250;\363\250\310\274\275[\265\273\017\375\246\274\270\207\227<=\206\372\274Od\237\274\006\337\305\275\337\202a=\373\237M\275y}2=\270\005T:K\201\376\273;U\227=q9\241\275A\243\311\275\240^\311\274{a\021\275}\360\035\275\245\237\325<\006\222\354=d\001\340\274V\227\"<r\260\305<\247\022\326\274$\277H\275\305G\022=\233\310b\275\331yg\275\222\374!<tP\017<B\215j\274\003\265\336\274\373-5\275J\273\356\274\332\221\261=e\325o\275:1\253\272$u\357<\221\"\357\274k\013g\275\260\315\312\274=\375t\275\312h\224=\23675<\350\324B\275\223S\311;\2410\251\272\253\322U\275\303:\254\274F\014\225=\321\034G=\272\252\346\274\274\340\365<Z\027\251=\240|;=\256\311a\275\343{&=M\207\277\274\330v(\275\022V4\275M\214\301<f>\366\273\034\313\341\274\224\367\211=\257\227\264=AQ4\275N\206o\273\312u\201\272-\347#=\031}X\274-\r\035\274>\200\255\273\334f\357<\341\002\020=Q\315\022\275\300|@=\210\374\347\274\311\366\007=4R\375;K\024\236\274\032\235\007=\275+O\275\345\212\360;\030\220>\274\364\330#\275,W\"\275\003R\313\274J\035\220=F)\024\275\270\315\220\275qc!>\210\221^=\033\2156\274\252JQ=s\304:=\036\257A;7\200\252\273q\260\037\275{\2720\274e\341\272;x\344\203<_{\020=\303\274\356=\206\272\250<.d\337\273\003\030\212=\326 \221=!\0052<+\020\177=C\230z<\031H\326\274\003\202O\274PF\341\274$\243\304\275\303yQ\273\343\256\357\274u:\240\2752\342\001=$;m<(`\263\274T\315I=\000\253\034\275M^\343\274\020p\233\275\245\2174\274\020\010\201<m$\374\274\251 J\27570\256\274\224\2005=\tB\256<<S]\274s\0362\275\305\340\017\274O\2755=%\225\211<b\001P\274\256\000\333\274\314\244\260\275\0174+=\377\370\356\274r\202v\274\001\232\344\274\203l\005<q\232\373;\353\244N\274\004\233H=\214\025$<\353r0=I\361\365<\344\302\312\274\303H^=E%l\275\241}p\274\361\301\316\274g-\274=t\367I\273\\\234\266\275\312BH\275\250\273\223\274+]b;D\274\311\272M\275F\274\023|\246\2738\325y=\313\366b=\210\374\215\275\332cO=\017\017\211\275\340hR\274f\307\344\274/\333\303=|\023\353\274\374\000\'=\263X\341\274\275ip\275G\020\360\274\341\003|\274\255\356\253=\304\030H=I<\375\274S\362\204=j\2406\274\205\301@\275\211\241X\275K\177\2029+\333/\274\376L;<2\350\3239A\327\221\273\341Z\221\275h\036U;\\y1\275V?\r\276\247\034\332<\241d\035=\223M\361;\240\261\245\274\234\002\235\273\342]\331\273\214\\\221\275\276#\304\274\021\230{\274c\3338\275J\374\031=\303\321\240\274\266(k\275Q\202\237=\005\027\017<\360\000\224=\347?\272\274\365\336\233=G\336#\273b{\305;\220^\367<[\257\245=\231\006\037\275H\304\260\274c\303m\275|\274{\274\345\242\023<\261\204\300\274\312\003\002\275\272\376F=\376@\031=\232\252\022<\245\212F\275\036#\335\273M%\216\275\014\240%<\305\232Y\272\033\017O=G\305\341\274\242I\304\274\013\347\252\275\205L\240=h\017\222=\263P,=\024\322\361\274|\374v\273\314\252U\275c\354\304\274\275\205&\275\0007\036=C\246=\274DL\002=\216\351\377<E\205\277\275D\316\301<\305\225\263=\032\"b\274\021\204\222\271\307d>\275\325\214\240=\r\360\240=\032\266\264<Z\0143=w\351\305\274\205V\210\275\2771\245<\245\324R=a\002\227\275F\3111=\237\310\213<\312\376M\2751\363l=\200am\275.\220\206<\271y\236\274\242k\300=\305\351\222;\233I,\275:\'8=)\350\017\2735+\037=\376!\355<Cq1\275x\360]=\254\357\215=\036\022\322<<#\272<\243\360!=L$\355\273i\224\272=.\307\366<\354\335\226\272\226@\225\275\367E\255\274\233_z=\256j\030\275\310&l\275+\006\311\274x\013\200<Ij\240\274\334\252E\274\205\037\307\274\035\304\026\275\037>\247<\216\3754;yP\245<\212.\312<FC\317<\352\341L8\tx&\273\204[;<6\207/=\2709\303;\023\206\215\273O\346/\275\3678\253\275:\277\271<,hq=\325$\202;\211\227\277;E\337Q\275\265h\314=@\313\';~\301\322<7Yh\275\013\373Q\275\211x\n=\032bZ\275K\372.<\372\226\005;;\321U;\341]\033=\306[)=\316\275Q=\003T\341\275\323O\335\274\004\330\002\275\362\237C<}<\026=4F\037\275Hj\306<\230\035\252=\230\312\025=\"\306\010\275\267\271\320=\224\326_<\357=\020\273\232G#\274\350\320!=\024{\021<u\3351=\025r\333<r\204\257\274\247\203\360\271b\034\200\274\362\371\340\274\033u\264=\312\033D=?\341\301\274\372@}=\300U\014\275\347\3109\275x@\316=\002\320\332=\323\230\261\275\005\370#<\3708\000=\003\005W\275\302\350\255\273\316\351C<\220\202\000=\263\016\221;\273x0\275\237\324\024=\023\004\243\274g;i=/S\356;\006^9\273P\372\241=\2633\217\275\346\240\364<\321\255\262\273@)\005;\304\232 =T\376\035\271\354+9\273\321\020+=S*;\271\255\357-<\240_)=\315\377\250=Y\006\t<\021j\360\273\330\373Z;\224@Q\275\267V\276<m\307\027\2750\263S=\3633\317<\002\036\013=\020\"T\274Q\366D\275\201W\226\274k\270\305\274*U\245<\321!\207\275\276\030\264<\210\240\305\275<\'V\275)\226\223\275\277\334\260=6\n\034=\355\231\017=\227\334\356<\317\035\033\275\034G9\275\320\317#\275$\201\351;\024\233\205\274\320O\223\275o+)=\204b\270\274\32239\274\034\304\236\274o\r\203\2750\343j=\210\275\301\274\226\014e=A^\035\274\336>\365:|\344l=\001\340\n=t\205\341\273\205L\302\275h\023\263<\"\005`=O\307R\275;\010\313=\306\346J:\220\265D\275\352v\007\275\262\264\277<\2435\222\275\010q8=\304-\311\275\261\317\271=\365\244)\273\025\024\265=-\'\\;\360\000\033\275\205\340\223<\330\222\205\274\331\253$\275\271\355\033=\304\366a\272\367\304\013<v\375:\274o\323\004<\314\236\217=i\r\233\274\260\270\262<\376b\245\2751\213\002<\004M\013\275\004H,=Bn\013\275\240\314d<\334~I=O\033\244<1\315\245\275\325\220\215=\262[\037\275s\020\222:\315\267\251\274\275\3412=4\206\235\274|\335\003<(\352\2569yrZ=\355\343\207<\252\203\021=\261\345\235\275\360x\207=\211\"\021\275>\351\027<\224\334\025=\000!k\275\177`\231\275!\204\316\273\342\003\260= \322\216\275\361\270\005\275\'\034\224\274e\200\020==\034\177=\257\335\350\274?,\036=\263\000_<8Zx\274z\017f\275!0\005\275(\266\374\273oh\302<\014\0225\275\370\356\017\272\037N\276;\212\363\221=\342\177\350;\342v\360:\277\272!<j\034\322\273\333\202\022\275\\\237u<{\374\177\274\005\227\276:\312\372R\275\031\177@=^K,\275\002Z\211<8\246f;\310\326\353<\342\275\203=\331\371\345\275\336\002g=3\374\261<\177\343\237<}iY\274H\004W\274P\345\003=\320\351@=\025s/=\235[\034\274l@=\275u!\371\273\034\357\225<\332\203\367:C\342\256=\201\022\325\274\037\232\'<\345k\261\274\362\201$<\214\322f=z\260P\275\316\374\213=\2675\357\275\252\225\360\273E\346\331<2\023\263\2730\016\231\274\277s\347<\307\214u=F\317\263=o,\000\275\251}\022\275\223\255(\275\274@\352\274*\367C\274T\263\010=\364\024\013=\237\227d=\177\t\206<\201dn\275\311Y\327=\257\272\027:\035\330\272<\n\214\271\274\035\347\205\275\227e\274\274\242Z\214\274q\303\327<$OO\272\315\350\231<\345vA\274J\245s\275SmN\275\377\032R=\0263w;!k\211<\266\020\256=M\271I<\037\335m\275\233^\263<\325s\033<\351\365\327\275\316\022%=Y2\210=)\236\265\273\341\301\243\275\220lT\275\301\370\346< \023\027\275bh\017<\000\372G<\250\263\260=fD\351\274B\010[<\030=\204\275\026\333R=\t\3009\275\340\237e=\347\t.<ot\006=\205\301\217</\027D\275\364_S\275\225.*\273y\245\227<>\n\200<\224\342E<}\034\001\275ea\373\274;g\371\273(y\375\274|N\234\273H\2701<\303?Q\273\275a\301<v\030&\275e\300W<\245\327\306\274\353\331&<Y\026,;\036e\236\275\0055n<AO\226=\365\200\315\275\242e.=\036\315\001=\000cM=Hm\237\274\022j\006>Q\357 ;^^\203\274\000\006\022<\342\3357\274\2051O\274u\313\347<5\342\265<\rq =\034\201\336\274B\237\237\275\313K\023=\342\352O<\322\013$=\"\365\305\274t\334!=\236\221[\275u<~\275q^\247<\036\232a\274\250UQ=\200\375\277=\337\276\t\275\010\377 <.[V\275!\357\230;W\263w<\233J/=\006\263X=J\334\257\274\350\215\243\274H\317{=\240\2401\274\021\215+=Y\265\005\2754_\314=\376E\\<\241x\002\274\021R,=\204\037\221\274\232\307 =\345\023\335<\205\346\027\274\202\303\371\2744S\212=\246\347\273<\364_\354:\222C]=\030\226\022=\231\302P\274\343H5=hl\256\274U[\277;)\037y:g\027\372<W\005\274=\374U&\275\245#><\010!\351<\343[\\\275w\276\r=\272`?\275u|\373\273\347\346N\272P\236f;\325\324\271;\34553\275\362\3014=\021+\304\274{\214A;\211\337\226;Al\005\275U\277\"\275z\2411\274\000\315_=0m\344\274\216b\002;\353\371\221\275=\334c<\261EQ\274\342X\270\275Q9\373=\252\337\234\274\275\200\240\275VOI\274A\237[=\244\271\"\275%=\266\275F\255/\275z\373<\275kG\022\274\r+\261=S\005\030=\340\3262<\214[!\274\235:\314\274\263\252s9\010\010\222<\257\253G<\302&\004\274e\232\n=^\255{\2758J=\275\270\234^=K\247==\010\032Q\275\243\226\351\273\005o\033:=@\273<\234\023\265<\374\037\232\275\310\026\273\274%\265\273\275i\021\276<\023\240\210=\377:\302;}\344\354\274\262\357!=\254`\212\275\346\203\276<_/.<\326p\322;\331\232\272\275\361\025w<Py\270\272\364\245\016\275=a\205;h\305\343\274\234\337u\275K\304\032=Z!\337\273+j`\275\212\352\177;\375\216z\275\\N\001\275\236\254\255<\327\355W=\276\266\223:F\266\215<\275/\213<40:=\0221&\275\246!U\275:`\214=HL\215<\273\235l\274I\n\342\275\300=\272\274\024\316\006=\276\005\002=\312\320r\275n\3210\274s\244\004=5/@\275\210H\213\273}l\377=\2624\345\274/\215\240=\211\3412\275\340\264W\275q\265\300\274\270\254\016<\026\206)=\230\226\302\274q\362h=F\377\245<\362\314d=\245b\320=c\377\000=\333\257\351\273\227\365\031=\026\267\276\274 .[=\204\344\265\275!\372\037\275\030\307\203=\266q\255;\245\"h\275\357z\322\275\265\276+=\336\362\035<\202\211\017=\265\246\255\275\211T\306<\320Y\222\275\030\227\316;~\037c\275\256\246\326\274Lm\337:\250[8:\267\310H=\023?3\274\024\036\366=\2444\\\275u\010\276\274\214\035\n\275\321\033\207=Ur\005=\352\0343<\233z$\274-od\275\272\312\266;\354qL<~{\341\273\375\245\260<K\304\374\274\035\267\005\275\376\305\356<\000(\024=\000K@=\013k\013\275\363\342\000=\324\362\337\274j\037\031=\212\3356=\246w\255\273J\217\t\275\236\302\237\273,\207j\27491\356<\010\271\036<\225K\220<\353{\243=\2745\003=\334\231\234=\205\362\030\274\r\240p\275Nq%<\035\254#\270\316\301\255<\031Px=g\317.\274Co\231=\273\033\365<\262\341h\275M\306\342\274\204\364\373;\315\231\340\2738<7=\360\200\211=\ndd=?6\317\274\tP\261<\324U\313\274\317%\\\275\232\302\353<6\327\022>\333\006@=\377\337)\275\261\345+\275y?\336\274\326r\253;F\235\026<T\203\362\272\030\246r=\332\264\345\2739\2249\275\300m\212<W\211B;\321\310\013<U~\304<f\325m;\373\247B;lQP=\344Nq=H\361\022=\304\006\374=w*\330<\332xg\274>h\342<z\"\036=\3141\027=\232/\014=\345\016x<\331\311\235\273\342\033A<7\320\337\2740,T=\026\203^;9u\211=\263\230\225\274\276\334\021<y:\250\275\260\373]\275\241\317\275<\276\316<=k\035\004\275\247\232\206\275SC`\274`n\032=\351\377\240;\010\350\264\274\306\3217<\356\317\016\2750\036*<\301jA;\234\341\277<\214P\274=\267\251\023\274r\374K\275\204\341\260<\341\232(=\256\211\"=v\354R\273 \232V9q\230\006=AV\237=x\357\020=\271/\032\273\001\030\370\273^+\r=\"(\355\274\003*\262=\243\263-<\n\211\213\274\335\341\216=!\007X=\255v\346=a\341U=\231\301\357\274\323\252\217\275{R\251\274In\327<\270\371\006\2742\260\214=\255\226\234<\375kq=\214\355\232:\006\272q\275a\324\000\275\267\373\205=\276\321\346\274\310\372\230<\204\377\355<\007\254+=x\304\306<<r\231\273ul\202=u\017[<\376w\237<\275\262_\275r\362\304\274\300p\361<\205\270[\275x\202\316\273@X\202=\254;\217;@d\251<B\003\267\274\n\212\365<\314+\013\274\225\315\016=\006A\010=\310s\032=\370\000?=%\334J=C1\177\2753h\223\274q\307\003=\360\\\004:\361/\207<\352\235<<p48\275\027\214?=\302\325\004=\222;`\275\230\206`=\3745\221=\305\247\013\275\307\330%\273&\017\331<\302\224\265\273\276\275\221=\360\206v\272\220\240I\275\276K\361\275s\243\312\274\264\320\214\273%j6\275\220\300m\274,\262\301\274\373\307$\275Z\377x\272\257|\202\275q\"\276\274l\2475=\027\301h\275\200\237\322<\372SR=\311\205\222<\207\016\216\274<\265K=\022\222*\274\r=<=\310\303\331=\016g\352:ag?\275\246I~\275\325\300I\275\241\371\337\274\354\264 \274\313R\026=j\223\225\275/\335\312<\244\217I=\014\252\202\275\314\"b=\200\016\377\274\023\304K=\333\323\"<\207Q&<|\203 \275\035\211k\273\240\322_<G\300\227\275\235\247m\275\203\371\242\275\213!3<F0\375\274cw\306<mY\302<\200}\317;\315\272\240;\204}\214\272B-\325\273T\226\247=\271\364)=\344\363\274;\243\324B\273a\347\203\274\366\211\234<\370B\224\273\207\tP\275\013\'\026\275\317`\210=\211\277\013=w\254\026\275\300\335S\271\326\306\271\274\264\311\014=q(\321\274a\217\224\274%\037\325<\033\3442=,LK=`\203V=\353\356\267<}\345i\273K\354\207<&\2452=\341yI=\203\316\031=\005\332\210<f~z\275\200\361\300<\013\301h\275\305\221\273<d\0130=G\366h=5\374}\275\210\236K\275\346\226i=\n\212\214\275tID=\027qa=g?\035:\350\265\333:\316#{\274\235N\373\274_e\347\273\253\247\221\275\227n\247\274\237\177!\275?\316\206<\000\373\347<\243\014\030;>\320\347=%\034\203;\024[1=\037\2613<\'\366\001=\217\315I<\010\302\362\274\206\211\024\275\237\356\214;\334\"\004\275\227\301\360\274\230\031\241\275\013\301\237\275\231\202\320\274~\025\312\273\250\247;=E\010?\275\253/ =t\302\220\274\375\256\201\275t\013*<\267\032\373\274\240\237\201<\236\025\225<\220Zv\275M\341+=\222\262B\275(\330\253<\370\267}\274D\336\205\275!\223(<\243\007\257\272\016\353\271\274;k_\275Z`\257\273]\242\365<k\304\300<\201\351f\274l\364\354\273a\204\310\275\033\375\316\274\307\335\262:\250\343\022\275<g\231\275\003s)<\214V\262\275\252\257E\275s4+\275\010\241\201\275\227\327.\275[\323F\274\032\355\221\275$\365\367\274~\330\330\274\026\315\335<L\250\265\274\243\252\347\274\0003\004\273\321\311)\275\244\270\017=\345\250\352=\335\310\231<\231\320\034=\253\025W\275\203X\031\274\235?\367<\271\232\277<\'H-<\216Qp<\344|j<\256+\'<\311\333\345\275\363\035\r\275\343\210\030<\201\254D=\236\037d=x\371\274\274\rs=<\351\212\005\275\3442\233\274\370Pt\275\353@\243<\034&\247\274e\017,<\233;\352\271\245\352\314<:?~\27436\200<\177.=\275\017I\217;\3279k=\274\356\375<`uo\274\177\007K\273Y\206;\275\365;\224\2759\355\037=rz=\274\300(6\275pl\366<\013\374s:\236xl\274\036*\021\276\232G\251\273\244\224\005\274\223\330\025=\r\350\n\274s7\262=?\266_\274t\023\030=~\241\024<\373\347t=\010K\327=J:4=\272\231-=e\276E<p\371\236;\316.\365<e\312\352<\357z\021=\217\217\340\275\313:\335<\226\n\035<\267\243\215\275\364\177!\274\031\236\002=\303S\351\275Pm]=0!\014>=\240S=E\266L=\271\372G=\1773\222\274D\200\225\274D\254\212=\017\335\'\274`\332\213=7e\313\275\360\231\346<;\262b\274\256}\024\272\310\336\241;\0319c<\366N\371\274\200r.\275\211\222\300<\313\236a<\256\312\321\274(NX:\216\263\267\274/\213%<T\231\375\274\003\366)=&\200^=\307\225d\274{\331\246=\221\324\354<\327\253\231\275\215h \275\231\004\372<\3669g;\251u\013=\252lV\275\0068\030<*\257\021\274\221^\324<\224\366I=\357\211\254;#b\\\273=X\215=\320\257\035\276\214\266s\273)\326\273<P\361\001=\360\t\322;/\217\247\273\246\275\"\275#\217\007\275[\210R\275\2400\207\275\225\355\\<\265\351\035\274\335\375v=\331\261\210<\364\375\211\274\230\204\221\275\245\246.=\212\217\261\275VK7\274\230\242\303<+Mw=8q\255\275\022AZ\274\357\303y<eC(\2742\351\312\275\327G\357\274\027\3364=\263\331\255=\345\356\014\275q O\275\210\211\354;V\367\272\272\271\222H=uM\332;//\200\274\234\256\356\273K\245\242;O\034R=\242^\226\275L\0041=\256PC=N\304[<\333\312B\274\035&v\273\223W\207\2730\222J=|G\235=!$0\274\226\343\264\274 ]F\275\256\312P=\365\2241\275\204\376\002\275\256>h\274\245V\014\274\361\206\026\274\344r\005\274\026$\037\275\211W9\274\177\335\t=\315\230\301\275je\211;\206\021\304=\276\206?=\347_\271\275d{\016\274\252\275\034=\377|3<\326\260\234=R\361I<\212A\002\275\032\026\031=V\365\322\274Y\036c=\313\201\302=\254\322\013;C\310\242\275\367\204\342\274\326\363\207<\003\360)<\351Y\035=\264]<\275\020\350;=\300\353\021\272\331\301\357<|m-\275\3201\337<}3\327=H$\307\272|A\311\275\203qf\274\202cy\274\376r\375\275\r\034\272<\351/\357\273\373\037\253\275\203\016\t=\303\262H\275\301YP<\370\374?\275=\"f=\347\377\264=\224L^==\335a;\020I\201:\320\336A=\241\220\367\274?\367\017=\207\2156=\301A\312\275\263\"?=\334\311+\275\261\032\025\274\t\3667=#H.=\215\315P=\231|\n\275\353%/=\241\227Y\271\351\207\017=-\245\326<T$,<e\277\275\275\373\241B=\220\013\240:\261W\010=W\261\005=\2306p\275b\347\341\2746Y\267=\302\233\231\275\2030\002=\245\314!\275\022\260\214\274\246\310\304<\006H\277\274A\331\263\275;*\253<\3059\307<\325y\203=\tF\246=?z\020\273K*Y=\366\355L\275x\032S<\245HQ:`W\245\275y9N\275\037\304\371<\223\267\300\274nL\217\275\343(\024\275!P\245\275\254\247\366\273\221\2668\275\214\342\013\275k!\035<A\214\335\274f\030T=\026\367\363<\305kv=\317\024\242\274\002\370\010<\336\335\013\274\235,\200<\377Nd\274\211 \211\275cf\036\274m$\221\274\302.X=\355\340\006<:4R\275%\010D;\322\\\375<l~(<\351\244G\275\251\226\202=\270\267\371=\364D1\275LD\202\2746\r$\274?\t\013\274\342\260\220\274xO\260<\313\035x=\347\331o=u\337X\274\025\010?=A~r\275-L\006\274<\"\326<\222\277\247\274\220\335\035\275\177\360\034=\314\0076\275OD\346\274\2210\322<3\322\\\275I\262\346;\023\240\321\273\314&*=\025\363\216\274~4\365\275\241\314\356=(\375\n=>\365g;-u\312\274\037\205\227\274\326]\362\274&Zy\274!\335\333\274\343\020G=\360\017\220\275\363\233\246\275Yuu=W\034\307<A\002\226=\"`\256\275\023\330\325\274p0\321;<\005\001\274\340\201=\273\350x\343\274<\305\177=g\222\237\274/S\252=Rl\356<n\271\224\274Y\306\n=\363\003X=\237]\276<\362\345t\274\235\375A=\013\337;\275n\t\257;J\203\206\275u\353(=\212\240V\274b\203\305\275N\343D=`>\005\274\032\304\312<F?\253<\237\340\270;sN\n\274\363\237\252<\005<\315\274I\004\346=\271z\305<\210\235\251=\021\033\224\275\235Y\200=\365K\314\274w\"\037\275\220\213\256<\206\001\264\273\330*#\2750\247m\272\3078N\2754\2077\275\350\274\244<\371\231\366\274\200\300A=\322&\334\274\212\2042\275\0300\274<\\\240&\273\007\213\276;c%\243\273\202\001y\275\r\342\345\274-\"\311\274M\334\224;\270\3345\275\203\337\223\274\315u1<\014\364\274\275\016k=<L\001g=\332+W=*\303\341\275\372\277\346=\217\320\022\274}\027x\275B\277\t=\227\214\214=\324\275\214=\315\"N\275\177s\301\274\312VD\275j\347x=^F :\364p\330\274\002y\032\275ly\033\2711z\266<\223\317\373<E\021\207<V\337\203=\237F6=\017W\307\273\nC\255=\271\373\366\273\353aw\274\327\003a=\024\277\007\275d\362\243\273\315\267\232<8\324\367\274\216\264\024\275\214\360\254\275\254\325c\273\\\365!=\200\"\227<!l\345\274\024X,=\3458 =!sW=\333?\006=\274c\200\275\315\377n\274\260+!<\353=\201\274\242\333*\275^\025Q\275u\336\241\273#iQ\275\211\256\216=\221\203\031<\\M\341\273\271S\265<\332%\201\273\364\3348=A\323\214\275RM\013\275\272\005\016<\000\n\326\273p\263\333<\245)E\274\336<\225\274\035\321\213\275>+\"\275\177\201@\274\n\264\n=\336a\'\275\204\377K\275\037\334Z\275t\215\004=\3771\202=Bq\302\274V|\311<p\361\033=\020\207\030\273\332\312\373:\272\027\177<L.\010\275\253E\033=x\367\021\274\351\212&=\342I\004=\213\350\337\274\361\037^\274\361\017!\274\221\225d<QW[;\210\204\317;\224>\343\274^\t\333=\267\226f<F\006#=\330i\235\275\266-I=\201\322\246=\0106\214\275A\237!\275\327\035\315<\312\257h=\336:\340<P\224 \275\202Y\004=\2701\002\2746\027\032\273F\224 =\315t\002;\250\350\316=\323v;=Z\271\027=\324|O<\177\002\350\271\243m\316<R\224\022\274\227\016\005=\253(-\274/nC;`q\204\274\265\263\344\273\004\233\231<\240Y\375\274\231\307\222<hY\201\275\020\373G\274x\220\002=\006\021\342<\323\376\203=\206\246\000=X\220\307<F\261\017\274\367\347A;\204.5<\331m\211\274\340\030v\275!\347\210\275\333\236*\272%\006{=I\341\271\274\023\270\271\274\353o\320<\231;\214<\224\321\032<<\305\261\274\317V\224\273&\337\026\274\201\261\211<\304\036\021\274\244\2001\274qpC<\016^\327\275.\233\203\275\226\205\377\275\243^\037\274\317\260!=\352\240\273<x\203E<\354\301\246\275h<W<4@\234\274q\330\351\274\257\034\035\270\302\376[<7\177\254;V4*<\210\253\325<\\pl\275S\371F\275\345\275y\275\221-\345<P\006U=\336>\353<\3401\n\275H\306\216<\202\277\267\274\r\212e\274\375\230C=D\'\363;\021\033\013=.D\212\273|\303\375\274\363\300\325\274\341\353\361<\001,b\275\321#\267<T\341\"\275v\325:=\327R\237\274\340\303#\275\3701\231=\353\013~\274Wn\320\274\344\240\313\275\263\352\243=|\232\221\274\276\272<\2739\333\014\2742\227\221\274V\246;=u\032\236\275\206\330W:{/\025\275N\233 \274@a\314\274\232{\234\273\252\274\370\274!k\200<>\203\207\2747$r\275\034Bu<?\220\\<ZD?=\336S\004=\0029V\271\016$\215\275*\177\005\273\273?\354\274#\257\200\275y=6</\242/\274u\223\"=D^I\275\213)\227=(\222\264<v\300\005\274a\'\241=\2572j\2753\3328;\350\310\206\275\177\016d=\020B\207\275\177\341\255<\355SO=\352`\244\274q/\317<\360\333\016\274/\005R<\036Wz=\024z\003\275_\013P\274\2501\033\275q\'U\275\270W\245\274\355\234U<\026\252\275;CH\247=&\276%=*\222\003>Nl\373<\373\241\310;~r\205=[\365\255<\027\257\355<\253\211\312<8\246s;\301\000\234\274bv\025=D|\004=\2749o=&\274c\274j\310\221\275\372@q\274}^\227\275\304\202\003\274\325\254\037\275\231\305\344\273l]\363;\361_\030\275g\207\242<\301\216\273\274w\244>=\264E\234=f+x\275\317\325\311\273\016qz\275\263\305\334\275n\016\244\274D\0137\274\2266\217\275k\323`=\244\3631\274\025\273\263\275M\347\231=\254\241\232;\266\216\207<\244{1=?\252\227\274\235\350\231<\177\037\303\274\007l8=\251\237k=\205\027\\\275\204;\357:.\203\t\275\251i\272\274\034\026\363<\352\356N<gj\t=\201\007i\274\237\375\272\275J\216\210<a\205\242\274L\353i\274\320\220e\274k\364\225\274k|v\275x\264\213<\323\302\'\275S.\371\275\231\257?:8\215F\275\270\024\240\274\270Q\036<>N\203\2750\355\211\274\274\361};8\315$\275N~,\27548K<L\300\222\274e\002%\275!E\003\275j\0208=Z\364\023=m\311\320;\377\027U\274\214G~\274\374\002Q;U\316#\275+v\306;Y\265m\275\030\360u<\266@\033=\177\3009;?w\207\274\260D*<\251z\017\275\227\217m\275\027}\221\274\266\2053;\307w\000\275\215\304s\273d\323<\275z_9;\244\316/\275O\260_<.\366\222\273\032\254\326\274\205\266\350\273\275\033\213\275\0050!\275\245\352\244\275\237\332\037<\247\327\262=\311\226.\275\221\342\264=\325\010\333<\026\277\305=\033\346\023\275\'\220\227;\244-\035=\353q\326=\010E\247<\313df\275\334\244\200=\341\242j<\276+t\271\305\205)=\271\341\210=\251\360\341\275\265X5=c\321\034\274\243N\201\275\212\333[\275dr\335<6\r|;\2766\357\274>\302\221;\300\\\"\275* \271;P\3119\275\014\003\027=\016!Y<\241qN\275v\202\214;$\302\033\275\217\256\352<.\367p\274}D\025\275\212Fn\275B\217\321\274-\321\237\2746\021\025\275\252\336\200=m8\034\274\212a\014=\006\337\206<i\2044=\216\333H=[\2302=\230\2405\272\310p\215<E\310\341\275\241\222Z=}T\306\274\217R\311=\026\373;\275\223h\213\274\255\266\343\274Qi?\275\033\340\242\275F\242\262<\177\007\245=\006\251\200=tn_\274?\353\030\274\006\353\311\274 \372\231\275k5a\275\023\316\333;\311T\366<\254\254\027<Rw\021\275\037\204\205\272}\244\352\273Z\300i=\02334<\252^\016=T\037B\275\332Go\275\366o\205=a\203\231\273\016\201\240\273\001\342C<\032\274e\274\227\270\026\275\300\351>=m\240E=\3465\352\274\270\255\305\273\347\020<=[[F<s\"\214=n\022\203<x\033d:\326\361K=\330\320/\275!\331\203<\242Q\016\275\246\244\014\275_\367n=k\216\363<\250\335>\275\243\267\356<0\342\274=\307\270R<`\243q\275\360\006+=c\014\346\274\3565*\275i\201\260;\000\350\334\274\025VF=MZ\223;\020=\003=m\253\002\275\001f\2758?zm=\214\004q<\306E\023=Y\312\260<\326\207\254\274\351q\225:\270\000T=\n `=M\242\005\275ER;=\325C\213\275\300\315/\273 \344\3279\360\320\367<I\t\370<\344Z?\274\347\n\017\275T-\257\274I\033\225\274\207*>\274\010\237\234\274\326\025t=\373\221\206\275\367\n\271\272\021\340\t\274\327H,\267\211\377\277\275\262K#=\3221\320<\330\343\252\273@I\370=\024\303\n<!\222\263\274Z\311\204<w\220\r=INM=)\346[\275B\013>\275(\237g\274\014\367\2419\304\224\2569\301\202\214;71$\274\3441W<&?P=Z\t\210\275\265~\\\275\250\276e=N\204\257\273\353\0163=\307\327\017\274\364\321B=\346\032\303\275\335\216\304<\307 \371\274\314A\n\274\332H\365\274\243\340><Hj>\275\340\335f<^P\r\275}~\252=97\226\272=9\035\275\0167\300<\260\351\250;B7\007\275mZF\275\313\231\341\274u\266\335\274\352\311\255;0\003\360\273\002\267\333<\n\317\322<q\213\3549\r\377\260\274\334&\245\274!W\310\274\254\006)<\022HY<\023\247\351\274+\367\217\274R\375\206\275\342\226\177\275E]\203\275{\265\264\275\363\3620=\327\212\204=\216\375\031<X^\031=\361\001%=Q\205A\274\301\236\207<\010Q\314\274M\300\000\274\315\373@=\347Q\267\275Q\266\221=\002w6\274\312\214<\2744M\223:aG\310\274\343@\203<Nh\023=>`L\275\035d\r;\236W\265\275\242\001\242=\023@D=\246\007\265<\316\372\345\274\017D\311<\317\036\254\275\221\331\356\272\000\273\001<\302\302X=|\334\240\273\002\376\223\275K\006d\275k\207b=\311,\242\275\021$\204\274\332\347\024;\305\254\244\275\311\020J\2730\357\031\275a\306\342<G\304\020\274R\307)<\210~\034;\250\035A\275\364^4<A\331Z=qk\361\274\352f<\275\203\024\244\2758\215\253<\300\252\227\274v\214u\275trI=kC\"<\332\336\025;i:\223<-\370t=Fz\200=W\337W=\355\212\237\275.\272\307<\201\247\231=\270>\263=M\305\224\274\217\326\002\273x\014\226\275}\"\r\275\252~\300\273\004\2515=\346b\333\275\376<\225<\302\234\023=e\347\020\273l\273\256\275p\254\211\275\257m\207=F\331\201\274\001\334\265<Z\350\t=\352y\037=\310\020L\275\220k-\275\357\262\247<`s\333;c|\272:a\236\017<&\351\225=\343\377\252\275<\2731=\304b\n\275\"\254\324\275\361\321\004\275\366\264\340=\302\302\265<\225\006\246\274\027Mu<\276|\250\275\237\0318=\014\201h\274%\252\001\275\202=\367\270,9}=\251#\031\275\r{\366\274\324\007#\275\025NK<\022\346\305=\237x#=!\3037\274\021\334j\275\323\336\227\275\220\371\n<\336\rn;\331\207t=o\371\000\275\261\'\362\274\202M\327<\3253\224=#\364F\273k\353\307;\"\200b=\020\212\311\274\035+\010=$\331A\273P\2609\275\253\275\r=\363\355\317\275\350|\177\275\310\201\320\274l\325\214\275\217\306I\274\371\342\303=\007|:\275\275^\256\274.\242\314\273\355\273\246<\230\326\350<\324\251~=\010^P\275\250\242v\275y(\035\275\266\037\270\273\210IM\275\323<\364<)\344\300\275<\2071\275\251i\022\2755&\315:\324\027a=\rU\202\274\274\341\213\274}@\221:\250v\205\275\272\321A=5 $\274\234T\034=rU\r=r\330r;\021\005.=<}\022\275o\'<=\371\374\313\2730-Q=y\266\327\272\234\314)=w\322\320<3\345\023=DZ\223\274\241f7\275n\233\331=r@I<\206\372\024\275w\323\206\274]\333_=\305\247y\274HRP=\323u~\274E\236\276\274)\343n\275Q\306[=\003\333\260\274\357\005\270<)A\036\275\373b0=E6\226=1&\221\273\273\324\001\275\355#\215<\016x\310\275\236\237\225\274\2531s\273\255\245I\275\3729\264\275c3i\275Q\262\016=\342f\207=\032\030\"\274c\252$\275\377\355q=G\001\217<|\022\224=\034\315G=\246 \232\273\242.e\274\254Wc<\251?\255\274\251\020%\275\255\207(\275\235\352\001\275\366)g=\204\033\021=l\263\314\275\034\205\362\273\344\".\275\314\267u=kf\262=\245C\235\274\\\333\206<\350\204\006\276FFK=\247Jn=rN\267=\257\260\200<\272\030P\275tf\334\273\213`\t\275B\0224\275*\030\260\273\274\010 ;f\344\214=R\207\177\274\375\360R=\2340\000=U\245\242=O%\353\274\254\020\301\274^ 7=\333R\265<\311\315\315<\241\336b<.\244\205=\'g\264\273\035h\210=\351\342*<z\002\221\275\031t\033<\000\0366=.\240\034<\013\345\344<Q\031\302<-W5=\'\247\337<O\256X<\277<\"=oP{\275k\021\260\274\002\217;:\274\356\203=\"\306\263<E_6=\360\275\250\275\215N{<\3557\256<e\316\305\272/\227\006\275\023\370{=YY#\275\2466/\273rK1\275\243\231\022\275U$\032\275\271\035\212=`h\207;\036@\343= \345\t\276\251\244\024\275\352O\315=\352F%=\262\006\243\275\352\234\252<\246\367\260\274\247\261\017\275q\362\006\275x\267W=\232\333u<\342/\235\275\22343;\213 Z\275[\236F=\334\202\n\270h\030\217=\362\036 \274\036v\370<\375z9=\313E\224\275\021\234\216\275\340\352\206\274l\316\031\275\001\205n;?\005\273\274\260:\016\275p\220\304:\274z0;\366\004\024=\t^\'<\241\274\227\274\330\334\365<Sb`=B\371_<\324_W\274,\332D\275\227K\374\274^\245\200\275\376\315s\273\325\215\206\273\377\312\'\275\214\317\365\274..\016\274\255!\360\274\3709\005\275n\361#=\312\021M\275\271\204\205;$\016\356\275\251`f\275M1^<C\315\225<84\254\274\277\357\204\275\377U\010\2702\231p=\322\002\207=\334\353R\275{\233\201\273p7\217=U\025r\275\2571\327<\350\\==%;\010\275\366T\317\275\236\3433=\265\021\264\274\250/\\=\035\356\374:\027\322\031\273\177\021\036\274\022\205\340=\325\256)\275 \027\327\272\252\361_\275\2607\307<\271\215\354<\361\223\216=*d\251<\372N\246\274R\352\014\275\000\213\t\275\323\231W<\345/\270=\026\000f\275\300\246\006\275\271\324\002=g\3612=\354\030\343<\272pC=;\216\003=e\330$\274\210j\223\275\007[w<7o%<6V\375;\035\324\217<\336\310x:\372\250\334<\201\343c=\007 \203<\310\374\206<\246\317\013=g\207\241<\351&\215<\034\270\217\275\312\273\277<\313\372\004<\036#P\274\207\234x\275\224\271\327\273\361\332\300\275o\362M\275\252\034\313\274\243\232_=\323 %=\360!\315\272mV\341<\376\312v<\365*\246=U\351\261<\204\306\365\273\213\260D<\005\264S\275\013\204\013<\327\253\221\2735\363\326\274n\013\371<\262R\034=\002\200\2339>\276\320<\247-\271=\333\344X<_\343U=_xd\275\366)\321<H>D\274\033fq\273v\362\243<\'\010\025<\014]v<\025e\236=]Q\275;\237K\\<\366M\246<<i0\2752\335;=S\327\242=\035\037\247\275\221\2639;\001G\276<\230\004z\274\373\014[\274\222r\277=Pe\352\274\030\366l;\344\224&=\3755&:ts\245\274\"\014\204\274}a\337\274\000\235\002=T\005N=\237u#=\321x\254\275\333a\226<\273F\242=\202p\342\274i\3314<\302i\351\274\375\374\361\273\336\375\306<\273\220\006\274Y\342\216<\177\223\202\274\253\272\351\275\346\2539\274\344\353\3769\317\337\031=\255:z<B\331\342;c\302n\274\\\254\255<$[C\275\354\224\304\275\004U\026;\224\0318\275aF\252\274E\231\321\274X\222a=\325\230\234\274n\333\377<B[\261<\205@w\275\334\354\'=e}\362\273%!O\275/n$;\352\273\331\274K\357\372<\250\202$<}\374X\275]A\\=A\306\346=\313,\203=\303t\270\275\203\352\274\274B,3=5c\330\274\010}{\274\245\255Y<\263\311\215<N\201\003;\210\006p={)\032=\035\231\010=T\261\274;\342\014\254=\337\244@;Q\003F\2756\337\304\272\230\315\201=s}\264\274_j\371<\263\311\027=\001K\263\275~e\027=\200J\270<\277+\227;4\236\305<\036L\357<\005K\210=\377\272\327<\005\3632\274\2626P<\003F\266<\n\362\365<\374|\003= \352\340\274+\352\315<\276\030\246\274z\261\223\273\357\2126=\320\256\356:WN\207<\317/\233\272\312E\220<\336\002\003\274\233\323\301\274\260\350\025\275,?\031=\002\375\020\2746\204&=\013\325\010=\312O\241<\307S\322\274l\302\225\274\256+y\275\220\325]\274\010\332\331\275\264\333\025=\340\216p\275=\231 =G\302\214=\233\233\005;o\367G=\214t.<\365\270U\275T\t\217\275\352\315\017\275\032\314/=0h@<\030}\273\275\316\374w=\366_L=\275\321\327\275\342q\017;\227\257S=\224\347J<\004f\221=\3457\2619\366\257\333=7H)=\201i.\275\311\214]=\342\203\213\273WZ2=rI\236=\320\310w\274n\'(\275,\022\371<\311Q\306\274\257\236\271\274\214\027\'<\331\244\372\274\027\277\333<%\020>\275TR9\274\354g\035=h.\225\273\336R\340;d#\233\273\224#\007=\274\335\317\275\322]/\275`\2605\275!\215m\274\301U\020=F\r\262;\346\322\003=Sx\207=\320\231\027;\023\002a=\035\212\264<j\336a=\013Z\235\274\354\250\352<\202\026\242=\206td<\02192\275R\353==&\031q\273I\263\213<,\024R=\366\356\216\274J\252#\275\253\203\243\275=\371$\274\207M$\274i{\026=\2063\227=\203\354X=\355\375\332\274\245\r\247\274\300e\203=\314\304\217\273z\032\227\272\000BM\274w\243\247\273\271i\321<\231\207\256\274\304\262\037\275!)\214<\323\017L<\332\356?\275\246\206\356\274K\227u\275:d\203<\302\231\210\275\241\"\020\275<\022\232<\376\2140\275(\276\251=\374\315\231;o\252*=\006\367\304\274\355$l<^\250\367<\343;s=\267\366\371\273j%\246\274c\365\247=\340\334\203\275\\\"\210:b\230\r\272a_,\274\354\367\235\274?y\211\274\237\201\031\275^\237\324=8\353\301\274\221\254\345\274I\323R=s%C\275\244\237\265\275\205\374V\274\250\335:=\226\027\300=\261\374O\275\365\203\253\275\353\2570\274\300\357L=\246\267\223\2740\343B\275\211\356\206=\242\337P\275\211>\002\274;%=\274\352*\022=\334[\336\274\030\307\334\274*\'%\2748\332\t=\344\222\305;\n\347\233\274\024t\360<\362\337\n\274(\263)\2754:{\275.jx=\321\276\233={\001\017\274\017\266y\274\262\\\016=0P\305\275\006!\332<YL\242\274;S#<\211\r\204=5&\370<8[b<q,\026\274~4\002\2758\222\210<B\336\256\274@\215\356<\242^\025<\273\010T;bY\211;s\342\315\2759\002k\2750\013\210\273\010\372`\275\002\033\214\275\272ho\275*\277\372\274kC6\274\356]\031=t\224\213\275m/\225<F\033\336=_\037\013\275\004r\001\275\037\352]=n4f\274\351\033\202=\367AX<iP\017\275\340\256\371<\327f\305\275\235\305\234<\320\311\256\273\233~\024=\037\236\346=\362^\251\275\364\211\024\275\261\272\274\275\341\252\202<L_\211=\233\312v\275u\261\002:\303\312\202\273!\234\014=\333T(<\337\374\006=?\205\324\273;\255\327\274\265\215\201<\221%\001\275`\356\330\273F\244#=l\357i\274i\302\261\274\205sQ\274\344\264L\274\001n(<\005&#\275\372_\275\2742\263\236\274\231\023\204;\212\211i<\270!\323;\303\0225\274\240w,\275\271m\300;\247K\010\275\217\241/\273e[\024\275\006\3678<\326\244\256\2752\362U=\350\225T\275H\006\020=67\035\2747\r\251\275\250\332\244\273\242\027r\275\366\216O\275L\307\205\273;YN\274g\210\232=\360he=\204\345c\274?\361\277;\"\2031=\373\2573\274S~*\275kC\371\275h\256I=\332\223J\274\273\336\223\274\036\306\347=J%C=\023\332\321<fQ!\275\324\\~<\372\235\302<81\000=\020(\213\274\331\251\020\274\340TV\275!\365\027=\376\246\363<\365\017n=\273\271\246;\310\025\207\274\341_\030<-\352\245<\033\267f;\275\017\217\274\013Du\275\332\364\355<\216~p<\247G\336\273V\024\304<\005I\206<E\027\312<\202\207\301\273\211\202\356\2739\002\343<$E|<\342\377f\274\305&.=\264@P;\353\250h\274I\365_<\024\235\217\275\362\227\240;7\237T\275\275\274\230\274\374D/=H\n\2778\214wt=j<\034=\273-q\274Z\247\316<kBQ\273K\216k=\225 \"=\377^\265\274R\254d\275\236&\031\275*\021\243\274\"\224D\274\360\266\303\273\264\275.=\002\374C=\301\301\357<\017a\021\275\2709d\275\001\312\240<\004\253\331\274\372\333\345\274\246\340*=\201\036\215\274@\273d\275\377\265\314\274\014\211\212=\035\014x=\322\276{\275@\215\250=\201aZ\275\246\250\277<\003\314\337<oh\364\274\372\222\027=\360G\034\2759\315\"\275gU\023\275\214,\3029\213w\010\275O\241\241\273=n\025=RM>\275\2101\226=\201\252m=\376\260`<\260\\\340\275Eb\310\27407?=+\006\205=E\305\200<X6\360:I\'\036=Q\263\250<\234\335C=\215I\332;\\\202\366\274Ex\363<[\036\254\275i\275\370<\004\352Z\275\317f\217\275T\000\324\274\007v\027;\"cL;\\\236\321=\t\027\347<]\230\241\273\347\266/\273\236\006w\275\317\035\350;t\037\310<\246\225Z<U\354\331=\350%\207\275b\340\036\275\326\026\031;\225\342+=R3\244\275\232,\202\274\177\236Q=\240~\207=|] \275\231\233J\275\273\216\301<\007\212<=a\277~=\344\376\031:\016\024Y\273\250g\021\274\244\316@\274S(\030<\313\016\026<4\304\204=\300\303^<\231|-\275\213\306\225\274\255\367\276;`Y\300\274\231\311b=\277Q\270<\023J\275\274*\267X=\2422\343<\210\177\374\274\260\2061\275#\t\013\275\034B\353\275|\227\341\274\355*\025=H\000\344\274\317\253\257=\010\270\352<|\233\006=:\374\032\275Z\256E\274\313YY\275\353\225\357\273\356@\245\272\236s =\334K\213<[\006\207\2731\000\023=\232\344c\275=\336\354\274\374H\206=-`\007:>1\2468\271W\272\274\330q\013;\243\034\361\27442\333\274a\322\002=O\002\205;\205\334\036=\000\035\006=\352\022\216\275\335\320.\275\254XV=\267Sf<\203z\266=\324,\356;\267\372\212=\222s`\274\303\267\235\273\213W#=#Q\347<H\002\217\275\203\342\262<\215\353\235<\355\260\377=_\234\\=\206\244\300\275\202\357\211<w.\261\274\357\244\321:\273\336\004\275\222T_\275DC=\275\332\232>=\337j\006\275k\234E\275\3256\242=\351\250-\275\362\375\251=\372Gp<\037\276\206=\346H\220\274\202\262\330\274L4\006\275[\345\024\273X\343\177=BA\217<R\224\242<\351\276[<\265\220_<\233\251G<\373\023\315=\023\353\230\275\205\245\240\275\300\023\305\274r\372\241\274\005d\214;M\0107\275\255\263[=\231\037+\274\233,\022\272\372F>\275\354\027\262\274\266\314\375\274P\211\026=5\366\225\274\277\177I\275S\210\220\275\212\035@=o\r\031\275\361\025\004\275}^v\275\2614\332\274Ks\225=g\324\227\273X\r\270= \005\221;\213\350O\275\017\215K\275%\250\363\273f\353\017<\323YM=\'r\220<\307\220\366\274\364v\372\273VV\000;{f\036=\034\355\036\275`\n\251\274\005\017\202<\"\325E<\311\225\263<+\241\336\272O\261\311\274\203\223\212\275Sjg=\241\262\t\275\002\327\210\274W\203K=\3166\254=k\311\000>\345\277[=Q\334\212\274.\307&=\335/\224\274\210\\x\275\220\320-=\200\232~\275%\332\211=\304z\022\273\345\203=\275 \254\214\275{[\331\273\312\026\270\275\250\246\266\275\322\273\200<}\211\272\274z\225\252=y\357\246\274\203\322b=\246\217Z<>\361\'\275\362\367\255<b\2546=\277\265(\275\002\'^\274\003!_<9\201P<\002\321|<\246\375G={.\003=\365\313\"=\316*\220=A\342\310<\347\367$\274}\370\255:\315\250\232\274\003)\243\275\377.\230\275\0316k\274\264\364M=\354-\010\275R\334Z\274\3509\231\275\330%\355<\313\215\211=Z\375\211<q\323}\274\355\241\301;@L\r\274X\363\035\273b\027\035\274\371\242\206:\260\016\307\272\251q\003=\014\220\241<\\\177\206\274\'\215\344<\203\354[==\310\320\274S\261\225;\216Q\366<\035\215/\273\332l\326\275\262\017\270<7\234\323=4\300\260\274\tf\010=\013.\204\274\370\326\366;Z\247?<(;\237\274t\310\263<\271\351\321<`%]\274k\205~\274\2710\243=F\020Q\275\010\332\372\274\247\225\264\274&N\005\274_7J=\357t\005\275\336\212/=\024\376\202<\323\222\222:\255F\231<3\026T\275q%\207\275;[\024\275\037\301\t\275At\215=i\231\206<\230\3418\275\222\2348\275c=\222<^K\240\274G\376)=\037\036(=\021Q\177\274\242\024\243\275\216\320\275=\257\240\000=\306\375\355\274\030H\234\274&_\222\275\237\003\211\272J-\362\275\222|\032;\237\372T;\315E\004<\326\307\220=/=\200\274\'\377w\274S\311\262\275\235\331\251=H\352?\273\005\257#\274\346Tk\274<\027\362\274\274\013\316<R\300v=\200\217\277\275`#E<$m\366\274\217\260?=\313^\227\273`\322B=\251\250\232\275\312K\002\274\0250\023\275$\236\274\274<\267z=\334\'\307;RFg\275|[\255=C\307\345\274\233\017\234=,\314#<\272-w<\367\374\303\273uW\037\275\235Mr=\260^E=\204D\201;\007\001\245\275\016\357\232\275\220S\214=8\301b\274\261\307!=\035\230\177=\033\275\311\2750\007\t=,\202\260\275G\3566\275i\366\201:\300\026\251=q\250\245\274\022J~=r\330n\275\361\234\363<\370\365Q\273\t\031\361</\032\232<\3034\001\274*\313\224=\213\370\324<\013\315\200=\222\331v\274\207E\022\274\237\245[\275\264\343\355\274\206\004\233=\203\214\312<\341w\260;\362\203Q\274\267\337\311\273IQ9<\036>\242=\330\337Z;\245\221R\275\331\013\334=-\2203=>y\263\274\205O\212\274\310@\220\272\033\235\225\275\026\361\232\27542\316\274\0203\206<2\310:\275/2\355;\247\336F\275)g+\275\010k\003>\222\351\236\275\367\236\263<\250N\213\275\350\304\014\275\316\316l\273]C\032\275\023s\206\274\275S\312\274|\355\335\275\246\302\256\275#\276\221<CK\207\273><\216\274\024\241\317\273l\204\342=\037\237\024=\240\203}=g\202\000\275\360y\305<\305N\275<\225\347p<\300K\321<\350\370\304<:q=\274jy\316\274\3372\256=\355=)=s\232\235\274\363I\243\274\322\200\213\274\314\234\271=\006\220\203=2;\346<\350\350`\274\253_]<\277\265\262=pN\370<h\304Q\274\207\276\036\275\367V\276\275=H\205\275o/O=\205\217\264\275\307\002\251\274\033\234\365:1\355\210=\037\256\372\274\312\332\257=\236t@=b\300\311<\207`\203=\025\371[=\230B7;\317\350\304\274\257\010E\273R\304\317\274\220\267m;s\364E\273\234\217\007\275\246\3246=\033\326C\275\345\"A\275\024s<\275 $\002>\010wH<\034\333\341\274\nz\256\275\304\257&=\253\262\327<\223_\235<\026l\211\275\306=7=*\037\272;\370\022\262\274q\220:\274\342\tT=|\216\340\274\236\332J=\366_#;\017\037 \275Y\321=\274\252\001\324<\335\253\264=~\030\234=\313\267\236\275\226\314\026\275^\340\205=\332\n\271;W\0361=i\330\366\274\342\272\257<\303\024~<\334\032\316\274\320\306d\274vA$\273^\316\013=\312\265A\275\315\304\225\274\017\232\257<s\326D<\372\231X<\363>\201=;\026$\274\023Sy=\345bo\275\315\002\201=\250\232}=\032\025O=iz\357=f\307\016\275I\256\007<\037\257*\274o\013\033=\346.\236<\377\204\001=\237\006\027\275\232K\315\274\343%\270\275\323v\311<\032\022\n\275z\265\000>\013\302\307\273K4\205\275\340\245\310<n\255T;\025\350\024\273\232\024\236\275\270\355\357\272\342\347\203\275Z\312-\274.r\252<\376|\314\274\354\342y<q\020\010=U\356\227<B\367$\2752b\201=\313\037\364<\365\271\367\274\030t\264<w\213\326<n\301\233=Q$\271\274v\317j=\376\335-9\340Vl\275\027\352\010=\306\271\274<\215\340Q\274p\304\235<\3616\234\273\275\240\225<CB\017=)\246\360\274\002z\332\274\261\321F\2746\207L\274\266&\\\275\246\212\253\275\222\334?=\3552\322=O\214\n\275\372!\007\275\356\367Q=\213)O=\317\322_\272\341\214V\274\225F\330<~y\200\275Z\177\246\272yD\324<Zn3\275u%\235=\364\227\373<\300\010\272<\021\250,=\211\377\227\274=)\253;\032\370J<7\270{=0Hu<\345\250\\<\320u\300\274\014\213[\275\225.8\274\233\265U<M\200\221<\352\2461\274P:\031=\236\3116=wpM=\275N>\274\205\036H=\331ja\275\366/\323\274\246E\234\274\357\031\223\274\003\031J:3\233\265\274[\252\220\273\005\353\371\274P\204\'\275.\271\'\273\374\341\374\273o\334\246<\367\323\212\275\304I\333;\271I~\275\352\350\350<<Da;\243\241\374\273\203\030\255=\320\272\237=f+N=\353\345I=\220\177\220\273\034[ \273\215n\317\274\265\326\013<\372\356x\275\225U\024\275&{\035<X}\026<\312\266<=\274\003B\275!\222R\275\004\265\366<o\272p9DI\245\275\375\367\251<\206\000^<\311\rT<oPw\275VZ&\275|\240\372<\226\266-\274\322$4\275\334\200\004\274}\257\026=\215\372_=\305\343\364<\235\340)=\305z\220\275@z\212=\332\354\365<f\216B\275\021D\020=\316m\023=\257\205^<\255y\265<FO\274\2743%D\274\177\310\203\275\320*\275<\036\226\374;\273R\206\275iL\271\2720*\037\274\211p\316\274i{\221<e+\021\274\320\211\234\273i\307K\274\r\275\313=\3212E\275\017\273\305\274\2440\026=\352[\206\275KL1<\227\000N\275\343.\276=@\374\255\273v;D\275\201\234\275\274\205\022\036<\272\330E\274\204%\245<\001\370\354\274D>\017\275:\231\n\273\030\002\313\2741s]\274\315\367\014:\"z\231\275\315\352p\275\227\260\037\275\224\277\241<\370L\n=\350\351]<Z\n\271\275\341\373\207=\326\212\177\275j\362^\2759\357!<+\007(\275\ryL=YwN\275\310~\262\274Xq(<|\362\223=\334L#=\2425\260\275!wv<\221\202\036=\363\261\212<x\325\350<\234\340B\275\377\267\2627\306\244g\275\221\254\027<\377\025\017\275\037\010X\275\t\230N\275a\010\337\274q\316\271=\0147}<4N}\274\003\177S\275eu\"\274^2\205;q\204\253\274=\275\207<U\r]<\267Q \275_g\202=\017\314\241\272\261\356\313;\300\232n=y]\272\275?\240/=\337<\316\273\375\265*<\001e\372\274\263\244\324=\251\004\322<JH\3748?\203q;a\007\'\275a\256)<\242\026\252<%\233M=OZ\342\274\035/+=y\334V<_\231\014\275\013\227\237=k\277\2169\037RM=\302\273|=\211?\032;gf\202=\2079\016=X\203\204\274\036\336\030\273\317B\302<W\277\037=R\207\206\275\265_\367<>\335k\274\270\372U\275\347q[\275\355\374\245\275N3\t</*a<x*\312:}]\277<\346\271O<\3723;=m\213\201=\\\343g\274\031\332Z\275\tv]=m\257\026\275\000\224F\2732\342\300=\274o\022=\305\220Q\273G\322\270=n\333\233\274UD\204\273\230\262\326\273\346s\306\274$\024_\274\376\000\3067A\0336<\037\'\027\274\310\301\346\274\242\251\212<:p\357\274\356\217.\273\236a{\274\266\2636\2758\2143\275_\371\026;\021:N\274\001\356\265\274\270r\207<y\261)\274\212\314\274<\232\265\260=9P\032\275\022\347\035\274\232\243\204\274_9F\275\370\022\014:\020\3436=\274n\235<B\262\265;\356-\267\275Qn\270\273\334C\211\274i\006\232\275\020\366\363\274p\006?\274\307\204\254=q\277\224\273aO\242\275JQT<@\314\217\273\274(\t\275\243\236\344<hQ\303;\346S\325\275h;\315\274\347\243\265:4\025\025=\247\007\252\273t\366\202\275\355\253\237\275h\2348<\3529o\275:c\340\273f\204\306\275{K\222\275S\350g\275\003pP<\342\375\207\274X\014\366=\033$\"<\254O\334\274\251\356\t\275;K\275;\006L\205\275N\327\";Q\225\360\274\n\204\207\275i\361\225<\332\222\212<\007[\016=\327\037\205=\261\221\327<8Q\371<7\346\035=+\324\325<\247\236\222=\324\246\345\274\304\217\205\274\217\267\033\275\310\360A<I\233\237=v?\202\275\rp\350<\245\225\274\274\r\314\271<k\245]\275\203al=\305\005\003=Fy\016=YY=\275\260\027\217=\037\'\203\275\244#\226\275\357\351\347\274\216\305 \275j\234\333;rbi\273\376\243\275\273\343\320\223<*,K\275\324\366y;\300\345!\275\240\340Z=\264Z\330\274\341_\201<\330\211\204\274\223\343\241<\356t\006\274\003\"p=\331\rG\275A\3340=\350\353\235\274\013&\253=4\333}=\340 \274\274\314\264,=e\021\247<\204\347\250\273\364{\224\275\220h-\275WKF=\'\305\354;\351\265\231\274\222\020\t=\2755\270<C\016\247=\247\212\314\273\275\365\214\274\263)\030\275\310\'\333:w\311\216=\'\323\201\275\317^\035\275\334y\366\273\374\351\201=\017\204&=/\223I=\"\262\272\274\232\\\200\2741\246z=\361\270;\275\304\302#\272\366\326\272\274[\352;\274\032\025Q\275\263\220\026<\2446 =-\035-\274/\231\257\274F\274x\274\301\366I\274\252\002z=\231\203]\274n\334\026\275p\020\222=\352\337\2759\246\232\235\274 \237\346\275\255\235\027\274\237`Y\275uf\316\274D3\252<C\256/;\325\"?\275qx\010<\243\332\t\272F@\275<t  <\323,\234<\335\032\026\2758\312\316;\374#a\275\2510\261\274\374\323S=\363\n\265\274H\023\350\272y\345\005\275\346\017\016\275\310\3152\273\340&\277;/\216\343=cr\310\275\354k\235\275\323\227\001\274>\016\221<(\217\350\272<\024\221\274`\204\017\273\003\001(=sX\005=\036\376\037<\214f\210\275\257\260\245=\236\036\032<\005\037>=;\326\021<w-\364< \232\030\276I6\002\275}\245\272=\245\321\036\275\346$h\275~\tr\274J\235m\275\331N\275;\005W\020\274\220z$\274\324\177\020=\227\256x\275\315\235\375\273n\276L;\322\277\235\273A 0\274\016\250\020=\352\355\346<\247\364F=\334\016\032=a+Z=\374)\331=\355\342\277\274\n\314\213=\334\301\232<*[p=\321/\367<\315\030\306=R\010\'=\302\227\200\274\037\035\377\275\330K8=\t\026(\275w\331W\275\265\247\220\275\027_\006<\274a\340\273\342\350\364<\001W\353\273}\250-:\'\203Y\275\357\277\020=\352\377\222\274SN\215\275\033\225t=\201\356\233<I\205\266\273\324\360\361<+r\222\274&\360w=\257o\344\274\320\220\213\275\342\273\214\275\254$3\275:\352\224\273\332X{\275F\205\367\274\363 \254\273)I\216=\272Q\233=\260\3547=nh\276\275\257\245\023\275\033\200\320;\302eU=\204\271\226<\214\\\212\274&\021\n<\225H?<\377\343\000>M\t\r\275==,\2743\013\031\275\235.\010=0\316-\2731\256\217\2756\027\244<3\307\033=\204(\267\274\273\271\241<\363\001\005\275F-F<\230/\r\275\025\371\362<a\252\370\274B%\244=^\334\010\273\220\354\375\273\370\354\010=\204>,\275\321\306\201=\252\211\241;[hl\274\022?R\274\376J\r\2747\340G=\220\213\230<*JU=^d\236<\326\300\360:\373\272\031\275\231\374+<\n\370s=\261\377\212\274\321\311\005=\311\360T\275\0326\223=\205\264\277\275\222a9\274\211\350\210\274\340S\005=\202\304\017<\0275\002<E\337U=\322(\302<\370c\007\273\261\202T=$l\367:\264\246w\275\252\225\264\275\365\264\205=\027O\006\274\252\313q=26R<\027;\325\274\344\254k\275`{\204=\275\313\243\273\201\260\235\274k~j=\204i\231\275\225\232\367\274_\217c<\255\363\004>\274h0<\270i\341<T\203:\275\332\257\211\275\370*\302\274#C <\372\002\014\275\035F\035\275S\320s\273\357|\242\275\240\230r\275\376\315\362\273\374n\027\273\236\271\275<%\224\363<\0048\201\275\216\212R<\375h\317\272\242\352\037=y\276\000;\304P\351\274\257\262\207=T\336\237\274%\0051:\221\275N=k)C=p\260\327=\361\246\320\273\334\267v\275l\232\373\274\213\327\022=\030\2075=\271\016\357\274WR,\274\317@\310<\206le=\315\222\262\273\274\224\202=@\232\023\275\271\263\250\273j65\275\364\200x\275\023@\030\275\313P`\274\364\277\372<\376c\321\274\300\367\235=\347\207!=\242\036\205\275l\220\330<\205\205\003=\207\216\025=\024\364\301\274\364\177\217\275\233\307\322<#-:\272\017y]\275g\320.;\362\016\234<!Na\275\026\335-=\270!\363\274;Wu<\245\377\270\274EH\031\275C\331\271\274X(\275=9\301\334<\237\352+\275\235$\243<)\242\t=\356K\334;SJ\004<=\341\\\275\307\331?9\365\342\342\274\272\t\217<\350\2506=\367\2721:L\244\256<\266\214\312\274N\314\327\274\002;\242\275\327G\314\275\312\210k\275\010\200\201\275q\335\367\275\312\306/\275\277\006\261<\341\224\232\274\273\'_\275\352\r\303<\261S\240=`\272\217\274\"\020\231<\304\227\375\274\353\265\'\275\2507\365<\216\353\206=\254@^<m\013\234=\020\\\206\275;)\256\273CL\235;;~f=\013p\243\275!,\234<\207I\303;<j\323<r\216\022=\306$\204\274V\031\016\275\317\324\367\275\254u\014\275\255%\204<\n\260\201=\271\023\324\274\207w\250=\006\252\222\275\206\242`=\307\262Z\275\367\2349\275.~\220=60\000\274\241\n(\275%q{;\335\267\010;\013\305\302<?8\265=\365\024\206\275g\014\313\274\243\335\363\274}\270\256\274\371\225\214=\275\302!\275u\211\256<m\321\033\275YqN=\342I\357:\246m\242\274\302\306\362\274\375\3201=\305\021W\275n\2159=\371\264\200\273\334\320\220<\337\273\300\275X\t6=\\n\300\274\025eY:\010\371\211\274\262\313J\274=\221o=\205\251\236\274\351\250\361<\325\2122\275\0054\215\274\245\303\250;\237\000\301;\242\330\214=O\2177\275\355\333h<=\361\224\274\ti\246;\253\300\245=\023\354#\275g\373\303\274\017\340\236;\253\225x\274\347\210\221=\353c\235=\2436^\275\"\207\336\273\327yw=\235\027\037=1\357\252\274\021\007\034\274(\327\317<J,\324<z\334F\274\177+\240:\022\016\326\274\225F\313\274\323#\036\274\264\023\302\273\005\365\241<e\300\203=\346\324\r\275\234\0265=\311,/=\245L\033\2738w\351<\362\220$=\354j\004\275N\177\212;\307E^\275*0\366;P\233n=\372\337\373<\366\255)<~\310@\274R~\307\275\306e\034=l\001<=l9\210;-$4\274\224$g\274\370y\243=\267\000/\275\216\305<\275\n\314p=\255\3361\275\270\330\"=w\254\254\272\340F\035=\220\340v=a\244\r=\323K\366\274n\322\306\2757>r\275/T\2438\234\217\225\274\032\013\016;Z\276A=\267\025==\205g@\275\203\372,\273\272\336\242\274\356I\305\2742\306\230\275\342\211\374;\365&|<`\370\217<;wA=B\350c=X\010\310\274\207\304\014;\351\364O<a\3376=\323&\210\274J\325\230<\251r\246<RL\344\273%Y\034=\346|u\275\313\365\355<\376\324\232\273\305DZ< \214\201\275u\256\031\275\336\232\270\275\221k\262\274\017VA\275%\\l=\267 X\275v!\014\273\336\254Q=Sm\020\275\007C2\274l\366*=\002h\267\275\360\270\322<\374\350|=\233\334\022\275\256x\037=p\205\350<\254\220g\274\010\231\237\275\301\244\207\274F\310\022\275\265\370\224=sP\223\274\341\342\263=\377\357\343;\346P\304<\243\371\216<\310uD=\233\001\001=1\223l\275l\352\010\275\020\231\317=VC\343\274\002=\n;9\310r=J\237\017;\r\256\344\274\315\304\300<\267\253\257\274\270cR=\363\371m=\005\352\302\273\330\237\244\272}\002c\274\347\251\255<\227*6:?\356n=\365\260\006\274\366\253O;\232\021\213\275\371\020E=\214\245!=\325i*\275\241\305g\275\010|\220\274\272\033[;\211\030&=\372M\257\275\220\345\335\274\024\275R\275\003c$=M\206N=\252z1\275\257\306\265\274\270Uo\274\307e\357<\006\256\022=\265\025\273\275uj5<VHW=\274\001\313<\377\274\225\273\271\367:;r\302\\<\027\217\266\275\303\264j=sz\233\273\340\245\273<\231<\005\2758\0278\275\243Z!\273\025\321c\275[\225^\275\213\014\265\275\244\244\260\274\331\266\n=\t3\303\274\273\216U<\321`E=\023=\272\275\235\215\264\274Vm\367<\306\276\237\275\007\274r;\241\205\345=\331\037\375<\0317\206=\350\372\001=\366\352P\274\245\353R\272\275\203U<\303F\357<\350\024\202<g\311w<T\324A=g[\354;\231i\244\274?\303\225\273\001E\020=89\247=\250\000M=\036\231\026;fw`\275*h\267;\2449\210\274\357\336\031\2732\337n<I\340\017\274\024\253\325<#\002\037\275\200\013.<\020\227d=)\211\032\275y\033\334\274\373\340\216\275\236[\321\274\250\224|\275\343\203\265\274|\234\255<\270\313O\274\355~\353\274\025\320*=\033\377\255\274\002C\010=}\020\301\27549\373\273q\201\220=\214\325\254<\314\017\203=\261\t\307\274\02592<\027\235\201\274\327\027\201=\356Jt<\221$]=\304\362\255:\322\221\002=<\027\214:j\245\313<\353\373\246=\265\337)=ao\215\274\031O\022=\016\230X\275T#\306\274\264\2254\275\264B\343\273\000\375\025=\333\360{\275\323\274\213=\212\255\363\274!\245\001\276\364\205\267<D\370n<\371\226L=\255\220%\274\222\223\206=7)\003\275\205\227Y\274l\217\302;\370E\240;\254P\324<Z\371\242\274\177\232==\005\246\340\274{d\021\2757\342J\275JO\251;x F\275|\002\242<\203\200g\275\376T,\275\233\027F\275\224Cc=\233\336e=\263\213\245<Q\233*<\225\371\232<pi\221\275Y<\214=TZ`\275\221a\201=\374Z\272\274%\037t<\310\342\373\272\226\373\241\272\300\306x;\037\037\242\274\305d\201=\351\034\272=.E\244<\254p[\274\222\240\364\275f\001y<Y^\003\274a\272\234\274\234BT\275\2507\273=c\2109<\021\035{\275\315f\316\274\246\311\245\275\2674\'\275z\261\235<\226>\000=%\003H<\273\304\204\274\264\303\3718ifI;\266_0\275\033}\n\273\"PU<F>\234=2\002\n\275\247t\216<\n\362H\2742\204\273<\274\253\224\274\001\231-=\350\226\010=\354N\311;\016zk\274\232\270\264=\264\177\313<\240\2204= .a=\356\355\267\275\r_{<\324\301\007<~\207\263<}R`=\342\254\025\276\221\332\235=u\310E\274\201\316\232<e\361\320;\232\214\307\274qL\221\275M\267\216<x\263\210=\2323\360\274V`\030=\264\330\225\274\370;)\275\216\025N\275D(\267=\010\261|;\274?\003\275\204\002K\2733A\354\274\245\201\\\275\211nK<\343\0320\275\366\034\304\274uv\242\274\355#\265=>\244\340<8|V=8xq;\200\331\004<0\311\207\274\376\346\t=\005\331\243\273%3\202\275x\tG<\360\344}=\252\321\203\274\"]\206=\214!T\275\263\270,=[\272:\275\212\032\215\275OZ~\275+\324f\274\355*\344\274`\224\317<\247\212\004\274n=1=\224\317\242\275)\034o\275\033yQ=\222\344\246<F\331\007<\363\274$\275\275\3044\275\273\037\023\275\224O\006=\220\024\336\274\003\206\330<\002\313q<|\364o=\000O\334=$\350\271\275o\002\010=>\341~\275v\215P=\241\306A\275[\n\n\275\2114\177\2748(\237=\350>H=+\304\247\274.\263\221=\260\304\204<\256\235$\274*\324\276\275\371<\223<`\030\023=\005\320F\274 \225i\274C\323\026\2756\215?=\304_\215\275Y\265\245=I\373H<\306\r\301\274\326_\336\2749\3755=\253Z!\275\355\243i\275\203\324\220\2750]\246<\315\036\224=3L9\275\231W\256;\274i\r<\217\035\000=w9\004<[\302\271\273\007\307+=\362:}<\367\357\215=u\212\021=\345\\\212;\225`O\275%9(=\205\205)=\330\257R\274\221z\022=\242B\361\274\274\2170\2758\336\265\273\245O\373\273\02198\275%]\236\273\223\014\037<&\030\013\275by\000>x\337\203\274P\310\355\273\263\005/=\033b\367\272$(\244\275\331&\001<R\274@;i=\355\274\272\332n=Y\341X\275\007\277e=BDq=OEu\275\352\350#\275GP\200<\002\035,=\276)f\274\251#\375<\022S6\275\327\206\224\275;i1=\377\323e\275\277[\310\275\013W\361\274\306\332\364\272\2203\341<E\346\014=\026\317\202<\032\013\301\274+\014@=\274\265{=} 8\2752\240\036<\302\302\305<\"\002~\275c{\327\273\002\216\250;jK\353;\260,\035\275\251\376\206\275\316NH\275\025\344\221=\245\3361=\244\347c=\354/\315\274\352\336u\271\215\257\033=\207\334\261=\226\344\222<L\033\356\274\325\354\374\274SK\006\2737\334K\275j#\332<7Ub\274(\344\314\274$W\022=\243\177`\274\354K}\274\3338Z=)\200Y\275J\276\200<o\025:=\373\204\310\274\267\345\177\274\255\203q<\324\370H=\237y\205=\276\326f<\2613\337<\335\242\305\274\013i8\273\314j\221\274$4\223\275td\242\274iz\204\275\336\322\245<\223\365\332\274\203\331\005<h\340\014=T\336/<\307`|=/:\332=\270\326\t<\033\322\321<\251\324\241<\316\221[=\017\016\334\274\003\353>=\222\317\004\276\217Mx=C\026~=\222\202\225<\3406\230\275*\217\253\273\206\344\035\275\213\202\227\274\377\360\206=\212\223\345\273?\346\301<c\347\216\275\023\271g\275\272VR\273\244\022\"<\211\372\177\274\002^\007\274\374=\243=\"\261\277;*cV\275Sf\304<\034\235\361\274\254\203\204=F\375&=\003*\371<\310a\327<a\224\"=\324\364C;\366<\"=V\376\254=j\262O;6\305\014=&\235\257\274\355c&=\223\272\332<\001\207Q\273\305p\353<\266\037\031<i\3373\274\206\031O\274\250\365*\275\223\331\217\275\232\325\222=\212\300\017\275\"/X=\377\\\034=\223<,<\223\305\307;\210\365\237=\014\307I\274\177\220}\275Wf@<B0\313:\305\0277=\345\023b\274\275Z\020\275\271\360\301=9\034\262\273h\365\007:_\263U=zx\375;\017\002-\275\377\233V\274\202D?\275y6)=NO\203\275\205\223\274\274\214\323\323\274\'P\217\274\2149\227;m\247M=X!\021<\276t\220=Q\223\210<0\326\213\275\226\"\220\275x\025\251;\250\271\t\274?\014E=`\275\377<\265\010\204=i\0175=/\271\024\275M\023>=&\2257\275c((\275\253\350\n\275\324b\200\275\247\311g\275*)\036\273\271D\234=\232\202\310\274\377\211\205\274\026\010\006\2751\343\256<L\243V\275e\307\010=\373\022\207\272\024\016T\275\340\333+=n\272b\275\037\2238\275\004;\314\274\035&\203<X\372b;U\205\034=\262\243\013\275_.\236<dp\201<\226=M\275# \342\273\\\263\253=\032\375\222\273\252W*=\nl\262\275\313H\325\274v\271_\274\240\242Y\273F~\221=\r\0201;\025\207\305<\256\016&=\223\332\345\274\362\027\373\274\37344\275\005\030\237;#\335\333\274\264\213\343\274cu\3439\325\316,\274oM\216\274\213\376w=\222R\363\27427\342<M\370\023=7<1\274\027\030\325\274\335x\254\274\267k\226\274\236\032\265<>B\226;\231m;=N\370\033\275/t\241=\362\226\370<\374Q\233:)yn\272\003%\311\274\274M-<\001\002*=^:A\274\240-m\275US1\275\376\342\354\274\311\263W\273\364\307\330\273n(O=\231\371d\275\341/@<\260\261H\275j\n\330\274\364}\223<\215X\300=\214\360\277\274\241\377l\275\300\354\t=&\206j<\301eW=\315^\t\275\307@\337\274IO\273\273\023\n\217;i\303\347\274\233,\013\275\231\313\006=\270\346\020=\201#\303;\272\016/<{\270\337\274\301\027k\275.#\216;\n\3239=^\316\017=\300CB\274\274XK9<\2210\273\275\322\234\275\177\323\331<\301\271\007\275J\255==5\205\242<\215\035\353<\316\nx=\3474\205\275\2048%\2755\236\323<\266\227\204<i6\215\275uBF<\243\313\231\274\0257\270\274\005D\243\274\263\031\211</\254;=1\264\203\274\372\200j\274\236q\370<\377\264\231\274\005M\346\274k\344\026=\2401\264\272\035L\026=!1\030<$\376\241\275\251\210?\275a\354C<\000\341\317=S\245%=\021\233\013;&\274\n;\350[8=\245\302\017\274\'\227\231<!\027\325\2756h\251\274H{\010<\302\304\364<\247\337C\275\021\360\206\273C\266\203\274\270y$\275\'\3125\273\255\263k\275\365Z\326\274\027F\327<\0308\263\273\261\2610\275s\2210\275H\024?\273\036\231I=\365u\305\274\014\340x<!F\233=\214\036Z=\001\322\027=?\367\027<\351r\232=\236\202\025\275\324\3728=\253\312i:V\240\355<\366IX\274\\\005\215\274\344&\277\275G\205\206<\002BK=\356\262\365:\022\334\262\274\3065e=\334aY=\3637\315<;\313\245=\376=\216\275\261Q\251<&DB\275\320\365==\266\316\021=\354\3174\275B<Q\275To\263\275\274\0033=\367\254\225\274{\331J\274S<\271\275\304\223L\2751b\242\275\027\370(\275~\204f\275vp\317<\201\232i\275<\3303=\263P\222\275+\260\322<\243\236X\275\022+\241=rj\366<\301\023\314\272\027\235|;\016\261I\275\243)\246\273\276Gt<\003\315\014<G\326V=\304Y\205;;\213\367\272\372\375\r=O;<\275fX<=\335\360\313\273HLX=d\017R=\353\027&\274J\247\006\275\241w&=\0171\007;m0(=\250K\014=`\371\362=\226\251\025=\312\231x\275\264N\002=7\251\032\274E\220z\275\342\231L\275X\300\034=\035E\273;M\025\230: \"E\273\005+\362=\316\326:=*\371\262<o\367\\\275\257\036V=,\212\306\274\224!\210\275<\273\260\274\354\231\202;E\304\236\273\203^==\315\232\361\274+h\023;i*%\275\376D\266\275}\3377\274Y\220+\273\000z\206;BG\270=U_I\273%@\203<x\2542\275\303\260\356<\223N\262\275r\t\322\275G8\211<}d\025;\235\001\366<\312\275\335<\252\333\331\274\212 \265\274ZA9<\366\237o=L\267\007<\203\tc\275V\246\207\275G8m\275\327<?\275\354$\002\275[\2743\273\024\347\202=}h==/\317I<\300\340\276\272\177#\326<\316\212X=Y7\223;\233\202\226=ioU<\022<\307<gE\312:\312\341\227=\376\017\211;\035\322\035\274gs\213\274aFD=\022\375#\275\344Q_\275ru9\275\036t]<f\'\254=\2568\t;\023\333\206<*B\201\275\316\201\203<\211\010\325=\271e\016\275y\302\355<\350W\220<\361\0207<d0$=\256\234\260\275\353\036J\275\266O\272<\342\024N=\234:=\273\270@w<\225\367i=\253\366e\274\206(d\273\203\320\206\275UT`\275\007g\r\2745\004\347\274\005\220\332=\306\r\345=\210\201\277\275#\275&\274i\253\336<\177:\252\275\177c\273\275\025\356D=\260\215Q=\231\234\246\27519\367</B\322<\304\036R;\003\3177=\340\331\205\2739\2506<\025\354E\274\260/\313\273P-\000<\237(\233\272&E\337<y\367\245\275p\347\344\274\322\017(=\301\013\020\276\320u[\275\334\235\025\275\023h\213<\246\302w<w\251\333\274\360SV\274p\365\022=\257\351\263\2753\366\237\274L\271\017=\001\005\274\274\254O);rm\320=EKG\275_Z\274=\232\353Y=T\340\223=2\224\026=\376o+=#\344q<\254\363\353\274@|\030\275hT9=a\346\002\275\331\014\256\2740 {=\315@_\275slT=\340(\330\274\271\314!\274\217 \027=\263\232x\275&PU=H\034\230\275\n \212<|D\305=\261f.\274\274\374\276;\212oW\275b\300*\274\243$\340\274\2539\370<\311u\206=\251\231\345\274,\315K=\370C\250\274\322\253\354\272\372\241B\275\030v\343\273\271\240\222<\354\\\360;\265\3543\273;\255M\275.\254\"\275f\tA=8\254p;\215\341\315\274\20190\274\263W\t\275:\362\017=Q\276\200<\364\370?\273Q\267!\275\374\335\354\273$\231\223=\003\251\225\274\344)\210<\226\036%\274\016l\350<\220\216\330\274~%>\273\202\202\034=jHe=a\205\206\275cN\270\275\211V\327<\200\235+\275\210\310\301=\207\257\306\275\263\314\262\275\261\224\025=I\337\322\272\375\371=<B\017\311:\305\325\225\273\241\027\362<\211\3220\275u\276x=g\316\373<\253\203\210\272DT\020\275\251t\372\274E\306C=Oi\177\275\335\026\364;\340\245\376;\013\000\016=\367#\207\275x\346\216\274\223\230\r<\025\372\251<\230\272\276<\030\023Q;T2\032<\361`\201\275s\273\213;\0337\254<\034\314\330\273\364\325*\274\271cE=\251\320\307<\032\"x\2723\t\"\275\334\350b<\353\035F=\216\210\230=%\245\321\273i&\226\275.\250\320=\250y\351;\027?a\275\2468\030<\271\364\n=\000fm=T\023\304<\007\031\036=\354{\353\274\034#\035\274.:P<\020R\313<\237\216\225<\325S\216=8\276\303\273\014\321M<\213\306\323=\225\247\t\274\027\231\242\275\366\235\344\2758\017\r\275N,\276\275\n\\>\274/[\206;m\243\346;\250\224\036=\341\303\\=\026\230B\274\334`\270\274\214Jr\275\274w)\274\2625o=\203et\275\327P=<\331\223\t=q\340V\274qL\276\275\326\200\246<\027\377_=8!\317\275F\321\361=\0143\003<<\361\233<K\372\270<\235\326\230<\235\343\201\274\203\346\245<\236\323e<\021\370\207\275\222\302\035<\213\342q=\374\214\352\273\331\224\274<)\253l=\357(\210="
      }
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "lstm_1/recurrent_kernel"
  input: "lstm_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/read"
  op: "Identity"
  input: "lstm_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "lstm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/concat"
  op: "ConcatV2"
  input: "lstm_1/Const"
  input: "lstm_1/Const_1"
  input: "lstm_1/Const_2"
  input: "lstm_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_1/bias/Assign"
  op: "Assign"
  input: "lstm_1/bias"
  input: "lstm_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1/bias/read"
  op: "Identity"
  input: "lstm_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice"
  op: "StridedSlice"
  input: "lstm_1/kernel/read"
  input: "lstm_1/strided_slice/stack"
  input: "lstm_1/strided_slice/stack_1"
  input: "lstm_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_1"
  op: "StridedSlice"
  input: "lstm_1/kernel/read"
  input: "lstm_1/strided_slice_1/stack"
  input: "lstm_1/strided_slice_1/stack_1"
  input: "lstm_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_2"
  op: "StridedSlice"
  input: "lstm_1/kernel/read"
  input: "lstm_1/strided_slice_2/stack"
  input: "lstm_1/strided_slice_2/stack_1"
  input: "lstm_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_3"
  op: "StridedSlice"
  input: "lstm_1/kernel/read"
  input: "lstm_1/strided_slice_3/stack"
  input: "lstm_1/strided_slice_3/stack_1"
  input: "lstm_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_4"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read"
  input: "lstm_1/strided_slice_4/stack"
  input: "lstm_1/strided_slice_4/stack_1"
  input: "lstm_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_5"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read"
  input: "lstm_1/strided_slice_5/stack"
  input: "lstm_1/strided_slice_5/stack_1"
  input: "lstm_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_6"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read"
  input: "lstm_1/strided_slice_6/stack"
  input: "lstm_1/strided_slice_6/stack_1"
  input: "lstm_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_7"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read"
  input: "lstm_1/strided_slice_7/stack"
  input: "lstm_1/strided_slice_7/stack_1"
  input: "lstm_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_8"
  op: "StridedSlice"
  input: "lstm_1/bias/read"
  input: "lstm_1/strided_slice_8/stack"
  input: "lstm_1/strided_slice_8/stack_1"
  input: "lstm_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_9"
  op: "StridedSlice"
  input: "lstm_1/bias/read"
  input: "lstm_1/strided_slice_9/stack"
  input: "lstm_1/strided_slice_9/stack_1"
  input: "lstm_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 384
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_10"
  op: "StridedSlice"
  input: "lstm_1/bias/read"
  input: "lstm_1/strided_slice_10/stack"
  input: "lstm_1/strided_slice_10/stack_1"
  input: "lstm_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 384
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_11"
  op: "StridedSlice"
  input: "lstm_1/bias/read"
  input: "lstm_1/strided_slice_11/stack"
  input: "lstm_1/strided_slice_11/stack_1"
  input: "lstm_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/zeros_like"
  op: "ZerosLike"
  input: "lstm_1_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/Sum"
  op: "Sum"
  input: "lstm_1/zeros_like"
  input: "lstm_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "lstm_1/ExpandDims"
  op: "ExpandDims"
  input: "lstm_1/Sum"
  input: "lstm_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/Tile"
  op: "Tile"
  input: "lstm_1/ExpandDims"
  input: "lstm_1/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/Tile_1/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/Tile_1"
  op: "Tile"
  input: "lstm_1/ExpandDims"
  input: "lstm_1/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/transpose"
  op: "Transpose"
  input: "lstm_1_input"
  input: "lstm_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/Shape"
  op: "Shape"
  input: "lstm_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/strided_slice_12/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_12/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_12/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_12"
  op: "StridedSlice"
  input: "lstm_1/Shape"
  input: "lstm_1/strided_slice_12/stack"
  input: "lstm_1/strided_slice_12/stack_1"
  input: "lstm_1/strided_slice_12/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_1/strided_slice_13/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_13/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_13/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_13"
  op: "StridedSlice"
  input: "lstm_1/transpose"
  input: "lstm_1/strided_slice_13/stack"
  input: "lstm_1/strided_slice_13/stack_1"
  input: "lstm_1/strided_slice_13/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_1/MatMul"
  op: "MatMul"
  input: "lstm_1/strided_slice_13"
  input: "lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/MatMul_1"
  op: "MatMul"
  input: "lstm_1/strided_slice_13"
  input: "lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/MatMul_2"
  op: "MatMul"
  input: "lstm_1/strided_slice_13"
  input: "lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/MatMul_3"
  op: "MatMul"
  input: "lstm_1/strided_slice_13"
  input: "lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/BiasAdd"
  op: "BiasAdd"
  input: "lstm_1/MatMul"
  input: "lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_1/MatMul_1"
  input: "lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_1/MatMul_2"
  input: "lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_1/MatMul_3"
  input: "lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/MatMul_4"
  op: "MatMul"
  input: "lstm_1/Tile"
  input: "lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add"
  op: "Add"
  input: "lstm_1/BiasAdd"
  input: "lstm_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/mul"
  op: "Mul"
  input: "lstm_1/mul/x"
  input: "lstm_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/add_1"
  op: "Add"
  input: "lstm_1/mul"
  input: "lstm_1/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/clip_by_value/Minimum"
  op: "Minimum"
  input: "lstm_1/add_1"
  input: "lstm_1/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/clip_by_value"
  op: "Maximum"
  input: "lstm_1/clip_by_value/Minimum"
  input: "lstm_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/MatMul_5"
  op: "MatMul"
  input: "lstm_1/Tile"
  input: "lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add_2"
  op: "Add"
  input: "lstm_1/BiasAdd_1"
  input: "lstm_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/mul_1"
  op: "Mul"
  input: "lstm_1/mul_1/x"
  input: "lstm_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/add_3"
  op: "Add"
  input: "lstm_1/mul_1"
  input: "lstm_1/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "lstm_1/add_3"
  input: "lstm_1/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/clip_by_value_1"
  op: "Maximum"
  input: "lstm_1/clip_by_value_1/Minimum"
  input: "lstm_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_2"
  op: "Mul"
  input: "lstm_1/clip_by_value_1"
  input: "lstm_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/MatMul_6"
  op: "MatMul"
  input: "lstm_1/Tile"
  input: "lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add_4"
  op: "Add"
  input: "lstm_1/BiasAdd_2"
  input: "lstm_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Tanh"
  op: "Tanh"
  input: "lstm_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_3"
  op: "Mul"
  input: "lstm_1/clip_by_value"
  input: "lstm_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/add_5"
  op: "Add"
  input: "lstm_1/mul_2"
  input: "lstm_1/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/MatMul_7"
  op: "MatMul"
  input: "lstm_1/Tile"
  input: "lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add_6"
  op: "Add"
  input: "lstm_1/BiasAdd_3"
  input: "lstm_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/mul_4"
  op: "Mul"
  input: "lstm_1/mul_4/x"
  input: "lstm_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/add_7"
  op: "Add"
  input: "lstm_1/mul_4"
  input: "lstm_1/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "lstm_1/add_7"
  input: "lstm_1/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/clip_by_value_2"
  op: "Maximum"
  input: "lstm_1/clip_by_value_2/Minimum"
  input: "lstm_1/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Tanh_1"
  op: "Tanh"
  input: "lstm_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_5"
  op: "Mul"
  input: "lstm_1/clip_by_value_2"
  input: "lstm_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/TensorArray"
  op: "TensorArrayV3"
  input: "lstm_1/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "lstm_1/TensorArray_1"
  op: "TensorArrayV3"
  input: "lstm_1/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "lstm_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "lstm_1/TensorArrayUnstack/Shape"
  input: "lstm_1/TensorArrayUnstack/strided_slice/stack"
  input: "lstm_1/TensorArrayUnstack/strided_slice/stack_1"
  input: "lstm_1/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/range"
  op: "Range"
  input: "lstm_1/TensorArrayUnstack/range/start"
  input: "lstm_1/TensorArrayUnstack/strided_slice"
  input: "lstm_1/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "lstm_1/TensorArray_1"
  input: "lstm_1/TensorArrayUnstack/range"
  input: "lstm_1/transpose"
  input: "lstm_1/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/transpose"
      }
    }
  }
}
node {
  name: "lstm_1/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/while/Enter"
  op: "Enter"
  input: "lstm_1/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Enter_1"
  op: "Enter"
  input: "lstm_1/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Enter_2"
  op: "Enter"
  input: "lstm_1/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Enter_3"
  op: "Enter"
  input: "lstm_1/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Merge"
  op: "Merge"
  input: "lstm_1/while/Enter"
  input: "lstm_1/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Merge_1"
  op: "Merge"
  input: "lstm_1/while/Enter_1"
  input: "lstm_1/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Merge_2"
  op: "Merge"
  input: "lstm_1/while/Enter_2"
  input: "lstm_1/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Merge_3"
  op: "Merge"
  input: "lstm_1/while/Enter_3"
  input: "lstm_1/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Less"
  op: "Less"
  input: "lstm_1/while/Merge"
  input: "lstm_1/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Less/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/LoopCond"
  op: "LoopCond"
  input: "lstm_1/while/Less"
}
node {
  name: "lstm_1/while/Switch"
  op: "Switch"
  input: "lstm_1/while/Merge"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge"
      }
    }
  }
}
node {
  name: "lstm_1/while/Switch_1"
  op: "Switch"
  input: "lstm_1/while/Merge_1"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "lstm_1/while/Switch_2"
  op: "Switch"
  input: "lstm_1/while/Merge_2"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "lstm_1/while/Switch_3"
  op: "Switch"
  input: "lstm_1/while/Merge_3"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "lstm_1/while/Identity"
  op: "Identity"
  input: "lstm_1/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Identity_1"
  op: "Identity"
  input: "lstm_1/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Identity_2"
  op: "Identity"
  input: "lstm_1/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Identity_3"
  op: "Identity"
  input: "lstm_1/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_1/while/TensorArrayReadV3/Enter"
  input: "lstm_1/while/Identity"
  input: "lstm_1/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "lstm_1/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul"
  op: "MatMul"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "lstm_1/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul_1"
  op: "MatMul"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "lstm_1/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_1/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul_2"
  op: "MatMul"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "lstm_1/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_2/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul_3"
  op: "MatMul"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "lstm_1/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_3/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd"
  op: "BiasAdd"
  input: "lstm_1/while/MatMul"
  input: "lstm_1/while/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_1/while/MatMul_1"
  input: "lstm_1/while/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_1/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_1/while/MatMul_2"
  input: "lstm_1/while/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_2/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_1/while/MatMul_3"
  input: "lstm_1/while/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/while/BiasAdd_3/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul_4"
  op: "MatMul"
  input: "lstm_1/while/Identity_2"
  input: "lstm_1/while/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_4/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add"
  op: "Add"
  input: "lstm_1/while/BiasAdd"
  input: "lstm_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul/x"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/while/mul"
  op: "Mul"
  input: "lstm_1/while/mul/x"
  input: "lstm_1/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/add_1/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/while/add_1"
  op: "Add"
  input: "lstm_1/while/mul"
  input: "lstm_1/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Const"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/while/Const_1"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value/Minimum"
  op: "Minimum"
  input: "lstm_1/while/add_1"
  input: "lstm_1/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value"
  op: "Maximum"
  input: "lstm_1/while/clip_by_value/Minimum"
  input: "lstm_1/while/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/MatMul_5"
  op: "MatMul"
  input: "lstm_1/while/Identity_2"
  input: "lstm_1/while/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_5/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add_2"
  op: "Add"
  input: "lstm_1/while/BiasAdd_1"
  input: "lstm_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_1/x"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/while/mul_1"
  op: "Mul"
  input: "lstm_1/while/mul_1/x"
  input: "lstm_1/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/add_3/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/while/add_3"
  op: "Add"
  input: "lstm_1/while/mul_1"
  input: "lstm_1/while/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Const_2"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/while/Const_3"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "lstm_1/while/add_3"
  input: "lstm_1/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value_1"
  op: "Maximum"
  input: "lstm_1/while/clip_by_value_1/Minimum"
  input: "lstm_1/while/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_2"
  op: "Mul"
  input: "lstm_1/while/clip_by_value_1"
  input: "lstm_1/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/MatMul_6"
  op: "MatMul"
  input: "lstm_1/while/Identity_2"
  input: "lstm_1/while/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_6/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add_4"
  op: "Add"
  input: "lstm_1/while/BiasAdd_2"
  input: "lstm_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Tanh"
  op: "Tanh"
  input: "lstm_1/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_3"
  op: "Mul"
  input: "lstm_1/while/clip_by_value"
  input: "lstm_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/add_5"
  op: "Add"
  input: "lstm_1/while/mul_2"
  input: "lstm_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/MatMul_7"
  op: "MatMul"
  input: "lstm_1/while/Identity_2"
  input: "lstm_1/while/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/MatMul_7/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add_6"
  op: "Add"
  input: "lstm_1/while/BiasAdd_3"
  input: "lstm_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_4/x"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/while/mul_4"
  op: "Mul"
  input: "lstm_1/while/mul_4/x"
  input: "lstm_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/add_7/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/while/add_7"
  op: "Add"
  input: "lstm_1/while/mul_4"
  input: "lstm_1/while/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Const_4"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/while/Const_5"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "lstm_1/while/add_7"
  input: "lstm_1/while/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value_2"
  op: "Maximum"
  input: "lstm_1/while/clip_by_value_2/Minimum"
  input: "lstm_1/while/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Tanh_1"
  op: "Tanh"
  input: "lstm_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_5"
  op: "Mul"
  input: "lstm_1/while/clip_by_value_2"
  input: "lstm_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "lstm_1/while/Identity"
  input: "lstm_1/while/mul_5"
  input: "lstm_1/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "lstm_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/add_8/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/while/add_8"
  op: "Add"
  input: "lstm_1/while/Identity"
  input: "lstm_1/while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/NextIteration"
  op: "NextIteration"
  input: "lstm_1/while/add_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/NextIteration_1"
  op: "NextIteration"
  input: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/NextIteration_2"
  op: "NextIteration"
  input: "lstm_1/while/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/NextIteration_3"
  op: "NextIteration"
  input: "lstm_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Exit"
  op: "Exit"
  input: "lstm_1/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Exit_1"
  op: "Exit"
  input: "lstm_1/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Exit_2"
  op: "Exit"
  input: "lstm_1/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Exit_3"
  op: "Exit"
  input: "lstm_1/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "lstm_1/TensorArray"
  input: "lstm_1/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/range"
  op: "Range"
  input: "lstm_1/TensorArrayStack/range/start"
  input: "lstm_1/TensorArrayStack/TensorArraySizeV3"
  input: "lstm_1/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "lstm_1/TensorArray"
  input: "lstm_1/TensorArrayStack/range"
  input: "lstm_1/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 128
        }
      }
    }
  }
}
node {
  name: "lstm_1/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/sub"
  op: "Sub"
  input: "lstm_1/while/Exit"
  input: "lstm_1/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_1/TensorArray"
  input: "lstm_1/sub"
  input: "lstm_1/while/Exit_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/transpose_1"
  op: "Transpose"
  input: "lstm_1/TensorArrayStack/TensorArrayGatherV3"
  input: "lstm_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.125
      }
    }
  }
}
node {
  name: "lstm_2/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.125
      }
    }
  }
}
node {
  name: "lstm_2/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "lstm_2/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 558461
    }
  }
}
node {
  name: "lstm_2/random_uniform/sub"
  op: "Sub"
  input: "lstm_2/random_uniform/max"
  input: "lstm_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/random_uniform/mul"
  op: "Mul"
  input: "lstm_2/random_uniform/RandomUniform"
  input: "lstm_2/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/random_uniform"
  op: "Add"
  input: "lstm_2/random_uniform/mul"
  input: "lstm_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_2/kernel/Assign"
  op: "Assign"
  input: "lstm_2/kernel"
  input: "lstm_2/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_2/kernel/read"
  op: "Identity"
  input: "lstm_2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/kernel"
      }
    }
  }
}
node {
  name: "lstm_2/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
        tensor_content: "97\025=v\230\021\275\325\376\267\27565\002<ZC\272\275\231Y\033=\373/\231=\037\017\220=1qu\275\262y\r\273u\220D<3\212\233\275\005/$=\266\217+=\230\226n\274\005\\\236=2\264.\276\232\340\234=0\207i\274\245F\320<\005X\255<\202\203\316\274\227\371\254\275\376sh<\246\034\232<\331h\217<\0134!\276\271\304\216\275\014\230\276=@\024\253\274\204k\240\275|x.=\333\036@\275\223\364}\275\316\323{<\267\252,\275\305t#=\340K\r>\235\346\211= \272\211\275\263\346\t=:\023\352\275\373c<\275\236}\266\274\336\306\235<\016\211\350\274\014Sk\275j\223h=\r\343\212\275\311l\372<O]==#\322\302\2752~^=\331\013\356=\347\"\240=>\326\001=Z\261G\275\317\345\205\274\023i\265\275?\200\305=\363@\013=\232\036\034=\216\005B\273-\337\024\275\310\2432=4+\232<Q\006W=\247\037\025\270\027(\002\275#\017\234\275\220\033,\274_\260\362=\210\233\305\274\"\223x=y\361\201<\2776\367\273G\213\230=\202\372\215\275:\320\236<\270g\022\275\271\033\010\273k\037\023<\233\346\023>\351<\246=\002%\252\274\242\362\377\2724Tb>\271\353>=\250W\200=M,\025<\377\350\230<\363\366\231\275\226\350W\273[\033\302\274\314\361d\275\313\364X;D\004=\275+\340G=\322\275O=\0049\361\272[%\026\275~b|\275\211\345\241=2\346\'\275I\'\361;\241o\233<\355S\345<r\276w=\264\305\"\275\260\256\330={\374\333\274\312\200,>\345\274\277=} \212\275\254cE=#{J=K\376\213\275\002\370Q\275X\\\226=QrU=\2300E<\032F\202=\360\235\257\275w0\333\275\000\000f\275H\325\306:\272\372\250<\256-\t\276\250\036\320<3c%\273\275~\323=\344\235Z\275\2268\000\275\2408\332\274\371\017\\\275\243\224u=\306\327\306\275&\200\234\274\343\313\004=\341\243\t\275\0351)\275\376\227l\273\335\245\342\275\350E0\275\n\374!\275\177o\204\275\336X\350\274\332x\315\275\367\024\331=\364\377\003\276\226\376\017=\272\341\177=\n\203\004=\314\010O=m\310G\275\215*\325=\260\273\365\275\375\016\254\275lGF\275\371QN\275\200C\205=\217\371U\275\327\220\363=Mqk=Hb\321;m\264x\275\315q\224=\257\341\023=W\230\304<\340dQ=C\251\314<\246%\321\275\2713\232\273ef^<\325\233\334\274O\021\014\275B{\245=\245\330\213\2743,\230=3\325v=\320#\374:\314\214M=J\225#\275\264&\261=Dj\262=r8n\275\336\314i\275\247\311+\275\356\036i=\344\344/\274p\241\215=+Eb\275G\346\236\275\262\265_=\250\006/\275\227\364\\\275\325A\203=\220,\256\275\215\231\341<\002_\235\275c\352\253=2\233\257\275+\202\344<R\213\224;\336\357?\275G/\013\273\274@\007\274\035\230\260\275q\211\254=\247\341L<U\267\024=\035\247f\274r-\031\274j\200\"\275\360\375_=W\244\322;\2301N=\361\372\277<]\035\250\275`^\250<\242(\213\275\273Q2=\301\213\t=\300\270\017;\325\201\000\275\032\310\326\275\013\022\234<\210\231\260=c`\275\275\225w\203\275T\305e=\310\360\005=\275$\346=\010+\244\274\336%\334\2753\214\213\275\350 \220<\031\251\021\275\252s[=Y\313F=\214\205i\275\367(\005=t\037\234\275\2607\330\274\304<\326;2\033\344\274\227M\205=\025\363S=\363\362\363\2744M\210\275l\262\037\275\333\201\317\275I\260o\275\321\025\275\274\245)^=\320\304\230:\264U\262\274]\234\216=v_\367<\253\204\234<\231\021D=\001\234[\275-\027\221=\002\">=:_\030\276\207\370\272=1\257\273=Fp\227\275X0\017\274\277\335\321<0\007\216\275\256\000 \275Iw\027>D\277\223=k\253\302<\035\375\215=`A\023\274i^A\275\307\224\216\274\323\230)\275;z\334\274\244\3245<\272\313\345<<\010\253\275\265\014\304\273\205\313w\274L\251\207=\315\265\333=\227\2515<\264WO\275\2042\211\274\272\260\264\273\372\031\223\273\2509\375:\242\202\225=\245\030\r\276I:\267:5\014\000;\240\2670\275l\216%\275\340b\274=\350(\274=+\227\311\274L\315a\275\237\006\'=;5d=n\370\276<v\017\000\274\342A\001\275\005\356\000>FOM=i\203\345=\3342\223\275\201\376\024=\357M(\274\3759M=\265\001\312=\274\356_\275B[0\275\2461\024\275\251\331\017\275\021\352g\274\025,\n\275:)|\274j\031\017>\257??=*\226\257<\227|e;GG\320\275\206\201\240=\252z^\274V\220\204<\252c\304<\034\030g=8\230\234\275\241\004\245\275\226\204\177<\257}\251\275\336I\241<^\254Q\276a\215\366\274l\036\010\275\254F6=\260\3275=%\037L=R\221\271;a\212\213\275\361\314]\274RI\343:6\210\232\274\367\350\203\275\235N\025<\026{\355<\304\225\311\273f\265->\324\260[\275\261\366z\275`\211w=<\031\032=\000\324s\274\322\211\241\275\253\301\016\275\324\016\351=\021\346\375=\307:{\275\203/\233;\305=,\275\332\0348=\374\275\360\273\315\270\257\275\314\365\250\275\000\312x\275(_\251= U\255\273\276\327\240\275\247d\306\274Tp\313=\373`b<\310&\371\274F*P=\251}\237\274D\2549\274\335\205~=d\245\310;i!2=\235\217\361<\276\237\363\275\031\013\225=\220>4\275\005X3\276\257\306v\275c\2435=\371M0\275JO\234=\004\300\247\274\235\334U\275\324tX\274\243\243\231=\255_\033=M\260\350\274\353h:\275\360So=\210.!=\311n\215<\177\317\020\274\261\016\216;\204p3=j \231=\026K\"\275\243UV\275a\244\301=\006\224_\273ZK.\275\032Q\235\274~c\377<\240\374\233\275o\313;\275\020\363\302=\t\370t\274%p1\275E\215\001\276\376\263X=\232\333\355\274WvM\275\311\224\262<\240O#\275\025\262\310\274\036\314:\274\301\375\201\275s\243\277=\230t\025>\224\273\213=J\201\024\275/\323*=.\230\203\275\003\"\227=\361\220k<\020&\307<\240\241\355=\006U><|\357\215=\243\204\341\275I!\231\273\375\217\021<\300\033\344<\300\274\234<W\255\n=\211\301\205=\364\370\363\275\336\200\005\2724\225\253<\t\336\240=\270W\377<\314\306m=\212}\244\275}\210\021=\202\247\001=\030\352|=\263\322Y\275\364#\271\274s\255\235=\246\201\265\274\226\020\212\275\300\315\244=EE#=\236\324\307=\367\037\342=\0236&\275\350e0=\313#\304<\307\023@<\220\025\n\276KX#\275\272\311\222<\037>\"<U\271\204=w\n8=\254\204\213\275\035\261\346<\247\357\240<\362=\363<\367\336\335=\035\344\333\275F%\276\2750R\224\275#1\322<]rI\274\354+\337\275!\242\202=\233\336.=9\216\010=s<\220\275\324\340\030\275$\226\004<\361\235\021<\271\200\215=O\312\250=\362\265k=t\353&>\220\221\321<!\025m=\032\337\200\274\211\214\000\275\364\304|\275\363C\224\273\307u\006=\360{.\274\242\215\355\275\244\266\305<\200.\231;\2371L<\004rH= \305\014\275\277\361\342<\364\204\275=5l\271\275Q\010-\275\240\030R<\261cl:\272w#\275\026\267\023=\375PS<\240Lo=\2760\224\274R\030\005<\317\234\356=\373F\276<\323\010\214= P\313=\033\260\276\274\264|\230;$\366\237\275\341\213\237\274b\353*\275\302\334\311\274G\254\306=\212\363\'=\261\336\274<\250\264\t;2\033o<\371\351\337;d\341c\275$\370>:d\202_=B\367\226\275m\303@=;\265<=\325\264\225\274\224\200O\275\235\243\000;\016\330\211=\025<U=)\341\207=\225Z\035>j\010\342\275l\'T=\305\330\023\275\002\020y\275\014\325\350=\333\254\331=\243\222\204\275Z\367\327=\335J\316\274\001\r\032=I9\371<\306\274\336\275M}\262=\322\371\320=\337\000\213\275\201\221\206=\273\017\216\274\nY\310\273\362\360\021\276\331\320\021>6\215\256\275\373\304\035\273r\271e=rt\261\275\323\335\326;\315\032\351\273\021\367\034=\322\032\265<\275\261\244<\367\263\321;\260\223\225=\276\023\356=\334\211\224\273HA\251\272\031\252]=\026\363\242=\353\371\330<\212\322\330:\327\013f\2752~\202\275\273\315\265<\367\323\207\275\337\340:=\315<\241\274\345\353\210=)2\334\274OX\004=rF8;\035?\202=$\003\004\275\327\022\223=w\034\267\274\277\006\034=\220yB\275S\342`<\305\"f<<\372\013>\357\225\254\275/\201\353\275\275\010\302\274\366u9\275\200\316d\275\3524d=\221\267\203\275\223\314\334=\3138i\275\322@\247=\0005\206\274O?\240\272\201\014\363<\n\324\000\2752\211\322=\302\306\327\273A.\216\275\026\004\205=rj\232\274\370Q\240=\024?\351<\002f\236=!\252\207=qVL=0\373\027=(\211(\275\\\234.=\013\237\201=\264*\\\275A\365\363\273x\333\204=\271\230\307=&x\'=P\205\335==A\223=\252B\264\274\314\266)\275h0\321=\"\372o\272\273A\204\274>#\036=\371\002\014\2741\000\026=\0275\021\275z\231\242<\257\206\217\275\375(Y<\210\027\254=\366\020\345=gQ,<A\005~<\213\177/=\255\337 =\342\377#\274\346\214\377=X\213\005\275k\005\027\275\021\'i\274\004\3171\276w\327\255=\247\357\270=\312\325#<\004\374\006>\274?\354\273\370\316\267;i|\273\275\0050\342<\'\302\317<\267u\037\275S\223^\275\017\220\257=Pas<\204\335(\274\260P\255<ReH\275\362\207t\275PG\254\275yT\234\273\017\354\257\275\030\036$=\013\321\205=PZ <1\361\033=\376E\003\274\255\024\203=\314\007\305<\210\327\237=\355\230C>8Ux\275]:\035<\322}\252\275\334\255\334\274\335\024\222=\350\037\342\272\004\335\366<X\261{\275\233o\322<\r/_<d6\341<\023\317\352=B\210\r\275\345\237\021\2763\017\235=h\037w\274\222\376\205=\327I\276=s\010\307\274\377\336\250\274Ou^=}\216U=\323BX\274\303\205\263\275g_g<\016\277\305\274\363\311\036=\037\246\007\275Ai\016\274\003\360#\275\237gb=\213\227\373<\340\246\037=n\004\267<gZ\366=\321k\201<E:\027\275\342\036\247=W\256\307<\'\371\211<\206j\031=\337\342\025\2741$V\275L2\003\275\224\"H>\320\032L=b\031\325:\205\212@<\312\315\356\274\032\263\347\274\202\013\226\275\\\317\251\275\252\240\177<\370\205\320=\362\347\274\274\021\020P\274\025\240p=-\311U\275\343\352\224<v\360\336\275I=?;\213\321\352\274\306\330\201\275\235\351\226\275\261\256\271:\313\254\"\276\001}S=\265\006|=K\347\014\274\310\324\027=9T\350\274/\345\327=\335\000V=\224\032\227<\275\001\240\275\363\0002\275Q\256\221=\347~\013\275\350\226+=%3\274\274\177\014\311\275m\310*\275Yx\327\274\337\313\267;kS\025=u\331x\275\342\357\376\274\007\027\206;\004\037\344\275\305F\262\272\376\'\004><i\357\275\342\217\304=\376\000\266\275\3504\374<\0003\322<\024\202\226\272k\2463=\n\021\017\274\267\341w\275\201\247;\275\252\004\313=\336t\023\275\376#\337<\325\3271\275\nwR\275\375K\352\274\273%\310=\334[\014\276\304\0058\275\330j\340=\321\262\007\276\364\231U\275{8-=\034\370\016=F\033<\274\240C\242\275`%Y\273$\335i=\000\373\202=\305\000\212\275\2167\352\273l\316\224;qx \275\232\325\\\273\241\206\332<2\243q=R#-\276\t\024\274\275)\327h=jC\344;\307\245\006\276\"p\013=%O\324\273\341\202\001<\375\355\364\275\242\271\210\275r\203\332\275\244#`=0\250\346<g\002\321<\021)\215<\210\353\024\275f\322\213=\230\203\342=$\237\332\274\325\026\216=\215\2544=\266\321\326\2750\257\241=\333i\340<lV)<\350_M\275\361\026\361=\222}\014\273\301j\217<\305#\263\274\224[)=\251L\357\274?\322#\275Mf\216\2739\320p=\216\274\232\275\320\375\311\275\'\021\367\274\255\316\264=\304~L\275\257\032\376;o\225s=?\313\210\275\243\360\177\274\025\201\324;\256`\220\275\\\221\253;\330\022\313<{p\376;\261\240\332=7\215X=\225R\227\274\261\036\333<\222\242\201;es/=l\247E<:\010\335\274\214\014\361\274\365\013\223=\220\307Y<\361\346\200\275\325\262\243=\010\376\327\273\315s|=^\353\211=+\356>\275\365\377\t<\270\346\204\274\357v\305\275 \016\305<\335\351\275=\235H\366<9\252-=>@\024\275\224\214X<U\226\302\274\260\020\033\275\\\315F=\260+%>\206\316\324=\263\301\323\275\347M\256=\244]F;?\001)\276\0136m\275\000q\313\275\213\2508=L\261\200=\370Qx=7d{\275fHD\274K\021\275<\260@w\274Sl\205<\"\304\271<\227\014%\274L\2366\274\232\373\317\275I1\342\274n\3617=`@\352<\261\303/\275\207\'\371\275u\262\261;\035\240\013\276j\020\017\275m\224\264=\350\251O\275V\027u\275\247|\224\273!h8\275\316pg=\275\260\340\2744d\224\275\275`\020\2750\346*\274\365\352\206\274]\270\210\275\325\362\006\275O\261\236<\213\256\317<\207L\226\274U{\311<y\232\223\275\247\0030\275.t\016>g\301\362\275\245Wx\275\033\307\017\276\"\315\344=\010\377\205\275\240\177\230\275\202\235\210=\315\207\221\275T\232\033=;\365\001:S?+=\316P\346\275\203\031\335\274\275G\210<\216&\211\275\301\260#=\252\254\255</\307V\274\265\367\271=\022!\267\275Y\271L\275\215\276p\275\236\377\210\275\247K^\275\3243\237\275\325\355\263=\304\346U\274v\344\004\275\032-&\274\246\325\245<\204)\324\275\207\355r=\223\367\203;\366n\207<^\311\350\275xV\202\275\275\2632\272\3720n=\322\246\206\275\276\321\236\274=J\220\273\257\250\266\274W\3645=03\226\275\024\034\222<\224\202\332<\244\250\033\275\252t\001=iB\275=\351\266x<X\237\000>\345le=n\210o=j4\313\274{I\245;\220V\312\275\261I\207=o`\207\273\377-\024\2757Ec\275g\212\237\275\222\340\227\274\300\237N=-\346Z=\254\303W<\336\216\340\275\210\202\326\274\251\354\227=\375\301P\275\016\351\352\274\026\231Q=X\301\265<u\2363\275\276\243\t=f|\266\275\217c\374<\007l\220=\207\336p\275\303H1==!\303=2\023`=\214\364\016:\262\333t;\006\376\365\274n\313\317\274\030\374\273\275\236\357\231\275\230\200\347\275;\232\374<SoO\275\272\017\000\275\243\274\004\276\376i\207=\323\213\374\275T\230k\2759\245\027=n=\373\274`%\\\275\342~\242<\"*_=\312\233\275\275p\3748<)\247\366\275Un);\\\013\271<\322Z\365\275aE\370\272@\354I=@HQ\275\206*\250\275Ypa=(pV\273cf^<;\367\010=\3464\321\274\320\317\325<\303\240\032\2758Wp\275\262\034\264\274\210\262H=\334\333\374\275-\241\\; \206;=|u\030<\246h\361=\345\213h=\365!\036\275WBK=z\353\275\275\302w\270<\360\202>;\274m\344=\360\261\226\2757\014\316\2745\357\244\275\316t\034\275\0105\371\274cd\265\275\302\264x=\263\311\326<n\341m\274\3215\276\275\301\272\003=%\274\252\273\261\025\266;\2128\\\275\277\320Q\275\204\036&\274\261\005\256\2750D\212;\204\'\217\2757\350\237=5V\250\274\033u\247<q\214?=G\205d=/\002\235\275_\307\365\273\341\260@\275G\264\204\275\0223\363\274:\345\245\273\332\020\001\275\353DZ\275\203|R\275\216\035f\275l\251\353\274\361\355\007\274\363\213\340;\372\'Y\275\245\344\227\275\3326L=\247\223\n\276\341g\371<\377\\\220;\336=m=\343h\232\274<\313\251\275M\310\003>i\n\353\2757\231g\275\255Q\270=pU\306<\336\256\315=.\232\223=ij\006\275\025)\201\274v\331\223<9nl\275\302\210\252\275.\346[=\327\334\241\275\347\336r\275\217\027E=)\013\202<\360\212\r<\337\306\357\275\\tZ\275e\023L=\337\2678\275\027\201g\275Mk\243<\210P\315<o\331T\275\346\374\240\275Q\221\322<\274\340\210\274F\236)>|\223\267\272_;M=\345&\026\276\321\n\210\275\223\320u<\200\303\305;\000s\257<pL,=M^\266\274\350\250\242=\230\245\326\275\271\216\017<Bh\271;\307D,\275)\220>\273,\007H=\202a\216=\027\023\251\274\0319G>l\313\225;\242\255\026\276\200\211\227=@\324U=\240\271\241\274e\371\312\275a\231\321<\216\315\242\275\004\322%\275\237*\212;6\037Z=X\350\246\275\350}\032<\014\334\215=]\221o\2742\350\024<\307\305\207\275\206\333\230\274\3711\337\274\262\014\247<O@\256<\263i_\275z_\205\275~\\~=\020\256\323\275\327s\210\274#\346\265\275\316s\300\272u \324\275\014P\255=\336\363\312\275\224\010\222<\307\355\271=\361\351\037=\207\350\235\275\005\205b;\204:^\274\200n\003>h>\276\275\236\245\341\275\235I =\214U\370\274\235\246\010\275_\223\265\274\330X\335=\345\013\206\275,\257\t\275\313\000\270\275\2172=\275\304\005\213=\027\033\'<\240\221\257\273\023\325\277\274_^\330\274\316\314\325;\302\270\320\275m\375s=\000\344X==\336\363<\214o4=\314\325\231=\270\237\025\274\201\006G\274o\310\311\275Y7\242\275\003`\206\275\210a\225\275ST\224\274\001\203\221\275T\235\245=dH9=\261\263\375\274\206\317\266=p\314\302\273\314\300\255\275Mb\001\276o\201\001<#\242$\276\263\002\362<p\027\250\275\'h\232\275X\332\326<=cN\275Hk\225\275C\232\312\274\211\301\240</\241(\275\373\230E\275\\\004\224<&\360\007\273\013\022\214\275\017\334\336\274xs\247;\332\307\007=p\245\"=\361\354\024=\033\024\204=7\366\021=t\371g=\343r <\024\235\217\274\223~\313:\247\223I\275Z\"\031\275\3477S=\204|-\275\234\034O\274S.s=\366?\241=\376_\023=0\354\313=\025\251a=\304{c\275\320\033\222\275\021\365(\275\214\035\200\274\240\374\226\275\337\337\215=)\302\264\274\320\254\204\275\336_\301\275\314P+<\001\333&<\"\202\202;;\253\037\275\000\367y\275\203\006\302<\027Q\303\275\306hL\275@%X\275r\227\201\274\301h\247=/\266\000>\tK\222=\245o\215\275y[\315=\020!\n>\267b[=\216\236\t>\\D&\273\211\245\300=v\024\333<\227\354*<\3079N\275\3277\223:0Y\002:H\247\007\276p\270\371\274x\326x=Hq\310<\274r\212\275\227\037\206=\371\351\345\274\020\"\244\275\350\255a<\363\377\013\276B\"\204\274\010X\006>{\327\307<J}\322<\203\205\331\274n\343\250\272%n\217\275\221\242\302=\021\262\360\2754\000\327<\014\332\214=437\275\332\334<\275p\361 9\035\263\233\274\302?\277=8\210\010=\241\263\213<\330\033\340<\326\235\307=4\016\004;\3174a=\002 d\275\246d\223=\223\247\240\274G\235\311\2743\t\301;\232\334M=\320\366\243;\340\037\247\274\320\026\237\275\235D\263=\005\273\226\2755\301\343\274\277b\236=J\215\013>`2Z=\2521\341\274\277\335\315\273\311\211\256\275\222\207\212\275 \206R=$\353*=\224>X=)\361\017=yt\215\275\262R\250\275\261*\3018l\333\204\274bw\n<z\275Q=\355\021\030\27519\300=9v\251<\252\275\263\275\036K\004>\266\t\274\275\346\024\r\276\261-\023\275\n\355G\274\333ID=\017\014\356\274\245V\260=\021\222\013\274l\276\\\275\265a\262\275,\363\212=f\337W\2743\367\366=\021|\t<\340\027\322\274\350\006\031<\3056\352\2747g\247\274\315\024\007<\274x \275\321\320G=\032e\240\274\312\017z\275V\257\031=;\275\201=\t\271\315\2754\330\244\274\322\352\213:i\r\357=\304kB<\026\005\272\274\200\007\205=\263D\355=\377P\'\276>\222+=\353\027\301\275u\342&\275\337\272Y<\344\312\237<\243\201\035\275\220q\220=`\2714\275\316\373r\274;\331\320\275p\0001=GD,\273\032?\245\275h~\300=\261\352\n>39\204\274&\253>\275\002fG\275\212\342A<\336\212\t=\211E\344=\264\370\251\275M\362\007=\370\236\262<\377\027\'<\tA,\274u\3508\275\\\253\210;f\377\211\274L\207Q\274\030\027\372\275\232\336\235\275\341N?\275)\371\257\275\231\350&=\261N5\275X$e:Fm{\274\3017\t\273e\367\250\275\233(G\275J,\227;4\007\"\275PDD\275[\375`<\251\257\000\2767`+\275\023\264(\274\341\317\010\275\240j\351\274\363\356a=\326!y\275\224\202\261=Jf\001\275\001\271\313\275\305\275+=K\372\233;\373\000\342=\247\243\303=G\032\344<`\264\254\275\014W\321\275\276\223\312\274\251\263\007<\006/O=\211\270H\275\256p\017=sk\342=L\021\205\275\341t\232\275\376@C\274g2\245\273\350v\247\275\023\327q=\355\330\036\275\335\261\320\275\320\270\"\275C\377\223\273w\234.\276\244\322\200\274\222F}\275\336\222\304;\345k*=\303\257\r\275\344\212\271=O?\303</XT=%7r<\2322Y=\234M\t\2753c9<\231Fj\275!\0319\275\2367\201\274X\372~=\n\016W=\212\335k\273\031u <\205\'j=\255\273\200\275v \360\275h\264\317=\377\214/\2751\013\375\274\357\3668=\026\317e=\341\346\356;W2\217<\261sd=\277\264\243\275\223d\010\274\211=\260\275\332ou\275\262\332\023\275\017\332\317<NY\007\274\033\222\231\274\302\365K=\322\310\357<\363\221\036>\240\"\007\274|3\005=\256\370\000<\007\255\347:\030\235\206=\215\330B\275\342;\t=\236\013\026=\370 \002<@\033\363\273\007\231\231\274\373\372Z<\352\375\243=\215j\235\274QAG\275\013\024\275\275Zd\361<\270\214\262\275c8\002\275,\224\270<_\013\220\274MrE<\244\264\364\274\306\316\337\274&l\243=\326\353`\275\305\314\026=\256g\005\275\326\271f\275s]\376<+*\013=\372\264l<y:]<\212b7=\247[R<$\224\311=\307\022\017\275v.\025=y\020\310\274\003\001f;\267\'\276\275\376\313i\275\251\034\244\275L\254\212\275{\324\007>\371K\224\274p\2178\275ix\201\275\211D\007\275w)\344\273\226\246\006\2758\363\037=[UD\275Mu\214\274\320\354)\275\026\201\244=7>\000\276\375\235\021=0\227\202\274\200l{\274\305\235;\275\303\322\223\275\374n\233<\347\232\036=\376\276\326\274y\177\305=\273/\240\274\0369\251=\247\375\013<[_\323\273\260\354f\273\221\333\275\275\277\345\346<b\311\032>\031\303$\276\265NP<\003\021\350<hW2\274\034}\345\275\030%\231\275\360\201u\273\2320g\274\371\341\026; \301\240\275pX\222=Mm\001\275\236]}=\302\252\242\274[e{=\345=\357<rT\034\275\337\244\373=\240#\224=\347Se\274\240\317\247=\330r\230<\233\344\005=\316:\207=.\014r=p\021\210\275\316\302\351:\225\353\245\275\300\244W\274\001\206I\275\305\222\">M\252\254<EI\212=\305\355\004>O\374\235:i8h\275i\242\002\276\020\231:\275\003\322\361\274\323\013\004=~D\304\274\263\032D\275\250\227\331<\001e\215\275\032b\227\271\333\033\200=\377\244[\275\031c\256<I\214)\276gJ\254:SdW=\337/\257;\356\361d=\2027W\274\207\303\336=X\324$\275>\242\345\274\343\231\262=\000<\271\274\030H\010\275)\024\376<\205\331R=\332C\215<E\246\253\272\334\244\002=^\257\304\275\023\177\205<RQ<>\205\346R\275oF\003<\2341\224\275\2542b\275\216\302D\274n\262I=\363y\273<9\321\355=87\237\274\t\272]=\263\236\316=H/e=\244\324u=PF\250\274\005\212\264\275el\204\274\210\177\202=\340\364\344\274\221\260\261=`\353\342<\377\310\246=.\000O=\236\256\311=\'\273\214\275\260\343\263<\314\326\204=\234\371{\274\3265\306\275\274*\271=\320\224d\274\335\200\353;+4\353\274\024\326\014\274\030\340\351<[\377a\274\031\210i\275?87\275zd79T\375\010\274\036\244\240;\177\3720=!\240\321\274\364\335n\275\375\245\200<Q\222\030>\257p\021\276\222\247\376\274\242\233\251\275\276\330?=\3344F\275\220\322\317\274\013\014\245=r\022\252=7\350\200\275\266\035\243\274\360\337\231=P\316-\275\352\037\342\2751\010\213<\003\023\230=\2716\234\273\004\261N\275\230\007\226=\245\254\320=R)\347;\203\227\333\273\225\242\341\274k\003\341\275T\027\210\275\300:\221=M@c\275\225\2217>\005\004&=\357l\033=\033\305l<\005\222S<\264\334)>f\265\247\274\222\017\255=y\327\251\275F\341B=.K\364<\377<\017>n:\241;u\346\021\274\313\222\254\275\357*\365\273;\350\030\274\346y\257\275\235\307&=:\314\224\274\213s\337\275\220VZ;-\023.=\234=\267\275\263\253m\275~7\223=\265\236\246\275\020\252\243\275T\244\221\275@\235\345\273\3138\344\274\2040\242\274 `\346\274\237\276\317\274\201K\212=\211\003_\274\235\215\251\275p\273\211==b\351\274\354\033\217\275\231\362R\275E{\217=\206\351\313<\221\034\334=\343\253\236\275i\342\260=\303?&\275\036\334\341=}.o\275\r\327\003=0\310\260=@\211\337\275_\303\254=\323\362\243=m|n\275\356v\314\273j\334\224=\267(\307\275\217\270l=)\377>>=\233C\274\317\350\232=\020\360\373<i\023\244;\351\327\260<\243\035\222=\373\375U\275\200\275\214<GV\233=\021`\244\275\336\240*\274\210\374P=\212\374\275<o\302\014\273e\253,=\000\0101\275\000\372\214\275\232w\303<\205\n\240=\036U:\274\177%\013=\276\022\356\275\024\362\235;\206\216}\274\305\005/=h\203Z\275U\366\311\274\007\025\017\275\010q\373\273O\316H=\336\343^\275/\213\267\275\361\331\310=\204\371\205\273g\362\272=\205o\007\273v\262\360\274\254TF\274\274\303;=\230\200-=\030\200\350\274\374(\203<#\350\201\274\311\007\024\275\020\311?<\245\266\255\271`\230I:\3479\242\275`\320\254\275`\234\240<9 \314\271\r\357\212\275\261\257t\275P\373\267\274!C\336<\240\333\240\274\273+/=(3\261\274p\203\313\275b\2232=6\225\270\274\207\326\374\275\037{\245\274A\242\216=@\367\001>b\352\307;\300\224!\276!*\247\274\204(\000\275\206\3140\275eL)\276C;\034\274\3271\204<LJf\274\260\372`<\223 \231=2\253\206=\346|\023<\247\000\313=\020\245x=\221\221\375=\220b\274<\010\271\343=\014v^=\227\314_<\016=\t\275_\341\267=\334\262\302=\244\354\276\275\303%\007;\315\331\347<\263*\262=\001y\212<\325\000u=\320\263K\275\362k\322\272=\016\272=\361\223\221\275\237\314\276=\360\212\225;\337\276\201\275_\005y\274\206rQ\274S\003\262:\347-\376=\332 \222;\255c\004\275\242T\323\274`\001\340=\305>\027\275\254U\251\273P\'\343=r`x=l\307O\275\273\261\033\275\007\362\006=\231G\001\275\026\025\323<z\340\004<B\3206=7X\201\274\361\371#9\256\002?=\216\377\231\274\252\304\252<\226\231\336\2754!\220\274\3418Z\275\207\354+=6D\274\273\262\362\323\275\222\326\314\275\034\364\013=\354\270\274\275\342\340\220;\004\022]\275\277\005J\275B7!\274/\035\311\274g]O\275\300zu=\314\366\224=\2408\200\273\323z#=F\263c\273\007T\033\272S\253\010\275\306\202\230\273R4\242\274\2172\251\275Ou\360\275\326\0261\274\216K\277<\320\007\263\275\240\3517=\344\303_\275\352i\226\274\323\231\224<0\035\314=~\222\230=\274h\007=\253\030\324<\006\301\271\275\302\021\221=ih\224=O\014\253=/`\316\271qE)\275\000?>=\252|\374\274Wr\267=\026vC=\036>:=\213\343\227\272\303\nC=\2162\200=|\225r=#\022p<\351\203\317\275+\354\334\275Ic\262\275$[\222=@\326\033=\276\240\330\275\214\236T:]\264\351\275\266\377\333\275\342\241$\275\371\2613\2754\210\270\275O\214\366\274\336\225\321=\323)\201\275\335\034\212=\263v\241\275\237ru\275\r\003\374\273H\242\235\275*\352\315\274\263\3646=p\270E\274\237\024\205\275\365\311\247=\230\262x\275.\037\314\275\310MX<X\037\001\276\371\202\274\275\265:\177<\371\232\r\275\370\024\363;g\213\020\275\363q\232=\252\300\203=s\2755\275vj99\236\354\230<1\037<<\365\244\316\275B\367\247\275Jq\010\275\2417\030\275.\200\025\275\343\307\030\275\262\253\232=\217\362\021>G\332\233=\017M~;\313\342\216=\003\033\037\275\342g\334<\215K\005<9j\231<\004\365\030\274r\220\235=\302\342m<\343\226Z\274\245\314S=\360\3178\275v\264\033=\3260\367<5\307]=:\336\352<.\024\212\275\033\034f\275x\205d\2743V\253\274}\007q;\252\325\311<\217\320h\275\306W\331;`\017c;\315\246\337\275\020H\020=\317Pv<\207\313\022<c;\206={\002\\\272YP+<\003\020(\275\260\335\016<\222\344\302=\315\020\250\275r6\361\275\264\300\017\2758\032\\=b\263\357\274\302\344\362<\365\224\032\273\003\t\264=\376\221\375\275\001\315U\275D\326\204=\361j\343=\3552t\274\306ye\275]\211]=\014j\020=\321\272E=Ono\275\256\nP=\320A\212\275\305bc=\233M\204\274\267\270\232=\354&\022=\027|a=\204d3>\375\246!=0\321X=\"\373\313\274c\221\250\2755\023,\275\301\351\006>\"\222\033=\356\332\314\275\357\033A=\234\343)=\330WP=\361\355\t>\006\203\010=\300\265\013\275\035x\247<\271P@=\207\344\210\275\02072:\303\036\275<:y\005\274Q$\036=<\036\212\274_p\271\275\214\204b\275QN\327=\226\247\030=\'Z+\276\025\312\210\274\225aY\275\213\263\010\276\r\335\214\275\377\322\241\275~\326\205=\r\315\020>\313\026\203=\347N\271\275\022\003\242=\330\315\337<\201\270\303\274=]\021\274c92\275\371\326\201\275\020\244c=6\377\277\274\370\010\004=\237+\260\275hv\004\275\032\240I\275\2324\352< `\250<(\336:\275$3\222=\014h\212\274\026&\356:M\212:=\331\035\322\275<\317\277<\0102v\275\314m\220\274\315\336\266=\350\261Y=\204*\213\275\024\242\310=\014\211\333\275\370n\n;|\236d\275\207y\240=\301}`\275\340\334\004=\374\241\373<\3040\244;Q \004\275\303\360\226<?\007P<\0357\020\276p\216\313\274m\347T\275\313@\r\275L\036\310<M\256\275;\325>B\275\224\271\315=\252\305E=\260\346(\272\n\016\320\275\211\260\246\274J\361U=\375q\021={\215\205=t\377\213\2756\230\374\275\025fB\274B\261\022\275R\236\364<\305#b\275\036\002\344;i\252\203\275\205\307\356=e^\265=\225\277\222=\302Zn\275i|#\274\267\360\357\2740\306\233=\312o\232\274R\353^<\326\346\224=)\326\205={\204J\274\031\316U>\013\211\262=~3\241=\'\276@=\206A\263\274\273E\200\275\320x\307\275\010\031?\274\337\276\313<\001\246u<\335j\201\273\353\266c\275\367\206C\274\343\342\357\274\021\226\275=\213\214\023=\232\325\253=\241\244R\2756\210\301;\315\311\253;\370:}\275_M\305\274\016k\354:I`\365\2731;D\274\275\343\362\274\365_\260\274a\367C>iF}\274+\347\345<m\t\250;F\225\256\275\363\202\035<\331c\207\2759\346\354=D!\354;o\2130=\351/\272<\336\231e\274n\261\206\275/\275\315\275ZV\245=r\316\024\275\"\t\201\275\261$O=\211e?\275\242\007\033\274%\274a\275\256&_\275\200S\232:\257}\353<!\302z\275\003\261\240=~\326Y\274{\313^<\211H0\2751C\347;\200.\276\275\321e\264\274\243\320\262;@S\3579^\204\314=\220\372\240\275z\204b\274\233s\335;BMh=\006\313\232;\324\302\274<\263\276+<|\213\271<\222?\205\274!\203\351\273\214\210\212\274\211\315+<TB\360\275{\333\241\275\023\347\374\275W}s=P\340\034\276Jt\035\276\024xd<\237\232O\274T\336c<\351)\n<\311o\216\275r\2544=\237\206\020\276\334,8\275sU\363<%\210\252\274\326$\316\274\034\236!\275=\024\203\274\211QX;bo\321\275:\314\223=\017\027\351;\225\266\321\274N?x\274\201\330K=\347\262\224\275\265+\224=\376R\240=@\241\300=\371s\177=\316\274\207\275\227a\346<\000\226\253=>1\t\275\310\347;\275\005w9\275\247\332\357\272\003^\306\275\025*\347\274\340[\256\274\261\3567=\223$\034=%\327\274\274\342\334\331\274\325\231\213=\026\270/>\004\373\312=\213\350\003\274\230\313n=\325\250\r\274\t\352\347=\013\212\255\275|\362\237=f\203\034=\026\216/\275`\2433\275\371s\275\275\346\263\241<Z\2432\274\224\373\233=F\016,\272\211[j\275\266ZL=]#\235=e\036\"\275\335\026\311\275\365M\241\275:$\001=\304\3513\275\312Y\310\275\325\206\022=\336\317?=m\2660\275\323\350\216:\321!\013\276\010\275\005<\352\322\230\274\203\246\273\273\272H\365<\247\216\263=\031\234/\275\213\022\213\275\3254\007=\264\276s\275\367Y\222=*\234\337<\027h\251\273A\263\003\276\337\"\035\275\021\312e;\316\357\242=4\325t\275h\204\215\2739\017\245=8\300\311;\245f\201\274+\223\250\275\267 c=\010\351\306<\226\360w\275\325\016\266=\t\366p\275v\374x\275\2255q\274Y\310\206:\265\'\364;@\\\363\275>\325@=\0301\364=C\333\201\2750\300Z\274N\262\224=\364U\245<\216\316\000>\331\023\246\275\021\256\235=a\211\353\275\211\255B=\'\027\017>\r\037\275\275)\207n\274:\233\256\275D\356\352\275\243\372\241\275\262\246\211\274q&\357=O(\301<d\271\223=\323n\362\274\362\272\255\275\235\010\317\274C0\204==\211\364<\252v\037\275\334i9=\177\357\207\275\270\"o<\221\n\337<\222\232\225\273\353\356\216;\033C\245=\331\273>=/\010\302=\360B\221\275\311\216\372<\266R\264\274\007\310\216=\305\377N\275\307\370k\274\354/\344\275\223\006V\275\356\342*\2730\311\021=\375\246]=\370o\276\275\271`\253\275y\232\312=\215\361u;\330\342\023=~ \361<2fi=\253\335\277\275\201c\231;\210~\262\273\272}\256\274\227hK\275\013\004\361<Qz\344\274\207j\316\273h\340\2408\256b\342<\335$v\273J\260\242\275$\246%\273\334&\001=D33=\310,\340=o\232\240\272\267\177\253\275;\205\220=\006\220\305\274\346Y\207=\366\205\213=g+\316\275\274C\330\273f\372\302\274\030\346j\275\317H=<\240\277\201=<l\005\276FA\256\2743\345\277\272v{\311=D\n\021=\277\024\273\275F\270\312\275Ge\247\2751\360+=\003\"B<\203<\252:\216\331=\275A\027\234=\017\312\227<\0148*\275\344\221|\274\364[\200;\256\303n=(\230\t\276\314\305\2238c\250\214;\374pZ\275` \016=\233\226\266=\355\232V=\311\335\033=\222\353\005>\035<\020<\014.\240:&{\271\274r\2736=@B.\270\252\002\233\275u&\201=ei\004<3f\014\274\n\007\324=\365/j\275\376\276\250=!<\014>\346\3103=K\026\304\275>\251];\026\364\316\275\366\027\253=V\025\320=\214T\224\275\227lA\27568\252<)\302\216\274\324\024a=\275\262\231=Hn\r=\355\344P=\361#\224<\374\3040\273r\322\205<\325\215\367<\372\351^\275\271\035\331<woj=\350\375+=\311R$<\"\0163\275\350~\246\274\377\303\022>1Y\377=T\317O\275\342\274\211\275\263i\351=L\224\034=\212\261@=\231\357\177\275\270\361\t\275\244\222\223\274\364X\243\273\376\304\266\275\266\327\006=_\017\006\275\3325\205<r\360\272\275J\232\253=\027\210\370=\363Z\241\274\010\334\303<\260w\241<R\230\016=\014\033\211=\214G\347<\1774\302\275\372#\257\275\307:\255=E2\265=\341\243K\275\033K\024=u\'\376\275hi\205<h8\300<\324\357!\274\007\341\224=\3716\007\275\307\344\014=i\340\001\275\010tH\275\226\326\267\275\361\202\267=\000\220\315\275l\235Q\274\350\201\256\275\2030w=~_\232=xm\204\275\315\363\037=\273\343\340<\353\261\317=\016k\266\273\377\204\324\2756\277\177=+\016$\275\261\270o=\276\203\213\275Hs\225=\226\002\256</\014\232\275\254_\264=\035\356\005\276\202\327\375<(\204\236=ZuX\274\260\013\330\274\354\334\300\274\'H\007==&\376=B\026B\275\2021\204=z\300^\276\371\266\271=w\232\215\275\014V\242\275ho[=^\253\022\274>\207\260\271\327V\326\273\344U\350\275\206a\263<\177\246\336<:\200\213=\344{\333<8\205\244\274\241\020\245\275\010a\335:\234\302\204=s\233@=l]s\274\017\230\361<\224\031C;\364\261!=\204?\366;\210\245\257\274\351\007\337<\340\031/\274\331\243}\2755\264\t\275x\223&\275\315\271+=\223\243\t\276p\207\237=/\221\357\274\245\247]<\232f\237\272]\010\006\274\034.\261\275N,3=\036# \275\247X\r=\216\205\376\274\001\345\362\275 \006\242=\305\211b=j\305\000:Qv$\273\'`\016=\275\243 \275\255HL=\331C\200\275\220j|\275s\226\314\275_\2275\275\002\307\001=\022\230L=\320K\311\275$\244\347\274\336\230\013\275t\2322=\231\035\300=\357\211@;\355cQ<\340\371\214\275\360P\315=\301\354\227\275\241\361\025\274\236\300K=\017\363\n\275\ti\013\275#\330\"\275\243|\371\275\321.\r>W\227\205\275r\202*=\244H\037\274\374\321\365\274\026\213\262=\210\252)\275mp\210\273\017\003\331;\237\354\333<\242\224\244\275\250\362*\274\230b\272\275\273\224E=\244W\224\272%\305\276=\000:5\275^?\330<\241\036\035=\3734\224\275\372q\021<+\2162\274\032\223\237\272\233m\205=i(U=zb\037<V\273\207\275\365z\366\274\351\037\233<\n)\014\275\303\230\215=\306$\010\276\223J\235\275Mu2=\356\000p=\202o\032<\033\245T\274\276\244b<68\361;\005@\340;wL<=\203\255\212=au\356\274\366\005\270=\314\245 =\354W\333=\212G<=\235\313R\274\253?_\275\036\231\013=\225\006\316=\302lb=\323\013?=\240\005\337=]j\241=\023\301\350=5\233\260\273l5\222<\370\nK\275;@\023\275\254V\307\275\330\344\\\275\210\000\272\275\303a\336\275\013\016\020=\014b\024\275\327\354\311:\037w\235=\237\223M=\177\377\010>\243OX=\037\010\303\274\210\210\234\275\010\r\017\276\024\205\010<\300)J\275\203\322\261=\014:~\274Y\001\013<\243\264\226\2743\355\024>e|\237\273\004\303\354\2733\201/\275G#\305\274\324\232\265\275l:\241\275;\264\213\275\024\361\364<\332 A\275\024\t\001>tF\242\274\"\260+\275\331\272I\275\226\365u=\\\000h\274(F\207<\034C%\275[\306\002\275\376F\317\275w)\016=\315/\343\274\177\222\200\274\350v\001\276\345O\222=\347@\235\274\210i\237\274\037A\016\275\214|\256<m\300\271=$Cy\275\233\323\274=A\306^\275\001\201\236\275\237\220\236\274\014F\337<\243\020\211\275\232\000\211=\263\212\335\272\303gM=\245\rF\275\352\234\253=\371\026\270=\203\351\330<y\234\232\274\304V\200\275>L\355;`z%\275\312\342\353<}x\221\275B,\013\275\033\225\247;,8\304;\n\227\013\275C\266\376\275\2537H=\316\004\263<\030\023\354\275\2050t=\340\366\234\274\367\320\333\275\204[\216=Lo\220\275\307\317\226\275\334\213\270\273Fm\027\275;c\363=\273Qc\274\353N\323\275\221N)\274)\007x\275\035\237;=<5\267\275\360O\222\275\231u\225\275\276a\215:\005\020N\275\277\003O<\222\220_=\212\246\367:J?_\275\365\227\246=/\254\224=\032\231\333\274-d\003\276\003-\016<\371\253\013>\020\rH=Z\322\356=\"\201=\274\230\317\255\275\206\030O<\311\333\235;\006\262:=\261\356\r=L/\231\274e\010\234\274\361\370\247=4\000Q=\003\230\266\273=\237\347<\035t\311\275f\007\251\274du\236<\206\317\324\274\360\0169\275\315\235H=@(\357\275G\275\262=\031b\363\273jX\273<*\335&=\225O\210<9\001\242:\r\364z\275\235o\265\275f\013!\274\376$\032\275\355\372\232;\264QR\274A>\265<2mE\275\313\177\371\275\264\302\244\2741%_\275\250\037P=\340\365\226\275\330\360\202=\003\021\336<Q\325\001>ex\242\275\001\211s=~LO\275L\331Q=\373$\234\273\rw\225=\307\254b=\341\221\240\274\315\254\344=\330F\307\275\003\376\230=\304_\377<\263\334\201\275\340gP<\244\270\222\274\224\254\375\275z\306\251\274\375\032\030\276\330\013\336<4\333\222\275\271\336\026\274\366\025\212\274y\326#\275\306)\251\275\327\031\034<\254\307\036\275\177\206\341=R\000\030\274)\226\031\275\374\304\315<\311\262#>OSR\275\\\002\340\274\365\374Q=\217\257\354=\252\343^\275\367\261\317:\032d\273\275\213\303\016\275{\376\216\275\366YN\273Gw\377<O\223o\275\242\230\261\274\034#\024=\356D\025=\345a\305\274o/M\275\301q\257\275\361a\201<\361+\215=\241\332\177=\t\207\277<\327^\375\275X\360\n>\200I\250<K\241\376=i\326\274\273U\370\354\274\327\221\222</!#=yM\n=z\323\216\275U\0350\275b\022\245\275\331\253\225\274\335\260\337<7A\022=\367\t\001>O\317\307;D\307\271<=z\375\274\377\245\023=\350\205\243=\352Eh\275A\254\264\275\2451\032=\273R<\275\324\205\372;\032 \311<\337\367\307\275t\212*\275\031\365Z\275W;\273=\206\"k=\222\314\375\273Y\375\234=,\341\037\275\237\311q\274 \r\021\275\273\263\214\275w\363\270\275\351\315->\361\037*=\017|\207\275[|\223\275\270\005\273=\270\350\204\274g\270>=X\002\000\273\235V =\001\215!=\362\273\032\275hi\223\275\226\213A\274P\260\223\275\370K\010\274h\302\r=DW\026\275*\350\177\275Kjd=\360x\355\275r\006x\273W@\254\274\0003\313\275\232\324S\275.\305\366\2734o\200\275\244\230\231;G&/=\221\250\246=aD\267<\177\2328=\035HJ<\352\246a<\241\362\321\273\372\033\323=\032O\214\275\026f\335<\023\r\223\271\370\034+\275\300\347h=\210\337\265\275?\243\005=FA\316<\273E\247=\030\212\247\274-\243\016\276=\261\343:\037\037\224\274aW;<?\302\003=\033\003\277\275\366\006\332\275J\321\246=\311\250\307\275\n\247\001\276^\271Z\275\207\355\302\275!\205\361\274q\327F\274a{\025=1\235\373\272ld\333<h\246Z\275\027\214\237=\234^\002=\277{(\274LK\366\274h\244\t\275L\343\354\2743\302\223=\027\261\333=\323\272/\275\032\373I=^G4=\243\200\217<\270\207\240\274\227m\253\275$\372X\275\321y\313\273\257\365\031\275\246\306\236<\270m\025=\205\214\340<\344\216E=p\313\026>i\316\204=L\016E=\263&\271\274\335yk<W4\252\275\3774\234<pg(=\365\372\254<\233^!\2749\301)=\264\352\033\272\207V\230\275\311\307\375=(\251\362=\301\364\233=f\013\324<D\n\301\274\322\376\332=,~\226<\324\245\231=\206\323\346<\025\312\010<+\347\270\274_$\354<\307\334\n\276\026\343\321\275\034\213\224=\220&$=\004\366[;\274\2010\276N\260X\275\366\017\277;\322\265\255\275\017B\000<\003\256?\275\200I/\275\023\205\302;\200\230g=\342e7\274\300\330\276\275\340C_=\034~\327<\205N\214\274\364p\005;\206\243\233=q!\034<l\370\026>_\366s=G\230\244\275\245\t\270;\255\376F\275\353\033\200=\3357i=,\276\261\2754 \266=\033\314R\275\013\302I\274\304;\203=#$\323=\037\016\024\274R?8=V\r\230<V\251\245\275cl\372=\212{\351\275\010\365\307=\201{\304;\227\034\231<\205\023W\274\221\036\357=\330\301T=I\366\314\275m0\277<xs\264:P\327D==9\267\274\020\301\034<T\036\333<(\\\360\274\0364q;\277\035\375<d\345\034\275\370\004n<\n\361.=\306\373o\274 \302\375\273\267s\203<\010\247}\275/Y\020=l\341\013\275\036Eh<\007!\247<\032\205\356<2\301\203<\200\264?\274\371B\356\275\t\361\037\2768\341\317=\231\227l\275d\006\210<\244\245\316\274\0067\002>F:\223=v\332\300\275;\214\337=\0231\001\275\326\034\220<\213a\323<cZ\206:\305\014\210\275\t\260|<\203\223I=\017L\264\274\006\256\326\275\243\000\017=c\253\210=\247\324l=\364\343\311<,S\210\275\250S\336=+\031\235<\326\212\220\274\301\260\036=\257\201\037\274KQ\331\275\271qt\275\320\376x\274\320\036\266\2741A\345<\354f\365<\376\005\207\275!\317\010\275\344\344\314<?)\005\274\223(=\275f\260\371<\331\210\207\275/\217\221\275\207\203u=\002$\207\275\321\327\201=\022\376\236\275\356h\325<\036C;=\033.K=\021I\317=\022\035\253\274\201\016H\274\234\311\211\274\000\370\222\274\231\034f=\270E\235=\023-\236\275\226\360\025\275\032/\025=\353\010\336=]\014\253=\253X\n\272\273k\333=O$X\274\330\257\202<\254\364t;\315\310\226\275v\232<\275\032\213~=\264\376\204=\263\317\247=\025H\221=\340\032r\275\226\341=\2743\316\203\275\312|\243=\0275\301=\014e\026<\253\322Y:f\261\363\274\\\231\377<\276X\240\275\006\002;\274\246\251\326=\355(\030\276\252\201\330\275\321>\252\274.\020\020\276e6\275\275\305\245\264\275\005\243~:\037\1771\274\n\222\301\275\244\354f\275\374\'\345<\256\340\253\272\344\301\347=~#Y<\t\000\257\274?aP=\354\353d\2727\206\241=a\037U<\376\2114\275\332\213\021\273P5\232\275\367q\212=a\037\233;-\311\010\275\246\205*=\013]\314;\001A\226<\245\266\245\275\377\273\374\274&\374q\274\261\327\245\275\310x\307<mj\223\275}\324\252=\001\251\253\275lG\031<b\006s=}\270>=+\001\302\275\366\201r=\216\317\237=\036\212<\274:r\200\275`\302\200\275\035\263\243=\032\003\327;\356\035\254=8$k\275y\272\215<\36493\275\362\010\344\275\354|\032=\341C\221\2755Ss\274\273\202\024;\031j\t\272^#\213\274\367\353\270;\232U}=]\214B\274t^\375\273C~\272\275\370\241z=a?\200=\333$\001\275SlX=\006\363\300<a\277\t>\264d\n>\314HR<\240\376\356=F\314\004=\375\352\271\275\2764\240=\004\331\232\275\016D{\274\315\001\205;\005\374\022>B\306\330<\300\260==\225\217\245\274\034\245{=\254#\222\274\303iA=`\r.\275\204T\227<Bwb=N\215\243\273\215\371\245\275\234<|\275\322\320\032=\211\233\256<\314QZ=\213\255\362\275\242\304\256\275TE\002\276\260\241+\276\356zW=:\355\353<\201\024\256<\226\023e\274E\"!\275Oj\354\274\345&\223\275\233i\267\275\314H\024\272\223\023\357\275#sC\275\r\367\007=\217\237\224=(\321\333;\215[\321\2743\324\014=\013\222\217\275\237\343q\274\315\370+\275\325\364\202=f\204\177\274\000;\204\275Y\\\355=\300M\037<\213W\273\274p\216\031<\r\215\301\275>\343\000=\346\256\033=\3665\257\274\3261\377<\204\202%<\246\177\331\274%\003 ;\312%\030=\263\330\323\274\327\271\244\275\375\003\357\275[\355y=\320\274\036\275\250\321\277\274\253\307\221\2749\"\255\274\374=\257\274\221\201\r\274\021>\021\275D|\034=X\371\247;\356\031\316;o\244\215=\333\374%<\223s&;\205YW\275\270J\026\275V\206\234<\240\260\301=\037\206\215<Y\023I=u}\251=HoQ\275\346l\035\275\0262\225<b#\034\275E\202K<|\202\335\273\270\267\342\275\002\236\000=k\001\363<.\356\310\274\007\374\025=\315\343Z\275<\010\237<\341\372\343\272\222,\211;\\\242\n=\325\301\270=;z\267<\224\022\230\275\312\261\263<j\213[\275oK\270=\300\355\337<n\364\265=\233\374\t\276\245\340`=\300\223\374\275\365Q\310=A)2:.\370\222\274\003\272\306<TT\322=zi;\275\275\301\274<\326Tr8+f\215=\205\361\266=&\035-\275b)&\275\306w\225\275\326z8<\036\327\034\275\027\211\260\275\245\210\342\274\0313\234\275\235\202\374<|\275\233=G<O\2754\2740=\314\240\210\275}\343\266=\210\275\007\274\377\332V\274\314\022K\275\371\264\315:\221.f\275\314\341r\275\322\254z=NN\257\274]\240t\275}\227\000\276\312\224\355\2750X3=\333\306\257\274\263\0220\276\273O\261=/I\244<\034B\212=1+Q<\253\013\033>W\372\252=H@\250\274\211_\267\275\017\3742\275\364i\253\275\363\013\333\275|\357\010:P\200\300\274\205\320\250=l\021\223=F~\213=\n\353\356\273 \262\234\274\247\016\201\275\r^\321<\354_\303<IS\233<\324h\234\275\331:\366\275\344IX\2750\204\'\275\025mn<\2146\364=\331\226e\275\324\212\331=Pt\002\272\245d\303\274\354\207M=X\337\250\275Q\354\262\274\266\024\271<\200\212{\275e\345\224\274\352\002\360\275\213:\021\275\247\021\304;Im4\275\277\334\214\275\353\027\\=G\306k\275\356K\245=Y*7\275\215\250Z=\361\214\375;\200W\006\275\275>\255\274\307\207\305\274N\261,\273q^==\t\')\273\217\301\003\275\252\321\027=\037?,=H\312\027\275I\037y=\242j\002\2750\031\202\275\377\212\221=\222Tz\274\312v\211\274\034\324g\275\270\357\007=\376h\030\276\316\017\014>\274\020\311=\355/\302=\035\\\255\274\335\214\035\276g#\211\275}.\230<\355\270$\275\347E\220\275\266\235\221\275\201\027\245\275h\3369\275QF\324<\r\366\021\276\0178\010>a\317\350=\327XG=\003\373\271\274\226C\256\275\360\222\026=$\307\032=&\224\'\274s?\312\275z\316\227\275\003n?\275\005\251`=\264\266c\274#<E=D^\314\274v\177n\275\236\361$\275\211p\037=e\222\r\276\312\214.\275\251\023\177\275\206l\317\272A\365\215<nu\276\275\353\326(=.\313\036\275\300eT<0\336\231\275\263n\233=`\265\320\275\262\265\221\275^L\371<\030g\206<\333\022M<\255\3446\274s*\207\275p!\325\274\217AT=1\365\031\275\323\274\\\275\307}\001\275\n\003\306<\003\251\344=Q\314\274\275\373\277\212\274\274>\035<u\261\202=\257\225\224\275aw~\275\0331\302;*\365\233<\270\244q\275T\003\335\274\326-\312=>u\326=\200:K\275\312\3652\275\n\252\363\275\303\037\364\274n\244Q\274\244\t1\275\233K\'=\211\233\006=\017+f<2\353\r=\342\300\017\275\373\240\206\275\215\230\230=\255c\225\275\323N|\275\305\327\177=]\021^<\005\223\272\275V\300\020\276\306\345\251<\270^\305=\353j\256\2726\335\272\274\205\201+\275UxU\275\016\256\217<Sp\247=\253.\265\275\022\315\314\275\262\214w\275(\256/=\204\334\000\2757\217\377\274\300\233}\275\325\266\326\2748\323J\274\205\022X\275\264\026\001=_\205W=%\362\345\275\246\004+\275|\372\265\275\007\362\347<!/\225=\3121\307=\025\300\246\274a\300A=\315=\201=\204O\355=\267\342\001\275\254\255\203<\370\351,\2753\242\321\275O\035\313=\227d\234\275^\356\276<?\003\215\275\211\364\254\275wK\217\275\274\335\240<\221\036\037;\376\373`\274\206\245\276\272O8\207\275\203\364\233\275@^\003\275\333\010\205\275\255w\370\274\'\001\016<\275f\n\275\237\360\222<\360c==0[\026\276\245\033\256\274\252\234P<\203\003Z<\211g\273\275|\256\023=\363\214\260\275>\215k\275\234\216 \275\235jc\275p\341e<\222*\276\275e\0257\273\347\326\242<\371f\260\275\255\014\270=\320Y\276=\001\031\335\273\304\026\330\273[[t\274\266\2645\274<\324;=\325\230\337\275\201qz=\2462\321<\262(\353<\316\303\236\275[\301+\275\210\025^\275U\005&\275\346\267\215=\305\006\001=\373\034y\2752\201&\275\257,\023>\364\023\025\275\200\004\312\275\226r`\275/]\310<\371Z\261\274\035\202\252\275\30441=\000\337\216\273\254g\013>\220iY\275\347F\016=\261\361\303\275\336\307\017\275>\"\377\272\204\321\306\275f \324;\271\303\374<\376\364\213\273)\362\230=\313\313\355<4\250\271\275\320\226\205\275\013\236;=\3317\001\275\375\307\022>\370bw\274\207o\327<\350t6;\356Uz\275sx\361\274qu#\274L\365\267=(&\221<\035\t;\275\t\2732=WJ\313\274Y\257\027>dP\226\275\301\344@<z\256\372<\300\220_=\343k(=\235\017\\\275\241!D>J-\n\275QY\265\273\245\314\215=7=\022==\314\332<\013\207\337<\320\266O=\277\335f=<\373L=\231\237)=\360\272\314;\356\t\355\274\007\327i=9fH\275b3_\274\333\250L\275@\212\037=\317\037\226\275\313\316\305<_!\007\275(Ak<\310\034\327;n\243\024=y\201&\273\262\215;\274_i\003=\023\026I\274\277C\352<\255)5<\323^2\274m\232\036\275\003\017\023=p\273\257\275vV\367\275\333\265\242\273\346$i\275\242\035(=\205\217\340\274\255\276\332<.5^\275\r^\246=OH\324\275c\250\\<\271}\025=\364d\376\274(\335\357\274r~\302\274ot\307=\033\302\016=q\362\365\274L\367\035\275\022\264\234\275\024\374<<\033b\370\274\212f\\\275\325u\276=\213n\250\275\335\302\332\274\350\241\322=2\312\336\275c\036\251=D\246-=\344\333V=+\014\020>\026\240~<\214\\\003\276\253\271l=\001\331\303=\371\373\232\275\214\273w;J8<\276\205\215R=\262~*\275\367\\\355=\307\021q\2754\364\322=\351\330\215=\242de=m\314\242=\360V\376\275\254\276\346=t\357\026\275\277\036s\275\202\245\373\274VK\334\274t\361\237=h\237\277\275\351\036\324\274\234\231V=\017v\254<\006\316o\274\242L\367\274\261\006\200\275v\257i\275E3\021\273D\006\204\275\242G\211<\333\277\230\274?\220j<X\350\253<\207$\222=\264w\272=\014a\366<\2454\304<\206\221\"\274\313\333D\275\3510\232\275e\0206\2755*\277=\245f\262=\344\323-:\217\"j\275R\277\360\274(\260\343\274\ty\250\275\317\316\014>\316,K= \377P<\206\000\n\276\t\220\272=\t\241\214=\341\270n=\343?\332\275\243\275L\275\347\250\216<\327\252\202\275\273(R=\n\336{=TX\327\275\352\362$\275K\233\351<d\277\253<\365\016\272=\373[\336\275 ;0>\301\215,\275\351\202\343=\'U\'>\273\361i<\355\265\033=j\266\027\275\026\376X\274C\006\345=\343\003\210=Kq\275\275\261\002/=\320g7\275\247\307\247\275\\\\\004\275\252\341\302<\275\207;\275\t\211^>\002\371\350\274\336G\217<M\232\340<\227B\301=\224\034\212=\264z\205\274\336\314E=\344\371-=v=\372;\254\010\275\274yw\345;? \262=\260Z\210=\332[\342\275\036r\t8\270\206d<\0068\203<\331\213Q=V0\260=\265\243\356=H \t\275\3325\206=\030S\302<z\001\340\274\200\337\364<[)\230=\212\'X\273a\212\002< \025\307<\303:\257\275\234\216B=W\32209\027\363\220=\246Iz<\213\336\030\275\021\3155\275\034\275\360\274\365,\250\273\035\275\036=\364,+\275\202/V\275\240\203\247<m\006\032\2741\205\257<$\277\204\275,\025,9a\244n\275h\336\345\275%3\273=?\305x\275\204*\000>0%\263=\357~\007\275\352\360\375=Q\014\245;=\366\343\275`\357\n\275!\257\261<7]\323\274\373\224\376=\016\311\344\274 T\304\272\225\365\2519b\302^=\317\343\005\275\374\033\003:\233\3205\274\023\354\270\275\232Ws=\255l\"=\376A-=[\301\261\274\367\010\271\275\243s\016>y\230\226<a\330\220=\207\262\347<<\226\337\275Ov\025=W|\026=\262Y^\275n3]\275\304\\\014\276^Z[=\274\177\254\273\214?\330<\232\370\372\274\241\344\212=\303r\242=\226\001\346\274\\\3320=\001\004\360\273\222>7=\033\327\014\275W}\227<\365\315\250\273\375\372\250;>\214\t\275\374\200\221<\200O\246\274\211\315\320\275>\034\037=\246\023`=0\035\210\275\211\337\033\275~\200{\273\272\2475<\307\334\311\2734(\212\274\230v/\275\272%\365<Y\312\251\275\\\361h\274v)S\274\337\317^=\254\256\000<;\037-=\342\216\224=\267\224\300=<)\270\275\367\226\233\273\026h\334=\264O\001>u;C\274\313_\311\274\317\261\033>\210\271\246=Z\311\006\276\301\203\243\273\304\256l\275\232t:=\210C\224<\217\252\246=\257xd\274\225\267\033=\342\314\313<&\0009\274MB\021\275\245/\246=\326)\220<\265Zx=\312\036\323;\320u\262\275U\244`<\'\253x<nw|=\234\211\260\275\006\273\361;\010\205\377\274\302\302(=2!\2678\2767\207<\375\t\n=\217\005)=\241\347\3749\313\204\216\275@S\274=7i.\275+)\321\274\031\256\342\274\207a\026\274\030+\037\275\305\274\243\275\351^\346\274r\252\317<\263\232\r=A2\202=%\376Y<F\3101=\313\025\037=\022(\3639\363\246\276<y\253\301=r\272\005<\321\343\354=\246:\303<\005m\207\2746&\n:Q[\275\275{F\373\274\374\350\327<y\370\004\276\247\036\317\275\310f\016\276\355V\304<c\rb=\200w{\274\017\251\n=\377\300><\316o;\275b\000\325\274\252 \331\273\240-d\275\367h?=\321\226\"\274\301\3758<_\231\"=@.\215=\237\260\207\275\275\321\316={\243\234=\355n\305=\204]\223=\026\206/\274\254d+\274\022\3421=\304_\214\2753\372\n<D\3655\2736c\211<q\3070\275\234q\254\274\277\310V=\245\004S;|\344\364=\312\\\224\275\250\200g\274=t$\274\025\263\241\275\204\000\203;23\362<\356G\\\275\342\213\224\275n\371\251\275VT-;\261\361\225\274u%\344<W\274 \274\365\367@=r^\270\275\347\260\'\275T)\215=kJ\255=B\363e=q\346\'\275p\243\320=\205\000\272\275\326\341\340\274_\003!=O\223Y\273\207zT=\016\247\273\275\214\365N\275\247#\014\275\005W\030=\235\010\216=d\347\263;,\020\261=\030\n\004=,\306\252;\2441M\275\353X\357\274\347\275\013>\263\226\347<i\372\000==\214\232=\235,\357\274;\332\243\275\003\303y\275\322\242\345=\337|\236\274\370\251\314=\017\253\225\271\356^\342\274\035OI\275\032\266\354\274\320\205\324\274\206H\205\275V\233\005\276\276\266L=\037e\375\275s\207\204;md\225<\246\221\006>\206\316E=C-Q\275Y\362\236\275G\341\001\275\356\034M=\273\354@=6\255\020>E\243\232\274/\372p\275\332\025\347<>\215\301=\212\256\251<\271\037\242\275P\316V\274\230\315W\275c\230\236\274\224\010\200\275\354q\215=OM\376\274|\266\326\274\240\313:=\203>\263=\255\217\322<m+V\275i\324\277\2742\235*\272\332\227b\273g\037\274=-\333#\276\275\210\324\275|\257\367;\224\355\254\275\277a#=\223\324\215<J\366\033<\365\201F\275gs\204\275\333\317\372=[\001\013<\327\255X\275s\177\230<\361}\026<8\373\232\275\265\232\310<n7y<(\003\275=\247\030\212=\264\262\252=\036r\275;\354\3411\275\224\002\214\275\324\030\210=\330\367\334\2754H\360=\341\3053=\3446==\310\t\375<\276\013 =\255\271\221=7\016\357\274A&\213\275\377\313}<\357\344\302=\361\0069\274\\T\027=\276\3521\275\366\363Y={\246\201\274\340\247j;1\351\236\275%\221.\275\307@\345\275\276\322\035=\332p\251<i\021\350=q\216\232\275Ok\260=\275t\255\274\323\270H\275\206\333!>D\004\325=\251\311\275\275\3747\004\275\274\232\211\275\317\346\336\275%S\322\271\343\330J\272\376\273\240\274\375\343%\275!\030V>3\000\003\276\213\213J<\205\200\226=L\363s;\206\2775\275\377\026\232=\325\214\261<\362\323P=\222\343g\275\207z>\275\360\006\203\274\rk\263\274]{\320<\223\376\371\275\0014R=R\024X\275F\024C<6a\205\274h_\235\274\355k^\275\315\256\023\275\256r\376\274W\324\276=\346a\340;\357\215\317=Y\021\336\274\361\020\t\274)\347O\27480\204=\037%\222=z$!\275\343\3234\275^EQ\2747|\201\273TM\260\275\037B\366<\206v#=\377\032_\275^\210u=\311\324\306\275\324Ui=:\352\213\274\360l\032\275Fh}\274\3001\375<6\000\225=3T\257\275H\245\037\274\215\177\206\274\033\020\014>\220\203\004<\335\236`<\322\ra;A\233\004\276\375\370@\275\243\213\317\275R\032\341\274\266\235@=\277\304\004\274[\000D\275\177\242\340\273\331\315E\275\375r|=_\266\375<*\367R\275\231\367C\275\205V\027=\231\2175\275\243\251\010\275qV\305\275\311?\252=\210\222x\271N*\223=\361\216y=\320B\211\274\316\242\241=\001ET\274\010\244\263\274\333|\001\273\263\314\317<\275\001\315\275\252\237$=\31456\275Zq\270=t\025\0219\200\270\214\275\355N\'=\033\366\234\275\312\377g\275]\230\237\275\304\316\333;\270\005\367\274)\022\211\274\271\t\303\274Sy\266\275\373t\373<\312\324\345=\272\241\027\275<R$\276\024\374\023=\323h\275:4\224\017\276F\206\317\275E\"\301=B<\261\271\251E\326\274\275\227\236=j+\202=9\371\302\274o\265\350\275\253\3653;m\232H=+9\202=\220\377\355\274\330\203\313<\227\236\250\274\017\323\346\275n\"\204=\262Z\332=-\177\004\275M\272<\274k,\033<\250Z\000\275\207=u=\244\261\303\270$5\206=S~*\274\0177\313\275L\270:\274\256\214g=\317\222%\275\3221\204\275\265.\360\275\215<\206=\034\337b\273+\322\206\275?\220U\2752\321\"\275o_\361\274K\354B\274;\277\322\275M/w=\316\250I=\250\025\217=sG\003>\004\017\r<\370\006\210\273\270g\242\274\242\310\362;\324\021\252\274X\277\247<\315\365\237<Wi\253=\230D\360<\234m\376;\330=#\275|\251\320<\276\322\272\273|@\231\275\205\001\257\272O\334(\275U5o<=\231\240\274\254\004z=dc\020\275l\010\261=\221Ot=\"\014\244\275wQ\256=\016\364\252;\374R\177\274\010v\020<\223r\314\274\354\262\221<\346\305\207\275\245\325\022\273\2105\3439\245\351\227=\343\324\271\275\000^e=\2575\235;D\200\023\275\316\223Q=\332\361\324<\221\354n:\030_\n\276\351l<\2759\267\247=A\377\373<8N>=\223\310*=P9?\275\317<\217=d\342\003\275{\026\250\274an\255\274@~\231=|\216\342\274\r\033\034>\267\241\304\274\301\200\305=9Zk\275\366\236\005=T\330<=v\223\214=\246\373\224\275\000r]=\225Q\234\274\370\374\002\275\3249o=\265,K;\226d\362\273S\"[\275\312\247~\275\213m\033=\321\356\201=\204v\372=X\266\260\275\367\250\276\275gT\272\273\010\370\200=\t\233\344=\326\245-=\021\262\021\276\235\245d=\nd\305\275)\363\006\274\233~\237\275\312\341\253\275R\233\371=\271\274E=\"\t\323\271\030\377\236\275\206\313\244\274\336\225\257=CN\362=\254Rm=\334\017\"=;(`\275e2\255<\010\206->\264>C<\354\341@<\370\210y\2729\254\211\274\267G\212=?\003Q=r\223\217<\254`\007\275\365\327\256;1\234\234<Ox)\275|b\243<p\201\206<\230\240]=\002\335\324\275D`\274\274\226\013\217;PD\365=\204\355\267\275\004\203\030\276\341Tn\275\212Q\304=\265\237\354\274\212rx<\332uu<\010\262\014>xs\031=\271\3059<%J\251\275\250\264G=\364D\035\275`:\313\274e@Q\275=p\223=\033Q\210\275\252F\221=\344\202\223=a\360\246=\375G$;W\010\027<\335\"\260\275\343\330\210\274\303\356\024\275D\001\363\275&\374-=\332I\225=\350\215\002=q\001\331=oS2=\255\226\016\275k\001\217\275\334\0007=\234\035\"\275\357.\224<E\372\265=\340\234Q;T\353E=\252\250\016=f\324\342\274\222\301N=\250k\365\275u\355\345=\275\n\036<!p\030\275\250\024c;\233\273\204=\337L\201<\232q\305\273\271R\343=\n?Z=[\3321\275\372$\332=\234\252\252\275\017AW\275L\n\270\275\244\303\327<\343\224m:]S}=\236?+\275\304\310\240\273\247\237\201\275\025\017.\275\225\212\t>\317l\226=\371\341\036\275\330\270\363;\317\362\231<gh\325<Z\222A\274\363\203\003\275\204E\232\275\247U\251=\230Q\010\276\215Sj\274wc\034<\245\017\225\274\2061D\274\\:\333<\335;\017\274\n6\233=\345k>=x\007\306<\363\024\254\274x\250\n>)\211\310=\365\177\233\274\212\371\251=&]\260=\306\261\224\275\347\355\245\275\005\2470=S\023\364\275\266\225\033\275|\243\267\275\232X\236<\271\\4=\014\253)\275\305\232\010=\311\347\230\274t\353\241={\001\003\275\225v\244<\255(\353\274\376\313\211\274\335\266\374\274\300\366U\273z\312\017\274=\234\035\273p>\t=\226\375\256=Pc\024\276@\276\023\274\241\3077=\242\033e<}\000y\275\207\301\247:P\0254\275\'\365.=q\234Z\274\256\367\021=\251\'\036;\340\213\304\275\211\353\241\274\351\006\374\274\247s\322\274\307WK=Zc\024;\254\370\226\275~\344\030=\356 !=\344\245\001\276;<!\2758]$>\307\367\277<\241\243\005\276U\032K\274\031\336\037\275\375\001\334\275\005\200i\275\326\246\377<\345H\372<\243\217\221\275\222Nl\274L\270,=\247\261\364<\367FL\274\2644\010\274?\'2\275ap\217=\343\312\207\2754\354\272=p\265\310:\371\3775\275]\237 =\257\305\247=\001\354}\275\324.\344<`\370P\273\302\023\313=\000&\3379\223M\243\275lv\263<\211\244\216=(\201\220=X\351P8\002*\300\274O\375B\274S\352\207\275\336\221\023\274\303\222\317;kU\311<\351\215\237\275\257\206W\275\241Y\024>\207\305$=nq\247=\3573\254\275\351\312\240=\274X\377<\255\217\261=H\030+=\272\235\207\275\341\201\243\275\331\260\204\274\220\302\330\275^\350\226\275\243\235i>\231=\254\275\237\036\2618\013\'\023=\020`\232<\250\032\020\275\n35\274\313\204\031<\235\237\366<\266.5\275d-\264\273K\203\251\275\362\316\313<\330I\276=\030\325\375\275\330\306\212\275\213\237?<N*\212\274\305\326\207=f\224\274=\227|F\275I\274\027\276\337A\336\275\237\315\222\275;\013\216=I\272\374<\377:\224=;\254\352\274\316\243\036<\t(\266\274\021\276`=\005\212$>\240\310\002=Q\374r\275\336\265*\273\000\247$\275:\276~=\017\202\205\275\302\336\351\274\352\340\022\275\010\336\375\275\211\001\303;\261d\374<b\224\301=\307\222\306=\332\022[\275\313\037!\275tBk\274IQ6\274\377\232\225\273\007\270\314<`_\023>\347D}<%\026\035<\013-(\275+r\213\273Ua\213\274\222\375\333=H\005\213=\207\001\034;\376,\335\275\253x9<U\321\007\275\223@\201=\327d/<\327\217?=\230\355\251\275!\353\322\274\243\365g\275\017\246\206=\321&Q\274\026\"\247\275\276;g\274|&\211\275`5E\275_\302\201\275Td\014\275\024]\020\276\333\177Z\275\342[U=\240@\301\275\r\r\277\275\375XV\272\263\272=<\244E\016\275\341n\274\275\274\341\273\274nM;=\246\216\302\275;%c\2759c-=\326\252\016\275\252\245\204<\237l\251=\023\360=\274\244\312t=\227\364Z\275\020\005\340;a\305\243\274r\215\000\274#\354\326=l\031Y\275\303\246)\274\257\341\020=\\\246j=\254$F=\336S\363=\311\021.\275:\355\201=\322\026\252=3BN\275\365\255\304\274\275\231\216=\322\314Z\275\363j/\275DhO=p\212H\274(\262\332\274T\314n<\rj\330\275\023\240\340\273\354\314\310=\202\255\302<\217\273\267\274GU\310<\276\373\223\275\376\205\025\275\000\3122<\224-8=\305\224\365<\374`M\275b)\005=z\206x=\000\010\266<\261,\262;\271J\020=\375F\264<\271P\315\275\t)\324=Gl\177\275\372\300\223\275\325=\t\274BYc;\347<\320<:w\246=J\204\037=\275\335\344<@\214q\275\245=\212\274\314\256\037<\242j0;\376>N\275v\343\005=9\221\264={Sy=D\213\352<\353\353\241\275\263\033\327\273g7\326=:51<\235\256~=\213\251\021=\253\372\006\275|\247e\274\023\365\240\275K\227\346\274\362#\r<H\254\010=-n\324\275\256\307\'\276\313\330\267\275d\224b;\217#M\275\036\007n<\240\203\343=[kZ\2750\357=\274lfM\275={\004=\253\341f=\2540p<\251G\"\275)\003!=\006\322\030<,\017\373=O\351\267<\214s\372<\210`\302\275)\234}=\255p\242\275\340\362^\275rh\030=|Yz\275\210\225\227\274\237\014\275\275\200\341\210=\342\"@\275.\252#\275\306\033\313=A\316c\274y!\000\275\2472@=\313\243}\275$\375+\275U\363_\275\002H\341\273\334\013h\275\256 \277\273\016\232\206<4\221\334=u N\274T-7<S\007)\274\377\344;=\027LN\275gj\251=??\342\272Q\202\227\275qBw\275[\210\214=\216\266[;3\013\207=\025s\306=xM\221\275\017\374\303=+\215\375\274\377\230\007>\275\256\004\274\367\261\255\2753\026O\275\337\013\322<P\333\200\274\032{\235=\031UB<W\\\261=bF\206<\300\360\245\275F\341C>\003\334~=\246+A\275u\243\010<\340\243X\275\357A~\274Sgv\274\373\003\275<=50=h\335\366\274\344(L<=\007Q\275\'\242\017\274\010\251\371<\357p\241\275R\202\245=?\266\372\275\356\177\241=2\377\261=E|\247\275H\n\237\275Z\261\272\273\334\261L\275\221\312\256=\302&\357<j\261b\274s\241\205\273H\371\324\273c3\316\275\006oC=\246\353\210\275\217[\274\274\361]\231;L\325\352\275n\001\243\275\322\306\214\275\032D\t\274\240\240\350=T\272\374\274=M\020>\370\262\311\275!^a\275)Yd\275\355F5\275v\223S<\231\272V\275JEG=\021~\221\2741|%=\325;H<\255\022\225<V\370[\275\343<=\275M\331\236<\347\311 =\274\350\360=\333I\255\275\333\374G=\2606\253<\2267\217\275J\nF=\272I\273=*\230\004\273v;\316</Pc\275\252A!\274I\266\302\274\006\233\243=\250\022\243<\275s\301\274\312)\363=0\307\364<w\323\033\275\020yO;\".e\272\232z\264\273P\234\344\271\356\\\205=Z\206@\275\030\037u\275q\177\262=\226$V\275\303\262]<\303\312\205\274c\232\035=?\254\237\275j\023\017\276\354\013c=?\374\244\273\306\022\r\275\214z\237=\321\334\305<\322\275\035=4\213j<\252u\275<x=V=\232I\261=O\277\236=\013\367\327=\351\332\272<\331\033\030>\323w\024<\236>\246\273\234X\247=w\023\231=\241\251\322<g\347\022\275\275\007\313\273\341\244\034<\2324\276\274\335\224H=\352j\200\275%|\017\274m\007_=\\\217L\275h\326[\275\257S\333\275\301\252\221\275l\023F=\325\014\362\271\252\234\214\273\352\036\225<\375\323)\275p\236\361\274/\004U=\265(\020<|\353+\276]R\317\274\235\361\253<\255\'@\275\362\"\017>\340\032==\340\310M=d{\242=\370\376\217\273\n\002\262<\n\276\217\275\3552\307\275\264\002\214=D\256\272<8\002\310\274:\312\203\275V\202\216=\225s\007=\332\336\035>Y]\352\274X\327->\354%\222<\245\323S\274m\230\030>\344xD\273\242\374\233<\322\330\264<\360\024\'\273\"\323\022>\206\217+\275j\021N\275\341&\016\275kN^\275\325\270v=i.\206<z\341a=\313\207\036\274\262\023\256=\323x==\303\223Z\274\030\320\250\274\314\021+\275b&\377;\375z\373=\202=\005\273\333$\330=X\256\026\275\326\310+<\337* \274\263\346\202\275\231\230\245\275\241\245\320\274\370\222\032\274\271\250\310\274\003\'O<\267\330\312\275\320\367\025\275\"hR<V\002\324\275r\000\255<\023\036E\274\252K\246\275?&\371\274 \025\316=a`\033<`X\226<\342\276\036\275\205m\247\275\350\355\023\275`\305\203\274\010\372\242=\'=\332\274b\302\237\275\212(\266\275n\304\247\274\210\262?\275\322\375\027\275\002O\367<\007\315(\275I\226\032\275<\334v<\361K\244\275E\300Y\275\210#\216=\341\371\371\273\301\225\265=6|\\\274\352\335\275\275\256\"!\275\263j\305=\362v\321<\'\302\246=\032\016o\274\236\372\363<7A\223<R\302/\275\251\t\"\276\241y\247\275\033G\350\275s\225\"=\344a4\274F?]\275\234\311\261<\356\225\341\275\246N\230\275\276I\302<\225\335N\2745q\r=\362\236\017\275\236\255\217;W\252\224\275\301F^\274J\023\204=,\200\024=\346\232\216<\252j\216= \000Z\275\201=\302=\274\3135\275\033A\213\274qv\367=`\331\024\275\321\027\316=\307\351\312\275\354$\261=\030\"!=\244f[\275\344}\"<Xw\223\275\314W\030=.\017\312\274\303\331x\275\276.\020\275\027\273\240\275U\034\272\275\024w\352\275`\375\277<\246\364\002=y\316\210=kV\256\275\003L8\275B\310Y\275\277v[=_-g\274\2049\252\274\231\305\310\274a\236\265=\353\020/\276\275%\264=\035Z*=\n\354\032=N\311B\2755@\031=\273e\277<\315b\326=\312\'\356\274\030\262\243=\360n\020\2756>\235=\202\030\215\275_/\314<\003\273L=\257\346\005=\342\236\231\275\317dj\274a\371\270\275\037=\246=C:\214\274v\246\356<\322e\233\275E\200{\274e\273\316=\004\370\236=\214\346\t=\364@r\275\014rO=\3466\230\2721\310\375\274\347\246\243=\330\"6=\220\375C\275\254m\000\275l\234\313\275\014\217\320\275_\311\207\275g\365s=\351\\\345=\362(g\275\221>\346\275\377\251U<\330\276\273=\200\307\310\275\241\022m=?dx\275\00773\273{cT\275\023(Z=\013\331\244=-K\014\274\037\274d=\313\245\033\275\351\240G=\001\255\200=;I*=\257^+=pPK>\233\307\201<\235A\212=\262\t\036\274\342\010\260\274\245\036\273\275\254\360Y<\271Q\2228]\212\255<heL\275;\254\232\272\312\2305\274\032[\211\274\241\000\240\274\304:\252=\017W\344=\223\177\274\274=\326\217\275t3J\276MxQ\275\032A`=\222:\177=I\002\022\275\001\007\316\275\312\313\016\275\311\003\206=]\356\366\274\237&\255=\245\"\245\275O\301\324=w\221\224=\030\0067=<\320\253=-\256w=\033\350\017<\227\360\372\274+{\240\275kR\004=O\035\222=\340\301\374\273\223-\257\275\257\343\201;\316\302\250;Y!]=\344\361\034\275t\214\244\273|\220\036=\200\203@\275[\352\213\275\234\306\037\275{\300l\275V\205\220;\035\270\316=\024]\025=\305\036\306\275\242\335]\274\004\206\036=\343\332%=\022\210\374=\374C\343\274zY\367\273\265%A=\251\364\220\274\272\352\375\274\212\266\021>53\n\273\030\007\346\275\000uK=6\340\006=\352\243\203<y\007\347\273\n\337\302\274\0205R\274\374\204\311\273\036\025`\274\372\301>=|8\327;/\322\336:\2342h\274\360\034\024\276\276\217\201\273\310}\370\273\020\350\200\275\363l\233\275Z\302\016\275\277\234\344\274;\243\206=2\255\307\275pk\214\275\264\025\265=\032\371,\275\305\'o=\337)\374\275\326h\304\274/\301\252<\322\366\244\2752<\021\276X\264t=M\335\263\273\\\010\311\2742\253\234\274\303\017j==\336\222\275Ll\226\275\345\224}<N&\037\275\273\320<\274\n\277)=o\323+>\257^\251\275\315O\000\275\362\361\320\275w%\337;\037U>\275;\020\266\275\243\347\317\274v\327\014\274\306\247\221\274\345h]=\215c\000<\276C\376=F\032\354=\331\247@=\317]\324<\353=c=\234\322\266\274\203\2029\276\301eW=\321\242\244\274\020c\347=`lY<7\233u=5v\225=\331(\000>6\334\303=\230!\205=\234\326\216\274r<\237<\235\333/\275\201\275+\275\304y\347\274-\354X\275\354\302\"\274\0321\327<\t\227~;\240{\273\275\266\235\006>\021\224K\274\323h\271=\025\305\235=\222\205\277<\326Q\251\274\216\177\273\274\250\243\350:\000\334\366\275\241I\355=\310\361#=a\377$\275u\375\271<+\276\177\275Es\252:\3541^\274\210\205\205\275k+\237;d(\306\275\214Eu=\236@\221=\277L\263\274*\271\207=\343\371\036\275<\215S<\320\267\216\274\206\323n=\022\032\345\274\356)\227\273\306\217\207;zl\244=\316\210d=\337\361\247=\262\251\216\273\253\234\230=j\254\010=\235\231o;\333\211\016<\006\303P;\354\010i\275\335\277\345<Mt_<\026c\305\275\374\010X=\324\273\273;@q\203=\037Hl\274\341\016\263=\323\316<\275\321\362\340\275G\023X=\274\031\226\275\341&s=;\332Y\275(U\227<K#\314\274\2738Z\274\325\377<\275h\277C\274#\320.=j;7=\320\r\231\275\255\371?<\004}]\275@\001\274=+\035\377\274\025\025\347\273?\251\016\275\276\240\203=\250\301\204;\3160\330\273\303\217\254=\030A\311\275\351\360\244=t\026\036=\027\317\013\276&\345\341=S\351\273\274\376\343\364=\260\305\317<\212\246\224\275\301z\227\275\034\212B;\345\363g\274\213#\223\275\n\250A=\303\236p<I\363E\275O\262\016\275c\303\016>\265\354\246\274\330-\200=\310{\001>_\204\t<\003{I=v\232\244=\362b\206\275\3022\004<\022#L=\252\350\272=\000j\341=\242\300\007=\025hB\275\343\210h=\320^\277=\'\272k\275S\340\312\274\361\321\006=\250x\306;/D\341<\207\215\344=:\031\315=\314\220\310\275W\262A=\320\265)\274\232\313|=\251\271I\275\370B}\275\343)\017\275\3279\200=\343\370.=y]\347\274\241\346\020\275G\250;=&-\005\275\216\214\224\273\354\304u:w\004\367\274q\200\362\275\1771\210=\257\032k=\202\004\004=\305:\021=A.\t\275\014\303><\254\220\036<\302\271\306=\314\321w=\031;\301\275r\343\212\274\253>\023\275\251\205R=\345\202\004>[\321\230\275\372:\326\275\237\261\365;\230l\254<\3301\014=w\351\310\275\341\357!\275#\220\016=\241\353\210<_\270i\275\320O\225\274&\035t=\211,1>\357HA=o2\312=q\370q\275U\204\177=K\\\003\275\020\210\266\275j\335\205\274\271\016\237\275\362\254\t={\204]\275Y\2269\275\260\317\034=Y\2001;\272\234F<q\236\014=dD\321\274Z\323\243\275w)?;\337 \361<c] =\204D\217<\'\301l=\341\266\036=\333|\010=[\307\364\275\310\365\364\274{\327\361\273\265\005\262\274w\004\225\275\004\2036\275h5u\274\363\223\365<\200\204g\275P\253\256\274\242\002\220\275\222\022P=\004\214\215=q\352:\275\367\314\355\274H\343\000=\211\304q\274\\\023\355;\033\220\025<\313\252\240;ko\n\275D\340\207\275\332\036\221=\310\3349\275\257\201\023>\204\350o\275\306\221A<\306\372<\275z\223\274=t\242\217\273\333\035\217=\031\321\003=\326C\267\274\2000\245=}\343\233:\037\022Q=\347E\304\274\236\317\243\274\375\272\212\275\350U\224=\353E\353;\367\227/>\300\341\215\275Q\273\001>\023\315\372\273\276\331n\275\211\263\345\274\204\272|=\327\352]=\260L,<0x\310=\006\035\337\274.\360\303<r\274H\275\341\344\254=\232\002v\275yf\331=\334\026\250=95\224<d\273\001=\034\264\361\273\\\340\230\275`\201\357<\327+\241\274\344C/=&C\334=%\n\336:<b\215=\350\023\255<S\n\"\274\360\036\312=l\315r=\340\022\225<\036r\r\275\374\243\217\275\320\t\265\275\356^|\275\021[A=\217*9\275\266\267D=\021K\221=)\206\336=\352V\302\275\242\216\001\275\250z\333<7\256\227\275BWi\275\36547\275\242)-\2748Z\236\275Dr\371<\2665D\272GSx=\351\202E=\017_\255<C\323\215=\313\366\262\274\026(\227\275m\336\220\274\377R\327<\240\"\004>\3113\242\272)\250\256=\251\n\335\274\253\014#\275\244\000%=\361\321\245\275%\237z\275\317\262\317=\265\217\242<\210\013\027=\260x\032\275\201\332\330=|\241\013\275\177\005\333\275c\030r\275\265\353\230=\202M;=\362A}\275\242M\007\275\262pE\275\306.\362\274\223\371(\275\177%j\275\300\216\351\272\263\257v;l\353\237<\204i\025=\324\300\224=$Uy\272\266\001@=\230|\r=;\264\032\2760H\226<\323h\367<M\'\307\275w\331R=~\017m=\205\302\026\275x\307\005=\037\337%>\261\037\333\275\205)<=\204wM\274_\034/\275\014\000)\270{\311\235\275\241\271\316=\375\032\222<Qo,\275\356F\242=&#\373;\344\352!\275w\334\2729V\0328=\366\342\302\275\".Q\275~\316\237\274_\370\341=\250s\034\275\250eQ\275\305D\003>X>\017<\213\264\363\274\245\367\026\276%i\305<\274Tl\275RMR=\362\026\017\275\ru\260=D.\334<\262\320\312=T\243\233;\202Hg\274 \001\207\2755U\373\2721<`=\201\305\204=X\354\'=X\211\361<&\341\210\274?\225S\275\350|\277<\235I\307=\266B\326\274\271\001\256\275\326\342C=k<\216\275F\250\236\275\215\270\323\274\376Iz\274\277\014\312=\205\022\321<x\206=\275\347U\311=4\361\013\275\215\305!\275d!\221\274\024\330\260\274\277\302,\275\345\334\326<q\313\306\274\321\323~\273Y\244\321\274:?e=M\014\217=1A\276\275\357\301\354<-\030\332\275\271yD=\360\232\353=u\2373\275\232\365\373<\312\204\261\275V?\367<\272l\023>\220\007&=\'\204\250=2\013/<\347\232\210\275m4d\274\326\006\233\274|\376N\275\270u_=\341\034\370\275\261u\211\274l\"%\275h\036\374<\262g&=\031\356\355:\371\201\022\275\234\223!=\246\323\343\275\237\2558=\0315\022>\210\267P=\037Gw=\033\006\355=\321\024\262=\\\344\236\274\231Rr\274\252\035\251<\202I\251\273\261\001S=B3\001\274F\251\t=W\374\372<\252\255\273=C[\260<\241\372\210=}\357W=\210\200{=\r_\270=a\202\246\275e\217\322=+\314\264\274\364\336\230\275\210\246\367:S}9=\nb\034>\221\361\275=\221\\L\274\007\211\000\275\252\351Y\275\013\r6\274\315\232\310\275\200\2655<\332\006\341\275\"*B\273\364[W;7\264\264;\016\030\002>\273\360\355\275\254\374$=\205(&\276\022\177\206\275\247\022\204\275\002\311\006\272\374Q\207\275\035g\240\275\256\3503>\002\311\244\275ql\316<\225\221\263<\324\207r\275R\216\n\276Ez\213\274\220=(\276g\213\307=\321\331M\273\244g\331<\303\367P=\303M\335;Vo\027\275\302\t\000\276\"\324_\275\362\373%>NE\233\273\027s\354:\364cP\275\221e\365<3\336\235<\214\363\r<a\021r\275\025DJ\2753\321f=G\242\\=E*\201<7\304\000<%$\037=\271\315\037\275\376\213\005\2756R\005\275e\263 >\313\r_\274\014\207\277<0\266T=>#\245\274 \220+\275\366\004\326\274\210\313\201\274\272\260\221\274\335\270\n=\351\026\031=\027\255\265=\031K\200\275\'\325\213\274\0105\227\275\026ma\275\177\335\217=5\036_=X\004\214=\242\231(\274\371\265\200<\t7\";\205\320\302\275\327\357\242\2753\352\265\274\037\257\231:\237\231\240=\020\003\232=\262\272\232\275&D\030=\340\032\\\275\374\234\245\275\246RK\2748\247_\275|\252J= eQ;;2k=D#\341\275\226N\206;[\312\240=J\213\377=+TB\275\366\310;=\361\267\212\275\236v\321\274\202l\304\275\331\270\036\2750\360\013=\363\354\023\275\232\247t<\207B\177<\225j\210=\\\206\221=\0313\215=\315\217\264\274\364@\035=\220\243\234=CO\r=e\203\037=+\327\005=\356\005\223= \372\000\275\305\370\267=(\216\233=\373\342\"\276|\017\362<\010\031\006\274s\205l\275\341\313\305\274\354\234\230=\035\355\024>\225\330T=\303\241\305\275\320m)=\365\360\035=,\314\375=F\212\310;\322E\200\275\001yA\274\234#\035=9\351\016\276\270\n\316=\352e\257<I\361\003<\321\264\225=\217\014\266=\364\265\224\274\267%\204\275\275\337\264\275\366\230\006=\313\023\266=\324\213\237<\252\373\266=\271u\325\275\037\241\266\272\246\213\247<\246+O\275\2429\256<\252\261!<B\'W=\363<\030\275\337\266d=\254\026\241=\324\233\217\274\014_:\275\036t\211<|\360\311\275\333mi\275\275[}\275l?\r\274\325T\263;-1\300<\352\026\n:\341A\033=E\202\346<k\211\306\275\311\033\203<3\221\310=\206T\337\274\223*\217=\032\336\205<d9\323=v$7\274l\362\222\274\034<\207\272Y\301\240\272\243\327\374=\021\321\245\274/is\275XaC\275 >\372\275X \365<Dg\252:\360\253\026\276\235r\302\272L\215\252;\352\010\347=C\232\345\274\322A\266<\217\317\316<\0376\261=f\343+;3\205\254=`\371Y=S\304/=\202\214\243<\226\274\201=y\030/<\341\360\331\273Q\340v\275\023\220\216=\223\253X=\220\357\334\273_AS=\234g\r\275L\017\266=]6\224\275\225P\355\274\026A\014=\222#;=\000\227b=\025F\331\275\325\004I\275\343\324F=H*d\275\222\"y=\320B2:O\351\250\272\020\323\'<\316\376\211\275<\200\025=s\241\004\275\250z\317</\255C=\270\022C=\206\263\212:}/\206\275\323\246\347<&\364g\275\331\r\271\275\355\240\224\275d]C\275\220\214\266=\354=\037\274h\014\033=\345a\202\275L\325B\275Fsd\275\241$\365<\362\203\357=\300z\020\275\013\300\205\275\222\216\307<\224\231\243<\232/\252;\335\334\006<%\025\220=\251\343\214<\263]\304=\214DV<_;\246\274\353\234\232=\221\346\207=\020&\251<\250\257$\275\272X{=Y\023\234\274\214\017S\275{\303\304=7n\036=|\rp\274\354\004L=V\327\341\272\202\203\371\274P\'\241\275A\301\256\274\031\241\017=8\034\214<\224[\350;K\371W\275?\022\222=\031\321p\275\200 \205=uN\r\275d\321#\275J3\t=N\370==D\032l=Z\'\340;\005\272;=\377\336O\274\020\004\212\275\320T}=\204p\327\273\250\205\014>\212IC\275\226\355\201\275X\004\336=\236\256\247<#r!= \371\334=w8\234=\241/H<\202\227\211=;-\006\275\271\216+\274B\335\305;\343\025\037\2760\343N\275\223\000\311\275c\302\216=\013e\316\275\010\225d=\334\222\217<\304\223\217=\226\217*\274\257\014\027\275.\320P\275\264\351\350\275\315\321L\275\324\234\004\276\301\027\222\275\321@\220\275@\244\036=x\254\247\275K\276\256<\272\003a=w\255\263\273\2542\023>I\315\314=\303\242\326=\027\2639=\342\224Q\275\003Ka\274\nUg\275$\206\002>\304\021\257\274\267z\244\275\310\000\037=\205]!\275l\352*\2755>\331\274O\227g=\224\314\232<^\236\230:\025\026\177=\027G\002\276\014\346\345<\337\346\325\274X\244l=\226\277\007=\321\353_\275\220\210U=\325\227\302=\200*\270\274\376VZ=\020\255\221=\215\240\214\275\214\224\007\275\312\223\314:\224\345$\275\216\261\375\275\243\201\001=[\372\204=Iz\257=qM\325\275\217\251\3279\005\312K\274\350n\360;\212\311\037\274\3104\371\274\300\306\365<\232+\034<\223\0333\275\006\367\373\274\243\362\273=L\302\372<3\261\t\273\377JX\274\303\274\027=S_\207\273=\030\257\275\256\3532\2750\310\312<\375\346\350:\360D\337\275\210\027\225\274V\212!\274\257;\002\274\220\256\320<\204\253B<F\r\004\276\n\315\301\275\246\004\001;}r\262</\006\214=\007&1\275U\366\304=b\\A:\377d\306\275\356e\300\274U\347m=\302\225A=\033\343n\275\026\347\026>A6!>\307\277\036\275\213B\317\273\260\301\306\275Ia\005>H\254\232\274oS\236=\315#[=j\263$\275bu\202\275\004\377\026\276@\021\207\275\200\3667=\320FP=\2617+;\024:t=\367\200\251\273\273\"\342\274G\370\014>^\354z=G\270!\274\213\315o<m\005\342\275/=H=\014\304;=\3449\035\274Iu\301\275A\353s=5&A=\261\316\r\275\226\275\353<\210\224\307\274\344:\275\273A\034\250\274\006\003\240=v\371\307<\303@\010=\305S\014\275\276\277|\275\201\267\365<o\341\010;\202Q\252\275\001K\202\274\236U\177\273J3l<\227\t\265=i\031{<\320K\234=ll\236\275\314\\\370\274i\"\326\274\030\376\036=Z\320\333=\3001d=\212\350\342\275v \"=\352\352\245=*\217\034;\342\371\330=O\363\340<\225\247\t=\372k\236<\263H\305=\361\375\265\275\260\275\344<\255\024\'\274\266\312\240\273\377&X=\004\216\2209*\006\306=\227}[=\014\261\216\274\022\006X=\361\376{\275\322\217\335\274\\\377\301\274%\006\226;I\004=\275\333\257C\275L\200\005=\243\2120=~s\304<\335\366\002\2757\177\244=\007\337\023=M\001\327\274\343\000y\273?PR<\037\246\320\274)Wb=\337.!<\367H\230\275]\226\237\274\251q\265<\274\304\005\276\347\215\r\276\215\270k=\221fk=\032\214\352\275\327\346\314<[x\206\275\242B\251\275%n\327\275\217\324j=7\337\355<W\303\325\273w\212H=@\323\257;\302G\322<\267\351\n>7\243L\275U\007\352\275\032u\242\275\014\310R\274n2Q\275\201:\265<\237\245I=\032#\301=:\353k\275\267m\252=\242\256F=t\316F\274\353\361\017=\276\346\002\273\270B\336=Rs1\275~lO=?\336\364\275b<\267\275.\336\t\275kJ\332=\010\324\261\27566\003<\355\0351=\244\020\335=u\310\217<\355\201\t=\252\224\022>\261\210\026<~\330\213=Ya\263\274\364<\212=p\345\236:\340\'+\275\022B\320\274&#\224\275\r\257\221\275O\253|=,m`\275\260\r\367=\335\272u;\232\024N\275\213b\204\274\\_(=\235\321\352<\3728\002\275\260\213\351\275\3734\363=\273\324B=\243+\202<\242\262\233=\r\320!=\002]i=\333\260\004\275\335 \347\275\021\221%=\337\3650\274\341r\354\2745\257\033=L\007\022\274\243H\003\275D2\336\275\027\221\341=\303\207\215\275\'|\300<\370o\002=\304|\030<\020\204,\275:.\213\275t P=X\374C\275@\367\202<\3715\361\275\356\337\334=\023Q\324\275M\n\031=\007i\275\274\025\301\212=qV\305=l\321\020=\014\235Z=s\274\365=\305\017\247=}\313\207\275M,=\275\'\036\027\274\363\202\331:^\320\330<\337\022F<\206z\257=\324h\336<\032f\363\274\227\327\265\274r\360\354=\264j^\275\202\212\230\274\300p\344\274\266\252\202<#0\240\273\356\200-\274\201:\227\275\037\260\215= \363\030\275\327\335\365<\240;\344<\024\003l=\272\302\364\275\204)q=7\000\034<\020_\207<#\370\331<gA\031\276\032\272\235\274\330\207\000=\237\274\000>\177\t\307=\3325\257\274P>\215=\245{y=\242\230\262=\244\262\r\276\231\362\231<8\314\020=\361eG\274\210?\215<1\341q\274\241\264\224=?\352;\2749N\t=\245g{\275\342\267j=\304\r\'>\330\370G\275\370\2604<^\260\213=+S4=\302\262Y=\234\257\374\274y\202\021=,\225{\275\251\001\362<\311;\216=\243:\010\2758|l\275@\334\022\275\325\335\252=0w\231<uw-\274\316w\324=\270\250\245<\210\210B=\300\204\031=\264\361\211;\031r\323\273o@X=.Pe=\033\033\214\275T\276\033\2754{#\275yY?=\033\340\266\274\003\266\027=\301\241p\275O\032\231\275?\004\375<\341\257w=\332\264\360<\331\375$\275\365C:\273\037)%\275\177n~<\032.(\274r\336p=\333\272\313\275k\273\013>\026l\327=\327\251\226\273)\364_;\251\256\273\275\366,m\275O\002\347\273\341\222\203<\210[\346<%A\262\275s\223\247\275\335?E>\321\315\244<)\223\007\274^,\246\274)G\221\274\323\277\270=A&\313\274H\204\363\273\2077\232=#\247\036>y\242V\275AJ(\275\004r\372=\263 \310\274vz\025=#\2437=\303\376s=\225\365Y\275\337\345W\275\010sC\275\026\270\037=\267\227R=\241$\t=\311\240\343;\231\350]\275|\213H\275\352Y\247\271\246\344\314\275\302\204\205\275<\366\206\274\303+\207<\225\006\000=\002\0339\275A_\032=\013\205\355=\3437\022=\303\307\'\274;\306\241<P\305\177<\224\255O=\337%X=\376z\r;\216\353\251\274q\317\260\273\325\217\002\274Rj\024=LgR\275 \232\350\275\035;\360<\325XY=\177\236U\275b\034\341\274\256\370\220\275\355\372s=\357\255Z<%\231\031;\233\303#\274\354[5<N\355\010<.\035K\275j\323\267<io\203=\246\034\203=\006H\223\275\004<<\2748\314\006=\275v\253\275\312\265\322\275\035\330+\275\277I\342\274;\272\373=\373\332\032\275\247\320\027\276[\245R\275\215\351\265=\3735\333=Q\345z\274\321\315\003\275\363\333\004\276\344\252\240\271\356j2=\033|\243\274\341\204\022\275g\313\251=)%\262=\301\221\233\275D\332\035=%\313\035\275u\275\227=\0329\241\275\312\264\036\274F\275\264==L<\276\215\230\343\274\027g\350\274\200\3329\276\032\357^\275\351\322\260\274U\377\014\275%f\033= \2147=g\345\037\274\253\312\255\274\245\312\371\275y>n=\276\255\220\275\032Y\177\275#\350)<[\377\327=}\024\350\274\351;\016>\231S\014<%FU<\361\014\203=\3302\323=\342\227?=\356\"\025=\n_.=\251K\226\275\253\023\255\275U\311\235=,\333N=\227+Z<\324\033l\275\233\243S<\253>\320=-\353\033>\370\305~\275\304\231\362<!\354\204;\267}\351=\0035$<4\233\365\275\226\337\302\275H\301\237\275\3053\237=@^\330\274\346\344\336\274C\304\263\274\304\365)\275\236\332@=x\3528\276\024\373\357<\234\206M=8\322\203=\016rj==\247\373;%\353\205=\341\210\021\275W<R\274(P\222=\336\221`\275!$\377=\007\201o=\317\273|\273 b\037\273u\354\233<\207I\262\275\351\337\203=\235\rs=(\216\347\275/%\342=\n\275h<\022R\n<\216o\335\274\002\252e<\244.A\275\351W\235<\211\005\346;\272&\217\274\367\316\023\274\277\266\205=\243\261_\275\211f\212=!\227J<w\367\r=\327S\314=\303\344i;\277\272\334\274\264:\032=3\363M=[KN=\333\361\214\273b\036\207=\261K\316;52\210=\270\"\256\274\332\035\177<\372\273\013=\273\271T\275\310\234\016=P;\375\274\202{8=\020\311\267=\335\352\023<\031\241\240\274\354\226\254\275@q3\276\343\257\212=\371\327\230\275B\177\020>\377&\264=\252\273\252=M=\0109|\021J\275\344\226\303;\253n\331\274\030CP<rO[\275\377\022\033\275\027\347<\275\277\322]=\362Dw\274%^\2049\304u\036;\300T\341\275\316\361\236=\323.[\275\222\017\004>7\312\207\273\367N\377\2759\313\016\275\'\013\030=\270\024\300\275\214:\235\275.\342\374\274\275\344\230\275\274:\273=\210\302\362\274\014\360\212\274\343\304\201=\317[\315;\'\375L\275\376\345\031\275\031\350 <\030Ri\274\327J\000\275\312\276V=\316\\\031=a\326\356=\006\320\205=s\270\274\271\214\256\264;\317\364L;\003\006E<\260\267B\275|\254\331<wl3\274\277a\266\274\311\311h=\373\256\177=\240$\377<\233n\006=\254Q\207=\302\354e;\223\020B\275\364u\\=\005\235==\224\203\025\275b\033\032\2757\242Z<\315\332\251<\372n@\274`\033\331<bK\212=\336\262\014\275\223\r\000=\362:\204\273\331(s<\226;\036\274+Y\311\274SZ\027\274}\321\000=^w\320\273\211A\3749-\370\307\274\311\301\277\275\305wm\275\022\2531=*5\002\275@\031\347\274~\211}\275\277\257,>26\010>$A\177=Ow\223\275\325\214\271\275AO^<\344\332\256\27509\346\275,\031\206\2753A\362\273\r\305\034\275\023\243\333\274\22357=$N\271\273\"f\014\2769Nf=t\272\246\275\230\216\272<,\362\244\275\247\r\260\273t\262v=cN\026\275\213\232\206\275~\210\207\275\237B!\275\031\376\314\274l5\340:\'\361:8\005\033l<\202\307\020\274 \316\231<\222\334\265\274\235\353\261\273\357e\201=\250>\251;\271\231W=,\333\376\275g\327b=\346}#\275\211\031\376\274\313\376\363<b\330\274\275AL\204=\037\024\013\275\327\337\014\275x\234B\274MF\260\274\362\323<\275\232$e:7e\356=\002A\005\276\341\205\236\275\377\364\036=\317\356w\275\212\337B\274nz\301=c\2743<\304C\211\274R\3709=\032z\346=\031\311\321=\302\311\016;*:\027=\020\031F\275\345\261\014=<\272\262\275\226\274\264\273\215 \302=\013r\243\275\210T\004>X\030\021\275\304\325\313\275>\354\023\275\323\340\202\275O\036l\2753\263\271\274*\020\267=2\372\352<hk\023>.f\247\275\3033\320\275\327B\016;\343\251A\275g\346\217\275GK\254\275Z/\375\274S\037\260=e\234<\275`%I=L\332:=\354W\236\275>\303\264\275\036\373\247\275\177\302\t<\035\035\244=\241\256\016=*\023\326;v\307\021\276x\003\340\275\323l\272=\335\235\277\275\200\241\206=\216\272?=\373x\275\275s\206\007\275B\324\365\274!5I=\242\372\220\275\004s(\274\210?L<\211<\014=+\336c\275Nb\340\274\007\220e=\300\374\244=\206\0064=\3644\325\274\262]\220=tY\024\274\022[\013\275\265@\333:\312,\311=\22304\275\350\366R=\343\372\223\275\341\342)\274%\r\313\274\007\236\365<9\243Y<3\344V\274\226\372\350<\325\323\035=\262\337L\275\342_\262<j\274\177<\200R\016=Mp\275=\373\361\200\274L\255\035\274%Vq=\223\375\177\275p\236\n\275\375\303\220<\017\252\346\272\215\"\237\275\273\022\255=\201*\255=\320/9=G\234\277=\037\355\261\275\370\332\031\275\037\263\215=\224]\007>\364P%\275e\206X=\222\310\206=v\357\212=6H\"\275\031\327\311<7XK=?\305\243\275\326\373\374=\025\237\310<\2762\300=\n \004=\216k\021\276te\211\275\322\3478\275\240\363\350\275\305\302\245<\345\203t<\023\210\201\275l\214\224=kU\262\273\331\216\346<\026\206\331\275i\035\001\276\374(\030=`4$;\306\365\n<\333\230R=fDa<\ti#\275\230\261\033=f\202\326\275p\020\225\274\330\301\222\275T\271\236\275\243\217K\275%\277\214=\035\025\325=\334\236\231=\315\270\200<\270X\216=\010B\003\275\030\357\222=\231\364\210=T\005\031<.)\274\274P\335\023\275\224\245\244=#\270\336=S\351\020\275h/\203\2752B\312\275;\364\252\274z\277\200=|i\r\276\357\255\216=\2025-\273\224\347\316=\021\000\373\273\351\363+\275\263ky=\346\024O\274\302\013\245\274\374\201\357=^y\004\275\177\014d;\203\\S\275\301\3258\274\302\360\032=\'Z\215\275\246V\014=\017\257\320\275M\013\177=\267*\006=\2218\201=\300\005\227=3\033\000\275\017\307\000=\366\270\276;0\337b=\243NZ=\033\230\016\275\3708\247\274=\034\275<c\310f\275\327\321\300\275P\202\"<\r\177B\275\300\222\350=\177{\213=c9\003=\226\305?=d8l=\326\351\323\275\273\362*\275>W\366<\207#>=\'\310G\275}\306\204=\270\315&=\200\356M=\313\376\227\274\346n\253\275GKJ=9J\342\275\3154\221=/\005\357<\351L\271<\001\370\372\275\301:)\275?)\n=S0\363<\212\337\017\275\372*\370\273\216\374m\275\024\302D\274\260S\240<\346-\273\274\216sB<FC\005;\377 \214=\001\373\032\275\006\000\223=[\266\335;\026\350\233\272\372\252\230\273\352,A=\0270\200<n\005\300\273\313e\340<\273\306\277\272k\336\021=7\234\225=K:\212=\341\024\245\274\210\214T=1\273u<c\213\214=Z\001\324=\000\002\000>\302\004\363\2732\245,\275\243\037\002>|\244r=&\023W\275\230\320t\274|O\247\275\313\001X=\257\035\212<\325\371\252<}\344@\275\312\210^\275?4\340\274XR\340\275\245\274\013=\351j\t=dd\302<\334\241\365=\211\200\327=2}p=iC\034=\275Q\016\276*@\302\274\367y\216\275\342\353\331<\376\300n\275:\335x=\"\305@<AYE\275o\274&\276\036I#==\243\325\274\331-\317=\323\010\212\275\222a\025\275\'\201/=V\322v<\227\300{<\276\014\225=3b\372<\354\317\321\272\226k\302\275\266\003\010\276H\250c=\252l\323<]$\266\275\320\022\366\274\337X\227\275B\374&\275\263E\206\275r`\335\274O\005\252=<\217\332\274~6q=\262\023X\273C-\231\274p\203\203=#\001\325\274&^\227\275\375\354\315;\217\350\221</\211\343<Q\031\263\273\314W|\275\232\267C=\355\016\224\275\226\246\227<\322\020\337=\324:\372=im\241=8N\316\274\320\222\026\275\340*\033\276Ce\227=\356\317j\275\370?H<\245\244\"\274\356{\237\272./\223\275Kg\032\275\3129\221\274\220\370\377<\004h\027>&s~<\177s\206=\031\2367<\247\253\246\273\220\036\327\274\265\347\215\274\300-T=\227^\343;!\226):\215\242\223\275y\000\034\274x\\\300;\342{\032<;Q\331:W\365\026=\304\341\203<\304\2462\275 W\023=\227\255\037=w,U<d\031\002\2747^\307=\344\257-=\367\250\221=\376\013+=P\206\327=x\333\035<z\320!\2756`\346=\272\250\005<2Q|<\211\343U\275g\330\201\275\311^\274\275\033\021\221\2755\206\371\274\215\007\333\275c\363\212\275\240h\245=i\320#\275\325\352\213<z\233\271=\333$\275=\361\311\217=\333\036\300\275{\312z=vp\005\273zO\211=w2\t\275I\t\366<\247l\001=\361\240\210\275\267-\313<\0359O=\254\266\003=\265\250@>\201\014e\274\200\020\371<\022\234\230=5T~=\023\333\220<\035\312-=\252\220Y=\037[o=f\232!>\354\347\260\274\037\254$\274\224\376\347<\ny\275\275k%\246<\211G\201\2747\367\210\275B#x=\213?\233\275\205\244\033<\014\356\353=\036\034\205<f\304\212\275\013\3104=\315\245g\274\322\272^=\037\017\027>X\206\250\275\202\r}=-\313\275=1\022Z\275\274<D=BT\352=eZ\231\274i\313\000<\2662\277=DAt\275\3607\024=?\023\010=\336|S=8\377\240=\352\2645<q\334\334\274\220\345\021<\260\253\302=\342\321\377\274\262\331\260=\014\001O=\021\204\220\274\346\211b\275K]\352;5\233\346;\244\177\272=\004\3217\274\205K\300=K\210s<\277\277\303\274\375\310$=\222H\000>XmS\275\210\337\201=\343x\305;\3216&\275\220\000\217<t\036|\275\367\222\234\275\001\244\272=6\3546\2756f|;\322\344\026<G\014{<6/\271=\353\034F;\345\337d=\032\026\220=S\303\021\275|\364\030=\260y+\275\034\314\033=QD\311<\333\370\222\275\376/*\274\035m\257=\223)3>&y\n\275\356z\276=\347\327\253\275\246r6\275\017XD\274Zi\272\274j=\375\274\311\275k;\362\376\307=\264}\344\274\272\2302=\343fh=\257\001O=\323UF\275\231\373\207=\032dW=[\341\231\275b\301\322\274&\252\010=\376c\227=L\240\343=5JB=\014\367\325=\3714\312\274\275\376\333\274w\364\347\274|\n\341\273:\237C\274,\245\037\2750\276\370\275\344\314\"=0\206\254\275\275\031\302;TWK\274\310\243\026\276\005\035\312<3\256\t\276\307\374\220\275\313\237k=\253\355\037=z\031\251\275\353\'\225\2738\333\221<\377\017\000<bgn\275@p\253;\314\217c=\354(\336\273\257\014\247\275\241Q\370\274\027\010\347<\253\203\003\274\335d\312=\331\300&\274N@\270\275{-\315\273\221\360\210\275\340\007\t\276\027\200\247<\025\247\247=\226\327o=f\233\222\275\223\030\022>\215\316\371=kd\264\275F\277!=\346\275\213=\030\003k\275h\371\274\275\032E\001\274]~\352=\001\331\325<${\016\2762\262\254\274\243]\214\273# \212=\220ju\274!G\211\275\n\253\213=.\2613=j69=\017d$\275\275Q\353<N\005\024=8\256\230<!\321\030\276\327\232\337<_\001I=4z\245=\355\215\274=1\"\232\275S*\367\274\002\337><S3\'<6\263\024\275\\\260\351\275\024\223\311\273{\223\270\274\212\016\017\272,\222\252\274\326\372I\275j\222\026\275{\225\212=\341\273\315;\265\235\033\272\331\312\213\274#\237\272\274C\342/=FP\205=\027\2746=\3124{<\256{\256=\242\377\371\274x\003|=,\013\265\274\275\\\214\274.T\233\275\237\226\275=}Q\361\275uK\032\2768f\361\273\234sO\2757,\265=\237\337g<\014G9\275\314\0132\275\203\244\331\274W\316\322;\016\203\262\275\033\3253=\000\"(>\274\341\275=H\t\246\274\211\234\177=u\346\217<\365?\030=\246l\020;\275\352\252\274\301C=\274\022\317\354;\343\232\371\275i\227S\274\3529\032=(tz\275\024\300\003\274I\354_\275\236B\225=\225\316\331=\013\333q<,\3672<\370}\323\274\341e\"\274\006B\202<\305\007\200\274\'\3045:]\021\204\275\206\250\\=s\331\257\275H,\320\274\242\235\023<\347\261C\275\210\205\230= ~\216\275\235\235E<%\216\345\274v?\357\275-1q\275:o\234;\341P\005\275\220\310~\275\361\337\331\275\003i6\275\2361_=h3s=\244$~=[\314\257=}8S\275J\231\275=5{==\241\3340\275\330\243\265\274\'\230\307=\320x\273\273\353\244\313=\361\333\241\275\212k\246=\273\354==\030\303\024<\324L\315\274\025\303\343<D\200\230\275i3\203\274M\244\273=]\024\032\275\312\265\327\275\353\222\246;}\203\204=\266D\020=!k\"=\232\316\022<\323\220 >\273>\302\275\263a\t\275P\267\313=pdN=\216{\246<\326G\034\274\272K\361\275y\004G\275\247\006m\273\256\327\027=\017Q\301=\353\355R\275\013\026\207\275\200Y\007=W%\330\274E\304\207;\001^\213\275\355xv=\276S\032\274\224J\272=F#m=\356\004\203\275\277;\005\275\310\204\311;!\'\255\275v\366\325\2747\277\344=\235\317k=D\345-\274(\315\'>\226Z\222=OzV\275)g\003\275.C\376<\013m\303\274\345\267\355<\223\010w\275\306l\342=\201\250\243\274pP\246<NM\264<-\312(=M\026\000\275?\216V\274\206lz=s1,\275\301\352<\275\302%\277\274\242\376\'<;\017+=.\032\347=\267dh\275NC\r\276&D\301<\226@\351\274F\352\275\273\326\234\377\2748\346\320\274RrS\275\'\"\035>\316k\214\275\301\350S\275\317\264\371<5$\315=\032\016#=j\332\337\274.\205\244\275\005\022\251\275NpL<\225\224b\275;\013\032=\305\321\334=LBc==t\223\275\302\301\002=^T\270=\026\310\276=-\036\202\275\236\035\202\274\235Q\237\275HK&\275\222\205:=\337]*=`\271\235=\362@M\275s\302\275<\3170\020=Xb\303<\332\207\331\274\345p\004=\362\210Y\274\343G\002=_\327\256\274\246\344[=\232\0147\274\201\234\233\274\343e\222<\262\351\321<J\334\200\275\307\354\027>\\\232\262<bi\037:\340\330[\275#\324\246:\r\001\213\2732\2109\275\341\034\222=E\002\\=n\001\370<\014:\323\275\2250\326=\244\203\"\275\r[\340<\332\316s=\215_\213\274\2725\371=[\003V\275\223\330\265\275\235\013\341=\223\312\255<n\236\n=r\t\207\275UrH=\250\007\000\276\027Y\215=\2100\264<\253Q\025>K\301\030;P\025m=\256N/>\245\356\335=\0215a\275\337\252\000\275\020H\270=;\211\227=u\301\002=#w@=\360N\t=|l\230=U6\006\275`\350\020\275e\2103;b\373\360\273\231\021\263\275,\207\005\275\214\335\007<\364J:=\247]/\2756+0=D\246\367\275J/\036<]PH\275\013\356\375\274\247q%=\217\2310>B\326/\275\021\014\226<d \366<R\265Z<I\323\034\275\300\201\\\275\2128\'\274HD\205=\343\376Y=zj\231\275Zv\020\276\316r\344\274M\327\264\273\023)(=n\375C=B\211\262\275\270@\017<7\252b;\356]-=3s\305<B\300\224\275;\365\t\275\2524:<`Y\264<^\305\202:\213\364\341;\327 \322=A\207\243\275]Y2\274\367\226\271\275\r\013\351\274?\211\324<\251o\260\275\006\237\033<\026]\010\276\342\277\321<\264J~=\203{m\275\230/:<1f\254\275\263\355\211\275\243\316\035=\361\337e\275\316\240\255<G\325\276=D\333\002\276`_F=\002\310\'=)\336\206:\357*\256\275\026Z\032\275g\3351<+\033\315=Ca\324\273\301o&\275\353\003\222\275\343\340U<\324\n\327\272\373\362\245;x\214\036=\321v\024\274\342u\326\272O\366\352<\027\n\301=\314E)<t\343\005=\304<\006\276%:Q;{\365\2119\311@U<i\216\316=\306,Z\275\277\021T\275G\311<<o\270\013= \357+\275U<\220\272B\227[=D\350\027;Rp\220<\356Q\007\275;\'\314\275b\271S=4b\210\275\361\272%=\231\366\272\2745_*=\024\030;\275\002\303\271\275\002\337\004\272\303au=\217\312\231<@n\216\275\314\246\256<\325N\217=\311\221\t=.\326\002=\252\326Z=\025S\337=\253\315\017>\325\327\306\274zc\227=.\304\020\275\355\330y=\270\001\355<\345e\322\274\210zF\275\005\325\344\275d\217\217\275\265p\334=\251\252\013\275xg\345<$\037-\275\360\026\337\274w\016+\273\3364\302<\353q\264\274\204g\263<\341\254\272=\022\221m<\247\203\t\2756[y\273\331cJ=\355ux\275\007dr\274\246eN=\310\333\373\273<$m=w%\304\273(\013?=q\325\025\274\036\330$\275?\277\207\275_\237\205\275d\235=\275\205\227==\310e\232=\n\316\030\275+\311\322=\002\342\205=\003X\247\274\320v\212=8\361\272\275H\323\345;\354j\251\274\322\306i=C\005\326\2749\254\000>\205\n\256=E\262\302\275\341\022\005>\345\334\313\275\234\0313\275}MK=\000\263>=\037\213\027=\324S\325=\304\245N\275N\026(=t\272\003<*2<;\312\025U\275k\373\300\274\200\361\257\275\2646-\272\373\222\260<@\261\367=\3002\312=,\3043==e\300\274\031\n\340\2745\243\302\275.\244\201\274\205\313\311\274\334\222\203=\333x\226\274\317?\302=k\272\216\275\032\271O>N\355\327\271\302\235W\275q \014=c\275\231\275\341k\210<\213\202\216=\221N\"\274P\004\257\273\324\351\344\274b\177\014=o\375V\275\311H\234\275\034y\340<f}\313\275\317\200\246\275/\354\321\275?\312\224<g\207\016>\320\243P\275\250\243\300\275\370\032\232\275\240\276\312\274\017\')=\2215z=\032\256\307\271\266i\016\275\"\317\375<\335cz\275\347Y}\275*\304%\273\353B\303<*it\275\253\246\363<\342\037\366=TY|=2`c=\317\351\370\274\217\007J\274\334\221\023\275\032\277\001\276\231Q\246<\301\3430\275d\237\224\273,X\303\274\371\315\335=\272t\225\275\250\204\022\276 vT=\021q\025\274\265\000\037=\361\007l\275\003N\207\274\370v\234\275$)\034\275\037fF\274\340%,=\332=\336\275\223c\371\274\242\tY=\247#\375=\206\335\355=,\253A\274\010)\300\274\177Bd=\317\337C\273X%\273\275\274T=: \236\306;1\261\024\275\310&\352\275\345\230\014\276H\327\350=\037Bp=\202U<=\'\006C\2740J9\276\345x\330=\372\022\014<Tf\205=\337\3416\274\203$\364<\330\276\235=o{L=7\350H\275y\212w=]\352\253=\354TE\275_u\032\275\317\022\320:\371\236 <i\223\216<M%\013>\035\227\205=i\377\354\274B\316.==\371\324;\314\332_\274O\264w=\373\362\020\275\t\203\347\274Of\220\275\014\206\210\275y\254\r=x5K=\332\353\n>=\273\214\274\337\3244\274\2018:>\010\367F\273G\331\326\274\333\2066=\014\337\337\273 \370\271\275-\232,=\237\276\234\275\275\305)\275\243\365\257\275&\004\321;\207\256\035=k\334\331\273\010\242\302\274\236\304#=\335)\214;\347\010\022\275\302\357j\275b\\\251\273\004\367\350\274\263*\322=h\3072\275o\206\320<T\252\240<T\252\205\275\320\300}<rI\033<\214?\231=-#\373\274\312\206\324\274\316\225\364=\225\324\202\275x\rH\275\316\232\232;\\\254\007\273\350I\001\276T\234|\275\226\255\270\2754\247\007\272\340\262\026=Y\'\225\274;\265 \275\2255$>\261\236\357<\316\253\202\275\3178\360\274\207\376\237<\r\305\317<\307\035\017=\325\343z\274\225[\234=\342]\357<4\353\023=\260\2654=\003I\021=\357\\I=-\262\366\272\361e\215<Rl*\275\316\202V\275\301\234\206=\331%\000<\231\307\352<-\362\000=\204\2004\275^\036\213=6\335\356<$w\301\272\212\362\331\274>\307)<\034\014\247\2754XD\2748\277\374=T\225\r\275\3343\207\274\334s\222<\271`\227=6\304\240<\342\3060>\220lY<\204p&=\314\212\263\274O=\034=b\247\354=!\212\333=#T\013\275%\327n\274\036\027C\274\203\373\241\275N(_=\300\231\177\275\"\332I=i\375`\274p2\213\273\253\347O;\217\201h\275\234\375\250=\213\307\020=Rl\320\274\'\357\227=\346\017V\275,\350`=\243\"\246\275mc\210\2743\025\262=\036\352\\<h\260\223\274Q\216@=6\033\351=\363\252\026=i\372\243=*\300\242=\274\226\212=LZ\025=\313\354?=\376\273\220<\244\2014\275\002?\353=\244\363E\276Q\000s\2753\246\016\275\370\001\341\274\'\312\324\2747\352N=H\227\343<\207\345\327=\351qv=\237\365\346<\352\025\322\2744m\352<#\331\001=z\375\234\275\205wW<\320\247?=\202\250\211=\355\207\232=i\212\274\274\345Cv\275\007e\247\275\3476\346=S2\300<\213=\014<\367A\004\271U\215=\274\221\r\223\274\253\334\263<\244S\366\274\353D\024\275y;\010<]\350;<\325\222\256\275x\324Z\275j\351i\274\276~\231<?\275\277\275\tn\365\2720\301\210\2750\321\260=\211\262\333\275{\234\331<\026\2172<\234\362\002>\341\013-;\236\3461\275\023\307\031\274\217#[\2756\265\252\2757\270\037>\013\2016<\255\267\247\274z<-\275!~\337\274\352r\262=\377\013\245\272\375\2446\273\005 \2529\304\377j\275\010\335\313\274:\341\010<\213\265\367\2759\355\303\275IE\024\276<\036\234=C)\345\275\373p =\26265=E\276\364\275\224\355B\2755\274\000\274V\346W=Q\343\005>\311+\253<\030*.=\"\030\002=}4\325<\362o0\272Q\031\216=H0\207\275i{\307=\237\363P=K\037\217;^(\033\274\027M\357\275a\261\177\275\220\357\211;\236\255$=\222iv\274H\345A=\350r}<(V\204<\257\264h\275q\2608<\246\223\200<\204\263\210\275\347O\337<\226\256\365<\201\205\002>U~\222\275Tz\355\275\370 \344<\177\313\034=t\203\031\276q\373\265\275m\261\333<\243\333+=G\225\253=6\030\341\274\307|\310:\004\004{\274x\274m8b\201\300\273\341\321\224=\312\376\024\275\237k\201<\002\303\322\275\310\371\257\275\006S\333\275UTz\275\024\262\027\275\367F\304\275\331Jh=\014\275\371\274\357f\356=\325\204\251=,\024\304;E\204\265\274>;\317\274\227-\220<\267@\226\274\242>\316\275\331\327\356\274\003y\002\274\307\226\336<(\266\234\275\345\240\207\274\272\232\036=kQl=\0012\"\275\275\227\324=\275fj=a(\\<\234\255\260\2748o:\274\224\301\260\275\273~\200\274j\374[\274O[\314=\331*\233\273\337J\301\275>\234\217\275\372\244\030>5HH\275?^\032\276P\341\211\275\214S\"\275\204\263l=\020#\205\274\305!G=\240Q\234<\355\027\032\274N\311\340=\345p\254=\336\200\"=\255+ \273K\023\271\275\321\024a\274\303GT\275v\013\314<\360\260\">\376j\031<\001\224|<\013K6\275\026\311\017=ux\225;^\372\310\275\254jL\275]\003\342<\340\3058\275\314\250\r==wp=\024qG=\032H\001\274\334\322\224<C\202\273<\3729\217=A\252\327=\225\351\036<`\345\236\275\025\222\035\276\320\251\322\274\3522\000=\263C\235\275\270\003M=\207\336\213=l\324\347<b\003t=\247\326F=B\354+<\247Li\274\036\027\344\274y4O;\231\334\222=\233<\301\272v\343\216\275\325yb\2746\321\306\274\206S\303\275G\270n\274\241<\242\274\377c&:\205\253n=?*;\274\211\0143=\373\245\234\275\030\025>=+\350\364\272W~\213\275\262\365\216\274?oj\275kC\217\274y@\247\275y\222\037<\376\001\262<\374\\\255=\337M\226<x\227\254\2750\332\003>\301\226\261=\317QK\275F\250\352\274\332\246\362<\205\324\226\275\225\035\215=\275\225\353\275`3N<\353\264Y\275\247\250\205\275e\'\342<M\327\377<?\025\254=\275_n<\215\262\370;)@|\275[\241\016=*\320\"=\206\'\306\275\260j0;\340k\026\275\010\353\t=\273\322\252=\375\007\020\274\r\347\215\275DMK=\nS3=\242\002b\274ND\t>\265\263\256=\277\013 =~= :m\357F\275\276\315\013<\377\t\232\274\236\346\217\275\031\2230\275b\'D=+\277\230=\232\t\322=i\017\277\271.RD\275T\261T\275-\3250\275\226\366\202<\277\326\027;o\242\357:[\356\320=\302\363T\275\311\234\201\275$\353\243\275\326\310\344\274\337\320\003=\021.?\275\204G<\276d\325\356=\276\200\026>\004\223\022\2754|\333;\237\005Y:r\021\010\274\026\317S\275\257$=\275\336x\263:\257Z\222<5G\221<\314\253\312;\273j\200:;\254D=\363\276\204<\302\366\305\275  \226<\324\325\210\275\276o\017\275\002\204\215\275\233\210\035\275\230ux=\2370\374;`}O\275c]\201=]C\364<\302\252\003>K \350\274\353\243\234=\254\013\273=\024\310?\275K\010\226=Nf\266\275[\302\310=\316\224\024\275h\357\257<\340\032\013=\014\334\367\274\327\211\332\274$\353\271\275q\334\014\273\264(\313\2743\210\035;\355\364\206=\202\241u\275\256\333\260=\346\004\376\274:\345c=\317\030\221\275l\377\271:\3566\350\274\250 \204\275\177\322w\275\260\251\370\274\305%\025\275\323\024\202\274\252\002.\276\360\206\275=\323o\221\275\'\223E\275\245?\272<\254\246\343<\024\255\020>\341 \'<z\376\035\275D\241\352\275\253\237\376\274P9\224\275t\304\033>\330\222\243<Rs\264=\335\334\r=\034E\000<\026_Z=9\350\215\275j\t4\275=\247\331<\307^\376\273\355\236[=i,_<|\340\313=\202\372\265\274\225,\177=\264r\250\271V6\001\275N\276\213\275\222t\340=\312\r~\275\320\201\030=\022\250\031\2741\237\032:\276\007\221\275\007z\255\2748\355\216\275AJ.\275X\t\203\274\344\302\242\275\023\237l=\006?y=\303\326\202\274\211\244\260\272f|\230=\303eY\275\341\263#>{\263\247=\\\377\225\274U\341{;\305\253\352\275U\031\333=7B)\275\320\313r\275?]\r\272P\247\212<\337\205\006\276\332{\357\274^\240\351\275\300\370\022>\204pJ\275\266\277\230\275\215\377\311<#\032\327=\\\224X\275\276<\030>7.\223\275J\216?\275EL\214=\366ME\275.\224\361;\212\277\263\274_\217d=\020n\016\275\026\236\036\274\360\273\002\275\010ur<*z\344\275\r\337\355\275U\344\024\275\325\333\276=\232\267+\275\324\210[=\014\021,\275_\327\001\275\003\236\222=\2462\325\275sw\326\275pv\216=\361\245\013=\265\206G\274p\354\310=]\017h=.D{\274\365\326\362\274\'J\026\273\266-\337<\235\353V\274\004c\256\274\236\342`\275\345*e\274\310\330\020\276\357m\013>\256Qn=\357 \354\274\255\277\252=\025b\222==\255\345<QM\226\275\360\343\316=*\234\303\274\225\300\037=\017zX\275\322\006%\274\375p\332\274\022\031\316=\334\327\370\274\004\344\013=\331\263\303\273\310?\025\275\262\302\336=^\226\032\275[\273d;*G\274=\343w:=d\020\n\275\304]i\274\266\365\202\274CZ\227=\350\214\307<\023\003\025=\247\024\227<\373\330\020\275`?\212=\026j\343\273z\274^\275\266\325r=\272t\303;\026O\014\275U\375\366\275Z~\237;\237\302\2149=\231>\274\233\030\261\274\007\210\n=\353\353\331=\246\357\245<\272\244\304\275/\271\356\274\371\007\325\275\253f\342<\260<\345;W\003\333=m@L\274\177\001\242=\372\031\343\274\205\251u\275\261R\316\274\336\027=\275\374\343-\275\364f\276<\221}\013>e\344\272;p\361O==)\240<Rx\256;D\341\307;[\225\037=\003\003$\276Mz\223=\264\272\210=\243\334\002\276:\330\225<\322@D\275x\307A=6\331\027\275.\362\216\275\365\300\021=\314\276\376\274\334m]\2750\312\253\274+Qj\275j-\275<\226\177\021\275\246\025\r\274E+p\274\241T\310\274\335!\371\272>;4=+yH\274\225k\336\273\007v\304\274\251\362n=\261\212{\275\274\206\355\273\306\364\014\274U\033\240\274\256g&\275\337c6\276\016\001D=\250\277,<\031Q1<%\374X\275V\227\205\273\306F\204=\364\335\000\276h0\364;\266\2558\274\n%\256\274\355\341\222=I\020_<\340\2605=\302\314\277\2756\2433\274\246\026\242;\250\324\014=\014D==\236^\267<\262[F=\221\020\263\275T\257\330\275\006\242c=\202r\302\275D\265\216\273r\265\365=\335\214\272=\24529\274W\236\305\275\221\254\373\274&dR=\341m\037<5\354/=\375>\331\274%\\T<\231I\225\275+\317\251\275$\227\271\275J\276\215\267\t\331\274=\316\340\003=\336\013\223\275&\3422=\323\262\320\275\2656\177=e\303\307<w\230\t=i)\361=W\034w=\373\223q\275\263H\006\275\025\211\262=\352w\031\275\251\310\307=\335\244\026\275\306\334\343\274\277!q=ub\245\274\262xz\2759\006\262\274>\262\3359\274\243\360\275q\250\204=\026\364!=9HA\275;\0233\275\032\267\277\275e4E\275#\207\274\275\275\207g\275|\024\314\275\000\305>\274\350\213\215:>*\237=\221\340b\274\020\254\241<\322\345\003\275`J\364=9\271-=f\204\213\275O\261\357\275\247\273\236\275\202:\020\274t\320P\275\375N\305\274&OW\274\267IR\275\204\026\235=}:/\275\303F\000\275\002W\276:l\n\366:\225x\246;XW\264\273\351\370\235\275\346\245n==\350\030<\254zY\275\017\351\212=P\3419=.jh=t\365E=p\252J<\224\357\307\274\302E-=;\033\210=D\025\232\275\0338\322<\213\214X\275\20525\275\343\252\271\274\001\346\n<\266\332\020>\255f\363=;\2564<\370P\342\275_\266\375\274\317\332\r<\210\314\022\275\205}X=\\\231\007\275_\024\366=N)\033\274p\265\'\275\371\201\202=\345|\274\274\t?D\275AZ\262\274V1\206=\367\221\265<\310r\202=\203\201\"<\026a\216=/\363y<\312u\217\275\256R\254;a\303\035=\341\266\244=\272\033)=OC\033=\300O\021\276\371PZ\275XW\305\2743\272\020\275W\353\004=,|\334=fN\004=\213M;=2m\303< E\241;*\002g\274Sq\232=\021\321\261\274\274\360-<\030\226\341\274b\336\336<\222\234\005>\371P)<y\002\222\275\264q\177\275\n\2725\275\010\014\305=>#\376<\201&\225=G-\017\274Pd\313;B\310Q\275\320\307\327;\253\333\321\274\205\262\250:$,\020=>.\330<?\311\377=\266\2569>\004\206i=\264p\315=\217\314\254\2753\035O<n\333\t>t\2573=\354\t\277\273\034+\371\271\223\273\215=\311C\262\275`z\315\2742\317\231\275\214\347\032\274o\217\256<\263\334\375\274\005\370\016\275\204\304\'=\345u \276g+\277\273k\356\261\275\375\350\t>3\223\027\275|\230\256\275\316\265\342;<\013Q=O|\020=\254\000\022\275M\356\010\275lb\272\275OE^=\303@\244\275\274\277\024\275\261\316}\275\255\207w\275\207P\222=\212o\370=-Z4=S8a\274Lh4\276\351Z\312<\233}\021=\246+\225=\024TW<\322\357k=\036\245\023=\235\301G\274\271\333\230=\363R\225\274\035\341\025=\333\027P=\211\313\237=\366>\020<\357\213w9\331V\307\273nz\341\275\003B\215\273\222\265\256\274\336B\021\275\3066\034=\177\342x\274\2272\230\275P#\221\274k\370g\274\311\336\302<>\336\223=\\\231\201<~\006\354<#8\253<\307\266V<\315k\265\275g\277\316<\006\231r\275C\017\217<\251\255\220<\007U\200<\017\356&<\356\263\211\275\335\377\251;+\311^=\001\276k>\264C\007\273\254\034i=\020\250r=\355\255\317=\323\327\220=\345\226w\2756\032\255\275\264h\2209\246[\311\275K\360\363<\360J\023\275L\315\354<S\301:\275\263\034a\275\230)h=\324\035\337=d\204\236\274\354\361Z=6\253%=T_\000\275\244\260\377\274\207&.=\227N\331<\223\371\207\275\217i\212\275\244\313l\274F&\255=\361\330\021=\266\225\320\274tcT=\201\002-\275\225\350G>\226\364\253;\265\001\317\274A\362\025=g\227\315\274\014/n=\"\033\326\275\023\217\317<\361\201\303=P#\260\275\033\322o\275\336\305\314\274\367-\244\273\223x\033\274\314\261\017<\331\355\247\275\236\354\251\275\205`\356\274\257+\272\274sF\243\274\267L\255=5\027\213<\233$\005;3[\321=K\336\001=\016\032\310\275>0\262=\t\262[=2\215H=Mu\210\275\364\255\\\275\212\220\235\274\316z\205\274\321\031h=R\243\277\274\312y\307<\203\r\353=\346m\314\275\236E\320=\334\223\237;\257\213I=\264|\355=\271$\204=\030v\027\274\240\223?=%\010\204<0\265x\275\353i\307<x\2121\275\014%\266\275\235\334R\274+v:\275Lq\240\275\260?\337\2757\2208\275\210\240I\275\021\335\325<\367;J\274\347@\332<:\363\261=\303n\001\275r\350\347;X\276\006\276y\005\271\274=\3301\273\020\341\226=\004\266_=\201`\007>\245\013\221<\201n\216=\333\364\331\275a\022\210\274\024\330\245\271\005\236p\275\357\226O\275(\243\312<Y\353\335\275\310\3256\275k\207K=\312\311\220=Ax\201<\\\225\205\273SJn=\026\342:\274\356\305K=4\220\213<\321\253\275;A\272\253\274\014>\304=~\237\316\275\347r\316<\036\023\235\275x\376-<\3651\246\275\264\005\244;@\021\364<\3554\304=\303_\336=^\265\253\275\027\365q<\343\335W\275\226\020\014\275\306SY=;\241\245\275\206\225\252\274\327\276\001\275<\344<\274J\262i=-ls\275 \205\354\275I\027U<\"\330\002\276c\311\"\275\004\310\274\275\330\365h\275\032\325\377<X\302E:\216\334\347<\241E\010;\271\r?\272M\273\n=uo\226\275\204sX=\254\235g\274K\353$=\023\220\233<\365e\372\273H|\252;N?P\275\237#\t\274\332\274H=\0256\210\275\326\265L=\352Y\014<V\344r\275\345%\267\274\337\351\313\275\014\272\230\275C\353\235\274\227\356+\273\334\217\302;\226\330\232=\211\250\247\2753F\326;\241r\344\273,\323z\275\351w\204=+\340\357<xt\324;\002\276\0108\302Q\224=\030\224\260<\316\321\032\275\000\023\241\275&\032\303\273-+\366<NP\225<\325\377\002\276\212MQ=\221\224r\275Z\257\244\275\271\247\255=\345\"\231<\332\331#\275\307\302\357\274<bA=\001\000H\274`E\006\275\032%\317\275\227\245\207\274\266[\033\276\222\216\244\275U<M\274\324\350\334=*\n\214<\245\353\211\272ej\013=z\312\254<\'#3=\263\222\345\274i\323{<@A\345<\005]\216=H\235.\2755\323\262\275\223w=\275%\207\014>l\212\327\275\255U5\274\321Hi=>V3>;\364\252=\027\363\344\274\026\021(\275\025\340\344\273\204+\314=\317\242Y\274\333\002Q\275$\304\267=y\312\307=^\333\202;\363\323\311=\304\240\303=\322\336\000\275\205t\"=(j\003<<X\000\275.K<=\301\007c=\321\3367\275\275\026\254=\367\221K=\033d\257\2741\230\372<M\361\215<\203.\240\275\362\212\311\275\301*\t\274:\312\376\275\r\306\265\275A`\242\275\255\367P\275\364\203\304=8\000\340;\201\226\373\274u\314>\275N\343F\275\315\325\327=X\252\302\275wpi\273\311}\261=\013%\222\274\314W2\276\031\240\007\275\353\314\224\275\0177x=\362\032\006>\017\245\233<\0232D=uT\027\276/Vf=2\232g<T\341\361\274/q\001\276#\223\231\275\031\242\034\274\336,P=E\023 =\343 \204<\201\2113\275\225(q<\312\207O=\265O\305=\227\341\351<\371\025\221=\305\323\314<`\324\202<[\322Q\274\223\250\211=eQ\017\275Y\241\3029\225\231\224;\227\017\201=\344\230\300=\201\313\336\275\335\301 =ro\203=\021n\361=\254\204w\273\352\215d\273\254N2\275Z\350\024=\021\335y>\036\231\200=\021\335\211\275\021\034\350\275\263\353\014;\365\314\250<t<:\275\330%;=\223\312\217\275\335d\030\275\177\273/;\337N\325<\023TB=\216\211\264\274\351V\215=D\373\264\2759\006\003>\227\304\200\275>\261\336\275\001\2649<t\204\t=5\023\026<\377\322\203\275\025\\\214=\343\227\314\275\037\234\307<i\037\351\273=\361\002\275\330v\266\274f\202@=\276\377b\273\224S{<.\"J\274\016\242\200\275\271\344/\275\257\303\207=\274~\220\275]\204\262\274jxp\275\316Z\300\275\265\007\251\275\324\361\353\274\037\221\220\275a=\311\274\030\267\277=\275\325\256<zh3\275\033\362D=\325\266\014\276\r\251\250\274\374.*=O\007\252<\023I\263;\221*\302=\205U7\274J\207\306=,n\251\273\\Y\253=\247\365#\276\267\272\231\2738\304\210<\336\232\001\275\002\347m\275W(\205;a\210\007=y\324\021\275+\316\261\275\354\0246\272\017\211\226=\235A\312\275\r$\233\274/\026\262\2755\016\242\275 \251-=\2773\211\274\340\312\253\275\"!\273<je/\275\t\327\032\275\344Yt\273t\340\262=\370L\206<\3679h\274\305E?>X\223\020\276\372=\311<9\223q<\340\206\351<P\314\331=/\324\016\2739\344\360\274wY5=o\375\230<\274\233z=\005\343\257=i\376f<\344\210\004>\264\235\351\273\022\270\201=\246\241\035=e\307*=O\013\347=\255$U\274\213b\325\274\357\215]<\0260\303;\232\230\223\275\206+\177\275>T\212<N\305\367\273\232\304\271=\221oY\273>\005\233\274\234\261\311\274/T\210=\263\243\201=\205\313/\275\264\030@;\262\322\335\275\014\325\256\274\223\361\254=LWI=\206\363\n\274\327G\323\275\331#V\275\260\0309\275Cs\207\275\215\340H\273o\036\257;\022\350\036=.\021 =\256\302*\275}/\025\275\323\342G<\316\003\013\275B\205\006=\031U5\275\024\340Z\274\252\\q=\246\013\217\274\210Jp\273\314\007\213\275\234\237<\274x\010.=c\361\213=\316\220;\2754\254\360=Ea\322<\273\033%=\274\037\264\274\340\022\307<^\211,;\241g!\274\261\\W;d\340\222\2726v\311:\206\241\271=\266\342\235\273\214\221\376<\rl\275\275D\0301=^j\007=\366\236e=\320,\201\274\314\307\337=\271\270s\273\326\360\020=<p\362<X\326\216\275\212\221\346\275/\336*>c\262\274\274\215#\030\275\363\\\356\274\275o==\002\263\267;d\004\020\275\211\'*\275\225\246>\273\223>Q=\265\300\313\274\223\257=\275\3737\350<\304g\271\275\256\341\202<\375\023e<\365\310\035\275U\203<=\214k\215=\222\347C\275\252\235:\274\\\271\342<a\345\222=\335i\024\274P\\9\275\222\276\301\275QT\036=,\020\214\2751\264G\275rx\306=;\206\303\275$\331\220\274\314c\244=\010y\235={P\203<\013\272p\275\377\234m\275n\333\020=\315\364\215\275;\202\014\276\340\235D=q\342\314<\341\024\331=\217\304\253\275\2550\333=\032\360\371\2754\030\337\274\017\236d=j\3235>\205\311!\274S\361-\275~GY=\000{U=\325\261\304\275\363\336o=\373\332\264\275\237\005\016\274\215\255\257=\215\367\316<\323YD=\353\013\014<<\034\327<P^\346<\350\312\325<l\037U\275\2117V=\275\032~\275\253\272a=\002L4=\370lu\275#\352\244\275#1\001<P\260\274\274\022\264-\275\272\234H\275\363\334\"=\250[\377\274\274\276\032\275\266\2615<\371\004\275<\\\345<\275\300^\r\275C\354\t<(\304\034=6j\310=\373\224 =A#e=\224\301\362<U\367\032=\217J\234\275\346\310p\275#w\210\274\367:\210=$\234\320=\n\345?\274`\0179=\241[:\275a\307\316<v>u\275A\316\207=7\302\304<\204.\":\362qw\275kn\201=\210\207\020=\353<,<\313\272A\275\253\212#<\034\372\237\274*\352\237<!\343\235\274\214Y\034=\264\211\'=\304\367\361\273\022\216U=?e\303;\275\320\300\27562#=\326t\257\275a\300\235<SQ\350\275k\272@=\005N\262=,\265\353\275\203/\235\275\270<\240\274\177{^;$\363\254\275\322<W=\020^q=\301g\303:\347$\334\274%z\326\275i\231\365\274\261\367\210<\303&.>xtM=JL2\275\307\354\021>\270\243\000\275\355\260:=\'\231\203\274\306e\345<\036),\275h$\211=[6\362=O\213I<u\035\255<\213\314\000=\355&\204=\210 \202=\301\013\001>\t\224\310\274U\'\233=\027\323\243;\035^\204=4\235k\275\345\177\222\274\300\"\253\274\034\267V=\363A;=8Y\240;C\001\334\273jC\342<\214\373\214<\272\016-=\217V\240=\371\314\234\274]\016=\275p}\377\274\351]/<\223\255\330\275\0203h=\324\272\025\273\304\210Z\275\363\255\027\276\257\244\345;\206\352/=\314\331!=\302#\014=p\254\003\275\212\226\261<\377)\035\274\236\266n=D\324.=\233S\235\275\250\215\372<\376\020P\275\254\370\263=\236\240\314\275\364\323\241\275~\210\317\274\230\217\022=\264\017(=V\352\324=9\263\373;\024+\211\275U*&\275\205\300l=T\324\225\275\'\\c\275\037q\277\274rc\305<\315\255\033\275\331\215$\275\364(\370;0/\016>\362\320@;m\266\r\275?\252\021<\312\276\231=\375\370\212\274Co2=\373\223(\2755Ci<\030\200\233\274\212\370\254\275\277Y\262\274\362\211\\\274\215\232\341\275\241^$\275\310\025\023=\327U7=\021\266\004>\213\350\221=\300\264\362\274\213H\270\275\314\352#=\316X\244\275\232\315\017\276\266\375\235\275U\331\037\275\274\222z<\337E\013\274D\257\326=\304U@:$G\000<_\265\336\275\026\313\275=\025p\030=\264\'\026;\344\3516<\260\253\021<3\362~=3\270\\=\354^\210\275\270f\250\274^\372\311\274\232\331==w\364n;\245\244\337\275\321\3428=U`\300\274!q-<\356\002\274\275\357`\000\276\026\277\233\274F\213\346\275\033{\301=\027\276\307\2748\300\303\275\005s\032=2\356t\275\206W\211=\365\237\036\275\327\323i\275\341\321\347=w\212\";C\312\310\274\177\335\241\273nn\252\2747\313\177\275\360\033\000\276\242j\242<$(R=B\247\006=;\377\317\275#1\025=7\356\375<\'\336\324\274\367f\354=B\025\223\275\254\024\004>\215:\347=\261\335\020=\274L\232<\033\020\024\276@\323A\274r\237!\275\252\013m=\317\306#=\335%\353=g\177\230\273k\035\331\275hc\005>\372\227\250=\246@\343=\235\235x<rL)=\377!H=b\301C<\356\223B;&\2240\274#\223O=\217|i=UF\277=\025\244\312<\"8\234\275\r\366\270=\244\345l\275<\207f\275\361\0107\276\267\363\203\274\246#\264=\177q\213=d\327\315<\237\315\361<\357\261\326=\032\370\023\2731\014\225\275\305\256\356;\005b\207<`\274\271=\213i\245<\035\316\256\274E\017\340<<\375\325\275\326e\023\275\000\257\244=f\372\362\274E\232K\273\235\235\'=\014g\200\273S\211\276\275\005y\270=\025\373$=\263\321\247\274\331\273\311=\226\2561=n\216\003\275Ky\021>\336\351j\274\034Gh\274\027~\022>\262\t\243=:\037\t\275\275\337\337\274\350e\300=zQ\036=f\006\227<c\203\035<_\271W=\"vi\275\335\222\262={{\317=_p==\264B\r\275?c\276<l\245\264<\270\007\303<\353%\230\275nM\310\275\223Qq=\177\317g=\345\031\334=9\376\301\275^\344\003\275i>\002=0Pw=p{\032>\362\346\370\274J\246\025=\272\333\n=\310\325O\275\200b\235=\222\035\311\274\020B\342;\331\251\340<wp\334\274\311\\\307=\017H\033\276R\211\t<\366\351}=s\037\264<\021\261\233\274\362\220\001\275\327\374\022=\017\312\213=\356\024\213\275\221\354,\275U*C=\301\t\265\273l\022\024=\\\267A<kb\247;-\234d\275\035F\342\274\242\2116=,d\344\275\327\331O<\2642\264\275F\242\302=7E\275<\025\253M\275l\326\230\275:s#\276\240Fm=\301U}<Q\222\332\275\2565\025>rC\260\275\336\302\377\274\013\356\343\275\266\355\032=\375\027\274<u*r\274\211\361\266<\376\376J\274\363\315#;\222\245\350\273\307\350r=\331.\036>\004?\335;hQE\275h\377\331\274E\253\314<\021D\220;d\t\346\274=\305w\2731jX\275~\316R;\223\2140\275#v\201\275\231-\240\275*f\003=wHP\275\221\334|\275=\256k<\256\302I\274\0223\276\275\235xG\275\324\365\231\2759\343\372<3\266\263=\255\206\251\273\376\334\007\275k\351\270\275<\206\020\275\212\017,\275\206\000\\\275\306+V:\253\355\036<\233\234\246\275\231\013r\275`\302\217\274\322\026m\274\206\267\177\275\323\250\211=\311J\t\275\254\007\215\275\241\346\261\275^k\367\2754\001\202=\360\246\374\273\020M1\274x\376B=\2268R\274#\275\337\274/\\&=Q\276\005\274\r\355\256=\275a0\275\031\270\322\274V\'0=u\033\276\275\002\364\347\274\334\273\226\275;\001\273=\022\211q=j\t\370\275O\310\232\274\240u\377<\366\325B\275\"\272|\275\217\233+\275\230\023\330<\267\254l\275\016JE\275\365z\244<\235!\010>\301\200\253<9\347\030=\177~\365<k\203\243\274\034b\314\275Df\241<Y\363\331<\017D\227<p\030\325=Iz\013\276\357\235$\275\356bD\272l\346\033\275\326W\r\276\033 \300\274\330\224\232=)-\024=\361\353==X|\274=F>\273<nyT\274\305\273\210=\201I\365\275z\332u\274&gD\273\2056}<&(\201=\010\217\305;<]E\274/\220\213\272\010\034\240=9\323\004=\\\307\232\275v\033\006>\'\337n<\007\314\255<\017\206m=\367{/>\252`!\275\030\032\362\274\362b\032\275\361\210><\2422\027>\367\367:=K\234\202\274\3201\276\272\342\265\316\274\213\301t\275\216\227\242<a\036\007\275\027\'\334=\3013\036:\243\241M\275R\276K\275\304\227\005=\357\276\025>\343u\311<\273\021\n\274\033p.\274|\274.;\372T\206\275UC$=\366\003\237;W\255\332=\277j\006\276~\373)<\323L\025\274\372\031{=N\333&\274\3043\"\274V)\223\275\227@\256\275;x\276\275)d\313<$\260\264<\346\242I=\374\003,<)j\225=\266\321\276=#8\266\274\204\337\227\274\355e\016\276\037K\240=T\016\202\274\212Y\216\274\376\206i\274\241E\010\275\230\204=\275\233|\260\274^i\331;\242v/\275\030\336\353\274V!4\274\211PD\275\335\007\342=\277\335\234\274nk\333\274\203\031-=fQG\275\034%X\275fE\306\275\022$\024=\014\317\320<T\006\237\275\275\2321=\305e\001\274\325\306\350<{\n\210<M\010R=\216\031\271=\345\246\226=\255\334C\275\224\217T\275\034\251\301\275\224\335\017>~\330\276\274\203\227F=\370\255L<\361\326\371=V\365\222=Ts\335=\326\365s\275\350\225\207\274\277\2674=\302Q\307=\311\276\241<\276Q\006\275o:\333\274\333\346\274=\222\313V=\322\240\226<\025\027\263\274\020$\242<I\242\r=k\211\332\274\237\215\000\275__\006=\200\336\252\275\201\000\325\275\016n\311=\3047\371\275\304\334\271\274\370\322\362<b\001\036=\244\324\035<\231\330\211=\300\355\266\275\327\237\234\274\267\233d=\222\343\370=\007\235/>\266\325\r>\231~p\274\371C\303\274\230\2157\273\374\n\035=\2073\306\275\303\016\207\275n\217\320\273\305x3=\366\003 =+\004\020\274\313\347\021\275R\r\275\273\250\006\240=\237\235\247\275\232\016\311\275\271b\232\274m\360\020\275\333\220\232;\223h\207\273\'\232\201\275\177\216u\275\365\"S\275\332\326\263=*7Q=\201;\270\274\324\032(\275\022\311\211=\265\215\004=\tz\376=\275\235>=s\367\226\273\363`6=\275C\303\274\363t]\275v\020\2539\014\263\371\274G\316\337\273~\273\316\272!\224\243= a\237=}\342\300;B\263&;\356q\362\275V\233H=e\311\022=o\235\213=\t\353O=1\357\207=\001\206\225\275\362\365\224\274\203\354u=\323\367\334=\367Gf<\367`\005\274\210\222\303=\236Dx=\035\226\014\275\226W\273\272WQ\372\275]9\363\271\036\242$=\016\013\242\275\364\226~\275D\337\201=\365\037\227;S\027\221<\323h\311\274\375O\212\275\210\213\361\274U:\200\2751\013\307<\241\346\222<\245Vy\273\237t\246<4\367\363<\3726\005\276E\243\221\275A\253{;\373\265)=\t8\356\274\216I\'<<\206\326<\243\322\370=\341\314\032\275\344;D\274\242\253f\275\313\250g=\315\342\260\275)\340{=\230\343\237<\n\320$=\354\323\327<\010\031\\=!\205R\275\024g\r\275k\373B\275\262H\217\275_.t<\3745&=\203\215\207=1\251>=\277\2568=n\357\313\273,\370\222=\325r\337\275/\273\003\275\223?\303=\371\001\363\275;\374\020\272EL \276Z3\317\274\002u\270\275I\301\324;6&\242\275\315G\276;Uj\253=jl\211<\030\362U\2757\326\010\275\324|\004\275\212Gp\275\226\251#<\307D\322\275v\r)>\247%l=\201\311\224=5\350\324\274V\007\221\275|\307\t>_W\010\275aR\212<T\004O==\036\236;\305\375n\275\265H\201\274s\0006=k\004\037=r\025\022=\214\323f\275\220\233j<\005\332-\275L3\277\275W>\010=\357n\316\275$9\003=\363\217\036\276\377\230n\275\303?\322<.\257\001\275rC\212=\340r\037>\371\203\327\273\354\231\250\275q\277\204=\177wl;\222\177\343=\326\227m\275\241\260\375\275\347\253\022=\177\235 \275\202\264\322=\002\251|=je!\275\332_\266\275\351\212\001=\231\211\233=\313\234V\274\353\0338=}\342>=\031\334\267\274\206\325\220\275\204\243\353\275k\217\247=-6\344<\322\235[<J\'\333<\215\305\203=\367i9\274\223\206\267<\204\225\255=\211`\316\274R\315\272\274\360\214\262\274[\236<\275d\035\346<\303\216\270<\306\033\252=\221j\245\274\303\027\267\275p\'\224=\262\275\005\275\020y\007=\241}{\275Qp\347<\214f\346<%4\010;[K<\275\\\3536\275M\345\021=\312\327x8\267\244\212\275\363\207D\275\363\010\314\273\256\363\021=3\3416=\022v\301\274*M\312=\020/\305<t1-=\375\357\023=ft\214<u|\363\274\320\350\321\275o\336\312\274\\3\001\275k\253\025\2758\035\007\275b\362\354\274\032\253\303;/\367\302=\243:\r=\205\030P\273z[\326\274\331\326\216=%\022Y=]\247\314\275>>\266=\216\351\021\276@\237\242\275\302l\374\273\214\216\010>\013\321\354\275\216\257\211;h\326Q\275\337\323<\275\311\371\275=\016\350\262=\255\357\227=\351\207\023\274\212\333Y=\021;6=\300\313+=\231`\255<j\300\233\274a\263 \275B\224\275\275\311\363\003\276\275\340\257<R\311\264\275\365C\232<\367\345.=\275\226\n<\3636\325<\rvH\274e\204\300\275\367\265;\275\033\214Y=\251\242\246\275\302\306\353=\241}e\274\n\222C\274/:\206\274n\362\266\274BM\017\274\313<\350\275B\201\336<8[\345<\007\335E=\370\025J\275\031\260\240;\004c4\274@u\355\275\375\036[=\313\206\375;\375\271\302\275n\210P\275\34206<\3207g\275\226N\313\2758\036\364=\366\371\252\275\353<\n=\275B\267\275n\030\034=\021@\215\274\332\271\035<F\326\221\275\016\365\001\276\364k\337\275\350\312\275=\326\317\242\275\000Y\351\275#\343\036\274b\377.=j\024%=Fr\260\274\030T\340<\323\026\356\274\356\265\n\276\337\336\215\274J \200<\3031\352<\366\027M\275\003\2060=Rg\000=X\010p\275\343\264\373=\333z9=\243\320\275=\r\013!\275\267\344\260<\200\246F=\341u\327<\004\352\225\275\362n\352\274\354@\'\273LA]\274~5\260=\345\242\230\274\361Y\254=^\237\264=96\203\275\236\267&\275aU =\204\342\216=\330F\236\275\334\362J<?\000\235=\225\226\245\273\024z\376\274\002Z`\275b\177@\275\234V\213\275V9\321<Q\261\211;\\T\304\274j\274\252\274\350\262\251=AF\t:\214\235\024=24\205\274\236\032K\275;\3452=?s\t\275\037n\017\275\327\256x\275K\253 =\347,\375\275p\363\033=\035\274\331\274H\275\307\275\006\275\007;\252r\323;\317o\361\275zj^\2751\273\243\275W\021\005\274u\3229=\325\007\214\275\201\251\256\275\306\221\322=\311[E\273\356\227_:\007-\255<\302\273\342<$\342\003>\330\253\341\274\357\226H<\226\240\345\275\344fC\275\rP7\275\322%\364\274\247<\230<\367$\301<a\277\351\274\376X\221\275\254p\000\274\235A\233=\213\347q<\312\202\226=\266T3\273p\227\215\274\253Wr\274\260\021\010\275\365\277\026=\201\321\213=7\207\010;$Gf\275\365\363m\275\353S~\274\0344L=\220\224\217\275B\272\360=0q\216<\200\236\320\275\3156\276\275\207\362\226\273\206$M<\351\000\304\275\354\317\300=\020\305\354\274\310cT\2750\243\321\274\237\225\245=\014b\255\274\355\315\024\276\244r\"<\303\246Q=\3200\022\275\264\357\267=\303\200\265\275\014\256Z<\301P\362\274\177\007\251\274\204\231k=\217\264\274\275Ox)=7\302\023=\234\033O\275\276B\177=\'\346\354=\242\361\260=\261\265\363<\345?\376<\372\321}\274\204\301\224\275!\341\'=\030`\343\275\r\300\325\274\347\016\274\274\273<\274\275\272\016\025\275\035Z\036\275r\375\247=F\023z=\256\207M\275#\354\017\276>\037\342=\033\244\n\274\332\340\246\275\310ae\275\272|\362\275D\374\255\275\263\021\315;\337\003\352;\277 i<#Ks\275(\335\207\275\256yk\274\255r:\275\202\257G=A\203\301<,\202\252\275\216\276\001\276\007\215\307<\304\255\374\274\370\304\363=\224r\212\273\250\357\017<\303\251\307<\315[\341\275\270\316H\275x*\362=8W\230=\315\211\360\274\331)\010\2759s\300<\335\254V\275\2747Y\275\257\207\225<3\333\266\274\003\301\307<\322\205\205\275t&\234\274O\023\241\275\t\341\035\275Wq\223=\270{\025=j\367^< \237\255=\202\333\334\274\224`\021\275\017H\345=\244o\221\275`\020\321\275\220\300m=\336t\370\274\"\250\001\276\030\236\204=t\225,<:\036+\273_\325\227\271C\020\223\275\207\031\221\274\327\024\253\275%\234`<\tI\207<7\217\232<=\343/\276g[(=.\206\026\275\334\\\342\275\334\330\211;\246\247\352\275\266\251\313<\256\221\266\275\231o\313\2747\250\244=a\365R<\364j+=\263\370)\275\342\243)\275\024\315\003\275]\243Z\275\306\300\320;\275\251*\275\006\253\316<\340x\270\274\204\320\246=n\212\370<\024h8=\336\331\237=\007\322\004\275H>q<S\203F\275\256.\365\275\362r$>?\354\351<\201\243\013=\246\032\216\275*\347\005\274e\355\335<\266f\001\276\025\2110<4\201\264\274q\367\222\275Hz6\275\314?\366<\274\200\205=\013VT=\301\252\262<\367q\211\275\317\274\266\275\364&\350=\240\243\001>\t\371\220=\307|\n=g\351\322\273}\253Y\275\2769\300\274Z\225\005\275\257\023z<\032\220n=\321;!\276G\242\243\275\205\251G\275\227\260\\<\376\305R\2755\017r\275:\006\030\274}\321\352\274\031&\204:\352\314\003\275D\360\231=\215\365\223\275\373<\027\275\353\226\235\275\323_\244=\361\277\212=\0160\344<\305\263\010=\241{\263\274\333\307\217==}\004=\223\363\r\276\025\202|\273\001\0021<\253\222\320\275\305\034\016\276\210\365\335\274$\037\211=]\033v<N\366\343\274s~\225<$\202>=\221\312\210=\205\371\375;>.m=s\350\"=5\377\342\275[6(\275\3524\232\275\270\265V\275\343\234\240\275\326\377\002\276\033\320z\275I`t\275\036w\025\275\353\3237\275\267\237\021\275<\204\010=\372\334==\037\023\222\275\373\340\026\275o\2357<\306\300\277=-W\310\275A\360<\275\305\024\322<\204\014\0079\353\353^\275\373\004/=\211@\227\272\266^\255\275\235\322\030=\267\217H\275\306\026\231\275TT\210=\3135S\275\275\222G=B\252\202\275\353\315f<\266\314_\275\225\221\277;\325n\370<\324\270K\275\336D\274\275\327\020\026<\350\226(\273\360\327p<\206\016\334<1#\335\275\347\330\373\274\234\241\220\275\265\314\203\275\237\010\t=\247\231v=\031\343\325:0\261\203\274\033y\223<\350?\211=\316?\020=q\374\336\275e\211\274\2759\202}\275\324\037\276\275~W\367\274\222Vs\275\246g\373<\254\370~\274~)\261=`\016\217=\327Q\356<Dt]=#\020t<8\222\255\275\334\375\232<\035\254\\=Ck\177\274}\":\275\337X`=L\031\204=R\226\371:\266\355U\275\207\226\262;-\224\326\274  7=\250\306\202=p\206a=\037\r \275\tx\202\274\265\256M<K\353B\274\270\301\262\274\357XT=\370\"\262=\266\373\364\275\324\325Z<\025\211\365<\366\235\225=M\335#>\032\021F;\345\317\035>\362aH\275\024i\204\275Z-\311<:\265\236<A\020\375<\357\225\037\274\006\016\337\275\274\r\025\275\254\240\241\273\3079\265\273\265*\223=\301n$=\223\230s=\256\333$\275\255\005\254\267\362\245F>\023\224\003\2745>\352\273\273>\263\273*\240\032\276\345P\022;\302bn\274\236ey\274\331%\307\274\341\016P\273F_\n\274\312I\313<<\234T;\2575n\274\364\3773\275\217\232?>+\353e<jI\214\273s\364\262\273s|H<G#\224\275\027\351&=[\021f=\361<\252\275\271\004\255;2^9\274\347\223\306:\034\240\373<\331J?=I\200\220\274Y\241q\275\235\020\010\274(u\355\275\255\013\021;\2029\366\274\254.9=_dp\275T\224\003\275\242N\034=\261\005\277=<\273\376=s\357\222\275I)\355=X@\267;\322>\334\273\013O\251;E;\275<\300~\366=W\247\271\275\210hV\274\374-\351<ma\325=T-\315\274\377\341y=\010i\323=\260\354\367:0x\351;Eh@==f\334\274\203\333`\275t\213\321\274\310\255\250\275\223\354\246=h\030\377\275\224\033\312\2745\2346=<\346\016<\263\244\225=\002+\277\275\344\227~\275\244_\356<\366\001\235=I\023E=-\253\264:j\3021\275\343\242C<\314\217\273\2757x\255\275O\335\021=\037C\331\274\216\204\003\276\321\274\257<u\2611=\2545U=\264\035\227=\374q\354\274&\255\026\274\025\026\000=\260\216\r> \357\306\275OX\217\2749I\262\275\247\032\271\274\361e\326\274=Uy=\254\177M\275\352h\254<`B\344<^\240\267\274Okz\274E\316\304\274\365\306\265<~O\325<[\300\001\275\n\306d=\022\352\353\274#\332:;*\n\232\274DZ\247\275\311\346\310\274W`\013\275d\373\013>\266\007\214=\232\225o\274t\334\265=2\270q\275\025\235\003\275$@D\274(\241W=\204\007\303\274\240&7\275\310\020L\275\237\361f\274\237lG\2751\246\001;R\215\314\274;\203\262=\272\022\241\274\211\305\030=\334\230\017\276Dr\246\273P\264\355\275\017\205G=\221\\\204\273\0149\211\275\\\r\232<~\267.\274\t\375\316\274\345\321i=\275\241\315=R]2=\017\335\010>8\250\355<ZUr\275\275\020\013=!\302\311=\212o\013\275*\252\002\275\334\312\247\274LTJ\275T\024\031\275A\247\013=\032\215\350=\027kY=+Y\227;r\234\322\275^\321\326=\241.\234=\277\246\031=\35190\275\267\303\034=@\201\202=\244\353\037\275{\250\372=\304\324\314\274c\236V=\201\037\217\274\356\3317\275-\305o=u\237\375\275D\314\210\275/V\025<\263\345\316<\240\241\267=\221\216\227\275\232O\001\275\252\'\327=\264\201\235<c\346\324=\246{\274\274A8D\274\225C\002\276\355D\346\275o\321\371\273\331\273\311=\356D\033\275\245\275\371<\346X\033\274\330\013\007\273\0302#\275.%\203\274\326\222O<j\177\207\275?\034.\274bok<\014\017\353\274mo\260<ykA\274-\301\211\275\340<R\274\317g=\275S\251\033\275\365\037\003\275\226]\227=\334\035-\275\230|6\275\220\247\001=p\373`\275Ph\266<x\345\017\275\250J\216=\346\233\245=\367!i\275\213\247\261\274,L\003\275\364\240\276\275\364fk=e,m\274\220\311\206\274\373\324\236=\220.\341\275\2301\350<\3137[\275?\223\355=\214\353\373\274\03777\274\306\200\211\275\\\251\222\275Z\276k;S{\314\275kp\227\275\301M\207\275\263W\022=\026O\277<L\025\320\275\t7-=\226\216\010>N\312K=\254;\021=\237\362\221\274\371\362\314<\233\035\200\275\327K\370=\306\2166\275x\341\t\276\004\226\244\274\273\017\213;*\355\262=\227J\253\275G\355\006=\001\324\275\275\027\247\366\274\371\247\221\2728\243Q\275\306#\260<\337\220~\274?\310\2019B\316\246<V\024\360\275\270M\367=\320\325\231=\027\006\263=L\242\320={\227\031>d,\036\276\367Y\033\275\023\222\003>\254\220\300\274\204\361\225<\262\207\246\275\257P:<O\2308\274\264\303\302=\230\267\261:\203S\317;~\340\035\2753\374K;\021b\034\275\1775\203\275\225\252\004=\200\005\266=7I%=\341\344\017=eC/=\026s@\275\2063\307\275\266M\233=\256\375P\275+\277\242\274k\351z\275\224(f\275\334\357\026>\213/u;l6\336<\2543\241\275\360\366\355=\251\201\340\2756\331\320\274L]\312\274c*X=\37567<\3619\022\275\324\037\216=0A\037\275i\250\333=\340FL\275\007l\252<\251\005\211=\364/\222\274\256J\227\2736\242\032>\220%\032=\267\031&\275\347 \334<=\237\000=\030\010(\274/0\214\275\273\223\376\274lO\025\275R\212S\274D\021\037\2740s\211\275\331\361\203\275\310N\225=\357H\244\275S\310\233;\274X\034\275\307\303s\275D{\301<\366<\022\275/E\020=\r\017z\275_g\231<\007\332g\275[\'c\274\223\301.=\362\351\251=0\n\324\275\367)\365\273\327\202+\2764BV\275\030\233\226=T1\t\276,\271\337<\301\341o\272\312.\177\275\323\231\204=\374\017\022\276\221\242\206=w9\235\2759\314\237\273\254\332\030=7\376R\275\003*G\275o\323\362;R\237\005\275Z\225\331\273\254\274\313\274\221\213!>\341\352\014>\223\356\211\275\347\370\310\274\n\246\2768\377\242%\275\223\335\222\274\007,\255<Q\r\321=\245\363e:\202L\226=\013\ni=\371\3779\275|w\224\275*}T=\331:\006>:Ft\275\342\"F\275\036M\255\273H\374\202\275\364\304&=9\335\217\275 \326N=\353\233\205\275\3228\030=\357\347\374\274\222.\372\274\030J\346;\306\223\336\274\3458\204\274\363\301\007\275\331\314\006=\021\331>\274\231\311\236=\3163\341=\300%\274=\201V\234\275>B\317\274\327\311\035=\273\232h=\314\333\001\274\264\001\356\274\314xa\275\303N\226\274\035\020e=@_\373\274;0D=\277\332!\276&X\016=*B\022=\035\240\266\275\321\303\200;\023\026\346\274>\"\304=$\222\010>\244\321\321\275\313\264N\275F\027\022\276H\213\211\271_\243;=\271\2320=D\305]=\020\276\333\274\202\315\026<\350\3275\274\365\224\246\273\347\250x<\017ob=Hm\251<\323C\260=s$\262\274\223\320\345=\330\255\004>\310\\F\2742u\264\275\255\357]\2745G\373\274\330\223\365\274\025\321\200\275\304\347R\275\334\377\226=\317Z\250\274\327\220)=,\003\035=\246\006~=\032\200Q\274\210\026\235\273\331b\225<\267K\356\274B\262W\274\274\251\237<\227\361H=\"\354\017=tx\252<0\023\233\275\023\352\034=N+\220\275\366\310\024\275-]\006\272&\210*\274\327\355\202\274\251\226\374\272\1773:<\252k\317\275+!V<;\351\253=[Gv=\316\316\r<\262\376\206=b\373\264\275SW\263:\270\244\316\2759\352\300\275I\206\037\273Ha\245=,>^\275\237dV\274\271)\025>A\361N\275/\002,<t\2427<}\256;=\220\0264=\216,?\275\216\370\301<MJ\035\275wP\270=\234WM\275\235\221\006<\205\336\311=\376\200=<Z\254$<\t53=\360\2668=\3247\315\274\336H\014\275<p\300\273o\222\372:s\254V=ul\022=\316\t\016\276\177g\202\275\305\201v=\3463\263\275B\014m\275?\252\302\273(k\236\2751\367\352\2756w=\275\337\352\305\274q\310\347<h\241\271<\315\260*\275\002J$>\224m/\275\207\030\270=u\'b=\361\242U=q\r\203;\330\273P;\257>\371\275\202\227)\274#\321\204\274\217I\020\274\255\260\265=\341\343\307\275G$_\275\211\255T=\005\324\026>\272\347\232\275\006\351I<j\370a\275oS\206\275\036 \002\275\363\217\226\275\211\375\357\275m]\242\273\256j\310\274\370Fd=(\202w\274W\264\263< \247j=\345\351\233\274\3469\234=\"\262M=\276S\032<B\nC=:\t\345\274\204\360\234=l\302\330\275\223\230\202\275%F\256<3\'\031\275bE\177\273\237\215\350\275tu\241\274x\205o<\265\276\330<t\246\210=-\004/\275a[\207\274\027[\017>ci\021\275\244\350\021>\304\0145<\013b3=\016\024B\275\2026\031>\223\021\017\276\261\345\313<\370\352\303=Z\220\377:\\\330)\273\352B\213<\212,\200=H{\237\275\322S\030=GQ\360\275\374\333,=\207\274\266\275\3706\237=\260\274\346<\315\272\232=,\335\204=\222\244\220\275\367\367\246\274\365\223\346\274\226\035\343\273\020\004\222=*\313\363=\346\355\366<\263\0214<[\342s\275\257GN\275\323\335\002:\303\244@=\367|\324\275\213\370\220\274\364v\376=Z\236^=\212s.=\027\347\340<\226\250\372<?X\312=\267l\202=\023\325\257\275t\202\221\275c\2664\271+\323\032<4\233B\272\177\262\027\275\225s)9\014O\201\275\221\323\372\274-7\236=\352\365x\275,\272/\275\315\347\217=z\322\262\275\305\371\364\275i\017\344\275\010\021m\2753W6=\270\337\207=>\030\021\274\t2\r\275l\025 >\353\212\251<`\024\201;EW\356\275s\013 \275p\314\210\275#\237E=\257\251\331\273\317}8\275\'`\315\275]8\001;\271\271\251\275\250\212\233=\227\310\310=\342h4\274\277\376\006\275\002\033\321\274\245\004\001=\336\n\026=\377\276\272\273\345\364.\275(\353\335\274\231\330H=Q\353\303\275\3640e<\005\273\306<P\235\217=\235\217\243=\233\262\274\274\241\005P\275\220^\303<UV\355\275\271\256\2278\213\'?\275\210\276\241\275\266(\304<\221\225\017=)\202\327;\203\241\340\275F>\251=\3300\251\273w\304!=\221\302\242<\017/\202\274u:j<\315\'\302\274:V\\\275^[}=tp\267<\246\333\257\275S\370\221=\213\261\246\275\361w1\275K?!=\266\030\255\275\031L\250\273\352\244I\274\344\025T=\006\n\024>\331[\216\274\222\334\272=\212K\323;/>\227\275*\240\207\2744q\266\275\235\201\254<\255\201,;Z\352\223<c\037\006=\324o\351\274SQ\236<\246\310\333<\017J:=\220\360j\274\021\021\242=;e\017=q\327\'\276+\243\305=\017E\266\274\263\220\362\272X\376%=\323.u=x\377\032=\231~\024\275\2564i=\'^K\272\036\306\215\274\220i\303\275\331\273\n<\232Pd=,.&\275\230\032\367\272\214\305\035\276\331a\262\275`\037\273\274\265MY\275A:\261\274\352\3213=\227\027\316\274j2\355;\'\307\364=\244O\363;\324O\341\274\366\211\023\275\321\374\230=\004\\\005\276\263^\3548\312\r\305<\000A\245\275\214\342j<`1\220<(\306\370\270,\270\306=\372\252\317<\345\035\010\275\320\371\210\275e\243m\274_\250\377<}\367\257=}\002\"\275~\366I\275\240\365r\275\2746\242\275\325\204\034>\351/>=D\275\230<B\022e=\352\340\243=\352\322\003\275\273\333\366\275\003\203\215<v\313\007=\236\352\020>\317%\371<T\321\003\275\324;\271=\223C\277<\332Q>\275\377L\252<\365e^\273\325c\273<\232<\"<\221#\006=\204\177?\275\262O\006<T\031\037=\265\021\234<\232+L=\255\037\212\275\345\037\"\275\006\345\203=\023y\362<\272t(>AD\224\274P\204\331\273\313\251+=u\275\360=\3423t=\235\014]=\251\262!\275n\225\233<\251f7=\252\017V=\244\317:<k0\202=7\207Q;\215\'\010>\242\024\276=J\004I=\335pK\274\025.v=\204X\0139V\376q\273J\243\014=\355\215;=\334\344\203\275\203y\220<!\336\202\275?\256T=\265\037\207\275;\240C\272&\220+=%\252r\275\317-\212=\026D\224<\301\006\'=\213I\241=\031\0032\274\024)<\275\313*\243\274\267\232\014\275c\271\017>\201\334\020=~P\222<0t\303<\277\3160\275\216&\220=\234(*\275\325\330\001\276\000\340/\274J\366U=rP\332\273\355\216\255;\327\020\231=\006G$=\364N\314\274U\267\026\275\263\033\311=$0\306=\255*\210\274\016\325\003>\037a\237;\201O\327\274\227u\230\275\227\277\227=\363\354\211;{\214^=wg[=\316\207\215<\273\236\226<\322\335F=q\363v\275\215|\201\274\310\352\246=XH\224<\014\315/\275\334\025\t\276\255\352\302\274\004\007v\275\237\307\032\274\034\336\254\275e\244\013\275\3668\361\273\264\226Z=4\3124<\2149\014\275\246\322\253\275\230\326M\274\245\016\027\275SK&>n\231\336;\312\211\320<d5@\275S\266\221\275\345fI\275I\262\204=\326|B\275\025\310\206=\323\250\224=9(0\275\344)\243=\254@\203\274\331\337\227\275\223V6=\001\210W<Av\253\274a\3500\275\007\375K=B\326\330\275i,^\275\237\033\212\275\351\035F\275\023\321\3279\031\220;\274g\324+\274\202\013\244\273n;6\275{z7=2v\214\274\323/\233=\263\240\253\275\n\024\007<:\357\263\275G*1=\244\226s\274cnz=\355\210^<\356i\211\2757\362q\27564M<\177\310\210\272\335f\316\274\340[c< \344\027=M\0010\275I\034\226\275\017r\325;\236\022A=\214\213p\273\353\027\n=q\2006=\317!\225\275\231\007\017=\035 \220\275\026v\255=\365\242\371\272\253\352\273<\377\255\254<2\264\233=\361\340\010=s@\334\275\367\2759\276\210F\004\275\027\305\322\274\375i\216=\273\204<=\020\272\320\274\207\361\312=\332\003\025=d>\'\275:\242\241;\342z9\2727p\374\274\021\301\032\276\354\':\275\2279p\275\021\373\217=\376~\010\276\232S\324\275\232\330\346\274\347\034\361\275\225t\207\275\001\371\273=W\026D=\016V\210=\365\255\356\275;h\270<\270\232\344\274\376\232\010>\331NK\273\351y\366<\336\tm=\333\330W\270\223l\267=\323\325\271<~\263\322\275\366\371\177\275\'\266\351\274\357#\225\273Z\366N=y\035\331=\030}\364\275\360(\n=\2241\251=_\362\252<k p=\362K\330<\347\314B=\345-\032>\014\030\374=\001\013\217\274\221\2043<+\244\255\274\201\275\237=\034=\273=\241\244\334;\333<\210\274^\365\353\275\337\210~=\261\302\360<\256\364\310\275!}\267\274-\257>\274\267iW\274\246\347\242<m\263J:^\017\341\274\205\212\226\275kO\336<\275w\n\273\216\331\204;\240\207\333\275\031\236\r>\366e\343\275\213]\216<\255\036\"=cN\222\274N\273%\275~\'\n\275\252\355\250\275k<\303=f\260w=\317\312\233\274\010v\237\274\355a\361\274\227\261a<Z\343\022\276H!*<\016\341\203\275\335\255\345\275%w\270<\310b\245=\263\203\032\275\362i\022>\031\300\352\275\341,K\275A\346\3539\255\374\233\273\257\346\263\275\356=\325\271\216\2662\274\216\303\027=*\rx=R\220\311=P2Q\275\007\030\027=]A\254<\224\351\210=O\311\367<~\342W=s\225\237<\316\315\316\275\231\366c<\224\337\005\276\364\224\3079y\216\342\274\271^P=\364\010\203<\223h\206\272\343\340\225\275\230C\211\275{\305\300;\335\372E\274CA\n\275\322\222\210\273s\253y\275U\276\026\275/\360\002>\264\020\373\274\221w4=\017r\"=q\227\324\2743<9\275\246FE\274\3401\352<\274\374\211\275\177A\350=JJ(\275L\261\213<\324\375\007\275\301$\226\272\330V\025\276\237\025\363<\312\244 \275c\2730=D)\020\275\343\242^\274\376q\355=\2121\227\274\371C\t=\256\232\240=\374\2023\276\354\272\341\274\207\2565\275\320\210\035\274b\245|\275\023v\010;\261\2222\275&\031\337<\004\276\267<*\220\357;I\205\227=\031\231\005=\342\357\327\275b/1<\023.\020=bu\305:\207\3338\275\257\213\253;k\262\275=f\220\014=\205\211%=]\243\223\275n?\021\275\243 \215\275\213\203\013=b\3249\274\211\263\024\274\216\377\003=ZG\317=\202\332g<:\364\220=\321s\270\275\303H\007\275\200\340\305=\206x\330=.\363v<\305Xm\274\241\267-<\024\334\336\275w\212S\274%\375\226\275k\017_=rcx\275,~b<^\205\230\273X\036\227\275!\233\013\275$\0329\275#S\032=\034\232\r\275\301[\353=-\241\017>\204]\"\275xV-\275\376\027\313\273B\362\253\274\373w\352\274\2145};hu\365;\322\020K\275-]\337=K\256n\275\213hV<\205\234~\275\377\341\023=\347\231\201=!s1=\375\"\007\276\236\336\212=\345\307a\275\334\213\022\2748S}\275\210QB\275y\315!<\360\237`\275SA\227=N\307\016\275\002\220\213\275\243\363\210\275\261\250\244\275\331\375u=\034\275M\271.8\250\273\032[&\275i\3752\274\230\357\003<\030\260\242\275\345\221\361<\371X\243\274\317\273\200\274\375&\367\274B\213\352<!q\216\273\262)\212\274T\0161\275hK/\273\323L\310\273\027\353\216\27476U=z\323\210=EZ\234=SQ\365\275\360u\t>\342\312\016\275\376\224\345<\263\256\030=/Y\212\274\230u\t\275\000Y[\275\023\253\244<\3452g\274\014\277\272\274\265\365\346\274}\305C\275+B\221=\255\221\033>|\320\325<\327\316\377\275\017\253B\275!\000\017\273\321.\037\275*\351\326\275\337\\b=\376\204R=\330\036\314=\232\356\256=\322z1\275\035^\221\274\231\311\234\275\253\264D=\310#D\274\207bP\275\207\333\020\276!=\222=\373u\234=\023\236g\275!\253|\275\211fi\275m\212\231=\3644\016\275c\377\007\276\273\351\014=\240%\023<\364\315`\275N\"I\276\375KB=^\217\201\274\244\220\037\272\321\031\t>\356\222\361\275X\306\347<\277\024\265=\034r\246\275o\357o=\227\205\002\275\340\275S\275\206\230\027\273\"\267\233\274\377_\">)G\305\275\2244\203\275Bo\330;\361d\005\274\214W\241\275\'\000\215<\331r\027=P\265 =\'\r\016;@\\\314\274t\005\004>,-q=\232]`\2759\304\316\273\017\354\234=\352\205B=o\002\253\275\245\304\337<\241_\036<\360^\243=\366\331d=~\301 \276Dj-<\177L\367<\016~\347=3\267\244\275\004&S=u\333\215\275\222<\312\275\031\263;\275&b\026=ss?\27497\017=\303\330\203=\300\364b=\316.3=\325z\271\275\201(\232=_8,\274s\346\324;\212\360\016\275\312\304\265:\325\3108\275\235[\030\276\222\371\212=Q\216\341\274_\337\300\275\362&<\275\000\2664=\270\034\206<\373\335\260;\277\004\304\272\222\200\004<\377\3645=\265\251[<\370\323\301<U9C\275\311\202\335:\252\010\242\275\337\2678\275h\216^=\351\333\357=?\026\'=\355\036\000<q\345\262<xH\326={\366\264=\355\031\323<\n\321\342=e\036\312\275:Rm\275\304\377O=\001\026\\=\354\266\267\273P\234\007;\017\247;\275\245*\032>.:\302\275O\357\300=\375\3651\275#\357\240\275\005=\311\273HR\226\275A\3219\274\021\356\220<\316\332\026\275\306&\020=\2309#=\ta8\274*a\253<\017!\246\275-=\306=\216\262\360\2748\222\362;\276(|<\"\350\231\274o\360\377<\355\341J\275\337\352\334=h\253\024\273C\244\303=Lc\374\275\273\336\257<\345E$<E\'\003=\246\217J\274D\214\242;\227U\313\274\021T,=\351\037\306\275\345\251\206<\024\271l<\010\311\256\274\214\331\300\275a\222\020\275\263t\270\275\217u\037=\211\311\250\275Ol\222\275\013Z\331=.\325T\275\227\337\336=\307\372\220<\334\217\336\275($\206=Z{.=\261\231\227\275\307\221\206\271\225\212f\275V\264\362<\333\227\240=i\345\310\274\271\251!;\211\230\314\275\002\255\316=f\356\265\275+\250l\275c-\002\274#\212$=(\264\031\275$X\277=\215E\247\274=\246\355\275\267\022\312\274\330\325\202<?\300\323\275m\232\203<\355\310\017\274\333\374\206\275z\355\301<\013U\334\274S\326\007\275q\217C\275\023\014\005\276\321]\312\274\267Nd\274\377\276n\275[\021\000=3h\307=\244\n\005<\327\221\245\275Noh=J\2730=\036^\263\275\204\226\362<\365er\275\031#\204<\273\201\214={\343\313\274T\350\304=\245_\365<c\344C=\217^\344=\353\007\302\274\364?\225\274\272\345<=\005\005\246=\272\317\313\273\203\2028\276\251\210\336<\220`\331<\031\365\022\276\334\034\233\274\365\363\205;_%l\275\232/q\274\300\241 \275\034H-=\250y\242<\216o\316<;\326\250\274\"\312\350\275\260H\270;\303\304\233\274N\003\276\275k\262/=\253\376~\274\366\235)\275u\251\005<\t\212\204\274;\246\211=\355k\245\275\343\362\325<\233ML\274#\325F=\357\371\001=\2477\214\275\037\234\024\274#d\325<?\305\013=\201\031{\274\3578#\274\013\212\317=\354\206\214\275\340\231\345\275\335\377!=,\025\021\274\243\3716<2\\A;|\351\216\274\351I\332=V4y\275q%\030\276\333\000\221=\270`0\275\000\315\212\275\377\202p\275P\357\237<(8n=\354\0168\272\366C\203\275\\\352\353=R\032\317<6\213\345\275\311\202B\275\240\332M\275b\202D\276\327il=\tN\352:\330\255\340<\014\256M= \t\204=\304\035\360\275\354\274\275\274\237n9\274`L\000\275S\r\004\275\226\341\271<Z\026\002\274\236\3565=\355gl=%\017\367=\322F%=\007\244\220=~\237!<7\210\227=\343\'$\275\372\306\325\275\315&\031=\227\026 =\347|w<\342\3314\275\356c\t\275\342\272\360\274\363\020\343\275\255}\022\276\310x\241\275\323_6<Nz/={\311F\274g\276o\273\2460\221\275\0376\370<\251Mq=\333\346q<\224\243-\275#\214\202=\355k\311\275\362\351\220<\022y\351<Ku\272<\004,\305\275\202\303,=1\021\362=\306\347T=\325\204\232\275y\024\201\275\021\355\036<\322T\002=M\272\t=\245&\r\275\225\254j;\245\035\314={\337\277=6V\'\274\277\"\350\275\300\025/=A\224\233\275\0237\342\274\234\251\204\275\300\211X\275G\225\341\274\033\263\025=\t\352\360=J\255\366\272\2305@\275\373T;=#\362\214\274\000\271\023\275O\036\202<\242a\304<\023\t\340\275e\025~=.Y\357\274\353\355\250<\203D\033=\225\313\177\274\350*\201\275A\270\257\275\000\313\021=|\216H;d\262#\275\324\026\t\275\020V\317=\266\257\305;\244\354\010;\245\365\277\274|\210\300=\324y\200\274\3267z\274\231\247\372\274H>\313\273d\336\016\275\241R\027=\262\001\201=!\004\275=\263n\252\2749\275\264\274\245\013#<_XG\273\220s\261<\333\200\227=\271\236\200\275O\324\267\274\225\243N\275\031\277\020=\335\357\224<\031\264\303\275\005\225\023=\213\376\341\275l\312A=\265s\201=2,t<t\005\337\274@\256\237=\n\337\361\274\367\270\006=\020\016\336<\277\240\000>\"O\307\275\000\246!<a\350\306\275\016z\216\274R1d\271B\213\207=\210]\006<\337\221u\275\375\037\345<\305\\\207=U\247\"\275 A\202\275\305.N=\020|\235\275\217\254\211\275\335]\336;9\2735=\227\226|=\213\205J=\246\270\003>\0352\337\275co\252\275\251\375n\275#\213\264\274:\223\275\273\377Q\247=34%=\243\317\366<\215\0141\275n\210\224:a\236\257\275\347C\246\274eO\016\275*\010p\275\347c\3449\2336\247<\373E%\273F\262\243\275\373\244\034\275L\351]=\"k\207\275\3678\246\275\252\373f\275\245\007\331=\365J@\275\377)\225=\376\230\007\275\247\247\301=\316\207F\273D\262\276\273$ m\274\322\222<=\355\277\203=\014\346\335=\036\027\310\274\257\266\036=M\336/\275\327s\200\275\243\000\277\275V\220\210\274%\260T\274\276\304U\275\277\257r=\010\331\023\276\321#\242\275\300)\010>q\362\243=\374\377\022\275\234\031\360\274\254\rP\275]\245\202\275\010Qh=\017K%\274\247\024\013=J\300\371;H\271\200\275#a\335<\355\226\224=b\r\034\275\223\347\024=E?\222\275\003_A<\374\234t\275\'\024\032\275\3474\204=bl\002=\204s\030=\323\241\351\272\017\t\342\275\273\304N\274\022\315\'=\371\240\262\275\340\373g\274\007V\035=G\231\346\274\340\3457\275E\022\334=\0246\243\275h\002\260=\267n\014\275\261x\340\275\3322.\275\3657\302<\363(\247\273\317?\204\273G\022\222\275\303B\t=\250\343\341<\375-\340\274p\340\214\275:!$\275h\320D=\347\t\001=\3233\260\275\034rp\274\200\013\246=fH\233\274\363\365\350<K\216\267\274!\236\336<\242\022\016\275p\014\273\274V\334\264\274\243\010\230\274=\2539=\262\205\270\274\301\014\033\272 \311\220\275\337\354\023\274u\310\242\274\303N\315<.\360\307\275Ri\376\274s\014\300\275\005H\006\276\364\273<\274\004\260\337=h\252\364<\250\216\377\274\024\001 =/^\017=\\\002i=\374\313\323=\324\241H\275\3676\371\274B\367\360;\356\"#\276\010T\333<\242\264\014>x\016\234<\252`\334\275\314s&<\341p\315\275\335\315\217\275\027\001\225=2\032\312=f\362\301\275!\177\223=\314o\231\275\322\266\237\274=]\234\275\321\304\321\273b\216g<\265>T<\234\2706=e\267\221\275\022\366*\274N+v\275\014\273-\275(\201\317\275\006\206c=z\361\"\275\016^U\275\266Z\331\275S\327\257\272qy\030\276\351\225\323<\272~z\275\255\316|\275`\034\216=\373\177C\274\016Y\335\275\320\274,=\371\313\364\273\331H\312=\207\032\034>\261e\207\271\214\256\333<\302\362E\275\026\231*=\272\244\345\275\215\257\324\274J\345\010=8\265\306<\235\234\277\275\322\310\005=\234\207U=\031Y\342<\013\241\264\275\265\270\230\275\345\366\033\275\275T\334\275\357\317\203>\314\357!<\372&Q={\336\230\275K\\N<\244\235\263\274,LS<q\300\206<\347g\302\274\335E^<\267\013?=\227\031\314=8\030q\275\027\\\221=$d\274\274\005\313\210<\001;\212\275rG\202=\337\331\241\274\216\346\247<\277\203\024>EB\261\275\201\032\231<\315Y*=q ,\274\322\370)=+Q;>\213/\313\274\250\261\033=u%$\275\356[\213=\235\003H=\273\271\335;\203\240\200\2735\245\257\274\010\264j<sY\r<\255$\304:\377\r\016<\306\363\234<\007\321\360<L\021\265\273\265\317\367\274z\232}<%\307\232\274\036h\001>e\214\217<\177U\"<\221\310\360;\356P\224;\t\010\031\276\222\240{\2755\355x\275\2633\020\276\273y\251=\365([\2758hk<\233\035/<\343_==\333\373\264<P\314\312=\n\330\n\275\030e\322\275\306\253\002=H+\202\275\002\346f=\251\370\226<\337\277\226\274Z\013_\275\242{a\274\212E\231=\346\031\004=\276\202p\275\361S\210=\261/\254<\247N\375<C\r\"\275\'@\364\271\236\003\235=\"\206\202\275\272\200\250=&\324]=\346\344 =\021Y\306;\313\360\247\275\265\262u=\246\"$\274\177\252M\274\036sb\275Y\313\243<+\255\325\274\342t\341\275\265\006:<\311H\201\275Qw\032<\235\247\253\275\211\t\205=`X\223<c[q=\025\2577<%x5;\3350\261\275\263]\235=5\316)\275\232b =$/Z\275P\251\201\275U\357I\275\035,\222=o\357\267=/\315v\273?z\273\272\253\257\027\275\217p\210\275\253\332F\276\346\024\274\275Fv\274=sB\266\275\322\244\311=\252~\365=\313\317\207\275\274\224t=\312\366\275\274\241\257a\275Q\010|\275\346z\222<\241\177M\275\376\353\013\273&\237O;7\370W<\016\337\224=P\230L<\nJ\206=\260\202\273\2749\030G\275x\211\302\273\3149\277\275\315\024\340\273\344\302\271=z\274\340\275\3671\207\275\265cF=\273\006\302\275\243.\321<\326\336\321=\273\243\"=\033\274\224=,0\030\275\022}\356;p\256k=yu\212\275Z\226=\276\242\260r<Iy\243=\267\0026<\356\326t=\205@9<\354\026\325\273\025\376!\275jBQ<\000\037}\275Z\305\263\275\217\205\017\275\371\241;=<\016\340\275\276\021\352<\\\3076\274h\376\265\275\215\272F=\247\340@<\3471\207=\302x\035=\030X\035>\212\321\273\275\275,$=K\357\n9D9\372=\337\\)=\363}\024\276<\324\324\274\326\007\000=\235\251\263\274xrG\275d\0373=\002\246 =,\366\222\275\204\223\001=\307\246\227=\360.g\274~\210S\275\2743\366\275F\306\234<\352\251\034<\333Z\3229W\242K;\204\371\033=6\\!\276\232\242\035=\312\241\r\274\275\347\034\275\0215\354\274\367\\\250\274z\332\003=\027\323\267=\2546\\\275\334\001\204\275ah;=v\024\301=\321`r\273\240.\233<e\234\340\273\274\270\372=\213\274\352<\037\243t=>\t\007=\241Aw\275Vy\233=<\nd\274\014U\343<\222dD\2751\024\237=\361\236\375<\033r\234\275\302\230\355<BI\324=\213\335\362;\204A\203;\001\235\302=>\\Z\275\021VT=5\275L<\252\257\245\274\r\017\006\276\243\260\303\274S31=\326\3367=\212\370\245\274\021[_=\025\252\323\274\222M\211=\227\314\030\275\232\371\014\276;\313\233\274J\350l\275~\001\022=\303\007z=\333 \003\274V\251\232\274\257\007\361\275u\205\255\274Y\271\010=V\336\002\275\207r3>1\375\031\275\205\341[=\364\342\371\274g\2454\275\216\246\345\275\264_\031<\314\305\266<&\337)\27557.:#BL=LV]=z%M\275\r<\330\273\223\205\230<]I\345<E\'\217=\237\221*=\232\327\347= \332\300\274\345)\037\275\243\202-\275\224h\356=\225\n\230=\"$\007\275\246\276*\275\013@\035>\227\024\007\275\214W\222\275\376\340\001=\220\340\201\274G\216\204\275D\021\221;\006\026y\274\354\351\311\274\037\352\217\275\257\335g=\323\311\262\274\005~\247\275\260\007;=>i\260:\270\262W\27588\306<Yw\347\275\276\256\277\275\326\272\304<\376\336,=c\327\343\2751a\263=5K\030\275\360[\312\274\'_\244<\3242u<>d\355;\211j\356;\275y\220=\004m\013=\'9\306\274\3404\270\273\372\262\330<\237P\235\2747\214!\274\006\024>=;\336\270<\261\250\233\275\035\005\235=W\373a\275\273\033\025\276\321\302b=\255S\030>\264G\255<\017\240\337\274\000\326\353;\337\240\242=>V\367;\272\252\234=b\332\020\276v=\314\274\257e\214=\350\315n\275\336y\007=\213\252U=B\364\254=Q\222\243\275/\341#<\210\343$\273\272\216\263\275\022b\006\276\017J\351<\364\377\017<\245*\023\276\253\365\214=\374\030\225\2752\224h<\202\034n:\200x\276\2751\325\365=\255:{\274\357{\254\275\021\232\210\275\324\327\033;[\033\031=\331\207\241=N\252g\2757\007Z<\252t\027\276K\360\220<\226ee=\300-\363<\300e4=\037\222\213\273\206i\260=4|M\274\247\314h=\326\341\211\274i%\365=XkZ=\014lv=l\333\256\275\211\332\257\275L$l\275\223\211\221\274\245\342\211\275#\005(\274\315\360\242=\030\2317=/^6=j\326\236\275t\302#=l\006\n\276n\256F\275.\266 <\007\223k\274s\214\177\274d(\334<\212\021\367=\017C\210;\r$\370\273\000\251\034<\242[,=\340/\211\275\023\255\233\275w\013\031\274\267 \254=\333\250\202\275\022\355\035<\346\235\014<\373_M\275\3538^\275\031v\264\274\24395=\2714N\275\3134\016>\304\235\353<\343\210\226\274R\362\027=\306\342F=s\312O\274\254\242%<\n\331\242=Z#\250\2749tW\275\316\363\272;\200\313\3079\255\2672<vQ\020\2751\021\007\274[\212\207\2752\322\230<\305\233\345=\233\244\271\275\323\010\217\275\212\'\325\275M\366c\275Ks\272=C\020\022\275a\274d=\241\rn;\317\371\t\276\266\206\236\275\331\304\333\273\342\345\033\273;+\224=\021\257\212=\225\377)=6\037\237\2742\330s=\017GK<44\320\274\354\224=\274]*\274\275\353\352\324\274\367\351!\275q\027\213=C(\374\275r\270\265\275{4>\273\274O!=7\t\270\273V\303\365<\267CH\275\315\265\255<~\376\263\275\261\356\252=\323\304\210\275.\262C\275\260\274\r=\264\272\271<\307Q\331\275\022\364\207\274\237\027\201=\206\270\234\275\271\006\t\274$\361\346\274\315$\251:Ky/\275fl,=\255V\233\274\3364\273=\246k3\275<\2321\275w\r\343<\373R\317\275g\210\213=\260]\337\275\354\277\217;CH,\274W\266O=q\203F\276j\014\021<1\216\242\275t\316\210\274-\237R\275\364a\210\275\277\310\036\274\234\206\262\275\352M,\275\r\222\224=\355\254L=\033;\262=\230\037\233=\312x\250:hQ\273=\306e\247\274)\0022\275\360\034\275<5ct\274\005\265\307:\214\2764;\325\221\017\275\324\303\232\275\301\346\030<\300\022\363\274\277\354B< 2\027\274\362\341}=G\261\333\275\227/\245=\321\267\225<XzZ=v\222\237\275]\326\275\275j\027\233=\\\344\350\274u\273\231<\351\350\355\275)\023\020\275\214eb\275\215<\t<\031i\274=NMh\275\341@[=\245\276A\275\310\356[\274\204{\035=\021;\243\275Ar\206\274[\3333<\274\034\317=j\016\t\276/=\202\275\253\206\331<\022\277\303<\256\000^\275l\276\250\275\346-f\275\263\345\300\275\243\343R=T\223\242=\266a\321\274f\371e;\244=\252\273\t\372\313=\262/\260=\256\371K\275(\007\317\275\230\363\"=V\331\203<5(\376\275K\0148\275\350\006\210=\247Q\262\272\350\211\246\275\205`\264\275\376G\346\274\333m\324<l{\236=i#\207\275T\222\254\273\r\331\025\275\330\360\361\274Cn\342\275\"\335i\275\203\340~\275\363\225\245\275V\344\314=\034w?\275\016\334O=;\354\r;~]\347=O_\362\274\n5\246=s\237n\275H\277\031=\317`\325\275!\205\330\275\355\004\202<o\271\244<\202\352\220\2741\031\203<a\300\305=\244&\317\274-B\341<\206\272\302\2759\332e;\216\205B\2757\365\010\274Qfq=\277\217\362\274Ug:\275\276`F\274\313\220\332=\356\245\224\274\355\246m=T\245\017\275O\302\266=\300\327\255<\262\002\253;\n-\241\274 \212\324\2735q\303=\274\000\177\275]\357_\2751\305\241<(\360)\275\334\314\024=\t\2269\272\2745n=\363\351\252;\016H\371\274\253\362:\275\340F\224\275\335\237d=\003\177\371<\334A(\275_\351l\275gg\374\275\302 #=\234\177u=/\017>\274\333O\363<\304&q=L~\307=}\030>\275\004\253\247\275\033\237\206\273_\007m\275\315..\275\247;z\2752#\262=S\251\020=\256 \204\275\006u:\275\035x\211;\204\020\315\274E\220\261\274\334\002\227<\307\333\177\274bI\332\274S\356M\273:\341\002=\301\032\014<\311\2353\275\223\361\336=\321\031\207\272_K\252\275e\366\227<\242,w=\033\n\375\274\251Q3\276\014k$\275G\361\260\274h,\217\275\030V\211<\311\322\366:\020J\231=\254O\277\275C\245\332=\231\005\021\275\213\277\354=\\W\235\273\010an<\010\307\216\275\264\005\210\274\321m)\276\230C\265\274\327\336\255=\243\254)\276\364a\216\275s\212\010\275\210\016\246:8JS<Y\325\355<\370x\263\275A%\213\275\345{\257=R\364!\276/\237\307;-\001]=\262\024\345\275\217[,=\243\304\375\275\007\223V=\031\243\357=Y\246\261=}\374\255\275\344,\005\276\255l\270\275\271\241K\273\261]\375\2745\353[;\276\341Y=3\354\251\275\200\007\222=\265\220<\275O\315O>\376\254\201=E\216\021\275\"4\367\272j\356L\275\206\372|<V\256T\275\320+\243=Q\003+\275.x\255<^\252`=\264\235B\275*N\251=\360v\036=\362\262\224\274\341s\241<\032g\253=\355\320\016=\021\021l<\216\210`=\271=\277=\177\226\3119\322\226P\2758\367\001\275\0272\240<I\014\260\275\213W\244<\265\034\247<}\375\253\275>\206\277<\230UB\274\305\215\242<x\000f\275\272\316v\274\337\210\027\275{\325\255\274C\364\257=\300\323\277<\366\355T\275\272\365\025\276\215\\\323<\356\277^=.\264\016=\214\217G\274\261\225\367=\r_:\275\210\017\003=~D\214=\3765\202=y\256\261\274\206\313\035<\262\301Z\275\253\260)\275\345\270\217\274&\236\253\274z\r\342<\033\212\317:\370\214\242<\352h^=\006\005%;\375\361\373<*\231\317\2744\331\032<3\240\225;\230\0306=\332\0046\274\305\345==+/R\274J\260>\275dK2\275\373\r&=\330\355\204=a\342\225\275-\316\355\275\014v\265=:\243z\275^m\234=3\014c\275\364\020\001\275\212\312\207=\364K\216\275\312`\226<\270\375\204:\2445\010=y\346*\276\325\215\346\274\032g\266;7\327\207\275\333t\300<\362\211I\275\277\255\200\275\237\343\262\275\256\006X\275d\235\031\275\357T7\275i\254#=\336$\337=\335\303\251\274*\272\205\275&\020\273=\262=\215<\245\276\017\274\303\375\007=qn\261\275\362|\304\275]\031D\274\355\263\202<ev\241;\003\023@=\222Q\315\273y\317\234<\216\274\264=\334\010\247;n3\317\275\n\314D\271\327\252\340\273\211(\310=\256\254>\272\'\004E\275\376\323\027=\225\022%\275?\223\370\274\376J*>Z\216\013\276\034\203\274\274\370\253\205\274C5C=\334\021\314;E\243\035\275[\036\013=0\327\016\275r\364x=\223\214$\275\316\215\237\274\2612M;\347z\225\274\306{I\275\265\000\251=\307\236\356\274\367Q\220=A\214~=vFW\275\204@\244\275\210\001\022\275\203\366\257\275\353\204\024=k\212\220\274G\325\242\274\177\t\325<\255\000\373=\252,\026\276 \373l=\237\352s=\365\251\221\275\356\264\273<m!\227\2747\364\n\275,\342m\275\377iH\273\3404\241;v\000~=\323\324\257\275m\367\212<A\205\224\274\241\017S=\002&\367\273\237\026\222=\346\271\003\276@\245\223\275\021L\235<\315\215\247\275u\231\377\274\341\323\274=\351\005.\272\362\277\031\272\334\007\222<\342\351\226=\357\340\375\274w\333\242\274\265\304\263\274a\327\212;\250\355\250\275:n\032\275\"\261\241\275\266c\027>\345\373?\2751\276\340\274I\255\222\273\345\226\215\275\225\022\022\275\367\324\221\275\265M\023\275\325g\314=\306\222\274=w\340.=\'\254\007=-t\003\276\1777<\275\240\274P>|\231\325=#\252\274\275\374t\215\275\225\353d=T\205\356;@\327\334<oK\331\275\276A\306=n\335\202<\362\371\262\275\245\322\216<\rg\220;;\377\234\275i\220\212\275[\376h=\214SY<\014\235\211<96\001=\244YZ<\30798=5U\341=\300\214\322\275`\331\005=r0\364\274\324\362>=m\014\251\275p\351?<M\204\234\274\223;\021\275>\242\255=\022\004\243<wc\026\275\006\205\025=\346\'h=\257\217\023=t\006\257\2749\007\254=\024\337x\275ee\303\275\310\371\262\274 q{\2738\312?\275i\375\231=\025k[=2$.=i\344\302<\233\353\206=\377\341\021\275DE\006\275\254\177\205\272]\252\374\275\312\346\277=\310\020p=\002*\225=\362\005\237\272\344FS<TC\335\274\246~\341\274\325`\244;\302^\324=v:+=\177+\000=\355p\010\275\004e[;Cg\217=\257\250(\275\321\027m=\201\033\257=\013\276\302\274s\022\006\275\271C%\272\326\204\240\2741\027]=\327\0218\273x.\317<\336;\006<_p\035<\261\303\312=h\000-\275V\272\302=\312\027\017=)\222Z\275/\213.=\271/\356=8>B\275\370\226\237\275p.\014=\365\307\202<\374\326\272\275\355\252\250\275R\363\304\275\033q\335\274_\247\035\275\206{\307<\235\260\362\274\353\370\207\274\374B\261:\251)\033\275s\354\344=\226\366\241\275\225]\232=\276[\301\275\213\236V=\213\013\255<\273}1=\026\331\020\275\276\2367\273I\036M=\326R\307\274\221Z\002\276\003\024\326<\316\276\326\274\320\344\247<`\\\260=\r*\200=m\357\212<,\013\375<\215H!=\274oK<\242\"\257\275\004\241p=mE\205\275eD4=l\276\017\273H\335;>\327\304\275\275\024\035\320=Q\271\000=\021\255\366=3|H<q!\335\273\003}\242<\315\007\310\275e\027\342<\006\224,\275{\220N\274\031\356[=\0140\257\275\342\224\352\274\002\217l\273\036_\350\2759\211\231\275\340-\251<\210\241\210=\327%\212\275N\220\037=u\332\220\275\237 \035\275\315>\213\274\213H\034=\202\354Z\275t3 >\262\371\317\273\007hQ=\300\243T=X\301\357<Yh\037\274\001R\220=%i\331\275\375[\333\274\312\244\021=>8t\275a3\025=`\346\362\274\204o\247=\350\212\240<\0171\231<\2302\000\274\353\221\221;\371\007b\274*\361\213;\344\205P\275\325{\305\275c\225\277=g\344E;\265\323$\273k\276\337\275\371)Z=~t\244=w\221\275\274\366Q\340\274\223\365\224=\\\035\206\2758_\351\275Q\376v=\344s\243\275\323\336\367\275\002\264\212;\002\316\233<o\374\330\275\264\343,\273\370b\345=h\216\315\275gK\034\275@\225\351<\214r\301=\0140\346=\271\222\273=\255\310\211=\223g\261;\367\215\n\275(\357\342\275\247\241\354=b\312V=R\330\206\273O\350\215\275W\220;=\273j\032=\352wM\275X\216\261\273,\236B=\273\350\201\274\334M\230<\267E\201\275\370\235\013\276\017\006L\275\210\254V\275$\213\363\273\364I\264= >\005;\r\237S\2754\017I=xe\212\274\024\265\203=\t\307\277\274\211\002\233\275\212}\277=Pi\377<\211\017!=a[@\275\361R\322\275C\353\257=\013\322\010=\363\276\010\276\323\202\004>\316r\320\275\340\336\301<(\274\224\275\264u\240\273qAH\275\026\033O\274\307G\034=\333\215h\275e\010\224\274\245H\247\275%^\267\275-\303\312\274\244\267\304=zn\016=\371\342\031\275\300R\273;~*\000\276\345\276\006\276\331\355b\275\204\217|\275?,\333\275\374nH=\265-\242<\220\230\350<{\230\266<\220\024\301\273\266z*\274S\244\260=s\364*=\237\234\016\273e\275L\274/n\004=C\327\341:g\236\242=\376\357\212\275\335q\217<+\312\221\275^\0236<\274*\261=\324\373\244\275LP/\276\233\270\177:I\331\221\275\025,\236<w\036p=\375\263D=\tr\270<\272\2224\275j\325\345=\303K8=\364\301\007\275\032t\325\275\272\024\373:s\364\206=h\262_\275s\331\332=|\273\002\274\242\\\204\275q\372\223<\335\3234\275\253\271v;aCz=\201\353/=\302\021\272=<h\340<\316\030\201\275\332\320\237\275A\265N<\362\376\370\274\273\363D<\017\207d=\rk\243=\'\016\227=\255\230\252=\006\035\004<%\035\257\274\371c\210=q\252\021\275GjQ<\303\316f\274\312/\376\274\371\006\033<T2\247\275\373?\247=b\211U=k~\313<\337\244j<\301\274d=i\315e<\230\263\264=f\t5<\223\271\020\275R\033\253\272.\267c=;_\257<\010\311\310\275r\244B\276&V\035\274~WD\275\226\232\350\274Aa8\276\353\355\222\274#\235\3769\277,#\275f\374\243=5\206\315\274)9\317\274\271\201\246\2732\242\217\275\013\246(\275\017\325I=\020\241f\273s\273\303<\211\211|\274>\251t\275\3353\306\2759,M<\330\263\347<\022e\000\276\030\023\237=\350yI=\275_\037=\267\356\\=#\014\312<\2247_\275\331~\374<\375I,\275\236\000\351\274\214\343\033=\2332_=r\033\350<\265\241\336; $\353<\273e\356<6U\201\275X\325\005=Y2\263\274@\225\224\275Dp\270<?7L\275<\341\221<<\343\314;\006}-\275\\\246\r=\220\305\335=\244}\007=\347\255\262\275\177\225\237\274\303\034(=\265\314\324\275\303\017\246\275\304k!=\333\203\252=W%\363=\210\256\246\275R>\037=\206{}<\214\244\006=\210N\256<\200S\306\275\\P\230\272*\241n<zP\253=\324\317\336;\262\336\n\275\315%$\275\353C+=\242\260\213=EHn<\037\2222\275\0266\221=\351\325\221=\205\362-=\033\331\321\274L\302P=\261\351i\275\'\302\213<S\256\000=\254\313\235\275\227\000@=\264\367\376\274\345\225]<4<(\274}_\245\274\254\210\205\275\222\3049\274d|\214\274Aw\205=\300\332\023<N\307\274<\023\227\360\273\364\004\'<\240\214p=$Ko=\017\272\324:\270\217\204=\311\230\317=\3722\333\274\321X0<V\324\020>\242\305$=\t\000==\354j`=\346\271\361\274\025Y\r\275\240K\243=\370\270\326: tq=\t\362\276=qR\272\275w\202\016=?x\206\275\030\262\263\273\237\2237\274I\313v\275\307h\224\274\037km=\360\324E=i>B\275\217\367\\=\232\3609\274\257\336\227\273#\301\014<\323\365a=\327x\235\27507\373\274\224\010\242\275\253O\204=\352O\343\275\024 \233\275\001PO\275\212\304\205\275a1l\275\363\240\265<h\327\275\275\005\247_=V\216k\275\026*@;QT\207\275\352\244\211=\034\244\311;e}\021\274\177\216\247=gT\004<\307\220\215:)E\033<\203\347\245\275\037mM=\303\204r\275\027\256\010\276\201\032\303\273B\3420\2757^z\275\\0\300\274\275j\352=\t\363I<(\371\343<\236\210\014>d\016\301=\353\312\345\275v;i\275=\273\006\274Ak\030;\010\016c<+\000\274\273]\317\260=u\234\r\274\365=-\274E\2414\275\000\310d\275\306(\363\274\003\311\227\273\013X\325=\370\323d\274\020\322g=\307s\013<\271\324X\275\t\304\262\274\216\202\311=o\377\254\273&MC\275\374\222\211=\270\237\246\275tO\335;\242x\277<4\0355\274\2464\000=D\233j\273\217\274\350\275ak\'\275\004\356H=\351s\225=\tW\353<|>\305=q\266E\275\225k\341\275\374\225\341=@\355\367=\363\\\216\275\305\355\223\275\277\375\273\274\\\321\346<\2040\301=\242\250\'\2753!\310=\003\256_:\207[\365\275\016g\326<\235\003@=F\326\335\275\323\206\314\275\000S\217\275/8\312;(\313F=\252\244n\274F[\265=\243\330\227\275\225\2631\273pGg\275o\200\254;;\266+==V8\274\332\352\325<\311\316(\275\273\256\236=\273\370\013;\333\304\232=\030\311y\2759\243\024;0\270\n>>a3<\242sO\275\020\326\374\275\215\337\230;\301\256\020\275PO\000\275c>\300<A\n\357=\355\310\245\275\224\003\243\274c\351\027>\257\025X=\232\263\302\274eJ\274=\316A\301=\243\254\036=\324\'\347<:\347\320=j\236e=\371\001\251\2755\223\003>\341<\316<\200\375\303=F\014\032\274}l\301\275r\3663\275\320i\343\275^g\250\274\022\301\306=\274\233\225\275\271\006\253\273.\3472=fI\202\275gN\254\275L \025=\032,x\274\301m\331\274O.4<j\026!=i\264\271\274M1\234\275-\032\366\273v\210\236\275 \271\360<q\322\177\275\"\263\222<\342\\z<\261\003\346;\252\224\242\272\245V/\273\212\320\247=\316\002\r\275\271\032\377=K\216\017\273\277:\246<\375\367%=M\367[=\\\022\265=\327\r\251\275(9\017>\270J1<\2535\327=\226JO\273MI\220\274&\000*\275\301Y<<\376\362\275<U\313\036>/\005\254=\242C\034\275tzR\276U\255\353=\320PO=7\321\373<\321\000\237<8.\242<\212\261n\275s\353\177\271\263\320\264\273h9K=\\\030s\275\247\327\330\274\351\2107\275\2124\201<\355\000\332=+\244\337<>\024\234\275\210\276G\275}\024z=]m\'=6\262B\275\230\t\202=BC\302=\360\244\302\275R\014\r\275Cxj\275\253\005}<q|&\275\233\"0\275\270\022\026\275J\212/\274\376\004\303\274\305\021z\275\270g\031\275\233F\177;\352\224\367<\017Xc\273\026[\006\275?\3430\275N|\236=M\236\016\275\216\333O\274\0333L\275\275\033?\275\37719=\227i =p\376e\275Q\n\216\275\213W\027\274\262o\005=\255\266\033=\232\027t\272s\310B\275-{>\273R\310\201\275e\177\177=\177-\345=0\002\271<w\005\313\275Hj\267\275\346\024\305\275F\017\360\274\254\325@=:}\361\2748E\315\274e\223\235\275\214\024w\275f\'\330\275\336*J\275_\265o=@C\256<j\3614\275J\250v=C\002O=\262\247h=S\034\000=i\310H=\370\263\272\275]\3123<\254\234\311=z\252\271=\216\311f=8\254\236=\032H@\275\234\211\035\272\025\342\273<\247E\352<\223\004\356<\207\211\251\275\025\256\321<\300n\200\275\220\022\002;}\002\017>RLt\2748OT\275\235\306D=\375_H=I\026\304\273s\261\346\274\242\001\307\274\367\177\336\274\220\353\210=]d\005=\362`\273=\371\253\303\275\2232\240=\025\334\034\275\360~\356<[\333y\275\024#\277\275{n\310;\0247x<\322\205\257\2755\340\r\274\033d\240\275\037\307;\275\345\034\301<#\274\220<>\000Y=B\344\224\275\r\222):D\311r\274\340\021*=\361\270\327\274\332\r)=\316\370\242<1\205\251=\276\371\025\276\213\265\210\274\316{u\275k\365\355\274\257\235\005\275-\303Q=-j\225\275\333\243\n\274\240)B\2742\221t=\244w\017\275s_\356\275l\013s\273\3763\344\275\316\r\007\273\010\311\261\275\330\346K\275\206>\300<\231O\214\275\013\347\350=~tO<\343\326\256=A+u<\310\274\322\275&|\231\275\250\376\207\275[\2407\275\255\353E\275\005<\032>;8t\275\234\234q=\254\260\301\275@5\032>\347/\272=\312p\255\275\026BN\275m\002\221\275\003\252\212\274l\nG\275_T\277=\357\\9>\351\273\024=p\317\317\274\373%Q\2753D\263\273\335\323\312:+\317r=_\306[\275I\223\246\275_G4=\002\250\334=\017]\025=\337{\314<a\234\267<\324\352\323\274\010\307\230<&\202#\275jV\343\275\275\267G;B\305\352<\337\353\357\275L\305\270\274 c\333=9\221\304;hCY=\"\013\326\275\274p\003\275\236\371\344\274\260\035\n=#\213@=\'^\217=\302\257\205=\262\343\004\275]\024o\274\333\314\225\274B\321\220=\371O\371<f9\224=\277\306\263<\303\t\034=\037\026D=\231\013\323<#\335\010>\354\0276<\331G1=\252\020\"=\036C\210<\025\232\340=\315\324A\275\215Ix=\202?\223\275d\323\240<@\205\327=i\001\215\274\322\326\032\275)\3620\273m\020\353\274\333`5=\203\377\036\276\247b\234\274|\006\233=\021\330\223\2746\032\256=04\335\273\251\014\375\275E\202\374\2735\260\\\275\007\001`\275\243\314$\273\364\272\204\275\223`\027=\210b\312=\"\322\373\274$G\273\275b4\322<\003F\232\271\2424)\275W\341g\275I\246\373<\223\2636\274\237\316\204\275j,\231=\362n\356\275\'\n\207\273\372j\310=\326\347\000=\213\320{\274\037\301y<.\244\251=\226\251i\275\210\361\323\274\000G\341\274\266ai;\352-\032\276\227e6\275\215j\244=\302)n\275yl\263\274\201\264\333=K\027V=\267o\177=\234\3432=\306\206\325=K\204\323\275}l\260=\242\315\300=\003\347\007\275.AK=G\255\"=\253\223\261<f\244\303<Z\233\025\275\t\367\223\275\034\212\000>f\2550\274o\254\017=\266^\246=\337\000H=\2205q=\016\277\376=b\310\324<\231-h=b\n\317\275\226,_<s\205\006\274z\347:\275d\000\005=\375\202\350=bB\354\274r<==\274e\211=\340\002\201\275\224\245\346<`\371\007\276\265\351\336;f\377\306\275\263\311\377\274\344\024e\274p\261\371;\222\032x=\327\224\330\274\023\330\275=\2321n\274\021\347\257\275\200r\365\272\211\375t=\027b\377=\341!\271\273\223\262T\2751;v=\225\202/\275\232\213\372=\034^o=x\325\224\275EW0\274\226\325p\275\217\360L<\275\263S\275~\034\326\275\337\211r\275\371\035\257\275\337\207\246\275\375L\'<\037\\\331\275\362\262\333<#nm=\336\253\366<>\037\236\275W\270\350<\343.Z\275\255S\224=\265\363\217=\355_\251<\006%4=\336\t+>6\251\000=\367\276\200\275\003&\261=\301n\322\272\336U8\2746\242`\275\373\355\366<\203T\335\274H\202\324\275\234g\220=\317\226\242;\036\374\334\275\rj,=\312\023;<\202;\301<\210\267\241\274R\370\253=\253\020\214<\024R\001=\272\320N=\010\354%\275\253\325\001=o\225\204=\033\250d=\366\375\307=\223\001\233\274\211\327\231\274\222Y\202<G\302\225\274;)\364\274\341G\236<|\317A<\355\036Z\275gf\366\275PK\010\275P\353\034\275af\212=\260\017\013>\3771O\275\232`\221\274\351\014\353=\344\267\241\275#\257\277:\342\206j=\n`\213=C\"\266\275\314G\240\275\300&\267=Z\306\341<\327c\301<\021A&\273\345\254\202\275\226,\331<gS\022\275\000u\337<_\261\233=}\371\323\275\2022A\275\270\326u\274e\007R\275\206?\031=U\227-\274\312\353\0269\2035\033\2752\236\310\275]\302N=\014\325\317=\206\005w<M6-\275\221\2340\275\275\223g=\037\205\206\272R\313\206\2759\203\236\275<E\300=T\245U=\310.\021>$x\217=\364k}\273M\257\214=\224;\017\276\346\000\205<~\341,\274#*\346\274\374\373\206\275\035JQ\274\217\005\227=\rR\031>\\\034\212\273\251\303\336\274\005\030\237\275\002z\034=w\205\341<n\340\002>\020m\016\274jrV\275c\324\2759\262\376\354\275u\370\027=\371\255P=^\377@\273\021\314\3339\274\245\264<\177\032N=\317\360\000=\202\343\211=\033\275);\326\352\':\277V\212=\376\270y=\236\035\217=v\270?\276\357\033s=\246w$=|\374\333\273\r\353\321=\013\335\224;\316yu<\354w-\275\243\271\023;\231z\013\276\305\324\302\274-r\355\275\314\244\222<\r\224\322\274\226\322\007\275\334w\232=\303\006\251\275\302\017\032=6Bb\275z\306\211\273\216\026-=\034m\266\275=\373}\273?%Q\275\013\233n:\210\357\003;\002m\322\274>\234\207\275{\3271<\n\347\022\275\367Hn\273\222\352\204\274\340\225\257\275n\000\370\273\005\026\232\275\251\234B<>t\232=\224K\234;\344\030\r\274|\264)\274[\351\341<\220:\272\275iK\354<\375\017\034=\003\023\203=\311\034\265<uN\"\275\033\316\3579\216v9=\357\263\331\275\010\030\245=\373\026^<\310\317\\\275ci\006=\320\300\027\275\021\305<:\254\313\036=(\026Q=\301W\017>\305\232\235\275!>\263<\361\034\204<WSx\275\026\307\003>\300\375D=!R\367=\316\233\263=\327)\232\274Q\265{\274\233V\217\275\357>\225\275=B2\275\357\336\207\275\210\337S\274p\244\252=\0372a=ge;=\313@@=\316\356\004\272\032\207\034=~\270\361<\242d\205=\000\361g\275\311\0046\275\2266G<\013##\276\264\310w\275\022XS=\237\314\324<{\265\266=KK\357\274YK\372:\271\211\365<\346\357N\275\301gH=H\030\306\275\214\251\226\2757Z^=\232i\002>\365\202\235=\220b+=H\253\006=\277\343\340=~r\322\274\203\014M=)\257\331<7\212\255\275\252\034\313;\035\221\346\273\232\242\322<\034\024\214<\326^4\275\326Ai\273T1\275<t\365R\275\240\342\260\273\304\221\275=[\013\026\275c7\021=V1-\276\241\316\230<\347[\016>\221\232)=\246 \206\274\300\363\007\275\324\021\020\273\205\260B\275S\3363=\024\212\216=\220\010Z\275\250jL\273\247\034\033<k\272j=\347\346\366;\274\321G=\231\261\207=\260\247\005\276\034\177T;Tc\223<_\303\252;\352!\230\274\272\370\266:\220\370\264<\022\"J\275\374\t\273<\331\306K\275\241\254,\275\212\376\215\274w\013\237;!\024\023\275\353\020\223\275l_\262;\345\225\244=!\240\271=\336s\034\275n\316\253\275{\341\204\275\004\017\350\275S\333\321\274\263\315E\274\255\245\223=K\245?\275\354#\334\274;>J\271\033V\304\2741\332\331\275\323\251@;\220\344-\274K\257\330\275\251\310\211\275\261\"\306\275*B\006>u\212\330\274}-\352<\324=4=eC\254<\000o\033\276]]\254=\317\260\326<\3346\252\272\277\310d\275e\345\366\273p\227\356\274Rm\331\275#\304\211\275${\347\274\226IC\2743\275\252\2734\033\274\274\355\004\252<\336\327\315<\025\225G\275\340F\302=5\271e\275/\007\376:\004N+\2767\212e\275\035)\332=_y\r\274 \254P=2\000\265=\243\220=\275\332\225\201\276\333?\024=<\n\254=T\353\230\275/&\373<\337hB\275\022\034p\274@\237U=\037\307\235=(\332\240;\373\240\232=\324\371\302=S\345l<\254\215c<\251\223\247\275\023\326H\274\261U\225\275\362g\204=c\331\213<\302\344:\276\206\022\243;\331\207\360<I\277\226=L\360J=vH,<\233\020\375<\242\356u\274h\236\"9\360\354G=\\sg=\356\250P<\257\344\320\274\\\273]<\n\246w\275\376\271Q\274\247\355g<\223%\263\274\336\265D=\346\r1=\312\273\244=\262\221\267=\301Ut\274\234\315\025\274Aw\304;\231iB=XG\177\275\251$}\275\230\375\256=~\240B=\023\300\302\275G(\365:\352k(=\201\2230\274\323\257l<\013\204\230\2752\375\243\274\263\211\361;2\321 \275\333\337*\275\360/\201=KZ9\275\036\222\204\275\314\3639\275\322\212,=E\265\027=n\007\232=0*0\275\262b\225\275$\330\361\274d\037\306<\n\371d=\264\356\306=\213M\271<\n\267z=\277\ni\275xYA\275\036\361\021\275]\217\301<\n\372G\275\034\234W<k\257\330=;\266\226=)i\200=\264\000\255\275\367k\261=\033\265\217\275\327y\017\273S\010T=\301\233\246=\002\372\367\275(\035\320\275\343}\311\274\033\005\032=\237\376\032\275\337~\257\273\216\022\220\275$\212\240\275\356Ph\275N\354\004>\230S\334<G\003\321\274aM\264\274\353\337&\275\325\t\350\274\252z\214\274\276\217\251<s\377\377<\214u\215\273\304_\032\276: \032\276}\202x\274\242\334\242\275\375V\260=\030G\222<A[-=UA\001=A4\366<\224\251\211\275\016\014\216=\264D8;\234\235\010\276\205\007.\273\223\032l=s\236\254\274\203\"\354\275\201\320\2209\"!\205\275,\354\303\274\246|5\274,\241\200\274~J\271<2\247\203:\2572\002=k\010\306<\253t\034\276\016\252\020=,\202\350<\'\300,\275c7\017=\366p;<\377\362\016\275\225\261\241=3\014\020=\320j,>\327\323\333\274\006\317\331;Jr/\275\365\335\337;\241P\254<ai\227=$K\330\275\025\235\261\274\026p\n=\304\276\315<\316\353\270\275\301g\347<\327/%=\"\305\002=\277\316\222\275\325C\251<mVk<\206<\000\272\317q\t\276n\236\245=a\311\361<\005b:\2756\371+=woB\275~]`<bq\177=vs\007\275\226\\\376<XR\t=\252\322r=r\003\000>\366\260\371=\"\036E<\267L\376<e\241\246=+\305\237=\226\200]<\323\021_\274X\254\024\274\250h\353\274\003\323Q\274n\317f\275,!\254\274\017\211\037=.w\357<\275\323f\273\263\016$=\355\262\r=\230\376K\275\330\334\315<^4~=no\267<\r+\351<\320\312\326=\327a\243;\240cX\274\366|,\275~d\323\274\272\222\342\275\016\314%\275\247\3052\274\257\232\020<\200\027|=\320\222\274\274Y90\275\337$\033\275\032\2735=\211\343\211=\007H\013\275\215\022\n<_\220\003>\206N\257\2759\373\276\275\204\263N;\277\275\274\274ZP\351\275b?\276\275\373v\314<.(\\\273)\233p=\205\215n\275\3323\361\275$-\265=\370F==\273\376\216\274\001Ey=\n\367N=I\263\357<\3140\231<\034\035\031=\243Q\267\274\242da\275g\222\010\274j\363\311<\267\224\355\274\227\330\214;\306O&=[\264\000<9kq\275\354U\235=\320=`\274\0362A;\373~\307=\305\255\243\275L\016\263\2749\025G\275\211A?\275\2411\303\274\225\200\367=\220\274\320<{\3178\273\232\326\222=\353O\340=\\\351n=\331\212\014\275\177[\252=G\303p=\016\377\013\275X\222S\275\233+\320<\3337\030=0<\371=\332~\333\275\352o==\350\306\247\275D\211\315<n&\277=ui=<_\217\344<\214\327~\275\325\263\303\274\025\376\254\273\354\352\252\275\024\306\n=\353(\006\275\373e\026\275\033\232`\274xq\271\275/@\225=&\004\264\274\r\346\206\275\201\257\231\275N\010\300\274i;\370\275\370\005N\275o\2014>6q\263=\377\376.\275\023\300\t\276\263\226p\275\211\253\235\275i\2326\275T\361I=\014b\216<\024\n\250<0\303\266\2743f*\275\000J\355\274\242U\242<H\r\007>\264\223v>\372\224D\275\344\372J\275\024\034\305\275\254Oa=u\251\305<\262#\255\274\360\013#\275\351\235\203\275\363\002@\2741\337\207=\014\327\234=\356\353`\275\237[\'=\252O\365=\323in\275\177\205\367\274\271\240j=\373\201\372<\005\337+\275_C\260=\305\024\020<\247\340\251=\321D\\\275\360g\374\273\001\020\234\275\010\013U\274\361\223\272\274\250\033#=L\013\314\274q\037\211<+\006\217\274%&\373\274\300\312S<X\272\341\274\205\213\302=b\010\002=\374\017\211=\310\235\277\273\322\316H\275\234\216\004=\342Q\325;@\214g\275\305\277\237\274\005\3574=\365\'\005\276&74=l\237\027=~ \346=\350\271T\275\013|\274=n\271\007>\262\271L\274\023\003\203=\226\262\343=\250\220<=f\305\207\275\013\276s=f\3463\274\030\\\254<\032t\356\274w\234F\2754\302\205<\342\303D<\025(x\275B\340\307=\3215u=\013\272\327=G\003X\275G\276\006=|\021\024>\205\254\263=\201\306\334=zR\026\274\006P{=\317+\206=\271E\244\274`j\232=\026\022\211\274\226\341\275=\n\355+=h\351\274\273\211\225]\273\275\272\320\275x\377G\275W{\235=x\231\313<\223yo<\307\327|\275\032\253\260<\336c\271=\353-U;v\340~\274Cy0>\217)\006=s6\324<\3150\240\274I{y=#\3672\275\356[\256\273\363\235d\274\305e\3249\321\352x\275 >\232=\313\243\231=\210F\361\274)k\202\274D\2017=p\273\236\275\334\252_<\345Uv=\346\250:\275\311 \007=\034:n\275\220\000\271<;\013\014=\nb\347\274\352|\210=\203\226\214\275\322\335Y\275O\r9\275I\034N=}<\203\274/\242\016=\242\376\001=>\0227\275\317)k= \232g<x\037\002\276O\253W<\274\313\241<\"\242D\274\374\321\331:B\330\342\275\206@+=\357\206\000\275\237$\341=w\232R\275\352z_=\245\264\233=.\312\316=\303v\326;!\277\347<\375\220\003=l|\367<(\200w<5\233;=\341\243\242\274&\315\264=\014\366\001>|oh9\"=\305<d6\'\274\271s\022\275]&\251\274\251_\200;u\303\006=\304\'j<\343\330\242=\325\225[\275\306+\010\276\213-:\276:\342<=\363j\267=@P\247=\231f\332=\311\021\246\274X\216R=m\307L=\375\306><\3175\325\274Fd\333\274\177\374\003>\"\035&<\232\223\226\275@\377\313\273\036\346\224<D\241|=a=\212<y\247\356\275.\206\274\274\326\264\005>\032\215\344<\201\264(\275L\017\300<\347e\001>H;|\275\'^\211\275B\3350\275bk\242\275\271\270\226<\177>%=\002$\265<\353\244\006>\373\177\311\275\364\341\277\275\'\210W\275,\351\336=\372\207\213\275\212\375\201\275\300[\324\274\227(==\2123\243<\351]\020;\206\237\202\274>~e\274Z\0350\272\273\033\304<\346\332#=i\002\375<z\356Z<6f\364\275\355\242\233\275\264\267\333<\302\013\243;\263\336K\275\267{Y\275\345\213\277=nd\326\274g=\250= \365{;\302]9=%D\212\275\035/\267<\350\024\215;\361\305^\275\263\253\330\273\0162v<\201\265n\275\326Cg;\214\373\217\274\222G6\2761g*\275\"\315\005>\023;w=\304\233\363=\231@\323<Z\275/<\022q\207\275v\251\232=o\326\353\273m\352\016\275\264\232F\275=\341\003>\261\356\251=\025d1=\267\254\030>\253\303-\274\344\337\243=\235\367\\\275\300$%\274j\274A\275\207\357\307\275\320*\247\274n\257/>\025D\244\274S\347z<\007\3133\275i\261f<\337b\207=\224\330\313\275\244\344\033;\310\020+\274\277\177g=D\352\272=w\332G\275i\365s=lU\375\274\351\005\365\274\342\006\336<|V{\274Z\226\212\2747\327<=\225\223\362=F\346\310=\240J\336<~C\001\274\030\352.\275\343}\332\275>YU<\242/\321<V\301\304\271{B.\275\036\243\230=\307|\203=\030\254\304\274\240M\006\275X\200\235\275\236\304\317:\355v8<\203\204\t\2754\303\315=b\036P\275Q>\264\275\310\274M\274;\236\303=\300~t<\r\021\351\274\253x\246=\314\271D=\236]\"\275\006\222H=R{\305\275@\232\037\274\206\013\202\275\351sf\275\255\324\230=\333^\305\274\315\357\247=\342K(\274\216\201\235;\244c\322\274\231*W<\326\242\323\275\267\031\367<\351\2612=,\276\274<5r\347=\202\210\\=2\274\212<F\3578=\33360=\260\217\263<\240T\301\273h\250\207=p\326\255=D\337\212\274\250\205\t\275W\345\316\274,(W=jb\261=t\030Y=\322n@\275\302b\036\274j\016=;9\324\021>\307=\270<\025(\010>\325\317\344\274\036\006 =@\324o=\375\327\016=\032\022\222=~\327\310<|A\367;\313\210\010\276\243\007\246=e\372\\=\307\031~\275\014Y\330<a\303\327\273\3214\030>B\221\267=\221\343\253=:p#=p\013I=qN\255=\217\345s\274*|\210\275n\032\t=\017\207\366\275\353\342@\274\265\277 <\267E\036\275\323\035\000=\031\250\234<c\336p<\262;\312=sF\367=\310l\262=\341U\250\275\246HE\275\363\227#\275\236\256Q<\322\274c\275.\024r<\371\321\327\274\321\312\256=R\352m=;\276\303\274O\311\265\275u\306\010\276\003i\212=hq\t=q\340 <J_\305=7a\204\274\202\252\244=%FS;\202\246\304\272+\374s=\to\025\275\003\247\200<\373\322\356:\253C^=\"6\262=R\034$\274\"\264\300\273m\024\003;\3719\201<\251\026\r=k#x\275\215\210\032\275\335fw<\245\215\215\275,\334\220\275\234-;\275\356/K=\336)\00092\221q<\2273\r\274\013\030k=\024\014\335\274\357\335\351<\364\245\001\276\200\024\374\275\210b\202\274\371\006\004\276\342\205\230\275\024^O\275)l\013<\266\322b\274\330!\260\275\377|%\274k\230\024\276\243\033:\274\204\025\221<\313\210\206\275 C\256<\020\262\360\273\272\213\336\274F\304\303\275~\347\234=\322\022M\275\227\300$=5M\234\275\311\301J<\2404\006\275\016\336(=W\357_\274\347\345\206==\311\320;\210\322\r:\242)\005\274M\316\312<0\353}\275\263\351\031\276\315\213\020=\221\022\301\2747n\013=&\340\373<\3757\330=/3\247\275\257\330\234\275Y\264=\274K\235M\275\314\036\007\276\005\016\256=\031\006O\275\335B\237\275\3007\256\274`+t=\354\371q\275k\336W\275\315_\003=\311\334\256\275n)\215\275\211\343\263=Z2]<\271\210M\275\227\346}\274\333]\002\276\274\351\247\275\264\233\016=\320\204\201\274\203\376\007\2747\300\036\275lQ\247\275|\225\351<\216\360\023\275\273S\222\275\275\350\365;\236\237\230=\021\306\214;\366/A<k\316\357<\237\254{<U\271\213=\333\377\030=\231\227\217\274\025\321\026\275\020-^<\227\367,\275YR\212\275\205\315R\273\202~\014=N\367G=\360\013\242\275\032\371X=\266\336\255\274m{\031=\320\212\340=\317\264\246<\353\267-\274\3265\330=`\203\016\275R\234|\275\252\242I\275\362\332\362=zu\263= \005\234\274I\300\254;\204\035\304\275V\2557=]/\220=\033?\316=\3426\022=k\017:=\306\234\320=\036\312\\\275\342\225\240\275J\355\017\275_\243\364<{`#\275f\253\025\2750\233\243=\024\200\306=\273\002\010=L_\366=\373S+\275\331Dh\275|+s=\004\244\010<\010\236\374<2]\253\274_\243\241<\006A\021>s\2521\275\313i\257\274\273>\030>W]W\275\214\355g==\2307\2743\211G=\037~{\275\004Ro=\332\222\231=C\267\031=N\235\001<u\336R\275\234~\203\275\037%\215\275\356\240\320\274\325|\265\275\243\340\326<\377\356|=\221Sx\275\370\027\023=O/\300\275\027V\014\275__M\275\331\3040=\020\212w=\266M\004\275\265l\223\275\367yN\274\014\226\205=\375\037\377<\274\270\004=\272J->\232\361\324\272-\013\247<\302\376\016>\255\313T\275LU\313\275,p\342\272\007%\270\273<|{=R5v=\027\3123=^$\264\275\371L\316=\327\352\352:\212\332\211\275\023;+=\360\356%\276\334\303\032\274\035\236 =\346\276\353\274V\366\035\275\271\356e=\276\250\227\275\364\327B\275\352e\277<\341\244\300\274\267\276]=\217\314\257=#\027O==\311*\275\345\032\251\275\272\303\305<\250p\013=\003\335\203=_\034\252\275\256\374\374=}\257s\275\020}e<|C\341\275ET|\275\207\315n=\013\013\233=\034\037N\275a\346\344\275t.4=hi\230<\344\347\022\275(6u\274\330\210W<\3278\336:SZ\230\275\367\357\201\274\n\257\245=\357\366e=\325G[\275\345\307`\275\2007\377\275U\033#\275\263\344\310=\364\240\325=\023\247\231=t\211\001<W\322\362=\206@\016\275v\001\341\274>\010\257\275\355\243\262\275\334\363\340<\\s\274==\266\246\274\250\214+\274x]\237\271pk\216<\207\r\246=\343\207\177\275y ,;\t\3546=\352\376\276\274\244\311\200=@\320\236<\314\231\241\275\351\245=\275VfQ=\237\305\027=\201]\3449\323\245a<\016\247(=\020\304N=\200&4\275tWQ\275\223\354\311\275\272s\221=6\365\220=\002\353\002\275\343\345\003=|)\310\274:\003#\275\366\337N\275\267\315\264=\222\374\250;\002\025\037\275\307\317E=\002\014\203=/sq=\244_\030\272\324\255B\275\r\3419\276\351\372b=\315$\222<\314-\037\274;\254\271;\273\345l=\357>{=\021-P\275T\233n=\210w{\274\266\354\257\275=\302[\275d\017\002\274\310G\232=A8*\275j\233\306=~8#\273\\\331\204<\254\304/\273\275\345\313\274\251\316\301=\221\245\322<\350\363\213\275\234\277\336\274\341\245\264\274\"\305m\274\315\206E=\177n*\275\305\375\020=c\017m\275\\\317\362\274\320\352\375=\277\017\350<f\247\010=\021\362\203=\334\002\213<\217i\200\273\274\316\256\273$\036\242;zb&;\003\244\010\276Go\306;cp\026\273\242\021\002>\3306\272\274\211\233\217\274\217\203]\275\326\223\310=\365c\001\275@\241\022>$o`=\207\024\342\274;\253\304\274\245\353t\273!\022\236\274\027,o<\333i?\275>\232\034\276\330\341\364\274\327\304d=\354;u;\022\322P\266\024fB\275J\024,\275\001\026o<>\031\307=\245\005\276<\033/j=\362\177\313\275=4J\275\222\016\324\2751\t~\275\034\\H\275\037\265\255\275\3247\213=j\272r\275\210\254\303=\277\375\014\275\034\265?=\267\014\332<\020Y;=\005\304\312<$\374\314=+Z\361<\004\341\224\275s\366O=rF\215\274\340%\213\273\306\321\350<|x\262\275fz\201\275\262lm<\244\246\200\274\244\333\205\273m[\352\274L\232\336\273\362\306\365\275\246\200\217\274\000z\017\274*\317\031\275\027\313\007>\271\217\205\275\370\301\265\275:\\\205=V\337\252=x\203D\275\004\365$=\205\327\366;\261v\247\273#\306\260\273b\211\276\274^5\204=\352?\371\275\320:\203\275\317\033\263:j\">\275\274\232\340=\031\345\250=\357w\034\276\234\324\360\275]v\241=}\226z=*\205R=\316\200^\275\010A\337=\205%\220\275\372\203\302=C\307W<\255\325\332=d\005\t\274\2677\327\274aKG<6&\313=\261\251\013=R,i\275\246\232g<3\262\301<,\264\241=\271\260\240\274|\017\215=\327\271\262<\216V\253<{P\007>\013\354\271=2D\233\275\252\264u\275;a\364\273\007\013k=N\271\375\275\214gJ=\376\356\240=\212\236&\275\277\364\245\275\226L\222;\013&\213\275\027~\252=\305\"\230<>\246\'<\240\263[=W\032\366\273\t^9\275A;\277\275z\0059\274\344\021\216\275\346\246\202\274l\030\317\275\247\001\252\275\335\003\227\275\020\217\317<\224g\206\275\316\277\030\2759@\371<@\003\023\275;\371f<\034&\303<;O\361\275\037F\213\274fO-\275\270\007R<\345l*\274\312\035\202\275\035\003\203\275\223\245}\275^\325b\274\210\277\220=\035\325N\275\300#\t>\337\1771=~\'\024\276\300\204\200=A\312\334\275\232\206\205=\0079\242\274\210\215Q\275\333\352\273=\272\262A\275\rc\273\274\347\315\002\275\2276\260=\214,\005\2767W\244\275\033\224\226\274h>\205\274H]>\2758\036E=>\t\225\275Mn\324\275\341\277\024\275O\243R=\215~\327=\2101B\2738\000\177=\250N\243<\005\374\206=q_\006<\253;\206\275^\311L\275\'\262e;]7\030=xg\335\274\367l_\275\204X{\274XD\367<?\217\223\274vx3\275\224\234u=\305\274p=PX\355=\317\263\224\273\326\255\207\275\016\354\373=\337\336\300<\245\307\034=\274\321g=#\275U\274\316\256\271=\035g2=\232\306\200:o\340p=\021\354\021\274GJR=}L\300\275\311D4\2758\273c=^\255\256\274\361\243\223=N\347\277<v\342\025\275m:W\275\362\345L\275\247\317F\275\327\'\002=|\336 \274\005\240U\275\037\370 <\21626=i\013\307\273\007l/=17\202\275_\007\256=\377S\206\274j{\243=E\252\376<\321\n\310\275\306h\211\275z\214\210\273_\216I\273\031\256^\275\214\271\207=I1l\275\371\203O=o \010\275o \331=\357\240\031=\033\036\227=\004(\336<;\207\2279f)|=\031n\206\275(\0320<\316\337\211=\215U\324\274\210\275 \273\330\274\036>\205\331\347:\251M\276;bfz\275|\035\267\275\231\306\245=\2059\274\275\256\3077=\241`\221=G\'\375\275\3543\253\275\240\031]=F\311\370<\323\226X=\267\224\227\272NS\357\274LZa\2756\362\274\275\342\206\215\275T<\241\274\022\276\260=\344\244\214\275\365n\226\274\352\212\257\275\374\270\350\274\331#\021\276K!@\275\201\233Y\275\213\373\317\275W\362\352=\223=\240=?\223_<\320\234\005;\241\2110<\035\272\324\275\375kb\275\350\372\304\273}$\274=Z\207\020=%\243\310<LK(=?I\240;\205\023V;\347\206~<\010l\221=\315nX<\364\021\271=&\264\220\275yd\024>\002\326\035\274T\262\205\274y\023V\275\004L>=\006\241\224=\216m\r=\273;\264<\310\245\321\275\031\330\252<\0078o\275w0\004=\350b%=\022\265\023=5\245\215=\346\031!\275\000\375\254<\330w\345\274v\320w\275l\272b=\200\236\347\274\2638\221\2752\235B\275J\301X<\242\263\030\275\250$\010\275D\006\235<\006\223\007\275\332\3725\275\023\207\360=\002u\202\275\233\203\243<O\032%>\347\001z<\3540\226=\010w\202\275\177\216\221\275\362t\000\275\276e\004\275zM\360\272\2247\203\273W7-\274~Y\234=^\235n=_\322\245\275\255]\353=\363\213\005=\037b\\<\02268=QL\362\275\3302i\275\300??=\016\021\304<k\346*\275\002\201*=\301?\001=?\241\241\274d\010w\274\374\325t:\'\2364=k\227\310<\314\034\024=2\316\300\275\310\361x=\341\317u\274\004\n\024=\030R8=\326c\206\275\234\272\232=\263\356D>\260$\261<S\347\310\275\212\020;=\374\303\242\275\351U)>z\2561;\331\2547\2741^C\275\322\214\216\273\251x\322\274`~\232<\267\262^\275\025\207\236\275\376\033\376\275\310;\310\275\010\220e\275f\254W=\253\252\355=\037\340\311<x\2524\275\300:\354\274C\255m\275\r\335\324\275\003M\017\276\317\366\230\274\227p\033\274R+(=ds\307;\361\304\037=\372kB;Z\013\357\271g0\247=(z\324<\366i\327\274G\007\236\2754.\207=;\340\206=S\355!\274\263\376\224<\303\r\032=\252\361\034\275\033\247(\275\361\306\273=\262\026\250\274;\rG=]*\240\275\372e\316\275\035l\257\275L\233\n=?\232\225=\271H\232<C\373\017\275\033;\t\273:l\247=\276\240\333\273\371g\024\275\'\252\244\275w\304T=\2105\342<L\363\232=]\303\366=\270\026\023=\301\016\336<\021I\237\274\363\247\026=\243z9=\256&\272<\361~\301<\037\031\216=v\236\346\274\245\327\n\275\222U\265=\t\230\360<\246~\004=L\t*\275+\356\007\275\371T\014=\303\361\246\275\233!\253=\206>\004=3D\264<\301\332\243=\303t,\275\274u:\275_k\321=\200\315\206\275qH\'\274\023\235\222=x\022\310=\301\023\361\275$\344\364=\332\035\"<K\306\034=\251\346\031\275\206\251B\275U\374\231<\006\035d=\014\373\032<dLz<\205\203\026<g?\214<\211\313_\273\267\217K\275;\356\205\275$j\351\274\233\244\023\275\350:\363=0a\005=\241<=\275\277\340\003>\256\242R\275T\375v=!n\033\275L\026i\273F\034\230\275\347\321\023=:~\374=`y\343\274{\024\\\275\361/\225\275h\335\324;\366\336N=\"U\252=h\373 ;\362X\n\276L\237N\274}\361G\274\265\367\337=&\334\034\275!\224\002>\312\351y\274\010\021\344<\346x\270=\255\226\316\274\022\270x\275\234V\250<Dr\275=\276B\214\273\2777\337\275O\004\237=\033\364h\2756}\245=\217#\033\275\224\312`\275\010)\220\275\202\220\315\275\262\027\304\274C@8\275\215\240\355\275\311\243\004<\263\233\377<\325\331\373\274\204\212\013=]\022Y\275\200\352\353\274Z\204\242\27463\327\275\270F:\275\023\260\233=\033\311\222=<\273\021>\224\331\365<\362km\2750\311\030\275V%\363<\345x\023\275(\327\274<2\3162\275@8\304=\363\313\370=R,Y\275\3257_\275\005\202#\275\273\324\222\274\035\330\'<_\332\274\274n\023Q\275\013\3036\273\303\026\257\275}\001\247=B\214\314=9(\235<`g\233\275p\316\341\274s\000\242<\\\000\213\275lz\223\275\274\255\002=\235\222\357=\301\274\235\275\331\313\346\274\363P\322<y\317\354=\273f\026\275]l\023>\316Lx\275\375r\001=\362\203M=w\305\222<\264\206\273\275&\342k:\244B\373=\320\210m=\217\360\224=\355\247\272=|9\325=\222\342\025\275\303\001\n=\001\234\007=\tO\362\273\2028d;&\314\310\275\257&\202\275!\030\036\273\304K\371\274\017\271\222\2752{\234\274\364\307\321=\236\303\321\272s5E<\364\243\351<u\263\265<O\245\205\275\2573p\275\361\257\036\275\037_4\275!d\343\275\276\201q<t\332\027\275v\302\304<P\211?\273\252B~\275;\202W\273~M>\275\367\214\364=;\'\013>&\313Z\272}s\263<R\362\001=\031q\324\274\314\020\203\275H\345\242=\325\rd=\350\235\027=\3710\334\274\325\306\233<\252\214\235=\271\235\224\274\316\274|\274\003\r-=\245J\322<\036w>\274t\333v=\303\233\311=\321\2207\274\375\303\216\275_]\337=B\034\213\275\245\364Z<\272\224\357:\'y\312\2753\310(\275U\030\215\275`S<\275\363*I\275g(\210\275\023\321\007\276\2062\204\274`\366\034=a\314\312\275\200+R\275)n\211=\277\006\241\275;\270\024\276\276\360\363<;\027+<\336\232\244\275\367\340\300\272\004V?=\210\241p=\0074\341\275\257E =\211\234\002=\222\353P=\211\277\221<\255\361\313=\236\365\004\275"
      }
    }
  }
}
node {
  name: "lstm_2/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_2/recurrent_kernel/Assign"
  op: "Assign"
  input: "lstm_2/recurrent_kernel"
  input: "lstm_2/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_2/recurrent_kernel/read"
  op: "Identity"
  input: "lstm_2/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/recurrent_kernel"
      }
    }
  }
}
node {
  name: "lstm_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/concat"
  op: "ConcatV2"
  input: "lstm_2/Const"
  input: "lstm_2/Const_1"
  input: "lstm_2/Const_2"
  input: "lstm_2/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_2/bias/Assign"
  op: "Assign"
  input: "lstm_2/bias"
  input: "lstm_2/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_2/bias/read"
  op: "Identity"
  input: "lstm_2/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/bias"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice"
  op: "StridedSlice"
  input: "lstm_2/kernel/read"
  input: "lstm_2/strided_slice/stack"
  input: "lstm_2/strided_slice/stack_1"
  input: "lstm_2/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_1"
  op: "StridedSlice"
  input: "lstm_2/kernel/read"
  input: "lstm_2/strided_slice_1/stack"
  input: "lstm_2/strided_slice_1/stack_1"
  input: "lstm_2/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_2"
  op: "StridedSlice"
  input: "lstm_2/kernel/read"
  input: "lstm_2/strided_slice_2/stack"
  input: "lstm_2/strided_slice_2/stack_1"
  input: "lstm_2/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_3"
  op: "StridedSlice"
  input: "lstm_2/kernel/read"
  input: "lstm_2/strided_slice_3/stack"
  input: "lstm_2/strided_slice_3/stack_1"
  input: "lstm_2/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_4"
  op: "StridedSlice"
  input: "lstm_2/recurrent_kernel/read"
  input: "lstm_2/strided_slice_4/stack"
  input: "lstm_2/strided_slice_4/stack_1"
  input: "lstm_2/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_5"
  op: "StridedSlice"
  input: "lstm_2/recurrent_kernel/read"
  input: "lstm_2/strided_slice_5/stack"
  input: "lstm_2/strided_slice_5/stack_1"
  input: "lstm_2/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_6"
  op: "StridedSlice"
  input: "lstm_2/recurrent_kernel/read"
  input: "lstm_2/strided_slice_6/stack"
  input: "lstm_2/strided_slice_6/stack_1"
  input: "lstm_2/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_7"
  op: "StridedSlice"
  input: "lstm_2/recurrent_kernel/read"
  input: "lstm_2/strided_slice_7/stack"
  input: "lstm_2/strided_slice_7/stack_1"
  input: "lstm_2/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_8"
  op: "StridedSlice"
  input: "lstm_2/bias/read"
  input: "lstm_2/strided_slice_8/stack"
  input: "lstm_2/strided_slice_8/stack_1"
  input: "lstm_2/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_9"
  op: "StridedSlice"
  input: "lstm_2/bias/read"
  input: "lstm_2/strided_slice_9/stack"
  input: "lstm_2/strided_slice_9/stack_1"
  input: "lstm_2/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 192
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_10"
  op: "StridedSlice"
  input: "lstm_2/bias/read"
  input: "lstm_2/strided_slice_10/stack"
  input: "lstm_2/strided_slice_10/stack_1"
  input: "lstm_2/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 192
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_11"
  op: "StridedSlice"
  input: "lstm_2/bias/read"
  input: "lstm_2/strided_slice_11/stack"
  input: "lstm_2/strided_slice_11/stack_1"
  input: "lstm_2/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_2/zeros_like"
  op: "ZerosLike"
  input: "lstm_1/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/Sum"
  op: "Sum"
  input: "lstm_2/zeros_like"
  input: "lstm_2/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "lstm_2/ExpandDims"
  op: "ExpandDims"
  input: "lstm_2/Sum"
  input: "lstm_2/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/Tile"
  op: "Tile"
  input: "lstm_2/ExpandDims"
  input: "lstm_2/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/Tile_1/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/Tile_1"
  op: "Tile"
  input: "lstm_2/ExpandDims"
  input: "lstm_2/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/transpose"
  op: "Transpose"
  input: "lstm_1/transpose_1"
  input: "lstm_2/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/Shape"
  op: "Shape"
  input: "lstm_2/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/strided_slice_12/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_12/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_12/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_12"
  op: "StridedSlice"
  input: "lstm_2/Shape"
  input: "lstm_2/strided_slice_12/stack"
  input: "lstm_2/strided_slice_12/stack_1"
  input: "lstm_2/strided_slice_12/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_2/strided_slice_13/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_13/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_13/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/strided_slice_13"
  op: "StridedSlice"
  input: "lstm_2/transpose"
  input: "lstm_2/strided_slice_13/stack"
  input: "lstm_2/strided_slice_13/stack_1"
  input: "lstm_2/strided_slice_13/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_2/MatMul"
  op: "MatMul"
  input: "lstm_2/strided_slice_13"
  input: "lstm_2/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/MatMul_1"
  op: "MatMul"
  input: "lstm_2/strided_slice_13"
  input: "lstm_2/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/MatMul_2"
  op: "MatMul"
  input: "lstm_2/strided_slice_13"
  input: "lstm_2/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/MatMul_3"
  op: "MatMul"
  input: "lstm_2/strided_slice_13"
  input: "lstm_2/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/BiasAdd"
  op: "BiasAdd"
  input: "lstm_2/MatMul"
  input: "lstm_2/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_2/MatMul_1"
  input: "lstm_2/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_2/MatMul_2"
  input: "lstm_2/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_2/MatMul_3"
  input: "lstm_2/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/MatMul_4"
  op: "MatMul"
  input: "lstm_2/Tile"
  input: "lstm_2/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/add"
  op: "Add"
  input: "lstm_2/BiasAdd"
  input: "lstm_2/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_2/mul"
  op: "Mul"
  input: "lstm_2/mul/x"
  input: "lstm_2/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_2/add_1"
  op: "Add"
  input: "lstm_2/mul"
  input: "lstm_2/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/clip_by_value/Minimum"
  op: "Minimum"
  input: "lstm_2/add_1"
  input: "lstm_2/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/clip_by_value"
  op: "Maximum"
  input: "lstm_2/clip_by_value/Minimum"
  input: "lstm_2/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/MatMul_5"
  op: "MatMul"
  input: "lstm_2/Tile"
  input: "lstm_2/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/add_2"
  op: "Add"
  input: "lstm_2/BiasAdd_1"
  input: "lstm_2/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_2/mul_1"
  op: "Mul"
  input: "lstm_2/mul_1/x"
  input: "lstm_2/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_2/add_3"
  op: "Add"
  input: "lstm_2/mul_1"
  input: "lstm_2/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "lstm_2/add_3"
  input: "lstm_2/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/clip_by_value_1"
  op: "Maximum"
  input: "lstm_2/clip_by_value_1/Minimum"
  input: "lstm_2/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/mul_2"
  op: "Mul"
  input: "lstm_2/clip_by_value_1"
  input: "lstm_2/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/MatMul_6"
  op: "MatMul"
  input: "lstm_2/Tile"
  input: "lstm_2/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/add_4"
  op: "Add"
  input: "lstm_2/BiasAdd_2"
  input: "lstm_2/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/Tanh"
  op: "Tanh"
  input: "lstm_2/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/mul_3"
  op: "Mul"
  input: "lstm_2/clip_by_value"
  input: "lstm_2/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/add_5"
  op: "Add"
  input: "lstm_2/mul_2"
  input: "lstm_2/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/MatMul_7"
  op: "MatMul"
  input: "lstm_2/Tile"
  input: "lstm_2/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/add_6"
  op: "Add"
  input: "lstm_2/BiasAdd_3"
  input: "lstm_2/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/mul_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_2/mul_4"
  op: "Mul"
  input: "lstm_2/mul_4/x"
  input: "lstm_2/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_2/add_7"
  op: "Add"
  input: "lstm_2/mul_4"
  input: "lstm_2/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "lstm_2/add_7"
  input: "lstm_2/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/clip_by_value_2"
  op: "Maximum"
  input: "lstm_2/clip_by_value_2/Minimum"
  input: "lstm_2/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/Tanh_1"
  op: "Tanh"
  input: "lstm_2/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/mul_5"
  op: "Mul"
  input: "lstm_2/clip_by_value_2"
  input: "lstm_2/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/TensorArray"
  op: "TensorArrayV3"
  input: "lstm_2/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "lstm_2/TensorArray_1"
  op: "TensorArrayV3"
  input: "lstm_2/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "lstm_2/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "lstm_2/TensorArrayUnstack/Shape"
  input: "lstm_2/TensorArrayUnstack/strided_slice/stack"
  input: "lstm_2/TensorArrayUnstack/strided_slice/stack_1"
  input: "lstm_2/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/range"
  op: "Range"
  input: "lstm_2/TensorArrayUnstack/range/start"
  input: "lstm_2/TensorArrayUnstack/strided_slice"
  input: "lstm_2/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "lstm_2/TensorArray_1"
  input: "lstm_2/TensorArrayUnstack/range"
  input: "lstm_2/transpose"
  input: "lstm_2/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/transpose"
      }
    }
  }
}
node {
  name: "lstm_2/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/while/Enter"
  op: "Enter"
  input: "lstm_2/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/Enter_1"
  op: "Enter"
  input: "lstm_2/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/Enter_2"
  op: "Enter"
  input: "lstm_2/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/Enter_3"
  op: "Enter"
  input: "lstm_2/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/Merge"
  op: "Merge"
  input: "lstm_2/while/Enter"
  input: "lstm_2/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/while/Merge_1"
  op: "Merge"
  input: "lstm_2/while/Enter_1"
  input: "lstm_2/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Merge_2"
  op: "Merge"
  input: "lstm_2/while/Enter_2"
  input: "lstm_2/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Merge_3"
  op: "Merge"
  input: "lstm_2/while/Enter_3"
  input: "lstm_2/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Less"
  op: "Less"
  input: "lstm_2/while/Merge"
  input: "lstm_2/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/while/Less/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/LoopCond"
  op: "LoopCond"
  input: "lstm_2/while/Less"
}
node {
  name: "lstm_2/while/Switch"
  op: "Switch"
  input: "lstm_2/while/Merge"
  input: "lstm_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge"
      }
    }
  }
}
node {
  name: "lstm_2/while/Switch_1"
  op: "Switch"
  input: "lstm_2/while/Merge_1"
  input: "lstm_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_1"
      }
    }
  }
}
node {
  name: "lstm_2/while/Switch_2"
  op: "Switch"
  input: "lstm_2/while/Merge_2"
  input: "lstm_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_2"
      }
    }
  }
}
node {
  name: "lstm_2/while/Switch_3"
  op: "Switch"
  input: "lstm_2/while/Merge_3"
  input: "lstm_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_3"
      }
    }
  }
}
node {
  name: "lstm_2/while/Identity"
  op: "Identity"
  input: "lstm_2/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/while/Identity_1"
  op: "Identity"
  input: "lstm_2/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Identity_2"
  op: "Identity"
  input: "lstm_2/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Identity_3"
  op: "Identity"
  input: "lstm_2/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_2/while/TensorArrayReadV3/Enter"
  input: "lstm_2/while/Identity"
  input: "lstm_2/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "lstm_2/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/MatMul"
  op: "MatMul"
  input: "lstm_2/while/TensorArrayReadV3"
  input: "lstm_2/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/MatMul_1"
  op: "MatMul"
  input: "lstm_2/while/TensorArrayReadV3"
  input: "lstm_2/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul_1/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/MatMul_2"
  op: "MatMul"
  input: "lstm_2/while/TensorArrayReadV3"
  input: "lstm_2/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul_2/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/MatMul_3"
  op: "MatMul"
  input: "lstm_2/while/TensorArrayReadV3"
  input: "lstm_2/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul_3/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd"
  op: "BiasAdd"
  input: "lstm_2/while/MatMul"
  input: "lstm_2/while/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_2/while/MatMul_1"
  input: "lstm_2/while/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd_1/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_2/while/MatMul_2"
  input: "lstm_2/while/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd_2/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_2/while/MatMul_3"
  input: "lstm_2/while/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_2/while/BiasAdd_3/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/MatMul_4"
  op: "MatMul"
  input: "lstm_2/while/Identity_2"
  input: "lstm_2/while/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul_4/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/add"
  op: "Add"
  input: "lstm_2/while/BiasAdd"
  input: "lstm_2/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/mul/x"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_2/while/mul"
  op: "Mul"
  input: "lstm_2/while/mul/x"
  input: "lstm_2/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/add_1/y"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_2/while/add_1"
  op: "Add"
  input: "lstm_2/while/mul"
  input: "lstm_2/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Const"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/while/Const_1"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/while/clip_by_value/Minimum"
  op: "Minimum"
  input: "lstm_2/while/add_1"
  input: "lstm_2/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/clip_by_value"
  op: "Maximum"
  input: "lstm_2/while/clip_by_value/Minimum"
  input: "lstm_2/while/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/MatMul_5"
  op: "MatMul"
  input: "lstm_2/while/Identity_2"
  input: "lstm_2/while/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul_5/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/add_2"
  op: "Add"
  input: "lstm_2/while/BiasAdd_1"
  input: "lstm_2/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/mul_1/x"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_2/while/mul_1"
  op: "Mul"
  input: "lstm_2/while/mul_1/x"
  input: "lstm_2/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/add_3/y"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_2/while/add_3"
  op: "Add"
  input: "lstm_2/while/mul_1"
  input: "lstm_2/while/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Const_2"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/while/Const_3"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/while/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "lstm_2/while/add_3"
  input: "lstm_2/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/clip_by_value_1"
  op: "Maximum"
  input: "lstm_2/while/clip_by_value_1/Minimum"
  input: "lstm_2/while/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/mul_2"
  op: "Mul"
  input: "lstm_2/while/clip_by_value_1"
  input: "lstm_2/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/MatMul_6"
  op: "MatMul"
  input: "lstm_2/while/Identity_2"
  input: "lstm_2/while/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul_6/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/add_4"
  op: "Add"
  input: "lstm_2/while/BiasAdd_2"
  input: "lstm_2/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Tanh"
  op: "Tanh"
  input: "lstm_2/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/mul_3"
  op: "Mul"
  input: "lstm_2/while/clip_by_value"
  input: "lstm_2/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/add_5"
  op: "Add"
  input: "lstm_2/while/mul_2"
  input: "lstm_2/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/MatMul_7"
  op: "MatMul"
  input: "lstm_2/while/Identity_2"
  input: "lstm_2/while/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_2/while/MatMul_7/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/add_6"
  op: "Add"
  input: "lstm_2/while/BiasAdd_3"
  input: "lstm_2/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/mul_4/x"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_2/while/mul_4"
  op: "Mul"
  input: "lstm_2/while/mul_4/x"
  input: "lstm_2/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/add_7/y"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_2/while/add_7"
  op: "Add"
  input: "lstm_2/while/mul_4"
  input: "lstm_2/while/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Const_4"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_2/while/Const_5"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_2/while/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "lstm_2/while/add_7"
  input: "lstm_2/while/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/clip_by_value_2"
  op: "Maximum"
  input: "lstm_2/while/clip_by_value_2/Minimum"
  input: "lstm_2/while/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Tanh_1"
  op: "Tanh"
  input: "lstm_2/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/mul_5"
  op: "Mul"
  input: "lstm_2/while/clip_by_value_2"
  input: "lstm_2/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "lstm_2/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "lstm_2/while/Identity"
  input: "lstm_2/while/mul_5"
  input: "lstm_2/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "lstm_2/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "lstm_2/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_2/while/add_8/y"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/while/add_8"
  op: "Add"
  input: "lstm_2/while/Identity"
  input: "lstm_2/while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/while/NextIteration"
  op: "NextIteration"
  input: "lstm_2/while/add_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/while/NextIteration_1"
  op: "NextIteration"
  input: "lstm_2/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/NextIteration_2"
  op: "NextIteration"
  input: "lstm_2/while/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/NextIteration_3"
  op: "NextIteration"
  input: "lstm_2/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Exit"
  op: "Exit"
  input: "lstm_2/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/while/Exit_1"
  op: "Exit"
  input: "lstm_2/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Exit_2"
  op: "Exit"
  input: "lstm_2/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/while/Exit_3"
  op: "Exit"
  input: "lstm_2/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "lstm_2/TensorArray"
  input: "lstm_2/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayStack/range"
  op: "Range"
  input: "lstm_2/TensorArrayStack/range/start"
  input: "lstm_2/TensorArrayStack/TensorArraySizeV3"
  input: "lstm_2/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_2/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "lstm_2/TensorArray"
  input: "lstm_2/TensorArrayStack/range"
  input: "lstm_2/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "lstm_2/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_2/sub"
  op: "Sub"
  input: "lstm_2/while/Exit"
  input: "lstm_2/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_2/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_2/TensorArray"
  input: "lstm_2/sub"
  input: "lstm_2/while/Exit_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_2/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_2/transpose_1"
  op: "Transpose"
  input: "lstm_2/TensorArrayStack/TensorArrayGatherV3"
  input: "lstm_2/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1767766922712326
      }
    }
  }
}
node {
  name: "lstm_3/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1767766922712326
      }
    }
  }
}
node {
  name: "lstm_3/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "lstm_3/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 3077963
    }
  }
}
node {
  name: "lstm_3/random_uniform/sub"
  op: "Sub"
  input: "lstm_3/random_uniform/max"
  input: "lstm_3/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/random_uniform/mul"
  op: "Mul"
  input: "lstm_3/random_uniform/RandomUniform"
  input: "lstm_3/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/random_uniform"
  op: "Add"
  input: "lstm_3/random_uniform/mul"
  input: "lstm_3/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_3/kernel/Assign"
  op: "Assign"
  input: "lstm_3/kernel"
  input: "lstm_3/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_3/kernel/read"
  op: "Identity"
  input: "lstm_3/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/kernel"
      }
    }
  }
}
node {
  name: "lstm_3/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 128
          }
        }
        tensor_content: "\332NS=1m\017=\001\366\242\275\224\273\326\274\240\301\245\274\313,\264=\344\213\247=\342\342\374\273\246\246\323=\006\n\253\275GFV=\247o\265=\352s\366\275\221\026\263\274\341>E>*\021e<X{$\274\2170\336=\002\372\230\275\034\232.\276\2320\213;\237K\000\275\002l\327=1\371\020\275\315;T;\325\362\000\275xZ\223=\357\252\014=\251KU=\260s\016\274\362\221\233=\001\305\020\276\207\2743\274\334[A>\177}\234=\227\301\033>\371\3003\275\376O\372\275oc\277<\325\254\273=f-\330\274\325{\314\275\235\220\226\275M\206\251:\246@\262\275\037X\022\276J\311R\273\302\330\022\273\317n\210=\246\234\301<\317\021\346=\275!\220\275[\367\244\2758\261.\275\212\n\354=\321k\236\274\375L\201\275\260<\001>S\255\013\276\201\375\361\274z\001\372\275\017\335y;\336b\214=\307\310Z=\366\260N=r\322\010=O\010\214=\235\342\260<\273\352\226\275\226T\210=vk\022<\207\037\023\276\"0\255\275\340\033\037>/:\353\274-\272y\275\2762\023\276|\375\310=(\225\242=\355\177\256=\316\024->\223\256\017\276\272\257\260<@\346-\275\217q/><H)<dTS<\244\302\311<M\323`\275S-\237=\304p\024={\320a=\353\356\354\275\265\203\221\274\3474\034>b\236,\275\257\321\250\274n\356\003\276N\005\023=\322\364\366\274x/\200\275)\000\205<\336\001\254=9x\342<p\250M\276\213\007\271<@\217\336=\177\310\023\273\316\010\345\275\332\003\256=p\016\031\275\341]\212\275\222l\264\275\204t\241\275%\245q\275\266\374\355=\245\037,\276y\025q>1\330\002\276\253\307\234\275\357\215\254<f\374\302\275\r\275#\276\244\0034<\232\r\353\275_\247\310\275\031H\214\274\022\"\203\274n\240g<\220J\370=2x\215<\236m/>\313\2414\276A\266\345=\007v3>\346\274=\275R-F\276\261\030\032=_\214\246<^rb\276f\341\373\274\365\200\255=\341\341O=\352]\213\274\007!\227=\313UF=\350+\214;\363\255\317\275Y\365d=\207J\224\274\323J\211\274\230\256K\276\025\201\201\274b\341W<:\020\261<,l\347=\352\337\352\275\241\307<\275hX7=I\'\272\275\263\300\001>\037!G\276!\300\020\276v=j=+\001\274=g\376\335=\037\271\200\274\037i\010\275^\234F\273.\352X=E\325\000\275<\300\246=.\214Z\276\220\013\002\276G\275\364<\341\211\274\274\257\253\"9*V\204=@\320\031\276\200\230\303\274\310u\266\275\245A\265\274\325j\306=\001\303\276\274\033\260j=\273\366\021=\260\363\001\275:\202\216=Q9\311={S\364:\360+;\275`\230\">w<V<\360\252\202\275\031\374\227\275\333x\265=\215\205\225\2739J1\276\177\035\230\275\257\343|\275\207\333\376\275\023\010\340:\305\177R\275\320z\024\276\361\352\244=\241\253\200\275gu\"=Vhb=\315B\311=\257\260\225\275\235\366V\276O5\241=\275e5<\220\352\343=\021=\367;\271g\333=\370y\302=!\357\020\274\333\004\014\275I$\230\275.Qe\275\350\305\032\273s\257\251=\n\233\024>\"H\360\275J-\316\275\017\246\234\275\376\211\356<\227\007\200\273\335\370\203\275Ad\007=)\n\247=O\356\267<\000\343\025<\374\022\231\275Y3+=$A\026<\004s\003\276\206js\275M\365+\275KB\"=\002\355b\274e\n.;\326\234\024=(\001\356=@\204\321\275\363\203U=\257|\300\274Y\0067\276\332\241\305\275\346\310\200\275![#=\3764\213=/\000F=fg\023=\302\313\301\275\355\221\320\274\353\203\007\276\250*\363\2759\230\364\275\371)C>aM\325=\'\315\307\275\234\312\001\274kZ\346\273\007\255\341\274\315a\r\274\001\3129<p\335D>\021h\303\273\364\374\021\275Gh!\276\013\337\354\274\243\344\017>\'\207\355=\026\242;=a\220\367=\337o\201=\000\300z>\231.1\275(M\007>\337x\001\275\331.\374\275\361\0169\274\034\344d\275\253{\027:K\216\357\274[\021\256=\234\035\320\274\363V\341=\005`\234\275\261\372+\276\254\374F<\026\254\014=\327\244\320<~\355\226=DlL>\020\2404\275\345u\">\366\323\236=\025\232S\274`\323\357\274\201\323\007\276s\265.=3\271\"=\345<|\275\203\205\035\276\260\223\">\215Mo\275{\202\227\274\266\315^=4U\346\275\005DI;9\306\266\275\311\220\037\276\023y\014>\374Z\3479\'\274\303\275y\261\246\275\335RI=\251\006\232\275\271Z\206\275\025\252\r\274\277\343\223\275\360\337\204\275\222\260K=\205\261\257=\034\345\253=\262\240\245\275<\217\250=W^\024\276SX\001\276\016P\210<Sq\254=\337\313\002\275[\355\273\275\240A\342<W\370\016\274\233\216M<\334\370R\2731,\212=\334\371)\275\235\300\303\274Y>\370\275J\271\352=\235\233*<\235\261\262=\314*\254\275!A\004\276\252\272K=\252\010\331\274\343Xf\274X \031=\304\361B\276\221\270\023>\301\252\304=\306\000\363\275\341\334\031>gP2<\210yK\275\344\017\317;V\034\213=\346\226M\275\325\317\226:\352\332\377\274T\3202\276\356\234\250\275\343tU\275\244@L\274\202 e\275\275\373c\273\\\212\031\275\253`1=\301\263\210=~\313\366=\010\000\304\275SR\315;u\273\202\275u\350\367<m\262*=\367\026c=\036&==\336MX=\235#>\275r\332\326=\367fz;3\034\324\275-\237\014\273OPE>\225\016\202\275\'\301\016\276\365\323\260=\233mA\275+\014\331=\307\317\236=\211\032\010>\260\t\035\276l\330\212\275\371\216\277\2756\252\000>\025\222\204\275\303\247\177\275\242\037/\276\354\304\035=\213\253\264=7O\266\275b\356\273\274\354\277\246\275\244\300\374=GX\276=\013\032]=&&\021\275\234\262\330=\251\204\226\275\343\373L=8Zc=\034\354\230\275\3215,\275\232\301G\275\216c\022>\363Q|=\214\256\246<\024\000\315\275\366*\004\276#{\360<Uc+=\036\374\225\275%I\034\276\274\230\213=\362U\357\2742\252\037\274N\302`=\237\035n\275\232\235\233\275\271\331\007>(\321\366=\273\002\034\276/[\366=o;t\275%\037\252=\274d\314=\361(\346\274G\262\t>\216w\255<5\314d=/\227P>>\322\326\274j\246\234\2756\313r=b\003\236\275\365\222\311\275\243\031\352\275\321\213^=\017\363\220=\356\372\364<\356\037\023\275\315j\263\274\013\203\303=\"x\023\276\3219Q\274\000\021\215=\305x\215\275\340\235\351= \376\332\275\030/\260;\002\007\324\275\273q\253\275w\335\332<\031E\003=f\331\332<^/\033=4\224\260=\354\301\004>\'\341\333<\205_\351<{\013\340\275\221\013\320\275\004\333\363<\225\\g\275[\333\267\274\177c\005\275\0357\311\274\261\344\027\275\310\017Y\275\302\340\333=6G$>{\306\233=\361#\275=f\240i\273z\357\366\274vN\017\276\024\020\256\275\200\212\343=!\214\022\275\017\333P\276\316/\257\275\200\207j\272\235h\000\276\354c\014\275\334\320I>`\225\276\275\267\021\227\275Rx#=\000L\320;\231\310\013=Xy\227\275L/{\275\206L\032\276*\211@<J\276\013=\370\021\020=Q6.\275\035\2156\276B\266\341\274+\352+\276\337\214|\275\322n<=\014Qi=\016\317e\275{\347+\274\232\373J=D\234\206\273#~\302\274\376\257\245=g\027/\275J;\351\274\002;\375=\237a+\275G[\220\275ZJ!\276FMe<\227A\032>\303H\367<\330\243\201<\307o\344\275\006\032\244=%2\367<\010\210\300\273_\225a\274Q\3107<\037\252w\275\336^\250=\3650!\275\325\314\326\275\013\024\260=)3c\275\214?\354\275a+\227\275\010\332\001\275+\207\303=|\325\371=\374\311]\275\314\'\355\275\013\\\302\273\t\260\225\274\313\256\307=\234\212\376=\022\366\326\274\210\243\305\274\377kE\275G2\320\275Zu\214\276\354\350\232\275\360\027\207\276b/\335\275>\271\235\275\037\264\021>[\354\327\275U\263\023\274\337\014\240\274\'\351\240\275\321$\n=`\204\252\275\324\324\374<\023r~\275 \201\002>\231\032\030\275\261\021\005\276m\263\214=\371\3678\275\036\003\310=Y\204\234<\353\345\375\275\360\303\247=>\267m;t\177\364\275\313*t=\'b\003\276\305\324\213\274\373\276\230;\261\'<=p\332=\2757M\354=Ed3=\t\254\316\273p\210}=\330\324\307\275\003o\222=\362<5\274\233\355\010=f\377\263\275\260\365\200;\373pg\274\016\032\356=\330;Y\275\321\205\211=\226$\350\275\253$\024\275\t\236\017=\257\026J\275\244\336)\275[\006\021\276\274a\376=-\t\376=|\0069=\343j#=\266?F>\216\306\013\275u\nw=\272%\326\275\310\210\271\275e\215\345<O\'\026>j\237\t\276\232\341\321<px\333\273\211\033\t=S.W>|g\367\275\356\265\207\275J\241\220;\017\263(=\373\262\226\275y\022\334\275\323\300(=\025\344\"=)\355\356\275\267\000\347\275\360\347\177=\367\300^\275T\313\264\275\001H7>\336T\264=\177\311M\275\211\350\201\275\221h^>\302\345W\275\303\013|\273R\335\356==\360\236;w\2170=\212\370M=\275\002Q>\224B1>\222\217\363\273\320\026\304\274\315S\213;\027\020\250=B\250\214=\237l\003>\263r\264\274yN\242\275>\347\203\275\334\314\244<\327\262\217\274\271\307\244=\241\377\327\274o\335\357<\341\272U:\206\327Q\275\254\367\311<\251\264\230\275F(\215=\341\231\301=\336\025\310\274\034\342*\274\255\342\221=q0\362\275\024\356\220\275l^\317\274\356\003\220\273`\212\013>h\231Y=\362\232{<\246\266C>\221\252\362<8\353\231\275P\324L=l\242\304\273/\000\206<\347\224\312<\327\035m=\325)\256=~\222\035\275\257\360\003\276o\0002>\027.\303\274\317\316\006>\230a\232=\024\236\363\275\026C\016>MF9>n\3124\275\020\315\343<\250\355\237\273\300\210,\275\3113*=/\227\234=\024\303\030;\346v\033>7\312^=\367\\s=\013e\020\276M\353E\276+AR\275\246\3302\275<\354\002=\235MY<ce\260=1\3347=\340]%\2754\263\324;;2\373\275\010\374\033\273yQ\025=\313\377\002=J|\262\275\024\006\274\275\035\314\037\275amw\275m\256^\275\264nq=.\244\362\2740*4<\021\363+>\2235\356\274\3405\016=y{\007=\323\337Q\274L\323\243\275\376\360\325=\000\261\270\274\230r\356=\341\315\346\274\216\215\037\276\335c5>q\004R\274\2758D=n\356\030\276\211N\200=5\236\213:\361\225\212\276\350x\336\275\316\267\333\275O\375\267=\314\311\214\275\272\334\212\274\376\2072<\3533\323<\022\240\013=\031\211[\275\365\037\036\275\274z\000>\273\3061\275\326\215\374=X\036t=m~\211<\21794\276\306\272\024>uZ>=\251q6\275\0066\207\275\303\344+9Ro\201=#?D\274A\334\251=\235\177\240< {\001\276\353^\364;\363\337\r>\300\336\310\275\267#9\275\037(\377\275\262f\335\275\261b\210\275\224(0=\201\267\303\275P\321<=k:\226\275>\003\312\275\2761]=\006\\\027=@)\302=\005\346\217\275\330Y\023>I\272.>\016\272\352\275\346\250\021\276~i\347\275\223\211\020=\251\034\221;\177\002q\275\017?\334\275\232\020\021\276\365\325\003\276\235\2531\275BK\034<\310tZ=\004\205\003\276j\243\263\2757,\377<\371\371\365=1\303\322\274\246\303c=8\037\'<\3641c>\310\236{=\227($>\373\\\305\274\325,\032\276\360\316\327=\323i\372\275\025\251\257\275c1\317<1\261\001\276\211\016\031=\312x\201\274\371\002_\274\314\274\231=\340\006\274\274\2060\223=ra\007=\307(\215\275lo\365\275\362\340\322\275\237\337@\275S\014\356\275\306L\001;\324>\010=\234\007\030\276\253\r\202\275H\353\254=\013\023\307=>\002\\=\331\201\036=q\321~\275\247\"\270\275W\362u\274\272$\241\275\220\265\243=\206\340x<d\004\332=v\233\034\276\236m4\275\201H\243<EBm\275\214\360\316\275\"D<>\325\355\253\274\275\337x=^\355P<w\327T<\330\3240\276\310\257s\274(9\256\275\257\016V\275\\o\260\274S\250\317=\023\317\366=\327\031n=\343\320\241\274\337\343\235=\232\311\365\275?\266\241=\362Y\014\274\305\227\206=-\377\020>\003v\242;j\354.=\021u\312\275\236\034D\274J\347\210=\222\273\212\275\353S+>\'\261M=ZP\r=3WX\275\370C\201=\203\357E\2757c\261\273\200\301\310\275\216]\214\273\355\362\244=\226\343\\>\272=\364=Kx\211\275\345\276B>\326\337\345=\014\243!<,6\004\274\331\032\223=\373\t\231=?\257D\276!\315Y\276\017\231\027\274H:\026<\264\326\227\275Q\\h=\006\316\007\275L\307\017=~\240\310\275Lk\032\276\236\210%=\255\013c<p)<\275%\270\240=;|+\276\247\200P\275n\236\261<1~\210\275\233\004\326<=M!\275vI!\275\227\n\364\275\314}\224\275Ua\372<\364\007j<F\226\205=b\335G=}\273\220=@\007\341<9\301\251=\273|u=\223a\231;\025\345\275=\302\231\'\2765\007+\275jBR\275\262\301>>\2601|\275R\020z\275v\253\004=\257\213\001=\203\031^=x\311\240\2759F\213=\226z\035\274\004)\214\275\346\024\320\273t\023\322=\251\222\"=%\276\213\275{\271\342\275Ar\025\276\377x0\275S\333\005\276\003\352\357=\334*\327\275\010\207N\275\371\203\374=\246)\226=\270E-=P\252H;\360X\004\274\005\014\310\274\304\263\215\275\244\274\254=l^\260=\031\265j=\346\333V=\347\376\271=\364\177\250\274\250\032\006\275\221?\332\274U\267\273\275\335\301\347=\263\250\232;\354}l\275\241\311\320<\346\371\223\275+\014I>\371+P\275\302-|=\221\225\357=\352y\322<v\013\332\273\307\331Z\276\220P\025>-\222\234\274\244\212\331\275\3268m\275\202{\250<\353z2=\215\326m\273\213` \274\323\202\016\276_f\307\275?\304\247\275\263\315\024>\344\205\r\275hj@>z\232\253\274\245\330\304\275\324\274\313=p\236\020\276W6\376\275m\231E\2757\246\300\275\332\205\027\276$\361\331\275\366O\206\275\334u\215<\236\3636\275\n\320\307\275\021\367\344\275r\330D>\033\277o\274\t\372\'<\241*\267\275\352\317`\275x\353\313\274\345\370\206={\"\356\274\0322\366=\366\036\250\275\345\300\247=\250P\003\275\350\271\033>\354\022 =\302\330\342=\212\t\343<F\256I>\277\202\265\275\217\"\225\274\330\256\224\276\333{\251=\353\254\214\275H\240\\=_\315\365:\034cu<t\004\247\275\334\343\323\274@>#=\2634\215<\264p\225\274\\\204q\275\032MW>\233\263m\276s\333\365=M\255l\275\002D\020>\226\253\241<[\343\357=\014q\r<\310F\304=\\5\r>h\206\013\274L\342\234\275\275\3374>U\021_>\\\217\236\275\350q0\276\2719M<0\"\205=ud+\274B\016\346=\\Fh\275e\235\306\275\375|\342<\277\001\226\274\277(%\275\273W?\276i D=Y\241\200=\235\306\352\2758\237,<nDB={\212\002\276\"\201\211\274\271\314\327\275\3236\357\274\2748\017;\261\\\216;\367J\233\275\226\333\231\275\007\236\t>\021S\025\275M\305M=I\270\033\275U\2447\275\226\223\243=Y\030g\274k\202\351=\033\013\271<\304\333i<\355o\313=w\324\235\275Zc/\276Z[X=%\262\366\274\034\352p<\352\326\247=\317\t\031\276:\013I<~\333\203<}z\0148CU\027=#\2460\274\332\225_<\3720#\275\350\311x<\005[\036\275\006Zu=D\222\n>(\3705\275\305r\004>0C\247=\344\204{\274`\\\256\274\r\301\307\274mx\233\273\205\205\257\275Y\317\221=o\376\262<!e\234=\273\353\020<[\010\272\275\"d\007\275\266\246\035=[\356g=+\367j\275\026\004\232\275\244.r=\305\214\260\275\307~&=w\206\213\275\316\301\">\002\001\261\274U\262(>\0032\275\275%w>\275\246!\200\275$\236\036=\253\361\233;\354\0203=3l&=1\321\t\276}\373\274<\336?\027<\223T+<$\365\276=\313\235 >\332\243\361\273\363b\017=\245Q\365\275\010\241S\275\2565\323\274b\353\251<L\021\023\276P\006L\276\243\345\261<\265\035?>\'U\372<L+\272=\177|\272=\317{\333=\246\0105=\273\356\211=\337=\312\275\255\201<>\377\227\307=@\316\325\275\325\002\027\275\277\211\357\275wK\255\275)S\257\2740k\274\275R\2443=\331\320\276<i4\211=Q\201\177\275\035\215\371=8h\327\274\013\\\027\275\276\301\264=\364o\'\275\335v\242=\t\326\347=\rWr\276\240j=<\030P\203\273NJ\024>0\264\267=\000\274\261=\272\343\005>\253\350x\272\231\337\253\2752\321\330=\027\301b\274}\307\"\276\352\000\215\2730\355\025=\272\212\215\275ob\355:\273\307\361\274\024\335\251\275\277\316\224\274C\2777=\274kW\275\365/\315;\271\"\201=O&\232<#3K\275\204\031\013\276a*\253\275E=D\275\246\232$=\2558\214;\367\253@=\311`\033\276\376^\311=\360\031\257<F\2725>\376\204\202;h\302\\=\317V\004>\371\305V=x7\214>\262,F=\227\210\n\276,\305\232=ka\026\274\220\235/=\331\366\325\274[Hv\275o\032\312=\224F\244=Y\327\216=\315us\275\253\250\262\275\312\204y\275\222\253\204\275\2334\272\275\325l\211\275\2277\211<\212\020\361\275Z&\204;\023\373\267\275\270\320)\276\2049\201<|L\000\276\377T/<\215%6=\333\343\370=oq#\276\255<P=\307{\203\275\353*\215\275GKs< \241\350\275\367d\250\274G\212\361\275/`\250;u\271&\275|[\313=\260jL\274Pv\247\274q\340\266<\346)\203=\253\244\273\275\265xb\275\027G\335\273\335=;=6\004/\275K\2560<\025e*=kO&\276l\237z\274$\360\007>\337\355\366\275\363UX\275\361\177@=\335J\267=a\177|>\217Y\307\274\036K\261\2753\227\014\275`/\004>\226:\027=\1776\322\274y\327h<\251\241\016>?\362\344=Rv\216<\306\333\271;<]\003>ii\016\276D\315\026\276O\274\216\274\206\313]; \200\025>\343X\365=\302qi=\350\017\350=P\206g=\352\257\344\274\261\031\247=\376\312+\276\340\025\037\274F\305a=\267^\004>S\013O>\373\244\302\274\276t\004>.8\364<`\014\"\274\237\350o\275\023\306\247\2745H\276<md\244=\364u\375<\277s\315\275\365\312\322=\216P\n>R\367\016<\214L\207\275,M}=$TH\275}\210U\275\304\365*\276\360\324\300\274\360\323\326\274\221\021\230=L\3670<\341\272\373=5z\002>\246\263g\275\343v\273\275\235\212+=\272\306\241\275q\346\263=\213\357\035\276\215\366\240\274\236\323\256=\034a\272\275M\255P<50\265\275Qf\356=\261\317\305:<\267\030\275r\360\210<\273\027\256;\307\nP\275 \206\264=1\370\367\274\373\304$\274\224\220X\272\220\024\220\275\240\037\236<\270\017\213\274\035\225\233=\345\375G\276\303\037\320\274\370\240\255\275\316\310\211=\3107(\275]no= *\277\275\306\260`<\030\034\231\273W\274a\275u[n\275\205\213\000>\020\235\320=\243\354\204=\301\006&\275\376\022\341\275{\225\231\273\271\235\261\275\256\215\270=E$.>\2026\004\275\253\247\217\275\267_\204>\357\026^\271\022\333h\275\365:\353=}&\005>9\001\036\275\342\221\213\275M\331\270=Da\010\275\327\230\260\275\270\007\004\276\316\271\337<\362\352\330=\335N\007>\027,\013\275W\236\332\275\033TN\275\022\355\177\275%t\272=\003\266\000=\203G\203\275\232 $>\305\315\n\275\322\345\032\275\177\'\261;\201\337\367<\305\223\310\275\257b\350\275B<\327<1s\013=\013\221\242=x\267\346=\314\273\000\276[\3478\275\361\377B<\343\003\255=\357\261\204=\302\034\226\275\326H\324\273\363(\006\276@z\355=1\030\037>\307\307X\273\307\365\013\276\306w\202=\002o.=\301\'\322\274i\237\"\276]\014\263\273\345\346\003<\303\001u\274Qp\233\275\0247\216=\204E&>\005MZ=,\255\010\2746r\321=\317\222:\274\264w>\275\236\275\\=d\336\020\276H\005\001\276\t\261\347\273\244\345\353=8\221\023;\373\301\002\275:|\000\276\206\006\323\275\n\005@\276\021\233\031>\276\323Z=\306\275\362\273\204a\327\275\202\234b\275~\022\017=\252\0045\275\335;\245\274\3123\033>\013\322\206\275(\364\322\273\2431\236:\345\354\236=\2114\031\275\255\177\241\275\352}O\2743\010\244:\317b\321\275\251\306\246=\342\tD<PqD>\335F\370=)y\001=\032\027\372=g:\254\274\252\226\273=\215\322[<\220t\001\275%2s\275\334\304\331\274\376\340\020<\221\254q\275\333=\255\275\304c\341\275u\214M:\256L\001=\333\216P>d\356\360\275ZuK\275\304Av\275\320\367\304\275m\263A=\335\237R>\334\373>\276\017\017h\276\347\303\024:\016#\252=)W\322<\332\375x=\014Wk\275\336\004\002\275\205\273\023>\333Q>=\005\255[\275\227\221P=A+5=*\243\034=W\271K\275\362\030\n;;\313f\275x\323Q\274\303^\225=\221{<\276\037+\332:\270\376\030=\325\353l\276\307\216\254\275\260qr\275\020\363\002=\233\3760\276\334\227}\275\303\263\231\27565\370;\353\020\226<\207\200\031=\356\006+\274\2145c\275\006=\236<\340&o=p\370\351=<\2039=\336\267\240\275jo\251;sD\334\275>8]=\263\016\007=\230\221\033\274\355;`\275p\310\262\275\220\321\332\2743w\264=\204U\325=K\307\257<\231\207\314\275W\022\363=i+\321=P\332 >\227\224&>\210}\222\272\005\322&\276\211n\265\2751\315\260\275(hV\275\243\303\304\275t\357\031\275\200k\271=\177h8=\342_\374\274\205\352\214=\326\027\200=\017\324\271={V\373<\277}\246\275]\274X\273\361\232\002\276\277V\224>\271\3665\276X\345\213<\255\320\355\272.F\000\273\266dI=\371-\213\275A\003\245\274\200\351\215\275\354\010\374\275\235\033\310=X\035h=\365W9\275_\217?:\005\347\r=@\353d>I!\037\2761\364~\274r\311H=\"\340\244\274\253\347\246\275\355JP\275i\224\343\274\316B+:\255)\205<\372\024\255\275\307A\255\273\254[f<\331\234\226<\271x\021\276Z\307\215<\204\207\336<T\t\266\274GH\n=\004\307\236=\007\305\257\275\254-\232=\271|\030=c\322\020\276.3\245\275B\333,=\006\277\001=kc\021=\213\0345\276\277\335\207\274\232l\353<\271\301?\276\352\364\261=E\237\367\274r\r\243\274\355\254\326\275\330\235\216<z\032)>D\363\276;\220\233\034\272|\014\271\275q\373m\275\033)\034\275\344o\207\274\374y%=O\t\331=\247\301`\275\274\036\274=\010;\200\275\275\340\257=\246\007\314\275\304\006\327=\305\217\010\275g\245\264\2757\372\377\275\006\262\223=\326\300\263=\336,\033\276B7\205=\3072v\275)\365\256\275h\366-\276g\261\016\275\370l\232<l=j<\023<a=A\027\000\276\200\270b\274\200\237e\274\211\236C\276\243\3128\275!\227\016>\306j\302\274>\372\n\275\t\3569\275\305\364\336\275Q-\367\273\325\365=\275`\304\001=X\204\275\275\256\230T>,D\241\275\025\003\205<\214/\247\274\032ZJ>\342\360\251=\235\006y==\373\332=\243\310J=\035\033\'>\374\214{<,\370\360\274\333u\032\276ug\222\274$a\251=\340W\266\275\032 \244=!\340`\2759\302\315\275\237\265,=\373\244_>G\276\263\274\246K\246=o\350`\275a\321\026\276\3455\202\275,\335\226\274\206\230\351\274\031\"3=\0372\272=Ao\343\274\314$u=\375\035\002=\264i\013=\266|\323\275\314e\247\275\337?h\274\377\245\364= \2063\275\212\326:>\220\367\376=\214}\236\2745\221\001\27641q;-\240\276=\204\332\232\274\001\205\023\274=\277.>\341v&\275K\314\221=\0040\t\276k\245~\275\221\201\006\276[U\037<\244\360\212=\244\260\206=\340\234\362\275\334\224\261\274\2008\237=IQ\021\276Iq\264=%\\\222\275\301W\346<\277\353\321<\255\262[=$Y\253\275\260\001*<\276\364\321=\332b\365=\276\300\034\274\323C\264\275s\205\360\274\230h\032\276\036qM;\206\223U\275[\217\313=\037\264\342\274\200\3224<x?\204\274\362\215\272<cn\307=~\252\027=@\007\204\273\343\023\"=)\034\"\274\027\336\203\276\363\221\025=:(\254=v94\275\227S\363\275\363\215\r\276O\324\351<$ F\275\t\231\310\274~\201%\275\267\267\322<>>\246\274a\220\300=\361c\036\275D}\265\274\355\257\200\273W7\211=I\027S\276:\n2=\356\306\337=\251i\t\276.\022\324\275-\0141\275\341C\242\275\311\237f\275\354\364\370\274\236/\264<\274\237\316=e\345\226\274GZ\360=-\001\260\274\216L\231\2752\351\203>\230\366\022=\017\305\n=\2662D<R\352\350\274^\247\367=\301I-\275~\354\352\275\251\2249\276\217\\\354<B\277\222\274:\237\243\275\327\245\266\275\236\300k=\265\3007=Pf\312\274\246\337\306\275\336u\354<>\037\334\275T\234\361<\311lD\275\366+\377=9\367P>\373#\334\274\032\256\031=\202\373\223\274R\251\211\274\030\306\213\275\001\r\205=\030\316L\276\205M\246;\252\343\326\274$2\016\275~\330==8EM\275\270\354\321=\236(X\275\245\360\236=\325U\350<\327m\023=f\370\035>L*\367<\352>\244=g\021\t\275\330\200\267\274\313M\215\275\314j\223\275\202g5=\241\222\031\275\037\272\001\276\233&U\274kH\367\274\266y-=\037\334l<\310<!\276\375_\317=t>\034\274\220Mv=Y\352\210\275\364\304\241<\311\016\270\274^)\\=\030\2439=\r8\365\274\267\021\003=o\252j=[q\221<\360\263\177<\223\007&>\000\267:\276j^\267=_\263\365=YX\034=\000\307\232=\031\026.\275~\013\361;\314\377\227=\360.w=\210;\222\2741z\000>\341w\275=\2737\212=\246z\214\273\237\340\342=\325H\347\275x\010\266\275\210\232\322\275S\325\005>\316\010\244\275bg[<uV\025\275\217\312\236\274 \320 =\220w\r\276\256\220\t\276\245\210j=\323\022\212\274\251E[<t\276\242=\235\356\\\276\236y\007>T\010\325;\237\256u\275\203\271\350=\227\352\256\275\226\347\347\274W\005\007<\200\376\344=\245\324)>\2602\344=u\023\002\276\220!\231=^\377\r\275{,\027\276\\\007!=\362\342\341=\345\274\265=\243\257C>\035.\023>\305\024\351\275\372\320\205\275\016\216\321<\335\240\225<\341\230t>\205G8>)\3476=V3\246=\347\201\'\275T2\266=<\247\216\275\263\231\007\275\317\216&=\303\260s=\325\213\272\275\333\016\202\275\002\263\303=\227\272\226\274\200\204\342=\356=\320\275\331\263\t\276-\301\020=\247\273y\276\204\206\235\275\371O\240<cSL=\240\230t=\235\023\377\275<\263W\275\300\326\220=A\374\205\275\224\263\223\275K\357\336:(1\255;\341\313\251\274\nf\340=\252\367\032>.\222\017\274\330\244\230<\010\247\'=\204\r\353<\372!\001\275\347\t[\275\225\251\240=\306\342\307\275\256\276\231\275\207\377\326\275\344:5\276\350+\203\273\004\243K=\034\301\216\275\307\226-\275\257\307#<w\"\003=O\336\252=,\020j\275\261\234\312=xI\262\275?\325j\276\r&\002\276\341\332\351\275h=S\276\030\020t\275\205\327\034\275\271\236T\275%\254\301;!\021\r=f\\y\275\374S\204\274\002S\236=\235\031\307\275\230Wp=\325k\034=\326W\364=U\326\024=\372\022\000=)sQ=\306\202R=\177\037}\275\335\006\246\275\003\225E\275\013\301\356<\'\312_=\242~\247\275\236Y;=\247|\305;\014\262\027\275\374\371\376\275v<=\276\302l\003\276\033\251\346\275\271f\025\273\003\353f=\3451<\275d\217\302\275\003\321g\275#\376%<\n\025\361=\206\031\235\273\326\223\260;\353\202\221\274\254\356\013>\177\330\257=\304R\372\275\207ZB\275\270\376\226\274M\374\214=\301O\311=}\035\363=\272\363\362\274\351\2149>\346\337;\2755\003\244\2752\204\341<t\272?\275Z\031u>\"\203e\275\323\3106=\3279\330=\003\262\351=\360M\026>\330\245\230=\027\345\201\275dW\364\271\314\3546>\2561<<r\234\336\275[\tz=Q5\240\274\355\250,\276}\304\256\275)A\225\274\014\020\356;\242G\023>V\272x=\314\244<=ygo=&N\260<>\257\010\276p\372\257\2758^\200\275\020\234\027>P\243\223<\202\267\225=q7\230=\227\372\224<<O\227\275\332Pd<c\017\266=m\025\307\275\313\373\270\275\273$]=\350\024\"\275\376M\021\275Ku\320=\177\270\007\276\357\274\025\276\225\242\021>g\322\341\274\33784>n*\355\275\2632\022\275q\210\201=\037^\030=XE\232=?\354R\275g1b=h\'c=\260q0\274a\017\212<\t}\033\275F\262\275=0\"*\275(*\236\274+\260\237\274\363iq\274q@\365=w\240\256\275\260\340\210<\254\326\365\274U+\'=\345)\271\273\230\355c=\374n\244=1\313\363\275jg\035;\r\344\251\275\212O\253=<\032\023>\374\002\007>\374!:\275ba\000>2<\272<k\251\227=D\275\203=\213\213\001=\tw:>\202&z\275\242kg<q\240\227=\214/\271=\332\234G:j\264\031\274\372\337\202\275GT\334=\232\202\036\274\360\357\304\275L\202\221=\236S\375\275\010\215\226=\225\323\306=8\247\023=v\322\215\274\005]-\276\347\207\007\276\2041\345=\033\032\021\2754\316\253\275\234\024\376\275XS:\275X\265N<C\211\n\276L!\004\274\257\001\205\275\266U\005\276\302\302\177\276\334r >\335\227\366\275\250\030\"=\361\305\273=\023\302\202<\306\202\320=\263\371\"\275&\013!=r@\274<\204]\232\275\211/\375=\243N\271\274\366\240\342\275\372Yy\275\336\017\005<U\241\035\275e\270\307=\306\003\'\276\230\314\001>M\020,\272<]u\274_\t\252\275\211\276\322\275F\017\261<P\347?=\222\251\251\275\262\0054\275\315\366\275\275\3104\241\275\0019?<\261]V\276\343w\233\275\213uE=Z\263\264\275\013\312\033=\363#\226=\265\362\013\276\034\014\n=^h\244\274m\250\312=\252+d\276\325\251\006=[\377\272=\026io=\305\217\314\274\263G\360=\246\344&=\330\231\261\274\2076\242\275a\034\212=\204}\366\275p\370\310=\031\270\016\275z8z=C\251\322\275g\347\330<WT\371=k^e=$\307I;\250\261\253=\234\233\253\275o\3654>\033(J\275F3f\275\200\345\277=\273\3360<k!A\275-Is<\"JG\275\230A\002=dO\343\272\230T\331<\232\316\004\275U\035\236\275\3343\031<\202\325\262=\203\277\t=gp\356=\351\201\207\275\177z#>\360%M\276\346\241\014\274\333\204\024>\213\276\330=\252D\323\275\215\313\315=\245P\330\2750|\345\275\202z\346<\002- \275\300\322\367=\253\036`\273\2356\322=\216m>>\002h\372\275\223\224\003\276\377\240\242\275GLc;\311\313#=\0130\371\275&\\\'\276;\260<=\275\006\210=\372]$=\037o\013\275\332>\237>\266|\200\275w\324\006\275Mq\223\275\234\232\353=\035\275\202<\241\033\265\275^{\251=\223\333\t\27557\313\2747\365\321<\252\216\262\275\373q\357=\215->\275G\033\220=\365\337\022\275\200\264|=\235\014~\275\346\303\374\2751\245i=\332\365\270\275xb\333=\346\353Z\275:\267\246\275\033\\\003<@\234\354\275\234\267\356<\320rb\271\237\275\331\274\273\005\207=\372g@>\377\232\206\275\0029\360<\351\203\256<\347\343\000\276\243\207\324\275\307\020\035=\030M*\276\263/6=CT\224\275\320\252\317=\320\231\372\273\001\326\254\275\255\333\201=\272M\036\275\327 \024>\033>+\273\330`\004\276\243\261A\275\372t\362;R\350\004>\257\3547\275\003\017G\274\251\254\014>\360\206\001>\243\214\321=)\232Q=\205wl\275\201w\227=:\312]=\317\270&\274\313\321\030<\177\305\232=bp\237<\205\034\266\275\321\245C\275\223;\311\275\375\031\245\275\346\273\371\274&\225\205\275\225\361\236<\026\022*\276R\320\365\275\204\206\310<\324\350`\275-\361\033\275\375\342\007\276\376\035\014\276\003\324s\275\251\377\222=F\245z\275U\006\370<\300\322\264=\375\343\212\275\360\365\363;\224\347#>teU\274\216#6>C6\223\274\377\352 \276\025w\226<\'\361\226=Q\"\223;\010G\364\275cj?\275\214l\270\275U\351l=oQ\312\275\022z\001\274\210:B\275\"\354\263\275\2215\253=\313\342\370;s\032+\276\322\\z=l`\355\273\257\373\034=\323d\002>86q;\332\374\356=R\226\212=Jm\017>\033C.\275\320\344\016<\304\\\214\275\211t\220<\2420\210=0\":\274\314\022\231=\322\276\034\276\241\370*=jt\027<\374s7=\331\211=<\036nV<\250\316\013\276\337)\222=\022p\022=\211Z\220=\207(\237\272\246\032\022>\031q\201\275\022\350\265<v!\320\274\205\372V>,\035\332\275\337\353\214=\246\"!<\324$4=\014\360\276\274\'\223\224=A\3755>\001b\346\274\277\373\252\274<*\275=w\250\025=\223\340\200=@u\215=\372\274\337<M\201c>\301mw\275!-\354\275\231\236\030\275\031\345\017>x\231\023<\027K\201<h\223\300<\013\3641>\032\252,<\377\230\214\275y\003\200=\352\206\016\2747\215\244\275g\r\211=\214(\030\275fR\361=T\377e=\222J\333=\3009r=\266{*>\026(x\273\235\313{\275#n\006=\205\342\303\275[\036\036=\373\020\246=\3046H\275\274\360\256=\204\037\016;\377_\024>\241\203S=\226\361G\274\217\233E=H?<\275+\013\177\274\350\370\347\273\"J!;\305\362\331=I\253\014\276~\227E><\311\333=\037_\331\275\226\257x=Y\326\036=I\367 =\306\361U=\375\237j=\210H\222\276\345\303\031\275\034.\230=\3214*>\361\233F\275\202\237\216\275\250F\022=A\216\250=\337{\271\274C!\321\275\317r\r=H\225\'>3#\225\275 \351\003\275~wI\274\t\\\216=i\211\255\274+\'^\275.\246\373<\364\363\234<O\216\032>\037\'\006=\262g\246>\014\024\003\275\225Ne\275\211\261\324;\2325\361\274l\305\343\275\023\253\276\274V\t\326\272\004\347x=\327\002\256\275\\\312!><\016K\275\235\017\206\274\023\366\023=\023\326\201<\340\230\331=s\253\340\274\326\365\014=pK\223\275\026\346)\274;\010\357\273\201\352\203=\002\216\302\275z\334]=\"\334\331<\222\274\014\276\265\344*\276\300\205b\275L4W\275\321\205\215\275\216:%\273\016ig\274\312B\304=\020\024\010\276Q\031\342\274\353\234\203\275\215?\335\273\236NU<\271T\301\275\365\327^>\323\3546;9\210\362\273ob\356\275rl\360<\\EB=Z\240\323\275\345\352\303=\206\262\350\275jg5\275\327\td=M\367\341=w\247\305\275\021\314]=\317\004\235\275\274\304$>ueB=%E\304\275\006\306<\276\220\311\261\272\356\0314\275\007\316\003=\317r\357=\225\350L\273\270\200\224\274\215\2717=\257\301\262<S\024#=g\241\217=@\371\374\275\364\342\200\275u\234j=\027\317n=\363\364\006\274;,|=\036\230\347\275J\203\305\274\030\244\254\275\216R\373=\336m7;\272\236\220\275a\261\223\276w\r0=Z\274s\274\010T\212=E\227\'\276\3579\275\274\354\375z<\334\254\265<%\333\317<\312J3\275\227R\245\274\270\364\\\274lL\334\274Fk\234=\202/\243=\345\221\257=S\003\310\274\276\300\354\275\227e\010\275\341\323\037=\314\324\314=\022_\233\274\220\215b=\276\373\004>P\366i>\032\345\260\275w\001\255=u\315b\275\324P\035>\276\231\374\275\013\250\345=\224^\244=\013\235\001\275B\222\303\275\247-\347\274\264N9\274Q\242N\276\253>\240\275*\207b\275}\032\003>M\nP\276\310\216?\275^J\307=\332\333\261=`\223\350\274\332\020\304\275\216\232\323=\2243\'\275\n\275\312<_\2539\275\t\024\274<\212h\273\274\r\300\203\275\271K\226\275\230\200\005=\212\025\277<\246j\251\275[\230\232\2751o\247\275\317\212\263\275R\376\307=\313P\317\274\314R\312<\376\304\300<\331\307\352\275\267c\273=\004\304\020=\n\360\324\274-\344\000=\rO\241<8\343\345;i\222\305\275\016\323\325=$:,<\271\274\t>\334\254\205\275\272\372a\275\351\200;\274\010G\210\275\306e\350:)S\274\275\370\026\037=\177P\215<\353\374\274\274\224\263\240:\010h\206<8,3\276k8\315=\'\315\370\275\r\312\251=\307\244:\275>\360\225=O\245\'<\226\207\235=\315\204\303\275\251\222\303=j}(\275\023\271/\276h\361 >\320K\221=\177x\312;\325{\301=sQH\2750\223J\276\025\251\201\274$\363\361;\"\005D<\222\367\210\275\034G\264=\r\375\272<\267]@\275\035,\303;\312uI>\203\232\007\272\344q%\275\247\236\341=X\247D>}\251\003>F\203\235=0\315R=N\350\327\275]\0277\275\005\030\241=M\357g=B\260\030\275\347G\\=I\307c\275\347\211\000\275\004\265\t\275^c\024>\254\030\220\275\342 \025\275,W\205\275\2750\277=\022\320\356\274J;\322\274\024\332\206<\237\355\366<\014(\033\276\214\221\343=d\r\034>.\327\016\276\311Yp>\314o\361\275\213$\300\275G\232\022>\220\227\347<h\376h\275g\2150>\272\034\202\275J\252\254<\213\026.\275VCo>\030\255a\274\307P2\274\314LQ;o]\231\275\226\324W\274\367`\353\275\005\311f<\377#\221=\004-\030>Z\300\006\276T\272\004>\362S\250<\333&\207=\367?\032=\325\\\225\273\224?\003=\200\033|=\020pO=\226:\242=\242\371Z\274X\276\331\275JS\216\275}x\324\275\310>\300=\000\365\026\276\300#\334;?\325\351<Md\205<\336\360A=\031;\301=\303\314\353=6\376\211\274\300\336\227\271x,k\275aJ->\366\372v\275\201 >\276\300;k=SL\022=c\344\221\275?9\257\275\025\"\323\274\2646\347<\367\360\337;>\364\207;\302=y>\212N\231\275\352MU\275V\004\231<\377\334\321=\362\236\372=\275b\014\2758%\001\276\347\326+\276r\235\232\274\322P\315=\024\005\340\274N\032\220<B\\\335=6\335\305=\252\251j\275\366R$=c[\225\2744\244\345\274.\366\017=-l\210=\275H\231=\0042S\276\300\333\"\276l\343\216:\253\317&=F\367\177=\354\203\365<\361\306z\274$NH>\036\344_\273\277\251\366=\177$r=t\234\177\275\377\323\202=\351W#\2745\347\207\274\256f}=wF\020<\r\377\312=3\2130>\352\253\314;0\305\177\275\346\355\335=\203>e\276\226\321Z\275\226[\200;\331\266\307\274]\3545>U]x\2738\374\265\274\331\313\331\274>V\344\275\\\322)\276\272\006w\275\036\211\342\274\342\371\245<b\330*\276\034\013\313\275o\213\032>\2679\261=`\000\245\275d\244W=\200\342\206<s\371\366;\255C\237\275\256xA\275L\370\211=\246_e\275}&\001\276~\273\201\275\200\222\262\273\034M@=\014?\035>\231,\243<?\342,=[\306\337=\345*]\275\251\036\n\276J\360\020\276ON\251\274\367F\020\274\355\261#=&\017u\2756\232\247\274\021\257\017\276\365\311 =.\002\003\273\346\212\316\274\020\321\247=_\355\355\275\017\353\234\275\340,\255\275\005\336\021=\003\264\013\276^\206/>\222\002@\275\357\265k\275A^\225\275\232?\232\275\221S\245<\005Z\216\273\305\030\021\275E$\354=c`?\276cE\020=\360\314\215=_\274\007\275~\365\226\275\245\262\n>]\231!=\036\227\215=\233\273\177=\254a1<\3733\033\275V\023\376=d\027\275\274\325\"8=E\323\376\275\372\356X\276M\004\021>\327>\020\275\037tg=&\013\365\274\264\310\362=\244\023\362=!\232\206=\351\"\325=\376\201\361< \253\265\273\263\3147\275K\357H=\002l\302=\312\272\262\274\365\224O=\034\245->b}\372=\036\024(\276u\341f\275\270[\337<\300;4>i$*<-3\026\275\\\341G\2730\252\030\274\035\364.=\270(\314={\224\013=U\366\215<\261|9=\n\367\301\275\242\315\200\275q\357\021=\212\331w<\307`\322\275\251j\253<N\231\255\273\000T\n\276-\241\251<\356(*\272s\344J\274\333\353\020;\212\nk\275y\006\371=\321\254\013=\245\021\235\275$_T<\376\351\r\275\0202\372\275\213=\375<\252\325,\275)T<\276}\024\214\275\017`\231\275\247\260!:\014ut=\355\312%<\356\241\307=\361\r\002>\000\212\254=4\250\026>\242\033E=:\024\250<2\026\n\276D\2519\275\010\311\233\275\032#r\275\232\370\345;\327\021\224=R\267%>\007\243\242\275\355\'\235=$:\007\275\314\202(\276\224m\355<v\330?>n\024\006>\226/\027>\014\374\222\274\250\226}=\037\035a>0\366\234=\364\246\207<\024\007W\275\364\342\366\275\204\325\037>\037nS\275\023\034\364<o\031\010<\241{J<\010\260\235=m\310S=\205\013H>\224\034\004\275\223\242L<\013\302J\274\317-\237=\215\353\334\274\221\345\345\275h\"\367<5;\310\275\0314)=]L\036\275%\202|\276&Q\031\276\333\017\225=\342\302h=\375\324Z\275*\242\357\275\215\224\"=S\311\350\275\323{*\274\243\370\207=\314\025y<\310\230\373<s\262\216\274?Y\310\274\226\216\276\274\355\202(\275\360:\203=/\004\242=\322\272\306\275\374T\356\275\352\323\235;\021\256\r\276\025]\341<v\246\010\276z\362\274\275\317\206\303<*R\026=\347\243\203\274\274\265\222\275>\336E\275\313\246\322;\2635\033>g>\354\274\300\366\263=\273P&=I\300\336=\251%\206\275\2474\027>\210<\273\274\255\177\277\275m\365\343\274\354\270\211=\270Hc<\311\003\361=!\226\216\275\236\337:;\016^\325\275)\026\371<\226\243\226\274\t\325T\276\275\345\'<\226W\364=\242\374\377=\307?\375=0\345/=\352\375\211\275\363\314.=\"k\\\271S\3516=F\347]>\241Q\020>\346\317\230=\321J\231\275\224\255+\275\3544\245<\212\222:<G=\275=\334\203N\276\313\nv\274\200v\336<2\254\235\274\347\2350\2752\303F\275\253\236\343\275Ch<\275.%\224<\211\343M\275\221\016\252=\231\210\027\276\023\213\201\275.\357\327\275{\031\222<\033@\030\275\234\032w\275\242\301\353\275hl\312\274\305\373\337=\266\214\343\275\027\325\254=\'5\235\275\257\222\020<\234\303\366\275\216\301\002\276\246\253\224\275\316\335[\276\031\342\324\275`\275\224\275\265\207\023\275)\364 >\211<\"\276\366\244\004\276\210\334\306\274@\245\242<F)\017\275\035:\t\275\017\253#\274\024\017\035=\235\340D=\213r\245<L\3711\274\200\332\264\274\027\216\371\275\\\036\006\275\307\t6=\005Y\017\275\357\\\005\275\247,w=\031\215&>\005K\210=\335QD=\266\2121> =\274<\326=\032\276\211\033\244=\375\240\235\275\365\331\302\275\370\375)=+\031\265\275\327\007\317<\311\355y=(\374\271;/\226/\276\221~\267\274\253\240\254\275\006#K=\3118\r=?\254G<\024\277\270=\342\351\317<\304\341\234\275a\210\025=R$6\275\222 \301<\223\223\334\275\310\020#>\356\333/\276\246\2724\275x\254\203\275\213\353$>h\"\300\273\332+\014\2760\230\241\275\350y2=+\261\212\274\356[\325<\304\321\217\275\374\212u=\313\350\355<\262\321\002=\263\366\303\275\350UI=\221\213\033=\235\225\355<`\241~=\270\212\235=\376j\207\274OsQ\276\260\261\323\275fcc\275\036\037\361\273\316\277/>N\322\023\271\3171\303<\372\004\"\276\231\231\237=;`b>v \363\275\315\022\027>\322\252\021>\317\215\372<A\244\334<q^\242=K\246\345\272d\261\205=\235\003%\276\016.\t\275..\003\274\000\275\332=\333\225\332\275\350_\243\275k9\354;\034\311\373\275\r\232\217<BV\244<\037\256\243<\302[\'=QL:\276\017fz\275\327PV\275\t[\036;\202\254Z\275\335\\\262=U)\221\275f\301\242\274\371\2531=\366\365\022=\367\235\205<\225}\325<}\326\233=\3569`\275\252\203\">\335\343U\275 N\003\274\322O\021=\3003A\274\275D\211=\234\372P\275\246\210\316\275\260\237\234\275\3337\200\275f?f\274G\316V>\330\227\364\275C\265\200\275$d\247\274&\001g<\254J\376<\007a\372<l\007\333<\274\215\236=\324\270\002=,\275\255<\340\247\244=\3036X\275\0236\023\276\025\000\252=\350\254\334\273c\202j<\262\235\005>\006\246\321\275\226\370(>\032\376\305\2738\022N\276\327\310\256<psG\275p\355\">4Eq\275\251y_\2735\305\374=b\300\317=Y\013c>\307\373%>\311\266\213\275}\363h\275\017:>\276X|K=\376\364Y=\2266\026\274iz\235\275\321\213\252:/t\013>\377\034\256\275+&\r\276\365\317\307=L.\335\275(\267\203\274J\222\207\275\032\231\004\275H\351\242\275I\317\030<\205Z\000\275w\027\026>\346y\277=\240q\211\275p\317\315;\3163\303<\317T\230:\276,9>x\013\217\275\364\354\270\275\356\204\356\275z}\353\275\330^\237=\354\013\240=&\240B=\321\355T>h\301\335\274\314\272\337\275e\2452\275\355\016\336\275\322aN\275XR\225\274\310\326\016\274\373\323\375<:4\217\275\363O\256=\271;\324\2753\347w\275^\310j\275\211%\307<1!x\275\374\356\217\275\252\260i\275\241\035\027\274X\332\035<\221\202C\275R\007\212=j\370\027=-\020\251=)\212\337=\223+\002\276o\262e\274\225\025\216\275>\227\301\274\026\312\037>\363\323\215=\372\244\'\275jI\347\275\345\037 \276\3765\344\275\232\314T=s\345\211\276\367O\313= T\000\276aI\216<\004|\211=;\r\247\275\262\003\240\274\212;$>\250\276\017\276\342\313\202=\275\"l\275\260\316\027=k\207\225\275R\276\235:\355$\365=2\326\304=\033:\222=\303\305\234=SRI\275\263\030\222\274TI=<[\033\356<j\315\177=4e,=\302v\203<\361\214N\274[\376l\275\3063m<\321\345\001\276\243\243T\275\006\032\346=\311.\025\275\315E-\276\026\362v\275\n\024\333\275\362\216\310\274\233\206\200\275\325\031\005>\235\256\023=\221\312\201\275sa\201\275O\353Y>S\237\353\274\230\324\031=G%\300=3\245\002\275\335=\352\271\006\324\354=.\023\202=R\232q<S\002Y\275\321\342\354\275q\236)\273K`\032\276,N\307\275\322p\203\275\274\322L\275\307b\003\2760b\006>\340\274->\277\271\005= h\265\274\272\025#\275\t\251\217\275\366\361\242:\321\204\303\275\336\037\013>\026\034\324=\337\006\233=\353\303\302=\026pY<\010rN=p\304\313<Q\2523\276-\t\210=\211\371\033=\273\327\027>\317\342\203=\032:\305\273\361\342\354\273\266\236D<\213\224d<w\216\250;\n0K\275a\"\227\274{\301/\275\270\244\231=V|\325=\237! =[m-<\244\243M<\367o\202\274s\262\265\2747\023\235=\r\356\311\275\030L:\275s\206\'>\206\201\016\275|\244\375<z\360~=\215\355@=v\266\003>\362m\335=\202I+\275\364\277\002>{?\217\275\200\020\247\275\261A\337=\026J\037\275{\0325\275r-k\274\334\016\004=\236\200\346\275\n\252\215\275r7\327\274\177\035\375<D?\343<\361\207\351=W\342O>E\300\267=z\001\342<\252Q6=\301\315\006>\t\323v\275W\373{\275\365\324\344\275}0\r>Kk\231\274yyr\2756c\364\275\0312\260=\374y\014\275\267\372\267\275\030m&<\325\276\203\276\220\t\037>J\3057\273\317h\005\276b\200\211=>.\026\275\313\271\372\272Wi\333=J@\332\275k\254w<\023^\t>\251\3214=\245\\b>\267\267U<\023\261->#L\237\275\'\360\017>\310Ju<\341\367#\276\335\212\256=$O\370\275\031\\\223\274\245\257\275=Sk\215\275x\314\t=[\251\027\276\260\017\272=}\217\324\274\246\260\231\275\250\216&\275\241\335\250<o$\350=k0\307\275\\\325U\274\237\'J=\375\247Q=\365r\366=\346\213\000\274B\363\262=\276\001\355=\336\373\270<\244\007\357=\244\t\204=\021\302\022\276*K\346=\"@\n>\235\033R\271\217\215\3118\2114\025=\370\213W\275s\342;<\331\274\035\275f\326\311<\014\314\222\274\016\000\027=\275J\244=78\234=1\022H\274\346s8<\020:7>\313\370o\275K\277\323\275a\220M\27568.;\301L\307\275\356p\205\275\275\030\270\2758\216\204\275y\310\370\275=\030v=\232\254\327;\250\207\351=\212\005\260\275\r\021\371<)\360\237\275\031\316D>\275\220A<\022\231u<\356MQ=\306\357j\275\334c\240<\220\274n=O\374i\275\305q\314\275&\\\"=#J\221=\303.{\274?t\361=*YH\276\260\350\017>s\027D=\223\347\262<tY9>\266\330\205=G\177E=\245\337\014=\264m\310\273;\301V\275\213+\205\275l\311^<V\271\212<\010hP>\013\025=>\032\"5\275\227\322\370\274\301\371\004>\014\262\221<\210\346\253\275\372\326I;1h\341=\217\331\271\275\265=\237\274]h\307\275\315\3456\274=\322\326<q<(=`\3079> x^\273WT\020\275\276{\251<\243o\230=\004N\333\274\221\206\252=9\376\323;\n7p\275;\204\016\275B\366\344\273\266\'\356\275\314\302\260=\227I>=\213k\000=\272=U\275\303~\210\275x\241#\275\344\312\004=\211+T\275\2337\014\276\2754:=\356\214v=f\025\354\273\023.\327=^\270\024=V\345s\276\275\007\027\275\215\207z=\2222/>\017t\334=\327\312\307=\272\316\233<\201\006k=\227)o\276\332a\253;\344v\013\274\027\307\327\274\365\207\010<\245)\020\275\316\317\003>\212(\271=\307\344\200=\265q0\275\005\005\353\274= \310\275\266\265>=\000\223\014=\361:\376=,\354\n\276q\322\274\275\366\334\001\276\273\346\224=>\017<>\200\225\037<d}\226\274X\033\277=k\257o\276\033Q\n>\335\035x<+A&\275\236\266\271=M\"\227<(\003\251\275;\333\365\273]x\231\275FD\223=g\373a<&\023r\2741\033\202;\3060{\272\362\346{=\322O\n\276Vx6<\025\300\234= D\\>`Z\263=\267\275\222;i\342\203\274)GG>\234\254&=n{\001\276m\024\351=D\247\230\275ea\254\275\241}\251\274\254\322\026\275\300NH=\311\372T\276\202\347\214\275\315\266\275=\r\t\347<dW\207\274e?b><*\332\275wA\016;\247\252\267=\303\224:\276\336\0059\276\235\247\234\275\206\370Y<\325;h\275\306\233\262\275\320s\210=\254^\230\274\2260{<\016\211\357<In\034=\007\236\360=\030\210\220\274\300\307\031\276\316\017\332\274\r\306\313=\0175\347<\311O\330\275\216\007\261\275\374\033\216;n\265B>\344\233\200<\031V\272\275.\265\330\275\254\362\303=\r\251\231\275\232\202\006=\221\014F\275X\330\"\275\332:\030\275\351\320\312\275\216\030-</\nH>\205\214}\275\227=k=!0\346\275W}\024\275\023KW<K\373)\275SZJ\275\311\032\274\273%u\201=\005\303\216\275G\357]\274\005D\204=\323\2151\274\314\265F<\035\252%\276\313\252O\276g\342\242\275\202\363\021=[\005*>\344\374\312\275\311\270q<\330[\022>;\222\025>\360\306\r>\037,$\274\216:\023>\245\222\007\275X\372(\276\233\372\'\276\273.\006\275\330n\307=Fo\262\27448\270\273\267\027\225\275\217=\300<\205\2716=~\352\232\275\345\361|\275\376\212\311\275\227\372\000:\347\270\341<\241Y\352<r\327\336;K\313\235<e\256R\275H2\356\274V\266\350;u\307\264\275j\255?\274\267\303\013<\364\004\201\275`\275}\275\201#\034>\262z\356\275\313|\262=\033\243^\275\032 H<\017\177\222\275\022\254\267=\274\016=\275\234\302*\2753\216\t\275\244\263\005>\302a\342=7;\232\275\346\220\301<\276@\010\275\335\353\034=\007\300\'\275T@\203\275\014\244\302\275\262\241\265\273\277@\247;%\203\n\276]K*=\261\n\324\271K\367`>Qz\364<ja\367\275>\202\320\275\323\340\236<\252p >\243P\026=T\371>=\036<(>3s\333\275|\005\t\276\354\002\t=o\361\020\274\274\200\263\275\202\275\363=\212\214\250=\271\3516>E\376\030<\002\345)\273\202\225\226\2756\023\003\276Jt\306\275\021\\\035=Mt\375\275&\"O=\3325\266=\326z\027\276zA\344\274\026N\264<-\350\007=2!\027>\346\177\364=\276\246\230\274NZ\216=w4\310=J\037\325<\347z6>\013\211\313<`\363\020\275\313U!>\032\025\260=$\347\032>g(B;\256\276O=TT\313\272l\006(=\277\360\223\274\010I\212\275\014\207\321=A!\254=\370\007\241\275[\026\177\275b\031\245<\230\212!\274\366\nk=\313\257\365\275f\215\254<\320\'\300=\"\312l\275,\202\327=\260\221\022>f\001<=\022\356\276\2755\372H\275;\003\203=\013~\032\276\345Q\306\274\333\236m\275\002`\340;7\324\205=\254\251H\2756>t=$\006\237=\215&\235\274\201\357\300\275-\331[\276\324\334\236\274U\367&>\317\370.>e\330\200=6\320\275=HH\004\275\000\270\242;\2737B\275\260\216\313=\262\271\010=\333\322\'\274\037}\245=\025R\200=\227\206E\276v\031\201\2759&\233\275A:\313<\324\321\014\275X\276\313=H^\306\275\2071\374\275\266\013#<|\267\003>?=\267=5\371\242\273\365\203\025:\010\'\035=\277\203\'=\342\322\357; \\~=\256\247t=\243\2352\276\277\315\334\274\321\232q\274\303\313(<u\262\032>\223\330=\275\3464h<\266\306\251=%\237\263\275\262\266\r\275\022\"\331<\304d\034>\275;\366\275\002\223\242=\014\262Z=\266\320\226=<\225\007=\234\322\014\275xU%=\253\206?\275\347\277\206=A\200\307=5\266\t\275\353H\006=\365d\267\275^O\362=\201\'U\276\361\355f\276\n\332\335\275r\303?=\375\343\260=\036\035>:\017]b=gK\355\272\242\375\244<\372\275\"=\034a\337\274TX\202=x\276\000\276\333\316\217;\206yJ\275\"c\214\274\340\365\000\275\035\272\310=\214D\232=\226\330\217\275[3\256<\346\273\261\275\315\324W\274AK\331<\367\316\320<\306*[\275(\261\254\275\253\327\250=Z2:\276\337>&=\0256*>[\003\202\275\370\216\003>_#\232<\223\242\313<\033\372\206=\264]n=C\327\240=MD\364\273`\362[=\337\324k\275*\360X<\002x\024\274Duj>$K#=!mK\276\032\210^\275\260\361p\276\337\357\245\275\250r7\275 x8>\252\356\344\275\305\213\342\2756an<\234AO<E`\272=\310Y\222=\316\255\331\275\017\201\334;\245sb\275\027\022\217\275/U-=\226\351\356=\311b\010\274u\002\032\276\262\212\323\274\330\260\007>J\014T\275=:\332\275]\036\037\275\346-\005\276\345\007\254\274\337\273\344=4H\375\275\215`\237\275\220\204\335\274\3555\207\275\237\375\202\274\334p\004\276\330\366\320\275\352\244\375\274\315\330z=pW\320<F\262\242=?\026w\274\333T\">\353\241\216;\2745\370<\013n\016<(\216\312\274\307\230\026\276R\210\304<as\221\275\307K\253\275\003\261\017\276\026\201n=\312&\322\274\233!\204=\325X\267<\361\201\355= C\215<\214\240\233=\373M(\275\324\3664>\217\240S\275\337\367\352=\346|b\275\221S\233=\235S\251=\204\244\350\275?\001\035=ct\333\275\001\262\350\275{EK=z\250\355\275*%\360<\201\021C\275Z&\316<\312R\020>\302u\001>!\220\020\276@!\203\275\307\302\333\2747\277\202\275\244\230\274\275\302\032\031\275\224\016\027=xR\340\275\374Q\">tI\212\275*\353[>\206\177>=\367>\022\276;\033\023=\332\317\331;-\024\002=\324\304?\275\212\014\274\274\313,\n>\206\216\334\275\033\364\275\275m8\003=\014\272\240<\361P\224\275\201\275\001=\355UZ;\377\231<\275T\361\016=\351\372\204\274\2256\037\275@Z\267\273\366\202\233<\343\227\247<\207\013\t=\341\347\310\275\346~\346\275G(\020\275\250\001\313=\215\324\273;{\3646=gn\204\274\333\261\000;$\365\375\274\350WI\276`\321O=\3655\276=\352\273\251\275\324\215z=W\212\322\275\247\302\367\275\246\275\255=\237\214>>\223T\246\275\001\016\220\2751\236\224=\275C\253\275\007\223\333=S\355I\276O~K\275\343\207O\275\235C2\275\005\320=\276\255*\005\275\200i\351\275\271E@=\302q\224=\302X\330\275\rx\360<\326\231\266<\224\362\177\274-\214\005\274vY\215=\312\213F=\026R\223=\267K2>]\250\273=\206\232X\2751W\301=\235+\213\275\307\312(\276\363\021P\275\301\356\226=i\330\201\275\336\266\212\275\302W\000=\177\337\341<Y-\315\275\364\365\335=e3\310\275\265\367c\275t\335t<%\'I\276f1!\275\330\343\206=\"-\222=\336\314\332=\024\244\206\274f\325\234\275\366\246\250;\251\331\027>\216-\350\275\322\324\274;\364F+\275H\026\256<O{\206=\222I:>\2526\006\275\275)\021\276^)\212\275\001\334\370=\256r\223=\270\221:\276\332J\312<\212*z=;-\317\275Q\315K<\005I\252<"
      }
    }
  }
}
node {
  name: "lstm_3/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_3/recurrent_kernel/Assign"
  op: "Assign"
  input: "lstm_3/recurrent_kernel"
  input: "lstm_3/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_3/recurrent_kernel/read"
  op: "Identity"
  input: "lstm_3/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/recurrent_kernel"
      }
    }
  }
}
node {
  name: "lstm_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_3/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/concat"
  op: "ConcatV2"
  input: "lstm_3/Const"
  input: "lstm_3/Const_1"
  input: "lstm_3/Const_2"
  input: "lstm_3/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_3/bias/Assign"
  op: "Assign"
  input: "lstm_3/bias"
  input: "lstm_3/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_3/bias/read"
  op: "Identity"
  input: "lstm_3/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/bias"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice"
  op: "StridedSlice"
  input: "lstm_3/kernel/read"
  input: "lstm_3/strided_slice/stack"
  input: "lstm_3/strided_slice/stack_1"
  input: "lstm_3/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_1"
  op: "StridedSlice"
  input: "lstm_3/kernel/read"
  input: "lstm_3/strided_slice_1/stack"
  input: "lstm_3/strided_slice_1/stack_1"
  input: "lstm_3/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_2"
  op: "StridedSlice"
  input: "lstm_3/kernel/read"
  input: "lstm_3/strided_slice_2/stack"
  input: "lstm_3/strided_slice_2/stack_1"
  input: "lstm_3/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_3"
  op: "StridedSlice"
  input: "lstm_3/kernel/read"
  input: "lstm_3/strided_slice_3/stack"
  input: "lstm_3/strided_slice_3/stack_1"
  input: "lstm_3/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_4"
  op: "StridedSlice"
  input: "lstm_3/recurrent_kernel/read"
  input: "lstm_3/strided_slice_4/stack"
  input: "lstm_3/strided_slice_4/stack_1"
  input: "lstm_3/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_5"
  op: "StridedSlice"
  input: "lstm_3/recurrent_kernel/read"
  input: "lstm_3/strided_slice_5/stack"
  input: "lstm_3/strided_slice_5/stack_1"
  input: "lstm_3/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_6"
  op: "StridedSlice"
  input: "lstm_3/recurrent_kernel/read"
  input: "lstm_3/strided_slice_6/stack"
  input: "lstm_3/strided_slice_6/stack_1"
  input: "lstm_3/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_7"
  op: "StridedSlice"
  input: "lstm_3/recurrent_kernel/read"
  input: "lstm_3/strided_slice_7/stack"
  input: "lstm_3/strided_slice_7/stack_1"
  input: "lstm_3/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_8"
  op: "StridedSlice"
  input: "lstm_3/bias/read"
  input: "lstm_3/strided_slice_8/stack"
  input: "lstm_3/strided_slice_8/stack_1"
  input: "lstm_3/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_9"
  op: "StridedSlice"
  input: "lstm_3/bias/read"
  input: "lstm_3/strided_slice_9/stack"
  input: "lstm_3/strided_slice_9/stack_1"
  input: "lstm_3/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_10"
  op: "StridedSlice"
  input: "lstm_3/bias/read"
  input: "lstm_3/strided_slice_10/stack"
  input: "lstm_3/strided_slice_10/stack_1"
  input: "lstm_3/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_11"
  op: "StridedSlice"
  input: "lstm_3/bias/read"
  input: "lstm_3/strided_slice_11/stack"
  input: "lstm_3/strided_slice_11/stack_1"
  input: "lstm_3/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_3/zeros_like"
  op: "ZerosLike"
  input: "lstm_2/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/Sum"
  op: "Sum"
  input: "lstm_3/zeros_like"
  input: "lstm_3/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "lstm_3/ExpandDims"
  op: "ExpandDims"
  input: "lstm_3/Sum"
  input: "lstm_3/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/Tile"
  op: "Tile"
  input: "lstm_3/ExpandDims"
  input: "lstm_3/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/Tile_1/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/Tile_1"
  op: "Tile"
  input: "lstm_3/ExpandDims"
  input: "lstm_3/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/transpose"
  op: "Transpose"
  input: "lstm_2/transpose_1"
  input: "lstm_3/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/Shape"
  op: "Shape"
  input: "lstm_3/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/strided_slice_12/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_12/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_12/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_12"
  op: "StridedSlice"
  input: "lstm_3/Shape"
  input: "lstm_3/strided_slice_12/stack"
  input: "lstm_3/strided_slice_12/stack_1"
  input: "lstm_3/strided_slice_12/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_3/strided_slice_13/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_13/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_13/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/strided_slice_13"
  op: "StridedSlice"
  input: "lstm_3/transpose"
  input: "lstm_3/strided_slice_13/stack"
  input: "lstm_3/strided_slice_13/stack_1"
  input: "lstm_3/strided_slice_13/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_3/MatMul"
  op: "MatMul"
  input: "lstm_3/strided_slice_13"
  input: "lstm_3/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/MatMul_1"
  op: "MatMul"
  input: "lstm_3/strided_slice_13"
  input: "lstm_3/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/MatMul_2"
  op: "MatMul"
  input: "lstm_3/strided_slice_13"
  input: "lstm_3/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/MatMul_3"
  op: "MatMul"
  input: "lstm_3/strided_slice_13"
  input: "lstm_3/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/BiasAdd"
  op: "BiasAdd"
  input: "lstm_3/MatMul"
  input: "lstm_3/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_3/MatMul_1"
  input: "lstm_3/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_3/MatMul_2"
  input: "lstm_3/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_3/MatMul_3"
  input: "lstm_3/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/MatMul_4"
  op: "MatMul"
  input: "lstm_3/Tile"
  input: "lstm_3/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/add"
  op: "Add"
  input: "lstm_3/BiasAdd"
  input: "lstm_3/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_3/mul"
  op: "Mul"
  input: "lstm_3/mul/x"
  input: "lstm_3/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_3/add_1"
  op: "Add"
  input: "lstm_3/mul"
  input: "lstm_3/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_3/clip_by_value/Minimum"
  op: "Minimum"
  input: "lstm_3/add_1"
  input: "lstm_3/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/clip_by_value"
  op: "Maximum"
  input: "lstm_3/clip_by_value/Minimum"
  input: "lstm_3/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/MatMul_5"
  op: "MatMul"
  input: "lstm_3/Tile"
  input: "lstm_3/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/add_2"
  op: "Add"
  input: "lstm_3/BiasAdd_1"
  input: "lstm_3/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_3/mul_1"
  op: "Mul"
  input: "lstm_3/mul_1/x"
  input: "lstm_3/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_3/add_3"
  op: "Add"
  input: "lstm_3/mul_1"
  input: "lstm_3/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_3/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "lstm_3/add_3"
  input: "lstm_3/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/clip_by_value_1"
  op: "Maximum"
  input: "lstm_3/clip_by_value_1/Minimum"
  input: "lstm_3/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/mul_2"
  op: "Mul"
  input: "lstm_3/clip_by_value_1"
  input: "lstm_3/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/MatMul_6"
  op: "MatMul"
  input: "lstm_3/Tile"
  input: "lstm_3/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/add_4"
  op: "Add"
  input: "lstm_3/BiasAdd_2"
  input: "lstm_3/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/Tanh"
  op: "Tanh"
  input: "lstm_3/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/mul_3"
  op: "Mul"
  input: "lstm_3/clip_by_value"
  input: "lstm_3/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/add_5"
  op: "Add"
  input: "lstm_3/mul_2"
  input: "lstm_3/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/MatMul_7"
  op: "MatMul"
  input: "lstm_3/Tile"
  input: "lstm_3/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/add_6"
  op: "Add"
  input: "lstm_3/BiasAdd_3"
  input: "lstm_3/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/mul_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_3/mul_4"
  op: "Mul"
  input: "lstm_3/mul_4/x"
  input: "lstm_3/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_3/add_7"
  op: "Add"
  input: "lstm_3/mul_4"
  input: "lstm_3/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_3/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "lstm_3/add_7"
  input: "lstm_3/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/clip_by_value_2"
  op: "Maximum"
  input: "lstm_3/clip_by_value_2/Minimum"
  input: "lstm_3/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/Tanh_1"
  op: "Tanh"
  input: "lstm_3/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/mul_5"
  op: "Mul"
  input: "lstm_3/clip_by_value_2"
  input: "lstm_3/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/TensorArray"
  op: "TensorArrayV3"
  input: "lstm_3/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "lstm_3/TensorArray_1"
  op: "TensorArrayV3"
  input: "lstm_3/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "lstm_3/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "lstm_3/TensorArrayUnstack/Shape"
  input: "lstm_3/TensorArrayUnstack/strided_slice/stack"
  input: "lstm_3/TensorArrayUnstack/strided_slice/stack_1"
  input: "lstm_3/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/range"
  op: "Range"
  input: "lstm_3/TensorArrayUnstack/range/start"
  input: "lstm_3/TensorArrayUnstack/strided_slice"
  input: "lstm_3/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "lstm_3/TensorArray_1"
  input: "lstm_3/TensorArrayUnstack/range"
  input: "lstm_3/transpose"
  input: "lstm_3/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/transpose"
      }
    }
  }
}
node {
  name: "lstm_3/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/while/Enter"
  op: "Enter"
  input: "lstm_3/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/Enter_1"
  op: "Enter"
  input: "lstm_3/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/Enter_2"
  op: "Enter"
  input: "lstm_3/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/Enter_3"
  op: "Enter"
  input: "lstm_3/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/Merge"
  op: "Merge"
  input: "lstm_3/while/Enter"
  input: "lstm_3/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/while/Merge_1"
  op: "Merge"
  input: "lstm_3/while/Enter_1"
  input: "lstm_3/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Merge_2"
  op: "Merge"
  input: "lstm_3/while/Enter_2"
  input: "lstm_3/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Merge_3"
  op: "Merge"
  input: "lstm_3/while/Enter_3"
  input: "lstm_3/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Less"
  op: "Less"
  input: "lstm_3/while/Merge"
  input: "lstm_3/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/while/Less/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/LoopCond"
  op: "LoopCond"
  input: "lstm_3/while/Less"
}
node {
  name: "lstm_3/while/Switch"
  op: "Switch"
  input: "lstm_3/while/Merge"
  input: "lstm_3/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge"
      }
    }
  }
}
node {
  name: "lstm_3/while/Switch_1"
  op: "Switch"
  input: "lstm_3/while/Merge_1"
  input: "lstm_3/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_1"
      }
    }
  }
}
node {
  name: "lstm_3/while/Switch_2"
  op: "Switch"
  input: "lstm_3/while/Merge_2"
  input: "lstm_3/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_2"
      }
    }
  }
}
node {
  name: "lstm_3/while/Switch_3"
  op: "Switch"
  input: "lstm_3/while/Merge_3"
  input: "lstm_3/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_3"
      }
    }
  }
}
node {
  name: "lstm_3/while/Identity"
  op: "Identity"
  input: "lstm_3/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/while/Identity_1"
  op: "Identity"
  input: "lstm_3/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Identity_2"
  op: "Identity"
  input: "lstm_3/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Identity_3"
  op: "Identity"
  input: "lstm_3/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_3/while/TensorArrayReadV3/Enter"
  input: "lstm_3/while/Identity"
  input: "lstm_3/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "lstm_3/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/MatMul"
  op: "MatMul"
  input: "lstm_3/while/TensorArrayReadV3"
  input: "lstm_3/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/MatMul_1"
  op: "MatMul"
  input: "lstm_3/while/TensorArrayReadV3"
  input: "lstm_3/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul_1/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/MatMul_2"
  op: "MatMul"
  input: "lstm_3/while/TensorArrayReadV3"
  input: "lstm_3/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul_2/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/MatMul_3"
  op: "MatMul"
  input: "lstm_3/while/TensorArrayReadV3"
  input: "lstm_3/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul_3/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd"
  op: "BiasAdd"
  input: "lstm_3/while/MatMul"
  input: "lstm_3/while/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_3/while/MatMul_1"
  input: "lstm_3/while/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd_1/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_3/while/MatMul_2"
  input: "lstm_3/while/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd_2/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_3/while/MatMul_3"
  input: "lstm_3/while/BiasAdd_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_3/while/BiasAdd_3/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/MatMul_4"
  op: "MatMul"
  input: "lstm_3/while/Identity_2"
  input: "lstm_3/while/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul_4/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/add"
  op: "Add"
  input: "lstm_3/while/BiasAdd"
  input: "lstm_3/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/mul/x"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_3/while/mul"
  op: "Mul"
  input: "lstm_3/while/mul/x"
  input: "lstm_3/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/add_1/y"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_3/while/add_1"
  op: "Add"
  input: "lstm_3/while/mul"
  input: "lstm_3/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Const"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/while/Const_1"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_3/while/clip_by_value/Minimum"
  op: "Minimum"
  input: "lstm_3/while/add_1"
  input: "lstm_3/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/clip_by_value"
  op: "Maximum"
  input: "lstm_3/while/clip_by_value/Minimum"
  input: "lstm_3/while/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/MatMul_5"
  op: "MatMul"
  input: "lstm_3/while/Identity_2"
  input: "lstm_3/while/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul_5/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/add_2"
  op: "Add"
  input: "lstm_3/while/BiasAdd_1"
  input: "lstm_3/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/mul_1/x"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_3/while/mul_1"
  op: "Mul"
  input: "lstm_3/while/mul_1/x"
  input: "lstm_3/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/add_3/y"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_3/while/add_3"
  op: "Add"
  input: "lstm_3/while/mul_1"
  input: "lstm_3/while/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Const_2"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/while/Const_3"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_3/while/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "lstm_3/while/add_3"
  input: "lstm_3/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/clip_by_value_1"
  op: "Maximum"
  input: "lstm_3/while/clip_by_value_1/Minimum"
  input: "lstm_3/while/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/mul_2"
  op: "Mul"
  input: "lstm_3/while/clip_by_value_1"
  input: "lstm_3/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/MatMul_6"
  op: "MatMul"
  input: "lstm_3/while/Identity_2"
  input: "lstm_3/while/MatMul_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul_6/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/add_4"
  op: "Add"
  input: "lstm_3/while/BiasAdd_2"
  input: "lstm_3/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Tanh"
  op: "Tanh"
  input: "lstm_3/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/mul_3"
  op: "Mul"
  input: "lstm_3/while/clip_by_value"
  input: "lstm_3/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/add_5"
  op: "Add"
  input: "lstm_3/while/mul_2"
  input: "lstm_3/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/MatMul_7"
  op: "MatMul"
  input: "lstm_3/while/Identity_2"
  input: "lstm_3/while/MatMul_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_3/while/MatMul_7/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/add_6"
  op: "Add"
  input: "lstm_3/while/BiasAdd_3"
  input: "lstm_3/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/mul_4/x"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_3/while/mul_4"
  op: "Mul"
  input: "lstm_3/while/mul_4/x"
  input: "lstm_3/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/add_7/y"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_3/while/add_7"
  op: "Add"
  input: "lstm_3/while/mul_4"
  input: "lstm_3/while/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Const_4"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_3/while/Const_5"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_3/while/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "lstm_3/while/add_7"
  input: "lstm_3/while/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/clip_by_value_2"
  op: "Maximum"
  input: "lstm_3/while/clip_by_value_2/Minimum"
  input: "lstm_3/while/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Tanh_1"
  op: "Tanh"
  input: "lstm_3/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/mul_5"
  op: "Mul"
  input: "lstm_3/while/clip_by_value_2"
  input: "lstm_3/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "lstm_3/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "lstm_3/while/Identity"
  input: "lstm_3/while/mul_5"
  input: "lstm_3/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "lstm_3/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "lstm_3/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_3/while/add_8/y"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/while/add_8"
  op: "Add"
  input: "lstm_3/while/Identity"
  input: "lstm_3/while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/while/NextIteration"
  op: "NextIteration"
  input: "lstm_3/while/add_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/while/NextIteration_1"
  op: "NextIteration"
  input: "lstm_3/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/NextIteration_2"
  op: "NextIteration"
  input: "lstm_3/while/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/NextIteration_3"
  op: "NextIteration"
  input: "lstm_3/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Exit"
  op: "Exit"
  input: "lstm_3/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/while/Exit_1"
  op: "Exit"
  input: "lstm_3/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Exit_2"
  op: "Exit"
  input: "lstm_3/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/while/Exit_3"
  op: "Exit"
  input: "lstm_3/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "lstm_3/TensorArray"
  input: "lstm_3/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayStack/range"
  op: "Range"
  input: "lstm_3/TensorArrayStack/range/start"
  input: "lstm_3/TensorArrayStack/TensorArraySizeV3"
  input: "lstm_3/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_3/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "lstm_3/TensorArray"
  input: "lstm_3/TensorArrayStack/range"
  input: "lstm_3/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 32
        }
      }
    }
  }
}
node {
  name: "lstm_3/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_3/sub"
  op: "Sub"
  input: "lstm_3/while/Exit"
  input: "lstm_3/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_3/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_3/TensorArray"
  input: "lstm_3/sub"
  input: "lstm_3/while/Exit_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_3/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_3/transpose_1"
  op: "Transpose"
  input: "lstm_3/TensorArrayStack/TensorArrayGatherV3"
  input: "lstm_3/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dense_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "dense_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.19364917278289795
      }
    }
  }
}
node {
  name: "dense_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.19364917278289795
      }
    }
  }
}
node {
  name: "dense_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 9082993
    }
  }
}
node {
  name: "dense_1/random_uniform/sub"
  op: "Sub"
  input: "dense_1/random_uniform/max"
  input: "dense_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_uniform/mul"
  op: "Mul"
  input: "dense_1/random_uniform/RandomUniform"
  input: "dense_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_uniform"
  op: "Add"
  input: "dense_1/random_uniform/mul"
  input: "dense_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/kernel/Assign"
  op: "Assign"
  input: "dense_1/kernel"
  input: "dense_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/kernel/read"
  op: "Identity"
  input: "dense_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
}
node {
  name: "dense_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/bias/Assign"
  op: "Assign"
  input: "dense_1/bias"
  input: "dense_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/bias/read"
  op: "Identity"
  input: "dense_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
}
node {
  name: "dense_1/MatMul"
  op: "MatMul"
  input: "lstm_3/TensorArrayReadV3"
  input: "dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1/BiasAdd"
  op: "BiasAdd"
  input: "dense_1/MatMul"
  input: "dense_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_1/Tanh"
  op: "Tanh"
  input: "dense_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\006\000\000\000"
      }
    }
  }
}
node {
  name: "dense_2/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.21160368621349335
      }
    }
  }
}
node {
  name: "dense_2/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.21160368621349335
      }
    }
  }
}
node {
  name: "dense_2/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense_2/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 8489966
    }
  }
}
node {
  name: "dense_2/random_uniform/sub"
  op: "Sub"
  input: "dense_2/random_uniform/max"
  input: "dense_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/random_uniform/mul"
  op: "Mul"
  input: "dense_2/random_uniform/RandomUniform"
  input: "dense_2/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/random_uniform"
  op: "Add"
  input: "dense_2/random_uniform/mul"
  input: "dense_2/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_2/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_2/kernel/Assign"
  op: "Assign"
  input: "dense_2/kernel"
  input: "dense_2/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_2/kernel/read"
  op: "Identity"
  input: "dense_2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
}
node {
  name: "dense_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_2/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_2/bias/Assign"
  op: "Assign"
  input: "dense_2/bias"
  input: "dense_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_2/bias/read"
  op: "Identity"
  input: "dense_2/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
}
node {
  name: "dense_2/MatMul"
  op: "MatMul"
  input: "dense_1/Tanh"
  input: "dense_2/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_2/BiasAdd"
  op: "BiasAdd"
  input: "dense_2/MatMul"
  input: "dense_2/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_2/Softmax"
  op: "Softmax"
  input: "dense_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/iterations/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "Adam/iterations"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/iterations/Assign"
  op: "Assign"
  input: "Adam/iterations"
  input: "Adam/iterations/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/iterations/read"
  op: "Identity"
  input: "Adam/iterations"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
}
node {
  name: "Adam/lr/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "Adam/lr"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/lr/Assign"
  op: "Assign"
  input: "Adam/lr"
  input: "Adam/lr/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/lr/read"
  op: "Identity"
  input: "Adam/lr"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
}
node {
  name: "Adam/beta_1/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "Adam/beta_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/beta_1/Assign"
  op: "Assign"
  input: "Adam/beta_1"
  input: "Adam/beta_1/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/beta_1/read"
  op: "Identity"
  input: "Adam/beta_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
}
node {
  name: "Adam/beta_2/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "Adam/beta_2"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/beta_2/Assign"
  op: "Assign"
  input: "Adam/beta_2"
  input: "Adam/beta_2/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/beta_2/read"
  op: "Identity"
  input: "Adam/beta_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
}
node {
  name: "Adam/decay/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Adam/decay"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Adam/decay/Assign"
  op: "Assign"
  input: "Adam/decay"
  input: "Adam/decay/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/decay/read"
  op: "Identity"
  input: "Adam/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
}
node {
  name: "dense_2_target"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "dense_2_sample_weights"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/Sum"
  op: "Sum"
  input: "dense_2/Softmax"
  input: "loss/dense_2_loss/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "loss/dense_2_loss/truediv"
  op: "RealDiv"
  input: "dense_2/Softmax"
  input: "loss/dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/sub"
  op: "Sub"
  input: "loss/dense_2_loss/sub/x"
  input: "loss/dense_2_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/clip_by_value/Minimum"
  op: "Minimum"
  input: "loss/dense_2_loss/truediv"
  input: "loss/dense_2_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/clip_by_value"
  op: "Maximum"
  input: "loss/dense_2_loss/clip_by_value/Minimum"
  input: "loss/dense_2_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/Log"
  op: "Log"
  input: "loss/dense_2_loss/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/mul"
  op: "Mul"
  input: "dense_2_target"
  input: "loss/dense_2_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/Sum_1"
  op: "Sum"
  input: "loss/dense_2_loss/mul"
  input: "loss/dense_2_loss/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_2_loss/Neg"
  op: "Neg"
  input: "loss/dense_2_loss/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/Mean"
  op: "Mean"
  input: "loss/dense_2_loss/Neg"
  input: "loss/dense_2_loss/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_2_loss/mul_1"
  op: "Mul"
  input: "loss/dense_2_loss/Mean"
  input: "dense_2_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/NotEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/NotEqual"
  op: "NotEqual"
  input: "dense_2_sample_weights"
  input: "loss/dense_2_loss/NotEqual/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/Cast"
  op: "Cast"
  input: "loss/dense_2_loss/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "loss/dense_2_loss/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/Mean_1"
  op: "Mean"
  input: "loss/dense_2_loss/Cast"
  input: "loss/dense_2_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_2_loss/truediv_1"
  op: "RealDiv"
  input: "loss/dense_2_loss/mul_1"
  input: "loss/dense_2_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_2_loss/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/dense_2_loss/Mean_2"
  op: "Mean"
  input: "loss/dense_2_loss/truediv_1"
  input: "loss/dense_2_loss/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/mul"
  op: "Mul"
  input: "loss/mul/x"
  input: "loss/dense_2_loss/Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/acc/ArgMax/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax"
  op: "ArgMax"
  input: "dense_2_target"
  input: "metrics/acc/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/ArgMax_1/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/ArgMax_1"
  op: "ArgMax"
  input: "dense_2/Softmax"
  input: "metrics/acc/ArgMax_1/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Equal"
  op: "Equal"
  input: "metrics/acc/ArgMax"
  input: "metrics/acc/ArgMax_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "metrics/acc/Cast"
  op: "Cast"
  input: "metrics/acc/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "metrics/acc/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "metrics/acc/Mean"
  op: "Mean"
  input: "metrics/acc/Cast"
  input: "metrics/acc/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Fill"
  op: "Fill"
  input: "training/Adam/gradients/Shape"
  input: "training/Adam/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/f_count"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_1"
  op: "Enter"
  input: "training/Adam/gradients/f_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge"
  op: "Merge"
  input: "training/Adam/gradients/f_count_1"
  input: "training/Adam/gradients/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch"
  op: "Switch"
  input: "training/Adam/gradients/Merge"
  input: "lstm_3/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add/y"
  op: "Const"
  input: "^lstm_3/while/Identity"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add"
  op: "Add"
  input: "training/Adam/gradients/Switch:1"
  input: "training/Adam/gradients/Add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/Add"
  input: "^training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_4_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_1_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPushV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_2"
  op: "Exit"
  input: "training/Adam/gradients/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_1"
  op: "Enter"
  input: "training/Adam/gradients/f_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_1"
  op: "Merge"
  input: "training/Adam/gradients/b_count_1"
  input: "training/Adam/gradients/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/Merge_1"
  input: "training/Adam/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/b_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_2"
  op: "LoopCond"
  input: "training/Adam/gradients/GreaterEqual"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_1"
  op: "Switch"
  input: "training/Adam/gradients/Merge_1"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Sub"
  op: "Sub"
  input: "training/Adam/gradients/Switch_1:1"
  input: "training/Adam/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_1"
  op: "NextIteration"
  input: "training/Adam/gradients/Sub"
  input: "^training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_3"
  op: "Exit"
  input: "training/Adam/gradients/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_3"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_4"
  op: "Enter"
  input: "training/Adam/gradients/f_count_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_2"
  op: "Merge"
  input: "training/Adam/gradients/f_count_4"
  input: "training/Adam/gradients/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_2"
  op: "Switch"
  input: "training/Adam/gradients/Merge_2"
  input: "lstm_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add_1/y"
  op: "Const"
  input: "^lstm_2/while/Identity"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add_1"
  op: "Add"
  input: "training/Adam/gradients/Switch_2:1"
  input: "training/Adam/gradients/Add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_2"
  op: "NextIteration"
  input: "training/Adam/gradients/Add_1"
  input: "^training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_4_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_1_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPushV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_5"
  op: "Exit"
  input: "training/Adam/gradients/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_4"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_5"
  op: "Enter"
  input: "training/Adam/gradients/f_count_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_3"
  op: "Merge"
  input: "training/Adam/gradients/b_count_5"
  input: "training/Adam/gradients/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual_1"
  op: "GreaterEqual"
  input: "training/Adam/gradients/Merge_3"
  input: "training/Adam/gradients/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/b_count_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_6"
  op: "LoopCond"
  input: "training/Adam/gradients/GreaterEqual_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_3"
  op: "Switch"
  input: "training/Adam/gradients/Merge_3"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Sub_1"
  op: "Sub"
  input: "training/Adam/gradients/Switch_3:1"
  input: "training/Adam/gradients/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_3"
  op: "NextIteration"
  input: "training/Adam/gradients/Sub_1"
  input: "^training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_7"
  op: "Exit"
  input: "training/Adam/gradients/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_6"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_7"
  op: "Enter"
  input: "training/Adam/gradients/f_count_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_4"
  op: "Merge"
  input: "training/Adam/gradients/f_count_7"
  input: "training/Adam/gradients/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_4"
  op: "Switch"
  input: "training/Adam/gradients/Merge_4"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add_2/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Add_2"
  op: "Add"
  input: "training/Adam/gradients/Switch_4:1"
  input: "training/Adam/gradients/Add_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_4"
  op: "NextIteration"
  input: "training/Adam/gradients/Add_2"
  input: "^training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_4_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_1_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_grad/mul/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPushV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/f_count_8"
  op: "Exit"
  input: "training/Adam/gradients/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_8"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_9"
  op: "Enter"
  input: "training/Adam/gradients/f_count_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/Merge_5"
  op: "Merge"
  input: "training/Adam/gradients/b_count_9"
  input: "training/Adam/gradients/NextIteration_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual_2"
  op: "GreaterEqual"
  input: "training/Adam/gradients/Merge_5"
  input: "training/Adam/gradients/GreaterEqual_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/GreaterEqual_2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/b_count_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_10"
  op: "LoopCond"
  input: "training/Adam/gradients/GreaterEqual_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Switch_5"
  op: "Switch"
  input: "training/Adam/gradients/Merge_5"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/Sub_2"
  op: "Sub"
  input: "training/Adam/gradients/Switch_5:1"
  input: "training/Adam/gradients/GreaterEqual_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/NextIteration_5"
  op: "NextIteration"
  input: "training/Adam/gradients/Sub_2"
  input: "^training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/b_count_11"
  op: "Exit"
  input: "training/Adam/gradients/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/Fill"
  input: "loss/dense_2_loss/Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/mul_grad/Mul_1"
  op: "Mul"
  input: "training/Adam/gradients/Fill"
  input: "loss/mul/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/mul_grad/Mul_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Shape"
  op: "Shape"
  input: "loss/dense_2_loss/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Shape_1"
  op: "Shape"
  input: "loss/dense_2_loss/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Shape_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Prod"
  op: "Prod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Shape_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Prod_1"
  op: "Prod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Shape_2"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Prod_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Prod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Cast"
  op: "Cast"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/truediv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Tile"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Shape"
  op: "Shape"
  input: "loss/dense_2_loss/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/RealDiv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/truediv"
  input: "loss/dense_2_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Neg"
  op: "Neg"
  input: "loss/dense_2_loss/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/RealDiv_1"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Neg"
  input: "loss/dense_2_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/RealDiv_2"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/RealDiv_1"
  input: "loss/dense_2_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_2_grad/truediv"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/mul"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Sum_1"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Shape"
  op: "Shape"
  input: "loss/dense_2_loss/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Shape_1"
  op: "Shape"
  input: "dense_2_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Reshape"
  input: "dense_2_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/mul"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/mul_1"
  op: "Mul"
  input: "loss/dense_2_loss/Mean"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/mul_1"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Sum_1"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape"
  op: "Shape"
  input: "loss/dense_2_loss/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/add"
  op: "Add"
  input: "loss/dense_2_loss/Mean/reduction_indices"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/add"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/range"
  op: "Range"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/range/start"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Size"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/range"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/mod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/DynamicStitch"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_1_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape_2"
  op: "Shape"
  input: "loss/dense_2_loss/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape_3"
  op: "Shape"
  input: "loss/dense_2_loss/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Prod"
  op: "Prod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape_2"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Prod_1"
  op: "Prod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Shape_3"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum_1/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum_1"
  op: "Maximum"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Prod_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/floordiv_1"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Prod"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Cast"
  op: "Cast"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/truediv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Tile"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Mean"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Neg_grad/Neg"
  op: "Neg"
  input: "training/Adam/gradients/loss/dense_2_loss/Mean_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Neg"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Shape"
  op: "Shape"
  input: "loss/dense_2_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/add"
  op: "Add"
  input: "loss/dense_2_loss/Sum_1/reduction_indices"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/add"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/range"
  op: "Range"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/range/start"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Size"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Shape_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/range"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/mod"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/DynamicStitch"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/Neg_grad/Neg"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Shape"
  op: "Shape"
  input: "dense_2_target"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Shape_1"
  op: "Shape"
  input: "loss/dense_2_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Tile"
  input: "loss/dense_2_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/mul"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/mul_1"
  op: "Mul"
  input: "dense_2_target"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_1_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/mul_1"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Sum_1"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "loss/dense_2_loss/clip_by_value"
  input: "^training/Adam/gradients/loss/dense_2_loss/mul_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Log"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Log_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/dense_2_loss/mul_grad/Reshape_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Log"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape"
  op: "Shape"
  input: "loss/dense_2_loss/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/Log_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape_2"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "loss/dense_2_loss/clip_by_value/Minimum"
  input: "loss/dense_2_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/loss/dense_2_loss/Log_grad/mul"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/zeros"
  input: "training/Adam/gradients/loss/dense_2_loss/Log_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Select"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Select_1"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Sum_1"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "loss/dense_2_loss/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "loss/dense_2_loss/truediv"
  input: "loss/dense_2_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/zeros"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Select"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Select_1"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Shape"
  op: "Shape"
  input: "dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Shape_1"
  op: "Shape"
  input: "loss/dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Reshape"
  input: "loss/dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Neg"
  op: "Neg"
  input: "dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Neg"
  input: "loss/dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/RealDiv_1"
  input: "loss/dense_2_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/loss/dense_2_loss/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/mul"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Sum_1"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Shape"
  op: "Shape"
  input: "dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/add"
  op: "Add"
  input: "loss/dense_2_loss/Sum/reduction_indices"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/add"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/range"
  op: "Range"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/range/start"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Size"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Shape_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/range"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/mod"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/DynamicStitch"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Shape"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Reshape_1"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN"
  op: "AddN"
  input: "training/Adam/gradients/loss/dense_2_loss/truediv_grad/Reshape"
  input: "training/Adam/gradients/loss/dense_2_loss/Sum_grad/Tile"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_2_loss/truediv"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/Softmax_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/AddN"
  input: "dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/Softmax_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/Softmax"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/Softmax_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/dense_2/Softmax_grad/mul"
  input: "training/Adam/gradients/dense_2/Softmax_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/Softmax"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/Softmax_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/Softmax"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/Softmax_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/dense_2/Softmax_grad/Sum"
  input: "training/Adam/gradients/dense_2/Softmax_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/Softmax_grad/sub"
  op: "Sub"
  input: "training/Adam/gradients/AddN"
  input: "training/Adam/gradients/dense_2/Softmax_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/Softmax_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/dense_2/Softmax_grad/sub"
  input: "dense_2/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/Softmax"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/dense_2/Softmax_grad/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/dense_2/Softmax_grad/mul_1"
  input: "dense_2/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/dense_2/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dense_1/Tanh"
  input: "training/Adam/gradients/dense_2/Softmax_grad/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "dense_1/Tanh"
  input: "training/Adam/gradients/dense_2/MatMul_grad/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/Tanh"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/dense_1/Tanh_grad/TanhGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/dense_1/Tanh_grad/TanhGrad"
  input: "dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/dense_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "lstm_3/TensorArrayReadV3"
  input: "training/Adam/gradients/dense_1/Tanh_grad/TanhGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "lstm_3/TensorArray"
  input: "lstm_3/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray"
        s: "loc:@lstm_3/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "lstm_3/while/Exit_1"
  input: "^training/Adam/gradients/lstm_3/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray"
        s: "loc:@lstm_3/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "training/Adam/gradients/lstm_3/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "lstm_3/sub"
  input: "training/Adam/gradients/dense_1/MatMul_grad/MatMul"
  input: "training/Adam/gradients/lstm_3/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like"
  op: "ZerosLike"
  input: "lstm_3/while/Exit_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_1"
  op: "ZerosLike"
  input: "lstm_3/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Exit_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/Exit_1_grad/b_exit"
  input: "training/Adam/gradients/lstm_3/while/Switch_1_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/Exit_2_grad/b_exit"
  input: "training/Adam/gradients/lstm_3/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/Exit_3_grad/b_exit"
  input: "training/Adam/gradients/lstm_3/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/Switch_1_grad/b_switch"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/Switch_2_grad/b_switch"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/Switch_3_grad/b_switch"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/Merge_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/Merge_2_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Enter_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/Merge_3_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Enter_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/lstm_3/while/Merge_1_grad/Switch:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "lstm_3/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_3/while/Merge_1_grad/Switch:1"
  input: "^training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Identity"
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Identity"
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "lstm_3/while/Identity"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_4_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_1_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/mul_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/Shape"
  op: "Shape"
  input: "lstm_3/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/stack"
  op: "Pack"
  input: "lstm_3/Tile/multiples"
  input: "training/Adam/gradients/lstm_3/Tile_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Rank"
  op: "Rank"
  input: "training/Adam/gradients/lstm_3/Tile_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose/sub/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose/sub"
  op: "Sub"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Range"
  op: "Range"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Range/start"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose/sub_1"
  op: "Sub"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/sub"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_3/Tile_grad/stack"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/Tile_grad/transpose"
  input: "training/Adam/gradients/lstm_3/Tile_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_3/Tile_grad/range/start"
  input: "training/Adam/gradients/lstm_3/Tile_grad/Size"
  input: "training/Adam/gradients/lstm_3/Tile_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/Enter_2_grad/Exit"
  input: "training/Adam/gradients/lstm_3/Tile_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/Tile_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/Tile_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/Shape"
  op: "Shape"
  input: "lstm_3/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/stack"
  op: "Pack"
  input: "lstm_3/Tile_1/multiples"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Rank"
  op: "Rank"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/sub/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/sub"
  op: "Sub"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Range"
  op: "Range"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Range/start"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/sub_1"
  op: "Sub"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/sub"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/stack"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/transpose"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/range/start"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/Size"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/Enter_3_grad/Exit"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Tile_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_1"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/while/Merge_2_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/AddN_1"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Tanh_1"
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Tanh_1"
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/Enter"
  input: "lstm_3/while/Tanh_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/AddN_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/Enter"
  input: "lstm_3/while/clip_by_value_2"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul_1"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_2"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/Tile_grad/Sum"
  input: "training/Adam/gradients/lstm_3/Tile_1_grad/Sum"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/ExpandDims_grad/Shape"
  op: "Shape"
  input: "lstm_3/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/AddN_2"
  input: "training/Adam/gradients/lstm_3/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/clip_by_value_2/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Shape_2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/Enter"
  input: "lstm_3/while/clip_by_value_2/Minimum"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/zeros"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Select_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/mul/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Tanh_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/Merge_1_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Shape"
  op: "Shape"
  input: "lstm_3/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/add"
  op: "Add"
  input: "lstm_3/Sum/reduction_indices"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/lstm_3/Sum_grad/add"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_3/Sum_grad/range/start"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Size"
  input: "training/Adam/gradients/lstm_3/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Shape_1"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/lstm_3/Sum_grad/range"
  input: "training/Adam/gradients/lstm_3/Sum_grad/mod"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Shape"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/lstm_3/Sum_grad/DynamicStitch"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Shape"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/ExpandDims_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/lstm_3/Sum_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  input: "lstm_3/while/add_7"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_3"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/while/Merge_3_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/AddN_3"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/AddN_3"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_7_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Identity_3"
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Identity_3"
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/Enter"
  input: "lstm_3/while/Identity_3"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/Enter"
  input: "lstm_3/while/clip_by_value_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/mul_1"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Tanh"
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Tanh"
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/Enter"
  input: "lstm_3/while/Tanh"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/Enter"
  input: "lstm_3/while/clip_by_value"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul_1"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/Shape"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/Enter"
  input: "lstm_3/while/add_6"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_3/while/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/mul_1"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/clip_by_value_1/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Shape_2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/Enter"
  input: "lstm_3/while/clip_by_value_1/Minimum"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/zeros"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Select_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Shape_2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/Enter"
  input: "lstm_3/while/clip_by_value/Minimum"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/zeros"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Select_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/mul/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Tanh"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/BiasAdd_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_6_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  input: "lstm_3/while/add_3"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/mul_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  input: "lstm_3/while/add_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Identity_2"
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Identity_2"
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/Enter"
  input: "lstm_3/while/Identity_2"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
        s: "loc:@lstm_3/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
        s: "loc:@lstm_3/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/Enter"
  input: "lstm_3/while/TensorArrayReadV3"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/Shape"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/Enter"
  input: "lstm_3/while/add_2"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_3/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/mul_1"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/Shape"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul/Enter"
  input: "lstm_3/while/add"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_3/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/mul_1"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_11_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_11_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_11_grad/Shape"
  input: "lstm_3/strided_slice_11/stack"
  input: "lstm_3/strided_slice_11/stack_1"
  input: "lstm_3/strided_slice_11/stack_2"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_11"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_7_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_7_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_7_grad/Shape"
  input: "lstm_3/strided_slice_7/stack"
  input: "lstm_3/strided_slice_7/stack_1"
  input: "lstm_3/strided_slice_7/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_7"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/Shape"
  op: "Shape"
  input: "lstm_3/while/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/Shape_1"
  op: "Shape"
  input: "lstm_3/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Shape"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Shape_1"
  input: "^training/Adam/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Sum"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_3/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Sum_1"
  input: "training/Adam/gradients/lstm_3/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_10_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_10_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_10_grad/Shape"
  input: "lstm_3/strided_slice_10/stack"
  input: "lstm_3/strided_slice_10/stack_1"
  input: "lstm_3/strided_slice_10/stack_2"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_10"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_6_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_6_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_6_grad/Shape"
  input: "lstm_3/strided_slice_6/stack"
  input: "lstm_3/strided_slice_6/stack_1"
  input: "lstm_3/strided_slice_6/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_6"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_3_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_3_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_3_grad/Shape"
  input: "lstm_3/strided_slice_3/stack"
  input: "lstm_3/strided_slice_3/stack_1"
  input: "lstm_3/strided_slice_3/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_3"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_2_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_2_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_2_grad/Shape"
  input: "lstm_3/strided_slice_2/stack"
  input: "lstm_3/strided_slice_2/stack_1"
  input: "lstm_3/strided_slice_2/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_2"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Reshape"
  input: "training/Adam/gradients/lstm_3/while/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_3/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_3/while/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_4"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/while/MatMul_7_grad/MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_6_grad/MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5_grad/MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_9_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_9_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_9_grad/Shape"
  input: "lstm_3/strided_slice_9/stack"
  input: "lstm_3/strided_slice_9/stack_1"
  input: "lstm_3/strided_slice_9/stack_2"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_9"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_5_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_5_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_5_grad/Shape"
  input: "lstm_3/strided_slice_5/stack"
  input: "lstm_3/strided_slice_5/stack_1"
  input: "lstm_3/strided_slice_5/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_5/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_5"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_5"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/while/MatMul_3_grad/MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_2_grad/MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1_grad/MatMul"
  input: "training/Adam/gradients/lstm_3/while/MatMul_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3"
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "lstm_3/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3"
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3"
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3"
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/AddN_5"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_8_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_8_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_8_grad/Shape"
  input: "lstm_3/strided_slice_8/stack"
  input: "lstm_3/strided_slice_8/stack_1"
  input: "lstm_3/strided_slice_8/stack_2"
  input: "training/Adam/gradients/lstm_3/while/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_8"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_4_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_4_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_4_grad/Shape"
  input: "lstm_3/strided_slice_4/stack"
  input: "lstm_3/strided_slice_4/stack_1"
  input: "lstm_3/strided_slice_4/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_4/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_4"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_1_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_1_grad/Shape"
  input: "lstm_3/strided_slice_1/stack"
  input: "lstm_3/strided_slice_1/stack_1"
  input: "lstm_3/strided_slice_1/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_3/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/strided_slice_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_grad/Shape"
  input: "lstm_3/strided_slice/stack"
  input: "lstm_3/strided_slice/stack_1"
  input: "lstm_3/strided_slice/stack_2"
  input: "training/Adam/gradients/lstm_3/while/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_6"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/strided_slice_11_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_10_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_9_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_8_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_11"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_7"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/strided_slice_7_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_6_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_5_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_4_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "lstm_3/TensorArray_1"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray_1"
        s: "loc:@lstm_3/transpose"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_3/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^training/Adam/gradients/lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/TensorArray_1"
        s: "loc:@lstm_3/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "training/Adam/gradients/lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "lstm_3/TensorArrayUnstack/range"
  input: "training/Adam/gradients/lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/transpose"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_8"
  op: "AddN"
  input: "training/Adam/gradients/lstm_3/strided_slice_3_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_2_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_1_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_3/strided_slice_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/strided_slice_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "lstm_3/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_3/transpose_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_3/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "training/Adam/gradients/lstm_3/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "lstm_2/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/transpose_1_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_3/transpose_grad/transpose"
  input: "training/Adam/gradients/lstm_2/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "lstm_2/TensorArray"
  input: "lstm_2/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "lstm_2/while/Exit_1"
  input: "^training/Adam/gradients/lstm_2/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "training/Adam/gradients/lstm_2/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "lstm_2/TensorArrayStack/range"
  input: "training/Adam/gradients/lstm_2/transpose_1_grad/transpose"
  input: "training/Adam/gradients/lstm_2/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_2"
  op: "ZerosLike"
  input: "lstm_2/while/Exit_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_3"
  op: "ZerosLike"
  input: "lstm_2/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Exit_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/Exit_1_grad/b_exit"
  input: "training/Adam/gradients/lstm_2/while/Switch_1_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/Exit_2_grad/b_exit"
  input: "training/Adam/gradients/lstm_2/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/Exit_3_grad/b_exit"
  input: "training/Adam/gradients/lstm_2/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/Switch_1_grad/b_switch"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/Switch_2_grad/b_switch"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/Switch_3_grad/b_switch"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/Merge_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/Merge_2_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Enter_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/Merge_3_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Enter_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/lstm_2/while/Merge_1_grad/Switch:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "lstm_2/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_2/while/Merge_1_grad/Switch:1"
  input: "^training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Identity"
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Identity"
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "lstm_2/while/Identity"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_4_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_1_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/mul_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/Shape"
  op: "Shape"
  input: "lstm_2/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/stack"
  op: "Pack"
  input: "lstm_2/Tile/multiples"
  input: "training/Adam/gradients/lstm_2/Tile_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Rank"
  op: "Rank"
  input: "training/Adam/gradients/lstm_2/Tile_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose/sub/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose/sub"
  op: "Sub"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Range"
  op: "Range"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Range/start"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose/sub_1"
  op: "Sub"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/sub"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_2/Tile_grad/stack"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/Tile_grad/transpose"
  input: "training/Adam/gradients/lstm_2/Tile_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_2/Tile_grad/range/start"
  input: "training/Adam/gradients/lstm_2/Tile_grad/Size"
  input: "training/Adam/gradients/lstm_2/Tile_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/Enter_2_grad/Exit"
  input: "training/Adam/gradients/lstm_2/Tile_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/Tile_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/Tile_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/Shape"
  op: "Shape"
  input: "lstm_2/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/stack"
  op: "Pack"
  input: "lstm_2/Tile_1/multiples"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/Shape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Rank"
  op: "Rank"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/sub/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/sub"
  op: "Sub"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Range"
  op: "Range"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Range/start"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Rank"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/sub_1"
  op: "Sub"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/sub"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/stack"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/transpose"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/range/start"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/Size"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/Enter_3_grad/Exit"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Tile_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_9"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/while/Merge_2_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/AddN_9"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Tanh_1"
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Tanh_1"
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/Enter"
  input: "lstm_2/while/Tanh_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/AddN_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/Enter"
  input: "lstm_2/while/clip_by_value_2"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul_1"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_10"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/Tile_grad/Sum"
  input: "training/Adam/gradients/lstm_2/Tile_1_grad/Sum"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Tile"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/ExpandDims_grad/Shape"
  op: "Shape"
  input: "lstm_2/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/ExpandDims"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/AddN_10"
  input: "training/Adam/gradients/lstm_2/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/ExpandDims"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/clip_by_value_2/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Shape_2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/Enter"
  input: "lstm_2/while/clip_by_value_2/Minimum"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/zeros"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Select_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/mul/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Tanh_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/Merge_1_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Shape"
  op: "Shape"
  input: "lstm_2/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/add"
  op: "Add"
  input: "lstm_2/Sum/reduction_indices"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/mod"
  op: "FloorMod"
  input: "training/Adam/gradients/lstm_2/Sum_grad/add"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/range"
  op: "Range"
  input: "training/Adam/gradients/lstm_2/Sum_grad/range/start"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Size"
  input: "training/Adam/gradients/lstm_2/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Fill"
  op: "Fill"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Shape_1"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "training/Adam/gradients/lstm_2/Sum_grad/range"
  input: "training/Adam/gradients/lstm_2/Sum_grad/mod"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Shape"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Maximum"
  op: "Maximum"
  input: "training/Adam/gradients/lstm_2/Sum_grad/DynamicStitch"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Shape"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/ExpandDims_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/lstm_2/Sum_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/Sum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  input: "lstm_2/while/add_7"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_11"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/while/Merge_3_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/AddN_11"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/AddN_11"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_7_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Identity_3"
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Identity_3"
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/Enter"
  input: "lstm_2/while/Identity_3"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/Enter"
  input: "lstm_2/while/clip_by_value_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/mul_1"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Tanh"
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Tanh"
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/Enter"
  input: "lstm_2/while/Tanh"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/Enter"
  input: "lstm_2/while/clip_by_value"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul_1"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/Shape"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/Enter"
  input: "lstm_2/while/add_6"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_2/while/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/mul_1"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/clip_by_value_1/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Shape_2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/Enter"
  input: "lstm_2/while/clip_by_value_1/Minimum"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/zeros"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Select_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Shape_2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/Enter"
  input: "lstm_2/while/clip_by_value/Minimum"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/zeros"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Select_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/mul/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Tanh"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/BiasAdd_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_6_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  input: "lstm_2/while/add_3"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/mul_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  input: "lstm_2/while/add_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Identity_2"
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Identity_2"
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/Enter"
  input: "lstm_2/while/Identity_2"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
        s: "loc:@lstm_2/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
        s: "loc:@lstm_2/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/Enter"
  input: "lstm_2/while/TensorArrayReadV3"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/Shape"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/Enter"
  input: "lstm_2/while/add_2"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_2/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/mul_1"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/Shape"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul/Enter"
  input: "lstm_2/while/add"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_2/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/mul_1"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_11_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_11_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_11_grad/Shape"
  input: "lstm_2/strided_slice_11/stack"
  input: "lstm_2/strided_slice_11/stack_1"
  input: "lstm_2/strided_slice_11/stack_2"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_11"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_7_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_7_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_7_grad/Shape"
  input: "lstm_2/strided_slice_7/stack"
  input: "lstm_2/strided_slice_7/stack_1"
  input: "lstm_2/strided_slice_7/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_7"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/Shape"
  op: "Shape"
  input: "lstm_2/while/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/Shape_1"
  op: "Shape"
  input: "lstm_2/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Shape"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Shape_1"
  input: "^training/Adam/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Sum"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_2/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Sum_1"
  input: "training/Adam/gradients/lstm_2/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_10_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_10_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_10_grad/Shape"
  input: "lstm_2/strided_slice_10/stack"
  input: "lstm_2/strided_slice_10/stack_1"
  input: "lstm_2/strided_slice_10/stack_2"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_10"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_6_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_6_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_6_grad/Shape"
  input: "lstm_2/strided_slice_6/stack"
  input: "lstm_2/strided_slice_6/stack_1"
  input: "lstm_2/strided_slice_6/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_6"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_3_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_3_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_3_grad/Shape"
  input: "lstm_2/strided_slice_3/stack"
  input: "lstm_2/strided_slice_3/stack_1"
  input: "lstm_2/strided_slice_3/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_3"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_2_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_2_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_2_grad/Shape"
  input: "lstm_2/strided_slice_2/stack"
  input: "lstm_2/strided_slice_2/stack_1"
  input: "lstm_2/strided_slice_2/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_2"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Reshape"
  input: "training/Adam/gradients/lstm_2/while/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_2/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_2/while/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_12"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/while/MatMul_7_grad/MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_6_grad/MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5_grad/MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_9_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_9_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_9_grad/Shape"
  input: "lstm_2/strided_slice_9/stack"
  input: "lstm_2/strided_slice_9/stack_1"
  input: "lstm_2/strided_slice_9/stack_2"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_9"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_5_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_5_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_5_grad/Shape"
  input: "lstm_2/strided_slice_5/stack"
  input: "lstm_2/strided_slice_5/stack_1"
  input: "lstm_2/strided_slice_5/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_5/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_5"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_13"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/while/MatMul_3_grad/MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_2_grad/MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1_grad/MatMul"
  input: "training/Adam/gradients/lstm_2/while/MatMul_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3"
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "lstm_2/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3"
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3"
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3"
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/AddN_13"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_8_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_8_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_8_grad/Shape"
  input: "lstm_2/strided_slice_8/stack"
  input: "lstm_2/strided_slice_8/stack_1"
  input: "lstm_2/strided_slice_8/stack_2"
  input: "training/Adam/gradients/lstm_2/while/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_8"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/AddN_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_4_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_4_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_4_grad/Shape"
  input: "lstm_2/strided_slice_4/stack"
  input: "lstm_2/strided_slice_4/stack_1"
  input: "lstm_2/strided_slice_4/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_4/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_4"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_1_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_1_grad/Shape"
  input: "lstm_2/strided_slice_1/stack"
  input: "lstm_2/strided_slice_1/stack_1"
  input: "lstm_2/strided_slice_1/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_2/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/strided_slice_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_grad/Shape"
  input: "lstm_2/strided_slice/stack"
  input: "lstm_2/strided_slice/stack_1"
  input: "lstm_2/strided_slice/stack_2"
  input: "training/Adam/gradients/lstm_2/while/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_14"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/strided_slice_11_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_10_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_9_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_8_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_11"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_15"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/strided_slice_7_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_6_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_5_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_4_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "lstm_2/TensorArray_1"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray_1"
        s: "loc:@lstm_2/transpose"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^training/Adam/gradients/lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/TensorArray_1"
        s: "loc:@lstm_2/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "training/Adam/gradients/lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "lstm_2/TensorArrayUnstack/range"
  input: "training/Adam/gradients/lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/transpose"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_16"
  op: "AddN"
  input: "training/Adam/gradients/lstm_2/strided_slice_3_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_2_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_1_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_2/strided_slice_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/strided_slice_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "lstm_2/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_2/transpose_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_2/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "training/Adam/gradients/lstm_2/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/transpose"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "lstm_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/transpose_1_grad/transpose"
  op: "Transpose"
  input: "training/Adam/gradients/lstm_2/transpose_grad/transpose"
  input: "training/Adam/gradients/lstm_1/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/transpose_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "lstm_1/TensorArray"
  input: "lstm_1/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "lstm_1/while/Exit_1"
  input: "^training/Adam/gradients/lstm_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "training/Adam/gradients/lstm_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "lstm_1/TensorArrayStack/range"
  input: "training/Adam/gradients/lstm_1/transpose_1_grad/transpose"
  input: "training/Adam/gradients/lstm_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_4"
  op: "ZerosLike"
  input: "lstm_1/while/Exit_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/zeros_like_5"
  op: "ZerosLike"
  input: "lstm_1/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "training/Adam/gradients/zeros_like_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/Exit_1_grad/b_exit"
  input: "training/Adam/gradients/lstm_1/while/Switch_1_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/Exit_2_grad/b_exit"
  input: "training/Adam/gradients/lstm_1/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/Exit_3_grad/b_exit"
  input: "training/Adam/gradients/lstm_1/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/Switch_1_grad/b_switch"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/Switch_2_grad/b_switch"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/Switch_3_grad/b_switch"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/Merge_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Enter_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/Merge_2_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Enter_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/Merge_3_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Enter_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/Adam/gradients/lstm_1/while/Merge_1_grad/Switch:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/Adam/gradients"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "lstm_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/Adam/gradients/lstm_1/while/Merge_1_grad/Switch:1"
  input: "^training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "lstm_1/while/Identity"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_4_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_1_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/mul_grad/mul/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_17"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/while/Merge_2_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/AddN_17"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh_1"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh_1"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/Enter"
  input: "lstm_1/while/Tanh_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/AddN_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/Enter"
  input: "lstm_1/while/clip_by_value_2"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value_2/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape_2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Enter"
  input: "lstm_1/while/clip_by_value_2/Minimum"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/zeros"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Select_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/mul/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/Merge_1_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Enter"
  input: "lstm_1/while/add_7"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_18"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/while/Merge_3_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/AddN_18"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/AddN_18"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_7_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_3"
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_3"
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/Enter"
  input: "lstm_1/while/Identity_3"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/Enter"
  input: "lstm_1/while/clip_by_value_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh"
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh"
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/Enter"
  input: "lstm_1/while/Tanh"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/Enter"
  input: "lstm_1/while/clip_by_value"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Shape"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/Enter"
  input: "lstm_1/while/add_6"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_1/while/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value_1/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape_2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Enter"
  input: "lstm_1/while/clip_by_value_1/Minimum"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/zeros"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Select_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape_2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Enter"
  input: "lstm_1/while/clip_by_value/Minimum"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/GreaterEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/zeros"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Select_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/mul/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/BiasAdd_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  input: "lstm_1/while/add_3"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/mul_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  input: "lstm_1/while/add_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Select"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Select_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/Tanh_grad/TanhGrad"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_2"
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_2"
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/Enter"
  input: "lstm_1/while/Identity_2"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/Shape_1"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
        s: "loc:@lstm_1/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
        s: "loc:@lstm_1/while/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/Enter"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Shape"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/Enter"
  input: "lstm_1/while/add_2"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_1/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/Shape"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Shape"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul/Enter"
  input: "lstm_1/while/add"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul_1"
  op: "Mul"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul_1/Const"
  input: "training/Adam/gradients/lstm_1/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/mul_1/Const"
  op: "Const"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/mul_1"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_6/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_11_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_11_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_11_grad/Shape"
  input: "lstm_1/strided_slice_11/stack"
  input: "lstm_1/strided_slice_11/stack_1"
  input: "lstm_1/strided_slice_11/stack_2"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_7_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_7_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_7_grad/Shape"
  input: "lstm_1/strided_slice_7/stack"
  input: "lstm_1/strided_slice_7/stack_1"
  input: "lstm_1/strided_slice_7/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_1_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Enter"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Shape"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/Enter_1"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Shape_1"
  input: "^training/Adam/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/Adam/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Sum"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/lstm_1/while/mul_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Sum_1"
  input: "training/Adam/gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_10_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_10_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_10_grad/Shape"
  input: "lstm_1/strided_slice_10/stack"
  input: "lstm_1/strided_slice_10/stack_1"
  input: "lstm_1/strided_slice_10/stack_2"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_6_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_6_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_6_grad/Shape"
  input: "lstm_1/strided_slice_6/stack"
  input: "lstm_1/strided_slice_6/stack_1"
  input: "lstm_1/strided_slice_6/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_3_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_3_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_3_grad/Shape"
  input: "lstm_1/strided_slice_3/stack"
  input: "lstm_1/strided_slice_3/stack_1"
  input: "lstm_1/strided_slice_3/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Reshape_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_2_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_2_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_2_grad/Shape"
  input: "lstm_1/strided_slice_2/stack"
  input: "lstm_1/strided_slice_2/stack_1"
  input: "lstm_1/strided_slice_2/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Reshape"
  input: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPopV2"
  input: "training/Adam/gradients/lstm_1/while/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_19"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/while/MatMul_7_grad/MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_6_grad/MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5_grad/MatMul"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_9_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_9_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_9_grad/Shape"
  input: "lstm_1/strided_slice_9/stack"
  input: "lstm_1/strided_slice_9/stack_1"
  input: "lstm_1/strided_slice_9/stack_2"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_5_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_5_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_5_grad/Shape"
  input: "lstm_1/strided_slice_5/stack"
  input: "lstm_1/strided_slice_5/stack_1"
  input: "lstm_1/strided_slice_5/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_5/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/Adam/gradients/lstm_1/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_1"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_2"
  input: "training/Adam/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/Add"
  op: "Add"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/Switch:1"
  input: "training/Adam/gradients/lstm_1/while/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_8_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_8_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_8_grad/Shape"
  input: "lstm_1/strided_slice_8/stack"
  input: "lstm_1/strided_slice_8/stack_1"
  input: "lstm_1/strided_slice_8/stack_2"
  input: "training/Adam/gradients/lstm_1/while/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/Adam/gradients/AddN_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_4_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_4_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_4_grad/Shape"
  input: "lstm_1/strided_slice_4/stack"
  input: "lstm_1/strided_slice_4/stack_1"
  input: "lstm_1/strided_slice_4/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_4/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_1_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_1_grad/Shape"
  input: "lstm_1/strided_slice_1/stack"
  input: "lstm_1/strided_slice_1/stack_1"
  input: "lstm_1/strided_slice_1/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/lstm_1/strided_slice_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_grad/Shape"
  input: "lstm_1/strided_slice/stack"
  input: "lstm_1/strided_slice/stack_1"
  input: "lstm_1/strided_slice/stack_2"
  input: "training/Adam/gradients/lstm_1/while/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_20"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/strided_slice_11_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_10_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_9_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_8_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_11"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_21"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/strided_slice_7_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_6_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_5_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_4_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_7"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/AddN_22"
  op: "AddN"
  input: "training/Adam/gradients/lstm_1/strided_slice_3_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_2_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_1_grad/StridedSliceGrad"
  input: "training/Adam/gradients/lstm_1/strided_slice_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_3"
      }
    }
  }
}
node {
  name: "training/Adam/AssignAdd/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/AssignAdd"
  op: "AssignAdd"
  input: "Adam/iterations"
  input: "training/Adam/AssignAdd/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Cast"
  op: "Cast"
  input: "Adam/iterations/read"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "training/Adam/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/add"
  op: "Add"
  input: "training/Adam/Cast"
  input: "training/Adam/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Pow"
  op: "Pow"
  input: "Adam/beta_2/read"
  input: "training/Adam/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub"
  op: "Sub"
  input: "training/Adam/sub/x"
  input: "training/Adam/Pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value/Minimum"
  op: "Minimum"
  input: "training/Adam/sub"
  input: "training/Adam/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value"
  op: "Maximum"
  input: "training/Adam/clip_by_value/Minimum"
  input: "training/Adam/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt"
  op: "Sqrt"
  input: "training/Adam/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Pow_1"
  op: "Pow"
  input: "Adam/beta_1/read"
  input: "training/Adam/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_1"
  op: "Sub"
  input: "training/Adam/sub_1/x"
  input: "training/Adam/Pow_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv"
  op: "RealDiv"
  input: "training/Adam/Sqrt"
  input: "training/Adam/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul"
  op: "Mul"
  input: "Adam/lr/read"
  input: "training/Adam/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros"
  op: "Fill"
  input: "training/Adam/zeros/shape_as_tensor"
  input: "training/Adam/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable/Assign"
  op: "Assign"
  input: "training/Adam/Variable"
  input: "training/Adam/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable/read"
  op: "Identity"
  input: "training/Adam/Variable"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_1/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_1"
  op: "Fill"
  input: "training/Adam/zeros_1/shape_as_tensor"
  input: "training/Adam/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_1/Assign"
  op: "Assign"
  input: "training/Adam/Variable_1"
  input: "training/Adam/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_1/read"
  op: "Identity"
  input: "training/Adam/Variable_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_2/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "training/Adam/zeros_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_2"
  op: "Fill"
  input: "training/Adam/zeros_2/shape_as_tensor"
  input: "training/Adam/zeros_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_2"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_2/Assign"
  op: "Assign"
  input: "training/Adam/Variable_2"
  input: "training/Adam/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_2/read"
  op: "Identity"
  input: "training/Adam/Variable_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_3/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_3"
  op: "Fill"
  input: "training/Adam/zeros_3/shape_as_tensor"
  input: "training/Adam/zeros_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_3"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_3/Assign"
  op: "Assign"
  input: "training/Adam/Variable_3"
  input: "training/Adam/zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_3/read"
  op: "Identity"
  input: "training/Adam/Variable_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_4/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_4"
  op: "Fill"
  input: "training/Adam/zeros_4/shape_as_tensor"
  input: "training/Adam/zeros_4/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_4"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_4/Assign"
  op: "Assign"
  input: "training/Adam/Variable_4"
  input: "training/Adam/zeros_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_4/read"
  op: "Identity"
  input: "training/Adam/Variable_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_5/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/zeros_5/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_5"
  op: "Fill"
  input: "training/Adam/zeros_5/shape_as_tensor"
  input: "training/Adam/zeros_5/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_5"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_5/Assign"
  op: "Assign"
  input: "training/Adam/Variable_5"
  input: "training/Adam/zeros_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_5/read"
  op: "Identity"
  input: "training/Adam/Variable_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_6/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_6/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_6"
  op: "Fill"
  input: "training/Adam/zeros_6/shape_as_tensor"
  input: "training/Adam/zeros_6/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_6"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_6/Assign"
  op: "Assign"
  input: "training/Adam/Variable_6"
  input: "training/Adam/zeros_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_6/read"
  op: "Identity"
  input: "training/Adam/Variable_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_7/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_7/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_7"
  op: "Fill"
  input: "training/Adam/zeros_7/shape_as_tensor"
  input: "training/Adam/zeros_7/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_7"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_7/Assign"
  op: "Assign"
  input: "training/Adam/Variable_7"
  input: "training/Adam/zeros_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_7/read"
  op: "Identity"
  input: "training/Adam/Variable_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_8/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/zeros_8/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_8"
  op: "Fill"
  input: "training/Adam/zeros_8/shape_as_tensor"
  input: "training/Adam/zeros_8/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_8"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_8/Assign"
  op: "Assign"
  input: "training/Adam/Variable_8"
  input: "training/Adam/zeros_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_8/read"
  op: "Identity"
  input: "training/Adam/Variable_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_9/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_9/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_9"
  op: "Fill"
  input: "training/Adam/zeros_9/shape_as_tensor"
  input: "training/Adam/zeros_9/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_9"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_9/Assign"
  op: "Assign"
  input: "training/Adam/Variable_9"
  input: "training/Adam/zeros_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_9/read"
  op: "Identity"
  input: "training/Adam/Variable_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_10/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/zeros_10/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_10"
  op: "Fill"
  input: "training/Adam/zeros_10/shape_as_tensor"
  input: "training/Adam/zeros_10/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_10"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_10/Assign"
  op: "Assign"
  input: "training/Adam/Variable_10"
  input: "training/Adam/zeros_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_10/read"
  op: "Identity"
  input: "training/Adam/Variable_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_11/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\006\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_11/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_11"
  op: "Fill"
  input: "training/Adam/zeros_11/shape_as_tensor"
  input: "training/Adam/zeros_11/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_11"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_11/Assign"
  op: "Assign"
  input: "training/Adam/Variable_11"
  input: "training/Adam/zeros_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_11/read"
  op: "Identity"
  input: "training/Adam/Variable_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_12/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "training/Adam/zeros_12/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_12"
  op: "Fill"
  input: "training/Adam/zeros_12/shape_as_tensor"
  input: "training/Adam/zeros_12/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_12"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_12/Assign"
  op: "Assign"
  input: "training/Adam/Variable_12"
  input: "training/Adam/zeros_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_12/read"
  op: "Identity"
  input: "training/Adam/Variable_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_13/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_13/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_13"
  op: "Fill"
  input: "training/Adam/zeros_13/shape_as_tensor"
  input: "training/Adam/zeros_13/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_13"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_13/Assign"
  op: "Assign"
  input: "training/Adam/Variable_13"
  input: "training/Adam/zeros_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_13/read"
  op: "Identity"
  input: "training/Adam/Variable_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_14/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_14/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_14"
  op: "Fill"
  input: "training/Adam/zeros_14/shape_as_tensor"
  input: "training/Adam/zeros_14/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_14"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_14/Assign"
  op: "Assign"
  input: "training/Adam/Variable_14"
  input: "training/Adam/zeros_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_14/read"
  op: "Identity"
  input: "training/Adam/Variable_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_15/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "training/Adam/zeros_15/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_15"
  op: "Fill"
  input: "training/Adam/zeros_15/shape_as_tensor"
  input: "training/Adam/zeros_15/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_15"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_15/Assign"
  op: "Assign"
  input: "training/Adam/Variable_15"
  input: "training/Adam/zeros_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_15/read"
  op: "Identity"
  input: "training/Adam/Variable_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_16/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_16/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_16"
  op: "Fill"
  input: "training/Adam/zeros_16/shape_as_tensor"
  input: "training/Adam/zeros_16/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_16"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_16/Assign"
  op: "Assign"
  input: "training/Adam/Variable_16"
  input: "training/Adam/zeros_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_16/read"
  op: "Identity"
  input: "training/Adam/Variable_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_17/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_17/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_17"
  op: "Fill"
  input: "training/Adam/zeros_17/shape_as_tensor"
  input: "training/Adam/zeros_17/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_17"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_17/Assign"
  op: "Assign"
  input: "training/Adam/Variable_17"
  input: "training/Adam/zeros_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_17/read"
  op: "Identity"
  input: "training/Adam/Variable_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_18/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "training/Adam/zeros_18/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_18"
  op: "Fill"
  input: "training/Adam/zeros_18/shape_as_tensor"
  input: "training/Adam/zeros_18/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_18"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_18/Assign"
  op: "Assign"
  input: "training/Adam/Variable_18"
  input: "training/Adam/zeros_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_18/read"
  op: "Identity"
  input: "training/Adam/Variable_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_19/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_19/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_19"
  op: "Fill"
  input: "training/Adam/zeros_19/shape_as_tensor"
  input: "training/Adam/zeros_19/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_19"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_19/Assign"
  op: "Assign"
  input: "training/Adam/Variable_19"
  input: "training/Adam/zeros_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_19/read"
  op: "Identity"
  input: "training/Adam/Variable_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_20/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_20/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_20"
  op: "Fill"
  input: "training/Adam/zeros_20/shape_as_tensor"
  input: "training/Adam/zeros_20/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_20"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_20/Assign"
  op: "Assign"
  input: "training/Adam/Variable_20"
  input: "training/Adam/zeros_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_20/read"
  op: "Identity"
  input: "training/Adam/Variable_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_21/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/zeros_21/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_21"
  op: "Fill"
  input: "training/Adam/zeros_21/shape_as_tensor"
  input: "training/Adam/zeros_21/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_21"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_21/Assign"
  op: "Assign"
  input: "training/Adam/Variable_21"
  input: "training/Adam/zeros_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_21/read"
  op: "Identity"
  input: "training/Adam/Variable_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_22/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_22/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_22"
  op: "Fill"
  input: "training/Adam/zeros_22/shape_as_tensor"
  input: "training/Adam/zeros_22/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_22"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_22/Assign"
  op: "Assign"
  input: "training/Adam/Variable_22"
  input: "training/Adam/zeros_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_22"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_22/read"
  op: "Identity"
  input: "training/Adam/Variable_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_22"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_23/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "training/Adam/zeros_23/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_23"
  op: "Fill"
  input: "training/Adam/zeros_23/shape_as_tensor"
  input: "training/Adam/zeros_23/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_23"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_23/Assign"
  op: "Assign"
  input: "training/Adam/Variable_23"
  input: "training/Adam/zeros_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_23"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_23/read"
  op: "Identity"
  input: "training/Adam/Variable_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_23"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_24/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\200\000\000\000\006\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_24/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_24"
  op: "Fill"
  input: "training/Adam/zeros_24/shape_as_tensor"
  input: "training/Adam/zeros_24/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_24"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_24/Assign"
  op: "Assign"
  input: "training/Adam/Variable_24"
  input: "training/Adam/zeros_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_24"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_24/read"
  op: "Identity"
  input: "training/Adam/Variable_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_24"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_25/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 6
      }
    }
  }
}
node {
  name: "training/Adam/zeros_25/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_25"
  op: "Fill"
  input: "training/Adam/zeros_25/shape_as_tensor"
  input: "training/Adam/zeros_25/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_25"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_25/Assign"
  op: "Assign"
  input: "training/Adam/Variable_25"
  input: "training/Adam/zeros_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_25"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_25/read"
  op: "Identity"
  input: "training/Adam/Variable_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_25"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_26/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_26/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_26"
  op: "Fill"
  input: "training/Adam/zeros_26/shape_as_tensor"
  input: "training/Adam/zeros_26/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_26"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_26/Assign"
  op: "Assign"
  input: "training/Adam/Variable_26"
  input: "training/Adam/zeros_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_26"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_26/read"
  op: "Identity"
  input: "training/Adam/Variable_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_26"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_27/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_27/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_27"
  op: "Fill"
  input: "training/Adam/zeros_27/shape_as_tensor"
  input: "training/Adam/zeros_27/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_27"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_27/Assign"
  op: "Assign"
  input: "training/Adam/Variable_27"
  input: "training/Adam/zeros_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_27"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_27/read"
  op: "Identity"
  input: "training/Adam/Variable_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_27"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_28/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_28/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_28"
  op: "Fill"
  input: "training/Adam/zeros_28/shape_as_tensor"
  input: "training/Adam/zeros_28/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_28"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_28/Assign"
  op: "Assign"
  input: "training/Adam/Variable_28"
  input: "training/Adam/zeros_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_28"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_28/read"
  op: "Identity"
  input: "training/Adam/Variable_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_28"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_29/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_29/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_29"
  op: "Fill"
  input: "training/Adam/zeros_29/shape_as_tensor"
  input: "training/Adam/zeros_29/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_29"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_29/Assign"
  op: "Assign"
  input: "training/Adam/Variable_29"
  input: "training/Adam/zeros_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_29"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_29/read"
  op: "Identity"
  input: "training/Adam/Variable_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_29"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_30/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_30/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_30"
  op: "Fill"
  input: "training/Adam/zeros_30/shape_as_tensor"
  input: "training/Adam/zeros_30/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_30"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_30/Assign"
  op: "Assign"
  input: "training/Adam/Variable_30"
  input: "training/Adam/zeros_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_30"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_30/read"
  op: "Identity"
  input: "training/Adam/Variable_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_30"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_31/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_31/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_31"
  op: "Fill"
  input: "training/Adam/zeros_31/shape_as_tensor"
  input: "training/Adam/zeros_31/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_31"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_31/Assign"
  op: "Assign"
  input: "training/Adam/Variable_31"
  input: "training/Adam/zeros_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_31"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_31/read"
  op: "Identity"
  input: "training/Adam/Variable_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_31"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_32/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_32/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_32"
  op: "Fill"
  input: "training/Adam/zeros_32/shape_as_tensor"
  input: "training/Adam/zeros_32/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_32"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_32/Assign"
  op: "Assign"
  input: "training/Adam/Variable_32"
  input: "training/Adam/zeros_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_32"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_32/read"
  op: "Identity"
  input: "training/Adam/Variable_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_32"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_33/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_33/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_33"
  op: "Fill"
  input: "training/Adam/zeros_33/shape_as_tensor"
  input: "training/Adam/zeros_33/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_33"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_33/Assign"
  op: "Assign"
  input: "training/Adam/Variable_33"
  input: "training/Adam/zeros_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_33"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_33/read"
  op: "Identity"
  input: "training/Adam/Variable_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_33"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_34/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_34/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_34"
  op: "Fill"
  input: "training/Adam/zeros_34/shape_as_tensor"
  input: "training/Adam/zeros_34/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_34"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_34/Assign"
  op: "Assign"
  input: "training/Adam/Variable_34"
  input: "training/Adam/zeros_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_34"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_34/read"
  op: "Identity"
  input: "training/Adam/Variable_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_34"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_35/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_35/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_35"
  op: "Fill"
  input: "training/Adam/zeros_35/shape_as_tensor"
  input: "training/Adam/zeros_35/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_35"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_35/Assign"
  op: "Assign"
  input: "training/Adam/Variable_35"
  input: "training/Adam/zeros_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_35"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_35/read"
  op: "Identity"
  input: "training/Adam/Variable_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_35"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_36/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_36/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_36"
  op: "Fill"
  input: "training/Adam/zeros_36/shape_as_tensor"
  input: "training/Adam/zeros_36/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_36"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_36/Assign"
  op: "Assign"
  input: "training/Adam/Variable_36"
  input: "training/Adam/zeros_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_36"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_36/read"
  op: "Identity"
  input: "training/Adam/Variable_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_36"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_37/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_37/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_37"
  op: "Fill"
  input: "training/Adam/zeros_37/shape_as_tensor"
  input: "training/Adam/zeros_37/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_37"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_37/Assign"
  op: "Assign"
  input: "training/Adam/Variable_37"
  input: "training/Adam/zeros_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_37"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_37/read"
  op: "Identity"
  input: "training/Adam/Variable_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_37"
      }
    }
  }
}
node {
  name: "training/Adam/zeros_38/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/zeros_38/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/zeros_38"
  op: "Fill"
  input: "training/Adam/zeros_38/shape_as_tensor"
  input: "training/Adam/zeros_38/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/Variable_38"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/Adam/Variable_38/Assign"
  op: "Assign"
  input: "training/Adam/Variable_38"
  input: "training/Adam/zeros_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_38"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Variable_38/read"
  op: "Identity"
  input: "training/Adam/Variable_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_38"
      }
    }
  }
}
node {
  name: "training/Adam/mul_1"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_2"
  op: "Sub"
  input: "training/Adam/sub_2/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_2"
  op: "Mul"
  input: "training/Adam/sub_2"
  input: "training/Adam/gradients/AddN_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_1"
  op: "Add"
  input: "training/Adam/mul_1"
  input: "training/Adam/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_3"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_13/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_3"
  op: "Sub"
  input: "training/Adam/sub_3/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square"
  op: "Square"
  input: "training/Adam/gradients/AddN_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_4"
  op: "Mul"
  input: "training/Adam/sub_3"
  input: "training/Adam/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_2"
  op: "Add"
  input: "training/Adam/mul_3"
  input: "training/Adam/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_5"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "training/Adam/add_2"
  input: "training/Adam/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_1"
  op: "Maximum"
  input: "training/Adam/clip_by_value_1/Minimum"
  input: "training/Adam/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_1"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_3"
  op: "Add"
  input: "training/Adam/Sqrt_1"
  input: "training/Adam/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_1"
  op: "RealDiv"
  input: "training/Adam/mul_5"
  input: "training/Adam/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_4"
  op: "Sub"
  input: "lstm_1/kernel/read"
  input: "training/Adam/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign"
  op: "Assign"
  input: "training/Adam/Variable"
  input: "training/Adam/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_1"
  op: "Assign"
  input: "training/Adam/Variable_13"
  input: "training/Adam/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_2"
  op: "Assign"
  input: "lstm_1/kernel"
  input: "training/Adam/sub_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_6"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_5/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_5"
  op: "Sub"
  input: "training/Adam/sub_5/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_7"
  op: "Mul"
  input: "training/Adam/sub_5"
  input: "training/Adam/gradients/AddN_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_4"
  op: "Add"
  input: "training/Adam/mul_6"
  input: "training/Adam/mul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_8"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_14/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_6"
  op: "Sub"
  input: "training/Adam/sub_6/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_1"
  op: "Square"
  input: "training/Adam/gradients/AddN_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_9"
  op: "Mul"
  input: "training/Adam/sub_6"
  input: "training/Adam/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_5"
  op: "Add"
  input: "training/Adam/mul_8"
  input: "training/Adam/mul_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_10"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "training/Adam/add_5"
  input: "training/Adam/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_2"
  op: "Maximum"
  input: "training/Adam/clip_by_value_2/Minimum"
  input: "training/Adam/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_2"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_6/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_6"
  op: "Add"
  input: "training/Adam/Sqrt_2"
  input: "training/Adam/add_6/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_2"
  op: "RealDiv"
  input: "training/Adam/mul_10"
  input: "training/Adam/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_7"
  op: "Sub"
  input: "lstm_1/recurrent_kernel/read"
  input: "training/Adam/truediv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_3"
  op: "Assign"
  input: "training/Adam/Variable_1"
  input: "training/Adam/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_4"
  op: "Assign"
  input: "training/Adam/Variable_14"
  input: "training/Adam/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_5"
  op: "Assign"
  input: "lstm_1/recurrent_kernel"
  input: "training/Adam/sub_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_11"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_8/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_8"
  op: "Sub"
  input: "training/Adam/sub_8/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_12"
  op: "Mul"
  input: "training/Adam/sub_8"
  input: "training/Adam/gradients/AddN_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_7"
  op: "Add"
  input: "training/Adam/mul_11"
  input: "training/Adam/mul_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_13"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_15/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_9/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_9"
  op: "Sub"
  input: "training/Adam/sub_9/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_2"
  op: "Square"
  input: "training/Adam/gradients/AddN_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_14"
  op: "Mul"
  input: "training/Adam/sub_9"
  input: "training/Adam/Square_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_8"
  op: "Add"
  input: "training/Adam/mul_13"
  input: "training/Adam/mul_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_15"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_3/Minimum"
  op: "Minimum"
  input: "training/Adam/add_8"
  input: "training/Adam/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_3"
  op: "Maximum"
  input: "training/Adam/clip_by_value_3/Minimum"
  input: "training/Adam/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_3"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_9/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_9"
  op: "Add"
  input: "training/Adam/Sqrt_3"
  input: "training/Adam/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_3"
  op: "RealDiv"
  input: "training/Adam/mul_15"
  input: "training/Adam/add_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_10"
  op: "Sub"
  input: "lstm_1/bias/read"
  input: "training/Adam/truediv_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_6"
  op: "Assign"
  input: "training/Adam/Variable_2"
  input: "training/Adam/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_7"
  op: "Assign"
  input: "training/Adam/Variable_15"
  input: "training/Adam/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_8"
  op: "Assign"
  input: "lstm_1/bias"
  input: "training/Adam/sub_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_16"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_3/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_11/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_11"
  op: "Sub"
  input: "training/Adam/sub_11/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_17"
  op: "Mul"
  input: "training/Adam/sub_11"
  input: "training/Adam/gradients/AddN_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_10"
  op: "Add"
  input: "training/Adam/mul_16"
  input: "training/Adam/mul_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_18"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_16/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_12/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_12"
  op: "Sub"
  input: "training/Adam/sub_12/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_3"
  op: "Square"
  input: "training/Adam/gradients/AddN_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_19"
  op: "Mul"
  input: "training/Adam/sub_12"
  input: "training/Adam/Square_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_11"
  op: "Add"
  input: "training/Adam/mul_18"
  input: "training/Adam/mul_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_20"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_4/Minimum"
  op: "Minimum"
  input: "training/Adam/add_11"
  input: "training/Adam/Const_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_4"
  op: "Maximum"
  input: "training/Adam/clip_by_value_4/Minimum"
  input: "training/Adam/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_4"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_12/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_12"
  op: "Add"
  input: "training/Adam/Sqrt_4"
  input: "training/Adam/add_12/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_4"
  op: "RealDiv"
  input: "training/Adam/mul_20"
  input: "training/Adam/add_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_13"
  op: "Sub"
  input: "lstm_2/kernel/read"
  input: "training/Adam/truediv_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_9"
  op: "Assign"
  input: "training/Adam/Variable_3"
  input: "training/Adam/add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_10"
  op: "Assign"
  input: "training/Adam/Variable_16"
  input: "training/Adam/add_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_11"
  op: "Assign"
  input: "lstm_2/kernel"
  input: "training/Adam/sub_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_21"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_4/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_14/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_14"
  op: "Sub"
  input: "training/Adam/sub_14/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_22"
  op: "Mul"
  input: "training/Adam/sub_14"
  input: "training/Adam/gradients/AddN_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_13"
  op: "Add"
  input: "training/Adam/mul_21"
  input: "training/Adam/mul_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_23"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_17/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_15/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_15"
  op: "Sub"
  input: "training/Adam/sub_15/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_4"
  op: "Square"
  input: "training/Adam/gradients/AddN_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_24"
  op: "Mul"
  input: "training/Adam/sub_15"
  input: "training/Adam/Square_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_14"
  op: "Add"
  input: "training/Adam/mul_23"
  input: "training/Adam/mul_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_25"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_5/Minimum"
  op: "Minimum"
  input: "training/Adam/add_14"
  input: "training/Adam/Const_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_5"
  op: "Maximum"
  input: "training/Adam/clip_by_value_5/Minimum"
  input: "training/Adam/Const_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_5"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_15/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_15"
  op: "Add"
  input: "training/Adam/Sqrt_5"
  input: "training/Adam/add_15/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_5"
  op: "RealDiv"
  input: "training/Adam/mul_25"
  input: "training/Adam/add_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_16"
  op: "Sub"
  input: "lstm_2/recurrent_kernel/read"
  input: "training/Adam/truediv_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_12"
  op: "Assign"
  input: "training/Adam/Variable_4"
  input: "training/Adam/add_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_13"
  op: "Assign"
  input: "training/Adam/Variable_17"
  input: "training/Adam/add_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_14"
  op: "Assign"
  input: "lstm_2/recurrent_kernel"
  input: "training/Adam/sub_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_26"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_5/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_17/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_17"
  op: "Sub"
  input: "training/Adam/sub_17/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_27"
  op: "Mul"
  input: "training/Adam/sub_17"
  input: "training/Adam/gradients/AddN_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_16"
  op: "Add"
  input: "training/Adam/mul_26"
  input: "training/Adam/mul_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_28"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_18/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_18/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_18"
  op: "Sub"
  input: "training/Adam/sub_18/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_5"
  op: "Square"
  input: "training/Adam/gradients/AddN_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_29"
  op: "Mul"
  input: "training/Adam/sub_18"
  input: "training/Adam/Square_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_17"
  op: "Add"
  input: "training/Adam/mul_28"
  input: "training/Adam/mul_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_30"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_12"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_13"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_6/Minimum"
  op: "Minimum"
  input: "training/Adam/add_17"
  input: "training/Adam/Const_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_6"
  op: "Maximum"
  input: "training/Adam/clip_by_value_6/Minimum"
  input: "training/Adam/Const_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_6"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_18/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_18"
  op: "Add"
  input: "training/Adam/Sqrt_6"
  input: "training/Adam/add_18/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_6"
  op: "RealDiv"
  input: "training/Adam/mul_30"
  input: "training/Adam/add_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_19"
  op: "Sub"
  input: "lstm_2/bias/read"
  input: "training/Adam/truediv_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_15"
  op: "Assign"
  input: "training/Adam/Variable_5"
  input: "training/Adam/add_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_16"
  op: "Assign"
  input: "training/Adam/Variable_18"
  input: "training/Adam/add_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_17"
  op: "Assign"
  input: "lstm_2/bias"
  input: "training/Adam/sub_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_31"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_6/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_20/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_20"
  op: "Sub"
  input: "training/Adam/sub_20/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_32"
  op: "Mul"
  input: "training/Adam/sub_20"
  input: "training/Adam/gradients/AddN_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_19"
  op: "Add"
  input: "training/Adam/mul_31"
  input: "training/Adam/mul_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_33"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_19/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_21/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_21"
  op: "Sub"
  input: "training/Adam/sub_21/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_6"
  op: "Square"
  input: "training/Adam/gradients/AddN_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_34"
  op: "Mul"
  input: "training/Adam/sub_21"
  input: "training/Adam/Square_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_20"
  op: "Add"
  input: "training/Adam/mul_33"
  input: "training/Adam/mul_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_35"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_14"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_15"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_7/Minimum"
  op: "Minimum"
  input: "training/Adam/add_20"
  input: "training/Adam/Const_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_7"
  op: "Maximum"
  input: "training/Adam/clip_by_value_7/Minimum"
  input: "training/Adam/Const_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_7"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_21/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_21"
  op: "Add"
  input: "training/Adam/Sqrt_7"
  input: "training/Adam/add_21/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_7"
  op: "RealDiv"
  input: "training/Adam/mul_35"
  input: "training/Adam/add_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_22"
  op: "Sub"
  input: "lstm_3/kernel/read"
  input: "training/Adam/truediv_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_18"
  op: "Assign"
  input: "training/Adam/Variable_6"
  input: "training/Adam/add_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_19"
  op: "Assign"
  input: "training/Adam/Variable_19"
  input: "training/Adam/add_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_20"
  op: "Assign"
  input: "lstm_3/kernel"
  input: "training/Adam/sub_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_36"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_7/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_23/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_23"
  op: "Sub"
  input: "training/Adam/sub_23/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_37"
  op: "Mul"
  input: "training/Adam/sub_23"
  input: "training/Adam/gradients/AddN_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_22"
  op: "Add"
  input: "training/Adam/mul_36"
  input: "training/Adam/mul_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_38"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_20/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_24/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_24"
  op: "Sub"
  input: "training/Adam/sub_24/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_7"
  op: "Square"
  input: "training/Adam/gradients/AddN_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_39"
  op: "Mul"
  input: "training/Adam/sub_24"
  input: "training/Adam/Square_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_23"
  op: "Add"
  input: "training/Adam/mul_38"
  input: "training/Adam/mul_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_40"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_16"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_17"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_8/Minimum"
  op: "Minimum"
  input: "training/Adam/add_23"
  input: "training/Adam/Const_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_8"
  op: "Maximum"
  input: "training/Adam/clip_by_value_8/Minimum"
  input: "training/Adam/Const_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_8"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_24/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_24"
  op: "Add"
  input: "training/Adam/Sqrt_8"
  input: "training/Adam/add_24/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_8"
  op: "RealDiv"
  input: "training/Adam/mul_40"
  input: "training/Adam/add_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_25"
  op: "Sub"
  input: "lstm_3/recurrent_kernel/read"
  input: "training/Adam/truediv_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_21"
  op: "Assign"
  input: "training/Adam/Variable_7"
  input: "training/Adam/add_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_22"
  op: "Assign"
  input: "training/Adam/Variable_20"
  input: "training/Adam/add_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_23"
  op: "Assign"
  input: "lstm_3/recurrent_kernel"
  input: "training/Adam/sub_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_41"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_8/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_26/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_26"
  op: "Sub"
  input: "training/Adam/sub_26/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_42"
  op: "Mul"
  input: "training/Adam/sub_26"
  input: "training/Adam/gradients/AddN_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_25"
  op: "Add"
  input: "training/Adam/mul_41"
  input: "training/Adam/mul_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_43"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_21/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_27/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_27"
  op: "Sub"
  input: "training/Adam/sub_27/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_8"
  op: "Square"
  input: "training/Adam/gradients/AddN_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_44"
  op: "Mul"
  input: "training/Adam/sub_27"
  input: "training/Adam/Square_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_26"
  op: "Add"
  input: "training/Adam/mul_43"
  input: "training/Adam/mul_44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_45"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_18"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_19"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_9/Minimum"
  op: "Minimum"
  input: "training/Adam/add_26"
  input: "training/Adam/Const_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_9"
  op: "Maximum"
  input: "training/Adam/clip_by_value_9/Minimum"
  input: "training/Adam/Const_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_9"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_27/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_27"
  op: "Add"
  input: "training/Adam/Sqrt_9"
  input: "training/Adam/add_27/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_9"
  op: "RealDiv"
  input: "training/Adam/mul_45"
  input: "training/Adam/add_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_28"
  op: "Sub"
  input: "lstm_3/bias/read"
  input: "training/Adam/truediv_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_24"
  op: "Assign"
  input: "training/Adam/Variable_8"
  input: "training/Adam/add_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_25"
  op: "Assign"
  input: "training/Adam/Variable_21"
  input: "training/Adam/add_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_26"
  op: "Assign"
  input: "lstm_3/bias"
  input: "training/Adam/sub_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_46"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_9/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_29/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_29"
  op: "Sub"
  input: "training/Adam/sub_29/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_47"
  op: "Mul"
  input: "training/Adam/sub_29"
  input: "training/Adam/gradients/dense_1/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_28"
  op: "Add"
  input: "training/Adam/mul_46"
  input: "training/Adam/mul_47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_48"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_22/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_30/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_30"
  op: "Sub"
  input: "training/Adam/sub_30/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_9"
  op: "Square"
  input: "training/Adam/gradients/dense_1/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_49"
  op: "Mul"
  input: "training/Adam/sub_30"
  input: "training/Adam/Square_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_29"
  op: "Add"
  input: "training/Adam/mul_48"
  input: "training/Adam/mul_49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_50"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_20"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_21"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_10/Minimum"
  op: "Minimum"
  input: "training/Adam/add_29"
  input: "training/Adam/Const_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_10"
  op: "Maximum"
  input: "training/Adam/clip_by_value_10/Minimum"
  input: "training/Adam/Const_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_10"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_30/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_30"
  op: "Add"
  input: "training/Adam/Sqrt_10"
  input: "training/Adam/add_30/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_10"
  op: "RealDiv"
  input: "training/Adam/mul_50"
  input: "training/Adam/add_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_31"
  op: "Sub"
  input: "dense_1/kernel/read"
  input: "training/Adam/truediv_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_27"
  op: "Assign"
  input: "training/Adam/Variable_9"
  input: "training/Adam/add_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_28"
  op: "Assign"
  input: "training/Adam/Variable_22"
  input: "training/Adam/add_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_22"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_29"
  op: "Assign"
  input: "dense_1/kernel"
  input: "training/Adam/sub_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_51"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_10/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_32/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_32"
  op: "Sub"
  input: "training/Adam/sub_32/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_52"
  op: "Mul"
  input: "training/Adam/sub_32"
  input: "training/Adam/gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_31"
  op: "Add"
  input: "training/Adam/mul_51"
  input: "training/Adam/mul_52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_53"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_23/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_33/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_33"
  op: "Sub"
  input: "training/Adam/sub_33/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_10"
  op: "Square"
  input: "training/Adam/gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_54"
  op: "Mul"
  input: "training/Adam/sub_33"
  input: "training/Adam/Square_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_32"
  op: "Add"
  input: "training/Adam/mul_53"
  input: "training/Adam/mul_54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_55"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_22"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_23"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_11/Minimum"
  op: "Minimum"
  input: "training/Adam/add_32"
  input: "training/Adam/Const_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_11"
  op: "Maximum"
  input: "training/Adam/clip_by_value_11/Minimum"
  input: "training/Adam/Const_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_11"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_33/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_33"
  op: "Add"
  input: "training/Adam/Sqrt_11"
  input: "training/Adam/add_33/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_11"
  op: "RealDiv"
  input: "training/Adam/mul_55"
  input: "training/Adam/add_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_34"
  op: "Sub"
  input: "dense_1/bias/read"
  input: "training/Adam/truediv_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_30"
  op: "Assign"
  input: "training/Adam/Variable_10"
  input: "training/Adam/add_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_31"
  op: "Assign"
  input: "training/Adam/Variable_23"
  input: "training/Adam/add_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_23"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_32"
  op: "Assign"
  input: "dense_1/bias"
  input: "training/Adam/sub_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_56"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_11/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_35/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_35"
  op: "Sub"
  input: "training/Adam/sub_35/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_57"
  op: "Mul"
  input: "training/Adam/sub_35"
  input: "training/Adam/gradients/dense_2/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_34"
  op: "Add"
  input: "training/Adam/mul_56"
  input: "training/Adam/mul_57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_58"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_24/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_36/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_36"
  op: "Sub"
  input: "training/Adam/sub_36/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_11"
  op: "Square"
  input: "training/Adam/gradients/dense_2/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_59"
  op: "Mul"
  input: "training/Adam/sub_36"
  input: "training/Adam/Square_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_35"
  op: "Add"
  input: "training/Adam/mul_58"
  input: "training/Adam/mul_59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_60"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_24"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_25"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_12/Minimum"
  op: "Minimum"
  input: "training/Adam/add_35"
  input: "training/Adam/Const_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_12"
  op: "Maximum"
  input: "training/Adam/clip_by_value_12/Minimum"
  input: "training/Adam/Const_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_12"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_36/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_36"
  op: "Add"
  input: "training/Adam/Sqrt_12"
  input: "training/Adam/add_36/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_12"
  op: "RealDiv"
  input: "training/Adam/mul_60"
  input: "training/Adam/add_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_37"
  op: "Sub"
  input: "dense_2/kernel/read"
  input: "training/Adam/truediv_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_33"
  op: "Assign"
  input: "training/Adam/Variable_11"
  input: "training/Adam/add_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_34"
  op: "Assign"
  input: "training/Adam/Variable_24"
  input: "training/Adam/add_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_24"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_35"
  op: "Assign"
  input: "dense_2/kernel"
  input: "training/Adam/sub_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/mul_61"
  op: "Mul"
  input: "Adam/beta_1/read"
  input: "training/Adam/Variable_12/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_38/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_38"
  op: "Sub"
  input: "training/Adam/sub_38/x"
  input: "Adam/beta_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_62"
  op: "Mul"
  input: "training/Adam/sub_38"
  input: "training/Adam/gradients/dense_2/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_37"
  op: "Add"
  input: "training/Adam/mul_61"
  input: "training/Adam/mul_62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_63"
  op: "Mul"
  input: "Adam/beta_2/read"
  input: "training/Adam/Variable_25/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_39/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_39"
  op: "Sub"
  input: "training/Adam/sub_39/x"
  input: "Adam/beta_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Square_12"
  op: "Square"
  input: "training/Adam/gradients/dense_2/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_64"
  op: "Mul"
  input: "training/Adam/sub_39"
  input: "training/Adam/Square_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_38"
  op: "Add"
  input: "training/Adam/mul_63"
  input: "training/Adam/mul_64"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/mul_65"
  op: "Mul"
  input: "training/Adam/mul"
  input: "training/Adam/add_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Const_26"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/Const_27"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/Adam/clip_by_value_13/Minimum"
  op: "Minimum"
  input: "training/Adam/add_38"
  input: "training/Adam/Const_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/clip_by_value_13"
  op: "Maximum"
  input: "training/Adam/clip_by_value_13/Minimum"
  input: "training/Adam/Const_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Sqrt_13"
  op: "Sqrt"
  input: "training/Adam/clip_by_value_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/add_39/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/add_39"
  op: "Add"
  input: "training/Adam/Sqrt_13"
  input: "training/Adam/add_39/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/truediv_13"
  op: "RealDiv"
  input: "training/Adam/mul_65"
  input: "training/Adam/add_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/sub_40"
  op: "Sub"
  input: "dense_2/bias/read"
  input: "training/Adam/truediv_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Assign_36"
  op: "Assign"
  input: "training/Adam/Variable_12"
  input: "training/Adam/add_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_37"
  op: "Assign"
  input: "training/Adam/Variable_25"
  input: "training/Adam/add_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_25"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/Assign_38"
  op: "Assign"
  input: "dense_2/bias"
  input: "training/Adam/sub_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/group_deps"
  op: "NoOp"
  input: "^loss/mul"
  input: "^metrics/acc/Mean"
  input: "^training/Adam/AssignAdd"
  input: "^training/Adam/Assign"
  input: "^training/Adam/Assign_1"
  input: "^training/Adam/Assign_2"
  input: "^training/Adam/Assign_3"
  input: "^training/Adam/Assign_4"
  input: "^training/Adam/Assign_5"
  input: "^training/Adam/Assign_6"
  input: "^training/Adam/Assign_7"
  input: "^training/Adam/Assign_8"
  input: "^training/Adam/Assign_9"
  input: "^training/Adam/Assign_10"
  input: "^training/Adam/Assign_11"
  input: "^training/Adam/Assign_12"
  input: "^training/Adam/Assign_13"
  input: "^training/Adam/Assign_14"
  input: "^training/Adam/Assign_15"
  input: "^training/Adam/Assign_16"
  input: "^training/Adam/Assign_17"
  input: "^training/Adam/Assign_18"
  input: "^training/Adam/Assign_19"
  input: "^training/Adam/Assign_20"
  input: "^training/Adam/Assign_21"
  input: "^training/Adam/Assign_22"
  input: "^training/Adam/Assign_23"
  input: "^training/Adam/Assign_24"
  input: "^training/Adam/Assign_25"
  input: "^training/Adam/Assign_26"
  input: "^training/Adam/Assign_27"
  input: "^training/Adam/Assign_28"
  input: "^training/Adam/Assign_29"
  input: "^training/Adam/Assign_30"
  input: "^training/Adam/Assign_31"
  input: "^training/Adam/Assign_32"
  input: "^training/Adam/Assign_33"
  input: "^training/Adam/Assign_34"
  input: "^training/Adam/Assign_35"
  input: "^training/Adam/Assign_36"
  input: "^training/Adam/Assign_37"
  input: "^training/Adam/Assign_38"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^loss/mul"
  input: "^metrics/acc/Mean"
}
node {
  name: "IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "lstm_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "lstm_1/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "lstm_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "lstm_2/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "lstm_2/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "lstm_2/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "lstm_3/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "lstm_3/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "lstm_3/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_3/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "dense_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "dense_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "dense_2/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "dense_2/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_2/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "Adam/iterations"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/iterations"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "Adam/lr"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/lr"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "Adam/beta_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "Adam/beta_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/beta_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "Adam/decay"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Adam/decay"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_4"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_5"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_6"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_7"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_8"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_9"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_28"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_10"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_29"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_11"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_30"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_12"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_12"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_31"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_13"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_13"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_32"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_14"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_14"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_33"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_15"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_15"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_34"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_16"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_16"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_35"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_17"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_17"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_36"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_18"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_18"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_37"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_19"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_19"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_38"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_20"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_20"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_39"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_21"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_21"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_40"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_22"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_22"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_41"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_23"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_23"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_42"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_24"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_24"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_43"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_25"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_25"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_44"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_26"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_26"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_45"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_27"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_27"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_46"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_28"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_28"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_47"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_29"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_29"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_48"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_30"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_30"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_49"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_31"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_31"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_50"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_32"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_32"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_51"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_33"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_33"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_52"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_34"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_34"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_53"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_35"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_35"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_54"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_36"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_36"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_55"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_37"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_37"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_56"
  op: "IsVariableInitialized"
  input: "training/Adam/Variable_38"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/Variable_38"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^lstm_1/kernel/Assign"
  input: "^lstm_1/recurrent_kernel/Assign"
  input: "^lstm_1/bias/Assign"
  input: "^lstm_2/kernel/Assign"
  input: "^lstm_2/recurrent_kernel/Assign"
  input: "^lstm_2/bias/Assign"
  input: "^lstm_3/kernel/Assign"
  input: "^lstm_3/recurrent_kernel/Assign"
  input: "^lstm_3/bias/Assign"
  input: "^dense_1/kernel/Assign"
  input: "^dense_1/bias/Assign"
  input: "^dense_2/kernel/Assign"
  input: "^dense_2/bias/Assign"
  input: "^Adam/iterations/Assign"
  input: "^Adam/lr/Assign"
  input: "^Adam/beta_1/Assign"
  input: "^Adam/beta_2/Assign"
  input: "^Adam/decay/Assign"
  input: "^training/Adam/Variable/Assign"
  input: "^training/Adam/Variable_1/Assign"
  input: "^training/Adam/Variable_2/Assign"
  input: "^training/Adam/Variable_3/Assign"
  input: "^training/Adam/Variable_4/Assign"
  input: "^training/Adam/Variable_5/Assign"
  input: "^training/Adam/Variable_6/Assign"
  input: "^training/Adam/Variable_7/Assign"
  input: "^training/Adam/Variable_8/Assign"
  input: "^training/Adam/Variable_9/Assign"
  input: "^training/Adam/Variable_10/Assign"
  input: "^training/Adam/Variable_11/Assign"
  input: "^training/Adam/Variable_12/Assign"
  input: "^training/Adam/Variable_13/Assign"
  input: "^training/Adam/Variable_14/Assign"
  input: "^training/Adam/Variable_15/Assign"
  input: "^training/Adam/Variable_16/Assign"
  input: "^training/Adam/Variable_17/Assign"
  input: "^training/Adam/Variable_18/Assign"
  input: "^training/Adam/Variable_19/Assign"
  input: "^training/Adam/Variable_20/Assign"
  input: "^training/Adam/Variable_21/Assign"
  input: "^training/Adam/Variable_22/Assign"
  input: "^training/Adam/Variable_23/Assign"
  input: "^training/Adam/Variable_24/Assign"
  input: "^training/Adam/Variable_25/Assign"
  input: "^training/Adam/Variable_26/Assign"
  input: "^training/Adam/Variable_27/Assign"
  input: "^training/Adam/Variable_28/Assign"
  input: "^training/Adam/Variable_29/Assign"
  input: "^training/Adam/Variable_30/Assign"
  input: "^training/Adam/Variable_31/Assign"
  input: "^training/Adam/Variable_32/Assign"
  input: "^training/Adam/Variable_33/Assign"
  input: "^training/Adam/Variable_34/Assign"
  input: "^training/Adam/Variable_35/Assign"
  input: "^training/Adam/Variable_36/Assign"
  input: "^training/Adam/Variable_37/Assign"
  input: "^training/Adam/Variable_38/Assign"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^dense_2/Softmax"
}
versions {
  producer: 26
}
